
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001df38  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002910  0801e1d8  0801e1d8  0001f1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020ae8  08020ae8  00021ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  08020af0  08020af0  00021af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020b30  08020b30  00021b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013f0  24000000  08020b34  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00068108  240013f0  08021f24  000233f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240694f8  08021f24  000234f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000233f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000282c9  00000000  00000000  0002341e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fcf  00000000  00000000  0004b6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b40  00000000  00000000  000506b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014f4  00000000  00000000  000521f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fc5c  00000000  00000000  000536ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b63c  00000000  00000000  00093348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d4db  00000000  00000000  000be984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0023be5f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e9c  00000000  00000000  0023bed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00243d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013f0 	.word	0x240013f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801e1c0 	.word	0x0801e1c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f4 	.word	0x240013f4
 80002dc:	0801e1c0 	.word	0x0801e1c0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800074c:	f00b fb4e 	bl	800bdec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000750:	4b5a      	ldr	r3, [pc, #360]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000758:	f000 f986 	bl	8000a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800075c:	4b58      	ldr	r3, [pc, #352]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4013      	ands	r3, r2
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 8090 	bne.w	800088a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01e      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000770:	2208      	movs	r2, #8
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2b00      	cmp	r3, #0
 8000780:	d015      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f023 0307 	bic.w	r3, r3, #7
 8000788:	3308      	adds	r3, #8
 800078a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00b      	beq.n	80007ae <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800079a:	f383 8811 	msr	BASEPRI, r3
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	f3bf 8f4f 	dsb	sy
 80007a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d06a      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
 80007b4:	4b43      	ldr	r3, [pc, #268]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d865      	bhi.n	800088a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007be:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007c2:	4b41      	ldr	r3, [pc, #260]	@ (80008c8 <pvPortMallocMicroROS+0x188>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007c8:	e004      	b.n	80007d4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80007ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d903      	bls.n	80007e6 <pvPortMallocMicroROS+0xa6>
 80007de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f1      	bne.n	80007ca <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <pvPortMallocMicroROS+0x17c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d04c      	beq.n	800088a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2208      	movs	r2, #8
 80007f6:	4413      	add	r3, r2
 80007f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80007fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1ad2      	subs	r2, r2, r3
 800080a:	2308      	movs	r3, #8
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	429a      	cmp	r2, r3
 8000810:	d920      	bls.n	8000854 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00b      	beq.n	800083c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	613b      	str	r3, [r7, #16]
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800084e:	69b8      	ldr	r0, [r7, #24]
 8000850:	f000 f96e 	bl	8000b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000860:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d203      	bcs.n	8000876 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <pvPortMallocMicroROS+0x184>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <pvPortMallocMicroROS+0x18c>)
 8000874:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <pvPortMallocMicroROS+0x180>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	431a      	orrs	r2, r3
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800088a:	f00b fabd 	bl	800be08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00b      	beq.n	80008b0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	60fb      	str	r3, [r7, #12]
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80008b0:	69fb      	ldr	r3, [r7, #28]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	24032154 	.word	0x24032154
 80008c0:	24032160 	.word	0x24032160
 80008c4:	24032158 	.word	0x24032158
 80008c8:	2403214c 	.word	0x2403214c
 80008cc:	2403215c 	.word	0x2403215c

080008d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d04a      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008e2:	2308      	movs	r3, #8
 80008e4:	425b      	negs	r3, r3
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10b      	bne.n	8000916 <vPortFreeMicroROS+0x46>
	__asm volatile
 80008fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	60fb      	str	r3, [r7, #12]
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	e7fd      	b.n	8000912 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00b      	beq.n	8000936 <vPortFreeMicroROS+0x66>
	__asm volatile
 800091e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	60bb      	str	r3, [r7, #8]
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	e7fd      	b.n	8000932 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d019      	beq.n	8000978 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d115      	bne.n	8000978 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <vPortFreeMicroROS+0xb0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800095c:	f00b fa46 	bl	800bdec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4413      	add	r3, r2
 800096a:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <vPortFreeMicroROS+0xb4>)
 800096c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800096e:	6938      	ldr	r0, [r7, #16]
 8000970:	f000 f8de 	bl	8000b30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000974:	f00b fa48 	bl	800be08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	24032160 	.word	0x24032160
 8000984:	24032158 	.word	0x24032158

08000988 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000994:	2308      	movs	r3, #8
 8000996:	425b      	negs	r3, r3
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4413      	add	r3, r2
 800099c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <getBlockSize+0x38>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	return count;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	24032160 	.word	0x24032160

080009c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009ce:	f00b fa0d 	bl	800bdec <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80009d2:	6838      	ldr	r0, [r7, #0]
 80009d4:	f7ff feb4 	bl	8000740 <pvPortMallocMicroROS>
 80009d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d017      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d014      	beq.n	8000a10 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffce 	bl	8000988 <getBlockSize>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2208      	movs	r2, #8
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d201      	bcs.n	8000a00 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	68b8      	ldr	r0, [r7, #8]
 8000a06:	f01c fd9c 	bl	801d542 <memcpy>

		vPortFreeMicroROS(pv);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ff60 	bl	80008d0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a10:	f00b f9fa 	bl	800be08 <xTaskResumeAll>

	return newmem;
 8000a14:	68bb      	ldr	r3, [r7, #8]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a28:	f00b f9e0 	bl	800bdec <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff fe82 	bl	8000740 <pvPortMallocMicroROS>
 8000a3c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a42:	e004      	b.n	8000a4e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	613a      	str	r2, [r7, #16]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	617a      	str	r2, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1f5      	bne.n	8000a44 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a58:	f00b f9d6 	bl	800be08 <xTaskResumeAll>
  	return mem;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <prvHeapInit+0xac>)
 8000a70:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a74:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00c      	beq.n	8000a9a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3307      	adds	r3, #7
 8000a84:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f023 0307 	bic.w	r3, r3, #7
 8000a8c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a20      	ldr	r2, [pc, #128]	@ (8000b18 <prvHeapInit+0xb0>)
 8000a96:	4413      	add	r3, r2
 8000a98:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <prvHeapInit+0xb4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4a16      	ldr	r2, [pc, #88]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ac6:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <prvHeapInit+0xb8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <prvHeapInit+0xb8>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <prvHeapInit+0xbc>)
 8000af4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <prvHeapInit+0xc0>)
 8000afc:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <prvHeapInit+0xc4>)
 8000b00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	00030d40 	.word	0x00030d40
 8000b18:	2400140c 	.word	0x2400140c
 8000b1c:	2403214c 	.word	0x2403214c
 8000b20:	24032154 	.word	0x24032154
 8000b24:	2403215c 	.word	0x2403215c
 8000b28:	24032158 	.word	0x24032158
 8000b2c:	24032160 	.word	0x24032160

08000b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <prvInsertBlockIntoFreeList+0xac>)
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e002      	b.n	8000b44 <prvInsertBlockIntoFreeList+0x14>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8f7      	bhi.n	8000b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	4413      	add	r3, r2
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d108      	bne.n	8000b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	441a      	add	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d118      	bne.n	8000bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d00d      	beq.n	8000bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e008      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <prvInsertBlockIntoFreeList+0xb0>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e003      	b.n	8000bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d002      	beq.n	8000bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2403214c 	.word	0x2403214c
 8000be0:	24032154 	.word	0x24032154

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <MX_DMA_Init+0x4c>)
 8000bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	200b      	movs	r0, #11
 8000c0e:	f001 fbdb 	bl	80023c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c12:	200b      	movs	r0, #11
 8000c14:	f001 fbf2 	bl	80023fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f001 fbd3 	bl	80023c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c22:	200c      	movs	r0, #12
 8000c24:	f001 fbea 	bl	80023fc <HAL_NVIC_EnableIRQ>

}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400

08000c34 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c42:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c48:	4904      	ldr	r1, [pc, #16]	@ (8000c5c <cubemx_transport_open+0x28>)
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f007 fe46 	bl	80088dc <HAL_UART_Receive_DMA>
    return true;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	24032164 	.word	0x24032164

08000c60 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c6e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f007 fe7f 	bl	8008974 <HAL_UART_DMAStop>
    return true;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c94:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d11b      	bne.n	8000cd8 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f007 fd97 	bl	80087dc <HAL_UART_Transmit_DMA>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cb2:	e002      	b.n	8000cba <cubemx_transport_write+0x3a>
            osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f009 ff29 	bl	800ab0c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d104      	bne.n	8000cca <cubemx_transport_write+0x4a>
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	d1f4      	bne.n	8000cb4 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <cubemx_transport_write+0x54>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	e002      	b.n	8000cda <cubemx_transport_write+0x5a>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e000      	b.n	8000cda <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000cd8:	2300      	movs	r3, #0
    }
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cf8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfe:	b672      	cpsid	i
}
 8000d00:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8000e74 <cubemx_transport_read+0x190>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d068      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a57      	ldr	r2, [pc, #348]	@ (8000e78 <cubemx_transport_read+0x194>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d061      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a55      	ldr	r2, [pc, #340]	@ (8000e7c <cubemx_transport_read+0x198>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05a      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a52      	ldr	r2, [pc, #328]	@ (8000e80 <cubemx_transport_read+0x19c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d053      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a50      	ldr	r2, [pc, #320]	@ (8000e84 <cubemx_transport_read+0x1a0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d04c      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a4d      	ldr	r2, [pc, #308]	@ (8000e88 <cubemx_transport_read+0x1a4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d045      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a4b      	ldr	r2, [pc, #300]	@ (8000e8c <cubemx_transport_read+0x1a8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d03e      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <cubemx_transport_read+0x1ac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d037      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a46      	ldr	r2, [pc, #280]	@ (8000e94 <cubemx_transport_read+0x1b0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d030      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <cubemx_transport_read+0x1b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d029      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a41      	ldr	r2, [pc, #260]	@ (8000e9c <cubemx_transport_read+0x1b8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d022      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ea0 <cubemx_transport_read+0x1bc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01b      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea4 <cubemx_transport_read+0x1c0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d014      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a39      	ldr	r2, [pc, #228]	@ (8000ea8 <cubemx_transport_read+0x1c4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a37      	ldr	r2, [pc, #220]	@ (8000eac <cubemx_transport_read+0x1c8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d006      	beq.n	8000de2 <cubemx_transport_read+0xfe>
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a34      	ldr	r2, [pc, #208]	@ (8000eb0 <cubemx_transport_read+0x1cc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d107      	bne.n	8000df2 <cubemx_transport_read+0x10e>
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000df0:	e006      	b.n	8000e00 <cubemx_transport_read+0x11c>
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e00:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e02:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e04:	b662      	cpsie	i
}
 8000e06:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f009 fe7c 	bl	800ab0c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b26      	ldr	r3, [pc, #152]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d104      	bne.n	8000e2a <cubemx_transport_read+0x146>
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f6ff af6a 	blt.w	8000cfe <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e2e:	e011      	b.n	8000e54 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000e30:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	440b      	add	r3, r1
 8000e3a:	4920      	ldr	r1, [pc, #128]	@ (8000ebc <cubemx_transport_read+0x1d8>)
 8000e3c:	5c8a      	ldrb	r2, [r1, r2]
 8000e3e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e4c:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	3301      	adds	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <cubemx_transport_read+0x1d4>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <cubemx_transport_read+0x1d0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d003      	beq.n	8000e68 <cubemx_transport_read+0x184>
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d3e3      	bcc.n	8000e30 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000e68:	69bb      	ldr	r3, [r7, #24]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020010 	.word	0x40020010
 8000e78:	40020028 	.word	0x40020028
 8000e7c:	40020040 	.word	0x40020040
 8000e80:	40020058 	.word	0x40020058
 8000e84:	40020070 	.word	0x40020070
 8000e88:	40020088 	.word	0x40020088
 8000e8c:	400200a0 	.word	0x400200a0
 8000e90:	400200b8 	.word	0x400200b8
 8000e94:	40020410 	.word	0x40020410
 8000e98:	40020428 	.word	0x40020428
 8000e9c:	40020440 	.word	0x40020440
 8000ea0:	40020458 	.word	0x40020458
 8000ea4:	40020470 	.word	0x40020470
 8000ea8:	40020488 	.word	0x40020488
 8000eac:	400204a0 	.word	0x400204a0
 8000eb0:	400204b8 	.word	0x400204b8
 8000eb4:	24032968 	.word	0x24032968
 8000eb8:	24032964 	.word	0x24032964
 8000ebc:	24032164 	.word	0x24032164

08000ec0 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  const autoware_control_msgs__msg__Control * control_cmd_msg_ = (const autoware_control_msgs__msg__Control * )xMsgIn;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 0);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <control_cmd_callback+0x24>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	4a03      	ldr	r2, [pc, #12]	@ (8000ee4 <control_cmd_callback+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	2403297c 	.word	0x2403297c

08000ee8 <gear_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the gear command and save in gear_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void gear_cmd_callback(const void * xMsgIn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__GearCommand * gear_cmd_msg_ = (const autoware_vehicle_msgs__msg__GearCommand * )xMsgIn;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 1);
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <gear_cmd_callback+0x24>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <gear_cmd_callback+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	2403297c 	.word	0x2403297c

08000f10 <turn_indicators_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the turn lights commands and save in turn_indicators_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void turn_indicators_cmd_callback(const void * xMsgIn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * turn_indicators_cmd_msg_ = (const autoware_vehicle_msgs__msg__TurnIndicatorsCommand * )xMsgIn;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 2);
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <turn_indicators_cmd_callback+0x24>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	4a03      	ldr	r2, [pc, #12]	@ (8000f34 <turn_indicators_cmd_callback+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	2403297c 	.word	0x2403297c

08000f38 <hazard_lights_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the hazard lights commands and save in hazard_lights_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void hazard_lights_cmd_callback(const void * xMsgIn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  const autoware_vehicle_msgs__msg__HazardLightsCommand * hazard_lights_cmd_msg_ = (const autoware_vehicle_msgs__msg__HazardLightsCommand * )xMsgIn;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 3);
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <hazard_lights_cmd_callback+0x24>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	4a03      	ldr	r2, [pc, #12]	@ (8000f5c <hazard_lights_cmd_callback+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	2403297c 	.word	0x2403297c

08000f60 <actuation_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in actuation_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void actuation_cmd_callback(const void * xMsgIn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__ActuationCommandStamped * actuation_cmd_msg_ = (const tier4_vehicle_msgs__msg__ActuationCommandStamped * )xMsgIn;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 4);
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <actuation_cmd_callback+0x24>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	4a03      	ldr	r2, [pc, #12]	@ (8000f84 <actuation_cmd_callback+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	2403297c 	.word	0x2403297c

08000f88 <emergency_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in emergency_msg_ 
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void emergency_callback(const void * xMsgIn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * emergency_msg_ = (const tier4_vehicle_msgs__msg__VehicleEmergencyStamped * )xMsgIn;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	60fb      	str	r3, [r7, #12]
  xSubscribersRecieved = xSubscribersRecieved | (0x1 << 5);
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <emergency_callback+0x24>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	4a03      	ldr	r2, [pc, #12]	@ (8000fac <emergency_callback+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	2403297c 	.word	0x2403297c

08000fb0 <control_mode_cmd_callback>:
  * @brief  ROS service server callback to change the control mode and return a status about the change
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, void * xResponseMsg)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  const autoware_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  //xResponseMsg = &control_mode_response_msg_;
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 8000fd0:	480e      	ldr	r0, [pc, #56]	@ (800100c <MX_FREERTOS_Init+0x40>)
 8000fd2:	f009 fdb6 	bl	800ab42 <osMutexNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <MX_FREERTOS_Init+0x44>)
 8000fda:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_FREERTOS_Init+0x48>)
 8000fde:	f009 fdb0 	bl	800ab42 <osMutexNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8001018 <MX_FREERTOS_Init+0x4c>)
 8000fe6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800101c <MX_FREERTOS_Init+0x50>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <MX_FREERTOS_Init+0x54>)
 8000fee:	f009 fcfb 	bl	800a9e8 <osThreadNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <MX_FREERTOS_Init+0x58>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <MX_FREERTOS_Init+0x5c>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480b      	ldr	r0, [pc, #44]	@ (800102c <MX_FREERTOS_Init+0x60>)
 8000ffe:	f009 fcf3 	bl	800a9e8 <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <MX_FREERTOS_Init+0x64>)
 8001006:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	0801e4b4 	.word	0x0801e4b4
 8001010:	24032974 	.word	0x24032974
 8001014:	0801e4c4 	.word	0x0801e4c4
 8001018:	24032978 	.word	0x24032978
 800101c:	0801e46c 	.word	0x0801e46c
 8001020:	08001ed9 	.word	0x08001ed9
 8001024:	2403296c 	.word	0x2403296c
 8001028:	0801e490 	.word	0x0801e490
 800102c:	08001461 	.word	0x08001461
 8001030:	24032970 	.word	0x24032970

08001034 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b8f      	ldr	r3, [pc, #572]	@ (8001288 <MX_GPIO_Init+0x254>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001050:	4a8d      	ldr	r2, [pc, #564]	@ (8001288 <MX_GPIO_Init+0x254>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105a:	4b8b      	ldr	r3, [pc, #556]	@ (8001288 <MX_GPIO_Init+0x254>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001068:	4b87      	ldr	r3, [pc, #540]	@ (8001288 <MX_GPIO_Init+0x254>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106e:	4a86      	ldr	r2, [pc, #536]	@ (8001288 <MX_GPIO_Init+0x254>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001078:	4b83      	ldr	r3, [pc, #524]	@ (8001288 <MX_GPIO_Init+0x254>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b80      	ldr	r3, [pc, #512]	@ (8001288 <MX_GPIO_Init+0x254>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108c:	4a7e      	ldr	r2, [pc, #504]	@ (8001288 <MX_GPIO_Init+0x254>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001096:	4b7c      	ldr	r3, [pc, #496]	@ (8001288 <MX_GPIO_Init+0x254>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b78      	ldr	r3, [pc, #480]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010aa:	4a77      	ldr	r2, [pc, #476]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b4:	4b74      	ldr	r3, [pc, #464]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	4b71      	ldr	r3, [pc, #452]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	4a6f      	ldr	r2, [pc, #444]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e0:	4b69      	ldr	r3, [pc, #420]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	4a68      	ldr	r2, [pc, #416]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f0:	4b65      	ldr	r3, [pc, #404]	@ (8001288 <MX_GPIO_Init+0x254>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	4b62      	ldr	r3, [pc, #392]	@ (8001288 <MX_GPIO_Init+0x254>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	4a60      	ldr	r2, [pc, #384]	@ (8001288 <MX_GPIO_Init+0x254>)
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110e:	4b5e      	ldr	r3, [pc, #376]	@ (8001288 <MX_GPIO_Init+0x254>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001122:	485a      	ldr	r0, [pc, #360]	@ (800128c <MX_GPIO_Init+0x258>)
 8001124:	f004 f970 	bl	8005408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800112e:	4858      	ldr	r0, [pc, #352]	@ (8001290 <MX_GPIO_Init+0x25c>)
 8001130:	f004 f96a 	bl	8005408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2102      	movs	r1, #2
 8001138:	4856      	ldr	r0, [pc, #344]	@ (8001294 <MX_GPIO_Init+0x260>)
 800113a:	f004 f965 	bl	8005408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4851      	ldr	r0, [pc, #324]	@ (8001298 <MX_GPIO_Init+0x264>)
 8001154:	f003 ffa8 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001158:	2332      	movs	r3, #50	@ 0x32
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001168:	230b      	movs	r3, #11
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4849      	ldr	r0, [pc, #292]	@ (8001298 <MX_GPIO_Init+0x264>)
 8001174:	f003 ff98 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001178:	2386      	movs	r3, #134	@ 0x86
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001188:	230b      	movs	r3, #11
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4842      	ldr	r0, [pc, #264]	@ (800129c <MX_GPIO_Init+0x268>)
 8001194:	f003 ff88 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001198:	f244 0301 	movw	r3, #16385	@ 0x4001
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4836      	ldr	r0, [pc, #216]	@ (800128c <MX_GPIO_Init+0x258>)
 80011b2:	f003 ff79 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c8:	230b      	movs	r3, #11
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	482e      	ldr	r0, [pc, #184]	@ (800128c <MX_GPIO_Init+0x258>)
 80011d4:	f003 ff68 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80011d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4827      	ldr	r0, [pc, #156]	@ (8001290 <MX_GPIO_Init+0x25c>)
 80011f2:	f003 ff59 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4825      	ldr	r0, [pc, #148]	@ (80012a0 <MX_GPIO_Init+0x26c>)
 800120c:	f003 ff4c 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001210:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001222:	230a      	movs	r3, #10
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	481b      	ldr	r0, [pc, #108]	@ (800129c <MX_GPIO_Init+0x268>)
 800122e:	f003 ff3b 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001232:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001244:	230b      	movs	r3, #11
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4814      	ldr	r0, [pc, #80]	@ (80012a0 <MX_GPIO_Init+0x26c>)
 8001250:	f003 ff2a 	bl	80050a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	480a      	ldr	r0, [pc, #40]	@ (8001294 <MX_GPIO_Init+0x260>)
 800126c:	f003 ff1c 	bl	80050a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2107      	movs	r1, #7
 8001274:	2017      	movs	r0, #23
 8001276:	f001 f8a7 	bl	80023c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800127a:	2017      	movs	r0, #23
 800127c:	f001 f8be 	bl	80023fc <HAL_NVIC_EnableIRQ>

}
 8001280:	bf00      	nop
 8001282:	3730      	adds	r7, #48	@ 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	58024400 	.word	0x58024400
 800128c:	58020400 	.word	0x58020400
 8001290:	58020c00 	.word	0x58020c00
 8001294:	58021000 	.word	0x58021000
 8001298:	58020800 	.word	0x58020800
 800129c:	58020000 	.word	0x58020000
 80012a0:	58021800 	.word	0x58021800

080012a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a8:	f000 ff6e 	bl	8002188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ac:	f000 f80e 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b0:	f7ff fec0 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b4:	f7ff fc96 	bl	8000be4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80012b8:	f000 fe18 	bl	8001eec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012bc:	f009 fb4a 	bl	800a954 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80012c0:	f7ff fe84 	bl	8000fcc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012c4:	f009 fb6a 	bl	800a99c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <main+0x24>

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09e      	sub	sp, #120	@ 0x78
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d6:	224c      	movs	r2, #76	@ 0x4c
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f01c f812 	bl	801d304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2220      	movs	r2, #32
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f01c f80b 	bl	801d304 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012ee:	2002      	movs	r0, #2
 80012f0:	f004 f8c8 	bl	8005484 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <SystemClock_Config+0x154>)
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	4a48      	ldr	r2, [pc, #288]	@ (8001420 <SystemClock_Config+0x154>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001304:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <SystemClock_Config+0x154>)
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b45      	ldr	r3, [pc, #276]	@ (8001424 <SystemClock_Config+0x158>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a44      	ldr	r2, [pc, #272]	@ (8001424 <SystemClock_Config+0x158>)
 8001314:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b42      	ldr	r3, [pc, #264]	@ (8001424 <SystemClock_Config+0x158>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001326:	bf00      	nop
 8001328:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <SystemClock_Config+0x158>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001334:	d1f8      	bne.n	8001328 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <SystemClock_Config+0x15c>)
 8001338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800133c:	4a3a      	ldr	r2, [pc, #232]	@ (8001428 <SystemClock_Config+0x15c>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001346:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <SystemClock_Config+0x15c>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	4b32      	ldr	r3, [pc, #200]	@ (8001424 <SystemClock_Config+0x158>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a31      	ldr	r2, [pc, #196]	@ (8001424 <SystemClock_Config+0x158>)
 800135e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <SystemClock_Config+0x158>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <SystemClock_Config+0x154>)
 8001370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001372:	4a2b      	ldr	r2, [pc, #172]	@ (8001420 <SystemClock_Config+0x154>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800137a:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <SystemClock_Config+0x154>)
 800137c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001386:	bf00      	nop
 8001388:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <SystemClock_Config+0x158>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001394:	d1f8      	bne.n	8001388 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8001396:	2310      	movs	r3, #16
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800139e:	2320      	movs	r3, #32
 80013a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 80013ae:	23f0      	movs	r3, #240	@ 0xf0
 80013b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b6:	2304      	movs	r3, #4
 80013b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80013be:	2308      	movs	r3, #8
 80013c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 f892 	bl	80054f8 <HAL_RCC_OscConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x112>
  {
    Error_Handler();
 80013da:	f000 f839 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013de:	233f      	movs	r3, #63	@ 0x3f
 80013e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e2:	2303      	movs	r3, #3
 80013e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013ea:	2308      	movs	r3, #8
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013ee:	2340      	movs	r3, #64	@ 0x40
 80013f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013f2:	2340      	movs	r3, #64	@ 0x40
 80013f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013fc:	2340      	movs	r3, #64	@ 0x40
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2104      	movs	r1, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fcd0 	bl	8005dac <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001412:	f000 f81d 	bl	8001450 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3778      	adds	r7, #120	@ 0x78
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	58000400 	.word	0x58000400
 8001424:	58024800 	.word	0x58024800
 8001428:	58024400 	.word	0x58024400

0800142c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800143e:	f000 fedf 	bl	8002200 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40001000 	.word	0x40001000

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>
 800145c:	0000      	movs	r0, r0
	...

08001460 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void *argument)
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	f5ad 7d48 	sub.w	sp, sp, #800	@ 0x320
 8001466:	af02      	add	r7, sp, #8
 8001468:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800146c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001470:	6018      	str	r0, [r3, #0]
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001472:	4bb1      	ldr	r3, [pc, #708]	@ (8001738 <StartMicroAutoware+0x2d8>)
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	4bb1      	ldr	r3, [pc, #708]	@ (800173c <StartMicroAutoware+0x2dc>)
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4bb1      	ldr	r3, [pc, #708]	@ (8001740 <StartMicroAutoware+0x2e0>)
 800147c:	4ab1      	ldr	r2, [pc, #708]	@ (8001744 <StartMicroAutoware+0x2e4>)
 800147e:	49b2      	ldr	r1, [pc, #712]	@ (8001748 <StartMicroAutoware+0x2e8>)
 8001480:	2001      	movs	r0, #1
 8001482:	f00f fe89 	bl	8011198 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001486:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800148a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800148e:	4618      	mov	r0, r3
 8001490:	f00f fdbc 	bl	801100c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001494:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001498:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800149c:	4aab      	ldr	r2, [pc, #684]	@ (800174c <StartMicroAutoware+0x2ec>)
 800149e:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 80014a0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014a4:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80014a8:	4aa9      	ldr	r2, [pc, #676]	@ (8001750 <StartMicroAutoware+0x2f0>)
 80014aa:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 80014ac:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014b0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80014b4:	4aa7      	ldr	r2, [pc, #668]	@ (8001754 <StartMicroAutoware+0x2f4>)
 80014b6:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80014b8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014bc:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80014c0:	4aa5      	ldr	r2, [pc, #660]	@ (8001758 <StartMicroAutoware+0x2f8>)
 80014c2:	60da      	str	r2, [r3, #12]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80014c4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00f fdad 	bl	8011028 <rcutils_set_default_allocator>
    //printf_("Error on default allocators (line %d)\n", __LINE__);
  }

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 80014ce:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014d2:	f5a3 741c 	sub.w	r4, r3, #624	@ 0x270
 80014d6:	463b      	mov	r3, r7
 80014d8:	4618      	mov	r0, r3
 80014da:	f00f f927 	bl	801072c <rclc_executor_get_zero_initialized_executor>
 80014de:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014e2:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80014e6:	4620      	mov	r0, r4
 80014e8:	4619      	mov	r1, r3
 80014ea:	2388      	movs	r3, #136	@ 0x88
 80014ec:	461a      	mov	r2, r3
 80014ee:	f01c f828 	bl	801d542 <memcpy>

  allocator = rcl_get_default_allocator();
 80014f2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80014f6:	f5a3 74f2 	sub.w	r4, r3, #484	@ 0x1e4
 80014fa:	463b      	mov	r3, r7
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00f fdb1 	bl	8011064 <rcutils_get_default_allocator>
 8001502:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001506:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 800150a:	461d      	mov	r5, r3
 800150c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001514:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001518:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	f00f fc32 	bl	8010d88 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "", &support);
 8001524:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001528:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 800152c:	4a8b      	ldr	r2, [pc, #556]	@ (800175c <StartMicroAutoware+0x2fc>)
 800152e:	498c      	ldr	r1, [pc, #560]	@ (8001760 <StartMicroAutoware+0x300>)
 8001530:	f00f fc74 	bl	8010e1c <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001534:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001538:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800153c:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001540:	2201      	movs	r2, #1
 8001542:	f00f f8fd 	bl	8010740 <rclc_executor_init>


  // create subscribers
  // TODO set QoS
  rclc_subscription_init_default(
 8001546:	f00c f8e9 	bl	800d71c <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>
 800154a:	4602      	mov	r2, r0
 800154c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001550:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001554:	4b83      	ldr	r3, [pc, #524]	@ (8001764 <StartMicroAutoware+0x304>)
 8001556:	f00f fd17 	bl	8010f88 <rclc_subscription_init_default>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_control_msgs, msg, Control),
    		"/control/command/control_cmd");

  rclc_subscription_init_default(
 800155a:	f00c fbf5 	bl	800dd48 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>
 800155e:	4602      	mov	r2, r0
 8001560:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001564:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001568:	4b7f      	ldr	r3, [pc, #508]	@ (8001768 <StartMicroAutoware+0x308>)
 800156a:	f00f fd0d 	bl	8010f88 <rclc_subscription_init_default>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd");

  rclc_subscription_init_default(
 800156e:	f00c fc63 	bl	800de38 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001572:	4602      	mov	r2, r0
 8001574:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001578:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 800157c:	4b7b      	ldr	r3, [pc, #492]	@ (800176c <StartMicroAutoware+0x30c>)
 800157e:	f00f fd03 	bl	8010f88 <rclc_subscription_init_default>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd");

  rclc_subscription_init_default(
 8001582:	f00c fc11 	bl	800dda8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>
 8001586:	4602      	mov	r2, r0
 8001588:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800158c:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001590:	4b77      	ldr	r3, [pc, #476]	@ (8001770 <StartMicroAutoware+0x310>)
 8001592:	f00f fcf9 	bl	8010f88 <rclc_subscription_init_default>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd");

  rclc_subscription_init_default(
 8001596:	f00f ff39 	bl	801140c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 800159a:	4602      	mov	r2, r0
 800159c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015a0:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 80015a4:	4b73      	ldr	r3, [pc, #460]	@ (8001774 <StartMicroAutoware+0x314>)
 80015a6:	f00f fcef 	bl	8010f88 <rclc_subscription_init_default>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd");

  rclc_subscription_init_default(
 80015aa:	f00f ff77 	bl	801149c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015b4:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 80015b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001778 <StartMicroAutoware+0x318>)
 80015ba:	f00f fce5 	bl	8010f88 <rclc_subscription_init_default>
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd");

  // create publishers
  // TODO set QoS
  rclc_publisher_init_default(
 80015be:	f00c fbab 	bl	800dd18 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015c8:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 80015cc:	4b6b      	ldr	r3, [pc, #428]	@ (800177c <StartMicroAutoware+0x31c>)
 80015ce:	f00f fc67 	bl	8010ea0 <rclc_publisher_init_default>
		  	&control_mode_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, ControlModeReport),
			"/vehicle/status/control_mode");

  rclc_publisher_init_default(
 80015d2:	f00c fc61 	bl	800de98 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015dc:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 80015e0:	4b67      	ldr	r3, [pc, #412]	@ (8001780 <StartMicroAutoware+0x320>)
 80015e2:	f00f fc5d 	bl	8010ea0 <rclc_publisher_init_default>
		  	&vehicle_twist_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, VelocityReport),
			"/vehicle/status/velocity_status");

  rclc_publisher_init_default(
 80015e6:	f00c fc0f 	bl	800de08 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80015f0:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 80015f4:	4b63      	ldr	r3, [pc, #396]	@ (8001784 <StartMicroAutoware+0x324>)
 80015f6:	f00f fc53 	bl	8010ea0 <rclc_publisher_init_default>
			&steering_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, SteeringReport),
			"/vehicle/status/steering_status");

  rclc_publisher_init_default(
 80015fa:	f00c fbbd 	bl	800dd78 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>
 80015fe:	4602      	mov	r2, r0
 8001600:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001604:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001608:	4b5f      	ldr	r3, [pc, #380]	@ (8001788 <StartMicroAutoware+0x328>)
 800160a:	f00f fc49 	bl	8010ea0 <rclc_publisher_init_default>
			&gear_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, GearReport),
			"/vehicle/status/gear_status");

  rclc_publisher_init_default(
 800160e:	f00c fc2b 	bl	800de68 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>
 8001612:	4602      	mov	r2, r0
 8001614:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001618:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 800161c:	4b5b      	ldr	r3, [pc, #364]	@ (800178c <StartMicroAutoware+0x32c>)
 800161e:	f00f fc3f 	bl	8010ea0 <rclc_publisher_init_default>
			&turn_indicators_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, TurnIndicatorsReport),
			"/vehicle/status/turn_indicators_status");

  rclc_publisher_init_default(
 8001622:	f00c fbd9 	bl	800ddd8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>
 8001626:	4602      	mov	r2, r0
 8001628:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 800162c:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001630:	4b57      	ldr	r3, [pc, #348]	@ (8001790 <StartMicroAutoware+0x330>)
 8001632:	f00f fc35 	bl	8010ea0 <rclc_publisher_init_default>
			&hazard_lights_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_vehicle_msgs, msg, HazardLightsReport),
			"/vehicle/status/hazard_lights_status");

  rclc_publisher_init_default(
 8001636:	f00f ff01 	bl	801143c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 800163a:	4602      	mov	r2, r0
 800163c:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001640:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001644:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <StartMicroAutoware+0x334>)
 8001646:	f00f fc2b 	bl	8010ea0 <rclc_publisher_init_default>
			&actuation_status_pub_,
			&VehicleInterfaceNode,
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
			"/vehicle/status/actuation_status");

  rclc_publisher_init_default(
 800164a:	f00f ff0f 	bl	801146c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 800164e:	4602      	mov	r2, r0
 8001650:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001654:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001658:	4b4f      	ldr	r3, [pc, #316]	@ (8001798 <StartMicroAutoware+0x338>)
 800165a:	f00f fc21 	bl	8010ea0 <rclc_publisher_init_default>
			ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
			"/vehicle/status/steering_wheel_status");

  // creating servers

  rclc_service_init_default(
 800165e:	f00c fb3b 	bl	800dcd8 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>
 8001662:	4602      	mov	r2, r0
 8001664:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8001668:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 800166c:	4b4b      	ldr	r3, [pc, #300]	@ (800179c <StartMicroAutoware+0x33c>)
 800166e:	f00f fc51 	bl	8010f14 <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_vehicle_msgs, srv, ControlModeCommand),
			"/control/control_mode_request");


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001672:	f507 7224 	add.w	r2, r7, #656	@ 0x290
 8001676:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 800167a:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800167e:	2300      	movs	r3, #0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <StartMicroAutoware+0x340>)
 8001684:	f00f f8d8 	bl	8010838 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &gear_cmd_sub_, &gear_cmd_msg_, &gear_cmd_callback, ON_NEW_DATA);
 8001688:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 800168c:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001690:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4b42      	ldr	r3, [pc, #264]	@ (80017a4 <StartMicroAutoware+0x344>)
 800169a:	f00f f8cd 	bl	8010838 <rclc_executor_add_subscription>
  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 800169e:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 80016a2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80016a6:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 80016aa:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80016ae:	4c3e      	ldr	r4, [pc, #248]	@ (80017a8 <StartMicroAutoware+0x348>)
 80016b0:	9400      	str	r4, [sp, #0]
 80016b2:	f00f f8ff 	bl	80108b4 <rclc_executor_add_service>

  rclc_executor_add_subscription(&executor, &turn_indicators_cmd_sub_, &turn_indicators_cmd_msg_, &turn_indicators_cmd_callback, ON_NEW_DATA);
 80016b6:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 80016ba:	f507 7143 	add.w	r1, r7, #780	@ 0x30c
 80016be:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80016c2:	2300      	movs	r3, #0
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <StartMicroAutoware+0x34c>)
 80016c8:	f00f f8b6 	bl	8010838 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &hazard_lights_cmd_sub_, &hazard_lights_cmd_msg_, &hazard_lights_cmd_callback, ON_NEW_DATA);
 80016cc:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 80016d0:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 80016d4:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4b34      	ldr	r3, [pc, #208]	@ (80017b0 <StartMicroAutoware+0x350>)
 80016de:	f00f f8ab 	bl	8010838 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
 80016e2:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 80016e6:	f507 7141 	add.w	r1, r7, #772	@ 0x304
 80016ea:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	4b30      	ldr	r3, [pc, #192]	@ (80017b4 <StartMicroAutoware+0x354>)
 80016f4:	f00f f8a0 	bl	8010838 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);
 80016f8:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 80016fc:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 8001700:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <StartMicroAutoware+0x358>)
 800170a:	f00f f895 	bl	8010838 <rclc_executor_add_subscription>


  for (;;)
  {

    rclc_executor_spin_some(&executor, 1000 * (1000 * 1000)); // Spinning executor for 1s TODO set time in function of data rate.
 800170e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001712:	a307      	add	r3, pc, #28	@ (adr r3, 8001730 <StartMicroAutoware+0x2d0>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	4608      	mov	r0, r1
 800171a:	f00f fafb 	bl	8010d14 <rclc_executor_spin_some>

    // Verify flags

	  // Pub mode change to autoware if needs

    if(0x00111111 == xSubscribersRecieved)
 800171e:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <StartMicroAutoware+0x35c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a27      	ldr	r2, [pc, #156]	@ (80017c0 <StartMicroAutoware+0x360>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d1f2      	bne.n	800170e <StartMicroAutoware+0x2ae>
	  // xControlAction

	  // Wait for flag
	  // Pub data

	  xSubscribersRecieved = 0;
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <StartMicroAutoware+0x35c>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
    rclc_executor_spin_some(&executor, 1000 * (1000 * 1000)); // Spinning executor for 1s TODO set time in function of data rate.
 800172e:	e7ee      	b.n	800170e <StartMicroAutoware+0x2ae>
 8001730:	3b9aca00 	.word	0x3b9aca00
 8001734:	00000000 	.word	0x00000000
 8001738:	08000ce5 	.word	0x08000ce5
 800173c:	08000c81 	.word	0x08000c81
 8001740:	08000c61 	.word	0x08000c61
 8001744:	08000c35 	.word	0x08000c35
 8001748:	240329dc 	.word	0x240329dc
 800174c:	080017c5 	.word	0x080017c5
 8001750:	08001809 	.word	0x08001809
 8001754:	08001841 	.word	0x08001841
 8001758:	080018ad 	.word	0x080018ad
 800175c:	0801e220 	.word	0x0801e220
 8001760:	0801e224 	.word	0x0801e224
 8001764:	0801e238 	.word	0x0801e238
 8001768:	0801e258 	.word	0x0801e258
 800176c:	0801e274 	.word	0x0801e274
 8001770:	0801e29c 	.word	0x0801e29c
 8001774:	0801e2c0 	.word	0x0801e2c0
 8001778:	0801e2e0 	.word	0x0801e2e0
 800177c:	0801e300 	.word	0x0801e300
 8001780:	0801e320 	.word	0x0801e320
 8001784:	0801e340 	.word	0x0801e340
 8001788:	0801e360 	.word	0x0801e360
 800178c:	0801e37c 	.word	0x0801e37c
 8001790:	0801e3a4 	.word	0x0801e3a4
 8001794:	0801e3cc 	.word	0x0801e3cc
 8001798:	0801e3f0 	.word	0x0801e3f0
 800179c:	0801e418 	.word	0x0801e418
 80017a0:	08000ec1 	.word	0x08000ec1
 80017a4:	08000ee9 	.word	0x08000ee9
 80017a8:	08000fb1 	.word	0x08000fb1
 80017ac:	08000f11 	.word	0x08000f11
 80017b0:	08000f39 	.word	0x08000f39
 80017b4:	08000f61 	.word	0x08000f61
 80017b8:	08000f89 	.word	0x08000f89
 80017bc:	2403297c 	.word	0x2403297c
 80017c0:	00111111 	.word	0x00111111

080017c4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <microros_allocate+0x3c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <microros_allocate+0x3c>)
 80017dc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <microros_allocate+0x40>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <microros_allocate+0x40>)
 80017ec:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe ffa6 	bl	8000740 <pvPortMallocMicroROS>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24032980 	.word	0x24032980
 8001804:	24032984 	.word	0x24032984

08001808 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00c      	beq.n	8001832 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff f8b5 	bl	8000988 <getBlockSize>
 800181e:	4603      	mov	r3, r0
 8001820:	4a06      	ldr	r2, [pc, #24]	@ (800183c <microros_deallocate+0x34>)
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	461a      	mov	r2, r3
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <microros_deallocate+0x34>)
 800182a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff f84f 	bl	80008d0 <vPortFreeMicroROS>
  }
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	24032984 	.word	0x24032984

08001840 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800184c:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <microros_reallocate+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	4413      	add	r3, r2
 8001856:	461a      	mov	r2, r3
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <microros_reallocate+0x64>)
 800185a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <microros_reallocate+0x68>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4413      	add	r3, r2
 8001866:	461a      	mov	r2, r3
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <microros_reallocate+0x68>)
 800186a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d104      	bne.n	800187c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f7fe ff64 	bl	8000740 <pvPortMallocMicroROS>
 8001878:	4603      	mov	r3, r0
 800187a:	e00e      	b.n	800189a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff f883 	bl	8000988 <getBlockSize>
 8001882:	4603      	mov	r3, r0
 8001884:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <microros_reallocate+0x68>)
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <microros_reallocate+0x68>)
 800188e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff f896 	bl	80009c4 <pvPortReallocMicroROS>
 8001898:	4603      	mov	r3, r0
  }
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	24032980 	.word	0x24032980
 80018a8:	24032984 	.word	0x24032984

080018ac <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	4a0c      	ldr	r2, [pc, #48]	@ (80018f4 <microros_zero_allocate+0x48>)
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <microros_zero_allocate+0x48>)
 80018ca:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <microros_zero_allocate+0x4c>)
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	461a      	mov	r2, r3
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <microros_zero_allocate+0x4c>)
 80018de:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff f89b 	bl	8000a1e <pvPortCallocMicroROS>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	24032980 	.word	0x24032980
 80018f8:	24032984 	.word	0x24032984
 80018fc:	00000000 	.word	0x00000000

08001900 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001900:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001912:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001916:	a320      	add	r3, pc, #128	@ (adr r3, 8001998 <UTILS_NanosecondsToTimespec+0x98>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fd48 	bl	80003b0 <__aeabi_ldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800192a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800192e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001998 <UTILS_NanosecondsToTimespec+0x98>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fd3c 	bl	80003b0 <__aeabi_ldivmod>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da20      	bge.n	8001986 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <UTILS_NanosecondsToTimespec+0x90>)
 800194a:	fb82 1203 	smull	r1, r2, r2, r3
 800194e:	1712      	asrs	r2, r2, #28
 8001950:	17db      	asrs	r3, r3, #31
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	6979      	ldr	r1, [r7, #20]
 8001960:	17c8      	asrs	r0, r1, #31
 8001962:	460c      	mov	r4, r1
 8001964:	4605      	mov	r5, r0
 8001966:	ebb2 0804 	subs.w	r8, r2, r4
 800196a:	eb63 0905 	sbc.w	r9, r3, r5
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	4906      	ldr	r1, [pc, #24]	@ (8001994 <UTILS_NanosecondsToTimespec+0x94>)
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	441a      	add	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	609a      	str	r2, [r3, #8]
    }
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001990:	44b82fa1 	.word	0x44b82fa1
 8001994:	3b9aca00 	.word	0x3b9aca00
 8001998:	3b9aca00 	.word	0x3b9aca00
 800199c:	00000000 	.word	0x00000000

080019a0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80019a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a4:	b08e      	sub	sp, #56	@ 0x38
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80019aa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80019ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019b0:	2300      	movs	r3, #0
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80019c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00a fca2 	bl	800c310 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80019cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ce:	17da      	asrs	r2, r3, #31
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	61fa      	str	r2, [r7, #28]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	69b9      	ldr	r1, [r7, #24]
 80019de:	000b      	movs	r3, r1
 80019e0:	2200      	movs	r2, #0
 80019e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80019e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e8:	2200      	movs	r2, #0
 80019ea:	461c      	mov	r4, r3
 80019ec:	4615      	mov	r5, r2
 80019ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019f2:	1911      	adds	r1, r2, r4
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	416b      	adcs	r3, r5
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001a02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	f04f 0400 	mov.w	r4, #0
 8001a0e:	f04f 0500 	mov.w	r5, #0
 8001a12:	015d      	lsls	r5, r3, #5
 8001a14:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001a18:	0154      	lsls	r4, r2, #5
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	462b      	mov	r3, r5
 8001a1e:	ebb2 0800 	subs.w	r8, r2, r0
 8001a22:	eb63 0901 	sbc.w	r9, r3, r1
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001a32:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001a36:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	eb18 0a00 	adds.w	sl, r8, r0
 8001a42:	eb49 0b01 	adc.w	fp, r9, r1
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a52:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a56:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a5a:	ebb2 040a 	subs.w	r4, r2, sl
 8001a5e:	603c      	str	r4, [r7, #0]
 8001a60:	eb63 030b 	sbc.w	r3, r3, fp
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	181b      	adds	r3, r3, r0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	462b      	mov	r3, r5
 8001a72:	eb41 0303 	adc.w	r3, r1, r3
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	6a3a      	ldr	r2, [r7, #32]
 8001a7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a7e:	f7ff ff3f 	bl	8001900 <UTILS_NanosecondsToTimespec>

    return 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	3738      	adds	r7, #56	@ 0x38
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <HAL_MspInit+0x38>)
 8001a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <HAL_MspInit+0x38>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aa6:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <HAL_MspInit+0x38>)
 8001aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f06f 0001 	mvn.w	r0, #1
 8001abc:	f000 fc84 	bl	80023c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58024400 	.word	0x58024400

08001acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b090      	sub	sp, #64	@ 0x40
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	d827      	bhi.n	8001b2a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001ada:	2200      	movs	r2, #0
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	2036      	movs	r0, #54	@ 0x36
 8001ae0:	f000 fc72 	bl	80023c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ae4:	2036      	movs	r0, #54	@ 0x36
 8001ae6:	f000 fc89 	bl	80023fc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001aea:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <HAL_InitTick+0xc4>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001af0:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <HAL_InitTick+0xc8>)
 8001af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001af6:	4a27      	ldr	r2, [pc, #156]	@ (8001b94 <HAL_InitTick+0xc8>)
 8001af8:	f043 0310 	orr.w	r3, r3, #16
 8001afc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b00:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_InitTick+0xc8>)
 8001b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b0e:	f107 0210 	add.w	r2, r7, #16
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f004 fcd3 	bl	80064c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d106      	bne.n	8001b36 <HAL_InitTick+0x6a>
 8001b28:	e001      	b.n	8001b2e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e02b      	b.n	8001b86 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b2e:	f004 fc9d 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 8001b32:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001b34:	e004      	b.n	8001b40 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b36:	f004 fc99 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b42:	4a15      	ldr	r2, [pc, #84]	@ (8001b98 <HAL_InitTick+0xcc>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <HAL_InitTick+0xd0>)
 8001b50:	4a13      	ldr	r2, [pc, #76]	@ (8001ba0 <HAL_InitTick+0xd4>)
 8001b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_InitTick+0xd0>)
 8001b56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <HAL_InitTick+0xd0>)
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_InitTick+0xd0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <HAL_InitTick+0xd0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b6e:	480b      	ldr	r0, [pc, #44]	@ (8001b9c <HAL_InitTick+0xd0>)
 8001b70:	f006 fb16 	bl	80081a0 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d104      	bne.n	8001b84 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b7a:	4808      	ldr	r0, [pc, #32]	@ (8001b9c <HAL_InitTick+0xd0>)
 8001b7c:	f006 fb72 	bl	8008264 <HAL_TIM_Base_Start_IT>
 8001b80:	4603      	mov	r3, r0
 8001b82:	e000      	b.n	8001b86 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3740      	adds	r7, #64	@ 0x40
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2400000c 	.word	0x2400000c
 8001b94:	58024400 	.word	0x58024400
 8001b98:	431bde83 	.word	0x431bde83
 8001b9c:	24032988 	.word	0x24032988
 8001ba0:	40001000 	.word	0x40001000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <DMA1_Stream0_IRQHandler+0x10>)
 8001be2:	f001 ff43 	bl	8003a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	24032a70 	.word	0x24032a70

08001bf0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <DMA1_Stream1_IRQHandler+0x10>)
 8001bf6:	f001 ff39 	bl	8003a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	24032ae8 	.word	0x24032ae8

08001c04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_OVCR_Pin);
 8001c08:	2080      	movs	r0, #128	@ 0x80
 8001c0a:	f003 fc16 	bl	800543a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <USART3_IRQHandler+0x10>)
 8001c1a:	f006 ff41 	bl	8008aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	240329dc 	.word	0x240329dc

08001c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <TIM6_DAC_IRQHandler+0x10>)
 8001c2e:	f006 fb91 	bl	8008354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	24032988 	.word	0x24032988

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_kill>:

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c56:	f01b fc3f 	bl	801d4d8 <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7e:	bf00      	nop
 8001c80:	e7fd      	b.n	8001c7e <_exit+0x12>

08001c82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e00a      	b.n	8001caa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c94:	f3af 8000 	nop.w
 8001c98:	4601      	mov	r1, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	b2ca      	uxtb	r2, r1
 8001ca2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dbf0      	blt.n	8001c94 <_read+0x12>
  }

  return len;
 8001cb2:	687b      	ldr	r3, [r7, #4]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e009      	b.n	8001ce2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	60ba      	str	r2, [r7, #8]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf1      	blt.n	8001cce <_write+0x12>
  }
  return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_close>:

int _close(int file)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_isatty>:

int _isatty(int file)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f01b fba4 	bl	801d4d8 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	24080000 	.word	0x24080000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	240329d8 	.word	0x240329d8
 8001dc4:	240694f8 	.word	0x240694f8

08001dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <SystemInit+0xe4>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd2:	4a36      	ldr	r2, [pc, #216]	@ (8001eac <SystemInit+0xe4>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ddc:	4b34      	ldr	r3, [pc, #208]	@ (8001eb0 <SystemInit+0xe8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	2b06      	cmp	r3, #6
 8001de6:	d807      	bhi.n	8001df8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001de8:	4b31      	ldr	r3, [pc, #196]	@ (8001eb0 <SystemInit+0xe8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 030f 	bic.w	r3, r3, #15
 8001df0:	4a2f      	ldr	r2, [pc, #188]	@ (8001eb0 <SystemInit+0xe8>)
 8001df2:	f043 0307 	orr.w	r3, r3, #7
 8001df6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001df8:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb4 <SystemInit+0xec>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb4 <SystemInit+0xec>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e04:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb4 <SystemInit+0xec>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <SystemInit+0xec>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4929      	ldr	r1, [pc, #164]	@ (8001eb4 <SystemInit+0xec>)
 8001e10:	4b29      	ldr	r3, [pc, #164]	@ (8001eb8 <SystemInit+0xf0>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e16:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <SystemInit+0xe8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e22:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <SystemInit+0xe8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 030f 	bic.w	r3, r3, #15
 8001e2a:	4a21      	ldr	r2, [pc, #132]	@ (8001eb0 <SystemInit+0xe8>)
 8001e2c:	f043 0307 	orr.w	r3, r3, #7
 8001e30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <SystemInit+0xec>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <SystemInit+0xec>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <SystemInit+0xec>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <SystemInit+0xec>)
 8001e46:	4a1d      	ldr	r2, [pc, #116]	@ (8001ebc <SystemInit+0xf4>)
 8001e48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <SystemInit+0xec>)
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <SystemInit+0xf8>)
 8001e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e50:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <SystemInit+0xec>)
 8001e52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec4 <SystemInit+0xfc>)
 8001e54:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e56:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <SystemInit+0xec>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <SystemInit+0xec>)
 8001e5e:	4a19      	ldr	r2, [pc, #100]	@ (8001ec4 <SystemInit+0xfc>)
 8001e60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <SystemInit+0xec>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <SystemInit+0xec>)
 8001e6a:	4a16      	ldr	r2, [pc, #88]	@ (8001ec4 <SystemInit+0xfc>)
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <SystemInit+0xec>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <SystemInit+0xec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <SystemInit+0xec>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <SystemInit+0xec>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <SystemInit+0x100>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <SystemInit+0x104>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e92:	d202      	bcs.n	8001e9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <SystemInit+0x108>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <SystemInit+0x10c>)
 8001e9c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ea0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00
 8001eb0:	52002000 	.word	0x52002000
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ebc:	02020200 	.word	0x02020200
 8001ec0:	01ff0000 	.word	0x01ff0000
 8001ec4:	01010280 	.word	0x01010280
 8001ec8:	5c001000 	.word	0x5c001000
 8001ecc:	ffff0000 	.word	0xffff0000
 8001ed0:	51008108 	.word	0x51008108
 8001ed4:	52004000 	.word	0x52004000

08001ed8 <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001ef2:	4a23      	ldr	r2, [pc, #140]	@ (8001f80 <MX_USART3_UART_Init+0x94>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001ef8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f34:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f36:	f006 fc01 	bl	800873c <HAL_UART_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f40:	f7ff fa86 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f44:	2100      	movs	r1, #0
 8001f46:	480d      	ldr	r0, [pc, #52]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f48:	f008 fbf6 	bl	800a738 <HAL_UARTEx_SetTxFifoThreshold>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f52:	f7ff fa7d 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f56:	2100      	movs	r1, #0
 8001f58:	4808      	ldr	r0, [pc, #32]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f5a:	f008 fc2b 	bl	800a7b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f64:	f7ff fa74 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f68:	4804      	ldr	r0, [pc, #16]	@ (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f6a:	f008 fbac 	bl	800a6c6 <HAL_UARTEx_DisableFifoMode>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f74:	f7ff fa6c 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	240329dc 	.word	0x240329dc
 8001f80:	40004800 	.word	0x40004800

08001f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0ba      	sub	sp, #232	@ 0xe8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	22c0      	movs	r2, #192	@ 0xc0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f01b f9ad 	bl	801d304 <memset>
  if(uartHandle->Instance==USART3)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5a      	ldr	r2, [pc, #360]	@ (8002118 <HAL_UART_MspInit+0x194>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	f040 80ad 	bne.w	8002110 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fb6:	f04f 0202 	mov.w	r2, #2
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 fabb 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001fd8:	f7ff fa3a 	bl	8001450 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <HAL_UART_MspInit+0x198>)
 8001fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fe2:	4a4e      	ldr	r2, [pc, #312]	@ (800211c <HAL_UART_MspInit+0x198>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fec:	4b4b      	ldr	r3, [pc, #300]	@ (800211c <HAL_UART_MspInit+0x198>)
 8001fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffa:	4b48      	ldr	r3, [pc, #288]	@ (800211c <HAL_UART_MspInit+0x198>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002000:	4a46      	ldr	r2, [pc, #280]	@ (800211c <HAL_UART_MspInit+0x198>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800200a:	4b44      	ldr	r3, [pc, #272]	@ (800211c <HAL_UART_MspInit+0x198>)
 800200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002018:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800201c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002032:	2307      	movs	r3, #7
 8002034:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002038:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800203c:	4619      	mov	r1, r3
 800203e:	4838      	ldr	r0, [pc, #224]	@ (8002120 <HAL_UART_MspInit+0x19c>)
 8002040:	f003 f832 	bl	80050a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002044:	4b37      	ldr	r3, [pc, #220]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 8002046:	4a38      	ldr	r2, [pc, #224]	@ (8002128 <HAL_UART_MspInit+0x1a4>)
 8002048:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800204a:	4b36      	ldr	r3, [pc, #216]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 800204c:	222d      	movs	r2, #45	@ 0x2d
 800204e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002050:	4b34      	ldr	r3, [pc, #208]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002056:	4b33      	ldr	r3, [pc, #204]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800205c:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 800205e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002062:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002064:	4b2f      	ldr	r3, [pc, #188]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800206a:	4b2e      	ldr	r3, [pc, #184]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002070:	4b2c      	ldr	r3, [pc, #176]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 8002072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002076:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 800207a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800207e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002086:	4827      	ldr	r0, [pc, #156]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 8002088:	f000 f9c6 	bl	8002418 <HAL_DMA_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002092:	f7ff f9dd 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 800209a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800209e:	4a21      	ldr	r2, [pc, #132]	@ (8002124 <HAL_UART_MspInit+0x1a0>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80020a4:	4b21      	ldr	r3, [pc, #132]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020a6:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <HAL_UART_MspInit+0x1ac>)
 80020a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80020aa:	4b20      	ldr	r3, [pc, #128]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020ac:	222e      	movs	r2, #46	@ 0x2e
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b0:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020b2:	2240      	movs	r2, #64	@ 0x40
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80020d0:	4b16      	ldr	r3, [pc, #88]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020dc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020de:	4b13      	ldr	r3, [pc, #76]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80020e4:	4811      	ldr	r0, [pc, #68]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020e6:	f000 f997 	bl	8002418 <HAL_DMA_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 80020f0:	f7ff f9ae 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80020fa:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <HAL_UART_MspInit+0x1a8>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2108      	movs	r1, #8
 8002104:	2027      	movs	r0, #39	@ 0x27
 8002106:	f000 f95f 	bl	80023c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800210a:	2027      	movs	r0, #39	@ 0x27
 800210c:	f000 f976 	bl	80023fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002110:	bf00      	nop
 8002112:	37e8      	adds	r7, #232	@ 0xe8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40004800 	.word	0x40004800
 800211c:	58024400 	.word	0x58024400
 8002120:	58020c00 	.word	0x58020c00
 8002124:	24032a70 	.word	0x24032a70
 8002128:	40020010 	.word	0x40020010
 800212c:	24032ae8 	.word	0x24032ae8
 8002130:	40020028 	.word	0x40020028

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800216c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002138:	f7ff fe46 	bl	8001dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800213c:	480c      	ldr	r0, [pc, #48]	@ (8002170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800213e:	490d      	ldr	r1, [pc, #52]	@ (8002174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002154:	4c0a      	ldr	r4, [pc, #40]	@ (8002180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002162:	f01b f9bf 	bl	801d4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7ff f89d 	bl	80012a4 <main>
  bx  lr
 800216a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800216c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002170:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002174:	240013f0 	.word	0x240013f0
  ldr r2, =_sidata
 8002178:	08020b34 	.word	0x08020b34
  ldr r2, =_sbss
 800217c:	240013f0 	.word	0x240013f0
  ldr r4, =_ebss
 8002180:	240694f8 	.word	0x240694f8

08002184 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC3_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800218e:	2003      	movs	r0, #3
 8002190:	f000 f90f 	bl	80023b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002194:	f003 ffc0 	bl	8006118 <HAL_RCC_GetSysClockFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <HAL_Init+0x68>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	4913      	ldr	r1, [pc, #76]	@ (80021f4 <HAL_Init+0x6c>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_Init+0x68>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	4a0e      	ldr	r2, [pc, #56]	@ (80021f4 <HAL_Init+0x6c>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	4a0b      	ldr	r2, [pc, #44]	@ (80021f8 <HAL_Init+0x70>)
 80021ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021cc:	4a0b      	ldr	r2, [pc, #44]	@ (80021fc <HAL_Init+0x74>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021d2:	200f      	movs	r0, #15
 80021d4:	f7ff fc7a 	bl	8001acc <HAL_InitTick>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e002      	b.n	80021e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021e2:	f7ff fc55 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	58024400 	.word	0x58024400
 80021f4:	0801e4d4 	.word	0x0801e4d4
 80021f8:	24000008 	.word	0x24000008
 80021fc:	24000004 	.word	0x24000004

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	24000010 	.word	0x24000010
 8002224:	24032b60 	.word	0x24032b60

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	24032b60 	.word	0x24032b60

08002240 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_GetREVID+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0c1b      	lsrs	r3, r3, #16
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	5c001000 	.word	0x5c001000

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <__NVIC_SetPriorityGrouping+0x40>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	4313      	orrs	r3, r2
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x40>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00
 800229c:	05fa0000 	.word	0x05fa0000

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db0b      	blt.n	80022e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4907      	ldr	r1, [pc, #28]	@ (80022f4 <__NVIC_EnableIRQ+0x38>)
 80022d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002308:	2b00      	cmp	r3, #0
 800230a:	db0a      	blt.n	8002322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	490c      	ldr	r1, [pc, #48]	@ (8002344 <__NVIC_SetPriority+0x4c>)
 8002312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	440b      	add	r3, r1
 800231c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002320:	e00a      	b.n	8002338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4908      	ldr	r1, [pc, #32]	@ (8002348 <__NVIC_SetPriority+0x50>)
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3b04      	subs	r3, #4
 8002330:	0112      	lsls	r2, r2, #4
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	440b      	add	r3, r1
 8002336:	761a      	strb	r2, [r3, #24]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000e100 	.word	0xe000e100
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	@ 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f1c3 0307 	rsb	r3, r3, #7
 8002366:	2b04      	cmp	r3, #4
 8002368:	bf28      	it	cs
 800236a:	2304      	movcs	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3304      	adds	r3, #4
 8002372:	2b06      	cmp	r3, #6
 8002374:	d902      	bls.n	800237c <NVIC_EncodePriority+0x30>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3b03      	subs	r3, #3
 800237a:	e000      	b.n	800237e <NVIC_EncodePriority+0x32>
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	401a      	ands	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002394:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43d9      	mvns	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	4313      	orrs	r3, r2
         );
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	@ 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff4c 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d6:	f7ff ff63 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 80023da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	6978      	ldr	r0, [r7, #20]
 80023e2:	f7ff ffb3 	bl	800234c <NVIC_EncodePriority>
 80023e6:	4602      	mov	r2, r0
 80023e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff82 	bl	80022f8 <__NVIC_SetPriority>
}
 80023f4:	bf00      	nop
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff56 	bl	80022bc <__NVIC_EnableIRQ>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ff02 	bl	8002228 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e316      	b.n	8002a5e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a66      	ldr	r2, [pc, #408]	@ (80025d0 <HAL_DMA_Init+0x1b8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d04a      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a65      	ldr	r2, [pc, #404]	@ (80025d4 <HAL_DMA_Init+0x1bc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d045      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a63      	ldr	r2, [pc, #396]	@ (80025d8 <HAL_DMA_Init+0x1c0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d040      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a62      	ldr	r2, [pc, #392]	@ (80025dc <HAL_DMA_Init+0x1c4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d03b      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a60      	ldr	r2, [pc, #384]	@ (80025e0 <HAL_DMA_Init+0x1c8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d036      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a5f      	ldr	r2, [pc, #380]	@ (80025e4 <HAL_DMA_Init+0x1cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d031      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a5d      	ldr	r2, [pc, #372]	@ (80025e8 <HAL_DMA_Init+0x1d0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02c      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5c      	ldr	r2, [pc, #368]	@ (80025ec <HAL_DMA_Init+0x1d4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d027      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5a      	ldr	r2, [pc, #360]	@ (80025f0 <HAL_DMA_Init+0x1d8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d022      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a59      	ldr	r2, [pc, #356]	@ (80025f4 <HAL_DMA_Init+0x1dc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d01d      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a57      	ldr	r2, [pc, #348]	@ (80025f8 <HAL_DMA_Init+0x1e0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d018      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a56      	ldr	r2, [pc, #344]	@ (80025fc <HAL_DMA_Init+0x1e4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a54      	ldr	r2, [pc, #336]	@ (8002600 <HAL_DMA_Init+0x1e8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a53      	ldr	r2, [pc, #332]	@ (8002604 <HAL_DMA_Init+0x1ec>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a51      	ldr	r2, [pc, #324]	@ (8002608 <HAL_DMA_Init+0x1f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA_Init+0xb8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a50      	ldr	r2, [pc, #320]	@ (800260c <HAL_DMA_Init+0x1f4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <HAL_DMA_Init+0xbc>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_DMA_Init+0xbe>
 80024d4:	2300      	movs	r3, #0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 813b 	beq.w	8002752 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a37      	ldr	r2, [pc, #220]	@ (80025d0 <HAL_DMA_Init+0x1b8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d04a      	beq.n	800258c <HAL_DMA_Init+0x174>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a36      	ldr	r2, [pc, #216]	@ (80025d4 <HAL_DMA_Init+0x1bc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d045      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a34      	ldr	r2, [pc, #208]	@ (80025d8 <HAL_DMA_Init+0x1c0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d040      	beq.n	800258c <HAL_DMA_Init+0x174>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a33      	ldr	r2, [pc, #204]	@ (80025dc <HAL_DMA_Init+0x1c4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d03b      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a31      	ldr	r2, [pc, #196]	@ (80025e0 <HAL_DMA_Init+0x1c8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d036      	beq.n	800258c <HAL_DMA_Init+0x174>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a30      	ldr	r2, [pc, #192]	@ (80025e4 <HAL_DMA_Init+0x1cc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d031      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2e      	ldr	r2, [pc, #184]	@ (80025e8 <HAL_DMA_Init+0x1d0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02c      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2d      	ldr	r2, [pc, #180]	@ (80025ec <HAL_DMA_Init+0x1d4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d027      	beq.n	800258c <HAL_DMA_Init+0x174>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2b      	ldr	r2, [pc, #172]	@ (80025f0 <HAL_DMA_Init+0x1d8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d022      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2a      	ldr	r2, [pc, #168]	@ (80025f4 <HAL_DMA_Init+0x1dc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d01d      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a28      	ldr	r2, [pc, #160]	@ (80025f8 <HAL_DMA_Init+0x1e0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d018      	beq.n	800258c <HAL_DMA_Init+0x174>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a27      	ldr	r2, [pc, #156]	@ (80025fc <HAL_DMA_Init+0x1e4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a25      	ldr	r2, [pc, #148]	@ (8002600 <HAL_DMA_Init+0x1e8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00e      	beq.n	800258c <HAL_DMA_Init+0x174>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a24      	ldr	r2, [pc, #144]	@ (8002604 <HAL_DMA_Init+0x1ec>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a22      	ldr	r2, [pc, #136]	@ (8002608 <HAL_DMA_Init+0x1f0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_DMA_Init+0x174>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a21      	ldr	r2, [pc, #132]	@ (800260c <HAL_DMA_Init+0x1f4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d108      	bne.n	800259e <HAL_DMA_Init+0x186>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e007      	b.n	80025ae <HAL_DMA_Init+0x196>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025ae:	e02f      	b.n	8002610 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b0:	f7ff fe3a 	bl	8002228 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d928      	bls.n	8002610 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e246      	b.n	8002a5e <HAL_DMA_Init+0x646>
 80025d0:	40020010 	.word	0x40020010
 80025d4:	40020028 	.word	0x40020028
 80025d8:	40020040 	.word	0x40020040
 80025dc:	40020058 	.word	0x40020058
 80025e0:	40020070 	.word	0x40020070
 80025e4:	40020088 	.word	0x40020088
 80025e8:	400200a0 	.word	0x400200a0
 80025ec:	400200b8 	.word	0x400200b8
 80025f0:	40020410 	.word	0x40020410
 80025f4:	40020428 	.word	0x40020428
 80025f8:	40020440 	.word	0x40020440
 80025fc:	40020458 	.word	0x40020458
 8002600:	40020470 	.word	0x40020470
 8002604:	40020488 	.word	0x40020488
 8002608:	400204a0 	.word	0x400204a0
 800260c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1c8      	bne.n	80025b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4b83      	ldr	r3, [pc, #524]	@ (8002838 <HAL_DMA_Init+0x420>)
 800262a:	4013      	ands	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002636:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002642:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	2b04      	cmp	r3, #4
 8002662:	d107      	bne.n	8002674 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	4313      	orrs	r3, r2
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002674:	4b71      	ldr	r3, [pc, #452]	@ (800283c <HAL_DMA_Init+0x424>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b71      	ldr	r3, [pc, #452]	@ (8002840 <HAL_DMA_Init+0x428>)
 800267a:	4013      	ands	r3, r2
 800267c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002680:	d328      	bcc.n	80026d4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b28      	cmp	r3, #40	@ 0x28
 8002688:	d903      	bls.n	8002692 <HAL_DMA_Init+0x27a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002690:	d917      	bls.n	80026c2 <HAL_DMA_Init+0x2aa>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b3e      	cmp	r3, #62	@ 0x3e
 8002698:	d903      	bls.n	80026a2 <HAL_DMA_Init+0x28a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b42      	cmp	r3, #66	@ 0x42
 80026a0:	d90f      	bls.n	80026c2 <HAL_DMA_Init+0x2aa>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b46      	cmp	r3, #70	@ 0x46
 80026a8:	d903      	bls.n	80026b2 <HAL_DMA_Init+0x29a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b48      	cmp	r3, #72	@ 0x48
 80026b0:	d907      	bls.n	80026c2 <HAL_DMA_Init+0x2aa>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b4e      	cmp	r3, #78	@ 0x4e
 80026b8:	d905      	bls.n	80026c6 <HAL_DMA_Init+0x2ae>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b52      	cmp	r3, #82	@ 0x52
 80026c0:	d801      	bhi.n	80026c6 <HAL_DMA_Init+0x2ae>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_DMA_Init+0x2b0>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026d2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0307 	bic.w	r3, r3, #7
 80026ea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d117      	bne.n	800272e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f002 fb3f 	bl	8004d94 <DMA_CheckFifoParam>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2240      	movs	r2, #64	@ 0x40
 8002720:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e197      	b.n	8002a5e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f002 fa7a 	bl	8004c30 <DMA_CalcBaseAndBitshift>
 800273c:	4603      	mov	r3, r0
 800273e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	223f      	movs	r2, #63	@ 0x3f
 800274a:	409a      	lsls	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	e0cd      	b.n	80028ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a3b      	ldr	r2, [pc, #236]	@ (8002844 <HAL_DMA_Init+0x42c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_Init+0x38a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a39      	ldr	r2, [pc, #228]	@ (8002848 <HAL_DMA_Init+0x430>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01d      	beq.n	80027a2 <HAL_DMA_Init+0x38a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a38      	ldr	r2, [pc, #224]	@ (800284c <HAL_DMA_Init+0x434>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d018      	beq.n	80027a2 <HAL_DMA_Init+0x38a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a36      	ldr	r2, [pc, #216]	@ (8002850 <HAL_DMA_Init+0x438>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_DMA_Init+0x38a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a35      	ldr	r2, [pc, #212]	@ (8002854 <HAL_DMA_Init+0x43c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00e      	beq.n	80027a2 <HAL_DMA_Init+0x38a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a33      	ldr	r2, [pc, #204]	@ (8002858 <HAL_DMA_Init+0x440>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d009      	beq.n	80027a2 <HAL_DMA_Init+0x38a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a32      	ldr	r2, [pc, #200]	@ (800285c <HAL_DMA_Init+0x444>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <HAL_DMA_Init+0x38a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a30      	ldr	r2, [pc, #192]	@ (8002860 <HAL_DMA_Init+0x448>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_DMA_Init+0x38e>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_DMA_Init+0x390>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8097 	beq.w	80028dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a24      	ldr	r2, [pc, #144]	@ (8002844 <HAL_DMA_Init+0x42c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d021      	beq.n	80027fc <HAL_DMA_Init+0x3e4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_DMA_Init+0x430>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01c      	beq.n	80027fc <HAL_DMA_Init+0x3e4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a21      	ldr	r2, [pc, #132]	@ (800284c <HAL_DMA_Init+0x434>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d017      	beq.n	80027fc <HAL_DMA_Init+0x3e4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <HAL_DMA_Init+0x438>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d012      	beq.n	80027fc <HAL_DMA_Init+0x3e4>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1e      	ldr	r2, [pc, #120]	@ (8002854 <HAL_DMA_Init+0x43c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00d      	beq.n	80027fc <HAL_DMA_Init+0x3e4>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002858 <HAL_DMA_Init+0x440>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d008      	beq.n	80027fc <HAL_DMA_Init+0x3e4>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <HAL_DMA_Init+0x444>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_Init+0x3e4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_DMA_Init+0x448>)
 80027fa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <HAL_DMA_Init+0x44c>)
 8002818:	4013      	ands	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	d021      	beq.n	8002868 <HAL_DMA_Init+0x450>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b80      	cmp	r3, #128	@ 0x80
 800282a:	d102      	bne.n	8002832 <HAL_DMA_Init+0x41a>
 800282c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002830:	e01b      	b.n	800286a <HAL_DMA_Init+0x452>
 8002832:	2300      	movs	r3, #0
 8002834:	e019      	b.n	800286a <HAL_DMA_Init+0x452>
 8002836:	bf00      	nop
 8002838:	fe10803f 	.word	0xfe10803f
 800283c:	5c001000 	.word	0x5c001000
 8002840:	ffff0000 	.word	0xffff0000
 8002844:	58025408 	.word	0x58025408
 8002848:	5802541c 	.word	0x5802541c
 800284c:	58025430 	.word	0x58025430
 8002850:	58025444 	.word	0x58025444
 8002854:	58025458 	.word	0x58025458
 8002858:	5802546c 	.word	0x5802546c
 800285c:	58025480 	.word	0x58025480
 8002860:	58025494 	.word	0x58025494
 8002864:	fffe000f 	.word	0xfffe000f
 8002868:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68d2      	ldr	r2, [r2, #12]
 800286e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002888:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002890:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002898:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002a68 <HAL_DMA_Init+0x650>)
 80028b0:	4413      	add	r3, r2
 80028b2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a6c <HAL_DMA_Init+0x654>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	009a      	lsls	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f002 f9b5 	bl	8004c30 <DMA_CalcBaseAndBitshift>
 80028c6:	4603      	mov	r3, r0
 80028c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2201      	movs	r2, #1
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	e008      	b.n	80028ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2240      	movs	r2, #64	@ 0x40
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2203      	movs	r2, #3
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0b7      	b.n	8002a5e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a70 <HAL_DMA_Init+0x658>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d072      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002a74 <HAL_DMA_Init+0x65c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d06d      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a5c      	ldr	r2, [pc, #368]	@ (8002a78 <HAL_DMA_Init+0x660>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d068      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5a      	ldr	r2, [pc, #360]	@ (8002a7c <HAL_DMA_Init+0x664>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d063      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a59      	ldr	r2, [pc, #356]	@ (8002a80 <HAL_DMA_Init+0x668>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d05e      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a57      	ldr	r2, [pc, #348]	@ (8002a84 <HAL_DMA_Init+0x66c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d059      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a56      	ldr	r2, [pc, #344]	@ (8002a88 <HAL_DMA_Init+0x670>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d054      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a54      	ldr	r2, [pc, #336]	@ (8002a8c <HAL_DMA_Init+0x674>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d04f      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a53      	ldr	r2, [pc, #332]	@ (8002a90 <HAL_DMA_Init+0x678>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d04a      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a51      	ldr	r2, [pc, #324]	@ (8002a94 <HAL_DMA_Init+0x67c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d045      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a50      	ldr	r2, [pc, #320]	@ (8002a98 <HAL_DMA_Init+0x680>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d040      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4e      	ldr	r2, [pc, #312]	@ (8002a9c <HAL_DMA_Init+0x684>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d03b      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa0 <HAL_DMA_Init+0x688>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d036      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa4 <HAL_DMA_Init+0x68c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa8 <HAL_DMA_Init+0x690>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d02c      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a48      	ldr	r2, [pc, #288]	@ (8002aac <HAL_DMA_Init+0x694>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d027      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a47      	ldr	r2, [pc, #284]	@ (8002ab0 <HAL_DMA_Init+0x698>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d022      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a45      	ldr	r2, [pc, #276]	@ (8002ab4 <HAL_DMA_Init+0x69c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a44      	ldr	r2, [pc, #272]	@ (8002ab8 <HAL_DMA_Init+0x6a0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a42      	ldr	r2, [pc, #264]	@ (8002abc <HAL_DMA_Init+0x6a4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a41      	ldr	r2, [pc, #260]	@ (8002ac0 <HAL_DMA_Init+0x6a8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ac4 <HAL_DMA_Init+0x6ac>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a3e      	ldr	r2, [pc, #248]	@ (8002ac8 <HAL_DMA_Init+0x6b0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_DMA_Init+0x5c6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a3c      	ldr	r2, [pc, #240]	@ (8002acc <HAL_DMA_Init+0x6b4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Init+0x5ca>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_DMA_Init+0x5cc>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d032      	beq.n	8002a4e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f002 fa4f 	bl	8004e8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b80      	cmp	r3, #128	@ 0x80
 80029f4:	d102      	bne.n	80029fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_DMA_Init+0x624>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d80c      	bhi.n	8002a3c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f002 facc 	bl	8004fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	e008      	b.n	8002a4e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	a7fdabf8 	.word	0xa7fdabf8
 8002a6c:	cccccccd 	.word	0xcccccccd
 8002a70:	40020010 	.word	0x40020010
 8002a74:	40020028 	.word	0x40020028
 8002a78:	40020040 	.word	0x40020040
 8002a7c:	40020058 	.word	0x40020058
 8002a80:	40020070 	.word	0x40020070
 8002a84:	40020088 	.word	0x40020088
 8002a88:	400200a0 	.word	0x400200a0
 8002a8c:	400200b8 	.word	0x400200b8
 8002a90:	40020410 	.word	0x40020410
 8002a94:	40020428 	.word	0x40020428
 8002a98:	40020440 	.word	0x40020440
 8002a9c:	40020458 	.word	0x40020458
 8002aa0:	40020470 	.word	0x40020470
 8002aa4:	40020488 	.word	0x40020488
 8002aa8:	400204a0 	.word	0x400204a0
 8002aac:	400204b8 	.word	0x400204b8
 8002ab0:	58025408 	.word	0x58025408
 8002ab4:	5802541c 	.word	0x5802541c
 8002ab8:	58025430 	.word	0x58025430
 8002abc:	58025444 	.word	0x58025444
 8002ac0:	58025458 	.word	0x58025458
 8002ac4:	5802546c 	.word	0x5802546c
 8002ac8:	58025480 	.word	0x58025480
 8002acc:	58025494 	.word	0x58025494

08002ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e226      	b.n	8002f3a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_DMA_Start_IT+0x2a>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e21f      	b.n	8002f3a <HAL_DMA_Start_IT+0x46a>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f040 820a 	bne.w	8002f24 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a68      	ldr	r2, [pc, #416]	@ (8002cc4 <HAL_DMA_Start_IT+0x1f4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d04a      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a66      	ldr	r2, [pc, #408]	@ (8002cc8 <HAL_DMA_Start_IT+0x1f8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d045      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a65      	ldr	r2, [pc, #404]	@ (8002ccc <HAL_DMA_Start_IT+0x1fc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d040      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a63      	ldr	r2, [pc, #396]	@ (8002cd0 <HAL_DMA_Start_IT+0x200>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d03b      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a62      	ldr	r2, [pc, #392]	@ (8002cd4 <HAL_DMA_Start_IT+0x204>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d036      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a60      	ldr	r2, [pc, #384]	@ (8002cd8 <HAL_DMA_Start_IT+0x208>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d031      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cdc <HAL_DMA_Start_IT+0x20c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d02c      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce0 <HAL_DMA_Start_IT+0x210>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d027      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a5c      	ldr	r2, [pc, #368]	@ (8002ce4 <HAL_DMA_Start_IT+0x214>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d022      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce8 <HAL_DMA_Start_IT+0x218>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01d      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a59      	ldr	r2, [pc, #356]	@ (8002cec <HAL_DMA_Start_IT+0x21c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d018      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a57      	ldr	r2, [pc, #348]	@ (8002cf0 <HAL_DMA_Start_IT+0x220>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a56      	ldr	r2, [pc, #344]	@ (8002cf4 <HAL_DMA_Start_IT+0x224>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00e      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a54      	ldr	r2, [pc, #336]	@ (8002cf8 <HAL_DMA_Start_IT+0x228>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d009      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a53      	ldr	r2, [pc, #332]	@ (8002cfc <HAL_DMA_Start_IT+0x22c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_DMA_Start_IT+0xee>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a51      	ldr	r2, [pc, #324]	@ (8002d00 <HAL_DMA_Start_IT+0x230>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d108      	bne.n	8002bd0 <HAL_DMA_Start_IT+0x100>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e007      	b.n	8002be0 <HAL_DMA_Start_IT+0x110>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f001 fe76 	bl	80048d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a34      	ldr	r2, [pc, #208]	@ (8002cc4 <HAL_DMA_Start_IT+0x1f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d04a      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a33      	ldr	r2, [pc, #204]	@ (8002cc8 <HAL_DMA_Start_IT+0x1f8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d045      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <HAL_DMA_Start_IT+0x1fc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d040      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a30      	ldr	r2, [pc, #192]	@ (8002cd0 <HAL_DMA_Start_IT+0x200>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d03b      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd4 <HAL_DMA_Start_IT+0x204>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d036      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd8 <HAL_DMA_Start_IT+0x208>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d031      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cdc <HAL_DMA_Start_IT+0x20c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d02c      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce0 <HAL_DMA_Start_IT+0x210>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d027      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a28      	ldr	r2, [pc, #160]	@ (8002ce4 <HAL_DMA_Start_IT+0x214>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d022      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a27      	ldr	r2, [pc, #156]	@ (8002ce8 <HAL_DMA_Start_IT+0x218>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d01d      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a25      	ldr	r2, [pc, #148]	@ (8002cec <HAL_DMA_Start_IT+0x21c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d018      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a24      	ldr	r2, [pc, #144]	@ (8002cf0 <HAL_DMA_Start_IT+0x220>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a22      	ldr	r2, [pc, #136]	@ (8002cf4 <HAL_DMA_Start_IT+0x224>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00e      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a21      	ldr	r2, [pc, #132]	@ (8002cf8 <HAL_DMA_Start_IT+0x228>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cfc <HAL_DMA_Start_IT+0x22c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_DMA_Start_IT+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <HAL_DMA_Start_IT+0x230>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_DMA_Start_IT+0x1c0>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <HAL_DMA_Start_IT+0x1c2>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d036      	beq.n	8002d04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 021e 	bic.w	r2, r3, #30
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0216 	orr.w	r2, r2, #22
 8002ca8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d03e      	beq.n	8002d30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0208 	orr.w	r2, r2, #8
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e035      	b.n	8002d30 <HAL_DMA_Start_IT+0x260>
 8002cc4:	40020010 	.word	0x40020010
 8002cc8:	40020028 	.word	0x40020028
 8002ccc:	40020040 	.word	0x40020040
 8002cd0:	40020058 	.word	0x40020058
 8002cd4:	40020070 	.word	0x40020070
 8002cd8:	40020088 	.word	0x40020088
 8002cdc:	400200a0 	.word	0x400200a0
 8002ce0:	400200b8 	.word	0x400200b8
 8002ce4:	40020410 	.word	0x40020410
 8002ce8:	40020428 	.word	0x40020428
 8002cec:	40020440 	.word	0x40020440
 8002cf0:	40020458 	.word	0x40020458
 8002cf4:	40020470 	.word	0x40020470
 8002cf8:	40020488 	.word	0x40020488
 8002cfc:	400204a0 	.word	0x400204a0
 8002d00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 020e 	bic.w	r2, r3, #14
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 020a 	orr.w	r2, r2, #10
 8002d16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0204 	orr.w	r2, r2, #4
 8002d2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a83      	ldr	r2, [pc, #524]	@ (8002f44 <HAL_DMA_Start_IT+0x474>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d072      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a82      	ldr	r2, [pc, #520]	@ (8002f48 <HAL_DMA_Start_IT+0x478>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d06d      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a80      	ldr	r2, [pc, #512]	@ (8002f4c <HAL_DMA_Start_IT+0x47c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d068      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7f      	ldr	r2, [pc, #508]	@ (8002f50 <HAL_DMA_Start_IT+0x480>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d063      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a7d      	ldr	r2, [pc, #500]	@ (8002f54 <HAL_DMA_Start_IT+0x484>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d05e      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7c      	ldr	r2, [pc, #496]	@ (8002f58 <HAL_DMA_Start_IT+0x488>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d059      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a7a      	ldr	r2, [pc, #488]	@ (8002f5c <HAL_DMA_Start_IT+0x48c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d054      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a79      	ldr	r2, [pc, #484]	@ (8002f60 <HAL_DMA_Start_IT+0x490>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d04f      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a77      	ldr	r2, [pc, #476]	@ (8002f64 <HAL_DMA_Start_IT+0x494>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d04a      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a76      	ldr	r2, [pc, #472]	@ (8002f68 <HAL_DMA_Start_IT+0x498>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d045      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a74      	ldr	r2, [pc, #464]	@ (8002f6c <HAL_DMA_Start_IT+0x49c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d040      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a73      	ldr	r2, [pc, #460]	@ (8002f70 <HAL_DMA_Start_IT+0x4a0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d03b      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a71      	ldr	r2, [pc, #452]	@ (8002f74 <HAL_DMA_Start_IT+0x4a4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d036      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a70      	ldr	r2, [pc, #448]	@ (8002f78 <HAL_DMA_Start_IT+0x4a8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d031      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f7c <HAL_DMA_Start_IT+0x4ac>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d02c      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a6d      	ldr	r2, [pc, #436]	@ (8002f80 <HAL_DMA_Start_IT+0x4b0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d027      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8002f84 <HAL_DMA_Start_IT+0x4b4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d022      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6a      	ldr	r2, [pc, #424]	@ (8002f88 <HAL_DMA_Start_IT+0x4b8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d01d      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a68      	ldr	r2, [pc, #416]	@ (8002f8c <HAL_DMA_Start_IT+0x4bc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d018      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a67      	ldr	r2, [pc, #412]	@ (8002f90 <HAL_DMA_Start_IT+0x4c0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a65      	ldr	r2, [pc, #404]	@ (8002f94 <HAL_DMA_Start_IT+0x4c4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00e      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a64      	ldr	r2, [pc, #400]	@ (8002f98 <HAL_DMA_Start_IT+0x4c8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a62      	ldr	r2, [pc, #392]	@ (8002f9c <HAL_DMA_Start_IT+0x4cc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_DMA_Start_IT+0x350>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a61      	ldr	r2, [pc, #388]	@ (8002fa0 <HAL_DMA_Start_IT+0x4d0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_DMA_Start_IT+0x354>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_DMA_Start_IT+0x356>
 8002e24:	2300      	movs	r3, #0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01a      	beq.n	8002e60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a37      	ldr	r2, [pc, #220]	@ (8002f44 <HAL_DMA_Start_IT+0x474>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d04a      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a36      	ldr	r2, [pc, #216]	@ (8002f48 <HAL_DMA_Start_IT+0x478>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d045      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a34      	ldr	r2, [pc, #208]	@ (8002f4c <HAL_DMA_Start_IT+0x47c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d040      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a33      	ldr	r2, [pc, #204]	@ (8002f50 <HAL_DMA_Start_IT+0x480>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d03b      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a31      	ldr	r2, [pc, #196]	@ (8002f54 <HAL_DMA_Start_IT+0x484>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d036      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a30      	ldr	r2, [pc, #192]	@ (8002f58 <HAL_DMA_Start_IT+0x488>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d031      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8002f5c <HAL_DMA_Start_IT+0x48c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d02c      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8002f60 <HAL_DMA_Start_IT+0x490>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d027      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f64 <HAL_DMA_Start_IT+0x494>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d022      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8002f68 <HAL_DMA_Start_IT+0x498>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01d      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a28      	ldr	r2, [pc, #160]	@ (8002f6c <HAL_DMA_Start_IT+0x49c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d018      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a27      	ldr	r2, [pc, #156]	@ (8002f70 <HAL_DMA_Start_IT+0x4a0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a25      	ldr	r2, [pc, #148]	@ (8002f74 <HAL_DMA_Start_IT+0x4a4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a24      	ldr	r2, [pc, #144]	@ (8002f78 <HAL_DMA_Start_IT+0x4a8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a22      	ldr	r2, [pc, #136]	@ (8002f7c <HAL_DMA_Start_IT+0x4ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_Start_IT+0x430>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a21      	ldr	r2, [pc, #132]	@ (8002f80 <HAL_DMA_Start_IT+0x4b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <HAL_DMA_Start_IT+0x442>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e012      	b.n	8002f38 <HAL_DMA_Start_IT+0x468>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e009      	b.n	8002f38 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40020010 	.word	0x40020010
 8002f48:	40020028 	.word	0x40020028
 8002f4c:	40020040 	.word	0x40020040
 8002f50:	40020058 	.word	0x40020058
 8002f54:	40020070 	.word	0x40020070
 8002f58:	40020088 	.word	0x40020088
 8002f5c:	400200a0 	.word	0x400200a0
 8002f60:	400200b8 	.word	0x400200b8
 8002f64:	40020410 	.word	0x40020410
 8002f68:	40020428 	.word	0x40020428
 8002f6c:	40020440 	.word	0x40020440
 8002f70:	40020458 	.word	0x40020458
 8002f74:	40020470 	.word	0x40020470
 8002f78:	40020488 	.word	0x40020488
 8002f7c:	400204a0 	.word	0x400204a0
 8002f80:	400204b8 	.word	0x400204b8
 8002f84:	58025408 	.word	0x58025408
 8002f88:	5802541c 	.word	0x5802541c
 8002f8c:	58025430 	.word	0x58025430
 8002f90:	58025444 	.word	0x58025444
 8002f94:	58025458 	.word	0x58025458
 8002f98:	5802546c 	.word	0x5802546c
 8002f9c:	58025480 	.word	0x58025480
 8002fa0:	58025494 	.word	0x58025494

08002fa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002fac:	f7ff f93c 	bl	8002228 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e2dc      	b.n	8003576 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d008      	beq.n	8002fda <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2280      	movs	r2, #128	@ 0x80
 8002fcc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e2cd      	b.n	8003576 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a76      	ldr	r2, [pc, #472]	@ (80031b8 <HAL_DMA_Abort+0x214>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04a      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a74      	ldr	r2, [pc, #464]	@ (80031bc <HAL_DMA_Abort+0x218>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d045      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a73      	ldr	r2, [pc, #460]	@ (80031c0 <HAL_DMA_Abort+0x21c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d040      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a71      	ldr	r2, [pc, #452]	@ (80031c4 <HAL_DMA_Abort+0x220>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d03b      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a70      	ldr	r2, [pc, #448]	@ (80031c8 <HAL_DMA_Abort+0x224>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d036      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6e      	ldr	r2, [pc, #440]	@ (80031cc <HAL_DMA_Abort+0x228>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d031      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6d      	ldr	r2, [pc, #436]	@ (80031d0 <HAL_DMA_Abort+0x22c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d02c      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6b      	ldr	r2, [pc, #428]	@ (80031d4 <HAL_DMA_Abort+0x230>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d027      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6a      	ldr	r2, [pc, #424]	@ (80031d8 <HAL_DMA_Abort+0x234>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d022      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a68      	ldr	r2, [pc, #416]	@ (80031dc <HAL_DMA_Abort+0x238>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01d      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a67      	ldr	r2, [pc, #412]	@ (80031e0 <HAL_DMA_Abort+0x23c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d018      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a65      	ldr	r2, [pc, #404]	@ (80031e4 <HAL_DMA_Abort+0x240>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a64      	ldr	r2, [pc, #400]	@ (80031e8 <HAL_DMA_Abort+0x244>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00e      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a62      	ldr	r2, [pc, #392]	@ (80031ec <HAL_DMA_Abort+0x248>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a61      	ldr	r2, [pc, #388]	@ (80031f0 <HAL_DMA_Abort+0x24c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_DMA_Abort+0xd6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a5f      	ldr	r2, [pc, #380]	@ (80031f4 <HAL_DMA_Abort+0x250>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_DMA_Abort+0xda>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_DMA_Abort+0xdc>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 021e 	bic.w	r2, r2, #30
 8003092:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e00a      	b.n	80030c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 020e 	bic.w	r2, r2, #14
 80030ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a3c      	ldr	r2, [pc, #240]	@ (80031b8 <HAL_DMA_Abort+0x214>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d072      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a3a      	ldr	r2, [pc, #232]	@ (80031bc <HAL_DMA_Abort+0x218>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d06d      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a39      	ldr	r2, [pc, #228]	@ (80031c0 <HAL_DMA_Abort+0x21c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d068      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a37      	ldr	r2, [pc, #220]	@ (80031c4 <HAL_DMA_Abort+0x220>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d063      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a36      	ldr	r2, [pc, #216]	@ (80031c8 <HAL_DMA_Abort+0x224>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d05e      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a34      	ldr	r2, [pc, #208]	@ (80031cc <HAL_DMA_Abort+0x228>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d059      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a33      	ldr	r2, [pc, #204]	@ (80031d0 <HAL_DMA_Abort+0x22c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d054      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a31      	ldr	r2, [pc, #196]	@ (80031d4 <HAL_DMA_Abort+0x230>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d04f      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a30      	ldr	r2, [pc, #192]	@ (80031d8 <HAL_DMA_Abort+0x234>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2e      	ldr	r2, [pc, #184]	@ (80031dc <HAL_DMA_Abort+0x238>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2d      	ldr	r2, [pc, #180]	@ (80031e0 <HAL_DMA_Abort+0x23c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2b      	ldr	r2, [pc, #172]	@ (80031e4 <HAL_DMA_Abort+0x240>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2a      	ldr	r2, [pc, #168]	@ (80031e8 <HAL_DMA_Abort+0x244>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a28      	ldr	r2, [pc, #160]	@ (80031ec <HAL_DMA_Abort+0x248>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a27      	ldr	r2, [pc, #156]	@ (80031f0 <HAL_DMA_Abort+0x24c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a25      	ldr	r2, [pc, #148]	@ (80031f4 <HAL_DMA_Abort+0x250>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a24      	ldr	r2, [pc, #144]	@ (80031f8 <HAL_DMA_Abort+0x254>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a22      	ldr	r2, [pc, #136]	@ (80031fc <HAL_DMA_Abort+0x258>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a21      	ldr	r2, [pc, #132]	@ (8003200 <HAL_DMA_Abort+0x25c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <HAL_DMA_Abort+0x260>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1e      	ldr	r2, [pc, #120]	@ (8003208 <HAL_DMA_Abort+0x264>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1c      	ldr	r2, [pc, #112]	@ (800320c <HAL_DMA_Abort+0x268>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003210 <HAL_DMA_Abort+0x26c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Abort+0x20e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a19      	ldr	r2, [pc, #100]	@ (8003214 <HAL_DMA_Abort+0x270>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d132      	bne.n	8003218 <HAL_DMA_Abort+0x274>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e031      	b.n	800321a <HAL_DMA_Abort+0x276>
 80031b6:	bf00      	nop
 80031b8:	40020010 	.word	0x40020010
 80031bc:	40020028 	.word	0x40020028
 80031c0:	40020040 	.word	0x40020040
 80031c4:	40020058 	.word	0x40020058
 80031c8:	40020070 	.word	0x40020070
 80031cc:	40020088 	.word	0x40020088
 80031d0:	400200a0 	.word	0x400200a0
 80031d4:	400200b8 	.word	0x400200b8
 80031d8:	40020410 	.word	0x40020410
 80031dc:	40020428 	.word	0x40020428
 80031e0:	40020440 	.word	0x40020440
 80031e4:	40020458 	.word	0x40020458
 80031e8:	40020470 	.word	0x40020470
 80031ec:	40020488 	.word	0x40020488
 80031f0:	400204a0 	.word	0x400204a0
 80031f4:	400204b8 	.word	0x400204b8
 80031f8:	58025408 	.word	0x58025408
 80031fc:	5802541c 	.word	0x5802541c
 8003200:	58025430 	.word	0x58025430
 8003204:	58025444 	.word	0x58025444
 8003208:	58025458 	.word	0x58025458
 800320c:	5802546c 	.word	0x5802546c
 8003210:	58025480 	.word	0x58025480
 8003214:	58025494 	.word	0x58025494
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003228:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800322c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6d      	ldr	r2, [pc, #436]	@ (80033e8 <HAL_DMA_Abort+0x444>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04a      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a6b      	ldr	r2, [pc, #428]	@ (80033ec <HAL_DMA_Abort+0x448>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d045      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6a      	ldr	r2, [pc, #424]	@ (80033f0 <HAL_DMA_Abort+0x44c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d040      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a68      	ldr	r2, [pc, #416]	@ (80033f4 <HAL_DMA_Abort+0x450>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d03b      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a67      	ldr	r2, [pc, #412]	@ (80033f8 <HAL_DMA_Abort+0x454>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d036      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a65      	ldr	r2, [pc, #404]	@ (80033fc <HAL_DMA_Abort+0x458>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d031      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a64      	ldr	r2, [pc, #400]	@ (8003400 <HAL_DMA_Abort+0x45c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d02c      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a62      	ldr	r2, [pc, #392]	@ (8003404 <HAL_DMA_Abort+0x460>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d027      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a61      	ldr	r2, [pc, #388]	@ (8003408 <HAL_DMA_Abort+0x464>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d022      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5f      	ldr	r2, [pc, #380]	@ (800340c <HAL_DMA_Abort+0x468>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01d      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5e      	ldr	r2, [pc, #376]	@ (8003410 <HAL_DMA_Abort+0x46c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d018      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a5c      	ldr	r2, [pc, #368]	@ (8003414 <HAL_DMA_Abort+0x470>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003418 <HAL_DMA_Abort+0x474>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a59      	ldr	r2, [pc, #356]	@ (800341c <HAL_DMA_Abort+0x478>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a58      	ldr	r2, [pc, #352]	@ (8003420 <HAL_DMA_Abort+0x47c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_DMA_Abort+0x32a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a56      	ldr	r2, [pc, #344]	@ (8003424 <HAL_DMA_Abort+0x480>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <HAL_DMA_Abort+0x33c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e007      	b.n	80032f0 <HAL_DMA_Abort+0x34c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032f0:	e013      	b.n	800331a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032f2:	f7fe ff99 	bl	8002228 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d90c      	bls.n	800331a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2203      	movs	r2, #3
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e12d      	b.n	8003576 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e5      	bne.n	80032f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2f      	ldr	r2, [pc, #188]	@ (80033e8 <HAL_DMA_Abort+0x444>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d04a      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2d      	ldr	r2, [pc, #180]	@ (80033ec <HAL_DMA_Abort+0x448>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d045      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2c      	ldr	r2, [pc, #176]	@ (80033f0 <HAL_DMA_Abort+0x44c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d040      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2a      	ldr	r2, [pc, #168]	@ (80033f4 <HAL_DMA_Abort+0x450>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d03b      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a29      	ldr	r2, [pc, #164]	@ (80033f8 <HAL_DMA_Abort+0x454>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d036      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a27      	ldr	r2, [pc, #156]	@ (80033fc <HAL_DMA_Abort+0x458>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a26      	ldr	r2, [pc, #152]	@ (8003400 <HAL_DMA_Abort+0x45c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d02c      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a24      	ldr	r2, [pc, #144]	@ (8003404 <HAL_DMA_Abort+0x460>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d027      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a23      	ldr	r2, [pc, #140]	@ (8003408 <HAL_DMA_Abort+0x464>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a21      	ldr	r2, [pc, #132]	@ (800340c <HAL_DMA_Abort+0x468>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01d      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a20      	ldr	r2, [pc, #128]	@ (8003410 <HAL_DMA_Abort+0x46c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1e      	ldr	r2, [pc, #120]	@ (8003414 <HAL_DMA_Abort+0x470>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <HAL_DMA_Abort+0x474>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1b      	ldr	r2, [pc, #108]	@ (800341c <HAL_DMA_Abort+0x478>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <HAL_DMA_Abort+0x47c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_DMA_Abort+0x422>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a18      	ldr	r2, [pc, #96]	@ (8003424 <HAL_DMA_Abort+0x480>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_DMA_Abort+0x426>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_DMA_Abort+0x428>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02b      	beq.n	8003428 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	223f      	movs	r2, #63	@ 0x3f
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	e02a      	b.n	800343e <HAL_DMA_Abort+0x49a>
 80033e8:	40020010 	.word	0x40020010
 80033ec:	40020028 	.word	0x40020028
 80033f0:	40020040 	.word	0x40020040
 80033f4:	40020058 	.word	0x40020058
 80033f8:	40020070 	.word	0x40020070
 80033fc:	40020088 	.word	0x40020088
 8003400:	400200a0 	.word	0x400200a0
 8003404:	400200b8 	.word	0x400200b8
 8003408:	40020410 	.word	0x40020410
 800340c:	40020428 	.word	0x40020428
 8003410:	40020440 	.word	0x40020440
 8003414:	40020458 	.word	0x40020458
 8003418:	40020470 	.word	0x40020470
 800341c:	40020488 	.word	0x40020488
 8003420:	400204a0 	.word	0x400204a0
 8003424:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2201      	movs	r2, #1
 8003438:	409a      	lsls	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a4f      	ldr	r2, [pc, #316]	@ (8003580 <HAL_DMA_Abort+0x5dc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d072      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a4d      	ldr	r2, [pc, #308]	@ (8003584 <HAL_DMA_Abort+0x5e0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d06d      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a4c      	ldr	r2, [pc, #304]	@ (8003588 <HAL_DMA_Abort+0x5e4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d068      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a4a      	ldr	r2, [pc, #296]	@ (800358c <HAL_DMA_Abort+0x5e8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d063      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a49      	ldr	r2, [pc, #292]	@ (8003590 <HAL_DMA_Abort+0x5ec>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d05e      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a47      	ldr	r2, [pc, #284]	@ (8003594 <HAL_DMA_Abort+0x5f0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d059      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a46      	ldr	r2, [pc, #280]	@ (8003598 <HAL_DMA_Abort+0x5f4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d054      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a44      	ldr	r2, [pc, #272]	@ (800359c <HAL_DMA_Abort+0x5f8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d04f      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a43      	ldr	r2, [pc, #268]	@ (80035a0 <HAL_DMA_Abort+0x5fc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d04a      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a41      	ldr	r2, [pc, #260]	@ (80035a4 <HAL_DMA_Abort+0x600>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d045      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a40      	ldr	r2, [pc, #256]	@ (80035a8 <HAL_DMA_Abort+0x604>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d040      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3e      	ldr	r2, [pc, #248]	@ (80035ac <HAL_DMA_Abort+0x608>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d03b      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a3d      	ldr	r2, [pc, #244]	@ (80035b0 <HAL_DMA_Abort+0x60c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d036      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a3b      	ldr	r2, [pc, #236]	@ (80035b4 <HAL_DMA_Abort+0x610>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d031      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a3a      	ldr	r2, [pc, #232]	@ (80035b8 <HAL_DMA_Abort+0x614>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d02c      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a38      	ldr	r2, [pc, #224]	@ (80035bc <HAL_DMA_Abort+0x618>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d027      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a37      	ldr	r2, [pc, #220]	@ (80035c0 <HAL_DMA_Abort+0x61c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d022      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a35      	ldr	r2, [pc, #212]	@ (80035c4 <HAL_DMA_Abort+0x620>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01d      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a34      	ldr	r2, [pc, #208]	@ (80035c8 <HAL_DMA_Abort+0x624>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d018      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a32      	ldr	r2, [pc, #200]	@ (80035cc <HAL_DMA_Abort+0x628>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a31      	ldr	r2, [pc, #196]	@ (80035d0 <HAL_DMA_Abort+0x62c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00e      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a2f      	ldr	r2, [pc, #188]	@ (80035d4 <HAL_DMA_Abort+0x630>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2e      	ldr	r2, [pc, #184]	@ (80035d8 <HAL_DMA_Abort+0x634>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_DMA_Abort+0x58a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2c      	ldr	r2, [pc, #176]	@ (80035dc <HAL_DMA_Abort+0x638>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_DMA_Abort+0x58e>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_DMA_Abort+0x590>
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003540:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003558:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003562:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40020010 	.word	0x40020010
 8003584:	40020028 	.word	0x40020028
 8003588:	40020040 	.word	0x40020040
 800358c:	40020058 	.word	0x40020058
 8003590:	40020070 	.word	0x40020070
 8003594:	40020088 	.word	0x40020088
 8003598:	400200a0 	.word	0x400200a0
 800359c:	400200b8 	.word	0x400200b8
 80035a0:	40020410 	.word	0x40020410
 80035a4:	40020428 	.word	0x40020428
 80035a8:	40020440 	.word	0x40020440
 80035ac:	40020458 	.word	0x40020458
 80035b0:	40020470 	.word	0x40020470
 80035b4:	40020488 	.word	0x40020488
 80035b8:	400204a0 	.word	0x400204a0
 80035bc:	400204b8 	.word	0x400204b8
 80035c0:	58025408 	.word	0x58025408
 80035c4:	5802541c 	.word	0x5802541c
 80035c8:	58025430 	.word	0x58025430
 80035cc:	58025444 	.word	0x58025444
 80035d0:	58025458 	.word	0x58025458
 80035d4:	5802546c 	.word	0x5802546c
 80035d8:	58025480 	.word	0x58025480
 80035dc:	58025494 	.word	0x58025494

080035e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e237      	b.n	8003a62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d004      	beq.n	8003608 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2280      	movs	r2, #128	@ 0x80
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e22c      	b.n	8003a62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a5c      	ldr	r2, [pc, #368]	@ (8003780 <HAL_DMA_Abort_IT+0x1a0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04a      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a5b      	ldr	r2, [pc, #364]	@ (8003784 <HAL_DMA_Abort_IT+0x1a4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d045      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a59      	ldr	r2, [pc, #356]	@ (8003788 <HAL_DMA_Abort_IT+0x1a8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d040      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a58      	ldr	r2, [pc, #352]	@ (800378c <HAL_DMA_Abort_IT+0x1ac>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d03b      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a56      	ldr	r2, [pc, #344]	@ (8003790 <HAL_DMA_Abort_IT+0x1b0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d036      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a55      	ldr	r2, [pc, #340]	@ (8003794 <HAL_DMA_Abort_IT+0x1b4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d031      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a53      	ldr	r2, [pc, #332]	@ (8003798 <HAL_DMA_Abort_IT+0x1b8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02c      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a52      	ldr	r2, [pc, #328]	@ (800379c <HAL_DMA_Abort_IT+0x1bc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d027      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a50      	ldr	r2, [pc, #320]	@ (80037a0 <HAL_DMA_Abort_IT+0x1c0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4f      	ldr	r2, [pc, #316]	@ (80037a4 <HAL_DMA_Abort_IT+0x1c4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d01d      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a4d      	ldr	r2, [pc, #308]	@ (80037a8 <HAL_DMA_Abort_IT+0x1c8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a4c      	ldr	r2, [pc, #304]	@ (80037ac <HAL_DMA_Abort_IT+0x1cc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a4a      	ldr	r2, [pc, #296]	@ (80037b0 <HAL_DMA_Abort_IT+0x1d0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a49      	ldr	r2, [pc, #292]	@ (80037b4 <HAL_DMA_Abort_IT+0x1d4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a47      	ldr	r2, [pc, #284]	@ (80037b8 <HAL_DMA_Abort_IT+0x1d8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a46      	ldr	r2, [pc, #280]	@ (80037bc <HAL_DMA_Abort_IT+0x1dc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_Abort_IT+0xcc>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_DMA_Abort_IT+0xce>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8086 	beq.w	80037c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2204      	movs	r2, #4
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003780 <HAL_DMA_Abort_IT+0x1a0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d04a      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003784 <HAL_DMA_Abort_IT+0x1a4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d045      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003788 <HAL_DMA_Abort_IT+0x1a8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d040      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2b      	ldr	r2, [pc, #172]	@ (800378c <HAL_DMA_Abort_IT+0x1ac>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d03b      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a29      	ldr	r2, [pc, #164]	@ (8003790 <HAL_DMA_Abort_IT+0x1b0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d036      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a28      	ldr	r2, [pc, #160]	@ (8003794 <HAL_DMA_Abort_IT+0x1b4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d031      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a26      	ldr	r2, [pc, #152]	@ (8003798 <HAL_DMA_Abort_IT+0x1b8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02c      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a25      	ldr	r2, [pc, #148]	@ (800379c <HAL_DMA_Abort_IT+0x1bc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d027      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <HAL_DMA_Abort_IT+0x1c0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d022      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a22      	ldr	r2, [pc, #136]	@ (80037a4 <HAL_DMA_Abort_IT+0x1c4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01d      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a20      	ldr	r2, [pc, #128]	@ (80037a8 <HAL_DMA_Abort_IT+0x1c8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1f      	ldr	r2, [pc, #124]	@ (80037ac <HAL_DMA_Abort_IT+0x1cc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1d      	ldr	r2, [pc, #116]	@ (80037b0 <HAL_DMA_Abort_IT+0x1d0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1c      	ldr	r2, [pc, #112]	@ (80037b4 <HAL_DMA_Abort_IT+0x1d4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1a      	ldr	r2, [pc, #104]	@ (80037b8 <HAL_DMA_Abort_IT+0x1d8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_DMA_Abort_IT+0x17c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a19      	ldr	r2, [pc, #100]	@ (80037bc <HAL_DMA_Abort_IT+0x1dc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d108      	bne.n	800376e <HAL_DMA_Abort_IT+0x18e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e178      	b.n	8003a60 <HAL_DMA_Abort_IT+0x480>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e16f      	b.n	8003a60 <HAL_DMA_Abort_IT+0x480>
 8003780:	40020010 	.word	0x40020010
 8003784:	40020028 	.word	0x40020028
 8003788:	40020040 	.word	0x40020040
 800378c:	40020058 	.word	0x40020058
 8003790:	40020070 	.word	0x40020070
 8003794:	40020088 	.word	0x40020088
 8003798:	400200a0 	.word	0x400200a0
 800379c:	400200b8 	.word	0x400200b8
 80037a0:	40020410 	.word	0x40020410
 80037a4:	40020428 	.word	0x40020428
 80037a8:	40020440 	.word	0x40020440
 80037ac:	40020458 	.word	0x40020458
 80037b0:	40020470 	.word	0x40020470
 80037b4:	40020488 	.word	0x40020488
 80037b8:	400204a0 	.word	0x400204a0
 80037bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 020e 	bic.w	r2, r2, #14
 80037ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6c      	ldr	r2, [pc, #432]	@ (8003988 <HAL_DMA_Abort_IT+0x3a8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d04a      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a6b      	ldr	r2, [pc, #428]	@ (800398c <HAL_DMA_Abort_IT+0x3ac>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d045      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a69      	ldr	r2, [pc, #420]	@ (8003990 <HAL_DMA_Abort_IT+0x3b0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d040      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a68      	ldr	r2, [pc, #416]	@ (8003994 <HAL_DMA_Abort_IT+0x3b4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d03b      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a66      	ldr	r2, [pc, #408]	@ (8003998 <HAL_DMA_Abort_IT+0x3b8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d036      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a65      	ldr	r2, [pc, #404]	@ (800399c <HAL_DMA_Abort_IT+0x3bc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d031      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a63      	ldr	r2, [pc, #396]	@ (80039a0 <HAL_DMA_Abort_IT+0x3c0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02c      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a62      	ldr	r2, [pc, #392]	@ (80039a4 <HAL_DMA_Abort_IT+0x3c4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d027      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a60      	ldr	r2, [pc, #384]	@ (80039a8 <HAL_DMA_Abort_IT+0x3c8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d022      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a5f      	ldr	r2, [pc, #380]	@ (80039ac <HAL_DMA_Abort_IT+0x3cc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d01d      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a5d      	ldr	r2, [pc, #372]	@ (80039b0 <HAL_DMA_Abort_IT+0x3d0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d018      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a5c      	ldr	r2, [pc, #368]	@ (80039b4 <HAL_DMA_Abort_IT+0x3d4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a5a      	ldr	r2, [pc, #360]	@ (80039b8 <HAL_DMA_Abort_IT+0x3d8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a59      	ldr	r2, [pc, #356]	@ (80039bc <HAL_DMA_Abort_IT+0x3dc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a57      	ldr	r2, [pc, #348]	@ (80039c0 <HAL_DMA_Abort_IT+0x3e0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_DMA_Abort_IT+0x290>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a56      	ldr	r2, [pc, #344]	@ (80039c4 <HAL_DMA_Abort_IT+0x3e4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d108      	bne.n	8003882 <HAL_DMA_Abort_IT+0x2a2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e007      	b.n	8003892 <HAL_DMA_Abort_IT+0x2b2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3c      	ldr	r2, [pc, #240]	@ (8003988 <HAL_DMA_Abort_IT+0x3a8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d072      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3a      	ldr	r2, [pc, #232]	@ (800398c <HAL_DMA_Abort_IT+0x3ac>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d06d      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a39      	ldr	r2, [pc, #228]	@ (8003990 <HAL_DMA_Abort_IT+0x3b0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d068      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a37      	ldr	r2, [pc, #220]	@ (8003994 <HAL_DMA_Abort_IT+0x3b4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d063      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a36      	ldr	r2, [pc, #216]	@ (8003998 <HAL_DMA_Abort_IT+0x3b8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d05e      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a34      	ldr	r2, [pc, #208]	@ (800399c <HAL_DMA_Abort_IT+0x3bc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d059      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a33      	ldr	r2, [pc, #204]	@ (80039a0 <HAL_DMA_Abort_IT+0x3c0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d054      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a31      	ldr	r2, [pc, #196]	@ (80039a4 <HAL_DMA_Abort_IT+0x3c4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d04f      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a30      	ldr	r2, [pc, #192]	@ (80039a8 <HAL_DMA_Abort_IT+0x3c8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04a      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2e      	ldr	r2, [pc, #184]	@ (80039ac <HAL_DMA_Abort_IT+0x3cc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d045      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2d      	ldr	r2, [pc, #180]	@ (80039b0 <HAL_DMA_Abort_IT+0x3d0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2b      	ldr	r2, [pc, #172]	@ (80039b4 <HAL_DMA_Abort_IT+0x3d4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d03b      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2a      	ldr	r2, [pc, #168]	@ (80039b8 <HAL_DMA_Abort_IT+0x3d8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d036      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a28      	ldr	r2, [pc, #160]	@ (80039bc <HAL_DMA_Abort_IT+0x3dc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a27      	ldr	r2, [pc, #156]	@ (80039c0 <HAL_DMA_Abort_IT+0x3e0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d02c      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a25      	ldr	r2, [pc, #148]	@ (80039c4 <HAL_DMA_Abort_IT+0x3e4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a24      	ldr	r2, [pc, #144]	@ (80039c8 <HAL_DMA_Abort_IT+0x3e8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a22      	ldr	r2, [pc, #136]	@ (80039cc <HAL_DMA_Abort_IT+0x3ec>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a21      	ldr	r2, [pc, #132]	@ (80039d0 <HAL_DMA_Abort_IT+0x3f0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1f      	ldr	r2, [pc, #124]	@ (80039d4 <HAL_DMA_Abort_IT+0x3f4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1e      	ldr	r2, [pc, #120]	@ (80039d8 <HAL_DMA_Abort_IT+0x3f8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	@ (80039dc <HAL_DMA_Abort_IT+0x3fc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <HAL_DMA_Abort_IT+0x400>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_Abort_IT+0x3a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <HAL_DMA_Abort_IT+0x404>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d132      	bne.n	80039e8 <HAL_DMA_Abort_IT+0x408>
 8003982:	2301      	movs	r3, #1
 8003984:	e031      	b.n	80039ea <HAL_DMA_Abort_IT+0x40a>
 8003986:	bf00      	nop
 8003988:	40020010 	.word	0x40020010
 800398c:	40020028 	.word	0x40020028
 8003990:	40020040 	.word	0x40020040
 8003994:	40020058 	.word	0x40020058
 8003998:	40020070 	.word	0x40020070
 800399c:	40020088 	.word	0x40020088
 80039a0:	400200a0 	.word	0x400200a0
 80039a4:	400200b8 	.word	0x400200b8
 80039a8:	40020410 	.word	0x40020410
 80039ac:	40020428 	.word	0x40020428
 80039b0:	40020440 	.word	0x40020440
 80039b4:	40020458 	.word	0x40020458
 80039b8:	40020470 	.word	0x40020470
 80039bc:	40020488 	.word	0x40020488
 80039c0:	400204a0 	.word	0x400204a0
 80039c4:	400204b8 	.word	0x400204b8
 80039c8:	58025408 	.word	0x58025408
 80039cc:	5802541c 	.word	0x5802541c
 80039d0:	58025430 	.word	0x58025430
 80039d4:	58025444 	.word	0x58025444
 80039d8:	58025458 	.word	0x58025458
 80039dc:	5802546c 	.word	0x5802546c
 80039e0:	58025480 	.word	0x58025480
 80039e4:	58025494 	.word	0x58025494
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d028      	beq.n	8003a40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00c      	beq.n	8003a40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop

08003a6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	@ 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a78:	4b67      	ldr	r3, [pc, #412]	@ (8003c18 <HAL_DMA_IRQHandler+0x1ac>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a67      	ldr	r2, [pc, #412]	@ (8003c1c <HAL_DMA_IRQHandler+0x1b0>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5f      	ldr	r2, [pc, #380]	@ (8003c20 <HAL_DMA_IRQHandler+0x1b4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d04a      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5d      	ldr	r2, [pc, #372]	@ (8003c24 <HAL_DMA_IRQHandler+0x1b8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d045      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8003c28 <HAL_DMA_IRQHandler+0x1bc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d040      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5a      	ldr	r2, [pc, #360]	@ (8003c2c <HAL_DMA_IRQHandler+0x1c0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d03b      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a59      	ldr	r2, [pc, #356]	@ (8003c30 <HAL_DMA_IRQHandler+0x1c4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d036      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a57      	ldr	r2, [pc, #348]	@ (8003c34 <HAL_DMA_IRQHandler+0x1c8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d031      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a56      	ldr	r2, [pc, #344]	@ (8003c38 <HAL_DMA_IRQHandler+0x1cc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d02c      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a54      	ldr	r2, [pc, #336]	@ (8003c3c <HAL_DMA_IRQHandler+0x1d0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d027      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a53      	ldr	r2, [pc, #332]	@ (8003c40 <HAL_DMA_IRQHandler+0x1d4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a51      	ldr	r2, [pc, #324]	@ (8003c44 <HAL_DMA_IRQHandler+0x1d8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01d      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a50      	ldr	r2, [pc, #320]	@ (8003c48 <HAL_DMA_IRQHandler+0x1dc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d018      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a4e      	ldr	r2, [pc, #312]	@ (8003c4c <HAL_DMA_IRQHandler+0x1e0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003c50 <HAL_DMA_IRQHandler+0x1e4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00e      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a4b      	ldr	r2, [pc, #300]	@ (8003c54 <HAL_DMA_IRQHandler+0x1e8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c58 <HAL_DMA_IRQHandler+0x1ec>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xd2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a48      	ldr	r2, [pc, #288]	@ (8003c5c <HAL_DMA_IRQHandler+0x1f0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <HAL_DMA_IRQHandler+0xd6>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_DMA_IRQHandler+0xd8>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 842b 	beq.w	80043a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2208      	movs	r2, #8
 8003b54:	409a      	lsls	r2, r3
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80a2 	beq.w	8003ca4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a2e      	ldr	r2, [pc, #184]	@ (8003c20 <HAL_DMA_IRQHandler+0x1b4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d04a      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c24 <HAL_DMA_IRQHandler+0x1b8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d045      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2b      	ldr	r2, [pc, #172]	@ (8003c28 <HAL_DMA_IRQHandler+0x1bc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d040      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2a      	ldr	r2, [pc, #168]	@ (8003c2c <HAL_DMA_IRQHandler+0x1c0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d03b      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a28      	ldr	r2, [pc, #160]	@ (8003c30 <HAL_DMA_IRQHandler+0x1c4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d036      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a27      	ldr	r2, [pc, #156]	@ (8003c34 <HAL_DMA_IRQHandler+0x1c8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d031      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a25      	ldr	r2, [pc, #148]	@ (8003c38 <HAL_DMA_IRQHandler+0x1cc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02c      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a24      	ldr	r2, [pc, #144]	@ (8003c3c <HAL_DMA_IRQHandler+0x1d0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d027      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a22      	ldr	r2, [pc, #136]	@ (8003c40 <HAL_DMA_IRQHandler+0x1d4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a21      	ldr	r2, [pc, #132]	@ (8003c44 <HAL_DMA_IRQHandler+0x1d8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c48 <HAL_DMA_IRQHandler+0x1dc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c4c <HAL_DMA_IRQHandler+0x1e0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c50 <HAL_DMA_IRQHandler+0x1e4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <HAL_DMA_IRQHandler+0x1e8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <HAL_DMA_IRQHandler+0x1ec>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x194>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_DMA_IRQHandler+0x1f0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d12f      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x1f4>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e02e      	b.n	8003c74 <HAL_DMA_IRQHandler+0x208>
 8003c16:	bf00      	nop
 8003c18:	24000004 	.word	0x24000004
 8003c1c:	1b4e81b5 	.word	0x1b4e81b5
 8003c20:	40020010 	.word	0x40020010
 8003c24:	40020028 	.word	0x40020028
 8003c28:	40020040 	.word	0x40020040
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	40020070 	.word	0x40020070
 8003c34:	40020088 	.word	0x40020088
 8003c38:	400200a0 	.word	0x400200a0
 8003c3c:	400200b8 	.word	0x400200b8
 8003c40:	40020410 	.word	0x40020410
 8003c44:	40020428 	.word	0x40020428
 8003c48:	40020440 	.word	0x40020440
 8003c4c:	40020458 	.word	0x40020458
 8003c50:	40020470 	.word	0x40020470
 8003c54:	40020488 	.word	0x40020488
 8003c58:	400204a0 	.word	0x400204a0
 8003c5c:	400204b8 	.word	0x400204b8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d015      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2208      	movs	r2, #8
 8003c92:	409a      	lsls	r2, r3
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9c:	f043 0201 	orr.w	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d06e      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a69      	ldr	r2, [pc, #420]	@ (8003e64 <HAL_DMA_IRQHandler+0x3f8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d04a      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a67      	ldr	r2, [pc, #412]	@ (8003e68 <HAL_DMA_IRQHandler+0x3fc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d045      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a66      	ldr	r2, [pc, #408]	@ (8003e6c <HAL_DMA_IRQHandler+0x400>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d040      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a64      	ldr	r2, [pc, #400]	@ (8003e70 <HAL_DMA_IRQHandler+0x404>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d03b      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a63      	ldr	r2, [pc, #396]	@ (8003e74 <HAL_DMA_IRQHandler+0x408>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d036      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a61      	ldr	r2, [pc, #388]	@ (8003e78 <HAL_DMA_IRQHandler+0x40c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d031      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a60      	ldr	r2, [pc, #384]	@ (8003e7c <HAL_DMA_IRQHandler+0x410>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d02c      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a5e      	ldr	r2, [pc, #376]	@ (8003e80 <HAL_DMA_IRQHandler+0x414>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d027      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003e84 <HAL_DMA_IRQHandler+0x418>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a5b      	ldr	r2, [pc, #364]	@ (8003e88 <HAL_DMA_IRQHandler+0x41c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a5a      	ldr	r2, [pc, #360]	@ (8003e8c <HAL_DMA_IRQHandler+0x420>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d018      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a58      	ldr	r2, [pc, #352]	@ (8003e90 <HAL_DMA_IRQHandler+0x424>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a57      	ldr	r2, [pc, #348]	@ (8003e94 <HAL_DMA_IRQHandler+0x428>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a55      	ldr	r2, [pc, #340]	@ (8003e98 <HAL_DMA_IRQHandler+0x42c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a54      	ldr	r2, [pc, #336]	@ (8003e9c <HAL_DMA_IRQHandler+0x430>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x2ee>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a52      	ldr	r2, [pc, #328]	@ (8003ea0 <HAL_DMA_IRQHandler+0x434>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10a      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x304>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e003      	b.n	8003d78 <HAL_DMA_IRQHandler+0x30c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2201      	movs	r2, #1
 8003d86:	409a      	lsls	r2, r3
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d90:	f043 0202 	orr.w	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	2204      	movs	r2, #4
 8003da2:	409a      	lsls	r2, r3
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 808f 	beq.w	8003ecc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2c      	ldr	r2, [pc, #176]	@ (8003e64 <HAL_DMA_IRQHandler+0x3f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d04a      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8003e68 <HAL_DMA_IRQHandler+0x3fc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d045      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a29      	ldr	r2, [pc, #164]	@ (8003e6c <HAL_DMA_IRQHandler+0x400>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d040      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a27      	ldr	r2, [pc, #156]	@ (8003e70 <HAL_DMA_IRQHandler+0x404>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d03b      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a26      	ldr	r2, [pc, #152]	@ (8003e74 <HAL_DMA_IRQHandler+0x408>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d036      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a24      	ldr	r2, [pc, #144]	@ (8003e78 <HAL_DMA_IRQHandler+0x40c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d031      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a23      	ldr	r2, [pc, #140]	@ (8003e7c <HAL_DMA_IRQHandler+0x410>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d02c      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a21      	ldr	r2, [pc, #132]	@ (8003e80 <HAL_DMA_IRQHandler+0x414>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d027      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a20      	ldr	r2, [pc, #128]	@ (8003e84 <HAL_DMA_IRQHandler+0x418>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e88 <HAL_DMA_IRQHandler+0x41c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01d      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <HAL_DMA_IRQHandler+0x420>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1b      	ldr	r2, [pc, #108]	@ (8003e90 <HAL_DMA_IRQHandler+0x424>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e94 <HAL_DMA_IRQHandler+0x428>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	@ (8003e98 <HAL_DMA_IRQHandler+0x42c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a17      	ldr	r2, [pc, #92]	@ (8003e9c <HAL_DMA_IRQHandler+0x430>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x3e2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a15      	ldr	r2, [pc, #84]	@ (8003ea0 <HAL_DMA_IRQHandler+0x434>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d12a      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x438>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e023      	b.n	8003eac <HAL_DMA_IRQHandler+0x440>
 8003e64:	40020010 	.word	0x40020010
 8003e68:	40020028 	.word	0x40020028
 8003e6c:	40020040 	.word	0x40020040
 8003e70:	40020058 	.word	0x40020058
 8003e74:	40020070 	.word	0x40020070
 8003e78:	40020088 	.word	0x40020088
 8003e7c:	400200a0 	.word	0x400200a0
 8003e80:	400200b8 	.word	0x400200b8
 8003e84:	40020410 	.word	0x40020410
 8003e88:	40020428 	.word	0x40020428
 8003e8c:	40020440 	.word	0x40020440
 8003e90:	40020458 	.word	0x40020458
 8003e94:	40020470 	.word	0x40020470
 8003e98:	40020488 	.word	0x40020488
 8003e9c:	400204a0 	.word	0x400204a0
 8003ea0:	400204b8 	.word	0x400204b8
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2204      	movs	r2, #4
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec4:	f043 0204 	orr.w	r2, r3, #4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80a6 	beq.w	800402e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a85      	ldr	r2, [pc, #532]	@ (80040fc <HAL_DMA_IRQHandler+0x690>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d04a      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a83      	ldr	r2, [pc, #524]	@ (8004100 <HAL_DMA_IRQHandler+0x694>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d045      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a82      	ldr	r2, [pc, #520]	@ (8004104 <HAL_DMA_IRQHandler+0x698>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d040      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a80      	ldr	r2, [pc, #512]	@ (8004108 <HAL_DMA_IRQHandler+0x69c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d03b      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7f      	ldr	r2, [pc, #508]	@ (800410c <HAL_DMA_IRQHandler+0x6a0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d036      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7d      	ldr	r2, [pc, #500]	@ (8004110 <HAL_DMA_IRQHandler+0x6a4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d031      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7c      	ldr	r2, [pc, #496]	@ (8004114 <HAL_DMA_IRQHandler+0x6a8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d02c      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a7a      	ldr	r2, [pc, #488]	@ (8004118 <HAL_DMA_IRQHandler+0x6ac>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d027      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a79      	ldr	r2, [pc, #484]	@ (800411c <HAL_DMA_IRQHandler+0x6b0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d022      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a77      	ldr	r2, [pc, #476]	@ (8004120 <HAL_DMA_IRQHandler+0x6b4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d01d      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a76      	ldr	r2, [pc, #472]	@ (8004124 <HAL_DMA_IRQHandler+0x6b8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d018      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a74      	ldr	r2, [pc, #464]	@ (8004128 <HAL_DMA_IRQHandler+0x6bc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a73      	ldr	r2, [pc, #460]	@ (800412c <HAL_DMA_IRQHandler+0x6c0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a71      	ldr	r2, [pc, #452]	@ (8004130 <HAL_DMA_IRQHandler+0x6c4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a70      	ldr	r2, [pc, #448]	@ (8004134 <HAL_DMA_IRQHandler+0x6c8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x516>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004138 <HAL_DMA_IRQHandler+0x6cc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10a      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x52c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e009      	b.n	8003fac <HAL_DMA_IRQHandler+0x540>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bf14      	ite	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	2300      	moveq	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d03e      	beq.n	800402e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2210      	movs	r2, #16
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d018      	beq.n	8004000 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d024      	beq.n	800402e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
 8003fec:	e01f      	b.n	800402e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01b      	beq.n	800402e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
 8003ffe:	e016      	b.n	800402e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0208 	bic.w	r2, r2, #8
 800401c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2220      	movs	r2, #32
 8004038:	409a      	lsls	r2, r3
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8110 	beq.w	8004264 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2c      	ldr	r2, [pc, #176]	@ (80040fc <HAL_DMA_IRQHandler+0x690>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d04a      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2b      	ldr	r2, [pc, #172]	@ (8004100 <HAL_DMA_IRQHandler+0x694>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d045      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a29      	ldr	r2, [pc, #164]	@ (8004104 <HAL_DMA_IRQHandler+0x698>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d040      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a28      	ldr	r2, [pc, #160]	@ (8004108 <HAL_DMA_IRQHandler+0x69c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d03b      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a26      	ldr	r2, [pc, #152]	@ (800410c <HAL_DMA_IRQHandler+0x6a0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d036      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a25      	ldr	r2, [pc, #148]	@ (8004110 <HAL_DMA_IRQHandler+0x6a4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d031      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a23      	ldr	r2, [pc, #140]	@ (8004114 <HAL_DMA_IRQHandler+0x6a8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d02c      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a22      	ldr	r2, [pc, #136]	@ (8004118 <HAL_DMA_IRQHandler+0x6ac>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d027      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a20      	ldr	r2, [pc, #128]	@ (800411c <HAL_DMA_IRQHandler+0x6b0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d022      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <HAL_DMA_IRQHandler+0x6b4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d01d      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <HAL_DMA_IRQHandler+0x6b8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d018      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004128 <HAL_DMA_IRQHandler+0x6bc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d013      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1a      	ldr	r2, [pc, #104]	@ (800412c <HAL_DMA_IRQHandler+0x6c0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <HAL_DMA_IRQHandler+0x6c4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d009      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <HAL_DMA_IRQHandler+0x6c8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x678>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a16      	ldr	r2, [pc, #88]	@ (8004138 <HAL_DMA_IRQHandler+0x6cc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d12b      	bne.n	800413c <HAL_DMA_IRQHandler+0x6d0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	e02a      	b.n	8004150 <HAL_DMA_IRQHandler+0x6e4>
 80040fa:	bf00      	nop
 80040fc:	40020010 	.word	0x40020010
 8004100:	40020028 	.word	0x40020028
 8004104:	40020040 	.word	0x40020040
 8004108:	40020058 	.word	0x40020058
 800410c:	40020070 	.word	0x40020070
 8004110:	40020088 	.word	0x40020088
 8004114:	400200a0 	.word	0x400200a0
 8004118:	400200b8 	.word	0x400200b8
 800411c:	40020410 	.word	0x40020410
 8004120:	40020428 	.word	0x40020428
 8004124:	40020440 	.word	0x40020440
 8004128:	40020458 	.word	0x40020458
 800412c:	40020470 	.word	0x40020470
 8004130:	40020488 	.word	0x40020488
 8004134:	400204a0 	.word	0x400204a0
 8004138:	400204b8 	.word	0x400204b8
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf14      	ite	ne
 800414a:	2301      	movne	r3, #1
 800414c:	2300      	moveq	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8087 	beq.w	8004264 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2220      	movs	r2, #32
 8004160:	409a      	lsls	r2, r3
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b04      	cmp	r3, #4
 8004170:	d139      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0216 	bic.w	r2, r2, #22
 8004180:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004190:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <HAL_DMA_IRQHandler+0x736>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0208 	bic.w	r2, r2, #8
 80041b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	223f      	movs	r2, #63	@ 0x3f
 80041bc:	409a      	lsls	r2, r3
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 834a 	beq.w	8004870 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
          }
          return;
 80041e4:	e344      	b.n	8004870 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d018      	beq.n	8004226 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	2b00      	cmp	r3, #0
 8004208:	d02c      	beq.n	8004264 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
 8004212:	e027      	b.n	8004264 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d023      	beq.n	8004264 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
 8004224:	e01e      	b.n	8004264 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10f      	bne.n	8004254 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0210 	bic.w	r2, r2, #16
 8004242:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8306 	beq.w	800487a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8088 	beq.w	800438c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2204      	movs	r2, #4
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7a      	ldr	r2, [pc, #488]	@ (8004474 <HAL_DMA_IRQHandler+0xa08>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d04a      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a79      	ldr	r2, [pc, #484]	@ (8004478 <HAL_DMA_IRQHandler+0xa0c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d045      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a77      	ldr	r2, [pc, #476]	@ (800447c <HAL_DMA_IRQHandler+0xa10>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d040      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a76      	ldr	r2, [pc, #472]	@ (8004480 <HAL_DMA_IRQHandler+0xa14>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d03b      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a74      	ldr	r2, [pc, #464]	@ (8004484 <HAL_DMA_IRQHandler+0xa18>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d036      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a73      	ldr	r2, [pc, #460]	@ (8004488 <HAL_DMA_IRQHandler+0xa1c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d031      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a71      	ldr	r2, [pc, #452]	@ (800448c <HAL_DMA_IRQHandler+0xa20>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02c      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a70      	ldr	r2, [pc, #448]	@ (8004490 <HAL_DMA_IRQHandler+0xa24>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d027      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004494 <HAL_DMA_IRQHandler+0xa28>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d022      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004498 <HAL_DMA_IRQHandler+0xa2c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d01d      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6b      	ldr	r2, [pc, #428]	@ (800449c <HAL_DMA_IRQHandler+0xa30>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6a      	ldr	r2, [pc, #424]	@ (80044a0 <HAL_DMA_IRQHandler+0xa34>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a68      	ldr	r2, [pc, #416]	@ (80044a4 <HAL_DMA_IRQHandler+0xa38>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a67      	ldr	r2, [pc, #412]	@ (80044a8 <HAL_DMA_IRQHandler+0xa3c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a65      	ldr	r2, [pc, #404]	@ (80044ac <HAL_DMA_IRQHandler+0xa40>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_DMA_IRQHandler+0x8b8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a64      	ldr	r2, [pc, #400]	@ (80044b0 <HAL_DMA_IRQHandler+0xa44>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d108      	bne.n	8004336 <HAL_DMA_IRQHandler+0x8ca>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e007      	b.n	8004346 <HAL_DMA_IRQHandler+0x8da>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3301      	adds	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434e:	429a      	cmp	r2, r3
 8004350:	d307      	bcc.n	8004362 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f2      	bne.n	8004346 <HAL_DMA_IRQHandler+0x8da>
 8004360:	e000      	b.n	8004364 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004362:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2203      	movs	r2, #3
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800437a:	e003      	b.n	8004384 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8272 	beq.w	800487a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
 800439e:	e26c      	b.n	800487a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a43      	ldr	r2, [pc, #268]	@ (80044b4 <HAL_DMA_IRQHandler+0xa48>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d022      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x984>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a42      	ldr	r2, [pc, #264]	@ (80044b8 <HAL_DMA_IRQHandler+0xa4c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d01d      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x984>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a40      	ldr	r2, [pc, #256]	@ (80044bc <HAL_DMA_IRQHandler+0xa50>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d018      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x984>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3f      	ldr	r2, [pc, #252]	@ (80044c0 <HAL_DMA_IRQHandler+0xa54>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x984>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a3d      	ldr	r2, [pc, #244]	@ (80044c4 <HAL_DMA_IRQHandler+0xa58>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00e      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x984>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a3c      	ldr	r2, [pc, #240]	@ (80044c8 <HAL_DMA_IRQHandler+0xa5c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x984>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3a      	ldr	r2, [pc, #232]	@ (80044cc <HAL_DMA_IRQHandler+0xa60>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x984>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a39      	ldr	r2, [pc, #228]	@ (80044d0 <HAL_DMA_IRQHandler+0xa64>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x988>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_DMA_IRQHandler+0x98a>
 80043f4:	2300      	movs	r3, #0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 823f 	beq.w	800487a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	2204      	movs	r2, #4
 800440e:	409a      	lsls	r2, r3
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80cd 	beq.w	80045b4 <HAL_DMA_IRQHandler+0xb48>
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80c7 	beq.w	80045b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2204      	movs	r2, #4
 8004430:	409a      	lsls	r2, r3
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d049      	beq.n	80044d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8210 	beq.w	8004874 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800445c:	e20a      	b.n	8004874 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 8206 	beq.w	8004874 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004470:	e200      	b.n	8004874 <HAL_DMA_IRQHandler+0xe08>
 8004472:	bf00      	nop
 8004474:	40020010 	.word	0x40020010
 8004478:	40020028 	.word	0x40020028
 800447c:	40020040 	.word	0x40020040
 8004480:	40020058 	.word	0x40020058
 8004484:	40020070 	.word	0x40020070
 8004488:	40020088 	.word	0x40020088
 800448c:	400200a0 	.word	0x400200a0
 8004490:	400200b8 	.word	0x400200b8
 8004494:	40020410 	.word	0x40020410
 8004498:	40020428 	.word	0x40020428
 800449c:	40020440 	.word	0x40020440
 80044a0:	40020458 	.word	0x40020458
 80044a4:	40020470 	.word	0x40020470
 80044a8:	40020488 	.word	0x40020488
 80044ac:	400204a0 	.word	0x400204a0
 80044b0:	400204b8 	.word	0x400204b8
 80044b4:	58025408 	.word	0x58025408
 80044b8:	5802541c 	.word	0x5802541c
 80044bc:	58025430 	.word	0x58025430
 80044c0:	58025444 	.word	0x58025444
 80044c4:	58025458 	.word	0x58025458
 80044c8:	5802546c 	.word	0x5802546c
 80044cc:	58025480 	.word	0x58025480
 80044d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d160      	bne.n	80045a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7f      	ldr	r2, [pc, #508]	@ (80046e0 <HAL_DMA_IRQHandler+0xc74>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d04a      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a7d      	ldr	r2, [pc, #500]	@ (80046e4 <HAL_DMA_IRQHandler+0xc78>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d045      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a7c      	ldr	r2, [pc, #496]	@ (80046e8 <HAL_DMA_IRQHandler+0xc7c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d040      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7a      	ldr	r2, [pc, #488]	@ (80046ec <HAL_DMA_IRQHandler+0xc80>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d03b      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a79      	ldr	r2, [pc, #484]	@ (80046f0 <HAL_DMA_IRQHandler+0xc84>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d036      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a77      	ldr	r2, [pc, #476]	@ (80046f4 <HAL_DMA_IRQHandler+0xc88>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d031      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a76      	ldr	r2, [pc, #472]	@ (80046f8 <HAL_DMA_IRQHandler+0xc8c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d02c      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a74      	ldr	r2, [pc, #464]	@ (80046fc <HAL_DMA_IRQHandler+0xc90>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d027      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a73      	ldr	r2, [pc, #460]	@ (8004700 <HAL_DMA_IRQHandler+0xc94>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a71      	ldr	r2, [pc, #452]	@ (8004704 <HAL_DMA_IRQHandler+0xc98>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01d      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a70      	ldr	r2, [pc, #448]	@ (8004708 <HAL_DMA_IRQHandler+0xc9c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a6e      	ldr	r2, [pc, #440]	@ (800470c <HAL_DMA_IRQHandler+0xca0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6d      	ldr	r2, [pc, #436]	@ (8004710 <HAL_DMA_IRQHandler+0xca4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6b      	ldr	r2, [pc, #428]	@ (8004714 <HAL_DMA_IRQHandler+0xca8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6a      	ldr	r2, [pc, #424]	@ (8004718 <HAL_DMA_IRQHandler+0xcac>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_DMA_IRQHandler+0xb12>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a68      	ldr	r2, [pc, #416]	@ (800471c <HAL_DMA_IRQHandler+0xcb0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d108      	bne.n	8004590 <HAL_DMA_IRQHandler+0xb24>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0208 	bic.w	r2, r2, #8
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e007      	b.n	80045a0 <HAL_DMA_IRQHandler+0xb34>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8165 	beq.w	8004874 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b2:	e15f      	b.n	8004874 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	2202      	movs	r2, #2
 80045be:	409a      	lsls	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80c5 	beq.w	8004754 <HAL_DMA_IRQHandler+0xce8>
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80bf 	beq.w	8004754 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2202      	movs	r2, #2
 80045e0:	409a      	lsls	r2, r3
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 813a 	beq.w	8004878 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800460c:	e134      	b.n	8004878 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8130 	beq.w	8004878 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004620:	e12a      	b.n	8004878 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8089 	bne.w	8004740 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2b      	ldr	r2, [pc, #172]	@ (80046e0 <HAL_DMA_IRQHandler+0xc74>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d04a      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a29      	ldr	r2, [pc, #164]	@ (80046e4 <HAL_DMA_IRQHandler+0xc78>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d045      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a28      	ldr	r2, [pc, #160]	@ (80046e8 <HAL_DMA_IRQHandler+0xc7c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d040      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a26      	ldr	r2, [pc, #152]	@ (80046ec <HAL_DMA_IRQHandler+0xc80>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d03b      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a25      	ldr	r2, [pc, #148]	@ (80046f0 <HAL_DMA_IRQHandler+0xc84>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d036      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a23      	ldr	r2, [pc, #140]	@ (80046f4 <HAL_DMA_IRQHandler+0xc88>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d031      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a22      	ldr	r2, [pc, #136]	@ (80046f8 <HAL_DMA_IRQHandler+0xc8c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d02c      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a20      	ldr	r2, [pc, #128]	@ (80046fc <HAL_DMA_IRQHandler+0xc90>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d027      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1f      	ldr	r2, [pc, #124]	@ (8004700 <HAL_DMA_IRQHandler+0xc94>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1d      	ldr	r2, [pc, #116]	@ (8004704 <HAL_DMA_IRQHandler+0xc98>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1c      	ldr	r2, [pc, #112]	@ (8004708 <HAL_DMA_IRQHandler+0xc9c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1a      	ldr	r2, [pc, #104]	@ (800470c <HAL_DMA_IRQHandler+0xca0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <HAL_DMA_IRQHandler+0xca4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a17      	ldr	r2, [pc, #92]	@ (8004714 <HAL_DMA_IRQHandler+0xca8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a16      	ldr	r2, [pc, #88]	@ (8004718 <HAL_DMA_IRQHandler+0xcac>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_DMA_IRQHandler+0xc62>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a14      	ldr	r2, [pc, #80]	@ (800471c <HAL_DMA_IRQHandler+0xcb0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d128      	bne.n	8004720 <HAL_DMA_IRQHandler+0xcb4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0214 	bic.w	r2, r2, #20
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e027      	b.n	8004730 <HAL_DMA_IRQHandler+0xcc4>
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 020a 	bic.w	r2, r2, #10
 800472e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8097 	beq.w	8004878 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004752:	e091      	b.n	8004878 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2208      	movs	r2, #8
 800475e:	409a      	lsls	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8088 	beq.w	800487a <HAL_DMA_IRQHandler+0xe0e>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8082 	beq.w	800487a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a41      	ldr	r2, [pc, #260]	@ (8004880 <HAL_DMA_IRQHandler+0xe14>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d04a      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a3f      	ldr	r2, [pc, #252]	@ (8004884 <HAL_DMA_IRQHandler+0xe18>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d045      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a3e      	ldr	r2, [pc, #248]	@ (8004888 <HAL_DMA_IRQHandler+0xe1c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d040      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a3c      	ldr	r2, [pc, #240]	@ (800488c <HAL_DMA_IRQHandler+0xe20>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d03b      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004890 <HAL_DMA_IRQHandler+0xe24>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d036      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a39      	ldr	r2, [pc, #228]	@ (8004894 <HAL_DMA_IRQHandler+0xe28>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d031      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a38      	ldr	r2, [pc, #224]	@ (8004898 <HAL_DMA_IRQHandler+0xe2c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d02c      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a36      	ldr	r2, [pc, #216]	@ (800489c <HAL_DMA_IRQHandler+0xe30>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d027      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a35      	ldr	r2, [pc, #212]	@ (80048a0 <HAL_DMA_IRQHandler+0xe34>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d022      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a33      	ldr	r2, [pc, #204]	@ (80048a4 <HAL_DMA_IRQHandler+0xe38>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01d      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a32      	ldr	r2, [pc, #200]	@ (80048a8 <HAL_DMA_IRQHandler+0xe3c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d018      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a30      	ldr	r2, [pc, #192]	@ (80048ac <HAL_DMA_IRQHandler+0xe40>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2f      	ldr	r2, [pc, #188]	@ (80048b0 <HAL_DMA_IRQHandler+0xe44>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2d      	ldr	r2, [pc, #180]	@ (80048b4 <HAL_DMA_IRQHandler+0xe48>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2c      	ldr	r2, [pc, #176]	@ (80048b8 <HAL_DMA_IRQHandler+0xe4c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_DMA_IRQHandler+0xdaa>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2a      	ldr	r2, [pc, #168]	@ (80048bc <HAL_DMA_IRQHandler+0xe50>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d108      	bne.n	8004828 <HAL_DMA_IRQHandler+0xdbc>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 021c 	bic.w	r2, r2, #28
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e007      	b.n	8004838 <HAL_DMA_IRQHandler+0xdcc>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 020e 	bic.w	r2, r2, #14
 8004836:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2201      	movs	r2, #1
 8004842:	409a      	lsls	r2, r3
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
 800486e:	e004      	b.n	800487a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004870:	bf00      	nop
 8004872:	e002      	b.n	800487a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004878:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800487a:	3728      	adds	r7, #40	@ 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40020010 	.word	0x40020010
 8004884:	40020028 	.word	0x40020028
 8004888:	40020040 	.word	0x40020040
 800488c:	40020058 	.word	0x40020058
 8004890:	40020070 	.word	0x40020070
 8004894:	40020088 	.word	0x40020088
 8004898:	400200a0 	.word	0x400200a0
 800489c:	400200b8 	.word	0x400200b8
 80048a0:	40020410 	.word	0x40020410
 80048a4:	40020428 	.word	0x40020428
 80048a8:	40020440 	.word	0x40020440
 80048ac:	40020458 	.word	0x40020458
 80048b0:	40020470 	.word	0x40020470
 80048b4:	40020488 	.word	0x40020488
 80048b8:	400204a0 	.word	0x400204a0
 80048bc:	400204b8 	.word	0x400204b8

080048c0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7f      	ldr	r2, [pc, #508]	@ (8004af4 <DMA_SetConfig+0x21c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d072      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a7d      	ldr	r2, [pc, #500]	@ (8004af8 <DMA_SetConfig+0x220>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d06d      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7c      	ldr	r2, [pc, #496]	@ (8004afc <DMA_SetConfig+0x224>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d068      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a7a      	ldr	r2, [pc, #488]	@ (8004b00 <DMA_SetConfig+0x228>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d063      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a79      	ldr	r2, [pc, #484]	@ (8004b04 <DMA_SetConfig+0x22c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d05e      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a77      	ldr	r2, [pc, #476]	@ (8004b08 <DMA_SetConfig+0x230>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d059      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a76      	ldr	r2, [pc, #472]	@ (8004b0c <DMA_SetConfig+0x234>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d054      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a74      	ldr	r2, [pc, #464]	@ (8004b10 <DMA_SetConfig+0x238>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d04f      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a73      	ldr	r2, [pc, #460]	@ (8004b14 <DMA_SetConfig+0x23c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d04a      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a71      	ldr	r2, [pc, #452]	@ (8004b18 <DMA_SetConfig+0x240>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d045      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a70      	ldr	r2, [pc, #448]	@ (8004b1c <DMA_SetConfig+0x244>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d040      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6e      	ldr	r2, [pc, #440]	@ (8004b20 <DMA_SetConfig+0x248>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d03b      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6d      	ldr	r2, [pc, #436]	@ (8004b24 <DMA_SetConfig+0x24c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d036      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a6b      	ldr	r2, [pc, #428]	@ (8004b28 <DMA_SetConfig+0x250>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d031      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a6a      	ldr	r2, [pc, #424]	@ (8004b2c <DMA_SetConfig+0x254>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d02c      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a68      	ldr	r2, [pc, #416]	@ (8004b30 <DMA_SetConfig+0x258>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d027      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a67      	ldr	r2, [pc, #412]	@ (8004b34 <DMA_SetConfig+0x25c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a65      	ldr	r2, [pc, #404]	@ (8004b38 <DMA_SetConfig+0x260>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01d      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a64      	ldr	r2, [pc, #400]	@ (8004b3c <DMA_SetConfig+0x264>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a62      	ldr	r2, [pc, #392]	@ (8004b40 <DMA_SetConfig+0x268>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a61      	ldr	r2, [pc, #388]	@ (8004b44 <DMA_SetConfig+0x26c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a5f      	ldr	r2, [pc, #380]	@ (8004b48 <DMA_SetConfig+0x270>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b4c <DMA_SetConfig+0x274>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <DMA_SetConfig+0x10a>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a5c      	ldr	r2, [pc, #368]	@ (8004b50 <DMA_SetConfig+0x278>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <DMA_SetConfig+0x10e>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <DMA_SetConfig+0x110>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80049f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a06:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a39      	ldr	r2, [pc, #228]	@ (8004af4 <DMA_SetConfig+0x21c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04a      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a38      	ldr	r2, [pc, #224]	@ (8004af8 <DMA_SetConfig+0x220>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d045      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a36      	ldr	r2, [pc, #216]	@ (8004afc <DMA_SetConfig+0x224>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d040      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a35      	ldr	r2, [pc, #212]	@ (8004b00 <DMA_SetConfig+0x228>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d03b      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a33      	ldr	r2, [pc, #204]	@ (8004b04 <DMA_SetConfig+0x22c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d036      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a32      	ldr	r2, [pc, #200]	@ (8004b08 <DMA_SetConfig+0x230>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d031      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a30      	ldr	r2, [pc, #192]	@ (8004b0c <DMA_SetConfig+0x234>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d02c      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a2f      	ldr	r2, [pc, #188]	@ (8004b10 <DMA_SetConfig+0x238>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d027      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b14 <DMA_SetConfig+0x23c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d022      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2c      	ldr	r2, [pc, #176]	@ (8004b18 <DMA_SetConfig+0x240>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d01d      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2a      	ldr	r2, [pc, #168]	@ (8004b1c <DMA_SetConfig+0x244>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d018      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a29      	ldr	r2, [pc, #164]	@ (8004b20 <DMA_SetConfig+0x248>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a27      	ldr	r2, [pc, #156]	@ (8004b24 <DMA_SetConfig+0x24c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00e      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a26      	ldr	r2, [pc, #152]	@ (8004b28 <DMA_SetConfig+0x250>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a24      	ldr	r2, [pc, #144]	@ (8004b2c <DMA_SetConfig+0x254>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <DMA_SetConfig+0x1d0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a23      	ldr	r2, [pc, #140]	@ (8004b30 <DMA_SetConfig+0x258>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d101      	bne.n	8004aac <DMA_SetConfig+0x1d4>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <DMA_SetConfig+0x1d6>
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d059      	beq.n	8004b66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	223f      	movs	r2, #63	@ 0x3f
 8004abc:	409a      	lsls	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b40      	cmp	r3, #64	@ 0x40
 8004ae0:	d138      	bne.n	8004b54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004af2:	e086      	b.n	8004c02 <DMA_SetConfig+0x32a>
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
 8004b34:	58025408 	.word	0x58025408
 8004b38:	5802541c 	.word	0x5802541c
 8004b3c:	58025430 	.word	0x58025430
 8004b40:	58025444 	.word	0x58025444
 8004b44:	58025458 	.word	0x58025458
 8004b48:	5802546c 	.word	0x5802546c
 8004b4c:	58025480 	.word	0x58025480
 8004b50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
}
 8004b64:	e04d      	b.n	8004c02 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a29      	ldr	r2, [pc, #164]	@ (8004c10 <DMA_SetConfig+0x338>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d022      	beq.n	8004bb6 <DMA_SetConfig+0x2de>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a27      	ldr	r2, [pc, #156]	@ (8004c14 <DMA_SetConfig+0x33c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01d      	beq.n	8004bb6 <DMA_SetConfig+0x2de>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a26      	ldr	r2, [pc, #152]	@ (8004c18 <DMA_SetConfig+0x340>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d018      	beq.n	8004bb6 <DMA_SetConfig+0x2de>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a24      	ldr	r2, [pc, #144]	@ (8004c1c <DMA_SetConfig+0x344>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <DMA_SetConfig+0x2de>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a23      	ldr	r2, [pc, #140]	@ (8004c20 <DMA_SetConfig+0x348>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <DMA_SetConfig+0x2de>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a21      	ldr	r2, [pc, #132]	@ (8004c24 <DMA_SetConfig+0x34c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <DMA_SetConfig+0x2de>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a20      	ldr	r2, [pc, #128]	@ (8004c28 <DMA_SetConfig+0x350>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <DMA_SetConfig+0x2de>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c2c <DMA_SetConfig+0x354>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <DMA_SetConfig+0x2e2>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <DMA_SetConfig+0x2e4>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2201      	movs	r2, #1
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d108      	bne.n	8004bf2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	60da      	str	r2, [r3, #12]
}
 8004bf0:	e007      	b.n	8004c02 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	60da      	str	r2, [r3, #12]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	58025408 	.word	0x58025408
 8004c14:	5802541c 	.word	0x5802541c
 8004c18:	58025430 	.word	0x58025430
 8004c1c:	58025444 	.word	0x58025444
 8004c20:	58025458 	.word	0x58025458
 8004c24:	5802546c 	.word	0x5802546c
 8004c28:	58025480 	.word	0x58025480
 8004c2c:	58025494 	.word	0x58025494

08004c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a42      	ldr	r2, [pc, #264]	@ (8004d48 <DMA_CalcBaseAndBitshift+0x118>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d04a      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a41      	ldr	r2, [pc, #260]	@ (8004d4c <DMA_CalcBaseAndBitshift+0x11c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d045      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3f      	ldr	r2, [pc, #252]	@ (8004d50 <DMA_CalcBaseAndBitshift+0x120>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d040      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d54 <DMA_CalcBaseAndBitshift+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d03b      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a3c      	ldr	r2, [pc, #240]	@ (8004d58 <DMA_CalcBaseAndBitshift+0x128>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d036      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d5c <DMA_CalcBaseAndBitshift+0x12c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d031      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a39      	ldr	r2, [pc, #228]	@ (8004d60 <DMA_CalcBaseAndBitshift+0x130>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d02c      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a38      	ldr	r2, [pc, #224]	@ (8004d64 <DMA_CalcBaseAndBitshift+0x134>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d027      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a36      	ldr	r2, [pc, #216]	@ (8004d68 <DMA_CalcBaseAndBitshift+0x138>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d022      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a35      	ldr	r2, [pc, #212]	@ (8004d6c <DMA_CalcBaseAndBitshift+0x13c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d01d      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <DMA_CalcBaseAndBitshift+0x140>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d018      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a32      	ldr	r2, [pc, #200]	@ (8004d74 <DMA_CalcBaseAndBitshift+0x144>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d013      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a30      	ldr	r2, [pc, #192]	@ (8004d78 <DMA_CalcBaseAndBitshift+0x148>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00e      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x14c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d009      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d80 <DMA_CalcBaseAndBitshift+0x150>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d84 <DMA_CalcBaseAndBitshift+0x154>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d101      	bne.n	8004cdc <DMA_CalcBaseAndBitshift+0xac>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <DMA_CalcBaseAndBitshift+0xae>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d024      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	3b10      	subs	r3, #16
 8004cea:	4a27      	ldr	r2, [pc, #156]	@ (8004d88 <DMA_CalcBaseAndBitshift+0x158>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	4a24      	ldr	r2, [pc, #144]	@ (8004d8c <DMA_CalcBaseAndBitshift+0x15c>)
 8004cfc:	5cd3      	ldrb	r3, [r2, r3]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d908      	bls.n	8004d1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b1f      	ldr	r3, [pc, #124]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x160>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	1d1a      	adds	r2, r3, #4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d1a:	e00d      	b.n	8004d38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b1b      	ldr	r3, [pc, #108]	@ (8004d90 <DMA_CalcBaseAndBitshift+0x160>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d2a:	e005      	b.n	8004d38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40020010 	.word	0x40020010
 8004d4c:	40020028 	.word	0x40020028
 8004d50:	40020040 	.word	0x40020040
 8004d54:	40020058 	.word	0x40020058
 8004d58:	40020070 	.word	0x40020070
 8004d5c:	40020088 	.word	0x40020088
 8004d60:	400200a0 	.word	0x400200a0
 8004d64:	400200b8 	.word	0x400200b8
 8004d68:	40020410 	.word	0x40020410
 8004d6c:	40020428 	.word	0x40020428
 8004d70:	40020440 	.word	0x40020440
 8004d74:	40020458 	.word	0x40020458
 8004d78:	40020470 	.word	0x40020470
 8004d7c:	40020488 	.word	0x40020488
 8004d80:	400204a0 	.word	0x400204a0
 8004d84:	400204b8 	.word	0x400204b8
 8004d88:	aaaaaaab 	.word	0xaaaaaaab
 8004d8c:	0801e4e4 	.word	0x0801e4e4
 8004d90:	fffffc00 	.word	0xfffffc00

08004d94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d120      	bne.n	8004dea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d858      	bhi.n	8004e62 <DMA_CheckFifoParam+0xce>
 8004db0:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <DMA_CheckFifoParam+0x24>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004dc9 	.word	0x08004dc9
 8004dbc:	08004ddb 	.word	0x08004ddb
 8004dc0:	08004dc9 	.word	0x08004dc9
 8004dc4:	08004e63 	.word	0x08004e63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d048      	beq.n	8004e66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dd8:	e045      	b.n	8004e66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004de2:	d142      	bne.n	8004e6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004de8:	e03f      	b.n	8004e6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df2:	d123      	bne.n	8004e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d838      	bhi.n	8004e6e <DMA_CheckFifoParam+0xda>
 8004dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004e04 <DMA_CheckFifoParam+0x70>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e15 	.word	0x08004e15
 8004e08:	08004e1b 	.word	0x08004e1b
 8004e0c:	08004e15 	.word	0x08004e15
 8004e10:	08004e2d 	.word	0x08004e2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
        break;
 8004e18:	e030      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d025      	beq.n	8004e72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e2a:	e022      	b.n	8004e72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e34:	d11f      	bne.n	8004e76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e3a:	e01c      	b.n	8004e76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d902      	bls.n	8004e4a <DMA_CheckFifoParam+0xb6>
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d003      	beq.n	8004e50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e48:	e018      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e4e:	e015      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8004e60:	e00b      	b.n	8004e7a <DMA_CheckFifoParam+0xe6>
        break;
 8004e62:	bf00      	nop
 8004e64:	e00a      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
        break;
 8004e66:	bf00      	nop
 8004e68:	e008      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
        break;
 8004e6a:	bf00      	nop
 8004e6c:	e006      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
        break;
 8004e6e:	bf00      	nop
 8004e70:	e004      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
        break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
        break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
    break;
 8004e7a:	bf00      	nop
    }
  }

  return status;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop

08004e8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a38      	ldr	r2, [pc, #224]	@ (8004f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d022      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a36      	ldr	r2, [pc, #216]	@ (8004f84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01d      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a35      	ldr	r2, [pc, #212]	@ (8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d018      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a33      	ldr	r2, [pc, #204]	@ (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a32      	ldr	r2, [pc, #200]	@ (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a30      	ldr	r2, [pc, #192]	@ (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d009      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2f      	ldr	r2, [pc, #188]	@ (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01a      	beq.n	8004f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	3b08      	subs	r3, #8
 8004efc:	4a28      	ldr	r2, [pc, #160]	@ (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4b26      	ldr	r3, [pc, #152]	@ (8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	461a      	mov	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f18:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	2201      	movs	r2, #1
 8004f22:	409a      	lsls	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f28:	e024      	b.n	8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3b10      	subs	r3, #16
 8004f32:	4a1e      	ldr	r2, [pc, #120]	@ (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d806      	bhi.n	8004f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d902      	bls.n	8004f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4b18      	ldr	r3, [pc, #96]	@ (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a16      	ldr	r2, [pc, #88]	@ (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	409a      	lsls	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	58025408 	.word	0x58025408
 8004f84:	5802541c 	.word	0x5802541c
 8004f88:	58025430 	.word	0x58025430
 8004f8c:	58025444 	.word	0x58025444
 8004f90:	58025458 	.word	0x58025458
 8004f94:	5802546c 	.word	0x5802546c
 8004f98:	58025480 	.word	0x58025480
 8004f9c:	58025494 	.word	0x58025494
 8004fa0:	cccccccd 	.word	0xcccccccd
 8004fa4:	16009600 	.word	0x16009600
 8004fa8:	58025880 	.word	0x58025880
 8004fac:	aaaaaaab 	.word	0xaaaaaaab
 8004fb0:	400204b8 	.word	0x400204b8
 8004fb4:	4002040f 	.word	0x4002040f
 8004fb8:	10008200 	.word	0x10008200
 8004fbc:	40020880 	.word	0x40020880

08004fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d04a      	beq.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d847      	bhi.n	800506c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a25      	ldr	r2, [pc, #148]	@ (8005078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a24      	ldr	r2, [pc, #144]	@ (800507c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d01d      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a22      	ldr	r2, [pc, #136]	@ (8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a21      	ldr	r2, [pc, #132]	@ (8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1f      	ldr	r2, [pc, #124]	@ (8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1e      	ldr	r2, [pc, #120]	@ (800508c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1c      	ldr	r2, [pc, #112]	@ (8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1b      	ldr	r2, [pc, #108]	@ (8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4b17      	ldr	r3, [pc, #92]	@ (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	461a      	mov	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005048:	671a      	str	r2, [r3, #112]	@ 0x70
 800504a:	e009      	b.n	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4b14      	ldr	r3, [pc, #80]	@ (80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a11      	ldr	r2, [pc, #68]	@ (80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800505e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3b01      	subs	r3, #1
 8005064:	2201      	movs	r2, #1
 8005066:	409a      	lsls	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	58025408 	.word	0x58025408
 800507c:	5802541c 	.word	0x5802541c
 8005080:	58025430 	.word	0x58025430
 8005084:	58025444 	.word	0x58025444
 8005088:	58025458 	.word	0x58025458
 800508c:	5802546c 	.word	0x5802546c
 8005090:	58025480 	.word	0x58025480
 8005094:	58025494 	.word	0x58025494
 8005098:	1600963f 	.word	0x1600963f
 800509c:	58025940 	.word	0x58025940
 80050a0:	1000823f 	.word	0x1000823f
 80050a4:	40020940 	.word	0x40020940

080050a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	@ 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050b6:	4b89      	ldr	r3, [pc, #548]	@ (80052dc <HAL_GPIO_Init+0x234>)
 80050b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050ba:	e194      	b.n	80053e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	2101      	movs	r1, #1
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8186 	beq.w	80053e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d005      	beq.n	80050ec <HAL_GPIO_Init+0x44>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d130      	bne.n	800514e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	2203      	movs	r2, #3
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005122:	2201      	movs	r2, #1
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f003 0201 	and.w	r2, r3, #1
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b03      	cmp	r3, #3
 8005158:	d017      	beq.n	800518a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	2203      	movs	r2, #3
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4013      	ands	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d123      	bne.n	80051de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	08da      	lsrs	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3208      	adds	r2, #8
 800519e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	220f      	movs	r2, #15
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43db      	mvns	r3, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4013      	ands	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	08da      	lsrs	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3208      	adds	r2, #8
 80051d8:	69b9      	ldr	r1, [r7, #24]
 80051da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2203      	movs	r2, #3
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f003 0203 	and.w	r2, r3, #3
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80e0 	beq.w	80053e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005220:	4b2f      	ldr	r3, [pc, #188]	@ (80052e0 <HAL_GPIO_Init+0x238>)
 8005222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005226:	4a2e      	ldr	r2, [pc, #184]	@ (80052e0 <HAL_GPIO_Init+0x238>)
 8005228:	f043 0302 	orr.w	r3, r3, #2
 800522c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005230:	4b2b      	ldr	r3, [pc, #172]	@ (80052e0 <HAL_GPIO_Init+0x238>)
 8005232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800523e:	4a29      	ldr	r2, [pc, #164]	@ (80052e4 <HAL_GPIO_Init+0x23c>)
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	089b      	lsrs	r3, r3, #2
 8005244:	3302      	adds	r3, #2
 8005246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	220f      	movs	r2, #15
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a20      	ldr	r2, [pc, #128]	@ (80052e8 <HAL_GPIO_Init+0x240>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d052      	beq.n	8005310 <HAL_GPIO_Init+0x268>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_GPIO_Init+0x244>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d031      	beq.n	80052d6 <HAL_GPIO_Init+0x22e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <HAL_GPIO_Init+0x248>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d02b      	beq.n	80052d2 <HAL_GPIO_Init+0x22a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <HAL_GPIO_Init+0x24c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d025      	beq.n	80052ce <HAL_GPIO_Init+0x226>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a1c      	ldr	r2, [pc, #112]	@ (80052f8 <HAL_GPIO_Init+0x250>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01f      	beq.n	80052ca <HAL_GPIO_Init+0x222>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1b      	ldr	r2, [pc, #108]	@ (80052fc <HAL_GPIO_Init+0x254>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d019      	beq.n	80052c6 <HAL_GPIO_Init+0x21e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1a      	ldr	r2, [pc, #104]	@ (8005300 <HAL_GPIO_Init+0x258>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_GPIO_Init+0x21a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a19      	ldr	r2, [pc, #100]	@ (8005304 <HAL_GPIO_Init+0x25c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00d      	beq.n	80052be <HAL_GPIO_Init+0x216>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a18      	ldr	r2, [pc, #96]	@ (8005308 <HAL_GPIO_Init+0x260>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <HAL_GPIO_Init+0x212>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a17      	ldr	r2, [pc, #92]	@ (800530c <HAL_GPIO_Init+0x264>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_GPIO_Init+0x20e>
 80052b2:	2309      	movs	r3, #9
 80052b4:	e02d      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052b6:	230a      	movs	r3, #10
 80052b8:	e02b      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052ba:	2308      	movs	r3, #8
 80052bc:	e029      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052be:	2307      	movs	r3, #7
 80052c0:	e027      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052c2:	2306      	movs	r3, #6
 80052c4:	e025      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052c6:	2305      	movs	r3, #5
 80052c8:	e023      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052ca:	2304      	movs	r3, #4
 80052cc:	e021      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052ce:	2303      	movs	r3, #3
 80052d0:	e01f      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e01d      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e01b      	b.n	8005312 <HAL_GPIO_Init+0x26a>
 80052da:	bf00      	nop
 80052dc:	58000080 	.word	0x58000080
 80052e0:	58024400 	.word	0x58024400
 80052e4:	58000400 	.word	0x58000400
 80052e8:	58020000 	.word	0x58020000
 80052ec:	58020400 	.word	0x58020400
 80052f0:	58020800 	.word	0x58020800
 80052f4:	58020c00 	.word	0x58020c00
 80052f8:	58021000 	.word	0x58021000
 80052fc:	58021400 	.word	0x58021400
 8005300:	58021800 	.word	0x58021800
 8005304:	58021c00 	.word	0x58021c00
 8005308:	58022000 	.word	0x58022000
 800530c:	58022400 	.word	0x58022400
 8005310:	2300      	movs	r3, #0
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	f002 0203 	and.w	r2, r2, #3
 8005318:	0092      	lsls	r2, r2, #2
 800531a:	4093      	lsls	r3, r2
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4313      	orrs	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005322:	4938      	ldr	r1, [pc, #224]	@ (8005404 <HAL_GPIO_Init+0x35c>)
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	089b      	lsrs	r3, r3, #2
 8005328:	3302      	adds	r3, #2
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005356:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	43db      	mvns	r3, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4013      	ands	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005384:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	43db      	mvns	r3, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f47f ae63 	bne.w	80050bc <HAL_GPIO_Init+0x14>
  }
}
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	3724      	adds	r7, #36	@ 0x24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	58000400 	.word	0x58000400

08005408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
 8005414:	4613      	mov	r3, r2
 8005416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005418:	787b      	ldrb	r3, [r7, #1]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800541e:	887a      	ldrh	r2, [r7, #2]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005424:	e003      	b.n	800542e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005426:	887b      	ldrh	r3, [r7, #2]
 8005428:	041a      	lsls	r2, r3, #16
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	619a      	str	r2, [r3, #24]
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	4603      	mov	r3, r0
 8005442:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005448:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005454:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f804 	bl	800546e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	4603      	mov	r3, r0
 8005476:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800548c:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <HAL_PWREx_ConfigSupply+0x70>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b04      	cmp	r3, #4
 8005496:	d00a      	beq.n	80054ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005498:	4b16      	ldr	r3, [pc, #88]	@ (80054f4 <HAL_PWREx_ConfigSupply+0x70>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d001      	beq.n	80054aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e01f      	b.n	80054ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e01d      	b.n	80054ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80054ae:	4b11      	ldr	r3, [pc, #68]	@ (80054f4 <HAL_PWREx_ConfigSupply+0x70>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f023 0207 	bic.w	r2, r3, #7
 80054b6:	490f      	ldr	r1, [pc, #60]	@ (80054f4 <HAL_PWREx_ConfigSupply+0x70>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80054be:	f7fc feb3 	bl	8002228 <HAL_GetTick>
 80054c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054c4:	e009      	b.n	80054da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054c6:	f7fc feaf 	bl	8002228 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054d4:	d901      	bls.n	80054da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e007      	b.n	80054ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054da:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <HAL_PWREx_ConfigSupply+0x70>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e6:	d1ee      	bne.n	80054c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	58024800 	.word	0x58024800

080054f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	@ 0x30
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f000 bc48 	b.w	8005d9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8088 	beq.w	800562a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800551a:	4b99      	ldr	r3, [pc, #612]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005524:	4b96      	ldr	r3, [pc, #600]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005528:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800552a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552c:	2b10      	cmp	r3, #16
 800552e:	d007      	beq.n	8005540 <HAL_RCC_OscConfig+0x48>
 8005530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005532:	2b18      	cmp	r3, #24
 8005534:	d111      	bne.n	800555a <HAL_RCC_OscConfig+0x62>
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d10c      	bne.n	800555a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005540:	4b8f      	ldr	r3, [pc, #572]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d06d      	beq.n	8005628 <HAL_RCC_OscConfig+0x130>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d169      	bne.n	8005628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	f000 bc21 	b.w	8005d9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x7a>
 8005564:	4b86      	ldr	r3, [pc, #536]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a85      	ldr	r2, [pc, #532]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800556a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e02e      	b.n	80055d0 <HAL_RCC_OscConfig+0xd8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x9c>
 800557a:	4b81      	ldr	r3, [pc, #516]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a80      	ldr	r2, [pc, #512]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b7e      	ldr	r3, [pc, #504]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a7d      	ldr	r2, [pc, #500]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800558c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e01d      	b.n	80055d0 <HAL_RCC_OscConfig+0xd8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800559c:	d10c      	bne.n	80055b8 <HAL_RCC_OscConfig+0xc0>
 800559e:	4b78      	ldr	r3, [pc, #480]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a77      	ldr	r2, [pc, #476]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b75      	ldr	r3, [pc, #468]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a74      	ldr	r2, [pc, #464]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e00b      	b.n	80055d0 <HAL_RCC_OscConfig+0xd8>
 80055b8:	4b71      	ldr	r3, [pc, #452]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a70      	ldr	r2, [pc, #448]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	4b6e      	ldr	r3, [pc, #440]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a6d      	ldr	r2, [pc, #436]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d013      	beq.n	8005600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fc fe26 	bl	8002228 <HAL_GetTick>
 80055dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e0:	f7fc fe22 	bl	8002228 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	@ 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e3d4      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055f2:	4b63      	ldr	r3, [pc, #396]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0xe8>
 80055fe:	e014      	b.n	800562a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fc fe12 	bl	8002228 <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005608:	f7fc fe0e 	bl	8002228 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	@ 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e3c0      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800561a:	4b59      	ldr	r3, [pc, #356]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0x110>
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80ca 	beq.w	80057cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005638:	4b51      	ldr	r3, [pc, #324]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005640:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005642:	4b4f      	ldr	r3, [pc, #316]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <HAL_RCC_OscConfig+0x166>
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	2b18      	cmp	r3, #24
 8005652:	d156      	bne.n	8005702 <HAL_RCC_OscConfig+0x20a>
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d151      	bne.n	8005702 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800565e:	4b48      	ldr	r3, [pc, #288]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_RCC_OscConfig+0x17e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e392      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005676:	4b42      	ldr	r3, [pc, #264]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 0219 	bic.w	r2, r3, #25
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	493f      	ldr	r1, [pc, #252]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005684:	4313      	orrs	r3, r2
 8005686:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fc fdce 	bl	8002228 <HAL_GetTick>
 800568c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005690:	f7fc fdca 	bl	8002228 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e37c      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056a2:	4b37      	ldr	r3, [pc, #220]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ae:	f7fc fdc7 	bl	8002240 <HAL_GetREVID>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d817      	bhi.n	80056ec <HAL_RCC_OscConfig+0x1f4>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b40      	cmp	r3, #64	@ 0x40
 80056c2:	d108      	bne.n	80056d6 <HAL_RCC_OscConfig+0x1de>
 80056c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80056cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80056ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d4:	e07a      	b.n	80057cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	031b      	lsls	r3, r3, #12
 80056e4:	4926      	ldr	r1, [pc, #152]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ea:	e06f      	b.n	80057cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ec:	4b24      	ldr	r3, [pc, #144]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	061b      	lsls	r3, r3, #24
 80056fa:	4921      	ldr	r1, [pc, #132]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005700:	e064      	b.n	80057cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d047      	beq.n	800579a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800570a:	4b1d      	ldr	r3, [pc, #116]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f023 0219 	bic.w	r2, r3, #25
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	491a      	ldr	r1, [pc, #104]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005718:	4313      	orrs	r3, r2
 800571a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fc fd84 	bl	8002228 <HAL_GetTick>
 8005720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005724:	f7fc fd80 	bl	8002228 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e332      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005736:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	f7fc fd7d 	bl	8002240 <HAL_GetREVID>
 8005746:	4603      	mov	r3, r0
 8005748:	f241 0203 	movw	r2, #4099	@ 0x1003
 800574c:	4293      	cmp	r3, r2
 800574e:	d819      	bhi.n	8005784 <HAL_RCC_OscConfig+0x28c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b40      	cmp	r3, #64	@ 0x40
 8005756:	d108      	bne.n	800576a <HAL_RCC_OscConfig+0x272>
 8005758:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005760:	4a07      	ldr	r2, [pc, #28]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 8005762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005766:	6053      	str	r3, [r2, #4]
 8005768:	e030      	b.n	80057cc <HAL_RCC_OscConfig+0x2d4>
 800576a:	4b05      	ldr	r3, [pc, #20]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	031b      	lsls	r3, r3, #12
 8005778:	4901      	ldr	r1, [pc, #4]	@ (8005780 <HAL_RCC_OscConfig+0x288>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]
 800577e:	e025      	b.n	80057cc <HAL_RCC_OscConfig+0x2d4>
 8005780:	58024400 	.word	0x58024400
 8005784:	4b9a      	ldr	r3, [pc, #616]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	4997      	ldr	r1, [pc, #604]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
 8005798:	e018      	b.n	80057cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800579a:	4b95      	ldr	r3, [pc, #596]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a94      	ldr	r2, [pc, #592]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fc fd3f 	bl	8002228 <HAL_GetTick>
 80057aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ae:	f7fc fd3b 	bl	8002228 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e2ed      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057c0:	4b8b      	ldr	r3, [pc, #556]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a9 	beq.w	800592c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057da:	4b85      	ldr	r3, [pc, #532]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057e4:	4b82      	ldr	r3, [pc, #520]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80057e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d007      	beq.n	8005800 <HAL_RCC_OscConfig+0x308>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b18      	cmp	r3, #24
 80057f4:	d13a      	bne.n	800586c <HAL_RCC_OscConfig+0x374>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d135      	bne.n	800586c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005800:	4b7b      	ldr	r3, [pc, #492]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <HAL_RCC_OscConfig+0x320>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	2b80      	cmp	r3, #128	@ 0x80
 8005812:	d001      	beq.n	8005818 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e2c1      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005818:	f7fc fd12 	bl	8002240 <HAL_GetREVID>
 800581c:	4603      	mov	r3, r0
 800581e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005822:	4293      	cmp	r3, r2
 8005824:	d817      	bhi.n	8005856 <HAL_RCC_OscConfig+0x35e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	2b20      	cmp	r3, #32
 800582c:	d108      	bne.n	8005840 <HAL_RCC_OscConfig+0x348>
 800582e:	4b70      	ldr	r3, [pc, #448]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005836:	4a6e      	ldr	r2, [pc, #440]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005838:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800583c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800583e:	e075      	b.n	800592c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005840:	4b6b      	ldr	r3, [pc, #428]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	069b      	lsls	r3, r3, #26
 800584e:	4968      	ldr	r1, [pc, #416]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005854:	e06a      	b.n	800592c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005856:	4b66      	ldr	r3, [pc, #408]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	061b      	lsls	r3, r3, #24
 8005864:	4962      	ldr	r1, [pc, #392]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005866:	4313      	orrs	r3, r2
 8005868:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800586a:	e05f      	b.n	800592c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d042      	beq.n	80058fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005874:	4b5e      	ldr	r3, [pc, #376]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a5d      	ldr	r2, [pc, #372]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 800587a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fc fcd2 	bl	8002228 <HAL_GetTick>
 8005884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005888:	f7fc fcce 	bl	8002228 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e280      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800589a:	4b55      	ldr	r3, [pc, #340]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058a6:	f7fc fccb 	bl	8002240 <HAL_GetREVID>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d817      	bhi.n	80058e4 <HAL_RCC_OscConfig+0x3ec>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d108      	bne.n	80058ce <HAL_RCC_OscConfig+0x3d6>
 80058bc:	4b4c      	ldr	r3, [pc, #304]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80058c4:	4a4a      	ldr	r2, [pc, #296]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80058c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058ca:	6053      	str	r3, [r2, #4]
 80058cc:	e02e      	b.n	800592c <HAL_RCC_OscConfig+0x434>
 80058ce:	4b48      	ldr	r3, [pc, #288]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	069b      	lsls	r3, r3, #26
 80058dc:	4944      	ldr	r1, [pc, #272]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]
 80058e2:	e023      	b.n	800592c <HAL_RCC_OscConfig+0x434>
 80058e4:	4b42      	ldr	r3, [pc, #264]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	061b      	lsls	r3, r3, #24
 80058f2:	493f      	ldr	r1, [pc, #252]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60cb      	str	r3, [r1, #12]
 80058f8:	e018      	b.n	800592c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058fa:	4b3d      	ldr	r3, [pc, #244]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a3c      	ldr	r2, [pc, #240]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005900:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005906:	f7fc fc8f 	bl	8002228 <HAL_GetTick>
 800590a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800590e:	f7fc fc8b 	bl	8002228 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e23d      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005920:	4b33      	ldr	r3, [pc, #204]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f0      	bne.n	800590e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d036      	beq.n	80059a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d019      	beq.n	8005974 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005940:	4b2b      	ldr	r3, [pc, #172]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005944:	4a2a      	ldr	r2, [pc, #168]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594c:	f7fc fc6c 	bl	8002228 <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005954:	f7fc fc68 	bl	8002228 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e21a      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005966:	4b22      	ldr	r3, [pc, #136]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0x45c>
 8005972:	e018      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005974:	4b1e      	ldr	r3, [pc, #120]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 8005976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005978:	4a1d      	ldr	r2, [pc, #116]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fc fc52 	bl	8002228 <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005988:	f7fc fc4e 	bl	8002228 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e200      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800599a:	4b15      	ldr	r3, [pc, #84]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 800599c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d039      	beq.n	8005a26 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01c      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a0c      	ldr	r2, [pc, #48]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80059c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059c6:	f7fc fc2f 	bl	8002228 <HAL_GetTick>
 80059ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ce:	f7fc fc2b 	bl	8002228 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e1dd      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059e0:	4b03      	ldr	r3, [pc, #12]	@ (80059f0 <HAL_RCC_OscConfig+0x4f8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0f0      	beq.n	80059ce <HAL_RCC_OscConfig+0x4d6>
 80059ec:	e01b      	b.n	8005a26 <HAL_RCC_OscConfig+0x52e>
 80059ee:	bf00      	nop
 80059f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059f4:	4b9b      	ldr	r3, [pc, #620]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a9a      	ldr	r2, [pc, #616]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 80059fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a00:	f7fc fc12 	bl	8002228 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a08:	f7fc fc0e 	bl	8002228 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e1c0      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a1a:	4b92      	ldr	r3, [pc, #584]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8081 	beq.w	8005b36 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a34:	4b8c      	ldr	r3, [pc, #560]	@ (8005c68 <HAL_RCC_OscConfig+0x770>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a8b      	ldr	r2, [pc, #556]	@ (8005c68 <HAL_RCC_OscConfig+0x770>)
 8005a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a40:	f7fc fbf2 	bl	8002228 <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a48:	f7fc fbee 	bl	8002228 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	@ 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e1a0      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a5a:	4b83      	ldr	r3, [pc, #524]	@ (8005c68 <HAL_RCC_OscConfig+0x770>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d106      	bne.n	8005a7c <HAL_RCC_OscConfig+0x584>
 8005a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a72:	4a7c      	ldr	r2, [pc, #496]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a7a:	e02d      	b.n	8005ad8 <HAL_RCC_OscConfig+0x5e0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCC_OscConfig+0x5a6>
 8005a84:	4b77      	ldr	r3, [pc, #476]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a88:	4a76      	ldr	r2, [pc, #472]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005a8a:	f023 0301 	bic.w	r3, r3, #1
 8005a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a90:	4b74      	ldr	r3, [pc, #464]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a94:	4a73      	ldr	r2, [pc, #460]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005a96:	f023 0304 	bic.w	r3, r3, #4
 8005a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a9c:	e01c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x5e0>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x5c8>
 8005aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x5e0>
 8005ac0:	4b68      	ldr	r3, [pc, #416]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac4:	4a67      	ldr	r2, [pc, #412]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005acc:	4b65      	ldr	r3, [pc, #404]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad0:	4a64      	ldr	r2, [pc, #400]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005ad2:	f023 0304 	bic.w	r3, r3, #4
 8005ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d015      	beq.n	8005b0c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fc fba2 	bl	8002228 <HAL_GetTick>
 8005ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ae6:	e00a      	b.n	8005afe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae8:	f7fc fb9e 	bl	8002228 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e14e      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005afe:	4b59      	ldr	r3, [pc, #356]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0ee      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x5f0>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fc fb8c 	bl	8002228 <HAL_GetTick>
 8005b10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b14:	f7fc fb88 	bl	8002228 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e138      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1ee      	bne.n	8005b14 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 812d 	beq.w	8005d9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b40:	4b48      	ldr	r3, [pc, #288]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b48:	2b18      	cmp	r3, #24
 8005b4a:	f000 80bd 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	f040 809e 	bne.w	8005c94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b58:	4b42      	ldr	r3, [pc, #264]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a41      	ldr	r2, [pc, #260]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc fb60 	bl	8002228 <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fc fb5c 	bl	8002228 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e10e      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b7e:	4b39      	ldr	r3, [pc, #228]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b8a:	4b36      	ldr	r3, [pc, #216]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005b8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b8e:	4b37      	ldr	r3, [pc, #220]	@ (8005c6c <HAL_RCC_OscConfig+0x774>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b9a:	0112      	lsls	r2, r2, #4
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	4931      	ldr	r1, [pc, #196]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	025b      	lsls	r3, r3, #9
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	061b      	lsls	r3, r3, #24
 8005bd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005bd4:	4923      	ldr	r1, [pc, #140]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005bda:	4b22      	ldr	r3, [pc, #136]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bde:	4a21      	ldr	r2, [pc, #132]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005be6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bea:	4b21      	ldr	r3, [pc, #132]	@ (8005c70 <HAL_RCC_OscConfig+0x778>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005bf2:	00d2      	lsls	r2, r2, #3
 8005bf4:	491b      	ldr	r1, [pc, #108]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	f023 020c 	bic.w	r2, r3, #12
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	4917      	ldr	r1, [pc, #92]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c0c:	4b15      	ldr	r3, [pc, #84]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	f023 0202 	bic.w	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c18:	4912      	ldr	r1, [pc, #72]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c1e:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c22:	4a10      	ldr	r2, [pc, #64]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c36:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c42:	4b08      	ldr	r3, [pc, #32]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	4a07      	ldr	r2, [pc, #28]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c4e:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a04      	ldr	r2, [pc, #16]	@ (8005c64 <HAL_RCC_OscConfig+0x76c>)
 8005c54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fc fae5 	bl	8002228 <HAL_GetTick>
 8005c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c60:	e011      	b.n	8005c86 <HAL_RCC_OscConfig+0x78e>
 8005c62:	bf00      	nop
 8005c64:	58024400 	.word	0x58024400
 8005c68:	58024800 	.word	0x58024800
 8005c6c:	fffffc0c 	.word	0xfffffc0c
 8005c70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c74:	f7fc fad8 	bl	8002228 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e08a      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c86:	4b47      	ldr	r3, [pc, #284]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x77c>
 8005c92:	e082      	b.n	8005d9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c94:	4b43      	ldr	r3, [pc, #268]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a42      	ldr	r2, [pc, #264]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005c9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca0:	f7fc fac2 	bl	8002228 <HAL_GetTick>
 8005ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fc fabe 	bl	8002228 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e070      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cba:	4b3a      	ldr	r3, [pc, #232]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x7b0>
 8005cc6:	e068      	b.n	8005d9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005cc8:	4b36      	ldr	r3, [pc, #216]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ccc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005cce:	4b35      	ldr	r3, [pc, #212]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d031      	beq.n	8005d40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f003 0203 	and.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d12a      	bne.n	8005d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d122      	bne.n	8005d40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d11a      	bne.n	8005d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	0a5b      	lsrs	r3, r3, #9
 8005d0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d111      	bne.n	8005d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	0c1b      	lsrs	r3, r3, #16
 8005d20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d108      	bne.n	8005d40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	0e1b      	lsrs	r3, r3, #24
 8005d32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e02b      	b.n	8005d9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d44:	4b17      	ldr	r3, [pc, #92]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d48:	08db      	lsrs	r3, r3, #3
 8005d4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d01f      	beq.n	8005d9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d5a:	4b12      	ldr	r3, [pc, #72]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4a11      	ldr	r2, [pc, #68]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d66:	f7fc fa5f 	bl	8002228 <HAL_GetTick>
 8005d6a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005d6c:	bf00      	nop
 8005d6e:	f7fc fa5b 	bl	8002228 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d0f9      	beq.n	8005d6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <HAL_RCC_OscConfig+0x8b0>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d86:	00d2      	lsls	r2, r2, #3
 8005d88:	4906      	ldr	r1, [pc, #24]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005d8e:	4b05      	ldr	r3, [pc, #20]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	4a04      	ldr	r2, [pc, #16]	@ (8005da4 <HAL_RCC_OscConfig+0x8ac>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3730      	adds	r7, #48	@ 0x30
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	58024400 	.word	0x58024400
 8005da8:	ffff0007 	.word	0xffff0007

08005dac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e19c      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b8a      	ldr	r3, [pc, #552]	@ (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d910      	bls.n	8005df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b87      	ldr	r3, [pc, #540]	@ (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 020f 	bic.w	r2, r3, #15
 8005dd6:	4985      	ldr	r1, [pc, #532]	@ (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b83      	ldr	r3, [pc, #524]	@ (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e184      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	4b7b      	ldr	r3, [pc, #492]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d908      	bls.n	8005e1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e0c:	4b78      	ldr	r3, [pc, #480]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	4975      	ldr	r1, [pc, #468]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	4b70      	ldr	r3, [pc, #448]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d908      	bls.n	8005e4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	496a      	ldr	r1, [pc, #424]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	4b64      	ldr	r3, [pc, #400]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d908      	bls.n	8005e7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e68:	4b61      	ldr	r3, [pc, #388]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	495e      	ldr	r1, [pc, #376]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d010      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	4b59      	ldr	r3, [pc, #356]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d908      	bls.n	8005ea8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e96:	4b56      	ldr	r3, [pc, #344]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	4953      	ldr	r1, [pc, #332]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d908      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	f023 020f 	bic.w	r2, r3, #15
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4947      	ldr	r1, [pc, #284]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d055      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ee2:	4b43      	ldr	r3, [pc, #268]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	4940      	ldr	r1, [pc, #256]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005efc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d121      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0f6      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f14:	4b36      	ldr	r3, [pc, #216]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d115      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0ea      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d107      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f2c:	4b30      	ldr	r3, [pc, #192]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0de      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0d6      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f4c:	4b28      	ldr	r3, [pc, #160]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f023 0207 	bic.w	r2, r3, #7
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4925      	ldr	r1, [pc, #148]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f5e:	f7fc f963 	bl	8002228 <HAL_GetTick>
 8005f62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f64:	e00a      	b.n	8005f7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f66:	f7fc f95f 	bl	8002228 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e0be      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d1eb      	bne.n	8005f66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d208      	bcs.n	8005fbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005faa:	4b11      	ldr	r3, [pc, #68]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f023 020f 	bic.w	r2, r3, #15
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	490e      	ldr	r1, [pc, #56]	@ (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d214      	bcs.n	8005ff4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fca:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f023 020f 	bic.w	r2, r3, #15
 8005fd2:	4906      	ldr	r1, [pc, #24]	@ (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b04      	ldr	r3, [pc, #16]	@ (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e086      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
 8005fec:	52002000 	.word	0x52002000
 8005ff0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d010      	beq.n	8006022 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	4b3f      	ldr	r3, [pc, #252]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800600c:	429a      	cmp	r2, r3
 800600e:	d208      	bcs.n	8006022 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006010:	4b3c      	ldr	r3, [pc, #240]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	4939      	ldr	r1, [pc, #228]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 800601e:	4313      	orrs	r3, r2
 8006020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d010      	beq.n	8006050 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	4b34      	ldr	r3, [pc, #208]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800603a:	429a      	cmp	r2, r3
 800603c:	d208      	bcs.n	8006050 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800603e:	4b31      	ldr	r3, [pc, #196]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	492e      	ldr	r1, [pc, #184]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 800604c:	4313      	orrs	r3, r2
 800604e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d010      	beq.n	800607e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	4b28      	ldr	r3, [pc, #160]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006068:	429a      	cmp	r2, r3
 800606a:	d208      	bcs.n	800607e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800606c:	4b25      	ldr	r3, [pc, #148]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	4922      	ldr	r1, [pc, #136]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 800607a:	4313      	orrs	r3, r2
 800607c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	4b1d      	ldr	r3, [pc, #116]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006096:	429a      	cmp	r2, r3
 8006098:	d208      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800609a:	4b1a      	ldr	r3, [pc, #104]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	4917      	ldr	r1, [pc, #92]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060ac:	f000 f834 	bl	8006118 <HAL_RCC_GetSysClockFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b14      	ldr	r3, [pc, #80]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	4912      	ldr	r1, [pc, #72]	@ (8006108 <HAL_RCC_ClockConfig+0x35c>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
 80060c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006104 <HAL_RCC_ClockConfig+0x358>)
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006108 <HAL_RCC_ClockConfig+0x35c>)
 80060d4:	5cd3      	ldrb	r3, [r2, r3]
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
 80060e0:	4a0a      	ldr	r2, [pc, #40]	@ (800610c <HAL_RCC_ClockConfig+0x360>)
 80060e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006110 <HAL_RCC_ClockConfig+0x364>)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80060ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006114 <HAL_RCC_ClockConfig+0x368>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fb fcec 	bl	8001acc <HAL_InitTick>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	58024400 	.word	0x58024400
 8006108:	0801e4d4 	.word	0x0801e4d4
 800610c:	24000008 	.word	0x24000008
 8006110:	24000004 	.word	0x24000004
 8006114:	2400000c 	.word	0x2400000c

08006118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	@ 0x24
 800611c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800611e:	4bb3      	ldr	r3, [pc, #716]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006126:	2b18      	cmp	r3, #24
 8006128:	f200 8155 	bhi.w	80063d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800612c:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <HAL_RCC_GetSysClockFreq+0x1c>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006199 	.word	0x08006199
 8006138:	080063d7 	.word	0x080063d7
 800613c:	080063d7 	.word	0x080063d7
 8006140:	080063d7 	.word	0x080063d7
 8006144:	080063d7 	.word	0x080063d7
 8006148:	080063d7 	.word	0x080063d7
 800614c:	080063d7 	.word	0x080063d7
 8006150:	080063d7 	.word	0x080063d7
 8006154:	080061bf 	.word	0x080061bf
 8006158:	080063d7 	.word	0x080063d7
 800615c:	080063d7 	.word	0x080063d7
 8006160:	080063d7 	.word	0x080063d7
 8006164:	080063d7 	.word	0x080063d7
 8006168:	080063d7 	.word	0x080063d7
 800616c:	080063d7 	.word	0x080063d7
 8006170:	080063d7 	.word	0x080063d7
 8006174:	080061c5 	.word	0x080061c5
 8006178:	080063d7 	.word	0x080063d7
 800617c:	080063d7 	.word	0x080063d7
 8006180:	080063d7 	.word	0x080063d7
 8006184:	080063d7 	.word	0x080063d7
 8006188:	080063d7 	.word	0x080063d7
 800618c:	080063d7 	.word	0x080063d7
 8006190:	080063d7 	.word	0x080063d7
 8006194:	080061cb 	.word	0x080061cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006198:	4b94      	ldr	r3, [pc, #592]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061a4:	4b91      	ldr	r3, [pc, #580]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	08db      	lsrs	r3, r3, #3
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	4a90      	ldr	r2, [pc, #576]	@ (80063f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80061b6:	e111      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80061b8:	4b8d      	ldr	r3, [pc, #564]	@ (80063f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061ba:	61bb      	str	r3, [r7, #24]
      break;
 80061bc:	e10e      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80061be:	4b8d      	ldr	r3, [pc, #564]	@ (80063f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061c0:	61bb      	str	r3, [r7, #24]
      break;
 80061c2:	e10b      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80061c4:	4b8c      	ldr	r3, [pc, #560]	@ (80063f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80061c6:	61bb      	str	r3, [r7, #24]
      break;
 80061c8:	e108      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061ca:	4b88      	ldr	r3, [pc, #544]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80061d4:	4b85      	ldr	r3, [pc, #532]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80061e0:	4b82      	ldr	r3, [pc, #520]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80061ea:	4b80      	ldr	r3, [pc, #512]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	08db      	lsrs	r3, r3, #3
 80061f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80e1 	beq.w	80063d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b02      	cmp	r3, #2
 8006212:	f000 8083 	beq.w	800631c <HAL_RCC_GetSysClockFreq+0x204>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b02      	cmp	r3, #2
 800621a:	f200 80a1 	bhi.w	8006360 <HAL_RCC_GetSysClockFreq+0x248>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_RCC_GetSysClockFreq+0x114>
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d056      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800622a:	e099      	b.n	8006360 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800622c:	4b6f      	ldr	r3, [pc, #444]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d02d      	beq.n	8006294 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006238:	4b6c      	ldr	r3, [pc, #432]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	08db      	lsrs	r3, r3, #3
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	4a6b      	ldr	r2, [pc, #428]	@ (80063f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
 8006248:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006262:	4b62      	ldr	r3, [pc, #392]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006272:	ed97 6a02 	vldr	s12, [r7, #8]
 8006276:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800627a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800627e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006292:	e087      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006400 <HAL_RCC_GetSysClockFreq+0x2e8>
 80062a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a6:	4b51      	ldr	r3, [pc, #324]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80062be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062d6:	e065      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006404 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ea:	4b40      	ldr	r3, [pc, #256]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80062fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800630e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006316:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800631a:	e043      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006408 <HAL_RCC_GetSysClockFreq+0x2f0>
 800632a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632e:	4b2f      	ldr	r3, [pc, #188]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006342:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800635e:	e021      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006404 <HAL_RCC_GetSysClockFreq+0x2ec>
 800636e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006372:	4b1e      	ldr	r3, [pc, #120]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006382:	ed97 6a02 	vldr	s12, [r7, #8]
 8006386:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800638a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80063a4:	4b11      	ldr	r3, [pc, #68]	@ (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	0a5b      	lsrs	r3, r3, #9
 80063aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ae:	3301      	adds	r3, #1
 80063b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c8:	ee17 3a90 	vmov	r3, s15
 80063cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80063ce:	e005      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61bb      	str	r3, [r7, #24]
      break;
 80063d4:	e002      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80063d6:	4b07      	ldr	r3, [pc, #28]	@ (80063f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063d8:	61bb      	str	r3, [r7, #24]
      break;
 80063da:	bf00      	nop
  }

  return sysclockfreq;
 80063dc:	69bb      	ldr	r3, [r7, #24]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3724      	adds	r7, #36	@ 0x24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	58024400 	.word	0x58024400
 80063f0:	03d09000 	.word	0x03d09000
 80063f4:	003d0900 	.word	0x003d0900
 80063f8:	007a1200 	.word	0x007a1200
 80063fc:	46000000 	.word	0x46000000
 8006400:	4c742400 	.word	0x4c742400
 8006404:	4a742400 	.word	0x4a742400
 8006408:	4af42400 	.word	0x4af42400

0800640c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006412:	f7ff fe81 	bl	8006118 <HAL_RCC_GetSysClockFreq>
 8006416:	4602      	mov	r2, r0
 8006418:	4b10      	ldr	r3, [pc, #64]	@ (800645c <HAL_RCC_GetHCLKFreq+0x50>)
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	490f      	ldr	r1, [pc, #60]	@ (8006460 <HAL_RCC_GetHCLKFreq+0x54>)
 8006424:	5ccb      	ldrb	r3, [r1, r3]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	fa22 f303 	lsr.w	r3, r2, r3
 800642e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006430:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <HAL_RCC_GetHCLKFreq+0x50>)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	4a09      	ldr	r2, [pc, #36]	@ (8006460 <HAL_RCC_GetHCLKFreq+0x54>)
 800643a:	5cd3      	ldrb	r3, [r2, r3]
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	4a07      	ldr	r2, [pc, #28]	@ (8006464 <HAL_RCC_GetHCLKFreq+0x58>)
 8006448:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800644a:	4a07      	ldr	r2, [pc, #28]	@ (8006468 <HAL_RCC_GetHCLKFreq+0x5c>)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006450:	4b04      	ldr	r3, [pc, #16]	@ (8006464 <HAL_RCC_GetHCLKFreq+0x58>)
 8006452:	681b      	ldr	r3, [r3, #0]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	58024400 	.word	0x58024400
 8006460:	0801e4d4 	.word	0x0801e4d4
 8006464:	24000008 	.word	0x24000008
 8006468:	24000004 	.word	0x24000004

0800646c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006470:	f7ff ffcc 	bl	800640c <HAL_RCC_GetHCLKFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	4904      	ldr	r1, [pc, #16]	@ (8006494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800648c:	4618      	mov	r0, r3
 800648e:	bd80      	pop	{r7, pc}
 8006490:	58024400 	.word	0x58024400
 8006494:	0801e4d4 	.word	0x0801e4d4

08006498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800649c:	f7ff ffb6 	bl	800640c <HAL_RCC_GetHCLKFreq>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4b06      	ldr	r3, [pc, #24]	@ (80064bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	4904      	ldr	r1, [pc, #16]	@ (80064c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064ae:	5ccb      	ldrb	r3, [r1, r3]
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	58024400 	.word	0x58024400
 80064c0:	0801e4d4 	.word	0x0801e4d4

080064c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	223f      	movs	r2, #63	@ 0x3f
 80064d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006540 <HAL_RCC_GetClockConfig+0x7c>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f003 0207 	and.w	r2, r3, #7
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80064e0:	4b17      	ldr	r3, [pc, #92]	@ (8006540 <HAL_RCC_GetClockConfig+0x7c>)
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80064ec:	4b14      	ldr	r3, [pc, #80]	@ (8006540 <HAL_RCC_GetClockConfig+0x7c>)
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80064f8:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <HAL_RCC_GetClockConfig+0x7c>)
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006504:	4b0e      	ldr	r3, [pc, #56]	@ (8006540 <HAL_RCC_GetClockConfig+0x7c>)
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006510:	4b0b      	ldr	r3, [pc, #44]	@ (8006540 <HAL_RCC_GetClockConfig+0x7c>)
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800651c:	4b08      	ldr	r3, [pc, #32]	@ (8006540 <HAL_RCC_GetClockConfig+0x7c>)
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006528:	4b06      	ldr	r3, [pc, #24]	@ (8006544 <HAL_RCC_GetClockConfig+0x80>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	601a      	str	r2, [r3, #0]
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	58024400 	.word	0x58024400
 8006544:	52002000 	.word	0x52002000

08006548 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800654c:	b0ca      	sub	sp, #296	@ 0x128
 800654e:	af00      	add	r7, sp, #0
 8006550:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006554:	2300      	movs	r3, #0
 8006556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800655a:	2300      	movs	r3, #0
 800655c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800656c:	2500      	movs	r5, #0
 800656e:	ea54 0305 	orrs.w	r3, r4, r5
 8006572:	d049      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800657a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800657e:	d02f      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006580:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006584:	d828      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800658a:	d01a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800658c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006590:	d822      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800659a:	d007      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800659c:	e01c      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659e:	4bb8      	ldr	r3, [pc, #736]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	4ab7      	ldr	r2, [pc, #732]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065aa:	e01a      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b0:	3308      	adds	r3, #8
 80065b2:	2102      	movs	r1, #2
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 fc8f 	bl	8007ed8 <RCCEx_PLL2_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065c0:	e00f      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c6:	3328      	adds	r3, #40	@ 0x28
 80065c8:	2102      	movs	r1, #2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 fd36 	bl	800803c <RCCEx_PLL3_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065d6:	e004      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065de:	e000      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80065e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065ea:	4ba5      	ldr	r3, [pc, #660]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065f8:	4aa1      	ldr	r2, [pc, #644]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065fa:	430b      	orrs	r3, r1
 80065fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80065fe:	e003      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006614:	f04f 0900 	mov.w	r9, #0
 8006618:	ea58 0309 	orrs.w	r3, r8, r9
 800661c:	d047      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006624:	2b04      	cmp	r3, #4
 8006626:	d82a      	bhi.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006628:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006645 	.word	0x08006645
 8006634:	08006653 	.word	0x08006653
 8006638:	08006669 	.word	0x08006669
 800663c:	08006687 	.word	0x08006687
 8006640:	08006687 	.word	0x08006687
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006644:	4b8e      	ldr	r3, [pc, #568]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	4a8d      	ldr	r2, [pc, #564]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800664a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800664e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006650:	e01a      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006656:	3308      	adds	r3, #8
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f001 fc3c 	bl	8007ed8 <RCCEx_PLL2_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006666:	e00f      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666c:	3328      	adds	r3, #40	@ 0x28
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f001 fce3 	bl	800803c <RCCEx_PLL3_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800667c:	e004      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006684:	e000      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006690:	4b7b      	ldr	r3, [pc, #492]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006694:	f023 0107 	bic.w	r1, r3, #7
 8006698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669e:	4a78      	ldr	r2, [pc, #480]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80066a4:	e003      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80066ba:	f04f 0b00 	mov.w	fp, #0
 80066be:	ea5a 030b 	orrs.w	r3, sl, fp
 80066c2:	d04c      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80066c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ce:	d030      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80066d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d4:	d829      	bhi.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80066d8:	d02d      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066da:	2bc0      	cmp	r3, #192	@ 0xc0
 80066dc:	d825      	bhi.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066de:	2b80      	cmp	r3, #128	@ 0x80
 80066e0:	d018      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80066e2:	2b80      	cmp	r3, #128	@ 0x80
 80066e4:	d821      	bhi.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80066ea:	2b40      	cmp	r3, #64	@ 0x40
 80066ec:	d007      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80066ee:	e01c      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f0:	4b63      	ldr	r3, [pc, #396]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	4a62      	ldr	r2, [pc, #392]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066fc:	e01c      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006702:	3308      	adds	r3, #8
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fbe6 	bl	8007ed8 <RCCEx_PLL2_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006712:	e011      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	3328      	adds	r3, #40	@ 0x28
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fc8d 	bl	800803c <RCCEx_PLL3_Config>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006728:	e006      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006730:	e002      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006732:	bf00      	nop
 8006734:	e000      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006740:	4b4f      	ldr	r3, [pc, #316]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006744:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674e:	4a4c      	ldr	r2, [pc, #304]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006750:	430b      	orrs	r3, r1
 8006752:	6513      	str	r3, [r2, #80]	@ 0x50
 8006754:	e003      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800676a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800676e:	2300      	movs	r3, #0
 8006770:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006774:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006778:	460b      	mov	r3, r1
 800677a:	4313      	orrs	r3, r2
 800677c:	d053      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006786:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800678a:	d035      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800678c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006790:	d82e      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006792:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006796:	d031      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006798:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800679c:	d828      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800679e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067a2:	d01a      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80067a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067a8:	d822      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80067ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b2:	d007      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80067b4:	e01c      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b6:	4b32      	ldr	r3, [pc, #200]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ba:	4a31      	ldr	r2, [pc, #196]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067c2:	e01c      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c8:	3308      	adds	r3, #8
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fb83 	bl	8007ed8 <RCCEx_PLL2_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067d8:	e011      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	3328      	adds	r3, #40	@ 0x28
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 fc2a 	bl	800803c <RCCEx_PLL3_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067ee:	e006      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067f6:	e002      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067f8:	bf00      	nop
 80067fa:	e000      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006806:	4b1e      	ldr	r3, [pc, #120]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006816:	4a1a      	ldr	r2, [pc, #104]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006818:	430b      	orrs	r3, r1
 800681a:	6593      	str	r3, [r2, #88]	@ 0x58
 800681c:	e003      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006832:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800683c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006840:	460b      	mov	r3, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	d056      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800684e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006852:	d038      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006858:	d831      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800685a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800685e:	d034      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006860:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006864:	d82b      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800686a:	d01d      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800686c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006870:	d825      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800687a:	d00a      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800687c:	e01f      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800687e:	bf00      	nop
 8006880:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006884:	4ba2      	ldr	r3, [pc, #648]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006888:	4aa1      	ldr	r2, [pc, #644]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800688a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006890:	e01c      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	3308      	adds	r3, #8
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fb1c 	bl	8007ed8 <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80068a6:	e011      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ac:	3328      	adds	r3, #40	@ 0x28
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 fbc3 	bl	800803c <RCCEx_PLL3_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068bc:	e006      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068c4:	e002      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80068ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10b      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068d4:	4b8e      	ldr	r3, [pc, #568]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068e4:	4a8a      	ldr	r2, [pc, #552]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068e6:	430b      	orrs	r3, r1
 80068e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068ea:	e003      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006900:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006904:	2300      	movs	r3, #0
 8006906:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800690a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800690e:	460b      	mov	r3, r1
 8006910:	4313      	orrs	r3, r2
 8006912:	d03a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691a:	2b30      	cmp	r3, #48	@ 0x30
 800691c:	d01f      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800691e:	2b30      	cmp	r3, #48	@ 0x30
 8006920:	d819      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006922:	2b20      	cmp	r3, #32
 8006924:	d00c      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006926:	2b20      	cmp	r3, #32
 8006928:	d815      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d019      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800692e:	2b10      	cmp	r3, #16
 8006930:	d111      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006932:	4b77      	ldr	r3, [pc, #476]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	4a76      	ldr	r2, [pc, #472]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800693c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800693e:	e011      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006944:	3308      	adds	r3, #8
 8006946:	2102      	movs	r1, #2
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fac5 	bl	8007ed8 <RCCEx_PLL2_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006954:	e006      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800695c:	e002      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800696c:	4b68      	ldr	r3, [pc, #416]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800696e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006970:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800697a:	4a65      	ldr	r2, [pc, #404]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800697c:	430b      	orrs	r3, r1
 800697e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006980:	e003      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006996:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800699a:	2300      	movs	r3, #0
 800699c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4313      	orrs	r3, r2
 80069a8:	d051      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069b4:	d035      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80069b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ba:	d82e      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069c0:	d031      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80069c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069c6:	d828      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069cc:	d01a      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80069ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d2:	d822      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80069d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069dc:	d007      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80069de:	e01c      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069ec:	e01c      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	3308      	adds	r3, #8
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 fa6e 	bl	8007ed8 <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a02:	e011      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a08:	3328      	adds	r3, #40	@ 0x28
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 fb15 	bl	800803c <RCCEx_PLL3_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a18:	e006      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a20:	e002      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a22:	bf00      	nop
 8006a24:	e000      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a30:	4b37      	ldr	r3, [pc, #220]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a3e:	4a34      	ldr	r2, [pc, #208]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a40:	430b      	orrs	r3, r1
 8006a42:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a44:	e003      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	d056      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a78:	d033      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006a7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a7e:	d82c      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a84:	d02f      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a8a:	d826      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a90:	d02b      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006a92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a96:	d820      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a9c:	d012      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa2:	d81a      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d022      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aac:	d115      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fa0e 	bl	8007ed8 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ac2:	e015      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	3328      	adds	r3, #40	@ 0x28
 8006aca:	2101      	movs	r1, #1
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 fab5 	bl	800803c <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae0:	e006      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e004      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10d      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006af8:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b06:	4a02      	ldr	r2, [pc, #8]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b0c:	e006      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b0e:	bf00      	nop
 8006b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d055      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b48:	d033      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b4e:	d82c      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b54:	d02f      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b5a:	d826      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b60:	d02b      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006b62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b66:	d820      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b6c:	d012      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b72:	d81a      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d022      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b7c:	d115      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b82:	3308      	adds	r3, #8
 8006b84:	2101      	movs	r1, #1
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 f9a6 	bl	8007ed8 <RCCEx_PLL2_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b92:	e015      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	3328      	adds	r3, #40	@ 0x28
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 fa4d 	bl	800803c <RCCEx_PLL3_Config>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bb0:	e006      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006bb2:	bf00      	nop
 8006bb4:	e004      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006bb6:	bf00      	nop
 8006bb8:	e002      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10b      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bc8:	4ba3      	ldr	r3, [pc, #652]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bcc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006bd8:	4a9f      	ldr	r2, [pc, #636]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d037      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c12:	d00e      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c18:	d816      	bhi.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d018      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c22:	d111      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c24:	4b8c      	ldr	r3, [pc, #560]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	4a8b      	ldr	r2, [pc, #556]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c30:	e00f      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c36:	3308      	adds	r3, #8
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 f94c 	bl	8007ed8 <RCCEx_PLL2_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c46:	e004      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c4e:	e000      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c68:	4a7b      	ldr	r2, [pc, #492]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c6e:	e003      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006c8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4313      	orrs	r3, r2
 8006c96:	d039      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d81c      	bhi.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006ce5 	.word	0x08006ce5
 8006cac:	08006cb9 	.word	0x08006cb9
 8006cb0:	08006cc7 	.word	0x08006cc7
 8006cb4:	08006ce5 	.word	0x08006ce5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb8:	4b67      	ldr	r3, [pc, #412]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	4a66      	ldr	r2, [pc, #408]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cc4:	e00f      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cca:	3308      	adds	r3, #8
 8006ccc:	2102      	movs	r1, #2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 f902 	bl	8007ed8 <RCCEx_PLL2_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cda:	e004      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ce2:	e000      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cee:	4b5a      	ldr	r3, [pc, #360]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cf2:	f023 0103 	bic.w	r1, r3, #3
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cfc:	4a56      	ldr	r2, [pc, #344]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006d26:	460b      	mov	r3, r1
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	f000 809f 	beq.w	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a4a      	ldr	r2, [pc, #296]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d3a:	f7fb fa75 	bl	8002228 <HAL_GetTick>
 8006d3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d42:	e00b      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d44:	f7fb fa70 	bl	8002228 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b64      	cmp	r3, #100	@ 0x64
 8006d52:	d903      	bls.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d5a:	e005      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0ed      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d179      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d70:	4b39      	ldr	r3, [pc, #228]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d7c:	4053      	eors	r3, r2
 8006d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d015      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d86:	4b34      	ldr	r3, [pc, #208]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d92:	4b31      	ldr	r3, [pc, #196]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d96:	4a30      	ldr	r2, [pc, #192]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da2:	4a2d      	ldr	r2, [pc, #180]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006da8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006daa:	4a2b      	ldr	r2, [pc, #172]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006db0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dbe:	d118      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc0:	f7fb fa32 	bl	8002228 <HAL_GetTick>
 8006dc4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dc8:	e00d      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dca:	f7fb fa2d 	bl	8002228 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006dd4:	1ad2      	subs	r2, r2, r3
 8006dd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d903      	bls.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006de4:	e005      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006de6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0eb      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d129      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e0a:	d10e      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006e0c:	4b12      	ldr	r3, [pc, #72]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e1c:	091a      	lsrs	r2, r3, #4
 8006e1e:	4b10      	ldr	r3, [pc, #64]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	4a0d      	ldr	r2, [pc, #52]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6113      	str	r3, [r2, #16]
 8006e28:	e005      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e34:	6113      	str	r3, [r2, #16]
 8006e36:	4b08      	ldr	r3, [pc, #32]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e46:	4a04      	ldr	r2, [pc, #16]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e4c:	e00e      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006e56:	e009      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	58024800 	.word	0x58024800
 8006e60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f002 0301 	and.w	r3, r2, #1
 8006e78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f000 8089 	beq.w	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e94:	2b28      	cmp	r3, #40	@ 0x28
 8006e96:	d86b      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006e98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006f79 	.word	0x08006f79
 8006ea4:	08006f71 	.word	0x08006f71
 8006ea8:	08006f71 	.word	0x08006f71
 8006eac:	08006f71 	.word	0x08006f71
 8006eb0:	08006f71 	.word	0x08006f71
 8006eb4:	08006f71 	.word	0x08006f71
 8006eb8:	08006f71 	.word	0x08006f71
 8006ebc:	08006f71 	.word	0x08006f71
 8006ec0:	08006f45 	.word	0x08006f45
 8006ec4:	08006f71 	.word	0x08006f71
 8006ec8:	08006f71 	.word	0x08006f71
 8006ecc:	08006f71 	.word	0x08006f71
 8006ed0:	08006f71 	.word	0x08006f71
 8006ed4:	08006f71 	.word	0x08006f71
 8006ed8:	08006f71 	.word	0x08006f71
 8006edc:	08006f71 	.word	0x08006f71
 8006ee0:	08006f5b 	.word	0x08006f5b
 8006ee4:	08006f71 	.word	0x08006f71
 8006ee8:	08006f71 	.word	0x08006f71
 8006eec:	08006f71 	.word	0x08006f71
 8006ef0:	08006f71 	.word	0x08006f71
 8006ef4:	08006f71 	.word	0x08006f71
 8006ef8:	08006f71 	.word	0x08006f71
 8006efc:	08006f71 	.word	0x08006f71
 8006f00:	08006f79 	.word	0x08006f79
 8006f04:	08006f71 	.word	0x08006f71
 8006f08:	08006f71 	.word	0x08006f71
 8006f0c:	08006f71 	.word	0x08006f71
 8006f10:	08006f71 	.word	0x08006f71
 8006f14:	08006f71 	.word	0x08006f71
 8006f18:	08006f71 	.word	0x08006f71
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006f79 	.word	0x08006f79
 8006f24:	08006f71 	.word	0x08006f71
 8006f28:	08006f71 	.word	0x08006f71
 8006f2c:	08006f71 	.word	0x08006f71
 8006f30:	08006f71 	.word	0x08006f71
 8006f34:	08006f71 	.word	0x08006f71
 8006f38:	08006f71 	.word	0x08006f71
 8006f3c:	08006f71 	.word	0x08006f71
 8006f40:	08006f79 	.word	0x08006f79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	3308      	adds	r3, #8
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 ffc3 	bl	8007ed8 <RCCEx_PLL2_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f58:	e00f      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	3328      	adds	r3, #40	@ 0x28
 8006f60:	2101      	movs	r1, #1
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 f86a 	bl	800803c <RCCEx_PLL3_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f6e:	e004      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f76:	e000      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f82:	4bbf      	ldr	r3, [pc, #764]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f90:	4abb      	ldr	r2, [pc, #748]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f92:	430b      	orrs	r3, r1
 8006f94:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f96:	e003      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f002 0302 	and.w	r3, r2, #2
 8006fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fb6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d041      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	d824      	bhi.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006fca:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	0800701d 	.word	0x0800701d
 8006fd4:	08006fe9 	.word	0x08006fe9
 8006fd8:	08006fff 	.word	0x08006fff
 8006fdc:	0800701d 	.word	0x0800701d
 8006fe0:	0800701d 	.word	0x0800701d
 8006fe4:	0800701d 	.word	0x0800701d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fec:	3308      	adds	r3, #8
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 ff71 	bl	8007ed8 <RCCEx_PLL2_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ffc:	e00f      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007002:	3328      	adds	r3, #40	@ 0x28
 8007004:	2101      	movs	r1, #1
 8007006:	4618      	mov	r0, r3
 8007008:	f001 f818 	bl	800803c <RCCEx_PLL3_Config>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007012:	e004      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800701a:	e000      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800701c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007026:	4b96      	ldr	r3, [pc, #600]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702a:	f023 0107 	bic.w	r1, r3, #7
 800702e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007032:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007034:	4a92      	ldr	r2, [pc, #584]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007036:	430b      	orrs	r3, r1
 8007038:	6553      	str	r3, [r2, #84]	@ 0x54
 800703a:	e003      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	f002 0304 	and.w	r3, r2, #4
 8007050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007054:	2300      	movs	r3, #0
 8007056:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800705a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800705e:	460b      	mov	r3, r1
 8007060:	4313      	orrs	r3, r2
 8007062:	d044      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800706c:	2b05      	cmp	r3, #5
 800706e:	d825      	bhi.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070c5 	.word	0x080070c5
 800707c:	08007091 	.word	0x08007091
 8007080:	080070a7 	.word	0x080070a7
 8007084:	080070c5 	.word	0x080070c5
 8007088:	080070c5 	.word	0x080070c5
 800708c:	080070c5 	.word	0x080070c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	3308      	adds	r3, #8
 8007096:	2101      	movs	r1, #1
 8007098:	4618      	mov	r0, r3
 800709a:	f000 ff1d 	bl	8007ed8 <RCCEx_PLL2_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070a4:	e00f      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070aa:	3328      	adds	r3, #40	@ 0x28
 80070ac:	2101      	movs	r1, #1
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 ffc4 	bl	800803c <RCCEx_PLL3_Config>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070ba:	e004      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c2:	e000      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80070c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070ce:	4b6c      	ldr	r3, [pc, #432]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d2:	f023 0107 	bic.w	r1, r3, #7
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070de:	4a68      	ldr	r2, [pc, #416]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e4:	e003      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f002 0320 	and.w	r3, r2, #32
 80070fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070fe:	2300      	movs	r3, #0
 8007100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007108:	460b      	mov	r3, r1
 800710a:	4313      	orrs	r3, r2
 800710c:	d055      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800711a:	d033      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800711c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007120:	d82c      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007126:	d02f      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800712c:	d826      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800712e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007132:	d02b      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007134:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007138:	d820      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800713a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800713e:	d012      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007144:	d81a      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d022      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800714a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800714e:	d115      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007154:	3308      	adds	r3, #8
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f000 febd 	bl	8007ed8 <RCCEx_PLL2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007164:	e015      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716a:	3328      	adds	r3, #40	@ 0x28
 800716c:	2102      	movs	r1, #2
 800716e:	4618      	mov	r0, r3
 8007170:	f000 ff64 	bl	800803c <RCCEx_PLL3_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800717a:	e00a      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007182:	e006      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007184:	bf00      	nop
 8007186:	e004      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007188:	bf00      	nop
 800718a:	e002      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800718c:	bf00      	nop
 800718e:	e000      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10b      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800719a:	4b39      	ldr	r3, [pc, #228]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800719c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800719e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071aa:	4a35      	ldr	r2, [pc, #212]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80071b0:	e003      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80071c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071ca:	2300      	movs	r3, #0
 80071cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80071d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4313      	orrs	r3, r2
 80071d8:	d058      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071e6:	d033      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80071e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80071ec:	d82c      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071f2:	d02f      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80071f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071f8:	d826      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071fe:	d02b      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007204:	d820      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800720a:	d012      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800720c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007210:	d81a      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d022      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800721a:	d115      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	3308      	adds	r3, #8
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fe57 	bl	8007ed8 <RCCEx_PLL2_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007230:	e015      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	3328      	adds	r3, #40	@ 0x28
 8007238:	2102      	movs	r1, #2
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fefe 	bl	800803c <RCCEx_PLL3_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007246:	e00a      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800724e:	e006      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007250:	bf00      	nop
 8007252:	e004      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007254:	bf00      	nop
 8007256:	e002      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007258:	bf00      	nop
 800725a:	e000      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800725c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10e      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007266:	4b06      	ldr	r3, [pc, #24]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800726a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800726e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007276:	4a02      	ldr	r2, [pc, #8]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007278:	430b      	orrs	r3, r1
 800727a:	6593      	str	r3, [r2, #88]	@ 0x58
 800727c:	e006      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007288:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800728c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800729c:	2300      	movs	r3, #0
 800729e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80072a6:	460b      	mov	r3, r1
 80072a8:	4313      	orrs	r3, r2
 80072aa:	d055      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80072b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072b8:	d033      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80072ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80072be:	d82c      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c4:	d02f      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80072c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072ca:	d826      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072d0:	d02b      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80072d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80072d6:	d820      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072dc:	d012      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80072de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072e2:	d81a      	bhi.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d022      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80072e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ec:	d115      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f2:	3308      	adds	r3, #8
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fdee 	bl	8007ed8 <RCCEx_PLL2_Config>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007302:	e015      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007308:	3328      	adds	r3, #40	@ 0x28
 800730a:	2102      	movs	r1, #2
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fe95 	bl	800803c <RCCEx_PLL3_Config>
 8007312:	4603      	mov	r3, r0
 8007314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007318:	e00a      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007320:	e006      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007322:	bf00      	nop
 8007324:	e004      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007326:	bf00      	nop
 8007328:	e002      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800732a:	bf00      	nop
 800732c:	e000      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800732e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10b      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007338:	4ba1      	ldr	r3, [pc, #644]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800733a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007348:	4a9d      	ldr	r2, [pc, #628]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800734a:	430b      	orrs	r3, r1
 800734c:	6593      	str	r3, [r2, #88]	@ 0x58
 800734e:	e003      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f002 0308 	and.w	r3, r2, #8
 8007364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007368:	2300      	movs	r3, #0
 800736a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800736e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007372:	460b      	mov	r3, r1
 8007374:	4313      	orrs	r3, r2
 8007376:	d01e      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007384:	d10c      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738a:	3328      	adds	r3, #40	@ 0x28
 800738c:	2102      	movs	r1, #2
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fe54 	bl	800803c <RCCEx_PLL3_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073a0:	4b87      	ldr	r3, [pc, #540]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b0:	4a83      	ldr	r2, [pc, #524]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073b2:	430b      	orrs	r3, r1
 80073b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f002 0310 	and.w	r3, r2, #16
 80073c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073c6:	2300      	movs	r3, #0
 80073c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80073cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80073d0:	460b      	mov	r3, r1
 80073d2:	4313      	orrs	r3, r2
 80073d4:	d01e      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073e2:	d10c      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e8:	3328      	adds	r3, #40	@ 0x28
 80073ea:	2102      	movs	r1, #2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fe25 	bl	800803c <RCCEx_PLL3_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073fe:	4b70      	ldr	r3, [pc, #448]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800740e:	4a6c      	ldr	r2, [pc, #432]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007410:	430b      	orrs	r3, r1
 8007412:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007424:	2300      	movs	r3, #0
 8007426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800742a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800742e:	460b      	mov	r3, r1
 8007430:	4313      	orrs	r3, r2
 8007432:	d03e      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007438:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007440:	d022      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007446:	d81b      	bhi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800744c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007450:	d00b      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007452:	e015      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007458:	3308      	adds	r3, #8
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fd3b 	bl	8007ed8 <RCCEx_PLL2_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007468:	e00f      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746e:	3328      	adds	r3, #40	@ 0x28
 8007470:	2102      	movs	r1, #2
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fde2 	bl	800803c <RCCEx_PLL3_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800747e:	e004      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007486:	e000      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800748a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007492:	4b4b      	ldr	r3, [pc, #300]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007496:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074a2:	4a47      	ldr	r2, [pc, #284]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074a4:	430b      	orrs	r3, r1
 80074a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074a8:	e003      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80074be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074c0:	2300      	movs	r3, #0
 80074c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80074c8:	460b      	mov	r3, r1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	d03b      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074da:	d01f      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80074dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074e0:	d818      	bhi.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80074e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074e6:	d003      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80074e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074ec:	d007      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80074ee:	e011      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f0:	4b33      	ldr	r3, [pc, #204]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f4:	4a32      	ldr	r2, [pc, #200]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80074fc:	e00f      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007502:	3328      	adds	r3, #40	@ 0x28
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fd98 	bl	800803c <RCCEx_PLL3_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007512:	e004      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800751a:	e000      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800751c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007526:	4b26      	ldr	r3, [pc, #152]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007536:	4a22      	ldr	r2, [pc, #136]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007538:	430b      	orrs	r3, r1
 800753a:	6553      	str	r3, [r2, #84]	@ 0x54
 800753c:	e003      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007552:	673b      	str	r3, [r7, #112]	@ 0x70
 8007554:	2300      	movs	r3, #0
 8007556:	677b      	str	r3, [r7, #116]	@ 0x74
 8007558:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800755c:	460b      	mov	r3, r1
 800755e:	4313      	orrs	r3, r2
 8007560:	d034      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007570:	d007      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007572:	e011      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007574:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	4a11      	ldr	r2, [pc, #68]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800757a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800757e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007580:	e00e      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007586:	3308      	adds	r3, #8
 8007588:	2102      	movs	r1, #2
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fca4 	bl	8007ed8 <RCCEx_PLL2_Config>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007596:	e003      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800759e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b6:	4a02      	ldr	r2, [pc, #8]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075b8:	430b      	orrs	r3, r1
 80075ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075bc:	e006      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80075be:	bf00      	nop
 80075c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80075d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075da:	2300      	movs	r3, #0
 80075dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80075e2:	460b      	mov	r3, r1
 80075e4:	4313      	orrs	r3, r2
 80075e6:	d00c      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ec:	3328      	adds	r3, #40	@ 0x28
 80075ee:	2102      	movs	r1, #2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 fd23 	bl	800803c <RCCEx_PLL3_Config>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800760e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007610:	2300      	movs	r3, #0
 8007612:	667b      	str	r3, [r7, #100]	@ 0x64
 8007614:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007618:	460b      	mov	r3, r1
 800761a:	4313      	orrs	r3, r2
 800761c:	d038      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800762a:	d018      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800762c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007630:	d811      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007636:	d014      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800763c:	d80b      	bhi.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d011      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007646:	d106      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007648:	4bc3      	ldr	r3, [pc, #780]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800764a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764c:	4ac2      	ldr	r2, [pc, #776]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800764e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007654:	e008      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800765c:	e004      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800765e:	bf00      	nop
 8007660:	e002      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007670:	4bb9      	ldr	r3, [pc, #740]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007674:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007680:	4ab5      	ldr	r2, [pc, #724]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007682:	430b      	orrs	r3, r1
 8007684:	6553      	str	r3, [r2, #84]	@ 0x54
 8007686:	e003      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800769c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800769e:	2300      	movs	r3, #0
 80076a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80076a6:	460b      	mov	r3, r1
 80076a8:	4313      	orrs	r3, r2
 80076aa:	d009      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076ac:	4baa      	ldr	r3, [pc, #680]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ba:	4aa7      	ldr	r2, [pc, #668]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076bc:	430b      	orrs	r3, r1
 80076be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80076c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80076cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ce:	2300      	movs	r3, #0
 80076d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80076d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80076d6:	460b      	mov	r3, r1
 80076d8:	4313      	orrs	r3, r2
 80076da:	d00a      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80076dc:	4b9e      	ldr	r3, [pc, #632]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80076e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076ec:	4a9a      	ldr	r2, [pc, #616]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076ee:	430b      	orrs	r3, r1
 80076f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80076fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007700:	2300      	movs	r3, #0
 8007702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007704:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007708:	460b      	mov	r3, r1
 800770a:	4313      	orrs	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800770e:	4b92      	ldr	r3, [pc, #584]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007712:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800771c:	4a8e      	ldr	r2, [pc, #568]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800771e:	430b      	orrs	r3, r1
 8007720:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800772e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007730:	2300      	movs	r3, #0
 8007732:	647b      	str	r3, [r7, #68]	@ 0x44
 8007734:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007738:	460b      	mov	r3, r1
 800773a:	4313      	orrs	r3, r2
 800773c:	d00e      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800773e:	4b86      	ldr	r3, [pc, #536]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	4a85      	ldr	r2, [pc, #532]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007744:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007748:	6113      	str	r3, [r2, #16]
 800774a:	4b83      	ldr	r3, [pc, #524]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800774c:	6919      	ldr	r1, [r3, #16]
 800774e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007752:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007756:	4a80      	ldr	r2, [pc, #512]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007758:	430b      	orrs	r3, r1
 800775a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800776a:	2300      	movs	r3, #0
 800776c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800776e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007772:	460b      	mov	r3, r1
 8007774:	4313      	orrs	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007778:	4b77      	ldr	r3, [pc, #476]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800777a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800777c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007786:	4a74      	ldr	r2, [pc, #464]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007788:	430b      	orrs	r3, r1
 800778a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007798:	633b      	str	r3, [r7, #48]	@ 0x30
 800779a:	2300      	movs	r3, #0
 800779c:	637b      	str	r3, [r7, #52]	@ 0x34
 800779e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80077a2:	460b      	mov	r3, r1
 80077a4:	4313      	orrs	r3, r2
 80077a6:	d00a      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077a8:	4b6b      	ldr	r3, [pc, #428]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077b8:	4a67      	ldr	r2, [pc, #412]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077ba:	430b      	orrs	r3, r1
 80077bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	2100      	movs	r1, #0
 80077c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80077d4:	460b      	mov	r3, r1
 80077d6:	4313      	orrs	r3, r2
 80077d8:	d011      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	3308      	adds	r3, #8
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fb78 	bl	8007ed8 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80077ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	2100      	movs	r1, #0
 8007808:	6239      	str	r1, [r7, #32]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007810:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007814:	460b      	mov	r3, r1
 8007816:	4313      	orrs	r3, r2
 8007818:	d011      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781e:	3308      	adds	r3, #8
 8007820:	2101      	movs	r1, #1
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fb58 	bl	8007ed8 <RCCEx_PLL2_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800782e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	2100      	movs	r1, #0
 8007848:	61b9      	str	r1, [r7, #24]
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007854:	460b      	mov	r3, r1
 8007856:	4313      	orrs	r3, r2
 8007858:	d011      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785e:	3308      	adds	r3, #8
 8007860:	2102      	movs	r1, #2
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fb38 	bl	8007ed8 <RCCEx_PLL2_Config>
 8007868:	4603      	mov	r3, r0
 800786a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800786e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800787a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	2100      	movs	r1, #0
 8007888:	6139      	str	r1, [r7, #16]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007894:	460b      	mov	r3, r1
 8007896:	4313      	orrs	r3, r2
 8007898:	d011      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	3328      	adds	r3, #40	@ 0x28
 80078a0:	2100      	movs	r1, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fbca 	bl	800803c <RCCEx_PLL3_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80078ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	2100      	movs	r1, #0
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80078d4:	460b      	mov	r3, r1
 80078d6:	4313      	orrs	r3, r2
 80078d8:	d011      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078de:	3328      	adds	r3, #40	@ 0x28
 80078e0:	2101      	movs	r1, #1
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fbaa 	bl	800803c <RCCEx_PLL3_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80078ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	2100      	movs	r1, #0
 8007908:	6039      	str	r1, [r7, #0]
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	607b      	str	r3, [r7, #4]
 8007910:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007914:	460b      	mov	r3, r1
 8007916:	4313      	orrs	r3, r2
 8007918:	d011      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800791a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791e:	3328      	adds	r3, #40	@ 0x28
 8007920:	2102      	movs	r1, #2
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fb8a 	bl	800803c <RCCEx_PLL3_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800792e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800793e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	e000      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
}
 800794c:	4618      	mov	r0, r3
 800794e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007952:	46bd      	mov	sp, r7
 8007954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007958:	58024400 	.word	0x58024400

0800795c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007960:	f7fe fd54 	bl	800640c <HAL_RCC_GetHCLKFreq>
 8007964:	4602      	mov	r2, r0
 8007966:	4b06      	ldr	r3, [pc, #24]	@ (8007980 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	091b      	lsrs	r3, r3, #4
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	4904      	ldr	r1, [pc, #16]	@ (8007984 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007972:	5ccb      	ldrb	r3, [r1, r3]
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	58024400 	.word	0x58024400
 8007984:	0801e4d4 	.word	0x0801e4d4

08007988 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	@ 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007990:	4ba1      	ldr	r3, [pc, #644]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	f003 0303 	and.w	r3, r3, #3
 8007998:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800799a:	4b9f      	ldr	r3, [pc, #636]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800799c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799e:	0b1b      	lsrs	r3, r3, #12
 80079a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079a6:	4b9c      	ldr	r3, [pc, #624]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079aa:	091b      	lsrs	r3, r3, #4
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80079b2:	4b99      	ldr	r3, [pc, #612]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b6:	08db      	lsrs	r3, r3, #3
 80079b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	fb02 f303 	mul.w	r3, r2, r3
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8111 	beq.w	8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	f000 8083 	beq.w	8007ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	f200 80a1 	bhi.w	8007b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d056      	beq.n	8007aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80079f2:	e099      	b.n	8007b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f4:	4b88      	ldr	r3, [pc, #544]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d02d      	beq.n	8007a5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a00:	4b85      	ldr	r3, [pc, #532]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	08db      	lsrs	r3, r3, #3
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	4a84      	ldr	r2, [pc, #528]	@ (8007c1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	ee07 3a90 	vmov	s15, r3
 8007a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a5a:	e087      	b.n	8007b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007c24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a9e:	e065      	b.n	8007b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab2:	4b59      	ldr	r3, [pc, #356]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ac6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ae2:	e043      	b.n	8007b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af6:	4b48      	ldr	r3, [pc, #288]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b26:	e021      	b.n	8007b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3a:	4b37      	ldr	r3, [pc, #220]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	0a5b      	lsrs	r3, r3, #9
 8007b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b92:	ee17 2a90 	vmov	r2, s15
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9e:	0c1b      	lsrs	r3, r3, #16
 8007ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc0:	ee17 2a90 	vmov	r2, s15
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007bc8:	4b13      	ldr	r3, [pc, #76]	@ (8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bcc:	0e1b      	lsrs	r3, r3, #24
 8007bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bee:	ee17 2a90 	vmov	r2, s15
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bf6:	e008      	b.n	8007c0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	609a      	str	r2, [r3, #8]
}
 8007c0a:	bf00      	nop
 8007c0c:	3724      	adds	r7, #36	@ 0x24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	58024400 	.word	0x58024400
 8007c1c:	03d09000 	.word	0x03d09000
 8007c20:	46000000 	.word	0x46000000
 8007c24:	4c742400 	.word	0x4c742400
 8007c28:	4a742400 	.word	0x4a742400
 8007c2c:	4af42400 	.word	0x4af42400

08007c30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b089      	sub	sp, #36	@ 0x24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c38:	4ba1      	ldr	r3, [pc, #644]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c42:	4b9f      	ldr	r3, [pc, #636]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c46:	0d1b      	lsrs	r3, r3, #20
 8007c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c5a:	4b99      	ldr	r3, [pc, #612]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c5e:	08db      	lsrs	r3, r3, #3
 8007c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8111 	beq.w	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	f000 8083 	beq.w	8007d8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f200 80a1 	bhi.w	8007dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d056      	beq.n	8007d48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c9a:	e099      	b.n	8007dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c9c:	4b88      	ldr	r3, [pc, #544]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d02d      	beq.n	8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ca8:	4b85      	ldr	r3, [pc, #532]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	08db      	lsrs	r3, r3, #3
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	4a84      	ldr	r2, [pc, #528]	@ (8007ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d02:	e087      	b.n	8007e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ecc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d16:	4b6a      	ldr	r3, [pc, #424]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d46:	e065      	b.n	8007e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5a:	4b59      	ldr	r3, [pc, #356]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d8a:	e043      	b.n	8007e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9e:	4b48      	ldr	r3, [pc, #288]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007db2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dce:	e021      	b.n	8007e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de2:	4b37      	ldr	r3, [pc, #220]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007df6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007e14:	4b2a      	ldr	r3, [pc, #168]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e18:	0a5b      	lsrs	r3, r3, #9
 8007e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e3a:	ee17 2a90 	vmov	r2, s15
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e42:	4b1f      	ldr	r3, [pc, #124]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	0c1b      	lsrs	r3, r3, #16
 8007e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e4c:	ee07 3a90 	vmov	s15, r3
 8007e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e68:	ee17 2a90 	vmov	r2, s15
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e70:	4b13      	ldr	r3, [pc, #76]	@ (8007ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e74:	0e1b      	lsrs	r3, r3, #24
 8007e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e7a:	ee07 3a90 	vmov	s15, r3
 8007e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e96:	ee17 2a90 	vmov	r2, s15
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	609a      	str	r2, [r3, #8]
}
 8007eb2:	bf00      	nop
 8007eb4:	3724      	adds	r7, #36	@ 0x24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	58024400 	.word	0x58024400
 8007ec4:	03d09000 	.word	0x03d09000
 8007ec8:	46000000 	.word	0x46000000
 8007ecc:	4c742400 	.word	0x4c742400
 8007ed0:	4a742400 	.word	0x4a742400
 8007ed4:	4af42400 	.word	0x4af42400

08007ed8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ee6:	4b53      	ldr	r3, [pc, #332]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d101      	bne.n	8007ef6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e099      	b.n	800802a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a4e      	ldr	r2, [pc, #312]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007efc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f02:	f7fa f991 	bl	8002228 <HAL_GetTick>
 8007f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f08:	e008      	b.n	8007f1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f0a:	f7fa f98d 	bl	8002228 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d901      	bls.n	8007f1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e086      	b.n	800802a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f1c:	4b45      	ldr	r3, [pc, #276]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1f0      	bne.n	8007f0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f28:	4b42      	ldr	r3, [pc, #264]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	031b      	lsls	r3, r3, #12
 8007f36:	493f      	ldr	r1, [pc, #252]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	025b      	lsls	r3, r3, #9
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	431a      	orrs	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	041b      	lsls	r3, r3, #16
 8007f5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	061b      	lsls	r3, r3, #24
 8007f68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f6c:	4931      	ldr	r1, [pc, #196]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f72:	4b30      	ldr	r3, [pc, #192]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	492d      	ldr	r1, [pc, #180]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f84:	4b2b      	ldr	r3, [pc, #172]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f88:	f023 0220 	bic.w	r2, r3, #32
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	4928      	ldr	r1, [pc, #160]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f96:	4b27      	ldr	r3, [pc, #156]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9a:	4a26      	ldr	r2, [pc, #152]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007f9c:	f023 0310 	bic.w	r3, r3, #16
 8007fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fa2:	4b24      	ldr	r3, [pc, #144]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fa6:	4b24      	ldr	r3, [pc, #144]	@ (8008038 <RCCEx_PLL2_Config+0x160>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	69d2      	ldr	r2, [r2, #28]
 8007fae:	00d2      	lsls	r2, r2, #3
 8007fb0:	4920      	ldr	r1, [pc, #128]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fba:	4a1e      	ldr	r2, [pc, #120]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fbc:	f043 0310 	orr.w	r3, r3, #16
 8007fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	4a19      	ldr	r2, [pc, #100]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fd4:	e00f      	b.n	8007ff6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d106      	bne.n	8007fea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007fdc:	4b15      	ldr	r3, [pc, #84]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe0:	4a14      	ldr	r2, [pc, #80]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fe8:	e005      	b.n	8007ff6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007fea:	4b12      	ldr	r3, [pc, #72]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	4a11      	ldr	r2, [pc, #68]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007ff0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 8007ffc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008002:	f7fa f911 	bl	8002228 <HAL_GetTick>
 8008006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008008:	e008      	b.n	800801c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800800a:	f7fa f90d 	bl	8002228 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	d901      	bls.n	800801c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e006      	b.n	800802a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800801c:	4b05      	ldr	r3, [pc, #20]	@ (8008034 <RCCEx_PLL2_Config+0x15c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0f0      	beq.n	800800a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	58024400 	.word	0x58024400
 8008038:	ffff0007 	.word	0xffff0007

0800803c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800804a:	4b53      	ldr	r3, [pc, #332]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 800804c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b03      	cmp	r3, #3
 8008054:	d101      	bne.n	800805a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e099      	b.n	800818e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800805a:	4b4f      	ldr	r3, [pc, #316]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a4e      	ldr	r2, [pc, #312]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008066:	f7fa f8df 	bl	8002228 <HAL_GetTick>
 800806a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800806c:	e008      	b.n	8008080 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800806e:	f7fa f8db 	bl	8002228 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e086      	b.n	800818e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008080:	4b45      	ldr	r3, [pc, #276]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f0      	bne.n	800806e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800808c:	4b42      	ldr	r3, [pc, #264]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 800808e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008090:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	051b      	lsls	r3, r3, #20
 800809a:	493f      	ldr	r1, [pc, #252]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 800809c:	4313      	orrs	r3, r2
 800809e:	628b      	str	r3, [r1, #40]	@ 0x28
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	025b      	lsls	r3, r3, #9
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	041b      	lsls	r3, r3, #16
 80080be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	061b      	lsls	r3, r3, #24
 80080cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080d0:	4931      	ldr	r1, [pc, #196]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080d6:	4b30      	ldr	r3, [pc, #192]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 80080d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	492d      	ldr	r1, [pc, #180]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80080e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 80080ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	4928      	ldr	r1, [pc, #160]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80080fa:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 80080fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fe:	4a26      	ldr	r2, [pc, #152]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008104:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008106:	4b24      	ldr	r3, [pc, #144]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800810a:	4b24      	ldr	r3, [pc, #144]	@ (800819c <RCCEx_PLL3_Config+0x160>)
 800810c:	4013      	ands	r3, r2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	69d2      	ldr	r2, [r2, #28]
 8008112:	00d2      	lsls	r2, r2, #3
 8008114:	4920      	ldr	r1, [pc, #128]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008116:	4313      	orrs	r3, r2
 8008118:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800811a:	4b1f      	ldr	r3, [pc, #124]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 800811c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811e:	4a1e      	ldr	r2, [pc, #120]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008124:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800812c:	4b1a      	ldr	r3, [pc, #104]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 800812e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008130:	4a19      	ldr	r2, [pc, #100]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008132:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008138:	e00f      	b.n	800815a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d106      	bne.n	800814e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008140:	4b15      	ldr	r3, [pc, #84]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008144:	4a14      	ldr	r2, [pc, #80]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008146:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800814a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800814c:	e005      	b.n	800815a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800814e:	4b12      	ldr	r3, [pc, #72]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008152:	4a11      	ldr	r2, [pc, #68]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008154:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008158:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800815a:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a0e      	ldr	r2, [pc, #56]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008166:	f7fa f85f 	bl	8002228 <HAL_GetTick>
 800816a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800816c:	e008      	b.n	8008180 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800816e:	f7fa f85b 	bl	8002228 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e006      	b.n	800818e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008180:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <RCCEx_PLL3_Config+0x15c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0f0      	beq.n	800816e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800818c:	7bfb      	ldrb	r3, [r7, #15]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400
 800819c:	ffff0007 	.word	0xffff0007

080081a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e049      	b.n	8008246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f841 	bl	800824e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3304      	adds	r3, #4
 80081dc:	4619      	mov	r1, r3
 80081de:	4610      	mov	r0, r2
 80081e0:	f000 f9e8 	bl	80085b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
	...

08008264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	d001      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e054      	b.n	8008326 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a26      	ldr	r2, [pc, #152]	@ (8008334 <HAL_TIM_Base_Start_IT+0xd0>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d022      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a6:	d01d      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a22      	ldr	r2, [pc, #136]	@ (8008338 <HAL_TIM_Base_Start_IT+0xd4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d018      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a21      	ldr	r2, [pc, #132]	@ (800833c <HAL_TIM_Base_Start_IT+0xd8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d013      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008340 <HAL_TIM_Base_Start_IT+0xdc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00e      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008344 <HAL_TIM_Base_Start_IT+0xe0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008348 <HAL_TIM_Base_Start_IT+0xe4>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a1b      	ldr	r2, [pc, #108]	@ (800834c <HAL_TIM_Base_Start_IT+0xe8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d115      	bne.n	8008310 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689a      	ldr	r2, [r3, #8]
 80082ea:	4b19      	ldr	r3, [pc, #100]	@ (8008350 <HAL_TIM_Base_Start_IT+0xec>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b06      	cmp	r3, #6
 80082f4:	d015      	beq.n	8008322 <HAL_TIM_Base_Start_IT+0xbe>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082fc:	d011      	beq.n	8008322 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f042 0201 	orr.w	r2, r2, #1
 800830c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800830e:	e008      	b.n	8008322 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0201 	orr.w	r2, r2, #1
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e000      	b.n	8008324 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40010000 	.word	0x40010000
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40000c00 	.word	0x40000c00
 8008344:	40010400 	.word	0x40010400
 8008348:	40001800 	.word	0x40001800
 800834c:	40014000 	.word	0x40014000
 8008350:	00010007 	.word	0x00010007

08008354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d020      	beq.n	80083b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01b      	beq.n	80083b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f06f 0202 	mvn.w	r2, #2
 8008388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8e9 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 80083a4:	e005      	b.n	80083b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f8db 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f8ec 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d020      	beq.n	8008404 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01b      	beq.n	8008404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0204 	mvn.w	r2, #4
 80083d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2202      	movs	r2, #2
 80083da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f8c3 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 80083f0:	e005      	b.n	80083fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f8b5 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f8c6 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f003 0308 	and.w	r3, r3, #8
 800840a:	2b00      	cmp	r3, #0
 800840c:	d020      	beq.n	8008450 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b00      	cmp	r3, #0
 8008416:	d01b      	beq.n	8008450 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f06f 0208 	mvn.w	r2, #8
 8008420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2204      	movs	r2, #4
 8008426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f89d 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 800843c:	e005      	b.n	800844a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f88f 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f8a0 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f003 0310 	and.w	r3, r3, #16
 8008456:	2b00      	cmp	r3, #0
 8008458:	d020      	beq.n	800849c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f003 0310 	and.w	r3, r3, #16
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01b      	beq.n	800849c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f06f 0210 	mvn.w	r2, #16
 800846c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2208      	movs	r2, #8
 8008472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f877 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 8008488:	e005      	b.n	8008496 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f869 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f87a 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00c      	beq.n	80084c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d007      	beq.n	80084c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f06f 0201 	mvn.w	r2, #1
 80084b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7f8 ffb6 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d104      	bne.n	80084d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00c      	beq.n	80084ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80084e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f913 	bl	8008714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00c      	beq.n	8008512 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800850a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f90b 	bl	8008728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00c      	beq.n	8008536 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800852e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f834 	bl	800859e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f003 0320 	and.w	r3, r3, #32
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00c      	beq.n	800855a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f06f 0220 	mvn.w	r2, #32
 8008552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f8d3 	bl	8008700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800855a:	bf00      	nop
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a46      	ldr	r2, [pc, #280]	@ (80086e0 <TIM_Base_SetConfig+0x12c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d013      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d2:	d00f      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a43      	ldr	r2, [pc, #268]	@ (80086e4 <TIM_Base_SetConfig+0x130>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00b      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a42      	ldr	r2, [pc, #264]	@ (80086e8 <TIM_Base_SetConfig+0x134>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d007      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a41      	ldr	r2, [pc, #260]	@ (80086ec <TIM_Base_SetConfig+0x138>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a40      	ldr	r2, [pc, #256]	@ (80086f0 <TIM_Base_SetConfig+0x13c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d108      	bne.n	8008606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a35      	ldr	r2, [pc, #212]	@ (80086e0 <TIM_Base_SetConfig+0x12c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d01f      	beq.n	800864e <TIM_Base_SetConfig+0x9a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008614:	d01b      	beq.n	800864e <TIM_Base_SetConfig+0x9a>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a32      	ldr	r2, [pc, #200]	@ (80086e4 <TIM_Base_SetConfig+0x130>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d017      	beq.n	800864e <TIM_Base_SetConfig+0x9a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a31      	ldr	r2, [pc, #196]	@ (80086e8 <TIM_Base_SetConfig+0x134>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <TIM_Base_SetConfig+0x9a>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a30      	ldr	r2, [pc, #192]	@ (80086ec <TIM_Base_SetConfig+0x138>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00f      	beq.n	800864e <TIM_Base_SetConfig+0x9a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a2f      	ldr	r2, [pc, #188]	@ (80086f0 <TIM_Base_SetConfig+0x13c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00b      	beq.n	800864e <TIM_Base_SetConfig+0x9a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2e      	ldr	r2, [pc, #184]	@ (80086f4 <TIM_Base_SetConfig+0x140>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d007      	beq.n	800864e <TIM_Base_SetConfig+0x9a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a2d      	ldr	r2, [pc, #180]	@ (80086f8 <TIM_Base_SetConfig+0x144>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d003      	beq.n	800864e <TIM_Base_SetConfig+0x9a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2c      	ldr	r2, [pc, #176]	@ (80086fc <TIM_Base_SetConfig+0x148>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d108      	bne.n	8008660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	689a      	ldr	r2, [r3, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a16      	ldr	r2, [pc, #88]	@ (80086e0 <TIM_Base_SetConfig+0x12c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00f      	beq.n	80086ac <TIM_Base_SetConfig+0xf8>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a18      	ldr	r2, [pc, #96]	@ (80086f0 <TIM_Base_SetConfig+0x13c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00b      	beq.n	80086ac <TIM_Base_SetConfig+0xf8>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a17      	ldr	r2, [pc, #92]	@ (80086f4 <TIM_Base_SetConfig+0x140>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d007      	beq.n	80086ac <TIM_Base_SetConfig+0xf8>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a16      	ldr	r2, [pc, #88]	@ (80086f8 <TIM_Base_SetConfig+0x144>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d003      	beq.n	80086ac <TIM_Base_SetConfig+0xf8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a15      	ldr	r2, [pc, #84]	@ (80086fc <TIM_Base_SetConfig+0x148>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d103      	bne.n	80086b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d105      	bne.n	80086d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f023 0201 	bic.w	r2, r3, #1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	611a      	str	r2, [r3, #16]
  }
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40010000 	.word	0x40010000
 80086e4:	40000400 	.word	0x40000400
 80086e8:	40000800 	.word	0x40000800
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40014400 	.word	0x40014400
 80086fc:	40014800 	.word	0x40014800

08008700 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e042      	b.n	80087d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008754:	2b00      	cmp	r3, #0
 8008756:	d106      	bne.n	8008766 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7f9 fc0f 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2224      	movs	r2, #36	@ 0x24
 800876a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 0201 	bic.w	r2, r2, #1
 800877c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 faea 	bl	8009d60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fd7f 	bl	8009290 <UART_SetConfig>
 8008792:	4603      	mov	r3, r0
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e01b      	b.n	80087d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0201 	orr.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 fb69 	bl	8009ea4 <UART_CheckIdleState>
 80087d2:	4603      	mov	r3, r0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08a      	sub	sp, #40	@ 0x28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	d167      	bne.n	80088c4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <HAL_UART_Transmit_DMA+0x24>
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e060      	b.n	80088c6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	88fa      	ldrh	r2, [r7, #6]
 800880e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	88fa      	ldrh	r2, [r7, #6]
 8008816:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2221      	movs	r2, #33	@ 0x21
 8008826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d028      	beq.n	8008884 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008836:	4a26      	ldr	r2, [pc, #152]	@ (80088d0 <HAL_UART_Transmit_DMA+0xf4>)
 8008838:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800883e:	4a25      	ldr	r2, [pc, #148]	@ (80088d4 <HAL_UART_Transmit_DMA+0xf8>)
 8008840:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008846:	4a24      	ldr	r2, [pc, #144]	@ (80088d8 <HAL_UART_Transmit_DMA+0xfc>)
 8008848:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800884e:	2200      	movs	r2, #0
 8008850:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800885a:	4619      	mov	r1, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3328      	adds	r3, #40	@ 0x28
 8008862:	461a      	mov	r2, r3
 8008864:	88fb      	ldrh	r3, [r7, #6]
 8008866:	f7fa f933 	bl	8002ad0 <HAL_DMA_Start_IT>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d009      	beq.n	8008884 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2210      	movs	r2, #16
 8008874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2220      	movs	r2, #32
 800887c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e020      	b.n	80088c6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2240      	movs	r2, #64	@ 0x40
 800888a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	613b      	str	r3, [r7, #16]
   return(result);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3308      	adds	r3, #8
 80088aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088ac:	623a      	str	r2, [r7, #32]
 80088ae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	69f9      	ldr	r1, [r7, #28]
 80088b2:	6a3a      	ldr	r2, [r7, #32]
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e5      	bne.n	800888c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e000      	b.n	80088c6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80088c4:	2302      	movs	r3, #2
  }
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3728      	adds	r7, #40	@ 0x28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	0800a371 	.word	0x0800a371
 80088d4:	0800a407 	.word	0x0800a407
 80088d8:	0800a589 	.word	0x0800a589

080088dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	@ 0x28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d137      	bne.n	8008964 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_UART_Receive_DMA+0x24>
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e030      	b.n	8008966 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a18      	ldr	r2, [pc, #96]	@ (8008970 <HAL_UART_Receive_DMA+0x94>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d01f      	beq.n	8008954 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d018      	beq.n	8008954 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	613b      	str	r3, [r7, #16]
   return(result);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008936:	627b      	str	r3, [r7, #36]	@ 0x24
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	623b      	str	r3, [r7, #32]
 8008942:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	69f9      	ldr	r1, [r7, #28]
 8008946:	6a3a      	ldr	r2, [r7, #32]
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	61bb      	str	r3, [r7, #24]
   return(result);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e6      	bne.n	8008922 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	461a      	mov	r2, r3
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f001 fbba 	bl	800a0d4 <UART_Start_Receive_DMA>
 8008960:	4603      	mov	r3, r0
 8008962:	e000      	b.n	8008966 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008964:	2302      	movs	r3, #2
  }
}
 8008966:	4618      	mov	r0, r3
 8008968:	3728      	adds	r7, #40	@ 0x28
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	58000c00 	.word	0x58000c00

08008974 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b090      	sub	sp, #64	@ 0x40
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800898a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008996:	2b80      	cmp	r3, #128	@ 0x80
 8008998:	d139      	bne.n	8008a0e <HAL_UART_DMAStop+0x9a>
 800899a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800899c:	2b21      	cmp	r3, #33	@ 0x21
 800899e:	d136      	bne.n	8008a0e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3308      	adds	r3, #8
 80089a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e5      	bne.n	80089a0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d015      	beq.n	8008a08 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fa fadf 	bl	8002fa4 <HAL_DMA_Abort>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00d      	beq.n	8008a08 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fb ff65 	bl	80048c0 <HAL_DMA_GetError>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b20      	cmp	r3, #32
 80089fa:	d105      	bne.n	8008a08 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2210      	movs	r2, #16
 8008a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e047      	b.n	8008a98 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fc09 	bl	800a220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a18:	2b40      	cmp	r3, #64	@ 0x40
 8008a1a:	d13c      	bne.n	8008a96 <HAL_UART_DMAStop+0x122>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	2b22      	cmp	r3, #34	@ 0x22
 8008a20:	d139      	bne.n	8008a96 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3308      	adds	r3, #8
 8008a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a42:	61ba      	str	r2, [r7, #24]
 8008a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6979      	ldr	r1, [r7, #20]
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d017      	beq.n	8008a90 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fa fa9c 	bl	8002fa4 <HAL_DMA_Abort>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00e      	beq.n	8008a90 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fb ff21 	bl	80048c0 <HAL_DMA_GetError>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b20      	cmp	r3, #32
 8008a82:	d105      	bne.n	8008a90 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2210      	movs	r2, #16
 8008a88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e003      	b.n	8008a98 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 fc07 	bl	800a2a4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3740      	adds	r7, #64	@ 0x40
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008aca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ace:	4013      	ands	r3, r2
 8008ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d11b      	bne.n	8008b14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d015      	beq.n	8008b14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d105      	bne.n	8008b00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d009      	beq.n	8008b14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 8377 	beq.w	80091f8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	4798      	blx	r3
      }
      return;
 8008b12:	e371      	b.n	80091f8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 8123 	beq.w	8008d64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b22:	4b8d      	ldr	r3, [pc, #564]	@ (8008d58 <HAL_UART_IRQHandler+0x2b8>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8008d5c <HAL_UART_IRQHandler+0x2bc>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 8116 	beq.w	8008d64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d011      	beq.n	8008b68 <HAL_UART_IRQHandler+0xc8>
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2201      	movs	r2, #1
 8008b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b5e:	f043 0201 	orr.w	r2, r3, #1
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6c:	f003 0302 	and.w	r3, r3, #2
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d011      	beq.n	8008b98 <HAL_UART_IRQHandler+0xf8>
 8008b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2202      	movs	r2, #2
 8008b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b8e:	f043 0204 	orr.w	r2, r3, #4
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d011      	beq.n	8008bc8 <HAL_UART_IRQHandler+0x128>
 8008ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bbe:	f043 0202 	orr.w	r2, r3, #2
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d017      	beq.n	8008c04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd8:	f003 0320 	and.w	r3, r3, #32
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d105      	bne.n	8008bec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008be0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008be4:	4b5c      	ldr	r3, [pc, #368]	@ (8008d58 <HAL_UART_IRQHandler+0x2b8>)
 8008be6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00b      	beq.n	8008c04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bfa:	f043 0208 	orr.w	r2, r3, #8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d012      	beq.n	8008c36 <HAL_UART_IRQHandler+0x196>
 8008c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00c      	beq.n	8008c36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c2c:	f043 0220 	orr.w	r2, r3, #32
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 82dd 	beq.w	80091fc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d013      	beq.n	8008c76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d007      	beq.n	8008c76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c8a:	2b40      	cmp	r3, #64	@ 0x40
 8008c8c:	d005      	beq.n	8008c9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d054      	beq.n	8008d44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 fb02 	bl	800a2a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008caa:	2b40      	cmp	r3, #64	@ 0x40
 8008cac:	d146      	bne.n	8008d3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008cde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ce6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cea:	e841 2300 	strex	r3, r2, [r1]
 8008cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1d9      	bne.n	8008cae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d017      	beq.n	8008d34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d0a:	4a15      	ldr	r2, [pc, #84]	@ (8008d60 <HAL_UART_IRQHandler+0x2c0>)
 8008d0c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fa fc63 	bl	80035e0 <HAL_DMA_Abort_IT>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d019      	beq.n	8008d54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008d2e:	4610      	mov	r0, r2
 8008d30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d32:	e00f      	b.n	8008d54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fa95 	bl	8009264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d3a:	e00b      	b.n	8008d54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa91 	bl	8009264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d42:	e007      	b.n	8008d54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fa8d 	bl	8009264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d52:	e253      	b.n	80091fc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d54:	bf00      	nop
    return;
 8008d56:	e251      	b.n	80091fc <HAL_UART_IRQHandler+0x75c>
 8008d58:	10000001 	.word	0x10000001
 8008d5c:	04000120 	.word	0x04000120
 8008d60:	0800a609 	.word	0x0800a609

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	f040 81e7 	bne.w	800913c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d72:	f003 0310 	and.w	r3, r3, #16
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 81e0 	beq.w	800913c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d80:	f003 0310 	and.w	r3, r3, #16
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 81d9 	beq.w	800913c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2210      	movs	r2, #16
 8008d90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d9c:	2b40      	cmp	r3, #64	@ 0x40
 8008d9e:	f040 8151 	bne.w	8009044 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a96      	ldr	r2, [pc, #600]	@ (8009004 <HAL_UART_IRQHandler+0x564>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d068      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a93      	ldr	r2, [pc, #588]	@ (8009008 <HAL_UART_IRQHandler+0x568>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d061      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a91      	ldr	r2, [pc, #580]	@ (800900c <HAL_UART_IRQHandler+0x56c>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d05a      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a8e      	ldr	r2, [pc, #568]	@ (8009010 <HAL_UART_IRQHandler+0x570>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d053      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a8c      	ldr	r2, [pc, #560]	@ (8009014 <HAL_UART_IRQHandler+0x574>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d04c      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a89      	ldr	r2, [pc, #548]	@ (8009018 <HAL_UART_IRQHandler+0x578>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d045      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a87      	ldr	r2, [pc, #540]	@ (800901c <HAL_UART_IRQHandler+0x57c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d03e      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a84      	ldr	r2, [pc, #528]	@ (8009020 <HAL_UART_IRQHandler+0x580>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d037      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a82      	ldr	r2, [pc, #520]	@ (8009024 <HAL_UART_IRQHandler+0x584>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d030      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a7f      	ldr	r2, [pc, #508]	@ (8009028 <HAL_UART_IRQHandler+0x588>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d029      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a7d      	ldr	r2, [pc, #500]	@ (800902c <HAL_UART_IRQHandler+0x58c>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d022      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a7a      	ldr	r2, [pc, #488]	@ (8009030 <HAL_UART_IRQHandler+0x590>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01b      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a78      	ldr	r2, [pc, #480]	@ (8009034 <HAL_UART_IRQHandler+0x594>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d014      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a75      	ldr	r2, [pc, #468]	@ (8009038 <HAL_UART_IRQHandler+0x598>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00d      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a73      	ldr	r2, [pc, #460]	@ (800903c <HAL_UART_IRQHandler+0x59c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d006      	beq.n	8008e82 <HAL_UART_IRQHandler+0x3e2>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a70      	ldr	r2, [pc, #448]	@ (8009040 <HAL_UART_IRQHandler+0x5a0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d106      	bne.n	8008e90 <HAL_UART_IRQHandler+0x3f0>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	e005      	b.n	8008e9c <HAL_UART_IRQHandler+0x3fc>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 81ab 	beq.w	8009200 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008eb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	f080 81a3 	bcs.w	8009200 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ec0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eca:	69db      	ldr	r3, [r3, #28]
 8008ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ed0:	f000 8087 	beq.w	8008fe2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008efe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1da      	bne.n	8008ed4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f30:	f023 0301 	bic.w	r3, r3, #1
 8008f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e1      	bne.n	8008f1e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e3      	bne.n	8008f5a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fb0:	f023 0310 	bic.w	r3, r3, #16
 8008fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e4      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7f9 ffe1 	bl	8002fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f93b 	bl	8009278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009002:	e0fd      	b.n	8009200 <HAL_UART_IRQHandler+0x760>
 8009004:	40020010 	.word	0x40020010
 8009008:	40020028 	.word	0x40020028
 800900c:	40020040 	.word	0x40020040
 8009010:	40020058 	.word	0x40020058
 8009014:	40020070 	.word	0x40020070
 8009018:	40020088 	.word	0x40020088
 800901c:	400200a0 	.word	0x400200a0
 8009020:	400200b8 	.word	0x400200b8
 8009024:	40020410 	.word	0x40020410
 8009028:	40020428 	.word	0x40020428
 800902c:	40020440 	.word	0x40020440
 8009030:	40020458 	.word	0x40020458
 8009034:	40020470 	.word	0x40020470
 8009038:	40020488 	.word	0x40020488
 800903c:	400204a0 	.word	0x400204a0
 8009040:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009050:	b29b      	uxth	r3, r3
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800905e:	b29b      	uxth	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 80cf 	beq.w	8009204 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009066:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800906a:	2b00      	cmp	r3, #0
 800906c:	f000 80ca 	beq.w	8009204 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800907e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009084:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	461a      	mov	r2, r3
 800908e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009092:	647b      	str	r3, [r7, #68]	@ 0x44
 8009094:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e4      	bne.n	8009070 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3308      	adds	r3, #8
 80090ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	623b      	str	r3, [r7, #32]
   return(result);
 80090b6:	6a3a      	ldr	r2, [r7, #32]
 80090b8:	4b55      	ldr	r3, [pc, #340]	@ (8009210 <HAL_UART_IRQHandler+0x770>)
 80090ba:	4013      	ands	r3, r2
 80090bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3308      	adds	r3, #8
 80090c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80090cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e3      	bne.n	80090a6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f023 0310 	bic.w	r3, r3, #16
 8009106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009114:	61fb      	str	r3, [r7, #28]
 8009116:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	69b9      	ldr	r1, [r7, #24]
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	617b      	str	r3, [r7, #20]
   return(result);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e4      	bne.n	80090f2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800912e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f89f 	bl	8009278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800913a:	e063      	b.n	8009204 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800913c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00e      	beq.n	8009166 <HAL_UART_IRQHandler+0x6c6>
 8009148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800914c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d008      	beq.n	8009166 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800915c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fa93 	bl	800a68a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009164:	e051      	b.n	800920a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800916a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800916e:	2b00      	cmp	r3, #0
 8009170:	d014      	beq.n	800919c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800917a:	2b00      	cmp	r3, #0
 800917c:	d105      	bne.n	800918a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800917e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d008      	beq.n	800919c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800918e:	2b00      	cmp	r3, #0
 8009190:	d03a      	beq.n	8009208 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	4798      	blx	r3
    }
    return;
 800919a:	e035      	b.n	8009208 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d009      	beq.n	80091bc <HAL_UART_IRQHandler+0x71c>
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 fa3d 	bl	800a634 <UART_EndTransmit_IT>
    return;
 80091ba:	e026      	b.n	800920a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80091bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <HAL_UART_IRQHandler+0x73c>
 80091c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 fa6c 	bl	800a6b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091da:	e016      	b.n	800920a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d010      	beq.n	800920a <HAL_UART_IRQHandler+0x76a>
 80091e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	da0c      	bge.n	800920a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f001 fa54 	bl	800a69e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091f6:	e008      	b.n	800920a <HAL_UART_IRQHandler+0x76a>
      return;
 80091f8:	bf00      	nop
 80091fa:	e006      	b.n	800920a <HAL_UART_IRQHandler+0x76a>
    return;
 80091fc:	bf00      	nop
 80091fe:	e004      	b.n	800920a <HAL_UART_IRQHandler+0x76a>
      return;
 8009200:	bf00      	nop
 8009202:	e002      	b.n	800920a <HAL_UART_IRQHandler+0x76a>
      return;
 8009204:	bf00      	nop
 8009206:	e000      	b.n	800920a <HAL_UART_IRQHandler+0x76a>
    return;
 8009208:	bf00      	nop
  }
}
 800920a:	37e8      	adds	r7, #232	@ 0xe8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	effffffe 	.word	0xeffffffe

08009214 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009294:	b092      	sub	sp, #72	@ 0x48
 8009296:	af00      	add	r7, sp, #0
 8009298:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	431a      	orrs	r2, r3
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	431a      	orrs	r2, r3
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4bbe      	ldr	r3, [pc, #760]	@ (80095b8 <UART_SetConfig+0x328>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092c8:	430b      	orrs	r3, r1
 80092ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4ab3      	ldr	r2, [pc, #716]	@ (80095bc <UART_SetConfig+0x32c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d004      	beq.n	80092fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092f8:	4313      	orrs	r3, r2
 80092fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689a      	ldr	r2, [r3, #8]
 8009302:	4baf      	ldr	r3, [pc, #700]	@ (80095c0 <UART_SetConfig+0x330>)
 8009304:	4013      	ands	r3, r2
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	6812      	ldr	r2, [r2, #0]
 800930a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800930c:	430b      	orrs	r3, r1
 800930e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009316:	f023 010f 	bic.w	r1, r3, #15
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4aa6      	ldr	r2, [pc, #664]	@ (80095c4 <UART_SetConfig+0x334>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d177      	bne.n	8009420 <UART_SetConfig+0x190>
 8009330:	4ba5      	ldr	r3, [pc, #660]	@ (80095c8 <UART_SetConfig+0x338>)
 8009332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009334:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009338:	2b28      	cmp	r3, #40	@ 0x28
 800933a:	d86d      	bhi.n	8009418 <UART_SetConfig+0x188>
 800933c:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <UART_SetConfig+0xb4>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	080093e9 	.word	0x080093e9
 8009348:	08009419 	.word	0x08009419
 800934c:	08009419 	.word	0x08009419
 8009350:	08009419 	.word	0x08009419
 8009354:	08009419 	.word	0x08009419
 8009358:	08009419 	.word	0x08009419
 800935c:	08009419 	.word	0x08009419
 8009360:	08009419 	.word	0x08009419
 8009364:	080093f1 	.word	0x080093f1
 8009368:	08009419 	.word	0x08009419
 800936c:	08009419 	.word	0x08009419
 8009370:	08009419 	.word	0x08009419
 8009374:	08009419 	.word	0x08009419
 8009378:	08009419 	.word	0x08009419
 800937c:	08009419 	.word	0x08009419
 8009380:	08009419 	.word	0x08009419
 8009384:	080093f9 	.word	0x080093f9
 8009388:	08009419 	.word	0x08009419
 800938c:	08009419 	.word	0x08009419
 8009390:	08009419 	.word	0x08009419
 8009394:	08009419 	.word	0x08009419
 8009398:	08009419 	.word	0x08009419
 800939c:	08009419 	.word	0x08009419
 80093a0:	08009419 	.word	0x08009419
 80093a4:	08009401 	.word	0x08009401
 80093a8:	08009419 	.word	0x08009419
 80093ac:	08009419 	.word	0x08009419
 80093b0:	08009419 	.word	0x08009419
 80093b4:	08009419 	.word	0x08009419
 80093b8:	08009419 	.word	0x08009419
 80093bc:	08009419 	.word	0x08009419
 80093c0:	08009419 	.word	0x08009419
 80093c4:	08009409 	.word	0x08009409
 80093c8:	08009419 	.word	0x08009419
 80093cc:	08009419 	.word	0x08009419
 80093d0:	08009419 	.word	0x08009419
 80093d4:	08009419 	.word	0x08009419
 80093d8:	08009419 	.word	0x08009419
 80093dc:	08009419 	.word	0x08009419
 80093e0:	08009419 	.word	0x08009419
 80093e4:	08009411 	.word	0x08009411
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e222      	b.n	8009836 <UART_SetConfig+0x5a6>
 80093f0:	2304      	movs	r3, #4
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e21e      	b.n	8009836 <UART_SetConfig+0x5a6>
 80093f8:	2308      	movs	r3, #8
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e21a      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009400:	2310      	movs	r3, #16
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e216      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009408:	2320      	movs	r3, #32
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e212      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009410:	2340      	movs	r3, #64	@ 0x40
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e20e      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009418:	2380      	movs	r3, #128	@ 0x80
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e20a      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a69      	ldr	r2, [pc, #420]	@ (80095cc <UART_SetConfig+0x33c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d130      	bne.n	800948c <UART_SetConfig+0x1fc>
 800942a:	4b67      	ldr	r3, [pc, #412]	@ (80095c8 <UART_SetConfig+0x338>)
 800942c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	2b05      	cmp	r3, #5
 8009434:	d826      	bhi.n	8009484 <UART_SetConfig+0x1f4>
 8009436:	a201      	add	r2, pc, #4	@ (adr r2, 800943c <UART_SetConfig+0x1ac>)
 8009438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943c:	08009455 	.word	0x08009455
 8009440:	0800945d 	.word	0x0800945d
 8009444:	08009465 	.word	0x08009465
 8009448:	0800946d 	.word	0x0800946d
 800944c:	08009475 	.word	0x08009475
 8009450:	0800947d 	.word	0x0800947d
 8009454:	2300      	movs	r3, #0
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e1ec      	b.n	8009836 <UART_SetConfig+0x5a6>
 800945c:	2304      	movs	r3, #4
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e1e8      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009464:	2308      	movs	r3, #8
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e1e4      	b.n	8009836 <UART_SetConfig+0x5a6>
 800946c:	2310      	movs	r3, #16
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e1e0      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009474:	2320      	movs	r3, #32
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e1dc      	b.n	8009836 <UART_SetConfig+0x5a6>
 800947c:	2340      	movs	r3, #64	@ 0x40
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e1d8      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009484:	2380      	movs	r3, #128	@ 0x80
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e1d4      	b.n	8009836 <UART_SetConfig+0x5a6>
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a4f      	ldr	r2, [pc, #316]	@ (80095d0 <UART_SetConfig+0x340>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d130      	bne.n	80094f8 <UART_SetConfig+0x268>
 8009496:	4b4c      	ldr	r3, [pc, #304]	@ (80095c8 <UART_SetConfig+0x338>)
 8009498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	2b05      	cmp	r3, #5
 80094a0:	d826      	bhi.n	80094f0 <UART_SetConfig+0x260>
 80094a2:	a201      	add	r2, pc, #4	@ (adr r2, 80094a8 <UART_SetConfig+0x218>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	080094c1 	.word	0x080094c1
 80094ac:	080094c9 	.word	0x080094c9
 80094b0:	080094d1 	.word	0x080094d1
 80094b4:	080094d9 	.word	0x080094d9
 80094b8:	080094e1 	.word	0x080094e1
 80094bc:	080094e9 	.word	0x080094e9
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e1b6      	b.n	8009836 <UART_SetConfig+0x5a6>
 80094c8:	2304      	movs	r3, #4
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e1b2      	b.n	8009836 <UART_SetConfig+0x5a6>
 80094d0:	2308      	movs	r3, #8
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e1ae      	b.n	8009836 <UART_SetConfig+0x5a6>
 80094d8:	2310      	movs	r3, #16
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e1aa      	b.n	8009836 <UART_SetConfig+0x5a6>
 80094e0:	2320      	movs	r3, #32
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e1a6      	b.n	8009836 <UART_SetConfig+0x5a6>
 80094e8:	2340      	movs	r3, #64	@ 0x40
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e1a2      	b.n	8009836 <UART_SetConfig+0x5a6>
 80094f0:	2380      	movs	r3, #128	@ 0x80
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e19e      	b.n	8009836 <UART_SetConfig+0x5a6>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a35      	ldr	r2, [pc, #212]	@ (80095d4 <UART_SetConfig+0x344>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d130      	bne.n	8009564 <UART_SetConfig+0x2d4>
 8009502:	4b31      	ldr	r3, [pc, #196]	@ (80095c8 <UART_SetConfig+0x338>)
 8009504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	2b05      	cmp	r3, #5
 800950c:	d826      	bhi.n	800955c <UART_SetConfig+0x2cc>
 800950e:	a201      	add	r2, pc, #4	@ (adr r2, 8009514 <UART_SetConfig+0x284>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	0800952d 	.word	0x0800952d
 8009518:	08009535 	.word	0x08009535
 800951c:	0800953d 	.word	0x0800953d
 8009520:	08009545 	.word	0x08009545
 8009524:	0800954d 	.word	0x0800954d
 8009528:	08009555 	.word	0x08009555
 800952c:	2300      	movs	r3, #0
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e180      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009534:	2304      	movs	r3, #4
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e17c      	b.n	8009836 <UART_SetConfig+0x5a6>
 800953c:	2308      	movs	r3, #8
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e178      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009544:	2310      	movs	r3, #16
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e174      	b.n	8009836 <UART_SetConfig+0x5a6>
 800954c:	2320      	movs	r3, #32
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e170      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009554:	2340      	movs	r3, #64	@ 0x40
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e16c      	b.n	8009836 <UART_SetConfig+0x5a6>
 800955c:	2380      	movs	r3, #128	@ 0x80
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e168      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1b      	ldr	r2, [pc, #108]	@ (80095d8 <UART_SetConfig+0x348>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d142      	bne.n	80095f4 <UART_SetConfig+0x364>
 800956e:	4b16      	ldr	r3, [pc, #88]	@ (80095c8 <UART_SetConfig+0x338>)
 8009570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	2b05      	cmp	r3, #5
 8009578:	d838      	bhi.n	80095ec <UART_SetConfig+0x35c>
 800957a:	a201      	add	r2, pc, #4	@ (adr r2, 8009580 <UART_SetConfig+0x2f0>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	08009599 	.word	0x08009599
 8009584:	080095a1 	.word	0x080095a1
 8009588:	080095a9 	.word	0x080095a9
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095dd 	.word	0x080095dd
 8009594:	080095e5 	.word	0x080095e5
 8009598:	2300      	movs	r3, #0
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e14a      	b.n	8009836 <UART_SetConfig+0x5a6>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e146      	b.n	8009836 <UART_SetConfig+0x5a6>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e142      	b.n	8009836 <UART_SetConfig+0x5a6>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e13e      	b.n	8009836 <UART_SetConfig+0x5a6>
 80095b8:	cfff69f3 	.word	0xcfff69f3
 80095bc:	58000c00 	.word	0x58000c00
 80095c0:	11fff4ff 	.word	0x11fff4ff
 80095c4:	40011000 	.word	0x40011000
 80095c8:	58024400 	.word	0x58024400
 80095cc:	40004400 	.word	0x40004400
 80095d0:	40004800 	.word	0x40004800
 80095d4:	40004c00 	.word	0x40004c00
 80095d8:	40005000 	.word	0x40005000
 80095dc:	2320      	movs	r3, #32
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e128      	b.n	8009836 <UART_SetConfig+0x5a6>
 80095e4:	2340      	movs	r3, #64	@ 0x40
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e124      	b.n	8009836 <UART_SetConfig+0x5a6>
 80095ec:	2380      	movs	r3, #128	@ 0x80
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e120      	b.n	8009836 <UART_SetConfig+0x5a6>
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4acb      	ldr	r2, [pc, #812]	@ (8009928 <UART_SetConfig+0x698>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d176      	bne.n	80096ec <UART_SetConfig+0x45c>
 80095fe:	4bcb      	ldr	r3, [pc, #812]	@ (800992c <UART_SetConfig+0x69c>)
 8009600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009602:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009606:	2b28      	cmp	r3, #40	@ 0x28
 8009608:	d86c      	bhi.n	80096e4 <UART_SetConfig+0x454>
 800960a:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <UART_SetConfig+0x380>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	080096b5 	.word	0x080096b5
 8009614:	080096e5 	.word	0x080096e5
 8009618:	080096e5 	.word	0x080096e5
 800961c:	080096e5 	.word	0x080096e5
 8009620:	080096e5 	.word	0x080096e5
 8009624:	080096e5 	.word	0x080096e5
 8009628:	080096e5 	.word	0x080096e5
 800962c:	080096e5 	.word	0x080096e5
 8009630:	080096bd 	.word	0x080096bd
 8009634:	080096e5 	.word	0x080096e5
 8009638:	080096e5 	.word	0x080096e5
 800963c:	080096e5 	.word	0x080096e5
 8009640:	080096e5 	.word	0x080096e5
 8009644:	080096e5 	.word	0x080096e5
 8009648:	080096e5 	.word	0x080096e5
 800964c:	080096e5 	.word	0x080096e5
 8009650:	080096c5 	.word	0x080096c5
 8009654:	080096e5 	.word	0x080096e5
 8009658:	080096e5 	.word	0x080096e5
 800965c:	080096e5 	.word	0x080096e5
 8009660:	080096e5 	.word	0x080096e5
 8009664:	080096e5 	.word	0x080096e5
 8009668:	080096e5 	.word	0x080096e5
 800966c:	080096e5 	.word	0x080096e5
 8009670:	080096cd 	.word	0x080096cd
 8009674:	080096e5 	.word	0x080096e5
 8009678:	080096e5 	.word	0x080096e5
 800967c:	080096e5 	.word	0x080096e5
 8009680:	080096e5 	.word	0x080096e5
 8009684:	080096e5 	.word	0x080096e5
 8009688:	080096e5 	.word	0x080096e5
 800968c:	080096e5 	.word	0x080096e5
 8009690:	080096d5 	.word	0x080096d5
 8009694:	080096e5 	.word	0x080096e5
 8009698:	080096e5 	.word	0x080096e5
 800969c:	080096e5 	.word	0x080096e5
 80096a0:	080096e5 	.word	0x080096e5
 80096a4:	080096e5 	.word	0x080096e5
 80096a8:	080096e5 	.word	0x080096e5
 80096ac:	080096e5 	.word	0x080096e5
 80096b0:	080096dd 	.word	0x080096dd
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e0bc      	b.n	8009836 <UART_SetConfig+0x5a6>
 80096bc:	2304      	movs	r3, #4
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e0b8      	b.n	8009836 <UART_SetConfig+0x5a6>
 80096c4:	2308      	movs	r3, #8
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e0b4      	b.n	8009836 <UART_SetConfig+0x5a6>
 80096cc:	2310      	movs	r3, #16
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e0b0      	b.n	8009836 <UART_SetConfig+0x5a6>
 80096d4:	2320      	movs	r3, #32
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e0ac      	b.n	8009836 <UART_SetConfig+0x5a6>
 80096dc:	2340      	movs	r3, #64	@ 0x40
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e0a8      	b.n	8009836 <UART_SetConfig+0x5a6>
 80096e4:	2380      	movs	r3, #128	@ 0x80
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e0a4      	b.n	8009836 <UART_SetConfig+0x5a6>
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a8f      	ldr	r2, [pc, #572]	@ (8009930 <UART_SetConfig+0x6a0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d130      	bne.n	8009758 <UART_SetConfig+0x4c8>
 80096f6:	4b8d      	ldr	r3, [pc, #564]	@ (800992c <UART_SetConfig+0x69c>)
 80096f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	2b05      	cmp	r3, #5
 8009700:	d826      	bhi.n	8009750 <UART_SetConfig+0x4c0>
 8009702:	a201      	add	r2, pc, #4	@ (adr r2, 8009708 <UART_SetConfig+0x478>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	08009721 	.word	0x08009721
 800970c:	08009729 	.word	0x08009729
 8009710:	08009731 	.word	0x08009731
 8009714:	08009739 	.word	0x08009739
 8009718:	08009741 	.word	0x08009741
 800971c:	08009749 	.word	0x08009749
 8009720:	2300      	movs	r3, #0
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e086      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009728:	2304      	movs	r3, #4
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e082      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009730:	2308      	movs	r3, #8
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e07e      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009738:	2310      	movs	r3, #16
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e07a      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009740:	2320      	movs	r3, #32
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e076      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009748:	2340      	movs	r3, #64	@ 0x40
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e072      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009750:	2380      	movs	r3, #128	@ 0x80
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e06e      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a75      	ldr	r2, [pc, #468]	@ (8009934 <UART_SetConfig+0x6a4>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d130      	bne.n	80097c4 <UART_SetConfig+0x534>
 8009762:	4b72      	ldr	r3, [pc, #456]	@ (800992c <UART_SetConfig+0x69c>)
 8009764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	2b05      	cmp	r3, #5
 800976c:	d826      	bhi.n	80097bc <UART_SetConfig+0x52c>
 800976e:	a201      	add	r2, pc, #4	@ (adr r2, 8009774 <UART_SetConfig+0x4e4>)
 8009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009774:	0800978d 	.word	0x0800978d
 8009778:	08009795 	.word	0x08009795
 800977c:	0800979d 	.word	0x0800979d
 8009780:	080097a5 	.word	0x080097a5
 8009784:	080097ad 	.word	0x080097ad
 8009788:	080097b5 	.word	0x080097b5
 800978c:	2300      	movs	r3, #0
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e050      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009794:	2304      	movs	r3, #4
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e04c      	b.n	8009836 <UART_SetConfig+0x5a6>
 800979c:	2308      	movs	r3, #8
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e048      	b.n	8009836 <UART_SetConfig+0x5a6>
 80097a4:	2310      	movs	r3, #16
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e044      	b.n	8009836 <UART_SetConfig+0x5a6>
 80097ac:	2320      	movs	r3, #32
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e040      	b.n	8009836 <UART_SetConfig+0x5a6>
 80097b4:	2340      	movs	r3, #64	@ 0x40
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e03c      	b.n	8009836 <UART_SetConfig+0x5a6>
 80097bc:	2380      	movs	r3, #128	@ 0x80
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e038      	b.n	8009836 <UART_SetConfig+0x5a6>
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a5b      	ldr	r2, [pc, #364]	@ (8009938 <UART_SetConfig+0x6a8>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d130      	bne.n	8009830 <UART_SetConfig+0x5a0>
 80097ce:	4b57      	ldr	r3, [pc, #348]	@ (800992c <UART_SetConfig+0x69c>)
 80097d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b05      	cmp	r3, #5
 80097d8:	d826      	bhi.n	8009828 <UART_SetConfig+0x598>
 80097da:	a201      	add	r2, pc, #4	@ (adr r2, 80097e0 <UART_SetConfig+0x550>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	080097f9 	.word	0x080097f9
 80097e4:	08009801 	.word	0x08009801
 80097e8:	08009809 	.word	0x08009809
 80097ec:	08009811 	.word	0x08009811
 80097f0:	08009819 	.word	0x08009819
 80097f4:	08009821 	.word	0x08009821
 80097f8:	2302      	movs	r3, #2
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e01a      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009800:	2304      	movs	r3, #4
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e016      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009808:	2308      	movs	r3, #8
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e012      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009810:	2310      	movs	r3, #16
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e00e      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009818:	2320      	movs	r3, #32
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e00a      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009820:	2340      	movs	r3, #64	@ 0x40
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e006      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009828:	2380      	movs	r3, #128	@ 0x80
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e002      	b.n	8009836 <UART_SetConfig+0x5a6>
 8009830:	2380      	movs	r3, #128	@ 0x80
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a3f      	ldr	r2, [pc, #252]	@ (8009938 <UART_SetConfig+0x6a8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	f040 80f8 	bne.w	8009a32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009842:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009846:	2b20      	cmp	r3, #32
 8009848:	dc46      	bgt.n	80098d8 <UART_SetConfig+0x648>
 800984a:	2b02      	cmp	r3, #2
 800984c:	f2c0 8082 	blt.w	8009954 <UART_SetConfig+0x6c4>
 8009850:	3b02      	subs	r3, #2
 8009852:	2b1e      	cmp	r3, #30
 8009854:	d87e      	bhi.n	8009954 <UART_SetConfig+0x6c4>
 8009856:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <UART_SetConfig+0x5cc>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	080098df 	.word	0x080098df
 8009860:	08009955 	.word	0x08009955
 8009864:	080098e7 	.word	0x080098e7
 8009868:	08009955 	.word	0x08009955
 800986c:	08009955 	.word	0x08009955
 8009870:	08009955 	.word	0x08009955
 8009874:	080098f7 	.word	0x080098f7
 8009878:	08009955 	.word	0x08009955
 800987c:	08009955 	.word	0x08009955
 8009880:	08009955 	.word	0x08009955
 8009884:	08009955 	.word	0x08009955
 8009888:	08009955 	.word	0x08009955
 800988c:	08009955 	.word	0x08009955
 8009890:	08009955 	.word	0x08009955
 8009894:	08009907 	.word	0x08009907
 8009898:	08009955 	.word	0x08009955
 800989c:	08009955 	.word	0x08009955
 80098a0:	08009955 	.word	0x08009955
 80098a4:	08009955 	.word	0x08009955
 80098a8:	08009955 	.word	0x08009955
 80098ac:	08009955 	.word	0x08009955
 80098b0:	08009955 	.word	0x08009955
 80098b4:	08009955 	.word	0x08009955
 80098b8:	08009955 	.word	0x08009955
 80098bc:	08009955 	.word	0x08009955
 80098c0:	08009955 	.word	0x08009955
 80098c4:	08009955 	.word	0x08009955
 80098c8:	08009955 	.word	0x08009955
 80098cc:	08009955 	.word	0x08009955
 80098d0:	08009955 	.word	0x08009955
 80098d4:	08009947 	.word	0x08009947
 80098d8:	2b40      	cmp	r3, #64	@ 0x40
 80098da:	d037      	beq.n	800994c <UART_SetConfig+0x6bc>
 80098dc:	e03a      	b.n	8009954 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098de:	f7fe f83d 	bl	800795c <HAL_RCCEx_GetD3PCLK1Freq>
 80098e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098e4:	e03c      	b.n	8009960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe f84c 	bl	8007988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f4:	e034      	b.n	8009960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f6:	f107 0318 	add.w	r3, r7, #24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe f998 	bl	8007c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009904:	e02c      	b.n	8009960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009906:	4b09      	ldr	r3, [pc, #36]	@ (800992c <UART_SetConfig+0x69c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b00      	cmp	r3, #0
 8009910:	d016      	beq.n	8009940 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009912:	4b06      	ldr	r3, [pc, #24]	@ (800992c <UART_SetConfig+0x69c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	08db      	lsrs	r3, r3, #3
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	4a07      	ldr	r2, [pc, #28]	@ (800993c <UART_SetConfig+0x6ac>)
 800991e:	fa22 f303 	lsr.w	r3, r2, r3
 8009922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009924:	e01c      	b.n	8009960 <UART_SetConfig+0x6d0>
 8009926:	bf00      	nop
 8009928:	40011400 	.word	0x40011400
 800992c:	58024400 	.word	0x58024400
 8009930:	40007800 	.word	0x40007800
 8009934:	40007c00 	.word	0x40007c00
 8009938:	58000c00 	.word	0x58000c00
 800993c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009940:	4b9d      	ldr	r3, [pc, #628]	@ (8009bb8 <UART_SetConfig+0x928>)
 8009942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009944:	e00c      	b.n	8009960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009946:	4b9d      	ldr	r3, [pc, #628]	@ (8009bbc <UART_SetConfig+0x92c>)
 8009948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800994a:	e009      	b.n	8009960 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800994c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009952:	e005      	b.n	8009960 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800995e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 81de 	beq.w	8009d24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996c:	4a94      	ldr	r2, [pc, #592]	@ (8009bc0 <UART_SetConfig+0x930>)
 800996e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009972:	461a      	mov	r2, r3
 8009974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009976:	fbb3 f3f2 	udiv	r3, r3, r2
 800997a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	4613      	mov	r3, r2
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	4413      	add	r3, r2
 8009986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009988:	429a      	cmp	r2, r3
 800998a:	d305      	bcc.n	8009998 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009994:	429a      	cmp	r2, r3
 8009996:	d903      	bls.n	80099a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800999e:	e1c1      	b.n	8009d24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a2:	2200      	movs	r2, #0
 80099a4:	60bb      	str	r3, [r7, #8]
 80099a6:	60fa      	str	r2, [r7, #12]
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ac:	4a84      	ldr	r2, [pc, #528]	@ (8009bc0 <UART_SetConfig+0x930>)
 80099ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2200      	movs	r2, #0
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	607a      	str	r2, [r7, #4]
 80099ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099c2:	f7f6 fd45 	bl	8000450 <__aeabi_uldivmod>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4610      	mov	r0, r2
 80099cc:	4619      	mov	r1, r3
 80099ce:	f04f 0200 	mov.w	r2, #0
 80099d2:	f04f 0300 	mov.w	r3, #0
 80099d6:	020b      	lsls	r3, r1, #8
 80099d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099dc:	0202      	lsls	r2, r0, #8
 80099de:	6979      	ldr	r1, [r7, #20]
 80099e0:	6849      	ldr	r1, [r1, #4]
 80099e2:	0849      	lsrs	r1, r1, #1
 80099e4:	2000      	movs	r0, #0
 80099e6:	460c      	mov	r4, r1
 80099e8:	4605      	mov	r5, r0
 80099ea:	eb12 0804 	adds.w	r8, r2, r4
 80099ee:	eb43 0905 	adc.w	r9, r3, r5
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	469a      	mov	sl, r3
 80099fa:	4693      	mov	fp, r2
 80099fc:	4652      	mov	r2, sl
 80099fe:	465b      	mov	r3, fp
 8009a00:	4640      	mov	r0, r8
 8009a02:	4649      	mov	r1, r9
 8009a04:	f7f6 fd24 	bl	8000450 <__aeabi_uldivmod>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a16:	d308      	bcc.n	8009a2a <UART_SetConfig+0x79a>
 8009a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a1e:	d204      	bcs.n	8009a2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a26:	60da      	str	r2, [r3, #12]
 8009a28:	e17c      	b.n	8009d24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a30:	e178      	b.n	8009d24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a3a:	f040 80c5 	bne.w	8009bc8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	dc48      	bgt.n	8009ad8 <UART_SetConfig+0x848>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	db7b      	blt.n	8009b42 <UART_SetConfig+0x8b2>
 8009a4a:	2b20      	cmp	r3, #32
 8009a4c:	d879      	bhi.n	8009b42 <UART_SetConfig+0x8b2>
 8009a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a54 <UART_SetConfig+0x7c4>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009adf 	.word	0x08009adf
 8009a58:	08009ae7 	.word	0x08009ae7
 8009a5c:	08009b43 	.word	0x08009b43
 8009a60:	08009b43 	.word	0x08009b43
 8009a64:	08009aef 	.word	0x08009aef
 8009a68:	08009b43 	.word	0x08009b43
 8009a6c:	08009b43 	.word	0x08009b43
 8009a70:	08009b43 	.word	0x08009b43
 8009a74:	08009aff 	.word	0x08009aff
 8009a78:	08009b43 	.word	0x08009b43
 8009a7c:	08009b43 	.word	0x08009b43
 8009a80:	08009b43 	.word	0x08009b43
 8009a84:	08009b43 	.word	0x08009b43
 8009a88:	08009b43 	.word	0x08009b43
 8009a8c:	08009b43 	.word	0x08009b43
 8009a90:	08009b43 	.word	0x08009b43
 8009a94:	08009b0f 	.word	0x08009b0f
 8009a98:	08009b43 	.word	0x08009b43
 8009a9c:	08009b43 	.word	0x08009b43
 8009aa0:	08009b43 	.word	0x08009b43
 8009aa4:	08009b43 	.word	0x08009b43
 8009aa8:	08009b43 	.word	0x08009b43
 8009aac:	08009b43 	.word	0x08009b43
 8009ab0:	08009b43 	.word	0x08009b43
 8009ab4:	08009b43 	.word	0x08009b43
 8009ab8:	08009b43 	.word	0x08009b43
 8009abc:	08009b43 	.word	0x08009b43
 8009ac0:	08009b43 	.word	0x08009b43
 8009ac4:	08009b43 	.word	0x08009b43
 8009ac8:	08009b43 	.word	0x08009b43
 8009acc:	08009b43 	.word	0x08009b43
 8009ad0:	08009b43 	.word	0x08009b43
 8009ad4:	08009b35 	.word	0x08009b35
 8009ad8:	2b40      	cmp	r3, #64	@ 0x40
 8009ada:	d02e      	beq.n	8009b3a <UART_SetConfig+0x8aa>
 8009adc:	e031      	b.n	8009b42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ade:	f7fc fcc5 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 8009ae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ae4:	e033      	b.n	8009b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ae6:	f7fc fcd7 	bl	8006498 <HAL_RCC_GetPCLK2Freq>
 8009aea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009aec:	e02f      	b.n	8009b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fd ff48 	bl	8007988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afc:	e027      	b.n	8009b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009afe:	f107 0318 	add.w	r3, r7, #24
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fe f894 	bl	8007c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b0c:	e01f      	b.n	8009b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8009bc4 <UART_SetConfig+0x934>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d009      	beq.n	8009b2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8009bc4 <UART_SetConfig+0x934>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	08db      	lsrs	r3, r3, #3
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	4a24      	ldr	r2, [pc, #144]	@ (8009bb8 <UART_SetConfig+0x928>)
 8009b26:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b2c:	e00f      	b.n	8009b4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b2e:	4b22      	ldr	r3, [pc, #136]	@ (8009bb8 <UART_SetConfig+0x928>)
 8009b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b32:	e00c      	b.n	8009b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b34:	4b21      	ldr	r3, [pc, #132]	@ (8009bbc <UART_SetConfig+0x92c>)
 8009b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b38:	e009      	b.n	8009b4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b40:	e005      	b.n	8009b4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 80e7 	beq.w	8009d24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5a:	4a19      	ldr	r2, [pc, #100]	@ (8009bc0 <UART_SetConfig+0x930>)
 8009b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b68:	005a      	lsls	r2, r3, #1
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	085b      	lsrs	r3, r3, #1
 8009b70:	441a      	add	r2, r3
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7e:	2b0f      	cmp	r3, #15
 8009b80:	d916      	bls.n	8009bb0 <UART_SetConfig+0x920>
 8009b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b88:	d212      	bcs.n	8009bb0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f023 030f 	bic.w	r3, r3, #15
 8009b92:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	085b      	lsrs	r3, r3, #1
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009bac:	60da      	str	r2, [r3, #12]
 8009bae:	e0b9      	b.n	8009d24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bb6:	e0b5      	b.n	8009d24 <UART_SetConfig+0xa94>
 8009bb8:	03d09000 	.word	0x03d09000
 8009bbc:	003d0900 	.word	0x003d0900
 8009bc0:	0801e4ec 	.word	0x0801e4ec
 8009bc4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bc8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	dc49      	bgt.n	8009c64 <UART_SetConfig+0x9d4>
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db7c      	blt.n	8009cce <UART_SetConfig+0xa3e>
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	d87a      	bhi.n	8009cce <UART_SetConfig+0xa3e>
 8009bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8009be0 <UART_SetConfig+0x950>)
 8009bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bde:	bf00      	nop
 8009be0:	08009c6b 	.word	0x08009c6b
 8009be4:	08009c73 	.word	0x08009c73
 8009be8:	08009ccf 	.word	0x08009ccf
 8009bec:	08009ccf 	.word	0x08009ccf
 8009bf0:	08009c7b 	.word	0x08009c7b
 8009bf4:	08009ccf 	.word	0x08009ccf
 8009bf8:	08009ccf 	.word	0x08009ccf
 8009bfc:	08009ccf 	.word	0x08009ccf
 8009c00:	08009c8b 	.word	0x08009c8b
 8009c04:	08009ccf 	.word	0x08009ccf
 8009c08:	08009ccf 	.word	0x08009ccf
 8009c0c:	08009ccf 	.word	0x08009ccf
 8009c10:	08009ccf 	.word	0x08009ccf
 8009c14:	08009ccf 	.word	0x08009ccf
 8009c18:	08009ccf 	.word	0x08009ccf
 8009c1c:	08009ccf 	.word	0x08009ccf
 8009c20:	08009c9b 	.word	0x08009c9b
 8009c24:	08009ccf 	.word	0x08009ccf
 8009c28:	08009ccf 	.word	0x08009ccf
 8009c2c:	08009ccf 	.word	0x08009ccf
 8009c30:	08009ccf 	.word	0x08009ccf
 8009c34:	08009ccf 	.word	0x08009ccf
 8009c38:	08009ccf 	.word	0x08009ccf
 8009c3c:	08009ccf 	.word	0x08009ccf
 8009c40:	08009ccf 	.word	0x08009ccf
 8009c44:	08009ccf 	.word	0x08009ccf
 8009c48:	08009ccf 	.word	0x08009ccf
 8009c4c:	08009ccf 	.word	0x08009ccf
 8009c50:	08009ccf 	.word	0x08009ccf
 8009c54:	08009ccf 	.word	0x08009ccf
 8009c58:	08009ccf 	.word	0x08009ccf
 8009c5c:	08009ccf 	.word	0x08009ccf
 8009c60:	08009cc1 	.word	0x08009cc1
 8009c64:	2b40      	cmp	r3, #64	@ 0x40
 8009c66:	d02e      	beq.n	8009cc6 <UART_SetConfig+0xa36>
 8009c68:	e031      	b.n	8009cce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c6a:	f7fc fbff 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 8009c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c70:	e033      	b.n	8009cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c72:	f7fc fc11 	bl	8006498 <HAL_RCC_GetPCLK2Freq>
 8009c76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c78:	e02f      	b.n	8009cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fd fe82 	bl	8007988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c88:	e027      	b.n	8009cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c8a:	f107 0318 	add.w	r3, r7, #24
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fd ffce 	bl	8007c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c98:	e01f      	b.n	8009cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8009d50 <UART_SetConfig+0xac0>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0320 	and.w	r3, r3, #32
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d009      	beq.n	8009cba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8009d50 <UART_SetConfig+0xac0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	08db      	lsrs	r3, r3, #3
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	4a28      	ldr	r2, [pc, #160]	@ (8009d54 <UART_SetConfig+0xac4>)
 8009cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cb8:	e00f      	b.n	8009cda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009cba:	4b26      	ldr	r3, [pc, #152]	@ (8009d54 <UART_SetConfig+0xac4>)
 8009cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cbe:	e00c      	b.n	8009cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cc0:	4b25      	ldr	r3, [pc, #148]	@ (8009d58 <UART_SetConfig+0xac8>)
 8009cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc4:	e009      	b.n	8009cda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ccc:	e005      	b.n	8009cda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8009cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d021      	beq.n	8009d24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d5c <UART_SetConfig+0xacc>)
 8009ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cea:	461a      	mov	r2, r3
 8009cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cee:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	085b      	lsrs	r3, r3, #1
 8009cf8:	441a      	add	r2, r3
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d06:	2b0f      	cmp	r3, #15
 8009d08:	d909      	bls.n	8009d1e <UART_SetConfig+0xa8e>
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d10:	d205      	bcs.n	8009d1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60da      	str	r2, [r3, #12]
 8009d1c:	e002      	b.n	8009d24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	2200      	movs	r2, #0
 8009d38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d40:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3748      	adds	r7, #72	@ 0x48
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d4e:	bf00      	nop
 8009d50:	58024400 	.word	0x58024400
 8009d54:	03d09000 	.word	0x03d09000
 8009d58:	003d0900 	.word	0x003d0900
 8009d5c:	0801e4ec 	.word	0x0801e4ec

08009d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6c:	f003 0308 	and.w	r3, r3, #8
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00a      	beq.n	8009dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd2:	f003 0304 	and.w	r3, r3, #4
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df4:	f003 0310 	and.w	r3, r3, #16
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e16:	f003 0320 	and.w	r3, r3, #32
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01a      	beq.n	8009e76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e5e:	d10a      	bne.n	8009e76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00a      	beq.n	8009e98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	430a      	orrs	r2, r1
 8009e96:	605a      	str	r2, [r3, #4]
  }
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b098      	sub	sp, #96	@ 0x60
 8009ea8:	af02      	add	r7, sp, #8
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009eb4:	f7f8 f9b8 	bl	8002228 <HAL_GetTick>
 8009eb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0308 	and.w	r3, r3, #8
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	d12f      	bne.n	8009f28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ec8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f88e 	bl	8009ff8 <UART_WaitOnFlagUntilTimeout>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d022      	beq.n	8009f28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ef6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e6      	bne.n	8009ee2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e063      	b.n	8009ff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d149      	bne.n	8009fca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f857 	bl	8009ff8 <UART_WaitOnFlagUntilTimeout>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d03c      	beq.n	8009fca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e6      	bne.n	8009f50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f023 0301 	bic.w	r3, r3, #1
 8009f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fa2:	61fa      	str	r2, [r7, #28]
 8009fa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	69b9      	ldr	r1, [r7, #24]
 8009fa8:	69fa      	ldr	r2, [r7, #28]
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	617b      	str	r3, [r7, #20]
   return(result);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e5      	bne.n	8009f82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e012      	b.n	8009ff0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3758      	adds	r7, #88	@ 0x58
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	4613      	mov	r3, r2
 800a006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a008:	e04f      	b.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a010:	d04b      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a012:	f7f8 f909 	bl	8002228 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d302      	bcc.n	800a028 <UART_WaitOnFlagUntilTimeout+0x30>
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e04e      	b.n	800a0ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0304 	and.w	r3, r3, #4
 800a036:	2b00      	cmp	r3, #0
 800a038:	d037      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b80      	cmp	r3, #128	@ 0x80
 800a03e:	d034      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b40      	cmp	r3, #64	@ 0x40
 800a044:	d031      	beq.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	f003 0308 	and.w	r3, r3, #8
 800a050:	2b08      	cmp	r3, #8
 800a052:	d110      	bne.n	800a076 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2208      	movs	r2, #8
 800a05a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f921 	bl	800a2a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2208      	movs	r2, #8
 800a066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e029      	b.n	800a0ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a084:	d111      	bne.n	800a0aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a08e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f907 	bl	800a2a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2220      	movs	r2, #32
 800a09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e00f      	b.n	800a0ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	bf0c      	ite	eq
 800a0ba:	2301      	moveq	r3, #1
 800a0bc:	2300      	movne	r3, #0
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d0a0      	beq.n	800a00a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b096      	sub	sp, #88	@ 0x58
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2222      	movs	r2, #34	@ 0x22
 800a0fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a106:	2b00      	cmp	r3, #0
 800a108:	d02d      	beq.n	800a166 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a110:	4a40      	ldr	r2, [pc, #256]	@ (800a214 <UART_Start_Receive_DMA+0x140>)
 800a112:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a11a:	4a3f      	ldr	r2, [pc, #252]	@ (800a218 <UART_Start_Receive_DMA+0x144>)
 800a11c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a124:	4a3d      	ldr	r2, [pc, #244]	@ (800a21c <UART_Start_Receive_DMA+0x148>)
 800a126:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12e:	2200      	movs	r2, #0
 800a130:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3324      	adds	r3, #36	@ 0x24
 800a13e:	4619      	mov	r1, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a144:	461a      	mov	r2, r3
 800a146:	88fb      	ldrh	r3, [r7, #6]
 800a148:	f7f8 fcc2 	bl	8002ad0 <HAL_DMA_Start_IT>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2210      	movs	r2, #16
 800a156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e051      	b.n	800a20a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d018      	beq.n	800a1a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a176:	e853 3f00 	ldrex	r3, [r3]
 800a17a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a182:	657b      	str	r3, [r7, #84]	@ 0x54
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a18c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a18e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a190:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a194:	e841 2300 	strex	r3, r2, [r1]
 800a198:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a19a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e6      	bne.n	800a16e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3308      	adds	r3, #8
 800a1be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1c0:	637a      	str	r2, [r7, #52]	@ 0x34
 800a1c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1c8:	e841 2300 	strex	r3, r2, [r1]
 800a1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1e5      	bne.n	800a1a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	e853 3f00 	ldrex	r3, [r3]
 800a1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1f4:	623a      	str	r2, [r7, #32]
 800a1f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	69f9      	ldr	r1, [r7, #28]
 800a1fa:	6a3a      	ldr	r2, [r7, #32]
 800a1fc:	e841 2300 	strex	r3, r2, [r1]
 800a200:	61bb      	str	r3, [r7, #24]
   return(result);
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e5      	bne.n	800a1d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3758      	adds	r7, #88	@ 0x58
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	0800a423 	.word	0x0800a423
 800a218:	0800a54b 	.word	0x0800a54b
 800a21c:	0800a589 	.word	0x0800a589

0800a220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a220:	b480      	push	{r7}
 800a222:	b08f      	sub	sp, #60	@ 0x3c
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	61fb      	str	r3, [r7, #28]
   return(result);
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a246:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a248:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a24c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e6      	bne.n	800a228 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	60bb      	str	r3, [r7, #8]
   return(result);
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a270:	633b      	str	r3, [r7, #48]	@ 0x30
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a27a:	61ba      	str	r2, [r7, #24]
 800a27c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	6979      	ldr	r1, [r7, #20]
 800a280:	69ba      	ldr	r2, [r7, #24]
 800a282:	e841 2300 	strex	r3, r2, [r1]
 800a286:	613b      	str	r3, [r7, #16]
   return(result);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e5      	bne.n	800a25a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a296:	bf00      	nop
 800a298:	373c      	adds	r7, #60	@ 0x3c
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
	...

0800a2a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b095      	sub	sp, #84	@ 0x54
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2d2:	e841 2300 	strex	r3, r2, [r1]
 800a2d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1e6      	bne.n	800a2ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	e853 3f00 	ldrex	r3, [r3]
 800a2ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ee:	69fa      	ldr	r2, [r7, #28]
 800a2f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a36c <UART_EndRxTransfer+0xc8>)
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a300:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a302:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1e5      	bne.n	800a2de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a316:	2b01      	cmp	r3, #1
 800a318:	d118      	bne.n	800a34c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	60bb      	str	r3, [r7, #8]
   return(result);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f023 0310 	bic.w	r3, r3, #16
 800a32e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	461a      	mov	r2, r3
 800a336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a338:	61bb      	str	r3, [r7, #24]
 800a33a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33c:	6979      	ldr	r1, [r7, #20]
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	e841 2300 	strex	r3, r2, [r1]
 800a344:	613b      	str	r3, [r7, #16]
   return(result);
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e6      	bne.n	800a31a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2220      	movs	r2, #32
 800a350:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a360:	bf00      	nop
 800a362:	3754      	adds	r7, #84	@ 0x54
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	effffffe 	.word	0xeffffffe

0800a370 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b090      	sub	sp, #64	@ 0x40
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a386:	d037      	beq.n	800a3f8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3308      	adds	r3, #8
 800a396:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39a:	e853 3f00 	ldrex	r3, [r3]
 800a39e:	623b      	str	r3, [r7, #32]
   return(result);
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800a3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b8:	e841 2300 	strex	r3, r2, [r1]
 800a3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1e5      	bne.n	800a390 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e2:	61fb      	str	r3, [r7, #28]
 800a3e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e6:	69b9      	ldr	r1, [r7, #24]
 800a3e8:	69fa      	ldr	r2, [r7, #28]
 800a3ea:	e841 2300 	strex	r3, r2, [r1]
 800a3ee:	617b      	str	r3, [r7, #20]
   return(result);
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e6      	bne.n	800a3c4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3f6:	e002      	b.n	800a3fe <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a3f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3fa:	f7fe ff0b 	bl	8009214 <HAL_UART_TxCpltCallback>
}
 800a3fe:	bf00      	nop
 800a400:	3740      	adds	r7, #64	@ 0x40
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a412:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7fe ff07 	bl	8009228 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b09c      	sub	sp, #112	@ 0x70
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a438:	d071      	beq.n	800a51e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a43a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a43c:	2200      	movs	r2, #0
 800a43e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a44a:	e853 3f00 	ldrex	r3, [r3]
 800a44e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a452:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a456:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a460:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a462:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a464:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a466:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a468:	e841 2300 	strex	r3, r2, [r1]
 800a46c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a46e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e6      	bne.n	800a442 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47e:	e853 3f00 	ldrex	r3, [r3]
 800a482:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a486:	f023 0301 	bic.w	r3, r3, #1
 800a48a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a48c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3308      	adds	r3, #8
 800a492:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a494:	647a      	str	r2, [r7, #68]	@ 0x44
 800a496:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a49a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a49c:	e841 2300 	strex	r3, r2, [r1]
 800a4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e5      	bne.n	800a474 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3308      	adds	r3, #8
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	623b      	str	r3, [r7, #32]
   return(result);
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4be:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4c8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e5      	bne.n	800a4a8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d118      	bne.n	800a51e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	e853 3f00 	ldrex	r3, [r3]
 800a4f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f023 0310 	bic.w	r3, r3, #16
 800a500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a50a:	61fb      	str	r3, [r7, #28]
 800a50c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50e:	69b9      	ldr	r1, [r7, #24]
 800a510:	69fa      	ldr	r2, [r7, #28]
 800a512:	e841 2300 	strex	r3, r2, [r1]
 800a516:	617b      	str	r3, [r7, #20]
   return(result);
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1e6      	bne.n	800a4ec <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a51e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a520:	2200      	movs	r2, #0
 800a522:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d107      	bne.n	800a53c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a52e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a532:	4619      	mov	r1, r3
 800a534:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a536:	f7fe fe9f 	bl	8009278 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a53a:	e002      	b.n	800a542 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a53c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a53e:	f7fe fe7d 	bl	800923c <HAL_UART_RxCpltCallback>
}
 800a542:	bf00      	nop
 800a544:	3770      	adds	r7, #112	@ 0x70
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a556:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2201      	movs	r2, #1
 800a55c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a562:	2b01      	cmp	r3, #1
 800a564:	d109      	bne.n	800a57a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a56c:	085b      	lsrs	r3, r3, #1
 800a56e:	b29b      	uxth	r3, r3
 800a570:	4619      	mov	r1, r3
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7fe fe80 	bl	8009278 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a578:	e002      	b.n	800a580 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f7fe fe68 	bl	8009250 <HAL_UART_RxHalfCpltCallback>
}
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a594:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a59c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b0:	2b80      	cmp	r3, #128	@ 0x80
 800a5b2:	d109      	bne.n	800a5c8 <UART_DMAError+0x40>
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2b21      	cmp	r3, #33	@ 0x21
 800a5b8:	d106      	bne.n	800a5c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a5c2:	6978      	ldr	r0, [r7, #20]
 800a5c4:	f7ff fe2c 	bl	800a220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d2:	2b40      	cmp	r3, #64	@ 0x40
 800a5d4:	d109      	bne.n	800a5ea <UART_DMAError+0x62>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b22      	cmp	r3, #34	@ 0x22
 800a5da:	d106      	bne.n	800a5ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a5e4:	6978      	ldr	r0, [r7, #20]
 800a5e6:	f7ff fe5d 	bl	800a2a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5f0:	f043 0210 	orr.w	r2, r3, #16
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5fa:	6978      	ldr	r0, [r7, #20]
 800a5fc:	f7fe fe32 	bl	8009264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a600:	bf00      	nop
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7fe fe1c 	bl	8009264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a62c:	bf00      	nop
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	e853 3f00 	ldrex	r3, [r3]
 800a648:	60bb      	str	r3, [r7, #8]
   return(result);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	461a      	mov	r2, r3
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	61bb      	str	r3, [r7, #24]
 800a65c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65e:	6979      	ldr	r1, [r7, #20]
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	613b      	str	r3, [r7, #16]
   return(result);
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1e6      	bne.n	800a63c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7fe fdc9 	bl	8009214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a682:	bf00      	nop
 800a684:	3720      	adds	r7, #32
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b083      	sub	sp, #12
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6ba:	bf00      	nop
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d101      	bne.n	800a6dc <HAL_UARTEx_DisableFifoMode+0x16>
 800a6d8:	2302      	movs	r3, #2
 800a6da:	e027      	b.n	800a72c <HAL_UARTEx_DisableFifoMode+0x66>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2224      	movs	r2, #36	@ 0x24
 800a6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f022 0201 	bic.w	r2, r2, #1
 800a702:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a70a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d101      	bne.n	800a750 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a74c:	2302      	movs	r3, #2
 800a74e:	e02d      	b.n	800a7ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2224      	movs	r2, #36	@ 0x24
 800a75c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f022 0201 	bic.w	r2, r2, #1
 800a776:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	430a      	orrs	r2, r1
 800a78a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f84f 	bl	800a830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d101      	bne.n	800a7cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e02d      	b.n	800a828 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2224      	movs	r2, #36	@ 0x24
 800a7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f022 0201 	bic.w	r2, r2, #1
 800a7f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	430a      	orrs	r2, r1
 800a806:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f811 	bl	800a830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d108      	bne.n	800a852 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a850:	e031      	b.n	800a8b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a852:	2310      	movs	r3, #16
 800a854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a856:	2310      	movs	r3, #16
 800a858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	0e5b      	lsrs	r3, r3, #25
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f003 0307 	and.w	r3, r3, #7
 800a868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	0f5b      	lsrs	r3, r3, #29
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0307 	and.w	r3, r3, #7
 800a878:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	7b3a      	ldrb	r2, [r7, #12]
 800a87e:	4911      	ldr	r1, [pc, #68]	@ (800a8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800a880:	5c8a      	ldrb	r2, [r1, r2]
 800a882:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a886:	7b3a      	ldrb	r2, [r7, #12]
 800a888:	490f      	ldr	r1, [pc, #60]	@ (800a8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800a88a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a88c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a890:	b29a      	uxth	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	7b7a      	ldrb	r2, [r7, #13]
 800a89c:	4909      	ldr	r1, [pc, #36]	@ (800a8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800a89e:	5c8a      	ldrb	r2, [r1, r2]
 800a8a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8a4:	7b7a      	ldrb	r2, [r7, #13]
 800a8a6:	4908      	ldr	r1, [pc, #32]	@ (800a8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800a8a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8b6:	bf00      	nop
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	0801e504 	.word	0x0801e504
 800a8c8:	0801e50c 	.word	0x0801e50c

0800a8cc <__NVIC_SetPriority>:
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	6039      	str	r1, [r7, #0]
 800a8d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a8d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	db0a      	blt.n	800a8f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	b2da      	uxtb	r2, r3
 800a8e4:	490c      	ldr	r1, [pc, #48]	@ (800a918 <__NVIC_SetPriority+0x4c>)
 800a8e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8ea:	0112      	lsls	r2, r2, #4
 800a8ec:	b2d2      	uxtb	r2, r2
 800a8ee:	440b      	add	r3, r1
 800a8f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a8f4:	e00a      	b.n	800a90c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	4908      	ldr	r1, [pc, #32]	@ (800a91c <__NVIC_SetPriority+0x50>)
 800a8fc:	88fb      	ldrh	r3, [r7, #6]
 800a8fe:	f003 030f 	and.w	r3, r3, #15
 800a902:	3b04      	subs	r3, #4
 800a904:	0112      	lsls	r2, r2, #4
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	440b      	add	r3, r1
 800a90a:	761a      	strb	r2, [r3, #24]
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	e000e100 	.word	0xe000e100
 800a91c:	e000ed00 	.word	0xe000ed00

0800a920 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a924:	4b05      	ldr	r3, [pc, #20]	@ (800a93c <SysTick_Handler+0x1c>)
 800a926:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a928:	f001 fe7c 	bl	800c624 <xTaskGetSchedulerState>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d001      	beq.n	800a936 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a932:	f002 fc71 	bl	800d218 <xPortSysTickHandler>
  }
}
 800a936:	bf00      	nop
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	e000e010 	.word	0xe000e010

0800a940 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a944:	2100      	movs	r1, #0
 800a946:	f06f 0004 	mvn.w	r0, #4
 800a94a:	f7ff ffbf 	bl	800a8cc <__NVIC_SetPriority>
#endif
}
 800a94e:	bf00      	nop
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a95a:	f3ef 8305 	mrs	r3, IPSR
 800a95e:	603b      	str	r3, [r7, #0]
  return(result);
 800a960:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a962:	2b00      	cmp	r3, #0
 800a964:	d003      	beq.n	800a96e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a966:	f06f 0305 	mvn.w	r3, #5
 800a96a:	607b      	str	r3, [r7, #4]
 800a96c:	e00c      	b.n	800a988 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a96e:	4b0a      	ldr	r3, [pc, #40]	@ (800a998 <osKernelInitialize+0x44>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d105      	bne.n	800a982 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a976:	4b08      	ldr	r3, [pc, #32]	@ (800a998 <osKernelInitialize+0x44>)
 800a978:	2201      	movs	r2, #1
 800a97a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	607b      	str	r3, [r7, #4]
 800a980:	e002      	b.n	800a988 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a986:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a988:	687b      	ldr	r3, [r7, #4]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	24032b64 	.word	0x24032b64

0800a99c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9a2:	f3ef 8305 	mrs	r3, IPSR
 800a9a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a9a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a9ae:	f06f 0305 	mvn.w	r3, #5
 800a9b2:	607b      	str	r3, [r7, #4]
 800a9b4:	e010      	b.n	800a9d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a9e4 <osKernelStart+0x48>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d109      	bne.n	800a9d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a9be:	f7ff ffbf 	bl	800a940 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a9c2:	4b08      	ldr	r3, [pc, #32]	@ (800a9e4 <osKernelStart+0x48>)
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a9c8:	f001 f9a0 	bl	800bd0c <vTaskStartScheduler>
      stat = osOK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	607b      	str	r3, [r7, #4]
 800a9d0:	e002      	b.n	800a9d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a9d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9d8:	687b      	ldr	r3, [r7, #4]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	24032b64 	.word	0x24032b64

0800a9e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08e      	sub	sp, #56	@ 0x38
 800a9ec:	af04      	add	r7, sp, #16
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9f8:	f3ef 8305 	mrs	r3, IPSR
 800a9fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a9fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d17e      	bne.n	800ab02 <osThreadNew+0x11a>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d07b      	beq.n	800ab02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aa0a:	2380      	movs	r3, #128	@ 0x80
 800aa0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aa0e:	2318      	movs	r3, #24
 800aa10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aa16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d045      	beq.n	800aaae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <osThreadNew+0x48>
        name = attr->name;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d008      	beq.n	800aa56 <osThreadNew+0x6e>
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	2b38      	cmp	r3, #56	@ 0x38
 800aa48:	d805      	bhi.n	800aa56 <osThreadNew+0x6e>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <osThreadNew+0x72>
        return (NULL);
 800aa56:	2300      	movs	r3, #0
 800aa58:	e054      	b.n	800ab04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d003      	beq.n	800aa6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	089b      	lsrs	r3, r3, #2
 800aa68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00e      	beq.n	800aa90 <osThreadNew+0xa8>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	2ba7      	cmp	r3, #167	@ 0xa7
 800aa78:	d90a      	bls.n	800aa90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d006      	beq.n	800aa90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <osThreadNew+0xa8>
        mem = 1;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	61bb      	str	r3, [r7, #24]
 800aa8e:	e010      	b.n	800aab2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10c      	bne.n	800aab2 <osThreadNew+0xca>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d108      	bne.n	800aab2 <osThreadNew+0xca>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d104      	bne.n	800aab2 <osThreadNew+0xca>
          mem = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	61bb      	str	r3, [r7, #24]
 800aaac:	e001      	b.n	800aab2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d110      	bne.n	800aada <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aac0:	9202      	str	r2, [sp, #8]
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	6a3a      	ldr	r2, [r7, #32]
 800aacc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f000 ff28 	bl	800b924 <xTaskCreateStatic>
 800aad4:	4603      	mov	r3, r0
 800aad6:	613b      	str	r3, [r7, #16]
 800aad8:	e013      	b.n	800ab02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d110      	bne.n	800ab02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aae0:	6a3b      	ldr	r3, [r7, #32]
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	f107 0310 	add.w	r3, r7, #16
 800aae8:	9301      	str	r3, [sp, #4]
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 ff76 	bl	800b9e4 <xTaskCreate>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d001      	beq.n	800ab02 <osThreadNew+0x11a>
            hTask = NULL;
 800aafe:	2300      	movs	r3, #0
 800ab00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab02:	693b      	ldr	r3, [r7, #16]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3728      	adds	r7, #40	@ 0x28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab14:	f3ef 8305 	mrs	r3, IPSR
 800ab18:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <osDelay+0x1c>
    stat = osErrorISR;
 800ab20:	f06f 0305 	mvn.w	r3, #5
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	e007      	b.n	800ab38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d002      	beq.n	800ab38 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f001 f8b4 	bl	800bca0 <vTaskDelay>
    }
  }

  return (stat);
 800ab38:	68fb      	ldr	r3, [r7, #12]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b088      	sub	sp, #32
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab4e:	f3ef 8305 	mrs	r3, IPSR
 800ab52:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab54:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d174      	bne.n	800ac44 <osMutexNew+0x102>
    if (attr != NULL) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	e001      	b.n	800ab6c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d002      	beq.n	800ab7c <osMutexNew+0x3a>
      rmtx = 1U;
 800ab76:	2301      	movs	r3, #1
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	e001      	b.n	800ab80 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	f003 0308 	and.w	r3, r3, #8
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d15c      	bne.n	800ac44 <osMutexNew+0x102>
      mem = -1;
 800ab8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab8e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d015      	beq.n	800abc2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d006      	beq.n	800abac <osMutexNew+0x6a>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	2b4f      	cmp	r3, #79	@ 0x4f
 800aba4:	d902      	bls.n	800abac <osMutexNew+0x6a>
          mem = 1;
 800aba6:	2301      	movs	r3, #1
 800aba8:	613b      	str	r3, [r7, #16]
 800abaa:	e00c      	b.n	800abc6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d108      	bne.n	800abc6 <osMutexNew+0x84>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d104      	bne.n	800abc6 <osMutexNew+0x84>
            mem = 0;
 800abbc:	2300      	movs	r3, #0
 800abbe:	613b      	str	r3, [r7, #16]
 800abc0:	e001      	b.n	800abc6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d112      	bne.n	800abf2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d007      	beq.n	800abe2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	4619      	mov	r1, r3
 800abd8:	2004      	movs	r0, #4
 800abda:	f000 fa98 	bl	800b10e <xQueueCreateMutexStatic>
 800abde:	61f8      	str	r0, [r7, #28]
 800abe0:	e016      	b.n	800ac10 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	4619      	mov	r1, r3
 800abe8:	2001      	movs	r0, #1
 800abea:	f000 fa90 	bl	800b10e <xQueueCreateMutexStatic>
 800abee:	61f8      	str	r0, [r7, #28]
 800abf0:	e00e      	b.n	800ac10 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10b      	bne.n	800ac10 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800abfe:	2004      	movs	r0, #4
 800ac00:	f000 fa6d 	bl	800b0de <xQueueCreateMutex>
 800ac04:	61f8      	str	r0, [r7, #28]
 800ac06:	e003      	b.n	800ac10 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ac08:	2001      	movs	r0, #1
 800ac0a:	f000 fa68 	bl	800b0de <xQueueCreateMutex>
 800ac0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00c      	beq.n	800ac30 <osMutexNew+0xee>
        if (attr != NULL) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <osMutexNew+0xe2>
          name = attr->name;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e001      	b.n	800ac28 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ac28:	68f9      	ldr	r1, [r7, #12]
 800ac2a:	69f8      	ldr	r0, [r7, #28]
 800ac2c:	f000 fe1c 	bl	800b868 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d006      	beq.n	800ac44 <osMutexNew+0x102>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	f043 0301 	orr.w	r3, r3, #1
 800ac42:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ac44:	69fb      	ldr	r3, [r7, #28]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3720      	adds	r7, #32
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4a07      	ldr	r2, [pc, #28]	@ (800ac7c <vApplicationGetIdleTaskMemory+0x2c>)
 800ac60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	4a06      	ldr	r2, [pc, #24]	@ (800ac80 <vApplicationGetIdleTaskMemory+0x30>)
 800ac66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2280      	movs	r2, #128	@ 0x80
 800ac6c:	601a      	str	r2, [r3, #0]
}
 800ac6e:	bf00      	nop
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	24032b68 	.word	0x24032b68
 800ac80:	24032c10 	.word	0x24032c10

0800ac84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4a07      	ldr	r2, [pc, #28]	@ (800acb0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ac94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	4a06      	ldr	r2, [pc, #24]	@ (800acb4 <vApplicationGetTimerTaskMemory+0x30>)
 800ac9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aca2:	601a      	str	r2, [r3, #0]
}
 800aca4:	bf00      	nop
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	24032e10 	.word	0x24032e10
 800acb4:	24032eb8 	.word	0x24032eb8

0800acb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f103 0208 	add.w	r2, r3, #8
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f103 0208 	add.w	r2, r3, #8
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f103 0208 	add.w	r2, r3, #8
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad06:	bf00      	nop
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	689a      	ldr	r2, [r3, #8]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	683a      	ldr	r2, [r7, #0]
 800ad36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	601a      	str	r2, [r3, #0]
}
 800ad4e:	bf00      	nop
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad70:	d103      	bne.n	800ad7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	e00c      	b.n	800ad94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3308      	adds	r3, #8
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	e002      	b.n	800ad88 <vListInsert+0x2e>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d2f6      	bcs.n	800ad82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	601a      	str	r2, [r3, #0]
}
 800adc0:	bf00      	nop
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	6892      	ldr	r2, [r2, #8]
 800ade2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	6852      	ldr	r2, [r2, #4]
 800adec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d103      	bne.n	800ae00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689a      	ldr	r2, [r3, #8]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	1e5a      	subs	r2, r3, #1
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10b      	bne.n	800ae4c <xQueueGenericReset+0x2c>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	60bb      	str	r3, [r7, #8]
}
 800ae46:	bf00      	nop
 800ae48:	bf00      	nop
 800ae4a:	e7fd      	b.n	800ae48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ae4c:	f002 f954 	bl	800d0f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae58:	68f9      	ldr	r1, [r7, #12]
 800ae5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae5c:	fb01 f303 	mul.w	r3, r1, r3
 800ae60:	441a      	add	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae82:	fb01 f303 	mul.w	r3, r1, r3
 800ae86:	441a      	add	r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	22ff      	movs	r2, #255	@ 0xff
 800ae90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	22ff      	movs	r2, #255	@ 0xff
 800ae98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d114      	bne.n	800aecc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d01a      	beq.n	800aee0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3310      	adds	r3, #16
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 f9ca 	bl	800c248 <xTaskRemoveFromEventList>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d012      	beq.n	800aee0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aeba:	4b0d      	ldr	r3, [pc, #52]	@ (800aef0 <xQueueGenericReset+0xd0>)
 800aebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	e009      	b.n	800aee0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3310      	adds	r3, #16
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff fef1 	bl	800acb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3324      	adds	r3, #36	@ 0x24
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff feec 	bl	800acb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aee0:	f002 f93c 	bl	800d15c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aee4:	2301      	movs	r3, #1
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	e000ed04 	.word	0xe000ed04

0800aef4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08e      	sub	sp, #56	@ 0x38
 800aef8:	af02      	add	r7, sp, #8
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10b      	bne.n	800af20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af1a:	bf00      	nop
 800af1c:	bf00      	nop
 800af1e:	e7fd      	b.n	800af1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10b      	bne.n	800af3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800af26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af38:	bf00      	nop
 800af3a:	bf00      	nop
 800af3c:	e7fd      	b.n	800af3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <xQueueGenericCreateStatic+0x56>
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <xQueueGenericCreateStatic+0x5a>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <xQueueGenericCreateStatic+0x5c>
 800af4e:	2300      	movs	r3, #0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10b      	bne.n	800af6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	623b      	str	r3, [r7, #32]
}
 800af66:	bf00      	nop
 800af68:	bf00      	nop
 800af6a:	e7fd      	b.n	800af68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d102      	bne.n	800af78 <xQueueGenericCreateStatic+0x84>
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <xQueueGenericCreateStatic+0x88>
 800af78:	2301      	movs	r3, #1
 800af7a:	e000      	b.n	800af7e <xQueueGenericCreateStatic+0x8a>
 800af7c:	2300      	movs	r3, #0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10b      	bne.n	800af9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	61fb      	str	r3, [r7, #28]
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop
 800af98:	e7fd      	b.n	800af96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800af9a:	2350      	movs	r3, #80	@ 0x50
 800af9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2b50      	cmp	r3, #80	@ 0x50
 800afa2:	d00b      	beq.n	800afbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	61bb      	str	r3, [r7, #24]
}
 800afb6:	bf00      	nop
 800afb8:	bf00      	nop
 800afba:	e7fd      	b.n	800afb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800afbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800afc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00d      	beq.n	800afe4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800afc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800afd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	4613      	mov	r3, r2
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	68b9      	ldr	r1, [r7, #8]
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f000 f840 	bl	800b064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800afe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3730      	adds	r7, #48	@ 0x30
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b08a      	sub	sp, #40	@ 0x28
 800aff2:	af02      	add	r7, sp, #8
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	4613      	mov	r3, r2
 800affa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10b      	bne.n	800b01a <xQueueGenericCreate+0x2c>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	613b      	str	r3, [r7, #16]
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop
 800b018:	e7fd      	b.n	800b016 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	fb02 f303 	mul.w	r3, r2, r3
 800b022:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	3350      	adds	r3, #80	@ 0x50
 800b028:	4618      	mov	r0, r3
 800b02a:	f002 f987 	bl	800d33c <pvPortMalloc>
 800b02e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d011      	beq.n	800b05a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	3350      	adds	r3, #80	@ 0x50
 800b03e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b048:	79fa      	ldrb	r2, [r7, #7]
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	4613      	mov	r3, r2
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	68b9      	ldr	r1, [r7, #8]
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 f805 	bl	800b064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b05a:	69bb      	ldr	r3, [r7, #24]
	}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3720      	adds	r7, #32
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d103      	bne.n	800b080 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	e002      	b.n	800b086 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b092:	2101      	movs	r1, #1
 800b094:	69b8      	ldr	r0, [r7, #24]
 800b096:	f7ff fec3 	bl	800ae20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	78fa      	ldrb	r2, [r7, #3]
 800b09e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0a2:	bf00      	nop
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00e      	beq.n	800b0d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f837 	bl	800b144 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b086      	sub	sp, #24
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b0f0:	79fb      	ldrb	r3, [r7, #7]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	6939      	ldr	r1, [r7, #16]
 800b0f6:	6978      	ldr	r0, [r7, #20]
 800b0f8:	f7ff ff79 	bl	800afee <xQueueGenericCreate>
 800b0fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff ffd3 	bl	800b0aa <prvInitialiseMutex>

		return xNewQueue;
 800b104:	68fb      	ldr	r3, [r7, #12]
	}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b088      	sub	sp, #32
 800b112:	af02      	add	r7, sp, #8
 800b114:	4603      	mov	r3, r0
 800b116:	6039      	str	r1, [r7, #0]
 800b118:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b11a:	2301      	movs	r3, #1
 800b11c:	617b      	str	r3, [r7, #20]
 800b11e:	2300      	movs	r3, #0
 800b120:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b122:	79fb      	ldrb	r3, [r7, #7]
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2200      	movs	r2, #0
 800b12a:	6939      	ldr	r1, [r7, #16]
 800b12c:	6978      	ldr	r0, [r7, #20]
 800b12e:	f7ff fee1 	bl	800aef4 <xQueueGenericCreateStatic>
 800b132:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7ff ffb8 	bl	800b0aa <prvInitialiseMutex>

		return xNewQueue;
 800b13a:	68fb      	ldr	r3, [r7, #12]
	}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08e      	sub	sp, #56	@ 0x38
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
 800b150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b152:	2300      	movs	r3, #0
 800b154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10b      	bne.n	800b178 <xQueueGenericSend+0x34>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b172:	bf00      	nop
 800b174:	bf00      	nop
 800b176:	e7fd      	b.n	800b174 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d103      	bne.n	800b186 <xQueueGenericSend+0x42>
 800b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <xQueueGenericSend+0x46>
 800b186:	2301      	movs	r3, #1
 800b188:	e000      	b.n	800b18c <xQueueGenericSend+0x48>
 800b18a:	2300      	movs	r3, #0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10b      	bne.n	800b1a8 <xQueueGenericSend+0x64>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1a2:	bf00      	nop
 800b1a4:	bf00      	nop
 800b1a6:	e7fd      	b.n	800b1a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d103      	bne.n	800b1b6 <xQueueGenericSend+0x72>
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d101      	bne.n	800b1ba <xQueueGenericSend+0x76>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e000      	b.n	800b1bc <xQueueGenericSend+0x78>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10b      	bne.n	800b1d8 <xQueueGenericSend+0x94>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	623b      	str	r3, [r7, #32]
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1d8:	f001 fa24 	bl	800c624 <xTaskGetSchedulerState>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d102      	bne.n	800b1e8 <xQueueGenericSend+0xa4>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <xQueueGenericSend+0xa8>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e000      	b.n	800b1ee <xQueueGenericSend+0xaa>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10b      	bne.n	800b20a <xQueueGenericSend+0xc6>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	61fb      	str	r3, [r7, #28]
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	e7fd      	b.n	800b206 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b20a:	f001 ff75 	bl	800d0f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b216:	429a      	cmp	r2, r3
 800b218:	d302      	bcc.n	800b220 <xQueueGenericSend+0xdc>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d129      	bne.n	800b274 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b226:	f000 fa0f 	bl	800b648 <prvCopyDataToQueue>
 800b22a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b230:	2b00      	cmp	r3, #0
 800b232:	d010      	beq.n	800b256 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b236:	3324      	adds	r3, #36	@ 0x24
 800b238:	4618      	mov	r0, r3
 800b23a:	f001 f805 	bl	800c248 <xTaskRemoveFromEventList>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d013      	beq.n	800b26c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b244:	4b3f      	ldr	r3, [pc, #252]	@ (800b344 <xQueueGenericSend+0x200>)
 800b246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b24a:	601a      	str	r2, [r3, #0]
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	e00a      	b.n	800b26c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d007      	beq.n	800b26c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b25c:	4b39      	ldr	r3, [pc, #228]	@ (800b344 <xQueueGenericSend+0x200>)
 800b25e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b262:	601a      	str	r2, [r3, #0]
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b26c:	f001 ff76 	bl	800d15c <vPortExitCritical>
				return pdPASS;
 800b270:	2301      	movs	r3, #1
 800b272:	e063      	b.n	800b33c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d103      	bne.n	800b282 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b27a:	f001 ff6f 	bl	800d15c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	e05c      	b.n	800b33c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b284:	2b00      	cmp	r3, #0
 800b286:	d106      	bne.n	800b296 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b288:	f107 0314 	add.w	r3, r7, #20
 800b28c:	4618      	mov	r0, r3
 800b28e:	f001 f867 	bl	800c360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b292:	2301      	movs	r3, #1
 800b294:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b296:	f001 ff61 	bl	800d15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b29a:	f000 fda7 	bl	800bdec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b29e:	f001 ff2b 	bl	800d0f8 <vPortEnterCritical>
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2a8:	b25b      	sxtb	r3, r3
 800b2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2ae:	d103      	bne.n	800b2b8 <xQueueGenericSend+0x174>
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2be:	b25b      	sxtb	r3, r3
 800b2c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2c4:	d103      	bne.n	800b2ce <xQueueGenericSend+0x18a>
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2ce:	f001 ff45 	bl	800d15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2d2:	1d3a      	adds	r2, r7, #4
 800b2d4:	f107 0314 	add.w	r3, r7, #20
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f001 f856 	bl	800c38c <xTaskCheckForTimeOut>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d124      	bne.n	800b330 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b2e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2e8:	f000 faa6 	bl	800b838 <prvIsQueueFull>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d018      	beq.n	800b324 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	3310      	adds	r3, #16
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 ff52 	bl	800c1a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b302:	f000 fa31 	bl	800b768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b306:	f000 fd7f 	bl	800be08 <xTaskResumeAll>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f47f af7c 	bne.w	800b20a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b312:	4b0c      	ldr	r3, [pc, #48]	@ (800b344 <xQueueGenericSend+0x200>)
 800b314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	e772      	b.n	800b20a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b326:	f000 fa1f 	bl	800b768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b32a:	f000 fd6d 	bl	800be08 <xTaskResumeAll>
 800b32e:	e76c      	b.n	800b20a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b332:	f000 fa19 	bl	800b768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b336:	f000 fd67 	bl	800be08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b33a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3738      	adds	r7, #56	@ 0x38
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	e000ed04 	.word	0xe000ed04

0800b348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b090      	sub	sp, #64	@ 0x40
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10b      	bne.n	800b378 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b372:	bf00      	nop
 800b374:	bf00      	nop
 800b376:	e7fd      	b.n	800b374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d103      	bne.n	800b386 <xQueueGenericSendFromISR+0x3e>
 800b37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <xQueueGenericSendFromISR+0x42>
 800b386:	2301      	movs	r3, #1
 800b388:	e000      	b.n	800b38c <xQueueGenericSendFromISR+0x44>
 800b38a:	2300      	movs	r3, #0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10b      	bne.n	800b3a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b3a2:	bf00      	nop
 800b3a4:	bf00      	nop
 800b3a6:	e7fd      	b.n	800b3a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d103      	bne.n	800b3b6 <xQueueGenericSendFromISR+0x6e>
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d101      	bne.n	800b3ba <xQueueGenericSendFromISR+0x72>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e000      	b.n	800b3bc <xQueueGenericSendFromISR+0x74>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10b      	bne.n	800b3d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	623b      	str	r3, [r7, #32]
}
 800b3d2:	bf00      	nop
 800b3d4:	bf00      	nop
 800b3d6:	e7fd      	b.n	800b3d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3d8:	f001 ff6e 	bl	800d2b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b3dc:	f3ef 8211 	mrs	r2, BASEPRI
 800b3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	61fa      	str	r2, [r7, #28]
 800b3f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b3f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b400:	429a      	cmp	r2, r3
 800b402:	d302      	bcc.n	800b40a <xQueueGenericSendFromISR+0xc2>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b02      	cmp	r3, #2
 800b408:	d12f      	bne.n	800b46a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b418:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	68b9      	ldr	r1, [r7, #8]
 800b41e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b420:	f000 f912 	bl	800b648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b424:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b42c:	d112      	bne.n	800b454 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b432:	2b00      	cmp	r3, #0
 800b434:	d016      	beq.n	800b464 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b438:	3324      	adds	r3, #36	@ 0x24
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 ff04 	bl	800c248 <xTaskRemoveFromEventList>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00e      	beq.n	800b464 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00b      	beq.n	800b464 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	e007      	b.n	800b464 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b454:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b458:	3301      	adds	r3, #1
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	b25a      	sxtb	r2, r3
 800b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b464:	2301      	movs	r3, #1
 800b466:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b468:	e001      	b.n	800b46e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b46e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b470:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b478:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3740      	adds	r7, #64	@ 0x40
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08c      	sub	sp, #48	@ 0x30
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b490:	2300      	movs	r3, #0
 800b492:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10b      	bne.n	800b4b6 <xQueueReceive+0x32>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	623b      	str	r3, [r7, #32]
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	e7fd      	b.n	800b4b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d103      	bne.n	800b4c4 <xQueueReceive+0x40>
 800b4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d101      	bne.n	800b4c8 <xQueueReceive+0x44>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e000      	b.n	800b4ca <xQueueReceive+0x46>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10b      	bne.n	800b4e6 <xQueueReceive+0x62>
	__asm volatile
 800b4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d2:	f383 8811 	msr	BASEPRI, r3
 800b4d6:	f3bf 8f6f 	isb	sy
 800b4da:	f3bf 8f4f 	dsb	sy
 800b4de:	61fb      	str	r3, [r7, #28]
}
 800b4e0:	bf00      	nop
 800b4e2:	bf00      	nop
 800b4e4:	e7fd      	b.n	800b4e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4e6:	f001 f89d 	bl	800c624 <xTaskGetSchedulerState>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <xQueueReceive+0x72>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <xQueueReceive+0x76>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e000      	b.n	800b4fc <xQueueReceive+0x78>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10b      	bne.n	800b518 <xQueueReceive+0x94>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	61bb      	str	r3, [r7, #24]
}
 800b512:	bf00      	nop
 800b514:	bf00      	nop
 800b516:	e7fd      	b.n	800b514 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b518:	f001 fdee 	bl	800d0f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b520:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b524:	2b00      	cmp	r3, #0
 800b526:	d01f      	beq.n	800b568 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b528:	68b9      	ldr	r1, [r7, #8]
 800b52a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b52c:	f000 f8f6 	bl	800b71c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	1e5a      	subs	r2, r3, #1
 800b534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b536:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00f      	beq.n	800b560 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b542:	3310      	adds	r3, #16
 800b544:	4618      	mov	r0, r3
 800b546:	f000 fe7f 	bl	800c248 <xTaskRemoveFromEventList>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d007      	beq.n	800b560 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b550:	4b3c      	ldr	r3, [pc, #240]	@ (800b644 <xQueueReceive+0x1c0>)
 800b552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b560:	f001 fdfc 	bl	800d15c <vPortExitCritical>
				return pdPASS;
 800b564:	2301      	movs	r3, #1
 800b566:	e069      	b.n	800b63c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d103      	bne.n	800b576 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b56e:	f001 fdf5 	bl	800d15c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b572:	2300      	movs	r3, #0
 800b574:	e062      	b.n	800b63c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d106      	bne.n	800b58a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b57c:	f107 0310 	add.w	r3, r7, #16
 800b580:	4618      	mov	r0, r3
 800b582:	f000 feed 	bl	800c360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b586:	2301      	movs	r3, #1
 800b588:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b58a:	f001 fde7 	bl	800d15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b58e:	f000 fc2d 	bl	800bdec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b592:	f001 fdb1 	bl	800d0f8 <vPortEnterCritical>
 800b596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b59c:	b25b      	sxtb	r3, r3
 800b59e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5a2:	d103      	bne.n	800b5ac <xQueueReceive+0x128>
 800b5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5b2:	b25b      	sxtb	r3, r3
 800b5b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5b8:	d103      	bne.n	800b5c2 <xQueueReceive+0x13e>
 800b5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5c2:	f001 fdcb 	bl	800d15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5c6:	1d3a      	adds	r2, r7, #4
 800b5c8:	f107 0310 	add.w	r3, r7, #16
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fedc 	bl	800c38c <xTaskCheckForTimeOut>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d123      	bne.n	800b622 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5dc:	f000 f916 	bl	800b80c <prvIsQueueEmpty>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d017      	beq.n	800b616 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e8:	3324      	adds	r3, #36	@ 0x24
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fdd8 	bl	800c1a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5f6:	f000 f8b7 	bl	800b768 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5fa:	f000 fc05 	bl	800be08 <xTaskResumeAll>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d189      	bne.n	800b518 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b604:	4b0f      	ldr	r3, [pc, #60]	@ (800b644 <xQueueReceive+0x1c0>)
 800b606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	e780      	b.n	800b518 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b618:	f000 f8a6 	bl	800b768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b61c:	f000 fbf4 	bl	800be08 <xTaskResumeAll>
 800b620:	e77a      	b.n	800b518 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b624:	f000 f8a0 	bl	800b768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b628:	f000 fbee 	bl	800be08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b62c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b62e:	f000 f8ed 	bl	800b80c <prvIsQueueEmpty>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	f43f af6f 	beq.w	800b518 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b63a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3730      	adds	r7, #48	@ 0x30
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	e000ed04 	.word	0xe000ed04

0800b648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b654:	2300      	movs	r3, #0
 800b656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b65c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10d      	bne.n	800b682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d14d      	bne.n	800b70a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fff4 	bl	800c660 <xTaskPriorityDisinherit>
 800b678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	609a      	str	r2, [r3, #8]
 800b680:	e043      	b.n	800b70a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d119      	bne.n	800b6bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6858      	ldr	r0, [r3, #4]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b690:	461a      	mov	r2, r3
 800b692:	68b9      	ldr	r1, [r7, #8]
 800b694:	f011 ff55 	bl	801d542 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a0:	441a      	add	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d32b      	bcc.n	800b70a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	605a      	str	r2, [r3, #4]
 800b6ba:	e026      	b.n	800b70a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	68d8      	ldr	r0, [r3, #12]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	68b9      	ldr	r1, [r7, #8]
 800b6c8:	f011 ff3b 	bl	801d542 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68da      	ldr	r2, [r3, #12]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d4:	425b      	negs	r3, r3
 800b6d6:	441a      	add	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	68da      	ldr	r2, [r3, #12]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d207      	bcs.n	800b6f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	689a      	ldr	r2, [r3, #8]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f0:	425b      	negs	r3, r3
 800b6f2:	441a      	add	r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d105      	bne.n	800b70a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	3b01      	subs	r3, #1
 800b708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b712:	697b      	ldr	r3, [r7, #20]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d018      	beq.n	800b760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b736:	441a      	add	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68da      	ldr	r2, [r3, #12]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	429a      	cmp	r2, r3
 800b746:	d303      	bcc.n	800b750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	68d9      	ldr	r1, [r3, #12]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b758:	461a      	mov	r2, r3
 800b75a:	6838      	ldr	r0, [r7, #0]
 800b75c:	f011 fef1 	bl	801d542 <memcpy>
	}
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b770:	f001 fcc2 	bl	800d0f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b77a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b77c:	e011      	b.n	800b7a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d012      	beq.n	800b7ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	3324      	adds	r3, #36	@ 0x24
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fd5c 	bl	800c248 <xTaskRemoveFromEventList>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b796:	f000 fe5d 	bl	800c454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	dce9      	bgt.n	800b77e <prvUnlockQueue+0x16>
 800b7aa:	e000      	b.n	800b7ae <prvUnlockQueue+0x46>
					break;
 800b7ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	22ff      	movs	r2, #255	@ 0xff
 800b7b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b7b6:	f001 fcd1 	bl	800d15c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b7ba:	f001 fc9d 	bl	800d0f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7c6:	e011      	b.n	800b7ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d012      	beq.n	800b7f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3310      	adds	r3, #16
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 fd37 	bl	800c248 <xTaskRemoveFromEventList>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b7e0:	f000 fe38 	bl	800c454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	dce9      	bgt.n	800b7c8 <prvUnlockQueue+0x60>
 800b7f4:	e000      	b.n	800b7f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	22ff      	movs	r2, #255	@ 0xff
 800b7fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b800:	f001 fcac 	bl	800d15c <vPortExitCritical>
}
 800b804:	bf00      	nop
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b814:	f001 fc70 	bl	800d0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b820:	2301      	movs	r3, #1
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	e001      	b.n	800b82a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b826:	2300      	movs	r3, #0
 800b828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b82a:	f001 fc97 	bl	800d15c <vPortExitCritical>

	return xReturn;
 800b82e:	68fb      	ldr	r3, [r7, #12]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b840:	f001 fc5a 	bl	800d0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d102      	bne.n	800b856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b850:	2301      	movs	r3, #1
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	e001      	b.n	800b85a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b856:	2300      	movs	r3, #0
 800b858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b85a:	f001 fc7f 	bl	800d15c <vPortExitCritical>

	return xReturn;
 800b85e:	68fb      	ldr	r3, [r7, #12]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b872:	2300      	movs	r3, #0
 800b874:	60fb      	str	r3, [r7, #12]
 800b876:	e014      	b.n	800b8a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b878:	4a0f      	ldr	r2, [pc, #60]	@ (800b8b8 <vQueueAddToRegistry+0x50>)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10b      	bne.n	800b89c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b884:	490c      	ldr	r1, [pc, #48]	@ (800b8b8 <vQueueAddToRegistry+0x50>)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b88e:	4a0a      	ldr	r2, [pc, #40]	@ (800b8b8 <vQueueAddToRegistry+0x50>)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	4413      	add	r3, r2
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b89a:	e006      	b.n	800b8aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2b07      	cmp	r3, #7
 800b8a6:	d9e7      	bls.n	800b878 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b8a8:	bf00      	nop
 800b8aa:	bf00      	nop
 800b8ac:	3714      	adds	r7, #20
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	240332b8 	.word	0x240332b8

0800b8bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b8cc:	f001 fc14 	bl	800d0f8 <vPortEnterCritical>
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8d6:	b25b      	sxtb	r3, r3
 800b8d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8dc:	d103      	bne.n	800b8e6 <vQueueWaitForMessageRestricted+0x2a>
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8ec:	b25b      	sxtb	r3, r3
 800b8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8f2:	d103      	bne.n	800b8fc <vQueueWaitForMessageRestricted+0x40>
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8fc:	f001 fc2e 	bl	800d15c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	3324      	adds	r3, #36	@ 0x24
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	68b9      	ldr	r1, [r7, #8]
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fc6d 	bl	800c1f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b916:	6978      	ldr	r0, [r7, #20]
 800b918:	f7ff ff26 	bl	800b768 <prvUnlockQueue>
	}
 800b91c:	bf00      	nop
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b924:	b580      	push	{r7, lr}
 800b926:	b08e      	sub	sp, #56	@ 0x38
 800b928:	af04      	add	r7, sp, #16
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10b      	bne.n	800b950 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	623b      	str	r3, [r7, #32]
}
 800b94a:	bf00      	nop
 800b94c:	bf00      	nop
 800b94e:	e7fd      	b.n	800b94c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10b      	bne.n	800b96e <xTaskCreateStatic+0x4a>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	61fb      	str	r3, [r7, #28]
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	e7fd      	b.n	800b96a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b96e:	23a8      	movs	r3, #168	@ 0xa8
 800b970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	2ba8      	cmp	r3, #168	@ 0xa8
 800b976:	d00b      	beq.n	800b990 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	61bb      	str	r3, [r7, #24]
}
 800b98a:	bf00      	nop
 800b98c:	bf00      	nop
 800b98e:	e7fd      	b.n	800b98c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b990:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b994:	2b00      	cmp	r3, #0
 800b996:	d01e      	beq.n	800b9d6 <xTaskCreateStatic+0xb2>
 800b998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d01b      	beq.n	800b9d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	9303      	str	r3, [sp, #12]
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b6:	9302      	str	r3, [sp, #8]
 800b9b8:	f107 0314 	add.w	r3, r7, #20
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	68b9      	ldr	r1, [r7, #8]
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 f851 	bl	800ba70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9d0:	f000 f8f6 	bl	800bbc0 <prvAddNewTaskToReadyList>
 800b9d4:	e001      	b.n	800b9da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9da:	697b      	ldr	r3, [r7, #20]
	}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3728      	adds	r7, #40	@ 0x28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08c      	sub	sp, #48	@ 0x30
 800b9e8:	af04      	add	r7, sp, #16
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	603b      	str	r3, [r7, #0]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9f4:	88fb      	ldrh	r3, [r7, #6]
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f001 fc9f 	bl	800d33c <pvPortMalloc>
 800b9fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00e      	beq.n	800ba24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba06:	20a8      	movs	r0, #168	@ 0xa8
 800ba08:	f001 fc98 	bl	800d33c <pvPortMalloc>
 800ba0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba1a:	e005      	b.n	800ba28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba1c:	6978      	ldr	r0, [r7, #20]
 800ba1e:	f001 fd5b 	bl	800d4d8 <vPortFree>
 800ba22:	e001      	b.n	800ba28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba24:	2300      	movs	r3, #0
 800ba26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d017      	beq.n	800ba5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba36:	88fa      	ldrh	r2, [r7, #6]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9303      	str	r3, [sp, #12]
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	9302      	str	r3, [sp, #8]
 800ba40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba42:	9301      	str	r3, [sp, #4]
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	68b9      	ldr	r1, [r7, #8]
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 f80f 	bl	800ba70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba52:	69f8      	ldr	r0, [r7, #28]
 800ba54:	f000 f8b4 	bl	800bbc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	61bb      	str	r3, [r7, #24]
 800ba5c:	e002      	b.n	800ba64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba64:	69bb      	ldr	r3, [r7, #24]
	}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3720      	adds	r7, #32
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
 800ba7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	461a      	mov	r2, r3
 800ba88:	21a5      	movs	r1, #165	@ 0xa5
 800ba8a:	f011 fc3b 	bl	801d304 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba92:	6879      	ldr	r1, [r7, #4]
 800ba94:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ba98:	440b      	add	r3, r1
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	f023 0307 	bic.w	r3, r3, #7
 800baa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	f003 0307 	and.w	r3, r3, #7
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00b      	beq.n	800baca <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	617b      	str	r3, [r7, #20]
}
 800bac4:	bf00      	nop
 800bac6:	bf00      	nop
 800bac8:	e7fd      	b.n	800bac6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01f      	beq.n	800bb10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bad0:	2300      	movs	r3, #0
 800bad2:	61fb      	str	r3, [r7, #28]
 800bad4:	e012      	b.n	800bafc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	4413      	add	r3, r2
 800badc:	7819      	ldrb	r1, [r3, #0]
 800bade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	4413      	add	r3, r2
 800bae4:	3334      	adds	r3, #52	@ 0x34
 800bae6:	460a      	mov	r2, r1
 800bae8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	4413      	add	r3, r2
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d006      	beq.n	800bb04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	3301      	adds	r3, #1
 800bafa:	61fb      	str	r3, [r7, #28]
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	2b0f      	cmp	r3, #15
 800bb00:	d9e9      	bls.n	800bad6 <prvInitialiseNewTask+0x66>
 800bb02:	e000      	b.n	800bb06 <prvInitialiseNewTask+0x96>
			{
				break;
 800bb04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bb0e:	e003      	b.n	800bb18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1a:	2b37      	cmp	r3, #55	@ 0x37
 800bb1c:	d901      	bls.n	800bb22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb1e:	2337      	movs	r3, #55	@ 0x37
 800bb20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb30:	2200      	movs	r2, #0
 800bb32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb36:	3304      	adds	r3, #4
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff f8dd 	bl	800acf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb40:	3318      	adds	r3, #24
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff f8d8 	bl	800acf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb60:	2200      	movs	r2, #0
 800bb62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb70:	3354      	adds	r3, #84	@ 0x54
 800bb72:	224c      	movs	r2, #76	@ 0x4c
 800bb74:	2100      	movs	r1, #0
 800bb76:	4618      	mov	r0, r3
 800bb78:	f011 fbc4 	bl	801d304 <memset>
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7e:	4a0d      	ldr	r2, [pc, #52]	@ (800bbb4 <prvInitialiseNewTask+0x144>)
 800bb80:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb84:	4a0c      	ldr	r2, [pc, #48]	@ (800bbb8 <prvInitialiseNewTask+0x148>)
 800bb86:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8a:	4a0c      	ldr	r2, [pc, #48]	@ (800bbbc <prvInitialiseNewTask+0x14c>)
 800bb8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	68f9      	ldr	r1, [r7, #12]
 800bb92:	69b8      	ldr	r0, [r7, #24]
 800bb94:	f001 f982 	bl	800ce9c <pxPortInitialiseStack>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d002      	beq.n	800bbaa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbaa:	bf00      	nop
 800bbac:	3720      	adds	r7, #32
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	240693b4 	.word	0x240693b4
 800bbb8:	2406941c 	.word	0x2406941c
 800bbbc:	24069484 	.word	0x24069484

0800bbc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bbc8:	f001 fa96 	bl	800d0f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bbcc:	4b2d      	ldr	r3, [pc, #180]	@ (800bc84 <prvAddNewTaskToReadyList+0xc4>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	4a2c      	ldr	r2, [pc, #176]	@ (800bc84 <prvAddNewTaskToReadyList+0xc4>)
 800bbd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bbd6:	4b2c      	ldr	r3, [pc, #176]	@ (800bc88 <prvAddNewTaskToReadyList+0xc8>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d109      	bne.n	800bbf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bbde:	4a2a      	ldr	r2, [pc, #168]	@ (800bc88 <prvAddNewTaskToReadyList+0xc8>)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bbe4:	4b27      	ldr	r3, [pc, #156]	@ (800bc84 <prvAddNewTaskToReadyList+0xc4>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d110      	bne.n	800bc0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bbec:	f000 fc56 	bl	800c49c <prvInitialiseTaskLists>
 800bbf0:	e00d      	b.n	800bc0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbf2:	4b26      	ldr	r3, [pc, #152]	@ (800bc8c <prvAddNewTaskToReadyList+0xcc>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d109      	bne.n	800bc0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbfa:	4b23      	ldr	r3, [pc, #140]	@ (800bc88 <prvAddNewTaskToReadyList+0xc8>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d802      	bhi.n	800bc0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc08:	4a1f      	ldr	r2, [pc, #124]	@ (800bc88 <prvAddNewTaskToReadyList+0xc8>)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc0e:	4b20      	ldr	r3, [pc, #128]	@ (800bc90 <prvAddNewTaskToReadyList+0xd0>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	4a1e      	ldr	r2, [pc, #120]	@ (800bc90 <prvAddNewTaskToReadyList+0xd0>)
 800bc16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc18:	4b1d      	ldr	r3, [pc, #116]	@ (800bc90 <prvAddNewTaskToReadyList+0xd0>)
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc24:	4b1b      	ldr	r3, [pc, #108]	@ (800bc94 <prvAddNewTaskToReadyList+0xd4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d903      	bls.n	800bc34 <prvAddNewTaskToReadyList+0x74>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc30:	4a18      	ldr	r2, [pc, #96]	@ (800bc94 <prvAddNewTaskToReadyList+0xd4>)
 800bc32:	6013      	str	r3, [r2, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc38:	4613      	mov	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4a15      	ldr	r2, [pc, #84]	@ (800bc98 <prvAddNewTaskToReadyList+0xd8>)
 800bc42:	441a      	add	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3304      	adds	r3, #4
 800bc48:	4619      	mov	r1, r3
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	f7ff f861 	bl	800ad12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc50:	f001 fa84 	bl	800d15c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc54:	4b0d      	ldr	r3, [pc, #52]	@ (800bc8c <prvAddNewTaskToReadyList+0xcc>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00e      	beq.n	800bc7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc88 <prvAddNewTaskToReadyList+0xc8>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d207      	bcs.n	800bc7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc6a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc9c <prvAddNewTaskToReadyList+0xdc>)
 800bc6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc7a:	bf00      	nop
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	240337cc 	.word	0x240337cc
 800bc88:	240332f8 	.word	0x240332f8
 800bc8c:	240337d8 	.word	0x240337d8
 800bc90:	240337e8 	.word	0x240337e8
 800bc94:	240337d4 	.word	0x240337d4
 800bc98:	240332fc 	.word	0x240332fc
 800bc9c:	e000ed04 	.word	0xe000ed04

0800bca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d018      	beq.n	800bce4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bcb2:	4b14      	ldr	r3, [pc, #80]	@ (800bd04 <vTaskDelay+0x64>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00b      	beq.n	800bcd2 <vTaskDelay+0x32>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	60bb      	str	r3, [r7, #8]
}
 800bccc:	bf00      	nop
 800bcce:	bf00      	nop
 800bcd0:	e7fd      	b.n	800bcce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bcd2:	f000 f88b 	bl	800bdec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 fd31 	bl	800c740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bcde:	f000 f893 	bl	800be08 <xTaskResumeAll>
 800bce2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d107      	bne.n	800bcfa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bcea:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <vTaskDelay+0x68>)
 800bcec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcfa:	bf00      	nop
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	240337f4 	.word	0x240337f4
 800bd08:	e000ed04 	.word	0xe000ed04

0800bd0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b08a      	sub	sp, #40	@ 0x28
 800bd10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd1a:	463a      	mov	r2, r7
 800bd1c:	1d39      	adds	r1, r7, #4
 800bd1e:	f107 0308 	add.w	r3, r7, #8
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fe ff94 	bl	800ac50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	9202      	str	r2, [sp, #8]
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	2300      	movs	r3, #0
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	2300      	movs	r3, #0
 800bd38:	460a      	mov	r2, r1
 800bd3a:	4924      	ldr	r1, [pc, #144]	@ (800bdcc <vTaskStartScheduler+0xc0>)
 800bd3c:	4824      	ldr	r0, [pc, #144]	@ (800bdd0 <vTaskStartScheduler+0xc4>)
 800bd3e:	f7ff fdf1 	bl	800b924 <xTaskCreateStatic>
 800bd42:	4603      	mov	r3, r0
 800bd44:	4a23      	ldr	r2, [pc, #140]	@ (800bdd4 <vTaskStartScheduler+0xc8>)
 800bd46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd48:	4b22      	ldr	r3, [pc, #136]	@ (800bdd4 <vTaskStartScheduler+0xc8>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd50:	2301      	movs	r3, #1
 800bd52:	617b      	str	r3, [r7, #20]
 800bd54:	e001      	b.n	800bd5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d102      	bne.n	800bd66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bd60:	f000 fd42 	bl	800c7e8 <xTimerCreateTimerTask>
 800bd64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d11b      	bne.n	800bda4 <vTaskStartScheduler+0x98>
	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	613b      	str	r3, [r7, #16]
}
 800bd7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd80:	4b15      	ldr	r3, [pc, #84]	@ (800bdd8 <vTaskStartScheduler+0xcc>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3354      	adds	r3, #84	@ 0x54
 800bd86:	4a15      	ldr	r2, [pc, #84]	@ (800bddc <vTaskStartScheduler+0xd0>)
 800bd88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd8a:	4b15      	ldr	r3, [pc, #84]	@ (800bde0 <vTaskStartScheduler+0xd4>)
 800bd8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd92:	4b14      	ldr	r3, [pc, #80]	@ (800bde4 <vTaskStartScheduler+0xd8>)
 800bd94:	2201      	movs	r2, #1
 800bd96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd98:	4b13      	ldr	r3, [pc, #76]	@ (800bde8 <vTaskStartScheduler+0xdc>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd9e:	f001 f907 	bl	800cfb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bda2:	e00f      	b.n	800bdc4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bdaa:	d10b      	bne.n	800bdc4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	60fb      	str	r3, [r7, #12]
}
 800bdbe:	bf00      	nop
 800bdc0:	bf00      	nop
 800bdc2:	e7fd      	b.n	800bdc0 <vTaskStartScheduler+0xb4>
}
 800bdc4:	bf00      	nop
 800bdc6:	3718      	adds	r7, #24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	0801e438 	.word	0x0801e438
 800bdd0:	0800c46d 	.word	0x0800c46d
 800bdd4:	240337f0 	.word	0x240337f0
 800bdd8:	240332f8 	.word	0x240332f8
 800bddc:	240013a0 	.word	0x240013a0
 800bde0:	240337ec 	.word	0x240337ec
 800bde4:	240337d8 	.word	0x240337d8
 800bde8:	240337d0 	.word	0x240337d0

0800bdec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bdf0:	4b04      	ldr	r3, [pc, #16]	@ (800be04 <vTaskSuspendAll+0x18>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	4a03      	ldr	r2, [pc, #12]	@ (800be04 <vTaskSuspendAll+0x18>)
 800bdf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bdfa:	bf00      	nop
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	240337f4 	.word	0x240337f4

0800be08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be12:	2300      	movs	r3, #0
 800be14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be16:	4b42      	ldr	r3, [pc, #264]	@ (800bf20 <xTaskResumeAll+0x118>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10b      	bne.n	800be36 <xTaskResumeAll+0x2e>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	603b      	str	r3, [r7, #0]
}
 800be30:	bf00      	nop
 800be32:	bf00      	nop
 800be34:	e7fd      	b.n	800be32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be36:	f001 f95f 	bl	800d0f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be3a:	4b39      	ldr	r3, [pc, #228]	@ (800bf20 <xTaskResumeAll+0x118>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3b01      	subs	r3, #1
 800be40:	4a37      	ldr	r2, [pc, #220]	@ (800bf20 <xTaskResumeAll+0x118>)
 800be42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be44:	4b36      	ldr	r3, [pc, #216]	@ (800bf20 <xTaskResumeAll+0x118>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d162      	bne.n	800bf12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be4c:	4b35      	ldr	r3, [pc, #212]	@ (800bf24 <xTaskResumeAll+0x11c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d05e      	beq.n	800bf12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be54:	e02f      	b.n	800beb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be56:	4b34      	ldr	r3, [pc, #208]	@ (800bf28 <xTaskResumeAll+0x120>)
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3318      	adds	r3, #24
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe ffb2 	bl	800adcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	3304      	adds	r3, #4
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fe ffad 	bl	800adcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be76:	4b2d      	ldr	r3, [pc, #180]	@ (800bf2c <xTaskResumeAll+0x124>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d903      	bls.n	800be86 <xTaskResumeAll+0x7e>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be82:	4a2a      	ldr	r2, [pc, #168]	@ (800bf2c <xTaskResumeAll+0x124>)
 800be84:	6013      	str	r3, [r2, #0]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be8a:	4613      	mov	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4413      	add	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4a27      	ldr	r2, [pc, #156]	@ (800bf30 <xTaskResumeAll+0x128>)
 800be94:	441a      	add	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3304      	adds	r3, #4
 800be9a:	4619      	mov	r1, r3
 800be9c:	4610      	mov	r0, r2
 800be9e:	f7fe ff38 	bl	800ad12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea6:	4b23      	ldr	r3, [pc, #140]	@ (800bf34 <xTaskResumeAll+0x12c>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beac:	429a      	cmp	r2, r3
 800beae:	d302      	bcc.n	800beb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800beb0:	4b21      	ldr	r3, [pc, #132]	@ (800bf38 <xTaskResumeAll+0x130>)
 800beb2:	2201      	movs	r2, #1
 800beb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800beb6:	4b1c      	ldr	r3, [pc, #112]	@ (800bf28 <xTaskResumeAll+0x120>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1cb      	bne.n	800be56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bec4:	f000 fb8e 	bl	800c5e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bec8:	4b1c      	ldr	r3, [pc, #112]	@ (800bf3c <xTaskResumeAll+0x134>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d010      	beq.n	800bef6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bed4:	f000 f846 	bl	800bf64 <xTaskIncrementTick>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d002      	beq.n	800bee4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bede:	4b16      	ldr	r3, [pc, #88]	@ (800bf38 <xTaskResumeAll+0x130>)
 800bee0:	2201      	movs	r2, #1
 800bee2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	3b01      	subs	r3, #1
 800bee8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1f1      	bne.n	800bed4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bef0:	4b12      	ldr	r3, [pc, #72]	@ (800bf3c <xTaskResumeAll+0x134>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bef6:	4b10      	ldr	r3, [pc, #64]	@ (800bf38 <xTaskResumeAll+0x130>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d009      	beq.n	800bf12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800befe:	2301      	movs	r3, #1
 800bf00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf02:	4b0f      	ldr	r3, [pc, #60]	@ (800bf40 <xTaskResumeAll+0x138>)
 800bf04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf12:	f001 f923 	bl	800d15c <vPortExitCritical>

	return xAlreadyYielded;
 800bf16:	68bb      	ldr	r3, [r7, #8]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	240337f4 	.word	0x240337f4
 800bf24:	240337cc 	.word	0x240337cc
 800bf28:	2403378c 	.word	0x2403378c
 800bf2c:	240337d4 	.word	0x240337d4
 800bf30:	240332fc 	.word	0x240332fc
 800bf34:	240332f8 	.word	0x240332f8
 800bf38:	240337e0 	.word	0x240337e0
 800bf3c:	240337dc 	.word	0x240337dc
 800bf40:	e000ed04 	.word	0xe000ed04

0800bf44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf4a:	4b05      	ldr	r3, [pc, #20]	@ (800bf60 <xTaskGetTickCount+0x1c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf50:	687b      	ldr	r3, [r7, #4]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	240337d0 	.word	0x240337d0

0800bf64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf6e:	4b4f      	ldr	r3, [pc, #316]	@ (800c0ac <xTaskIncrementTick+0x148>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f040 8090 	bne.w	800c098 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf78:	4b4d      	ldr	r3, [pc, #308]	@ (800c0b0 <xTaskIncrementTick+0x14c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf80:	4a4b      	ldr	r2, [pc, #300]	@ (800c0b0 <xTaskIncrementTick+0x14c>)
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d121      	bne.n	800bfd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf8c:	4b49      	ldr	r3, [pc, #292]	@ (800c0b4 <xTaskIncrementTick+0x150>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <xTaskIncrementTick+0x4a>
	__asm volatile
 800bf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	603b      	str	r3, [r7, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	bf00      	nop
 800bfac:	e7fd      	b.n	800bfaa <xTaskIncrementTick+0x46>
 800bfae:	4b41      	ldr	r3, [pc, #260]	@ (800c0b4 <xTaskIncrementTick+0x150>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	4b40      	ldr	r3, [pc, #256]	@ (800c0b8 <xTaskIncrementTick+0x154>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a3e      	ldr	r2, [pc, #248]	@ (800c0b4 <xTaskIncrementTick+0x150>)
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	4a3e      	ldr	r2, [pc, #248]	@ (800c0b8 <xTaskIncrementTick+0x154>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6013      	str	r3, [r2, #0]
 800bfc2:	4b3e      	ldr	r3, [pc, #248]	@ (800c0bc <xTaskIncrementTick+0x158>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	4a3c      	ldr	r2, [pc, #240]	@ (800c0bc <xTaskIncrementTick+0x158>)
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	f000 fb0a 	bl	800c5e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfd0:	4b3b      	ldr	r3, [pc, #236]	@ (800c0c0 <xTaskIncrementTick+0x15c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d349      	bcc.n	800c06e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfda:	4b36      	ldr	r3, [pc, #216]	@ (800c0b4 <xTaskIncrementTick+0x150>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d104      	bne.n	800bfee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe4:	4b36      	ldr	r3, [pc, #216]	@ (800c0c0 <xTaskIncrementTick+0x15c>)
 800bfe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfea:	601a      	str	r2, [r3, #0]
					break;
 800bfec:	e03f      	b.n	800c06e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfee:	4b31      	ldr	r3, [pc, #196]	@ (800c0b4 <xTaskIncrementTick+0x150>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	429a      	cmp	r2, r3
 800c004:	d203      	bcs.n	800c00e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c006:	4a2e      	ldr	r2, [pc, #184]	@ (800c0c0 <xTaskIncrementTick+0x15c>)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c00c:	e02f      	b.n	800c06e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	3304      	adds	r3, #4
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe feda 	bl	800adcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d004      	beq.n	800c02a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	3318      	adds	r3, #24
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe fed1 	bl	800adcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c02e:	4b25      	ldr	r3, [pc, #148]	@ (800c0c4 <xTaskIncrementTick+0x160>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	429a      	cmp	r2, r3
 800c034:	d903      	bls.n	800c03e <xTaskIncrementTick+0xda>
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c03a:	4a22      	ldr	r2, [pc, #136]	@ (800c0c4 <xTaskIncrementTick+0x160>)
 800c03c:	6013      	str	r3, [r2, #0]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c042:	4613      	mov	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	4a1f      	ldr	r2, [pc, #124]	@ (800c0c8 <xTaskIncrementTick+0x164>)
 800c04c:	441a      	add	r2, r3
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	3304      	adds	r3, #4
 800c052:	4619      	mov	r1, r3
 800c054:	4610      	mov	r0, r2
 800c056:	f7fe fe5c 	bl	800ad12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c05e:	4b1b      	ldr	r3, [pc, #108]	@ (800c0cc <xTaskIncrementTick+0x168>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c064:	429a      	cmp	r2, r3
 800c066:	d3b8      	bcc.n	800bfda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c068:	2301      	movs	r3, #1
 800c06a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c06c:	e7b5      	b.n	800bfda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c06e:	4b17      	ldr	r3, [pc, #92]	@ (800c0cc <xTaskIncrementTick+0x168>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c074:	4914      	ldr	r1, [pc, #80]	@ (800c0c8 <xTaskIncrementTick+0x164>)
 800c076:	4613      	mov	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	440b      	add	r3, r1
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d901      	bls.n	800c08a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c086:	2301      	movs	r3, #1
 800c088:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c08a:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <xTaskIncrementTick+0x16c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d007      	beq.n	800c0a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c092:	2301      	movs	r3, #1
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	e004      	b.n	800c0a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c098:	4b0e      	ldr	r3, [pc, #56]	@ (800c0d4 <xTaskIncrementTick+0x170>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	3301      	adds	r3, #1
 800c09e:	4a0d      	ldr	r2, [pc, #52]	@ (800c0d4 <xTaskIncrementTick+0x170>)
 800c0a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c0a2:	697b      	ldr	r3, [r7, #20]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	240337f4 	.word	0x240337f4
 800c0b0:	240337d0 	.word	0x240337d0
 800c0b4:	24033784 	.word	0x24033784
 800c0b8:	24033788 	.word	0x24033788
 800c0bc:	240337e4 	.word	0x240337e4
 800c0c0:	240337ec 	.word	0x240337ec
 800c0c4:	240337d4 	.word	0x240337d4
 800c0c8:	240332fc 	.word	0x240332fc
 800c0cc:	240332f8 	.word	0x240332f8
 800c0d0:	240337e0 	.word	0x240337e0
 800c0d4:	240337dc 	.word	0x240337dc

0800c0d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0de:	4b2b      	ldr	r3, [pc, #172]	@ (800c18c <vTaskSwitchContext+0xb4>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d003      	beq.n	800c0ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0e6:	4b2a      	ldr	r3, [pc, #168]	@ (800c190 <vTaskSwitchContext+0xb8>)
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0ec:	e047      	b.n	800c17e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c0ee:	4b28      	ldr	r3, [pc, #160]	@ (800c190 <vTaskSwitchContext+0xb8>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f4:	4b27      	ldr	r3, [pc, #156]	@ (800c194 <vTaskSwitchContext+0xbc>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	e011      	b.n	800c120 <vTaskSwitchContext+0x48>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10b      	bne.n	800c11a <vTaskSwitchContext+0x42>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	607b      	str	r3, [r7, #4]
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	e7fd      	b.n	800c116 <vTaskSwitchContext+0x3e>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	491d      	ldr	r1, [pc, #116]	@ (800c198 <vTaskSwitchContext+0xc0>)
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	4613      	mov	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	440b      	add	r3, r1
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0e3      	beq.n	800c0fc <vTaskSwitchContext+0x24>
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	4613      	mov	r3, r2
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4a16      	ldr	r2, [pc, #88]	@ (800c198 <vTaskSwitchContext+0xc0>)
 800c140:	4413      	add	r3, r2
 800c142:	60bb      	str	r3, [r7, #8]
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	685a      	ldr	r2, [r3, #4]
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	605a      	str	r2, [r3, #4]
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	3308      	adds	r3, #8
 800c156:	429a      	cmp	r2, r3
 800c158:	d104      	bne.n	800c164 <vTaskSwitchContext+0x8c>
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	605a      	str	r2, [r3, #4]
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	4a0c      	ldr	r2, [pc, #48]	@ (800c19c <vTaskSwitchContext+0xc4>)
 800c16c:	6013      	str	r3, [r2, #0]
 800c16e:	4a09      	ldr	r2, [pc, #36]	@ (800c194 <vTaskSwitchContext+0xbc>)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c174:	4b09      	ldr	r3, [pc, #36]	@ (800c19c <vTaskSwitchContext+0xc4>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	3354      	adds	r3, #84	@ 0x54
 800c17a:	4a09      	ldr	r2, [pc, #36]	@ (800c1a0 <vTaskSwitchContext+0xc8>)
 800c17c:	6013      	str	r3, [r2, #0]
}
 800c17e:	bf00      	nop
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	240337f4 	.word	0x240337f4
 800c190:	240337e0 	.word	0x240337e0
 800c194:	240337d4 	.word	0x240337d4
 800c198:	240332fc 	.word	0x240332fc
 800c19c:	240332f8 	.word	0x240332f8
 800c1a0:	240013a0 	.word	0x240013a0

0800c1a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10b      	bne.n	800c1cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	60fb      	str	r3, [r7, #12]
}
 800c1c6:	bf00      	nop
 800c1c8:	bf00      	nop
 800c1ca:	e7fd      	b.n	800c1c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1cc:	4b07      	ldr	r3, [pc, #28]	@ (800c1ec <vTaskPlaceOnEventList+0x48>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3318      	adds	r3, #24
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7fe fdc0 	bl	800ad5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1da:	2101      	movs	r1, #1
 800c1dc:	6838      	ldr	r0, [r7, #0]
 800c1de:	f000 faaf 	bl	800c740 <prvAddCurrentTaskToDelayedList>
}
 800c1e2:	bf00      	nop
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	240332f8 	.word	0x240332f8

0800c1f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10b      	bne.n	800c21a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	617b      	str	r3, [r7, #20]
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop
 800c218:	e7fd      	b.n	800c216 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c21a:	4b0a      	ldr	r3, [pc, #40]	@ (800c244 <vTaskPlaceOnEventListRestricted+0x54>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3318      	adds	r3, #24
 800c220:	4619      	mov	r1, r3
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7fe fd75 	bl	800ad12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c22e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c232:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	68b8      	ldr	r0, [r7, #8]
 800c238:	f000 fa82 	bl	800c740 <prvAddCurrentTaskToDelayedList>
	}
 800c23c:	bf00      	nop
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	240332f8 	.word	0x240332f8

0800c248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d10b      	bne.n	800c276 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	60fb      	str	r3, [r7, #12]
}
 800c270:	bf00      	nop
 800c272:	bf00      	nop
 800c274:	e7fd      	b.n	800c272 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	3318      	adds	r3, #24
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fda6 	bl	800adcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c280:	4b1d      	ldr	r3, [pc, #116]	@ (800c2f8 <xTaskRemoveFromEventList+0xb0>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d11d      	bne.n	800c2c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	3304      	adds	r3, #4
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fe fd9d 	bl	800adcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c296:	4b19      	ldr	r3, [pc, #100]	@ (800c2fc <xTaskRemoveFromEventList+0xb4>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d903      	bls.n	800c2a6 <xTaskRemoveFromEventList+0x5e>
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a2:	4a16      	ldr	r2, [pc, #88]	@ (800c2fc <xTaskRemoveFromEventList+0xb4>)
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	4413      	add	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4a13      	ldr	r2, [pc, #76]	@ (800c300 <xTaskRemoveFromEventList+0xb8>)
 800c2b4:	441a      	add	r2, r3
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4610      	mov	r0, r2
 800c2be:	f7fe fd28 	bl	800ad12 <vListInsertEnd>
 800c2c2:	e005      	b.n	800c2d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	3318      	adds	r3, #24
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	480e      	ldr	r0, [pc, #56]	@ (800c304 <xTaskRemoveFromEventList+0xbc>)
 800c2cc:	f7fe fd21 	bl	800ad12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c308 <xTaskRemoveFromEventList+0xc0>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d905      	bls.n	800c2ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c2e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c30c <xTaskRemoveFromEventList+0xc4>)
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	e001      	b.n	800c2ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2ee:	697b      	ldr	r3, [r7, #20]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3718      	adds	r7, #24
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	240337f4 	.word	0x240337f4
 800c2fc:	240337d4 	.word	0x240337d4
 800c300:	240332fc 	.word	0x240332fc
 800c304:	2403378c 	.word	0x2403378c
 800c308:	240332f8 	.word	0x240332f8
 800c30c:	240337e0 	.word	0x240337e0

0800c310 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10b      	bne.n	800c336 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	60fb      	str	r3, [r7, #12]
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	e7fd      	b.n	800c332 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c336:	f000 fedf 	bl	800d0f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c33a:	4b07      	ldr	r3, [pc, #28]	@ (800c358 <vTaskSetTimeOutState+0x48>)
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c342:	4b06      	ldr	r3, [pc, #24]	@ (800c35c <vTaskSetTimeOutState+0x4c>)
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c34a:	f000 ff07 	bl	800d15c <vPortExitCritical>
}
 800c34e:	bf00      	nop
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	240337e4 	.word	0x240337e4
 800c35c:	240337d0 	.word	0x240337d0

0800c360 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c368:	4b06      	ldr	r3, [pc, #24]	@ (800c384 <vTaskInternalSetTimeOutState+0x24>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c370:	4b05      	ldr	r3, [pc, #20]	@ (800c388 <vTaskInternalSetTimeOutState+0x28>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	605a      	str	r2, [r3, #4]
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr
 800c384:	240337e4 	.word	0x240337e4
 800c388:	240337d0 	.word	0x240337d0

0800c38c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b088      	sub	sp, #32
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10b      	bne.n	800c3b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	613b      	str	r3, [r7, #16]
}
 800c3ae:	bf00      	nop
 800c3b0:	bf00      	nop
 800c3b2:	e7fd      	b.n	800c3b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10b      	bne.n	800c3d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	60fb      	str	r3, [r7, #12]
}
 800c3cc:	bf00      	nop
 800c3ce:	bf00      	nop
 800c3d0:	e7fd      	b.n	800c3ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c3d2:	f000 fe91 	bl	800d0f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c3d6:	4b1d      	ldr	r3, [pc, #116]	@ (800c44c <xTaskCheckForTimeOut+0xc0>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	69ba      	ldr	r2, [r7, #24]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3ee:	d102      	bne.n	800c3f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	e023      	b.n	800c43e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	4b15      	ldr	r3, [pc, #84]	@ (800c450 <xTaskCheckForTimeOut+0xc4>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d007      	beq.n	800c412 <xTaskCheckForTimeOut+0x86>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d302      	bcc.n	800c412 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c40c:	2301      	movs	r3, #1
 800c40e:	61fb      	str	r3, [r7, #28]
 800c410:	e015      	b.n	800c43e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d20b      	bcs.n	800c434 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	1ad2      	subs	r2, r2, r3
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff ff99 	bl	800c360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c42e:	2300      	movs	r3, #0
 800c430:	61fb      	str	r3, [r7, #28]
 800c432:	e004      	b.n	800c43e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	2200      	movs	r2, #0
 800c438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c43a:	2301      	movs	r3, #1
 800c43c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c43e:	f000 fe8d 	bl	800d15c <vPortExitCritical>

	return xReturn;
 800c442:	69fb      	ldr	r3, [r7, #28]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3720      	adds	r7, #32
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	240337d0 	.word	0x240337d0
 800c450:	240337e4 	.word	0x240337e4

0800c454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c454:	b480      	push	{r7}
 800c456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c458:	4b03      	ldr	r3, [pc, #12]	@ (800c468 <vTaskMissedYield+0x14>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	601a      	str	r2, [r3, #0]
}
 800c45e:	bf00      	nop
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	240337e0 	.word	0x240337e0

0800c46c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c474:	f000 f852 	bl	800c51c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c478:	4b06      	ldr	r3, [pc, #24]	@ (800c494 <prvIdleTask+0x28>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d9f9      	bls.n	800c474 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c480:	4b05      	ldr	r3, [pc, #20]	@ (800c498 <prvIdleTask+0x2c>)
 800c482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c486:	601a      	str	r2, [r3, #0]
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c490:	e7f0      	b.n	800c474 <prvIdleTask+0x8>
 800c492:	bf00      	nop
 800c494:	240332fc 	.word	0x240332fc
 800c498:	e000ed04 	.word	0xe000ed04

0800c49c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	607b      	str	r3, [r7, #4]
 800c4a6:	e00c      	b.n	800c4c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4a12      	ldr	r2, [pc, #72]	@ (800c4fc <prvInitialiseTaskLists+0x60>)
 800c4b4:	4413      	add	r3, r2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fe fbfe 	bl	800acb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	607b      	str	r3, [r7, #4]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b37      	cmp	r3, #55	@ 0x37
 800c4c6:	d9ef      	bls.n	800c4a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c4c8:	480d      	ldr	r0, [pc, #52]	@ (800c500 <prvInitialiseTaskLists+0x64>)
 800c4ca:	f7fe fbf5 	bl	800acb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c4ce:	480d      	ldr	r0, [pc, #52]	@ (800c504 <prvInitialiseTaskLists+0x68>)
 800c4d0:	f7fe fbf2 	bl	800acb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4d4:	480c      	ldr	r0, [pc, #48]	@ (800c508 <prvInitialiseTaskLists+0x6c>)
 800c4d6:	f7fe fbef 	bl	800acb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4da:	480c      	ldr	r0, [pc, #48]	@ (800c50c <prvInitialiseTaskLists+0x70>)
 800c4dc:	f7fe fbec 	bl	800acb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c4e0:	480b      	ldr	r0, [pc, #44]	@ (800c510 <prvInitialiseTaskLists+0x74>)
 800c4e2:	f7fe fbe9 	bl	800acb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c514 <prvInitialiseTaskLists+0x78>)
 800c4e8:	4a05      	ldr	r2, [pc, #20]	@ (800c500 <prvInitialiseTaskLists+0x64>)
 800c4ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c518 <prvInitialiseTaskLists+0x7c>)
 800c4ee:	4a05      	ldr	r2, [pc, #20]	@ (800c504 <prvInitialiseTaskLists+0x68>)
 800c4f0:	601a      	str	r2, [r3, #0]
}
 800c4f2:	bf00      	nop
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	240332fc 	.word	0x240332fc
 800c500:	2403375c 	.word	0x2403375c
 800c504:	24033770 	.word	0x24033770
 800c508:	2403378c 	.word	0x2403378c
 800c50c:	240337a0 	.word	0x240337a0
 800c510:	240337b8 	.word	0x240337b8
 800c514:	24033784 	.word	0x24033784
 800c518:	24033788 	.word	0x24033788

0800c51c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c522:	e019      	b.n	800c558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c524:	f000 fde8 	bl	800d0f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c528:	4b10      	ldr	r3, [pc, #64]	@ (800c56c <prvCheckTasksWaitingTermination+0x50>)
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3304      	adds	r3, #4
 800c534:	4618      	mov	r0, r3
 800c536:	f7fe fc49 	bl	800adcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c53a:	4b0d      	ldr	r3, [pc, #52]	@ (800c570 <prvCheckTasksWaitingTermination+0x54>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3b01      	subs	r3, #1
 800c540:	4a0b      	ldr	r2, [pc, #44]	@ (800c570 <prvCheckTasksWaitingTermination+0x54>)
 800c542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c544:	4b0b      	ldr	r3, [pc, #44]	@ (800c574 <prvCheckTasksWaitingTermination+0x58>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3b01      	subs	r3, #1
 800c54a:	4a0a      	ldr	r2, [pc, #40]	@ (800c574 <prvCheckTasksWaitingTermination+0x58>)
 800c54c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c54e:	f000 fe05 	bl	800d15c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f810 	bl	800c578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c558:	4b06      	ldr	r3, [pc, #24]	@ (800c574 <prvCheckTasksWaitingTermination+0x58>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1e1      	bne.n	800c524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c560:	bf00      	nop
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	240337a0 	.word	0x240337a0
 800c570:	240337cc 	.word	0x240337cc
 800c574:	240337b4 	.word	0x240337b4

0800c578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3354      	adds	r3, #84	@ 0x54
 800c584:	4618      	mov	r0, r3
 800c586:	f010 ff0b 	bl	801d3a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c590:	2b00      	cmp	r3, #0
 800c592:	d108      	bne.n	800c5a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 ff9d 	bl	800d4d8 <vPortFree>
				vPortFree( pxTCB );
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 ff9a 	bl	800d4d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c5a4:	e019      	b.n	800c5da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d103      	bne.n	800c5b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 ff91 	bl	800d4d8 <vPortFree>
	}
 800c5b6:	e010      	b.n	800c5da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d00b      	beq.n	800c5da <prvDeleteTCB+0x62>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	60fb      	str	r3, [r7, #12]
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop
 800c5d8:	e7fd      	b.n	800c5d6 <prvDeleteTCB+0x5e>
	}
 800c5da:	bf00      	nop
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c61c <prvResetNextTaskUnblockTime+0x38>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d104      	bne.n	800c5fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c620 <prvResetNextTaskUnblockTime+0x3c>)
 800c5f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c5fc:	e008      	b.n	800c610 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5fe:	4b07      	ldr	r3, [pc, #28]	@ (800c61c <prvResetNextTaskUnblockTime+0x38>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	4a04      	ldr	r2, [pc, #16]	@ (800c620 <prvResetNextTaskUnblockTime+0x3c>)
 800c60e:	6013      	str	r3, [r2, #0]
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	24033784 	.word	0x24033784
 800c620:	240337ec 	.word	0x240337ec

0800c624 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c62a:	4b0b      	ldr	r3, [pc, #44]	@ (800c658 <xTaskGetSchedulerState+0x34>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d102      	bne.n	800c638 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c632:	2301      	movs	r3, #1
 800c634:	607b      	str	r3, [r7, #4]
 800c636:	e008      	b.n	800c64a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c638:	4b08      	ldr	r3, [pc, #32]	@ (800c65c <xTaskGetSchedulerState+0x38>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d102      	bne.n	800c646 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c640:	2302      	movs	r3, #2
 800c642:	607b      	str	r3, [r7, #4]
 800c644:	e001      	b.n	800c64a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c646:	2300      	movs	r3, #0
 800c648:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c64a:	687b      	ldr	r3, [r7, #4]
	}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	240337d8 	.word	0x240337d8
 800c65c:	240337f4 	.word	0x240337f4

0800c660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c66c:	2300      	movs	r3, #0
 800c66e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d058      	beq.n	800c728 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c676:	4b2f      	ldr	r3, [pc, #188]	@ (800c734 <xTaskPriorityDisinherit+0xd4>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	693a      	ldr	r2, [r7, #16]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d00b      	beq.n	800c698 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	60fb      	str	r3, [r7, #12]
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	e7fd      	b.n	800c694 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10b      	bne.n	800c6b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	60bb      	str	r3, [r7, #8]
}
 800c6b2:	bf00      	nop
 800c6b4:	bf00      	nop
 800c6b6:	e7fd      	b.n	800c6b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6bc:	1e5a      	subs	r2, r3, #1
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d02c      	beq.n	800c728 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d128      	bne.n	800c728 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	3304      	adds	r3, #4
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe fb76 	bl	800adcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c738 <xTaskPriorityDisinherit+0xd8>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d903      	bls.n	800c708 <xTaskPriorityDisinherit+0xa8>
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c704:	4a0c      	ldr	r2, [pc, #48]	@ (800c738 <xTaskPriorityDisinherit+0xd8>)
 800c706:	6013      	str	r3, [r2, #0]
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c70c:	4613      	mov	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4a09      	ldr	r2, [pc, #36]	@ (800c73c <xTaskPriorityDisinherit+0xdc>)
 800c716:	441a      	add	r2, r3
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	3304      	adds	r3, #4
 800c71c:	4619      	mov	r1, r3
 800c71e:	4610      	mov	r0, r2
 800c720:	f7fe faf7 	bl	800ad12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c724:	2301      	movs	r3, #1
 800c726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c728:	697b      	ldr	r3, [r7, #20]
	}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	240332f8 	.word	0x240332f8
 800c738:	240337d4 	.word	0x240337d4
 800c73c:	240332fc 	.word	0x240332fc

0800c740 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c74a:	4b21      	ldr	r3, [pc, #132]	@ (800c7d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c750:	4b20      	ldr	r3, [pc, #128]	@ (800c7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3304      	adds	r3, #4
 800c756:	4618      	mov	r0, r3
 800c758:	f7fe fb38 	bl	800adcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c762:	d10a      	bne.n	800c77a <prvAddCurrentTaskToDelayedList+0x3a>
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d007      	beq.n	800c77a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c76a:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	3304      	adds	r3, #4
 800c770:	4619      	mov	r1, r3
 800c772:	4819      	ldr	r0, [pc, #100]	@ (800c7d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c774:	f7fe facd 	bl	800ad12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c778:	e026      	b.n	800c7c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4413      	add	r3, r2
 800c780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c782:	4b14      	ldr	r3, [pc, #80]	@ (800c7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d209      	bcs.n	800c7a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c792:	4b12      	ldr	r3, [pc, #72]	@ (800c7dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	4b0f      	ldr	r3, [pc, #60]	@ (800c7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3304      	adds	r3, #4
 800c79c:	4619      	mov	r1, r3
 800c79e:	4610      	mov	r0, r2
 800c7a0:	f7fe fadb 	bl	800ad5a <vListInsert>
}
 800c7a4:	e010      	b.n	800c7c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7a6:	4b0e      	ldr	r3, [pc, #56]	@ (800c7e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	f7fe fad1 	bl	800ad5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c7e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d202      	bcs.n	800c7c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c7c2:	4a08      	ldr	r2, [pc, #32]	@ (800c7e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	6013      	str	r3, [r2, #0]
}
 800c7c8:	bf00      	nop
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	240337d0 	.word	0x240337d0
 800c7d4:	240332f8 	.word	0x240332f8
 800c7d8:	240337b8 	.word	0x240337b8
 800c7dc:	24033788 	.word	0x24033788
 800c7e0:	24033784 	.word	0x24033784
 800c7e4:	240337ec 	.word	0x240337ec

0800c7e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b08a      	sub	sp, #40	@ 0x28
 800c7ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c7f2:	f000 fb13 	bl	800ce1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c7f6:	4b1d      	ldr	r3, [pc, #116]	@ (800c86c <xTimerCreateTimerTask+0x84>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d021      	beq.n	800c842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c7fe:	2300      	movs	r3, #0
 800c800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c802:	2300      	movs	r3, #0
 800c804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c806:	1d3a      	adds	r2, r7, #4
 800c808:	f107 0108 	add.w	r1, r7, #8
 800c80c:	f107 030c 	add.w	r3, r7, #12
 800c810:	4618      	mov	r0, r3
 800c812:	f7fe fa37 	bl	800ac84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c816:	6879      	ldr	r1, [r7, #4]
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	9202      	str	r2, [sp, #8]
 800c81e:	9301      	str	r3, [sp, #4]
 800c820:	2302      	movs	r3, #2
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	2300      	movs	r3, #0
 800c826:	460a      	mov	r2, r1
 800c828:	4911      	ldr	r1, [pc, #68]	@ (800c870 <xTimerCreateTimerTask+0x88>)
 800c82a:	4812      	ldr	r0, [pc, #72]	@ (800c874 <xTimerCreateTimerTask+0x8c>)
 800c82c:	f7ff f87a 	bl	800b924 <xTaskCreateStatic>
 800c830:	4603      	mov	r3, r0
 800c832:	4a11      	ldr	r2, [pc, #68]	@ (800c878 <xTimerCreateTimerTask+0x90>)
 800c834:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c836:	4b10      	ldr	r3, [pc, #64]	@ (800c878 <xTimerCreateTimerTask+0x90>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c83e:	2301      	movs	r3, #1
 800c840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10b      	bne.n	800c860 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	613b      	str	r3, [r7, #16]
}
 800c85a:	bf00      	nop
 800c85c:	bf00      	nop
 800c85e:	e7fd      	b.n	800c85c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c860:	697b      	ldr	r3, [r7, #20]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3718      	adds	r7, #24
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	24033828 	.word	0x24033828
 800c870:	0801e440 	.word	0x0801e440
 800c874:	0800c9b5 	.word	0x0800c9b5
 800c878:	2403382c 	.word	0x2403382c

0800c87c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08a      	sub	sp, #40	@ 0x28
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c88a:	2300      	movs	r3, #0
 800c88c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10b      	bne.n	800c8ac <xTimerGenericCommand+0x30>
	__asm volatile
 800c894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	623b      	str	r3, [r7, #32]
}
 800c8a6:	bf00      	nop
 800c8a8:	bf00      	nop
 800c8aa:	e7fd      	b.n	800c8a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c8ac:	4b19      	ldr	r3, [pc, #100]	@ (800c914 <xTimerGenericCommand+0x98>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d02a      	beq.n	800c90a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2b05      	cmp	r3, #5
 800c8c4:	dc18      	bgt.n	800c8f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c8c6:	f7ff fead 	bl	800c624 <xTaskGetSchedulerState>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d109      	bne.n	800c8e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c8d0:	4b10      	ldr	r3, [pc, #64]	@ (800c914 <xTimerGenericCommand+0x98>)
 800c8d2:	6818      	ldr	r0, [r3, #0]
 800c8d4:	f107 0110 	add.w	r1, r7, #16
 800c8d8:	2300      	movs	r3, #0
 800c8da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8dc:	f7fe fc32 	bl	800b144 <xQueueGenericSend>
 800c8e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c8e2:	e012      	b.n	800c90a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c8e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c914 <xTimerGenericCommand+0x98>)
 800c8e6:	6818      	ldr	r0, [r3, #0]
 800c8e8:	f107 0110 	add.w	r1, r7, #16
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f7fe fc28 	bl	800b144 <xQueueGenericSend>
 800c8f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c8f6:	e008      	b.n	800c90a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c8f8:	4b06      	ldr	r3, [pc, #24]	@ (800c914 <xTimerGenericCommand+0x98>)
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	f107 0110 	add.w	r1, r7, #16
 800c900:	2300      	movs	r3, #0
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	f7fe fd20 	bl	800b348 <xQueueGenericSendFromISR>
 800c908:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3728      	adds	r7, #40	@ 0x28
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	24033828 	.word	0x24033828

0800c918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b088      	sub	sp, #32
 800c91c:	af02      	add	r7, sp, #8
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c922:	4b23      	ldr	r3, [pc, #140]	@ (800c9b0 <prvProcessExpiredTimer+0x98>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	3304      	adds	r3, #4
 800c930:	4618      	mov	r0, r3
 800c932:	f7fe fa4b 	bl	800adcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c93c:	f003 0304 	and.w	r3, r3, #4
 800c940:	2b00      	cmp	r3, #0
 800c942:	d023      	beq.n	800c98c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	699a      	ldr	r2, [r3, #24]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	18d1      	adds	r1, r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	6978      	ldr	r0, [r7, #20]
 800c952:	f000 f8d5 	bl	800cb00 <prvInsertTimerInActiveList>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d020      	beq.n	800c99e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c95c:	2300      	movs	r3, #0
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	2300      	movs	r3, #0
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	2100      	movs	r1, #0
 800c966:	6978      	ldr	r0, [r7, #20]
 800c968:	f7ff ff88 	bl	800c87c <xTimerGenericCommand>
 800c96c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d114      	bne.n	800c99e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	60fb      	str	r3, [r7, #12]
}
 800c986:	bf00      	nop
 800c988:	bf00      	nop
 800c98a:	e7fd      	b.n	800c988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c992:	f023 0301 	bic.w	r3, r3, #1
 800c996:	b2da      	uxtb	r2, r3
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	6978      	ldr	r0, [r7, #20]
 800c9a4:	4798      	blx	r3
}
 800c9a6:	bf00      	nop
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	24033820 	.word	0x24033820

0800c9b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9bc:	f107 0308 	add.w	r3, r7, #8
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 f859 	bl	800ca78 <prvGetNextExpireTime>
 800c9c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 f805 	bl	800c9dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c9d2:	f000 f8d7 	bl	800cb84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9d6:	bf00      	nop
 800c9d8:	e7f0      	b.n	800c9bc <prvTimerTask+0x8>
	...

0800c9dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c9e6:	f7ff fa01 	bl	800bdec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9ea:	f107 0308 	add.w	r3, r7, #8
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 f866 	bl	800cac0 <prvSampleTimeNow>
 800c9f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d130      	bne.n	800ca5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10a      	bne.n	800ca18 <prvProcessTimerOrBlockTask+0x3c>
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d806      	bhi.n	800ca18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca0a:	f7ff f9fd 	bl	800be08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca0e:	68f9      	ldr	r1, [r7, #12]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f7ff ff81 	bl	800c918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca16:	e024      	b.n	800ca62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d008      	beq.n	800ca30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca1e:	4b13      	ldr	r3, [pc, #76]	@ (800ca6c <prvProcessTimerOrBlockTask+0x90>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <prvProcessTimerOrBlockTask+0x50>
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e000      	b.n	800ca2e <prvProcessTimerOrBlockTask+0x52>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca30:	4b0f      	ldr	r3, [pc, #60]	@ (800ca70 <prvProcessTimerOrBlockTask+0x94>)
 800ca32:	6818      	ldr	r0, [r3, #0]
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	f7fe ff3d 	bl	800b8bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca42:	f7ff f9e1 	bl	800be08 <xTaskResumeAll>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca4c:	4b09      	ldr	r3, [pc, #36]	@ (800ca74 <prvProcessTimerOrBlockTask+0x98>)
 800ca4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	f3bf 8f6f 	isb	sy
}
 800ca5c:	e001      	b.n	800ca62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca5e:	f7ff f9d3 	bl	800be08 <xTaskResumeAll>
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	24033824 	.word	0x24033824
 800ca70:	24033828 	.word	0x24033828
 800ca74:	e000ed04 	.word	0xe000ed04

0800ca78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ca80:	4b0e      	ldr	r3, [pc, #56]	@ (800cabc <prvGetNextExpireTime+0x44>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <prvGetNextExpireTime+0x16>
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	e000      	b.n	800ca90 <prvGetNextExpireTime+0x18>
 800ca8e:	2200      	movs	r2, #0
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d105      	bne.n	800caa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca9c:	4b07      	ldr	r3, [pc, #28]	@ (800cabc <prvGetNextExpireTime+0x44>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	e001      	b.n	800caac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800caa8:	2300      	movs	r3, #0
 800caaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800caac:	68fb      	ldr	r3, [r7, #12]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3714      	adds	r7, #20
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	24033820 	.word	0x24033820

0800cac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cac8:	f7ff fa3c 	bl	800bf44 <xTaskGetTickCount>
 800cacc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cace:	4b0b      	ldr	r3, [pc, #44]	@ (800cafc <prvSampleTimeNow+0x3c>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d205      	bcs.n	800cae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cad8:	f000 f93a 	bl	800cd50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	e002      	b.n	800caea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800caea:	4a04      	ldr	r2, [pc, #16]	@ (800cafc <prvSampleTimeNow+0x3c>)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800caf0:	68fb      	ldr	r3, [r7, #12]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	24033830 	.word	0x24033830

0800cb00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d812      	bhi.n	800cb4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	1ad2      	subs	r2, r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d302      	bcc.n	800cb3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb34:	2301      	movs	r3, #1
 800cb36:	617b      	str	r3, [r7, #20]
 800cb38:	e01b      	b.n	800cb72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb3a:	4b10      	ldr	r3, [pc, #64]	@ (800cb7c <prvInsertTimerInActiveList+0x7c>)
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3304      	adds	r3, #4
 800cb42:	4619      	mov	r1, r3
 800cb44:	4610      	mov	r0, r2
 800cb46:	f7fe f908 	bl	800ad5a <vListInsert>
 800cb4a:	e012      	b.n	800cb72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d206      	bcs.n	800cb62 <prvInsertTimerInActiveList+0x62>
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d302      	bcc.n	800cb62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	617b      	str	r3, [r7, #20]
 800cb60:	e007      	b.n	800cb72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb62:	4b07      	ldr	r3, [pc, #28]	@ (800cb80 <prvInsertTimerInActiveList+0x80>)
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3304      	adds	r3, #4
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	f7fe f8f4 	bl	800ad5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cb72:	697b      	ldr	r3, [r7, #20]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	24033824 	.word	0x24033824
 800cb80:	24033820 	.word	0x24033820

0800cb84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08e      	sub	sp, #56	@ 0x38
 800cb88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb8a:	e0ce      	b.n	800cd2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	da19      	bge.n	800cbc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb92:	1d3b      	adds	r3, r7, #4
 800cb94:	3304      	adds	r3, #4
 800cb96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10b      	bne.n	800cbb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	61fb      	str	r3, [r7, #28]
}
 800cbb0:	bf00      	nop
 800cbb2:	bf00      	nop
 800cbb4:	e7fd      	b.n	800cbb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbbc:	6850      	ldr	r0, [r2, #4]
 800cbbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbc0:	6892      	ldr	r2, [r2, #8]
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f2c0 80ae 	blt.w	800cd2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d004      	beq.n	800cbe4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbdc:	3304      	adds	r3, #4
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fe f8f4 	bl	800adcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbe4:	463b      	mov	r3, r7
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7ff ff6a 	bl	800cac0 <prvSampleTimeNow>
 800cbec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b09      	cmp	r3, #9
 800cbf2:	f200 8097 	bhi.w	800cd24 <prvProcessReceivedCommands+0x1a0>
 800cbf6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbfc <prvProcessReceivedCommands+0x78>)
 800cbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfc:	0800cc25 	.word	0x0800cc25
 800cc00:	0800cc25 	.word	0x0800cc25
 800cc04:	0800cc25 	.word	0x0800cc25
 800cc08:	0800cc9b 	.word	0x0800cc9b
 800cc0c:	0800ccaf 	.word	0x0800ccaf
 800cc10:	0800ccfb 	.word	0x0800ccfb
 800cc14:	0800cc25 	.word	0x0800cc25
 800cc18:	0800cc25 	.word	0x0800cc25
 800cc1c:	0800cc9b 	.word	0x0800cc9b
 800cc20:	0800ccaf 	.word	0x0800ccaf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc2a:	f043 0301 	orr.w	r3, r3, #1
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	18d1      	adds	r1, r2, r3
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc44:	f7ff ff5c 	bl	800cb00 <prvInsertTimerInActiveList>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d06c      	beq.n	800cd28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc50:	6a1b      	ldr	r3, [r3, #32]
 800cc52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d061      	beq.n	800cd28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc68:	699b      	ldr	r3, [r3, #24]
 800cc6a:	441a      	add	r2, r3
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	2300      	movs	r3, #0
 800cc72:	2100      	movs	r1, #0
 800cc74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc76:	f7ff fe01 	bl	800c87c <xTimerGenericCommand>
 800cc7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d152      	bne.n	800cd28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	61bb      	str	r3, [r7, #24]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cca0:	f023 0301 	bic.w	r3, r3, #1
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ccac:	e03d      	b.n	800cd2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ccae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccb4:	f043 0301 	orr.w	r3, r3, #1
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ccc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc8:	699b      	ldr	r3, [r3, #24]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10b      	bne.n	800cce6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	617b      	str	r3, [r7, #20]
}
 800cce0:	bf00      	nop
 800cce2:	bf00      	nop
 800cce4:	e7fd      	b.n	800cce2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce8:	699a      	ldr	r2, [r3, #24]
 800ccea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccec:	18d1      	adds	r1, r2, r3
 800ccee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccf4:	f7ff ff04 	bl	800cb00 <prvInsertTimerInActiveList>
					break;
 800ccf8:	e017      	b.n	800cd2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ccfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd00:	f003 0302 	and.w	r3, r3, #2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d103      	bne.n	800cd10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cd08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd0a:	f000 fbe5 	bl	800d4d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd0e:	e00c      	b.n	800cd2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd16:	f023 0301 	bic.w	r3, r3, #1
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cd22:	e002      	b.n	800cd2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cd24:	bf00      	nop
 800cd26:	e000      	b.n	800cd2a <prvProcessReceivedCommands+0x1a6>
					break;
 800cd28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd2a:	4b08      	ldr	r3, [pc, #32]	@ (800cd4c <prvProcessReceivedCommands+0x1c8>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	1d39      	adds	r1, r7, #4
 800cd30:	2200      	movs	r2, #0
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe fba6 	bl	800b484 <xQueueReceive>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f47f af26 	bne.w	800cb8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	3730      	adds	r7, #48	@ 0x30
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	24033828 	.word	0x24033828

0800cd50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b088      	sub	sp, #32
 800cd54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd56:	e049      	b.n	800cdec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd58:	4b2e      	ldr	r3, [pc, #184]	@ (800ce14 <prvSwitchTimerLists+0xc4>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd62:	4b2c      	ldr	r3, [pc, #176]	@ (800ce14 <prvSwitchTimerLists+0xc4>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe f82b 	bl	800adcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd84:	f003 0304 	and.w	r3, r3, #4
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d02f      	beq.n	800cdec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	699b      	ldr	r3, [r3, #24]
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	4413      	add	r3, r2
 800cd94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d90e      	bls.n	800cdbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdaa:	4b1a      	ldr	r3, [pc, #104]	@ (800ce14 <prvSwitchTimerLists+0xc4>)
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	3304      	adds	r3, #4
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	f7fd ffd0 	bl	800ad5a <vListInsert>
 800cdba:	e017      	b.n	800cdec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f7ff fd58 	bl	800c87c <xTimerGenericCommand>
 800cdcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10b      	bne.n	800cdec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	603b      	str	r3, [r7, #0]
}
 800cde6:	bf00      	nop
 800cde8:	bf00      	nop
 800cdea:	e7fd      	b.n	800cde8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cdec:	4b09      	ldr	r3, [pc, #36]	@ (800ce14 <prvSwitchTimerLists+0xc4>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1b0      	bne.n	800cd58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cdf6:	4b07      	ldr	r3, [pc, #28]	@ (800ce14 <prvSwitchTimerLists+0xc4>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cdfc:	4b06      	ldr	r3, [pc, #24]	@ (800ce18 <prvSwitchTimerLists+0xc8>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a04      	ldr	r2, [pc, #16]	@ (800ce14 <prvSwitchTimerLists+0xc4>)
 800ce02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce04:	4a04      	ldr	r2, [pc, #16]	@ (800ce18 <prvSwitchTimerLists+0xc8>)
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	6013      	str	r3, [r2, #0]
}
 800ce0a:	bf00      	nop
 800ce0c:	3718      	adds	r7, #24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	24033820 	.word	0x24033820
 800ce18:	24033824 	.word	0x24033824

0800ce1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce22:	f000 f969 	bl	800d0f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce26:	4b15      	ldr	r3, [pc, #84]	@ (800ce7c <prvCheckForValidListAndQueue+0x60>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d120      	bne.n	800ce70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce2e:	4814      	ldr	r0, [pc, #80]	@ (800ce80 <prvCheckForValidListAndQueue+0x64>)
 800ce30:	f7fd ff42 	bl	800acb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce34:	4813      	ldr	r0, [pc, #76]	@ (800ce84 <prvCheckForValidListAndQueue+0x68>)
 800ce36:	f7fd ff3f 	bl	800acb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce3a:	4b13      	ldr	r3, [pc, #76]	@ (800ce88 <prvCheckForValidListAndQueue+0x6c>)
 800ce3c:	4a10      	ldr	r2, [pc, #64]	@ (800ce80 <prvCheckForValidListAndQueue+0x64>)
 800ce3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce40:	4b12      	ldr	r3, [pc, #72]	@ (800ce8c <prvCheckForValidListAndQueue+0x70>)
 800ce42:	4a10      	ldr	r2, [pc, #64]	@ (800ce84 <prvCheckForValidListAndQueue+0x68>)
 800ce44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce46:	2300      	movs	r3, #0
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	4b11      	ldr	r3, [pc, #68]	@ (800ce90 <prvCheckForValidListAndQueue+0x74>)
 800ce4c:	4a11      	ldr	r2, [pc, #68]	@ (800ce94 <prvCheckForValidListAndQueue+0x78>)
 800ce4e:	2110      	movs	r1, #16
 800ce50:	200a      	movs	r0, #10
 800ce52:	f7fe f84f 	bl	800aef4 <xQueueGenericCreateStatic>
 800ce56:	4603      	mov	r3, r0
 800ce58:	4a08      	ldr	r2, [pc, #32]	@ (800ce7c <prvCheckForValidListAndQueue+0x60>)
 800ce5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce5c:	4b07      	ldr	r3, [pc, #28]	@ (800ce7c <prvCheckForValidListAndQueue+0x60>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d005      	beq.n	800ce70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce64:	4b05      	ldr	r3, [pc, #20]	@ (800ce7c <prvCheckForValidListAndQueue+0x60>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	490b      	ldr	r1, [pc, #44]	@ (800ce98 <prvCheckForValidListAndQueue+0x7c>)
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fe fcfc 	bl	800b868 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce70:	f000 f974 	bl	800d15c <vPortExitCritical>
}
 800ce74:	bf00      	nop
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	24033828 	.word	0x24033828
 800ce80:	240337f8 	.word	0x240337f8
 800ce84:	2403380c 	.word	0x2403380c
 800ce88:	24033820 	.word	0x24033820
 800ce8c:	24033824 	.word	0x24033824
 800ce90:	240338d4 	.word	0x240338d4
 800ce94:	24033834 	.word	0x24033834
 800ce98:	0801e448 	.word	0x0801e448

0800ce9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3b04      	subs	r3, #4
 800ceac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ceb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	3b04      	subs	r3, #4
 800ceba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	f023 0201 	bic.w	r2, r3, #1
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3b04      	subs	r3, #4
 800ceca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cecc:	4a0c      	ldr	r2, [pc, #48]	@ (800cf00 <pxPortInitialiseStack+0x64>)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3b14      	subs	r3, #20
 800ced6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	3b04      	subs	r3, #4
 800cee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f06f 0202 	mvn.w	r2, #2
 800ceea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	3b20      	subs	r3, #32
 800cef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cef2:	68fb      	ldr	r3, [r7, #12]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	0800cf05 	.word	0x0800cf05

0800cf04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf0e:	4b13      	ldr	r3, [pc, #76]	@ (800cf5c <prvTaskExitError+0x58>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf16:	d00b      	beq.n	800cf30 <prvTaskExitError+0x2c>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	60fb      	str	r3, [r7, #12]
}
 800cf2a:	bf00      	nop
 800cf2c:	bf00      	nop
 800cf2e:	e7fd      	b.n	800cf2c <prvTaskExitError+0x28>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	60bb      	str	r3, [r7, #8]
}
 800cf42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf44:	bf00      	nop
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d0fc      	beq.n	800cf46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf4c:	bf00      	nop
 800cf4e:	bf00      	nop
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	24000014 	.word	0x24000014

0800cf60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf60:	4b07      	ldr	r3, [pc, #28]	@ (800cf80 <pxCurrentTCBConst2>)
 800cf62:	6819      	ldr	r1, [r3, #0]
 800cf64:	6808      	ldr	r0, [r1, #0]
 800cf66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6a:	f380 8809 	msr	PSP, r0
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f04f 0000 	mov.w	r0, #0
 800cf76:	f380 8811 	msr	BASEPRI, r0
 800cf7a:	4770      	bx	lr
 800cf7c:	f3af 8000 	nop.w

0800cf80 <pxCurrentTCBConst2>:
 800cf80:	240332f8 	.word	0x240332f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop

0800cf88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf88:	4808      	ldr	r0, [pc, #32]	@ (800cfac <prvPortStartFirstTask+0x24>)
 800cf8a:	6800      	ldr	r0, [r0, #0]
 800cf8c:	6800      	ldr	r0, [r0, #0]
 800cf8e:	f380 8808 	msr	MSP, r0
 800cf92:	f04f 0000 	mov.w	r0, #0
 800cf96:	f380 8814 	msr	CONTROL, r0
 800cf9a:	b662      	cpsie	i
 800cf9c:	b661      	cpsie	f
 800cf9e:	f3bf 8f4f 	dsb	sy
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	df00      	svc	0
 800cfa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cfaa:	bf00      	nop
 800cfac:	e000ed08 	.word	0xe000ed08

0800cfb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cfb6:	4b47      	ldr	r3, [pc, #284]	@ (800d0d4 <xPortStartScheduler+0x124>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a47      	ldr	r2, [pc, #284]	@ (800d0d8 <xPortStartScheduler+0x128>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d10b      	bne.n	800cfd8 <xPortStartScheduler+0x28>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	613b      	str	r3, [r7, #16]
}
 800cfd2:	bf00      	nop
 800cfd4:	bf00      	nop
 800cfd6:	e7fd      	b.n	800cfd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cfd8:	4b3e      	ldr	r3, [pc, #248]	@ (800d0d4 <xPortStartScheduler+0x124>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a3f      	ldr	r2, [pc, #252]	@ (800d0dc <xPortStartScheduler+0x12c>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d10b      	bne.n	800cffa <xPortStartScheduler+0x4a>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	60fb      	str	r3, [r7, #12]
}
 800cff4:	bf00      	nop
 800cff6:	bf00      	nop
 800cff8:	e7fd      	b.n	800cff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cffa:	4b39      	ldr	r3, [pc, #228]	@ (800d0e0 <xPortStartScheduler+0x130>)
 800cffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	b2db      	uxtb	r3, r3
 800d004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	22ff      	movs	r2, #255	@ 0xff
 800d00a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	b2db      	uxtb	r3, r3
 800d012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d014:	78fb      	ldrb	r3, [r7, #3]
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	4b31      	ldr	r3, [pc, #196]	@ (800d0e4 <xPortStartScheduler+0x134>)
 800d020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d022:	4b31      	ldr	r3, [pc, #196]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d024:	2207      	movs	r2, #7
 800d026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d028:	e009      	b.n	800d03e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d02a:	4b2f      	ldr	r3, [pc, #188]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3b01      	subs	r3, #1
 800d030:	4a2d      	ldr	r2, [pc, #180]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d034:	78fb      	ldrb	r3, [r7, #3]
 800d036:	b2db      	uxtb	r3, r3
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	b2db      	uxtb	r3, r3
 800d042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d046:	2b80      	cmp	r3, #128	@ 0x80
 800d048:	d0ef      	beq.n	800d02a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d04a:	4b27      	ldr	r3, [pc, #156]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f1c3 0307 	rsb	r3, r3, #7
 800d052:	2b04      	cmp	r3, #4
 800d054:	d00b      	beq.n	800d06e <xPortStartScheduler+0xbe>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	60bb      	str	r3, [r7, #8]
}
 800d068:	bf00      	nop
 800d06a:	bf00      	nop
 800d06c:	e7fd      	b.n	800d06a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d06e:	4b1e      	ldr	r3, [pc, #120]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	021b      	lsls	r3, r3, #8
 800d074:	4a1c      	ldr	r2, [pc, #112]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d078:	4b1b      	ldr	r3, [pc, #108]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d080:	4a19      	ldr	r2, [pc, #100]	@ (800d0e8 <xPortStartScheduler+0x138>)
 800d082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	b2da      	uxtb	r2, r3
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d08c:	4b17      	ldr	r3, [pc, #92]	@ (800d0ec <xPortStartScheduler+0x13c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a16      	ldr	r2, [pc, #88]	@ (800d0ec <xPortStartScheduler+0x13c>)
 800d092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d098:	4b14      	ldr	r3, [pc, #80]	@ (800d0ec <xPortStartScheduler+0x13c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a13      	ldr	r2, [pc, #76]	@ (800d0ec <xPortStartScheduler+0x13c>)
 800d09e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d0a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0a4:	f000 f8da 	bl	800d25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0a8:	4b11      	ldr	r3, [pc, #68]	@ (800d0f0 <xPortStartScheduler+0x140>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0ae:	f000 f8f9 	bl	800d2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0b2:	4b10      	ldr	r3, [pc, #64]	@ (800d0f4 <xPortStartScheduler+0x144>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a0f      	ldr	r2, [pc, #60]	@ (800d0f4 <xPortStartScheduler+0x144>)
 800d0b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d0bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d0be:	f7ff ff63 	bl	800cf88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d0c2:	f7ff f809 	bl	800c0d8 <vTaskSwitchContext>
	prvTaskExitError();
 800d0c6:	f7ff ff1d 	bl	800cf04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	e000ed00 	.word	0xe000ed00
 800d0d8:	410fc271 	.word	0x410fc271
 800d0dc:	410fc270 	.word	0x410fc270
 800d0e0:	e000e400 	.word	0xe000e400
 800d0e4:	24033924 	.word	0x24033924
 800d0e8:	24033928 	.word	0x24033928
 800d0ec:	e000ed20 	.word	0xe000ed20
 800d0f0:	24000014 	.word	0x24000014
 800d0f4:	e000ef34 	.word	0xe000ef34

0800d0f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	607b      	str	r3, [r7, #4]
}
 800d110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d112:	4b10      	ldr	r3, [pc, #64]	@ (800d154 <vPortEnterCritical+0x5c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	3301      	adds	r3, #1
 800d118:	4a0e      	ldr	r2, [pc, #56]	@ (800d154 <vPortEnterCritical+0x5c>)
 800d11a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d11c:	4b0d      	ldr	r3, [pc, #52]	@ (800d154 <vPortEnterCritical+0x5c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b01      	cmp	r3, #1
 800d122:	d110      	bne.n	800d146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d124:	4b0c      	ldr	r3, [pc, #48]	@ (800d158 <vPortEnterCritical+0x60>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00b      	beq.n	800d146 <vPortEnterCritical+0x4e>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	603b      	str	r3, [r7, #0]
}
 800d140:	bf00      	nop
 800d142:	bf00      	nop
 800d144:	e7fd      	b.n	800d142 <vPortEnterCritical+0x4a>
	}
}
 800d146:	bf00      	nop
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	24000014 	.word	0x24000014
 800d158:	e000ed04 	.word	0xe000ed04

0800d15c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d162:	4b12      	ldr	r3, [pc, #72]	@ (800d1ac <vPortExitCritical+0x50>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d10b      	bne.n	800d182 <vPortExitCritical+0x26>
	__asm volatile
 800d16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d16e:	f383 8811 	msr	BASEPRI, r3
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	607b      	str	r3, [r7, #4]
}
 800d17c:	bf00      	nop
 800d17e:	bf00      	nop
 800d180:	e7fd      	b.n	800d17e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d182:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ac <vPortExitCritical+0x50>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3b01      	subs	r3, #1
 800d188:	4a08      	ldr	r2, [pc, #32]	@ (800d1ac <vPortExitCritical+0x50>)
 800d18a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d18c:	4b07      	ldr	r3, [pc, #28]	@ (800d1ac <vPortExitCritical+0x50>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d105      	bne.n	800d1a0 <vPortExitCritical+0x44>
 800d194:	2300      	movs	r3, #0
 800d196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	f383 8811 	msr	BASEPRI, r3
}
 800d19e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	24000014 	.word	0x24000014

0800d1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1b0:	f3ef 8009 	mrs	r0, PSP
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	4b15      	ldr	r3, [pc, #84]	@ (800d210 <pxCurrentTCBConst>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	f01e 0f10 	tst.w	lr, #16
 800d1c0:	bf08      	it	eq
 800d1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ca:	6010      	str	r0, [r2, #0]
 800d1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d1d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d1d4:	f380 8811 	msr	BASEPRI, r0
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f7fe ff7a 	bl	800c0d8 <vTaskSwitchContext>
 800d1e4:	f04f 0000 	mov.w	r0, #0
 800d1e8:	f380 8811 	msr	BASEPRI, r0
 800d1ec:	bc09      	pop	{r0, r3}
 800d1ee:	6819      	ldr	r1, [r3, #0]
 800d1f0:	6808      	ldr	r0, [r1, #0]
 800d1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f6:	f01e 0f10 	tst.w	lr, #16
 800d1fa:	bf08      	it	eq
 800d1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d200:	f380 8809 	msr	PSP, r0
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	f3af 8000 	nop.w

0800d210 <pxCurrentTCBConst>:
 800d210:	240332f8 	.word	0x240332f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop

0800d218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	607b      	str	r3, [r7, #4]
}
 800d230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d232:	f7fe fe97 	bl	800bf64 <xTaskIncrementTick>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d23c:	4b06      	ldr	r3, [pc, #24]	@ (800d258 <xPortSysTickHandler+0x40>)
 800d23e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	2300      	movs	r3, #0
 800d246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	f383 8811 	msr	BASEPRI, r3
}
 800d24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d250:	bf00      	nop
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	e000ed04 	.word	0xe000ed04

0800d25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d25c:	b480      	push	{r7}
 800d25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d260:	4b0b      	ldr	r3, [pc, #44]	@ (800d290 <vPortSetupTimerInterrupt+0x34>)
 800d262:	2200      	movs	r2, #0
 800d264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d266:	4b0b      	ldr	r3, [pc, #44]	@ (800d294 <vPortSetupTimerInterrupt+0x38>)
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d26c:	4b0a      	ldr	r3, [pc, #40]	@ (800d298 <vPortSetupTimerInterrupt+0x3c>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a0a      	ldr	r2, [pc, #40]	@ (800d29c <vPortSetupTimerInterrupt+0x40>)
 800d272:	fba2 2303 	umull	r2, r3, r2, r3
 800d276:	099b      	lsrs	r3, r3, #6
 800d278:	4a09      	ldr	r2, [pc, #36]	@ (800d2a0 <vPortSetupTimerInterrupt+0x44>)
 800d27a:	3b01      	subs	r3, #1
 800d27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d27e:	4b04      	ldr	r3, [pc, #16]	@ (800d290 <vPortSetupTimerInterrupt+0x34>)
 800d280:	2207      	movs	r2, #7
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	e000e010 	.word	0xe000e010
 800d294:	e000e018 	.word	0xe000e018
 800d298:	24000004 	.word	0x24000004
 800d29c:	10624dd3 	.word	0x10624dd3
 800d2a0:	e000e014 	.word	0xe000e014

0800d2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d2b4 <vPortEnableVFP+0x10>
 800d2a8:	6801      	ldr	r1, [r0, #0]
 800d2aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d2ae:	6001      	str	r1, [r0, #0]
 800d2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d2b2:	bf00      	nop
 800d2b4:	e000ed88 	.word	0xe000ed88

0800d2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2be:	f3ef 8305 	mrs	r3, IPSR
 800d2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b0f      	cmp	r3, #15
 800d2c8:	d915      	bls.n	800d2f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d2ca:	4a18      	ldr	r2, [pc, #96]	@ (800d32c <vPortValidateInterruptPriority+0x74>)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d2d4:	4b16      	ldr	r3, [pc, #88]	@ (800d330 <vPortValidateInterruptPriority+0x78>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	7afa      	ldrb	r2, [r7, #11]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d20b      	bcs.n	800d2f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	607b      	str	r3, [r7, #4]
}
 800d2f0:	bf00      	nop
 800d2f2:	bf00      	nop
 800d2f4:	e7fd      	b.n	800d2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d334 <vPortValidateInterruptPriority+0x7c>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d338 <vPortValidateInterruptPriority+0x80>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	429a      	cmp	r2, r3
 800d304:	d90b      	bls.n	800d31e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	603b      	str	r3, [r7, #0]
}
 800d318:	bf00      	nop
 800d31a:	bf00      	nop
 800d31c:	e7fd      	b.n	800d31a <vPortValidateInterruptPriority+0x62>
	}
 800d31e:	bf00      	nop
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	e000e3f0 	.word	0xe000e3f0
 800d330:	24033924 	.word	0x24033924
 800d334:	e000ed0c 	.word	0xe000ed0c
 800d338:	24033928 	.word	0x24033928

0800d33c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08a      	sub	sp, #40	@ 0x28
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d344:	2300      	movs	r3, #0
 800d346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d348:	f7fe fd50 	bl	800bdec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d34c:	4b5c      	ldr	r3, [pc, #368]	@ (800d4c0 <pvPortMalloc+0x184>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d101      	bne.n	800d358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d354:	f000 f924 	bl	800d5a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d358:	4b5a      	ldr	r3, [pc, #360]	@ (800d4c4 <pvPortMalloc+0x188>)
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4013      	ands	r3, r2
 800d360:	2b00      	cmp	r3, #0
 800d362:	f040 8095 	bne.w	800d490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01e      	beq.n	800d3aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d36c:	2208      	movs	r2, #8
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4413      	add	r3, r2
 800d372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f003 0307 	and.w	r3, r3, #7
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d015      	beq.n	800d3aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f023 0307 	bic.w	r3, r3, #7
 800d384:	3308      	adds	r3, #8
 800d386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00b      	beq.n	800d3aa <pvPortMalloc+0x6e>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	617b      	str	r3, [r7, #20]
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop
 800d3a8:	e7fd      	b.n	800d3a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d06f      	beq.n	800d490 <pvPortMalloc+0x154>
 800d3b0:	4b45      	ldr	r3, [pc, #276]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d86a      	bhi.n	800d490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3ba:	4b44      	ldr	r3, [pc, #272]	@ (800d4cc <pvPortMalloc+0x190>)
 800d3bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3be:	4b43      	ldr	r3, [pc, #268]	@ (800d4cc <pvPortMalloc+0x190>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3c4:	e004      	b.n	800d3d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d903      	bls.n	800d3e2 <pvPortMalloc+0xa6>
 800d3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1f1      	bne.n	800d3c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d3e2:	4b37      	ldr	r3, [pc, #220]	@ (800d4c0 <pvPortMalloc+0x184>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d051      	beq.n	800d490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2208      	movs	r2, #8
 800d3f2:	4413      	add	r3, r2
 800d3f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	6a3b      	ldr	r3, [r7, #32]
 800d3fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d400:	685a      	ldr	r2, [r3, #4]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	1ad2      	subs	r2, r2, r3
 800d406:	2308      	movs	r3, #8
 800d408:	005b      	lsls	r3, r3, #1
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d920      	bls.n	800d450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4413      	add	r3, r2
 800d414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	f003 0307 	and.w	r3, r3, #7
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00b      	beq.n	800d438 <pvPortMalloc+0xfc>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d424:	f383 8811 	msr	BASEPRI, r3
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	613b      	str	r3, [r7, #16]
}
 800d432:	bf00      	nop
 800d434:	bf00      	nop
 800d436:	e7fd      	b.n	800d434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	1ad2      	subs	r2, r2, r3
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d44a:	69b8      	ldr	r0, [r7, #24]
 800d44c:	f000 f90c 	bl	800d668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d450:	4b1d      	ldr	r3, [pc, #116]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	4a1b      	ldr	r2, [pc, #108]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d45c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d45e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	4b1b      	ldr	r3, [pc, #108]	@ (800d4d0 <pvPortMalloc+0x194>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	429a      	cmp	r2, r3
 800d468:	d203      	bcs.n	800d472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d46a:	4b17      	ldr	r3, [pc, #92]	@ (800d4c8 <pvPortMalloc+0x18c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a18      	ldr	r2, [pc, #96]	@ (800d4d0 <pvPortMalloc+0x194>)
 800d470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	4b13      	ldr	r3, [pc, #76]	@ (800d4c4 <pvPortMalloc+0x188>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	431a      	orrs	r2, r3
 800d47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d47e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d486:	4b13      	ldr	r3, [pc, #76]	@ (800d4d4 <pvPortMalloc+0x198>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	3301      	adds	r3, #1
 800d48c:	4a11      	ldr	r2, [pc, #68]	@ (800d4d4 <pvPortMalloc+0x198>)
 800d48e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d490:	f7fe fcba 	bl	800be08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	f003 0307 	and.w	r3, r3, #7
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00b      	beq.n	800d4b6 <pvPortMalloc+0x17a>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	60fb      	str	r3, [r7, #12]
}
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	e7fd      	b.n	800d4b2 <pvPortMalloc+0x176>
	return pvReturn;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3728      	adds	r7, #40	@ 0x28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	24064674 	.word	0x24064674
 800d4c4:	24064688 	.word	0x24064688
 800d4c8:	24064678 	.word	0x24064678
 800d4cc:	2406466c 	.word	0x2406466c
 800d4d0:	2406467c 	.word	0x2406467c
 800d4d4:	24064680 	.word	0x24064680

0800d4d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d04f      	beq.n	800d58a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d4ea:	2308      	movs	r3, #8
 800d4ec:	425b      	negs	r3, r3
 800d4ee:	697a      	ldr	r2, [r7, #20]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	4b25      	ldr	r3, [pc, #148]	@ (800d594 <vPortFree+0xbc>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4013      	ands	r3, r2
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10b      	bne.n	800d51e <vPortFree+0x46>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	60fb      	str	r3, [r7, #12]
}
 800d518:	bf00      	nop
 800d51a:	bf00      	nop
 800d51c:	e7fd      	b.n	800d51a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00b      	beq.n	800d53e <vPortFree+0x66>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	60bb      	str	r3, [r7, #8]
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	e7fd      	b.n	800d53a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	4b14      	ldr	r3, [pc, #80]	@ (800d594 <vPortFree+0xbc>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4013      	ands	r3, r2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d01e      	beq.n	800d58a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d11a      	bne.n	800d58a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	4b0e      	ldr	r3, [pc, #56]	@ (800d594 <vPortFree+0xbc>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	43db      	mvns	r3, r3
 800d55e:	401a      	ands	r2, r3
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d564:	f7fe fc42 	bl	800bdec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	4b0a      	ldr	r3, [pc, #40]	@ (800d598 <vPortFree+0xc0>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4413      	add	r3, r2
 800d572:	4a09      	ldr	r2, [pc, #36]	@ (800d598 <vPortFree+0xc0>)
 800d574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d576:	6938      	ldr	r0, [r7, #16]
 800d578:	f000 f876 	bl	800d668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d57c:	4b07      	ldr	r3, [pc, #28]	@ (800d59c <vPortFree+0xc4>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3301      	adds	r3, #1
 800d582:	4a06      	ldr	r2, [pc, #24]	@ (800d59c <vPortFree+0xc4>)
 800d584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d586:	f7fe fc3f 	bl	800be08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d58a:	bf00      	nop
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	24064688 	.word	0x24064688
 800d598:	24064678 	.word	0x24064678
 800d59c:	24064684 	.word	0x24064684

0800d5a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5a6:	4b29      	ldr	r3, [pc, #164]	@ (800d64c <prvHeapInit+0xac>)
 800d5a8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5aa:	4b29      	ldr	r3, [pc, #164]	@ (800d650 <prvHeapInit+0xb0>)
 800d5ac:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f003 0307 	and.w	r3, r3, #7
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00c      	beq.n	800d5d2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3307      	adds	r3, #7
 800d5bc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f023 0307 	bic.w	r3, r3, #7
 800d5c4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	1ad3      	subs	r3, r2, r3
 800d5cc:	4a20      	ldr	r2, [pc, #128]	@ (800d650 <prvHeapInit+0xb0>)
 800d5ce:	4413      	add	r3, r2
 800d5d0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5d6:	4a1f      	ldr	r2, [pc, #124]	@ (800d654 <prvHeapInit+0xb4>)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d654 <prvHeapInit+0xb4>)
 800d5de:	2200      	movs	r2, #0
 800d5e0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d5ea:	2208      	movs	r2, #8
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	1a9b      	subs	r3, r3, r2
 800d5f0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f023 0307 	bic.w	r3, r3, #7
 800d5f8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	4a16      	ldr	r2, [pc, #88]	@ (800d658 <prvHeapInit+0xb8>)
 800d5fe:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d600:	4b15      	ldr	r3, [pc, #84]	@ (800d658 <prvHeapInit+0xb8>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2200      	movs	r2, #0
 800d606:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d608:	4b13      	ldr	r3, [pc, #76]	@ (800d658 <prvHeapInit+0xb8>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2200      	movs	r2, #0
 800d60e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	1ad2      	subs	r2, r2, r3
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d61e:	4b0e      	ldr	r3, [pc, #56]	@ (800d658 <prvHeapInit+0xb8>)
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	4a0c      	ldr	r2, [pc, #48]	@ (800d65c <prvHeapInit+0xbc>)
 800d62c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	4a0b      	ldr	r2, [pc, #44]	@ (800d660 <prvHeapInit+0xc0>)
 800d634:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d636:	4b0b      	ldr	r3, [pc, #44]	@ (800d664 <prvHeapInit+0xc4>)
 800d638:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d63c:	601a      	str	r2, [r3, #0]
}
 800d63e:	bf00      	nop
 800d640:	3714      	adds	r7, #20
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	00030d40 	.word	0x00030d40
 800d650:	2403392c 	.word	0x2403392c
 800d654:	2406466c 	.word	0x2406466c
 800d658:	24064674 	.word	0x24064674
 800d65c:	2406467c 	.word	0x2406467c
 800d660:	24064678 	.word	0x24064678
 800d664:	24064688 	.word	0x24064688

0800d668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d670:	4b28      	ldr	r3, [pc, #160]	@ (800d714 <prvInsertBlockIntoFreeList+0xac>)
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	e002      	b.n	800d67c <prvInsertBlockIntoFreeList+0x14>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	60fb      	str	r3, [r7, #12]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	429a      	cmp	r2, r3
 800d684:	d8f7      	bhi.n	800d676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	4413      	add	r3, r2
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	429a      	cmp	r2, r3
 800d696:	d108      	bne.n	800d6aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	441a      	add	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	441a      	add	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d118      	bne.n	800d6f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	4b15      	ldr	r3, [pc, #84]	@ (800d718 <prvInsertBlockIntoFreeList+0xb0>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d00d      	beq.n	800d6e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	441a      	add	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	e008      	b.n	800d6f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d718 <prvInsertBlockIntoFreeList+0xb0>)
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	e003      	b.n	800d6f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d002      	beq.n	800d706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d706:	bf00      	nop
 800d708:	3714      	adds	r7, #20
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	2406466c 	.word	0x2406466c
 800d718:	24064674 	.word	0x24064674

0800d71c <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800d71c:	4b04      	ldr	r3, [pc, #16]	@ (800d730 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	b10a      	cbz	r2, 800d726 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xa>
 800d722:	4803      	ldr	r0, [pc, #12]	@ (800d730 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800d724:	4770      	bx	lr
 800d726:	4a03      	ldr	r2, [pc, #12]	@ (800d734 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x18>)
 800d728:	4801      	ldr	r0, [pc, #4]	@ (800d730 <rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x14>)
 800d72a:	6812      	ldr	r2, [r2, #0]
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	4770      	bx	lr
 800d730:	24000020 	.word	0x24000020
 800d734:	24000e10 	.word	0x24000e10

0800d738 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800d738:	4a02      	ldr	r2, [pc, #8]	@ (800d744 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 800d73a:	4b03      	ldr	r3, [pc, #12]	@ (800d748 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 800d73c:	6812      	ldr	r2, [r2, #0]
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	24000e10 	.word	0x24000e10
 800d748:	24000020 	.word	0x24000020

0800d74c <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 800d74c:	f004 b8be 	b.w	80118cc <autoware_control_msgs__msg__Control__init>

0800d750 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 800d750:	f004 b912 	b.w	8011978 <autoware_control_msgs__msg__Control__fini>

0800d754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800d754:	b510      	push	{r4, lr}
 800d756:	4c0c      	ldr	r4, [pc, #48]	@ (800d788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 800d758:	f001 f91e 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d75c:	60e0      	str	r0, [r4, #12]
 800d75e:	f001 f91b 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d762:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d764:	f000 f81a 	bl	800d79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800d768:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d76c:	f000 f832 	bl	800d7d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800d770:	4b06      	ldr	r3, [pc, #24]	@ (800d78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800d772:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	b10a      	cbz	r2, 800d77e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 800d77a:	4804      	ldr	r0, [pc, #16]	@ (800d78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	4a04      	ldr	r2, [pc, #16]	@ (800d790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 800d780:	4802      	ldr	r0, [pc, #8]	@ (800d78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 800d782:	6812      	ldr	r2, [r2, #0]
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	bd10      	pop	{r4, pc}
 800d788:	2400002c 	.word	0x2400002c
 800d78c:	2400011c 	.word	0x2400011c
 800d790:	24000e14 	.word	0x24000e14

0800d794 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 800d794:	f004 b904 	b.w	80119a0 <autoware_control_msgs__msg__Lateral__init>

0800d798 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 800d798:	f004 b926 	b.w	80119e8 <autoware_control_msgs__msg__Lateral__fini>

0800d79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800d79c:	b510      	push	{r4, lr}
 800d79e:	4c08      	ldr	r4, [pc, #32]	@ (800d7c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 800d7a0:	f001 f8fa 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d7a4:	60e0      	str	r0, [r4, #12]
 800d7a6:	f001 f8f7 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d7aa:	4b06      	ldr	r3, [pc, #24]	@ (800d7c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800d7ac:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	b10a      	cbz	r2, 800d7b6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 800d7b2:	4804      	ldr	r0, [pc, #16]	@ (800d7c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800d7b4:	bd10      	pop	{r4, pc}
 800d7b6:	4a04      	ldr	r2, [pc, #16]	@ (800d7c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 800d7b8:	4802      	ldr	r0, [pc, #8]	@ (800d7c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 800d7ba:	6812      	ldr	r2, [r2, #0]
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	bd10      	pop	{r4, pc}
 800d7c0:	24000128 	.word	0x24000128
 800d7c4:	24000254 	.word	0x24000254
 800d7c8:	24000e14 	.word	0x24000e14

0800d7cc <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 800d7cc:	f004 b918 	b.w	8011a00 <autoware_control_msgs__msg__Longitudinal__init>

0800d7d0 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 800d7d0:	f004 b93a 	b.w	8011a48 <autoware_control_msgs__msg__Longitudinal__fini>

0800d7d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800d7d4:	b510      	push	{r4, lr}
 800d7d6:	4c08      	ldr	r4, [pc, #32]	@ (800d7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 800d7d8:	f001 f8de 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d7dc:	60e0      	str	r0, [r4, #12]
 800d7de:	f001 f8db 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d7e2:	4b06      	ldr	r3, [pc, #24]	@ (800d7fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800d7e4:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	b10a      	cbz	r2, 800d7ee <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 800d7ea:	4804      	ldr	r0, [pc, #16]	@ (800d7fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800d7ec:	bd10      	pop	{r4, pc}
 800d7ee:	4a04      	ldr	r2, [pc, #16]	@ (800d800 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 800d7f0:	4802      	ldr	r0, [pc, #8]	@ (800d7fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 800d7f2:	6812      	ldr	r2, [r2, #0]
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	bd10      	pop	{r4, pc}
 800d7f8:	24000260 	.word	0x24000260
 800d7fc:	24000404 	.word	0x24000404
 800d800:	24000e14 	.word	0x24000e14

0800d804 <get_serialized_size_autoware_control_msgs__msg__Control>:
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d806:	4604      	mov	r4, r0
 800d808:	b1c8      	cbz	r0, 800d83e <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 800d80a:	460f      	mov	r7, r1
 800d80c:	f001 f8d2 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d810:	4606      	mov	r6, r0
 800d812:	f104 0008 	add.w	r0, r4, #8
 800d816:	443e      	add	r6, r7
 800d818:	4631      	mov	r1, r6
 800d81a:	f001 f8cb 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d81e:	4605      	mov	r5, r0
 800d820:	f104 0010 	add.w	r0, r4, #16
 800d824:	4435      	add	r5, r6
 800d826:	4629      	mov	r1, r5
 800d828:	f000 f8a2 	bl	800d970 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800d82c:	4601      	mov	r1, r0
 800d82e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800d832:	440d      	add	r5, r1
 800d834:	4629      	mov	r1, r5
 800d836:	f000 f9a7 	bl	800db88 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800d83a:	1bc0      	subs	r0, r0, r7
 800d83c:	4428      	add	r0, r5
 800d83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d840 <_Control__cdr_deserialize>:
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	460c      	mov	r4, r1
 800d844:	b329      	cbz	r1, 800d892 <_Control__cdr_deserialize+0x52>
 800d846:	4605      	mov	r5, r0
 800d848:	f001 f918 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d84c:	4603      	mov	r3, r0
 800d84e:	4621      	mov	r1, r4
 800d850:	4628      	mov	r0, r5
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	4798      	blx	r3
 800d858:	f001 f910 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d85c:	4603      	mov	r3, r0
 800d85e:	f104 0108 	add.w	r1, r4, #8
 800d862:	4628      	mov	r0, r5
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	4798      	blx	r3
 800d86a:	f000 f95b 	bl	800db24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800d86e:	4603      	mov	r3, r0
 800d870:	f104 0110 	add.w	r1, r4, #16
 800d874:	4628      	mov	r0, r5
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	4798      	blx	r3
 800d87c:	f000 fa28 	bl	800dcd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800d880:	4603      	mov	r3, r0
 800d882:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 800d886:	4628      	mov	r0, r5
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	4718      	bx	r3
 800d892:	4608      	mov	r0, r1
 800d894:	bd70      	pop	{r4, r5, r6, pc}
 800d896:	bf00      	nop

0800d898 <_Control__cdr_serialize>:
 800d898:	b338      	cbz	r0, 800d8ea <_Control__cdr_serialize+0x52>
 800d89a:	b570      	push	{r4, r5, r6, lr}
 800d89c:	4604      	mov	r4, r0
 800d89e:	460d      	mov	r5, r1
 800d8a0:	f001 f8ec 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	689b      	ldr	r3, [r3, #8]
 800d8ae:	4798      	blx	r3
 800d8b0:	f001 f8e4 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	f104 0008 	add.w	r0, r4, #8
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	4798      	blx	r3
 800d8c2:	f000 f92f 	bl	800db24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f104 0010 	add.w	r0, r4, #16
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	4798      	blx	r3
 800d8d4:	f000 f9fc 	bl	800dcd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	4629      	mov	r1, r5
 800d8dc:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	4718      	bx	r3
 800d8ea:	4770      	bx	lr

0800d8ec <_Control__get_serialized_size>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	b1b8      	cbz	r0, 800d922 <_Control__get_serialized_size+0x36>
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	f001 f85e 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d8f8:	4605      	mov	r5, r0
 800d8fa:	f104 0008 	add.w	r0, r4, #8
 800d8fe:	4629      	mov	r1, r5
 800d900:	f001 f858 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d904:	4601      	mov	r1, r0
 800d906:	f104 0010 	add.w	r0, r4, #16
 800d90a:	440d      	add	r5, r1
 800d90c:	4629      	mov	r1, r5
 800d90e:	f000 f82f 	bl	800d970 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 800d912:	4601      	mov	r1, r0
 800d914:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800d918:	440d      	add	r5, r1
 800d91a:	4629      	mov	r1, r5
 800d91c:	f000 f934 	bl	800db88 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800d920:	4428      	add	r0, r5
 800d922:	bd38      	pop	{r3, r4, r5, pc}

0800d924 <_Control__max_serialized_size>:
 800d924:	b530      	push	{r4, r5, lr}
 800d926:	b083      	sub	sp, #12
 800d928:	2301      	movs	r3, #1
 800d92a:	2100      	movs	r1, #0
 800d92c:	f10d 0007 	add.w	r0, sp, #7
 800d930:	f88d 3007 	strb.w	r3, [sp, #7]
 800d934:	f001 f88e 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800d938:	4604      	mov	r4, r0
 800d93a:	f10d 0007 	add.w	r0, sp, #7
 800d93e:	4621      	mov	r1, r4
 800d940:	f001 f888 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800d944:	4605      	mov	r5, r0
 800d946:	f10d 0007 	add.w	r0, sp, #7
 800d94a:	4425      	add	r5, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	f000 f8c7 	bl	800dae0 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 800d952:	4604      	mov	r4, r0
 800d954:	f10d 0007 	add.w	r0, sp, #7
 800d958:	442c      	add	r4, r5
 800d95a:	4621      	mov	r1, r4
 800d95c:	f000 f980 	bl	800dc60 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800d960:	4420      	add	r0, r4
 800d962:	b003      	add	sp, #12
 800d964:	bd30      	pop	{r4, r5, pc}
 800d966:	bf00      	nop

0800d968 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 800d968:	4800      	ldr	r0, [pc, #0]	@ (800d96c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 800d96a:	4770      	bx	lr
 800d96c:	24000410 	.word	0x24000410

0800d970 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 800d970:	b5b0      	push	{r4, r5, r7, lr}
 800d972:	4604      	mov	r4, r0
 800d974:	b1f0      	cbz	r0, 800d9b4 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 800d976:	460d      	mov	r5, r1
 800d978:	f001 f81c 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d97c:	4607      	mov	r7, r0
 800d97e:	f104 0008 	add.w	r0, r4, #8
 800d982:	442f      	add	r7, r5
 800d984:	f1c5 0501 	rsb	r5, r5, #1
 800d988:	4639      	mov	r1, r7
 800d98a:	f001 f813 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d98e:	4407      	add	r7, r0
 800d990:	2104      	movs	r1, #4
 800d992:	4638      	mov	r0, r7
 800d994:	f002 fb12 	bl	800ffbc <ucdr_alignment>
 800d998:	2104      	movs	r1, #4
 800d99a:	1844      	adds	r4, r0, r1
 800d99c:	443c      	add	r4, r7
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f002 fb0c 	bl	800ffbc <ucdr_alignment>
 800d9a4:	3004      	adds	r0, #4
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	4404      	add	r4, r0
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f002 fb06 	bl	800ffbc <ucdr_alignment>
 800d9b0:	4428      	add	r0, r5
 800d9b2:	4420      	add	r0, r4
 800d9b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d9b6:	bf00      	nop

0800d9b8 <_Lateral__cdr_deserialize>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	b311      	cbz	r1, 800da04 <_Lateral__cdr_deserialize+0x4c>
 800d9be:	4605      	mov	r5, r0
 800d9c0:	f001 f85c 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	4621      	mov	r1, r4
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	4798      	blx	r3
 800d9d0:	f001 f854 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	f104 0108 	add.w	r1, r4, #8
 800d9da:	4628      	mov	r0, r5
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	68db      	ldr	r3, [r3, #12]
 800d9e0:	4798      	blx	r3
 800d9e2:	f104 0110 	add.w	r1, r4, #16
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	f002 f86a 	bl	800fac0 <ucdr_deserialize_float>
 800d9ec:	f104 0114 	add.w	r1, r4, #20
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	f002 f865 	bl	800fac0 <ucdr_deserialize_float>
 800d9f6:	f104 0118 	add.w	r1, r4, #24
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da00:	f001 b856 	b.w	800eab0 <ucdr_deserialize_bool>
 800da04:	4608      	mov	r0, r1
 800da06:	bd38      	pop	{r3, r4, r5, pc}

0800da08 <_Lateral__cdr_serialize>:
 800da08:	b318      	cbz	r0, 800da52 <_Lateral__cdr_serialize+0x4a>
 800da0a:	b538      	push	{r3, r4, r5, lr}
 800da0c:	4604      	mov	r4, r0
 800da0e:	460d      	mov	r5, r1
 800da10:	f001 f834 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800da14:	4603      	mov	r3, r0
 800da16:	4629      	mov	r1, r5
 800da18:	4620      	mov	r0, r4
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	4798      	blx	r3
 800da20:	f001 f82c 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800da24:	4603      	mov	r3, r0
 800da26:	4629      	mov	r1, r5
 800da28:	f104 0008 	add.w	r0, r4, #8
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	4798      	blx	r3
 800da32:	ed94 0a04 	vldr	s0, [r4, #16]
 800da36:	4628      	mov	r0, r5
 800da38:	f001 ffaa 	bl	800f990 <ucdr_serialize_float>
 800da3c:	ed94 0a05 	vldr	s0, [r4, #20]
 800da40:	4628      	mov	r0, r5
 800da42:	f001 ffa5 	bl	800f990 <ucdr_serialize_float>
 800da46:	7e21      	ldrb	r1, [r4, #24]
 800da48:	4628      	mov	r0, r5
 800da4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da4e:	f001 b819 	b.w	800ea84 <ucdr_serialize_bool>
 800da52:	4770      	bx	lr

0800da54 <_Lateral__get_serialized_size>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4604      	mov	r4, r0
 800da58:	b1d8      	cbz	r0, 800da92 <_Lateral__get_serialized_size+0x3e>
 800da5a:	2100      	movs	r1, #0
 800da5c:	f000 ffaa 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800da60:	4605      	mov	r5, r0
 800da62:	f104 0008 	add.w	r0, r4, #8
 800da66:	4629      	mov	r1, r5
 800da68:	f000 ffa4 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800da6c:	4405      	add	r5, r0
 800da6e:	2104      	movs	r1, #4
 800da70:	4628      	mov	r0, r5
 800da72:	f002 faa3 	bl	800ffbc <ucdr_alignment>
 800da76:	2104      	movs	r1, #4
 800da78:	4408      	add	r0, r1
 800da7a:	1944      	adds	r4, r0, r5
 800da7c:	4620      	mov	r0, r4
 800da7e:	f002 fa9d 	bl	800ffbc <ucdr_alignment>
 800da82:	3004      	adds	r0, #4
 800da84:	2101      	movs	r1, #1
 800da86:	4404      	add	r4, r0
 800da88:	4620      	mov	r0, r4
 800da8a:	f002 fa97 	bl	800ffbc <ucdr_alignment>
 800da8e:	3001      	adds	r0, #1
 800da90:	4420      	add	r0, r4
 800da92:	bd38      	pop	{r3, r4, r5, pc}

0800da94 <_Lateral__max_serialized_size>:
 800da94:	b530      	push	{r4, r5, lr}
 800da96:	b083      	sub	sp, #12
 800da98:	2501      	movs	r5, #1
 800da9a:	2100      	movs	r1, #0
 800da9c:	f10d 0007 	add.w	r0, sp, #7
 800daa0:	f88d 5007 	strb.w	r5, [sp, #7]
 800daa4:	f000 ffd6 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800daa8:	4604      	mov	r4, r0
 800daaa:	f10d 0007 	add.w	r0, sp, #7
 800daae:	4621      	mov	r1, r4
 800dab0:	f000 ffd0 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800dab4:	4404      	add	r4, r0
 800dab6:	2104      	movs	r1, #4
 800dab8:	4620      	mov	r0, r4
 800daba:	f002 fa7f 	bl	800ffbc <ucdr_alignment>
 800dabe:	2104      	movs	r1, #4
 800dac0:	4408      	add	r0, r1
 800dac2:	4404      	add	r4, r0
 800dac4:	4620      	mov	r0, r4
 800dac6:	f002 fa79 	bl	800ffbc <ucdr_alignment>
 800daca:	3004      	adds	r0, #4
 800dacc:	4629      	mov	r1, r5
 800dace:	4404      	add	r4, r0
 800dad0:	4620      	mov	r0, r4
 800dad2:	f002 fa73 	bl	800ffbc <ucdr_alignment>
 800dad6:	4428      	add	r0, r5
 800dad8:	4420      	add	r0, r4
 800dada:	b003      	add	sp, #12
 800dadc:	bd30      	pop	{r4, r5, pc}
 800dade:	bf00      	nop

0800dae0 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 800dae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae2:	2701      	movs	r7, #1
 800dae4:	460c      	mov	r4, r1
 800dae6:	4606      	mov	r6, r0
 800dae8:	7007      	strb	r7, [r0, #0]
 800daea:	f000 ffb3 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800daee:	4605      	mov	r5, r0
 800daf0:	4630      	mov	r0, r6
 800daf2:	4425      	add	r5, r4
 800daf4:	1b3c      	subs	r4, r7, r4
 800daf6:	4629      	mov	r1, r5
 800daf8:	f000 ffac 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800dafc:	4405      	add	r5, r0
 800dafe:	2104      	movs	r1, #4
 800db00:	4628      	mov	r0, r5
 800db02:	f002 fa5b 	bl	800ffbc <ucdr_alignment>
 800db06:	2104      	movs	r1, #4
 800db08:	4408      	add	r0, r1
 800db0a:	4405      	add	r5, r0
 800db0c:	4628      	mov	r0, r5
 800db0e:	f002 fa55 	bl	800ffbc <ucdr_alignment>
 800db12:	3004      	adds	r0, #4
 800db14:	4639      	mov	r1, r7
 800db16:	4405      	add	r5, r0
 800db18:	4628      	mov	r0, r5
 800db1a:	f002 fa4f 	bl	800ffbc <ucdr_alignment>
 800db1e:	4420      	add	r0, r4
 800db20:	4428      	add	r0, r5
 800db22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 800db24:	4800      	ldr	r0, [pc, #0]	@ (800db28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 800db26:	4770      	bx	lr
 800db28:	24000438 	.word	0x24000438

0800db2c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 800db2c:	b570      	push	{r4, r5, r6, lr}
 800db2e:	460c      	mov	r4, r1
 800db30:	4606      	mov	r6, r0
 800db32:	f000 ff3f 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800db36:	4605      	mov	r5, r0
 800db38:	f106 0008 	add.w	r0, r6, #8
 800db3c:	4425      	add	r5, r4
 800db3e:	f1c4 0401 	rsb	r4, r4, #1
 800db42:	4629      	mov	r1, r5
 800db44:	f000 ff36 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800db48:	4405      	add	r5, r0
 800db4a:	2104      	movs	r1, #4
 800db4c:	4628      	mov	r0, r5
 800db4e:	f002 fa35 	bl	800ffbc <ucdr_alignment>
 800db52:	2104      	movs	r1, #4
 800db54:	4408      	add	r0, r1
 800db56:	4405      	add	r5, r0
 800db58:	4628      	mov	r0, r5
 800db5a:	f002 fa2f 	bl	800ffbc <ucdr_alignment>
 800db5e:	2104      	movs	r1, #4
 800db60:	4408      	add	r0, r1
 800db62:	1946      	adds	r6, r0, r5
 800db64:	4630      	mov	r0, r6
 800db66:	f002 fa29 	bl	800ffbc <ucdr_alignment>
 800db6a:	1d05      	adds	r5, r0, #4
 800db6c:	2101      	movs	r1, #1
 800db6e:	4435      	add	r5, r6
 800db70:	4628      	mov	r0, r5
 800db72:	f002 fa23 	bl	800ffbc <ucdr_alignment>
 800db76:	2101      	movs	r1, #1
 800db78:	4408      	add	r0, r1
 800db7a:	4405      	add	r5, r0
 800db7c:	4628      	mov	r0, r5
 800db7e:	f002 fa1d 	bl	800ffbc <ucdr_alignment>
 800db82:	4420      	add	r0, r4
 800db84:	4428      	add	r0, r5
 800db86:	bd70      	pop	{r4, r5, r6, pc}

0800db88 <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800db88:	b108      	cbz	r0, 800db8e <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 800db8a:	f7ff bfcf 	b.w	800db2c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800db8e:	4770      	bx	lr

0800db90 <_Longitudinal__get_serialized_size>:
 800db90:	b110      	cbz	r0, 800db98 <_Longitudinal__get_serialized_size+0x8>
 800db92:	2100      	movs	r1, #0
 800db94:	f7ff bfca 	b.w	800db2c <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop

0800db9c <_Longitudinal__cdr_deserialize>:
 800db9c:	b538      	push	{r3, r4, r5, lr}
 800db9e:	460c      	mov	r4, r1
 800dba0:	b361      	cbz	r1, 800dbfc <_Longitudinal__cdr_deserialize+0x60>
 800dba2:	4605      	mov	r5, r0
 800dba4:	f000 ff6a 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4628      	mov	r0, r5
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	4798      	blx	r3
 800dbb4:	f000 ff62 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	f104 0108 	add.w	r1, r4, #8
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	4798      	blx	r3
 800dbc6:	f104 0110 	add.w	r1, r4, #16
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f001 ff78 	bl	800fac0 <ucdr_deserialize_float>
 800dbd0:	f104 0114 	add.w	r1, r4, #20
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	f001 ff73 	bl	800fac0 <ucdr_deserialize_float>
 800dbda:	f104 0118 	add.w	r1, r4, #24
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f001 ff6e 	bl	800fac0 <ucdr_deserialize_float>
 800dbe4:	f104 011c 	add.w	r1, r4, #28
 800dbe8:	4628      	mov	r0, r5
 800dbea:	f000 ff61 	bl	800eab0 <ucdr_deserialize_bool>
 800dbee:	f104 011d 	add.w	r1, r4, #29
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbf8:	f000 bf5a 	b.w	800eab0 <ucdr_deserialize_bool>
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}

0800dc00 <_Longitudinal__cdr_serialize>:
 800dc00:	b360      	cbz	r0, 800dc5c <_Longitudinal__cdr_serialize+0x5c>
 800dc02:	b538      	push	{r3, r4, r5, lr}
 800dc04:	4604      	mov	r4, r0
 800dc06:	460d      	mov	r5, r1
 800dc08:	f000 ff38 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	4629      	mov	r1, r5
 800dc10:	4620      	mov	r0, r4
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	4798      	blx	r3
 800dc18:	f000 ff30 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	4629      	mov	r1, r5
 800dc20:	f104 0008 	add.w	r0, r4, #8
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	4798      	blx	r3
 800dc2a:	ed94 0a04 	vldr	s0, [r4, #16]
 800dc2e:	4628      	mov	r0, r5
 800dc30:	f001 feae 	bl	800f990 <ucdr_serialize_float>
 800dc34:	ed94 0a05 	vldr	s0, [r4, #20]
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f001 fea9 	bl	800f990 <ucdr_serialize_float>
 800dc3e:	ed94 0a06 	vldr	s0, [r4, #24]
 800dc42:	4628      	mov	r0, r5
 800dc44:	f001 fea4 	bl	800f990 <ucdr_serialize_float>
 800dc48:	7f21      	ldrb	r1, [r4, #28]
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f000 ff1a 	bl	800ea84 <ucdr_serialize_bool>
 800dc50:	7f61      	ldrb	r1, [r4, #29]
 800dc52:	4628      	mov	r0, r5
 800dc54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc58:	f000 bf14 	b.w	800ea84 <ucdr_serialize_bool>
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop

0800dc60 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 800dc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc62:	2701      	movs	r7, #1
 800dc64:	460c      	mov	r4, r1
 800dc66:	4606      	mov	r6, r0
 800dc68:	7007      	strb	r7, [r0, #0]
 800dc6a:	f000 fef3 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800dc6e:	4605      	mov	r5, r0
 800dc70:	4630      	mov	r0, r6
 800dc72:	4425      	add	r5, r4
 800dc74:	1b3c      	subs	r4, r7, r4
 800dc76:	4629      	mov	r1, r5
 800dc78:	f000 feec 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800dc7c:	4405      	add	r5, r0
 800dc7e:	2104      	movs	r1, #4
 800dc80:	4628      	mov	r0, r5
 800dc82:	f002 f99b 	bl	800ffbc <ucdr_alignment>
 800dc86:	2104      	movs	r1, #4
 800dc88:	4408      	add	r0, r1
 800dc8a:	4405      	add	r5, r0
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	f002 f995 	bl	800ffbc <ucdr_alignment>
 800dc92:	2104      	movs	r1, #4
 800dc94:	4408      	add	r0, r1
 800dc96:	1946      	adds	r6, r0, r5
 800dc98:	4630      	mov	r0, r6
 800dc9a:	f002 f98f 	bl	800ffbc <ucdr_alignment>
 800dc9e:	1d05      	adds	r5, r0, #4
 800dca0:	4639      	mov	r1, r7
 800dca2:	4435      	add	r5, r6
 800dca4:	4628      	mov	r0, r5
 800dca6:	f002 f989 	bl	800ffbc <ucdr_alignment>
 800dcaa:	4438      	add	r0, r7
 800dcac:	4639      	mov	r1, r7
 800dcae:	4405      	add	r5, r0
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	f002 f983 	bl	800ffbc <ucdr_alignment>
 800dcb6:	4420      	add	r0, r4
 800dcb8:	4428      	add	r0, r5
 800dcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dcbc <_Longitudinal__max_serialized_size>:
 800dcbc:	b500      	push	{lr}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	f10d 0007 	add.w	r0, sp, #7
 800dcc6:	f7ff ffcb 	bl	800dc60 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 800dcca:	b003      	add	sp, #12
 800dccc:	f85d fb04 	ldr.w	pc, [sp], #4

0800dcd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 800dcd0:	4800      	ldr	r0, [pc, #0]	@ (800dcd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 800dcd2:	4770      	bx	lr
 800dcd4:	24000460 	.word	0x24000460

0800dcd8 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800dcd8:	4b04      	ldr	r3, [pc, #16]	@ (800dcec <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 800dcda:	681a      	ldr	r2, [r3, #0]
 800dcdc:	b10a      	cbz	r2, 800dce2 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xa>
 800dcde:	4803      	ldr	r0, [pc, #12]	@ (800dcec <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 800dce0:	4770      	bx	lr
 800dce2:	4a03      	ldr	r2, [pc, #12]	@ (800dcf0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x18>)
 800dce4:	4801      	ldr	r0, [pc, #4]	@ (800dcec <rosidl_typesupport_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x14>)
 800dce6:	6812      	ldr	r2, [r2, #0]
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	4770      	bx	lr
 800dcec:	24000490 	.word	0x24000490
 800dcf0:	24000e10 	.word	0x24000e10

0800dcf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800dcf4:	4b04      	ldr	r3, [pc, #16]	@ (800dd08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 800dcf6:	4805      	ldr	r0, [pc, #20]	@ (800dd0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4905      	ldr	r1, [pc, #20]	@ (800dd10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 800dcfc:	4a05      	ldr	r2, [pc, #20]	@ (800dd14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800dcfe:	6003      	str	r3, [r0, #0]
 800dd00:	600b      	str	r3, [r1, #0]
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	24000e10 	.word	0x24000e10
 800dd0c:	240004ac 	.word	0x240004ac
 800dd10:	240004b8 	.word	0x240004b8
 800dd14:	24000490 	.word	0x24000490

0800dd18 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800dd18:	4b04      	ldr	r3, [pc, #16]	@ (800dd2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	b10a      	cbz	r2, 800dd22 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xa>
 800dd1e:	4803      	ldr	r0, [pc, #12]	@ (800dd2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800dd20:	4770      	bx	lr
 800dd22:	4a03      	ldr	r2, [pc, #12]	@ (800dd30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x18>)
 800dd24:	4801      	ldr	r0, [pc, #4]	@ (800dd2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>)
 800dd26:	6812      	ldr	r2, [r2, #0]
 800dd28:	601a      	str	r2, [r3, #0]
 800dd2a:	4770      	bx	lr
 800dd2c:	240004cc 	.word	0x240004cc
 800dd30:	24000e10 	.word	0x24000e10

0800dd34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800dd34:	4a02      	ldr	r2, [pc, #8]	@ (800dd40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 800dd36:	4b03      	ldr	r3, [pc, #12]	@ (800dd44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 800dd38:	6812      	ldr	r2, [r2, #0]
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	24000e10 	.word	0x24000e10
 800dd44:	240004cc 	.word	0x240004cc

0800dd48 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800dd48:	4b04      	ldr	r3, [pc, #16]	@ (800dd5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	b10a      	cbz	r2, 800dd52 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xa>
 800dd4e:	4803      	ldr	r0, [pc, #12]	@ (800dd5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800dd50:	4770      	bx	lr
 800dd52:	4a03      	ldr	r2, [pc, #12]	@ (800dd60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x18>)
 800dd54:	4801      	ldr	r0, [pc, #4]	@ (800dd5c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>)
 800dd56:	6812      	ldr	r2, [r2, #0]
 800dd58:	601a      	str	r2, [r3, #0]
 800dd5a:	4770      	bx	lr
 800dd5c:	240004e0 	.word	0x240004e0
 800dd60:	24000e10 	.word	0x24000e10

0800dd64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800dd64:	4a02      	ldr	r2, [pc, #8]	@ (800dd70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 800dd66:	4b03      	ldr	r3, [pc, #12]	@ (800dd74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 800dd68:	6812      	ldr	r2, [r2, #0]
 800dd6a:	601a      	str	r2, [r3, #0]
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop
 800dd70:	24000e10 	.word	0x24000e10
 800dd74:	240004e0 	.word	0x240004e0

0800dd78 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800dd78:	4b04      	ldr	r3, [pc, #16]	@ (800dd8c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	b10a      	cbz	r2, 800dd82 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xa>
 800dd7e:	4803      	ldr	r0, [pc, #12]	@ (800dd8c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800dd80:	4770      	bx	lr
 800dd82:	4a03      	ldr	r2, [pc, #12]	@ (800dd90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x18>)
 800dd84:	4801      	ldr	r0, [pc, #4]	@ (800dd8c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>)
 800dd86:	6812      	ldr	r2, [r2, #0]
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	4770      	bx	lr
 800dd8c:	240004f4 	.word	0x240004f4
 800dd90:	24000e10 	.word	0x24000e10

0800dd94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800dd94:	4a02      	ldr	r2, [pc, #8]	@ (800dda0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 800dd96:	4b03      	ldr	r3, [pc, #12]	@ (800dda4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 800dd98:	6812      	ldr	r2, [r2, #0]
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	24000e10 	.word	0x24000e10
 800dda4:	240004f4 	.word	0x240004f4

0800dda8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800dda8:	4b04      	ldr	r3, [pc, #16]	@ (800ddbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	b10a      	cbz	r2, 800ddb2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xa>
 800ddae:	4803      	ldr	r0, [pc, #12]	@ (800ddbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800ddb0:	4770      	bx	lr
 800ddb2:	4a03      	ldr	r2, [pc, #12]	@ (800ddc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 800ddb4:	4801      	ldr	r0, [pc, #4]	@ (800ddbc <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 800ddb6:	6812      	ldr	r2, [r2, #0]
 800ddb8:	601a      	str	r2, [r3, #0]
 800ddba:	4770      	bx	lr
 800ddbc:	24000508 	.word	0x24000508
 800ddc0:	24000e10 	.word	0x24000e10

0800ddc4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800ddc4:	4a02      	ldr	r2, [pc, #8]	@ (800ddd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 800ddc6:	4b03      	ldr	r3, [pc, #12]	@ (800ddd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 800ddc8:	6812      	ldr	r2, [r2, #0]
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	24000e10 	.word	0x24000e10
 800ddd4:	24000508 	.word	0x24000508

0800ddd8 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800ddd8:	4b04      	ldr	r3, [pc, #16]	@ (800ddec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	b10a      	cbz	r2, 800dde2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xa>
 800ddde:	4803      	ldr	r0, [pc, #12]	@ (800ddec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800dde0:	4770      	bx	lr
 800dde2:	4a03      	ldr	r2, [pc, #12]	@ (800ddf0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x18>)
 800dde4:	4801      	ldr	r0, [pc, #4]	@ (800ddec <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>)
 800dde6:	6812      	ldr	r2, [r2, #0]
 800dde8:	601a      	str	r2, [r3, #0]
 800ddea:	4770      	bx	lr
 800ddec:	2400051c 	.word	0x2400051c
 800ddf0:	24000e10 	.word	0x24000e10

0800ddf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800ddf4:	4a02      	ldr	r2, [pc, #8]	@ (800de00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 800ddf6:	4b03      	ldr	r3, [pc, #12]	@ (800de04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 800ddf8:	6812      	ldr	r2, [r2, #0]
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	24000e10 	.word	0x24000e10
 800de04:	2400051c 	.word	0x2400051c

0800de08 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800de08:	4b04      	ldr	r3, [pc, #16]	@ (800de1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	b10a      	cbz	r2, 800de12 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xa>
 800de0e:	4803      	ldr	r0, [pc, #12]	@ (800de1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800de10:	4770      	bx	lr
 800de12:	4a03      	ldr	r2, [pc, #12]	@ (800de20 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x18>)
 800de14:	4801      	ldr	r0, [pc, #4]	@ (800de1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>)
 800de16:	6812      	ldr	r2, [r2, #0]
 800de18:	601a      	str	r2, [r3, #0]
 800de1a:	4770      	bx	lr
 800de1c:	24000530 	.word	0x24000530
 800de20:	24000e10 	.word	0x24000e10

0800de24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800de24:	4a02      	ldr	r2, [pc, #8]	@ (800de30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 800de26:	4b03      	ldr	r3, [pc, #12]	@ (800de34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 800de28:	6812      	ldr	r2, [r2, #0]
 800de2a:	601a      	str	r2, [r3, #0]
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	24000e10 	.word	0x24000e10
 800de34:	24000530 	.word	0x24000530

0800de38 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800de38:	4b04      	ldr	r3, [pc, #16]	@ (800de4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	b10a      	cbz	r2, 800de42 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 800de3e:	4803      	ldr	r0, [pc, #12]	@ (800de4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800de40:	4770      	bx	lr
 800de42:	4a03      	ldr	r2, [pc, #12]	@ (800de50 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 800de44:	4801      	ldr	r0, [pc, #4]	@ (800de4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 800de46:	6812      	ldr	r2, [r2, #0]
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	4770      	bx	lr
 800de4c:	24000544 	.word	0x24000544
 800de50:	24000e10 	.word	0x24000e10

0800de54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800de54:	4a02      	ldr	r2, [pc, #8]	@ (800de60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 800de56:	4b03      	ldr	r3, [pc, #12]	@ (800de64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 800de58:	6812      	ldr	r2, [r2, #0]
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	24000e10 	.word	0x24000e10
 800de64:	24000544 	.word	0x24000544

0800de68 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800de68:	4b04      	ldr	r3, [pc, #16]	@ (800de7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	b10a      	cbz	r2, 800de72 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 800de6e:	4803      	ldr	r0, [pc, #12]	@ (800de7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800de70:	4770      	bx	lr
 800de72:	4a03      	ldr	r2, [pc, #12]	@ (800de80 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 800de74:	4801      	ldr	r0, [pc, #4]	@ (800de7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 800de76:	6812      	ldr	r2, [r2, #0]
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	4770      	bx	lr
 800de7c:	24000558 	.word	0x24000558
 800de80:	24000e10 	.word	0x24000e10

0800de84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800de84:	4a02      	ldr	r2, [pc, #8]	@ (800de90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 800de86:	4b03      	ldr	r3, [pc, #12]	@ (800de94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 800de88:	6812      	ldr	r2, [r2, #0]
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	24000e10 	.word	0x24000e10
 800de94:	24000558 	.word	0x24000558

0800de98 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800de98:	4b04      	ldr	r3, [pc, #16]	@ (800deac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	b10a      	cbz	r2, 800dea2 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xa>
 800de9e:	4803      	ldr	r0, [pc, #12]	@ (800deac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800dea0:	4770      	bx	lr
 800dea2:	4a03      	ldr	r2, [pc, #12]	@ (800deb0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x18>)
 800dea4:	4801      	ldr	r0, [pc, #4]	@ (800deac <rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>)
 800dea6:	6812      	ldr	r2, [r2, #0]
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	4770      	bx	lr
 800deac:	2400056c 	.word	0x2400056c
 800deb0:	24000e10 	.word	0x24000e10

0800deb4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800deb4:	4a02      	ldr	r2, [pc, #8]	@ (800dec0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 800deb6:	4b03      	ldr	r3, [pc, #12]	@ (800dec4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 800deb8:	6812      	ldr	r2, [r2, #0]
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	24000e10 	.word	0x24000e10
 800dec4:	2400056c 	.word	0x2400056c

0800dec8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 800dec8:	f003 bdca 	b.w	8011a60 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

0800decc <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 800decc:	f003 bdda 	b.w	8011a84 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

0800ded0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 800ded0:	f003 bddc 	b.w	8011a8c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

0800ded4 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 800ded4:	f003 bdde 	b.w	8011a94 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

0800ded8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800ded8:	b508      	push	{r3, lr}
 800deda:	f000 fd5d 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dede:	4b06      	ldr	r3, [pc, #24]	@ (800def8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800dee0:	4906      	ldr	r1, [pc, #24]	@ (800defc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	60c8      	str	r0, [r1, #12]
 800dee6:	b10a      	cbz	r2, 800deec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 800dee8:	4803      	ldr	r0, [pc, #12]	@ (800def8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800deea:	bd08      	pop	{r3, pc}
 800deec:	4a04      	ldr	r2, [pc, #16]	@ (800df00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 800deee:	4802      	ldr	r0, [pc, #8]	@ (800def8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 800def0:	6812      	ldr	r2, [r2, #0]
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	bd08      	pop	{r3, pc}
 800def6:	bf00      	nop
 800def8:	240005f0 	.word	0x240005f0
 800defc:	24000578 	.word	0x24000578
 800df00:	24000e14 	.word	0x24000e14

0800df04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800df04:	4b04      	ldr	r3, [pc, #16]	@ (800df18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	b10a      	cbz	r2, 800df0e <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 800df0a:	4803      	ldr	r0, [pc, #12]	@ (800df18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800df0c:	4770      	bx	lr
 800df0e:	4a03      	ldr	r2, [pc, #12]	@ (800df1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 800df10:	4801      	ldr	r0, [pc, #4]	@ (800df18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 800df12:	6812      	ldr	r2, [r2, #0]
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	4770      	bx	lr
 800df18:	24000638 	.word	0x24000638
 800df1c:	24000e14 	.word	0x24000e14

0800df20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800df20:	4b16      	ldr	r3, [pc, #88]	@ (800df7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	b510      	push	{r4, lr}
 800df26:	b132      	cbz	r2, 800df36 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 800df28:	685c      	ldr	r4, [r3, #4]
 800df2a:	68a3      	ldr	r3, [r4, #8]
 800df2c:	b153      	cbz	r3, 800df44 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 800df2e:	68e3      	ldr	r3, [r4, #12]
 800df30:	b1a3      	cbz	r3, 800df5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 800df32:	4812      	ldr	r0, [pc, #72]	@ (800df7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800df34:	bd10      	pop	{r4, pc}
 800df36:	4a12      	ldr	r2, [pc, #72]	@ (800df80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800df38:	685c      	ldr	r4, [r3, #4]
 800df3a:	6812      	ldr	r2, [r2, #0]
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	68a3      	ldr	r3, [r4, #8]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1f4      	bne.n	800df2e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 800df44:	f000 fd28 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800df48:	4b0e      	ldr	r3, [pc, #56]	@ (800df84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 800df4a:	490f      	ldr	r1, [pc, #60]	@ (800df88 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	60c8      	str	r0, [r1, #12]
 800df50:	b17a      	cbz	r2, 800df72 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	60a3      	str	r3, [r4, #8]
 800df56:	68e3      	ldr	r3, [r4, #12]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d1ea      	bne.n	800df32 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 800df5c:	4b0b      	ldr	r3, [pc, #44]	@ (800df8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	b11a      	cbz	r2, 800df6a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	4805      	ldr	r0, [pc, #20]	@ (800df7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 800df66:	60e3      	str	r3, [r4, #12]
 800df68:	bd10      	pop	{r4, pc}
 800df6a:	4a05      	ldr	r2, [pc, #20]	@ (800df80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800df6c:	6812      	ldr	r2, [r2, #0]
 800df6e:	601a      	str	r2, [r3, #0]
 800df70:	e7f7      	b.n	800df62 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 800df72:	4a03      	ldr	r2, [pc, #12]	@ (800df80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 800df74:	6812      	ldr	r2, [r2, #0]
 800df76:	601a      	str	r2, [r3, #0]
 800df78:	e7eb      	b.n	800df52 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 800df7a:	bf00      	nop
 800df7c:	24000654 	.word	0x24000654
 800df80:	24000e14 	.word	0x24000e14
 800df84:	240005f0 	.word	0x240005f0
 800df88:	24000578 	.word	0x24000578
 800df8c:	24000638 	.word	0x24000638

0800df90 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 800df90:	f003 bd82 	b.w	8011a98 <autoware_vehicle_msgs__msg__ControlModeReport__init>

0800df94 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 800df94:	f003 bd92 	b.w	8011abc <autoware_vehicle_msgs__msg__ControlModeReport__fini>

0800df98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800df98:	b508      	push	{r3, lr}
 800df9a:	f000 fcfd 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800df9e:	4b06      	ldr	r3, [pc, #24]	@ (800dfb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800dfa0:	4906      	ldr	r1, [pc, #24]	@ (800dfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	60c8      	str	r0, [r1, #12]
 800dfa6:	b10a      	cbz	r2, 800dfac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 800dfa8:	4803      	ldr	r0, [pc, #12]	@ (800dfb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800dfaa:	bd08      	pop	{r3, pc}
 800dfac:	4a04      	ldr	r2, [pc, #16]	@ (800dfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 800dfae:	4802      	ldr	r0, [pc, #8]	@ (800dfb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 800dfb0:	6812      	ldr	r2, [r2, #0]
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	bd08      	pop	{r3, pc}
 800dfb6:	bf00      	nop
 800dfb8:	240006d8 	.word	0x240006d8
 800dfbc:	24000660 	.word	0x24000660
 800dfc0:	24000e14 	.word	0x24000e14

0800dfc4 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 800dfc4:	f003 bd7e 	b.w	8011ac4 <autoware_vehicle_msgs__msg__GearCommand__init>

0800dfc8 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 800dfc8:	f003 bd8e 	b.w	8011ae8 <autoware_vehicle_msgs__msg__GearCommand__fini>

0800dfcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800dfcc:	b508      	push	{r3, lr}
 800dfce:	f000 fce3 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dfd2:	4b06      	ldr	r3, [pc, #24]	@ (800dfec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800dfd4:	4906      	ldr	r1, [pc, #24]	@ (800dff0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	60c8      	str	r0, [r1, #12]
 800dfda:	b10a      	cbz	r2, 800dfe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 800dfdc:	4803      	ldr	r0, [pc, #12]	@ (800dfec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800dfde:	bd08      	pop	{r3, pc}
 800dfe0:	4a04      	ldr	r2, [pc, #16]	@ (800dff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 800dfe2:	4802      	ldr	r0, [pc, #8]	@ (800dfec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 800dfe4:	6812      	ldr	r2, [r2, #0]
 800dfe6:	601a      	str	r2, [r3, #0]
 800dfe8:	bd08      	pop	{r3, pc}
 800dfea:	bf00      	nop
 800dfec:	2400075c 	.word	0x2400075c
 800dff0:	240006e4 	.word	0x240006e4
 800dff4:	24000e14 	.word	0x24000e14

0800dff8 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 800dff8:	f003 bd7a 	b.w	8011af0 <autoware_vehicle_msgs__msg__GearReport__init>

0800dffc <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 800dffc:	f003 bd8a 	b.w	8011b14 <autoware_vehicle_msgs__msg__GearReport__fini>

0800e000 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800e000:	b508      	push	{r3, lr}
 800e002:	f000 fcc9 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e006:	4b06      	ldr	r3, [pc, #24]	@ (800e020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800e008:	4906      	ldr	r1, [pc, #24]	@ (800e024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	60c8      	str	r0, [r1, #12]
 800e00e:	b10a      	cbz	r2, 800e014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 800e010:	4803      	ldr	r0, [pc, #12]	@ (800e020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800e012:	bd08      	pop	{r3, pc}
 800e014:	4a04      	ldr	r2, [pc, #16]	@ (800e028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 800e016:	4802      	ldr	r0, [pc, #8]	@ (800e020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 800e018:	6812      	ldr	r2, [r2, #0]
 800e01a:	601a      	str	r2, [r3, #0]
 800e01c:	bd08      	pop	{r3, pc}
 800e01e:	bf00      	nop
 800e020:	240007e0 	.word	0x240007e0
 800e024:	24000768 	.word	0x24000768
 800e028:	24000e14 	.word	0x24000e14

0800e02c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 800e02c:	f003 bd76 	b.w	8011b1c <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

0800e030 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 800e030:	f003 bd86 	b.w	8011b40 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

0800e034 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800e034:	b508      	push	{r3, lr}
 800e036:	f000 fcaf 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e03a:	4b06      	ldr	r3, [pc, #24]	@ (800e054 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800e03c:	4906      	ldr	r1, [pc, #24]	@ (800e058 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	60c8      	str	r0, [r1, #12]
 800e042:	b10a      	cbz	r2, 800e048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 800e044:	4803      	ldr	r0, [pc, #12]	@ (800e054 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800e046:	bd08      	pop	{r3, pc}
 800e048:	4a04      	ldr	r2, [pc, #16]	@ (800e05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 800e04a:	4802      	ldr	r0, [pc, #8]	@ (800e054 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 800e04c:	6812      	ldr	r2, [r2, #0]
 800e04e:	601a      	str	r2, [r3, #0]
 800e050:	bd08      	pop	{r3, pc}
 800e052:	bf00      	nop
 800e054:	24000864 	.word	0x24000864
 800e058:	240007ec 	.word	0x240007ec
 800e05c:	24000e14 	.word	0x24000e14

0800e060 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 800e060:	f003 bd72 	b.w	8011b48 <autoware_vehicle_msgs__msg__HazardLightsReport__init>

0800e064 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 800e064:	f003 bd82 	b.w	8011b6c <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

0800e068 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800e068:	b508      	push	{r3, lr}
 800e06a:	f000 fc95 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e06e:	4b06      	ldr	r3, [pc, #24]	@ (800e088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800e070:	4906      	ldr	r1, [pc, #24]	@ (800e08c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	60c8      	str	r0, [r1, #12]
 800e076:	b10a      	cbz	r2, 800e07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 800e078:	4803      	ldr	r0, [pc, #12]	@ (800e088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800e07a:	bd08      	pop	{r3, pc}
 800e07c:	4a04      	ldr	r2, [pc, #16]	@ (800e090 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 800e07e:	4802      	ldr	r0, [pc, #8]	@ (800e088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 800e080:	6812      	ldr	r2, [r2, #0]
 800e082:	601a      	str	r2, [r3, #0]
 800e084:	bd08      	pop	{r3, pc}
 800e086:	bf00      	nop
 800e088:	240008e8 	.word	0x240008e8
 800e08c:	24000870 	.word	0x24000870
 800e090:	24000e14 	.word	0x24000e14

0800e094 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 800e094:	f003 bd6e 	b.w	8011b74 <autoware_vehicle_msgs__msg__SteeringReport__init>

0800e098 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 800e098:	f003 bd7e 	b.w	8011b98 <autoware_vehicle_msgs__msg__SteeringReport__fini>

0800e09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800e09c:	b508      	push	{r3, lr}
 800e09e:	f000 fc7b 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e0a2:	4b06      	ldr	r3, [pc, #24]	@ (800e0bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800e0a4:	4906      	ldr	r1, [pc, #24]	@ (800e0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	60c8      	str	r0, [r1, #12]
 800e0aa:	b10a      	cbz	r2, 800e0b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 800e0ac:	4803      	ldr	r0, [pc, #12]	@ (800e0bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800e0ae:	bd08      	pop	{r3, pc}
 800e0b0:	4a04      	ldr	r2, [pc, #16]	@ (800e0c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 800e0b2:	4802      	ldr	r0, [pc, #8]	@ (800e0bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 800e0b4:	6812      	ldr	r2, [r2, #0]
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	bd08      	pop	{r3, pc}
 800e0ba:	bf00      	nop
 800e0bc:	2400096c 	.word	0x2400096c
 800e0c0:	240008f4 	.word	0x240008f4
 800e0c4:	24000e14 	.word	0x24000e14

0800e0c8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 800e0c8:	f003 bd6a 	b.w	8011ba0 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

0800e0cc <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 800e0cc:	f003 bd7a 	b.w	8011bc4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

0800e0d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800e0d0:	b508      	push	{r3, lr}
 800e0d2:	f000 fc61 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e0d6:	4b06      	ldr	r3, [pc, #24]	@ (800e0f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800e0d8:	4906      	ldr	r1, [pc, #24]	@ (800e0f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	60c8      	str	r0, [r1, #12]
 800e0de:	b10a      	cbz	r2, 800e0e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 800e0e0:	4803      	ldr	r0, [pc, #12]	@ (800e0f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800e0e2:	bd08      	pop	{r3, pc}
 800e0e4:	4a04      	ldr	r2, [pc, #16]	@ (800e0f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 800e0e6:	4802      	ldr	r0, [pc, #8]	@ (800e0f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 800e0e8:	6812      	ldr	r2, [r2, #0]
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	bd08      	pop	{r3, pc}
 800e0ee:	bf00      	nop
 800e0f0:	240009f0 	.word	0x240009f0
 800e0f4:	24000978 	.word	0x24000978
 800e0f8:	24000e14 	.word	0x24000e14

0800e0fc <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 800e0fc:	f003 bd66 	b.w	8011bcc <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

0800e100 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 800e100:	f003 bd76 	b.w	8011bf0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

0800e104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800e104:	b508      	push	{r3, lr}
 800e106:	f000 fc47 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e10a:	4b06      	ldr	r3, [pc, #24]	@ (800e124 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800e10c:	4906      	ldr	r1, [pc, #24]	@ (800e128 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	60c8      	str	r0, [r1, #12]
 800e112:	b10a      	cbz	r2, 800e118 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 800e114:	4803      	ldr	r0, [pc, #12]	@ (800e124 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800e116:	bd08      	pop	{r3, pc}
 800e118:	4a04      	ldr	r2, [pc, #16]	@ (800e12c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 800e11a:	4802      	ldr	r0, [pc, #8]	@ (800e124 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 800e11c:	6812      	ldr	r2, [r2, #0]
 800e11e:	601a      	str	r2, [r3, #0]
 800e120:	bd08      	pop	{r3, pc}
 800e122:	bf00      	nop
 800e124:	24000a74 	.word	0x24000a74
 800e128:	240009fc 	.word	0x240009fc
 800e12c:	24000e14 	.word	0x24000e14

0800e130 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 800e130:	f003 bd62 	b.w	8011bf8 <autoware_vehicle_msgs__msg__VelocityReport__init>

0800e134 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 800e134:	f003 bd72 	b.w	8011c1c <autoware_vehicle_msgs__msg__VelocityReport__fini>

0800e138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800e138:	b508      	push	{r3, lr}
 800e13a:	f003 f8bb 	bl	80112b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e13e:	4b06      	ldr	r3, [pc, #24]	@ (800e158 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800e140:	4906      	ldr	r1, [pc, #24]	@ (800e15c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	60c8      	str	r0, [r1, #12]
 800e146:	b10a      	cbz	r2, 800e14c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 800e148:	4803      	ldr	r0, [pc, #12]	@ (800e158 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800e14a:	bd08      	pop	{r3, pc}
 800e14c:	4a04      	ldr	r2, [pc, #16]	@ (800e160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 800e14e:	4802      	ldr	r0, [pc, #8]	@ (800e158 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 800e150:	6812      	ldr	r2, [r2, #0]
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	bd08      	pop	{r3, pc}
 800e156:	bf00      	nop
 800e158:	24000b70 	.word	0x24000b70
 800e15c:	24000a80 	.word	0x24000a80
 800e160:	24000e14 	.word	0x24000e14

0800e164 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800e164:	4800      	ldr	r0, [pc, #0]	@ (800e168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 800e166:	4770      	bx	lr
 800e168:	24000b98 	.word	0x24000b98

0800e16c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800e16c:	4800      	ldr	r0, [pc, #0]	@ (800e170 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 800e16e:	4770      	bx	lr
 800e170:	24000ba4 	.word	0x24000ba4

0800e174 <_ControlModeCommand_Response__max_serialized_size>:
 800e174:	2101      	movs	r1, #1
 800e176:	2000      	movs	r0, #0
 800e178:	b508      	push	{r3, lr}
 800e17a:	f001 ff1f 	bl	800ffbc <ucdr_alignment>
 800e17e:	3001      	adds	r0, #1
 800e180:	bd08      	pop	{r3, pc}
 800e182:	bf00      	nop

0800e184 <_ControlModeCommand_Response__cdr_deserialize>:
 800e184:	b109      	cbz	r1, 800e18a <_ControlModeCommand_Response__cdr_deserialize+0x6>
 800e186:	f000 bc93 	b.w	800eab0 <ucdr_deserialize_bool>
 800e18a:	4608      	mov	r0, r1
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop

0800e190 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	b158      	cbz	r0, 800e1ac <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 800e194:	460d      	mov	r5, r1
 800e196:	f000 fc0d 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e19a:	2101      	movs	r1, #1
 800e19c:	182c      	adds	r4, r5, r0
 800e19e:	f1c5 0501 	rsb	r5, r5, #1
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f001 ff0a 	bl	800ffbc <ucdr_alignment>
 800e1a8:	4428      	add	r0, r5
 800e1aa:	4420      	add	r0, r4
 800e1ac:	bd38      	pop	{r3, r4, r5, pc}
 800e1ae:	bf00      	nop

0800e1b0 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 800e1b0:	b138      	cbz	r0, 800e1c2 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 800e1b2:	b508      	push	{r3, lr}
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	2101      	movs	r1, #1
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f001 feff 	bl	800ffbc <ucdr_alignment>
 800e1be:	3001      	adds	r0, #1
 800e1c0:	bd08      	pop	{r3, pc}
 800e1c2:	4770      	bx	lr

0800e1c4 <_ControlModeCommand_Request__cdr_deserialize>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	b179      	cbz	r1, 800e1ea <_ControlModeCommand_Request__cdr_deserialize+0x26>
 800e1ca:	4605      	mov	r5, r0
 800e1cc:	f000 fc56 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	4798      	blx	r3
 800e1dc:	f104 0108 	add.w	r1, r4, #8
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1e6:	f000 bc91 	b.w	800eb0c <ucdr_deserialize_uint8_t>
 800e1ea:	4608      	mov	r0, r1
 800e1ec:	bd38      	pop	{r3, r4, r5, pc}
 800e1ee:	bf00      	nop

0800e1f0 <_ControlModeCommand_Request__cdr_serialize>:
 800e1f0:	b180      	cbz	r0, 800e214 <_ControlModeCommand_Request__cdr_serialize+0x24>
 800e1f2:	b538      	push	{r3, r4, r5, lr}
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	460d      	mov	r5, r1
 800e1f8:	f000 fc40 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	4629      	mov	r1, r5
 800e200:	4620      	mov	r0, r4
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	4798      	blx	r3
 800e208:	7a21      	ldrb	r1, [r4, #8]
 800e20a:	4628      	mov	r0, r5
 800e20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e210:	f000 bc66 	b.w	800eae0 <ucdr_serialize_uint8_t>
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop

0800e218 <_ControlModeCommand_Response__cdr_serialize>:
 800e218:	460a      	mov	r2, r1
 800e21a:	b118      	cbz	r0, 800e224 <_ControlModeCommand_Response__cdr_serialize+0xc>
 800e21c:	7801      	ldrb	r1, [r0, #0]
 800e21e:	4610      	mov	r0, r2
 800e220:	f000 bc30 	b.w	800ea84 <ucdr_serialize_bool>
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop

0800e228 <_ControlModeCommand_Response__get_serialized_size>:
 800e228:	b130      	cbz	r0, 800e238 <_ControlModeCommand_Response__get_serialized_size+0x10>
 800e22a:	2101      	movs	r1, #1
 800e22c:	2000      	movs	r0, #0
 800e22e:	b508      	push	{r3, lr}
 800e230:	f001 fec4 	bl	800ffbc <ucdr_alignment>
 800e234:	3001      	adds	r0, #1
 800e236:	bd08      	pop	{r3, pc}
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop

0800e23c <_ControlModeCommand_Request__get_serialized_size>:
 800e23c:	b150      	cbz	r0, 800e254 <_ControlModeCommand_Request__get_serialized_size+0x18>
 800e23e:	2100      	movs	r1, #0
 800e240:	b510      	push	{r4, lr}
 800e242:	f000 fbb7 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e246:	4604      	mov	r4, r0
 800e248:	2101      	movs	r1, #1
 800e24a:	f001 feb7 	bl	800ffbc <ucdr_alignment>
 800e24e:	4420      	add	r0, r4
 800e250:	3001      	adds	r0, #1
 800e252:	bd10      	pop	{r4, pc}
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop

0800e258 <_ControlModeCommand_Request__max_serialized_size>:
 800e258:	b510      	push	{r4, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	2401      	movs	r4, #1
 800e25e:	2100      	movs	r1, #0
 800e260:	f10d 0007 	add.w	r0, sp, #7
 800e264:	f88d 4007 	strb.w	r4, [sp, #7]
 800e268:	f000 fbf4 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e26c:	4621      	mov	r1, r4
 800e26e:	4604      	mov	r4, r0
 800e270:	f001 fea4 	bl	800ffbc <ucdr_alignment>
 800e274:	4420      	add	r0, r4
 800e276:	3001      	adds	r0, #1
 800e278:	b002      	add	sp, #8
 800e27a:	bd10      	pop	{r4, pc}

0800e27c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 800e27c:	4800      	ldr	r0, [pc, #0]	@ (800e280 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 800e27e:	4770      	bx	lr
 800e280:	24000b8c 	.word	0x24000b8c

0800e284 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	b158      	cbz	r0, 800e2a0 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 800e288:	460d      	mov	r5, r1
 800e28a:	f000 fb93 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e28e:	2101      	movs	r1, #1
 800e290:	182c      	adds	r4, r5, r0
 800e292:	f1c5 0501 	rsb	r5, r5, #1
 800e296:	4620      	mov	r0, r4
 800e298:	f001 fe90 	bl	800ffbc <ucdr_alignment>
 800e29c:	4428      	add	r0, r5
 800e29e:	4420      	add	r0, r4
 800e2a0:	bd38      	pop	{r3, r4, r5, pc}
 800e2a2:	bf00      	nop

0800e2a4 <_ControlModeReport__cdr_deserialize>:
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	b179      	cbz	r1, 800e2ca <_ControlModeReport__cdr_deserialize+0x26>
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	f000 fbe6 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	4798      	blx	r3
 800e2bc:	f104 0108 	add.w	r1, r4, #8
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2c6:	f000 bc21 	b.w	800eb0c <ucdr_deserialize_uint8_t>
 800e2ca:	4608      	mov	r0, r1
 800e2cc:	bd38      	pop	{r3, r4, r5, pc}
 800e2ce:	bf00      	nop

0800e2d0 <_ControlModeReport__cdr_serialize>:
 800e2d0:	b180      	cbz	r0, 800e2f4 <_ControlModeReport__cdr_serialize+0x24>
 800e2d2:	b538      	push	{r3, r4, r5, lr}
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	460d      	mov	r5, r1
 800e2d8:	f000 fbd0 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	4629      	mov	r1, r5
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	4798      	blx	r3
 800e2e8:	7a21      	ldrb	r1, [r4, #8]
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2f0:	f000 bbf6 	b.w	800eae0 <ucdr_serialize_uint8_t>
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop

0800e2f8 <_ControlModeReport__get_serialized_size>:
 800e2f8:	b150      	cbz	r0, 800e310 <_ControlModeReport__get_serialized_size+0x18>
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	f000 fb59 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e302:	4604      	mov	r4, r0
 800e304:	2101      	movs	r1, #1
 800e306:	f001 fe59 	bl	800ffbc <ucdr_alignment>
 800e30a:	4420      	add	r0, r4
 800e30c:	3001      	adds	r0, #1
 800e30e:	bd10      	pop	{r4, pc}
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop

0800e314 <_ControlModeReport__max_serialized_size>:
 800e314:	b510      	push	{r4, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	2401      	movs	r4, #1
 800e31a:	2100      	movs	r1, #0
 800e31c:	f10d 0007 	add.w	r0, sp, #7
 800e320:	f88d 4007 	strb.w	r4, [sp, #7]
 800e324:	f000 fb96 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e328:	4621      	mov	r1, r4
 800e32a:	4604      	mov	r4, r0
 800e32c:	f001 fe46 	bl	800ffbc <ucdr_alignment>
 800e330:	4420      	add	r0, r4
 800e332:	3001      	adds	r0, #1
 800e334:	b002      	add	sp, #8
 800e336:	bd10      	pop	{r4, pc}

0800e338 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 800e338:	4800      	ldr	r0, [pc, #0]	@ (800e33c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 800e33a:	4770      	bx	lr
 800e33c:	24000be8 	.word	0x24000be8

0800e340 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 800e340:	b538      	push	{r3, r4, r5, lr}
 800e342:	b158      	cbz	r0, 800e35c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 800e344:	460d      	mov	r5, r1
 800e346:	f000 fb35 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e34a:	2101      	movs	r1, #1
 800e34c:	182c      	adds	r4, r5, r0
 800e34e:	f1c5 0501 	rsb	r5, r5, #1
 800e352:	4620      	mov	r0, r4
 800e354:	f001 fe32 	bl	800ffbc <ucdr_alignment>
 800e358:	4428      	add	r0, r5
 800e35a:	4420      	add	r0, r4
 800e35c:	bd38      	pop	{r3, r4, r5, pc}
 800e35e:	bf00      	nop

0800e360 <_GearCommand__cdr_deserialize>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	460c      	mov	r4, r1
 800e364:	b179      	cbz	r1, 800e386 <_GearCommand__cdr_deserialize+0x26>
 800e366:	4605      	mov	r5, r0
 800e368:	f000 fb88 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e36c:	4603      	mov	r3, r0
 800e36e:	4621      	mov	r1, r4
 800e370:	4628      	mov	r0, r5
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	4798      	blx	r3
 800e378:	f104 0108 	add.w	r1, r4, #8
 800e37c:	4628      	mov	r0, r5
 800e37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e382:	f000 bbc3 	b.w	800eb0c <ucdr_deserialize_uint8_t>
 800e386:	4608      	mov	r0, r1
 800e388:	bd38      	pop	{r3, r4, r5, pc}
 800e38a:	bf00      	nop

0800e38c <_GearCommand__cdr_serialize>:
 800e38c:	b180      	cbz	r0, 800e3b0 <_GearCommand__cdr_serialize+0x24>
 800e38e:	b538      	push	{r3, r4, r5, lr}
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	f000 fb72 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e398:	4603      	mov	r3, r0
 800e39a:	4629      	mov	r1, r5
 800e39c:	4620      	mov	r0, r4
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	4798      	blx	r3
 800e3a4:	7a21      	ldrb	r1, [r4, #8]
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3ac:	f000 bb98 	b.w	800eae0 <ucdr_serialize_uint8_t>
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop

0800e3b4 <_GearCommand__get_serialized_size>:
 800e3b4:	b150      	cbz	r0, 800e3cc <_GearCommand__get_serialized_size+0x18>
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	b510      	push	{r4, lr}
 800e3ba:	f000 fafb 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e3be:	4604      	mov	r4, r0
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	f001 fdfb 	bl	800ffbc <ucdr_alignment>
 800e3c6:	4420      	add	r0, r4
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	bd10      	pop	{r4, pc}
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop

0800e3d0 <_GearCommand__max_serialized_size>:
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	2401      	movs	r4, #1
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	f10d 0007 	add.w	r0, sp, #7
 800e3dc:	f88d 4007 	strb.w	r4, [sp, #7]
 800e3e0:	f000 fb38 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	f001 fde8 	bl	800ffbc <ucdr_alignment>
 800e3ec:	4420      	add	r0, r4
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	b002      	add	sp, #8
 800e3f2:	bd10      	pop	{r4, pc}

0800e3f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 800e3f4:	4800      	ldr	r0, [pc, #0]	@ (800e3f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 800e3f6:	4770      	bx	lr
 800e3f8:	24000c10 	.word	0x24000c10

0800e3fc <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	b158      	cbz	r0, 800e418 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 800e400:	460d      	mov	r5, r1
 800e402:	f000 fad7 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e406:	2101      	movs	r1, #1
 800e408:	182c      	adds	r4, r5, r0
 800e40a:	f1c5 0501 	rsb	r5, r5, #1
 800e40e:	4620      	mov	r0, r4
 800e410:	f001 fdd4 	bl	800ffbc <ucdr_alignment>
 800e414:	4428      	add	r0, r5
 800e416:	4420      	add	r0, r4
 800e418:	bd38      	pop	{r3, r4, r5, pc}
 800e41a:	bf00      	nop

0800e41c <_GearReport__cdr_deserialize>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	460c      	mov	r4, r1
 800e420:	b179      	cbz	r1, 800e442 <_GearReport__cdr_deserialize+0x26>
 800e422:	4605      	mov	r5, r0
 800e424:	f000 fb2a 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e428:	4603      	mov	r3, r0
 800e42a:	4621      	mov	r1, r4
 800e42c:	4628      	mov	r0, r5
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	4798      	blx	r3
 800e434:	f104 0108 	add.w	r1, r4, #8
 800e438:	4628      	mov	r0, r5
 800e43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e43e:	f000 bb65 	b.w	800eb0c <ucdr_deserialize_uint8_t>
 800e442:	4608      	mov	r0, r1
 800e444:	bd38      	pop	{r3, r4, r5, pc}
 800e446:	bf00      	nop

0800e448 <_GearReport__cdr_serialize>:
 800e448:	b180      	cbz	r0, 800e46c <_GearReport__cdr_serialize+0x24>
 800e44a:	b538      	push	{r3, r4, r5, lr}
 800e44c:	4604      	mov	r4, r0
 800e44e:	460d      	mov	r5, r1
 800e450:	f000 fb14 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e454:	4603      	mov	r3, r0
 800e456:	4629      	mov	r1, r5
 800e458:	4620      	mov	r0, r4
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	4798      	blx	r3
 800e460:	7a21      	ldrb	r1, [r4, #8]
 800e462:	4628      	mov	r0, r5
 800e464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e468:	f000 bb3a 	b.w	800eae0 <ucdr_serialize_uint8_t>
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop

0800e470 <_GearReport__get_serialized_size>:
 800e470:	b150      	cbz	r0, 800e488 <_GearReport__get_serialized_size+0x18>
 800e472:	2100      	movs	r1, #0
 800e474:	b510      	push	{r4, lr}
 800e476:	f000 fa9d 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e47a:	4604      	mov	r4, r0
 800e47c:	2101      	movs	r1, #1
 800e47e:	f001 fd9d 	bl	800ffbc <ucdr_alignment>
 800e482:	4420      	add	r0, r4
 800e484:	3001      	adds	r0, #1
 800e486:	bd10      	pop	{r4, pc}
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop

0800e48c <_GearReport__max_serialized_size>:
 800e48c:	b510      	push	{r4, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	2401      	movs	r4, #1
 800e492:	2100      	movs	r1, #0
 800e494:	f10d 0007 	add.w	r0, sp, #7
 800e498:	f88d 4007 	strb.w	r4, [sp, #7]
 800e49c:	f000 fada 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e4a0:	4621      	mov	r1, r4
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	f001 fd8a 	bl	800ffbc <ucdr_alignment>
 800e4a8:	4420      	add	r0, r4
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	b002      	add	sp, #8
 800e4ae:	bd10      	pop	{r4, pc}

0800e4b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 800e4b0:	4800      	ldr	r0, [pc, #0]	@ (800e4b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 800e4b2:	4770      	bx	lr
 800e4b4:	24000c38 	.word	0x24000c38

0800e4b8 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800e4b8:	b538      	push	{r3, r4, r5, lr}
 800e4ba:	b158      	cbz	r0, 800e4d4 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 800e4bc:	460d      	mov	r5, r1
 800e4be:	f000 fa79 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e4c2:	2101      	movs	r1, #1
 800e4c4:	182c      	adds	r4, r5, r0
 800e4c6:	f1c5 0501 	rsb	r5, r5, #1
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	f001 fd76 	bl	800ffbc <ucdr_alignment>
 800e4d0:	4428      	add	r0, r5
 800e4d2:	4420      	add	r0, r4
 800e4d4:	bd38      	pop	{r3, r4, r5, pc}
 800e4d6:	bf00      	nop

0800e4d8 <_HazardLightsCommand__cdr_deserialize>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	460c      	mov	r4, r1
 800e4dc:	b179      	cbz	r1, 800e4fe <_HazardLightsCommand__cdr_deserialize+0x26>
 800e4de:	4605      	mov	r5, r0
 800e4e0:	f000 facc 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	4798      	blx	r3
 800e4f0:	f104 0108 	add.w	r1, r4, #8
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4fa:	f000 bb07 	b.w	800eb0c <ucdr_deserialize_uint8_t>
 800e4fe:	4608      	mov	r0, r1
 800e500:	bd38      	pop	{r3, r4, r5, pc}
 800e502:	bf00      	nop

0800e504 <_HazardLightsCommand__cdr_serialize>:
 800e504:	b180      	cbz	r0, 800e528 <_HazardLightsCommand__cdr_serialize+0x24>
 800e506:	b538      	push	{r3, r4, r5, lr}
 800e508:	4604      	mov	r4, r0
 800e50a:	460d      	mov	r5, r1
 800e50c:	f000 fab6 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e510:	4603      	mov	r3, r0
 800e512:	4629      	mov	r1, r5
 800e514:	4620      	mov	r0, r4
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	4798      	blx	r3
 800e51c:	7a21      	ldrb	r1, [r4, #8]
 800e51e:	4628      	mov	r0, r5
 800e520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e524:	f000 badc 	b.w	800eae0 <ucdr_serialize_uint8_t>
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop

0800e52c <_HazardLightsCommand__get_serialized_size>:
 800e52c:	b150      	cbz	r0, 800e544 <_HazardLightsCommand__get_serialized_size+0x18>
 800e52e:	2100      	movs	r1, #0
 800e530:	b510      	push	{r4, lr}
 800e532:	f000 fa3f 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e536:	4604      	mov	r4, r0
 800e538:	2101      	movs	r1, #1
 800e53a:	f001 fd3f 	bl	800ffbc <ucdr_alignment>
 800e53e:	4420      	add	r0, r4
 800e540:	3001      	adds	r0, #1
 800e542:	bd10      	pop	{r4, pc}
 800e544:	4770      	bx	lr
 800e546:	bf00      	nop

0800e548 <_HazardLightsCommand__max_serialized_size>:
 800e548:	b510      	push	{r4, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	2401      	movs	r4, #1
 800e54e:	2100      	movs	r1, #0
 800e550:	f10d 0007 	add.w	r0, sp, #7
 800e554:	f88d 4007 	strb.w	r4, [sp, #7]
 800e558:	f000 fa7c 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e55c:	4621      	mov	r1, r4
 800e55e:	4604      	mov	r4, r0
 800e560:	f001 fd2c 	bl	800ffbc <ucdr_alignment>
 800e564:	4420      	add	r0, r4
 800e566:	3001      	adds	r0, #1
 800e568:	b002      	add	sp, #8
 800e56a:	bd10      	pop	{r4, pc}

0800e56c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 800e56c:	4800      	ldr	r0, [pc, #0]	@ (800e570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 800e56e:	4770      	bx	lr
 800e570:	24000c60 	.word	0x24000c60

0800e574 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	b158      	cbz	r0, 800e590 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 800e578:	460d      	mov	r5, r1
 800e57a:	f000 fa1b 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e57e:	2101      	movs	r1, #1
 800e580:	182c      	adds	r4, r5, r0
 800e582:	f1c5 0501 	rsb	r5, r5, #1
 800e586:	4620      	mov	r0, r4
 800e588:	f001 fd18 	bl	800ffbc <ucdr_alignment>
 800e58c:	4428      	add	r0, r5
 800e58e:	4420      	add	r0, r4
 800e590:	bd38      	pop	{r3, r4, r5, pc}
 800e592:	bf00      	nop

0800e594 <_HazardLightsReport__cdr_deserialize>:
 800e594:	b538      	push	{r3, r4, r5, lr}
 800e596:	460c      	mov	r4, r1
 800e598:	b179      	cbz	r1, 800e5ba <_HazardLightsReport__cdr_deserialize+0x26>
 800e59a:	4605      	mov	r5, r0
 800e59c:	f000 fa6e 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	4798      	blx	r3
 800e5ac:	f104 0108 	add.w	r1, r4, #8
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5b6:	f000 baa9 	b.w	800eb0c <ucdr_deserialize_uint8_t>
 800e5ba:	4608      	mov	r0, r1
 800e5bc:	bd38      	pop	{r3, r4, r5, pc}
 800e5be:	bf00      	nop

0800e5c0 <_HazardLightsReport__cdr_serialize>:
 800e5c0:	b180      	cbz	r0, 800e5e4 <_HazardLightsReport__cdr_serialize+0x24>
 800e5c2:	b538      	push	{r3, r4, r5, lr}
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	460d      	mov	r5, r1
 800e5c8:	f000 fa58 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	4798      	blx	r3
 800e5d8:	7a21      	ldrb	r1, [r4, #8]
 800e5da:	4628      	mov	r0, r5
 800e5dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5e0:	f000 ba7e 	b.w	800eae0 <ucdr_serialize_uint8_t>
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop

0800e5e8 <_HazardLightsReport__get_serialized_size>:
 800e5e8:	b150      	cbz	r0, 800e600 <_HazardLightsReport__get_serialized_size+0x18>
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	b510      	push	{r4, lr}
 800e5ee:	f000 f9e1 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	f001 fce1 	bl	800ffbc <ucdr_alignment>
 800e5fa:	4420      	add	r0, r4
 800e5fc:	3001      	adds	r0, #1
 800e5fe:	bd10      	pop	{r4, pc}
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop

0800e604 <_HazardLightsReport__max_serialized_size>:
 800e604:	b510      	push	{r4, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	2401      	movs	r4, #1
 800e60a:	2100      	movs	r1, #0
 800e60c:	f10d 0007 	add.w	r0, sp, #7
 800e610:	f88d 4007 	strb.w	r4, [sp, #7]
 800e614:	f000 fa1e 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e618:	4621      	mov	r1, r4
 800e61a:	4604      	mov	r4, r0
 800e61c:	f001 fcce 	bl	800ffbc <ucdr_alignment>
 800e620:	4420      	add	r0, r4
 800e622:	3001      	adds	r0, #1
 800e624:	b002      	add	sp, #8
 800e626:	bd10      	pop	{r4, pc}

0800e628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 800e628:	4800      	ldr	r0, [pc, #0]	@ (800e62c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 800e62a:	4770      	bx	lr
 800e62c:	24000c88 	.word	0x24000c88

0800e630 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	b158      	cbz	r0, 800e64c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 800e634:	460d      	mov	r5, r1
 800e636:	f000 f9bd 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e63a:	2104      	movs	r1, #4
 800e63c:	182c      	adds	r4, r5, r0
 800e63e:	f1c5 0504 	rsb	r5, r5, #4
 800e642:	4620      	mov	r0, r4
 800e644:	f001 fcba 	bl	800ffbc <ucdr_alignment>
 800e648:	4428      	add	r0, r5
 800e64a:	4420      	add	r0, r4
 800e64c:	bd38      	pop	{r3, r4, r5, pc}
 800e64e:	bf00      	nop

0800e650 <_SteeringReport__cdr_deserialize>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	460c      	mov	r4, r1
 800e654:	b179      	cbz	r1, 800e676 <_SteeringReport__cdr_deserialize+0x26>
 800e656:	4605      	mov	r5, r0
 800e658:	f000 fa10 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e65c:	4603      	mov	r3, r0
 800e65e:	4621      	mov	r1, r4
 800e660:	4628      	mov	r0, r5
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	4798      	blx	r3
 800e668:	f104 0108 	add.w	r1, r4, #8
 800e66c:	4628      	mov	r0, r5
 800e66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e672:	f001 ba25 	b.w	800fac0 <ucdr_deserialize_float>
 800e676:	4608      	mov	r0, r1
 800e678:	bd38      	pop	{r3, r4, r5, pc}
 800e67a:	bf00      	nop

0800e67c <_SteeringReport__cdr_serialize>:
 800e67c:	b188      	cbz	r0, 800e6a2 <_SteeringReport__cdr_serialize+0x26>
 800e67e:	b538      	push	{r3, r4, r5, lr}
 800e680:	4604      	mov	r4, r0
 800e682:	460d      	mov	r5, r1
 800e684:	f000 f9fa 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e688:	4603      	mov	r3, r0
 800e68a:	4629      	mov	r1, r5
 800e68c:	4620      	mov	r0, r4
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	4798      	blx	r3
 800e694:	ed94 0a02 	vldr	s0, [r4, #8]
 800e698:	4628      	mov	r0, r5
 800e69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e69e:	f001 b977 	b.w	800f990 <ucdr_serialize_float>
 800e6a2:	4770      	bx	lr

0800e6a4 <_SteeringReport__get_serialized_size>:
 800e6a4:	b150      	cbz	r0, 800e6bc <_SteeringReport__get_serialized_size+0x18>
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	b510      	push	{r4, lr}
 800e6aa:	f000 f983 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	2104      	movs	r1, #4
 800e6b2:	f001 fc83 	bl	800ffbc <ucdr_alignment>
 800e6b6:	4420      	add	r0, r4
 800e6b8:	3004      	adds	r0, #4
 800e6ba:	bd10      	pop	{r4, pc}
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop

0800e6c0 <_SteeringReport__max_serialized_size>:
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	f10d 0007 	add.w	r0, sp, #7
 800e6cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800e6d0:	f000 f9c0 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	2104      	movs	r1, #4
 800e6d8:	f001 fc70 	bl	800ffbc <ucdr_alignment>
 800e6dc:	4420      	add	r0, r4
 800e6de:	3004      	adds	r0, #4
 800e6e0:	b002      	add	sp, #8
 800e6e2:	bd10      	pop	{r4, pc}

0800e6e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 800e6e4:	4800      	ldr	r0, [pc, #0]	@ (800e6e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 800e6e6:	4770      	bx	lr
 800e6e8:	24000cb0 	.word	0x24000cb0

0800e6ec <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800e6ec:	b538      	push	{r3, r4, r5, lr}
 800e6ee:	b158      	cbz	r0, 800e708 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 800e6f0:	460d      	mov	r5, r1
 800e6f2:	f000 f95f 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e6f6:	2101      	movs	r1, #1
 800e6f8:	182c      	adds	r4, r5, r0
 800e6fa:	f1c5 0501 	rsb	r5, r5, #1
 800e6fe:	4620      	mov	r0, r4
 800e700:	f001 fc5c 	bl	800ffbc <ucdr_alignment>
 800e704:	4428      	add	r0, r5
 800e706:	4420      	add	r0, r4
 800e708:	bd38      	pop	{r3, r4, r5, pc}
 800e70a:	bf00      	nop

0800e70c <_TurnIndicatorsCommand__cdr_deserialize>:
 800e70c:	b538      	push	{r3, r4, r5, lr}
 800e70e:	460c      	mov	r4, r1
 800e710:	b179      	cbz	r1, 800e732 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 800e712:	4605      	mov	r5, r0
 800e714:	f000 f9b2 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e718:	4603      	mov	r3, r0
 800e71a:	4621      	mov	r1, r4
 800e71c:	4628      	mov	r0, r5
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	4798      	blx	r3
 800e724:	f104 0108 	add.w	r1, r4, #8
 800e728:	4628      	mov	r0, r5
 800e72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e72e:	f000 b9ed 	b.w	800eb0c <ucdr_deserialize_uint8_t>
 800e732:	4608      	mov	r0, r1
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop

0800e738 <_TurnIndicatorsCommand__cdr_serialize>:
 800e738:	b180      	cbz	r0, 800e75c <_TurnIndicatorsCommand__cdr_serialize+0x24>
 800e73a:	b538      	push	{r3, r4, r5, lr}
 800e73c:	4604      	mov	r4, r0
 800e73e:	460d      	mov	r5, r1
 800e740:	f000 f99c 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e744:	4603      	mov	r3, r0
 800e746:	4629      	mov	r1, r5
 800e748:	4620      	mov	r0, r4
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	4798      	blx	r3
 800e750:	7a21      	ldrb	r1, [r4, #8]
 800e752:	4628      	mov	r0, r5
 800e754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e758:	f000 b9c2 	b.w	800eae0 <ucdr_serialize_uint8_t>
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop

0800e760 <_TurnIndicatorsCommand__get_serialized_size>:
 800e760:	b150      	cbz	r0, 800e778 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 800e762:	2100      	movs	r1, #0
 800e764:	b510      	push	{r4, lr}
 800e766:	f000 f925 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e76a:	4604      	mov	r4, r0
 800e76c:	2101      	movs	r1, #1
 800e76e:	f001 fc25 	bl	800ffbc <ucdr_alignment>
 800e772:	4420      	add	r0, r4
 800e774:	3001      	adds	r0, #1
 800e776:	bd10      	pop	{r4, pc}
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop

0800e77c <_TurnIndicatorsCommand__max_serialized_size>:
 800e77c:	b510      	push	{r4, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	2401      	movs	r4, #1
 800e782:	2100      	movs	r1, #0
 800e784:	f10d 0007 	add.w	r0, sp, #7
 800e788:	f88d 4007 	strb.w	r4, [sp, #7]
 800e78c:	f000 f962 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e790:	4621      	mov	r1, r4
 800e792:	4604      	mov	r4, r0
 800e794:	f001 fc12 	bl	800ffbc <ucdr_alignment>
 800e798:	4420      	add	r0, r4
 800e79a:	3001      	adds	r0, #1
 800e79c:	b002      	add	sp, #8
 800e79e:	bd10      	pop	{r4, pc}

0800e7a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 800e7a0:	4800      	ldr	r0, [pc, #0]	@ (800e7a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 800e7a2:	4770      	bx	lr
 800e7a4:	24000cd8 	.word	0x24000cd8

0800e7a8 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	b158      	cbz	r0, 800e7c4 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 800e7ac:	460d      	mov	r5, r1
 800e7ae:	f000 f901 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e7b2:	2101      	movs	r1, #1
 800e7b4:	182c      	adds	r4, r5, r0
 800e7b6:	f1c5 0501 	rsb	r5, r5, #1
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f001 fbfe 	bl	800ffbc <ucdr_alignment>
 800e7c0:	4428      	add	r0, r5
 800e7c2:	4420      	add	r0, r4
 800e7c4:	bd38      	pop	{r3, r4, r5, pc}
 800e7c6:	bf00      	nop

0800e7c8 <_TurnIndicatorsReport__cdr_deserialize>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	b179      	cbz	r1, 800e7ee <_TurnIndicatorsReport__cdr_deserialize+0x26>
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	f000 f954 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	4628      	mov	r0, r5
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	4798      	blx	r3
 800e7e0:	f104 0108 	add.w	r1, r4, #8
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7ea:	f000 b98f 	b.w	800eb0c <ucdr_deserialize_uint8_t>
 800e7ee:	4608      	mov	r0, r1
 800e7f0:	bd38      	pop	{r3, r4, r5, pc}
 800e7f2:	bf00      	nop

0800e7f4 <_TurnIndicatorsReport__cdr_serialize>:
 800e7f4:	b180      	cbz	r0, 800e818 <_TurnIndicatorsReport__cdr_serialize+0x24>
 800e7f6:	b538      	push	{r3, r4, r5, lr}
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	f000 f93e 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e800:	4603      	mov	r3, r0
 800e802:	4629      	mov	r1, r5
 800e804:	4620      	mov	r0, r4
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	4798      	blx	r3
 800e80c:	7a21      	ldrb	r1, [r4, #8]
 800e80e:	4628      	mov	r0, r5
 800e810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e814:	f000 b964 	b.w	800eae0 <ucdr_serialize_uint8_t>
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop

0800e81c <_TurnIndicatorsReport__get_serialized_size>:
 800e81c:	b150      	cbz	r0, 800e834 <_TurnIndicatorsReport__get_serialized_size+0x18>
 800e81e:	2100      	movs	r1, #0
 800e820:	b510      	push	{r4, lr}
 800e822:	f000 f8c7 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800e826:	4604      	mov	r4, r0
 800e828:	2101      	movs	r1, #1
 800e82a:	f001 fbc7 	bl	800ffbc <ucdr_alignment>
 800e82e:	4420      	add	r0, r4
 800e830:	3001      	adds	r0, #1
 800e832:	bd10      	pop	{r4, pc}
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop

0800e838 <_TurnIndicatorsReport__max_serialized_size>:
 800e838:	b510      	push	{r4, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	2401      	movs	r4, #1
 800e83e:	2100      	movs	r1, #0
 800e840:	f10d 0007 	add.w	r0, sp, #7
 800e844:	f88d 4007 	strb.w	r4, [sp, #7]
 800e848:	f000 f904 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 800e84c:	4621      	mov	r1, r4
 800e84e:	4604      	mov	r4, r0
 800e850:	f001 fbb4 	bl	800ffbc <ucdr_alignment>
 800e854:	4420      	add	r0, r4
 800e856:	3001      	adds	r0, #1
 800e858:	b002      	add	sp, #8
 800e85a:	bd10      	pop	{r4, pc}

0800e85c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 800e85c:	4800      	ldr	r0, [pc, #0]	@ (800e860 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 800e85e:	4770      	bx	lr
 800e860:	24000d00 	.word	0x24000d00

0800e864 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 800e864:	b1c8      	cbz	r0, 800e89a <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 800e866:	b570      	push	{r4, r5, r6, lr}
 800e868:	460d      	mov	r5, r1
 800e86a:	f002 fd47 	bl	80112fc <get_serialized_size_std_msgs__msg__Header>
 800e86e:	2104      	movs	r1, #4
 800e870:	182e      	adds	r6, r5, r0
 800e872:	f1c5 0504 	rsb	r5, r5, #4
 800e876:	4630      	mov	r0, r6
 800e878:	f001 fba0 	bl	800ffbc <ucdr_alignment>
 800e87c:	2104      	movs	r1, #4
 800e87e:	1844      	adds	r4, r0, r1
 800e880:	4434      	add	r4, r6
 800e882:	4620      	mov	r0, r4
 800e884:	f001 fb9a 	bl	800ffbc <ucdr_alignment>
 800e888:	2104      	movs	r1, #4
 800e88a:	4408      	add	r0, r1
 800e88c:	4404      	add	r4, r0
 800e88e:	4620      	mov	r0, r4
 800e890:	f001 fb94 	bl	800ffbc <ucdr_alignment>
 800e894:	4428      	add	r0, r5
 800e896:	4420      	add	r0, r4
 800e898:	bd70      	pop	{r4, r5, r6, pc}
 800e89a:	4770      	bx	lr

0800e89c <_VelocityReport__cdr_deserialize>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	460c      	mov	r4, r1
 800e8a0:	b1c9      	cbz	r1, 800e8d6 <_VelocityReport__cdr_deserialize+0x3a>
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	f002 fdae 	bl	8011404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	4798      	blx	r3
 800e8b4:	f104 0114 	add.w	r1, r4, #20
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	f001 f901 	bl	800fac0 <ucdr_deserialize_float>
 800e8be:	f104 0118 	add.w	r1, r4, #24
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	f001 f8fc 	bl	800fac0 <ucdr_deserialize_float>
 800e8c8:	f104 011c 	add.w	r1, r4, #28
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8d2:	f001 b8f5 	b.w	800fac0 <ucdr_deserialize_float>
 800e8d6:	4608      	mov	r0, r1
 800e8d8:	bd38      	pop	{r3, r4, r5, pc}
 800e8da:	bf00      	nop

0800e8dc <_VelocityReport__cdr_serialize>:
 800e8dc:	b1d8      	cbz	r0, 800e916 <_VelocityReport__cdr_serialize+0x3a>
 800e8de:	b538      	push	{r3, r4, r5, lr}
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	460d      	mov	r5, r1
 800e8e4:	f002 fd8e 	bl	8011404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	4798      	blx	r3
 800e8f4:	ed94 0a05 	vldr	s0, [r4, #20]
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	f001 f849 	bl	800f990 <ucdr_serialize_float>
 800e8fe:	ed94 0a06 	vldr	s0, [r4, #24]
 800e902:	4628      	mov	r0, r5
 800e904:	f001 f844 	bl	800f990 <ucdr_serialize_float>
 800e908:	ed94 0a07 	vldr	s0, [r4, #28]
 800e90c:	4628      	mov	r0, r5
 800e90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e912:	f001 b83d 	b.w	800f990 <ucdr_serialize_float>
 800e916:	4770      	bx	lr

0800e918 <_VelocityReport__get_serialized_size>:
 800e918:	b1b0      	cbz	r0, 800e948 <_VelocityReport__get_serialized_size+0x30>
 800e91a:	2100      	movs	r1, #0
 800e91c:	b510      	push	{r4, lr}
 800e91e:	f002 fced 	bl	80112fc <get_serialized_size_std_msgs__msg__Header>
 800e922:	4604      	mov	r4, r0
 800e924:	2104      	movs	r1, #4
 800e926:	f001 fb49 	bl	800ffbc <ucdr_alignment>
 800e92a:	2104      	movs	r1, #4
 800e92c:	4420      	add	r0, r4
 800e92e:	1844      	adds	r4, r0, r1
 800e930:	4620      	mov	r0, r4
 800e932:	f001 fb43 	bl	800ffbc <ucdr_alignment>
 800e936:	2104      	movs	r1, #4
 800e938:	4408      	add	r0, r1
 800e93a:	4404      	add	r4, r0
 800e93c:	4620      	mov	r0, r4
 800e93e:	f001 fb3d 	bl	800ffbc <ucdr_alignment>
 800e942:	3004      	adds	r0, #4
 800e944:	4420      	add	r0, r4
 800e946:	bd10      	pop	{r4, pc}
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop

0800e94c <_VelocityReport__max_serialized_size>:
 800e94c:	b510      	push	{r4, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	2301      	movs	r3, #1
 800e952:	2100      	movs	r1, #0
 800e954:	f10d 0007 	add.w	r0, sp, #7
 800e958:	f88d 3007 	strb.w	r3, [sp, #7]
 800e95c:	f002 fd48 	bl	80113f0 <max_serialized_size_std_msgs__msg__Header>
 800e960:	4604      	mov	r4, r0
 800e962:	2104      	movs	r1, #4
 800e964:	f001 fb2a 	bl	800ffbc <ucdr_alignment>
 800e968:	2104      	movs	r1, #4
 800e96a:	4420      	add	r0, r4
 800e96c:	1844      	adds	r4, r0, r1
 800e96e:	4620      	mov	r0, r4
 800e970:	f001 fb24 	bl	800ffbc <ucdr_alignment>
 800e974:	2104      	movs	r1, #4
 800e976:	4408      	add	r0, r1
 800e978:	4404      	add	r4, r0
 800e97a:	4620      	mov	r0, r4
 800e97c:	f001 fb1e 	bl	800ffbc <ucdr_alignment>
 800e980:	3004      	adds	r0, #4
 800e982:	4420      	add	r0, r4
 800e984:	b002      	add	sp, #8
 800e986:	bd10      	pop	{r4, pc}

0800e988 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 800e988:	4800      	ldr	r0, [pc, #0]	@ (800e98c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 800e98a:	4770      	bx	lr
 800e98c:	24000d28 	.word	0x24000d28

0800e990 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800e990:	f003 b948 	b.w	8011c24 <builtin_interfaces__msg__Time__init>

0800e994 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800e994:	f003 b94a 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>

0800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e998:	4b04      	ldr	r3, [pc, #16]	@ (800e9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	b10a      	cbz	r2, 800e9a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800e99e:	4803      	ldr	r0, [pc, #12]	@ (800e9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e9a0:	4770      	bx	lr
 800e9a2:	4a03      	ldr	r2, [pc, #12]	@ (800e9b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800e9a4:	4801      	ldr	r0, [pc, #4]	@ (800e9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e9a6:	6812      	ldr	r2, [r2, #0]
 800e9a8:	601a      	str	r2, [r3, #0]
 800e9aa:	4770      	bx	lr
 800e9ac:	24000dc8 	.word	0x24000dc8
 800e9b0:	24000e14 	.word	0x24000e14

0800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800e9b4:	b180      	cbz	r0, 800e9d8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800e9b6:	b538      	push	{r3, r4, r5, lr}
 800e9b8:	460d      	mov	r5, r1
 800e9ba:	2104      	movs	r1, #4
 800e9bc:	4628      	mov	r0, r5
 800e9be:	f001 fafd 	bl	800ffbc <ucdr_alignment>
 800e9c2:	1d2b      	adds	r3, r5, #4
 800e9c4:	f1c5 0504 	rsb	r5, r5, #4
 800e9c8:	2104      	movs	r1, #4
 800e9ca:	181c      	adds	r4, r3, r0
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	f001 faf5 	bl	800ffbc <ucdr_alignment>
 800e9d2:	4428      	add	r0, r5
 800e9d4:	4420      	add	r0, r4
 800e9d6:	bd38      	pop	{r3, r4, r5, pc}
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop

0800e9dc <_Time__cdr_deserialize>:
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	460c      	mov	r4, r1
 800e9e0:	b141      	cbz	r1, 800e9f4 <_Time__cdr_deserialize+0x18>
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	f000 ff44 	bl	800f870 <ucdr_deserialize_int32_t>
 800e9e8:	1d21      	adds	r1, r4, #4
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9f0:	f000 bbbc 	b.w	800f16c <ucdr_deserialize_uint32_t>
 800e9f4:	4608      	mov	r0, r1
 800e9f6:	bd38      	pop	{r3, r4, r5, pc}

0800e9f8 <_Time__cdr_serialize>:
 800e9f8:	b160      	cbz	r0, 800ea14 <_Time__cdr_serialize+0x1c>
 800e9fa:	b538      	push	{r3, r4, r5, lr}
 800e9fc:	460d      	mov	r5, r1
 800e9fe:	4604      	mov	r4, r0
 800ea00:	6801      	ldr	r1, [r0, #0]
 800ea02:	4628      	mov	r0, r5
 800ea04:	f000 fe9c 	bl	800f740 <ucdr_serialize_int32_t>
 800ea08:	6861      	ldr	r1, [r4, #4]
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea10:	f000 ba7c 	b.w	800ef0c <ucdr_serialize_uint32_t>
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop

0800ea18 <_Time__get_serialized_size>:
 800ea18:	b160      	cbz	r0, 800ea34 <_Time__get_serialized_size+0x1c>
 800ea1a:	2104      	movs	r1, #4
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	b510      	push	{r4, lr}
 800ea20:	f001 facc 	bl	800ffbc <ucdr_alignment>
 800ea24:	2104      	movs	r1, #4
 800ea26:	1844      	adds	r4, r0, r1
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f001 fac7 	bl	800ffbc <ucdr_alignment>
 800ea2e:	3004      	adds	r0, #4
 800ea30:	4420      	add	r0, r4
 800ea32:	bd10      	pop	{r4, pc}
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop

0800ea38 <_Time__max_serialized_size>:
 800ea38:	b510      	push	{r4, lr}
 800ea3a:	2104      	movs	r1, #4
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	f001 fabd 	bl	800ffbc <ucdr_alignment>
 800ea42:	2104      	movs	r1, #4
 800ea44:	1844      	adds	r4, r0, r1
 800ea46:	4620      	mov	r0, r4
 800ea48:	f001 fab8 	bl	800ffbc <ucdr_alignment>
 800ea4c:	3004      	adds	r0, #4
 800ea4e:	4420      	add	r0, r4
 800ea50:	bd10      	pop	{r4, pc}
 800ea52:	bf00      	nop

0800ea54 <max_serialized_size_builtin_interfaces__msg__Time>:
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	460c      	mov	r4, r1
 800ea58:	2301      	movs	r3, #1
 800ea5a:	2104      	movs	r1, #4
 800ea5c:	1d25      	adds	r5, r4, #4
 800ea5e:	7003      	strb	r3, [r0, #0]
 800ea60:	4620      	mov	r0, r4
 800ea62:	f1c4 0404 	rsb	r4, r4, #4
 800ea66:	f001 faa9 	bl	800ffbc <ucdr_alignment>
 800ea6a:	4405      	add	r5, r0
 800ea6c:	2104      	movs	r1, #4
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f001 faa4 	bl	800ffbc <ucdr_alignment>
 800ea74:	4420      	add	r0, r4
 800ea76:	4428      	add	r0, r5
 800ea78:	bd38      	pop	{r3, r4, r5, pc}
 800ea7a:	bf00      	nop

0800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ea7c:	4800      	ldr	r0, [pc, #0]	@ (800ea80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ea7e:	4770      	bx	lr
 800ea80:	24000dd4 	.word	0x24000dd4

0800ea84 <ucdr_serialize_bool>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	460d      	mov	r5, r1
 800ea88:	2101      	movs	r1, #1
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	f001 fa4a 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800ea90:	b148      	cbz	r0, 800eaa6 <ucdr_serialize_bool+0x22>
 800ea92:	68a3      	ldr	r3, [r4, #8]
 800ea94:	2101      	movs	r1, #1
 800ea96:	701d      	strb	r5, [r3, #0]
 800ea98:	68a2      	ldr	r2, [r4, #8]
 800ea9a:	6923      	ldr	r3, [r4, #16]
 800ea9c:	440a      	add	r2, r1
 800ea9e:	7561      	strb	r1, [r4, #21]
 800eaa0:	440b      	add	r3, r1
 800eaa2:	60a2      	str	r2, [r4, #8]
 800eaa4:	6123      	str	r3, [r4, #16]
 800eaa6:	7da0      	ldrb	r0, [r4, #22]
 800eaa8:	f080 0001 	eor.w	r0, r0, #1
 800eaac:	bd38      	pop	{r3, r4, r5, pc}
 800eaae:	bf00      	nop

0800eab0 <ucdr_deserialize_bool>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	460d      	mov	r5, r1
 800eab4:	2101      	movs	r1, #1
 800eab6:	4604      	mov	r4, r0
 800eab8:	f001 fa34 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800eabc:	b160      	cbz	r0, 800ead8 <ucdr_deserialize_bool+0x28>
 800eabe:	68a2      	ldr	r2, [r4, #8]
 800eac0:	2101      	movs	r1, #1
 800eac2:	6923      	ldr	r3, [r4, #16]
 800eac4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800eac8:	440b      	add	r3, r1
 800eaca:	3800      	subs	r0, #0
 800eacc:	bf18      	it	ne
 800eace:	2001      	movne	r0, #1
 800ead0:	7028      	strb	r0, [r5, #0]
 800ead2:	60a2      	str	r2, [r4, #8]
 800ead4:	6123      	str	r3, [r4, #16]
 800ead6:	7561      	strb	r1, [r4, #21]
 800ead8:	7da0      	ldrb	r0, [r4, #22]
 800eada:	f080 0001 	eor.w	r0, r0, #1
 800eade:	bd38      	pop	{r3, r4, r5, pc}

0800eae0 <ucdr_serialize_uint8_t>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	460d      	mov	r5, r1
 800eae4:	2101      	movs	r1, #1
 800eae6:	4604      	mov	r4, r0
 800eae8:	f001 fa1c 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800eaec:	b148      	cbz	r0, 800eb02 <ucdr_serialize_uint8_t+0x22>
 800eaee:	68a3      	ldr	r3, [r4, #8]
 800eaf0:	2101      	movs	r1, #1
 800eaf2:	701d      	strb	r5, [r3, #0]
 800eaf4:	68a2      	ldr	r2, [r4, #8]
 800eaf6:	6923      	ldr	r3, [r4, #16]
 800eaf8:	440a      	add	r2, r1
 800eafa:	7561      	strb	r1, [r4, #21]
 800eafc:	440b      	add	r3, r1
 800eafe:	60a2      	str	r2, [r4, #8]
 800eb00:	6123      	str	r3, [r4, #16]
 800eb02:	7da0      	ldrb	r0, [r4, #22]
 800eb04:	f080 0001 	eor.w	r0, r0, #1
 800eb08:	bd38      	pop	{r3, r4, r5, pc}
 800eb0a:	bf00      	nop

0800eb0c <ucdr_deserialize_uint8_t>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	460d      	mov	r5, r1
 800eb10:	2101      	movs	r1, #1
 800eb12:	4604      	mov	r4, r0
 800eb14:	f001 fa06 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800eb18:	b150      	cbz	r0, 800eb30 <ucdr_deserialize_uint8_t+0x24>
 800eb1a:	68a3      	ldr	r3, [r4, #8]
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	702b      	strb	r3, [r5, #0]
 800eb22:	68a2      	ldr	r2, [r4, #8]
 800eb24:	6923      	ldr	r3, [r4, #16]
 800eb26:	440a      	add	r2, r1
 800eb28:	7561      	strb	r1, [r4, #21]
 800eb2a:	440b      	add	r3, r1
 800eb2c:	60a2      	str	r2, [r4, #8]
 800eb2e:	6123      	str	r3, [r4, #16]
 800eb30:	7da0      	ldrb	r0, [r4, #22]
 800eb32:	f080 0001 	eor.w	r0, r0, #1
 800eb36:	bd38      	pop	{r3, r4, r5, pc}

0800eb38 <ucdr_serialize_uint16_t>:
 800eb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	b082      	sub	sp, #8
 800eb40:	4604      	mov	r4, r0
 800eb42:	2102      	movs	r1, #2
 800eb44:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eb48:	f001 fa40 	bl	800ffcc <ucdr_buffer_alignment>
 800eb4c:	4601      	mov	r1, r0
 800eb4e:	4620      	mov	r0, r4
 800eb50:	7d67      	ldrb	r7, [r4, #21]
 800eb52:	f001 fa83 	bl	801005c <ucdr_advance_buffer>
 800eb56:	2102      	movs	r1, #2
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f001 f9d7 	bl	800ff0c <ucdr_check_buffer_available_for>
 800eb5e:	bb78      	cbnz	r0, 800ebc0 <ucdr_serialize_uint16_t+0x88>
 800eb60:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800eb64:	42ab      	cmp	r3, r5
 800eb66:	d926      	bls.n	800ebb6 <ucdr_serialize_uint16_t+0x7e>
 800eb68:	1b5e      	subs	r6, r3, r5
 800eb6a:	60a3      	str	r3, [r4, #8]
 800eb6c:	6923      	ldr	r3, [r4, #16]
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f1c6 0802 	rsb	r8, r6, #2
 800eb74:	4433      	add	r3, r6
 800eb76:	4641      	mov	r1, r8
 800eb78:	6123      	str	r3, [r4, #16]
 800eb7a:	f001 f9d3 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d03b      	beq.n	800ebfa <ucdr_serialize_uint16_t+0xc2>
 800eb82:	7d23      	ldrb	r3, [r4, #20]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d04a      	beq.n	800ec1e <ucdr_serialize_uint16_t+0xe6>
 800eb88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb8c:	702b      	strb	r3, [r5, #0]
 800eb8e:	2e00      	cmp	r6, #0
 800eb90:	d040      	beq.n	800ec14 <ucdr_serialize_uint16_t+0xdc>
 800eb92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb96:	706b      	strb	r3, [r5, #1]
 800eb98:	6923      	ldr	r3, [r4, #16]
 800eb9a:	2102      	movs	r1, #2
 800eb9c:	68a2      	ldr	r2, [r4, #8]
 800eb9e:	3302      	adds	r3, #2
 800eba0:	7da0      	ldrb	r0, [r4, #22]
 800eba2:	4442      	add	r2, r8
 800eba4:	7561      	strb	r1, [r4, #21]
 800eba6:	1b9e      	subs	r6, r3, r6
 800eba8:	f080 0001 	eor.w	r0, r0, #1
 800ebac:	60a2      	str	r2, [r4, #8]
 800ebae:	6126      	str	r6, [r4, #16]
 800ebb0:	b002      	add	sp, #8
 800ebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb6:	2102      	movs	r1, #2
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f001 f9b3 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800ebbe:	b190      	cbz	r0, 800ebe6 <ucdr_serialize_uint16_t+0xae>
 800ebc0:	7d23      	ldrb	r3, [r4, #20]
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	68a3      	ldr	r3, [r4, #8]
 800ebc6:	d014      	beq.n	800ebf2 <ucdr_serialize_uint16_t+0xba>
 800ebc8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ebcc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebd0:	7019      	strb	r1, [r3, #0]
 800ebd2:	68a3      	ldr	r3, [r4, #8]
 800ebd4:	705a      	strb	r2, [r3, #1]
 800ebd6:	2102      	movs	r1, #2
 800ebd8:	68a2      	ldr	r2, [r4, #8]
 800ebda:	6923      	ldr	r3, [r4, #16]
 800ebdc:	440a      	add	r2, r1
 800ebde:	7561      	strb	r1, [r4, #21]
 800ebe0:	440b      	add	r3, r1
 800ebe2:	60a2      	str	r2, [r4, #8]
 800ebe4:	6123      	str	r3, [r4, #16]
 800ebe6:	7da0      	ldrb	r0, [r4, #22]
 800ebe8:	f080 0001 	eor.w	r0, r0, #1
 800ebec:	b002      	add	sp, #8
 800ebee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ebf6:	801a      	strh	r2, [r3, #0]
 800ebf8:	e7ed      	b.n	800ebd6 <ucdr_serialize_uint16_t+0x9e>
 800ebfa:	68a2      	ldr	r2, [r4, #8]
 800ebfc:	6923      	ldr	r3, [r4, #16]
 800ebfe:	7da0      	ldrb	r0, [r4, #22]
 800ec00:	1b92      	subs	r2, r2, r6
 800ec02:	1b9b      	subs	r3, r3, r6
 800ec04:	7567      	strb	r7, [r4, #21]
 800ec06:	f080 0001 	eor.w	r0, r0, #1
 800ec0a:	60a2      	str	r2, [r4, #8]
 800ec0c:	6123      	str	r3, [r4, #16]
 800ec0e:	b002      	add	sp, #8
 800ec10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec14:	68a3      	ldr	r3, [r4, #8]
 800ec16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec1a:	701a      	strb	r2, [r3, #0]
 800ec1c:	e7bc      	b.n	800eb98 <ucdr_serialize_uint16_t+0x60>
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f10d 0506 	add.w	r5, sp, #6
 800ec24:	4632      	mov	r2, r6
 800ec26:	4629      	mov	r1, r5
 800ec28:	f00e fc8b 	bl	801d542 <memcpy>
 800ec2c:	4642      	mov	r2, r8
 800ec2e:	19a9      	adds	r1, r5, r6
 800ec30:	68a0      	ldr	r0, [r4, #8]
 800ec32:	f00e fc86 	bl	801d542 <memcpy>
 800ec36:	e7af      	b.n	800eb98 <ucdr_serialize_uint16_t+0x60>

0800ec38 <ucdr_serialize_endian_uint16_t>:
 800ec38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	b083      	sub	sp, #12
 800ec40:	460d      	mov	r5, r1
 800ec42:	2102      	movs	r1, #2
 800ec44:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ec48:	f001 f9c0 	bl	800ffcc <ucdr_buffer_alignment>
 800ec4c:	4601      	mov	r1, r0
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec54:	f001 fa02 	bl	801005c <ucdr_advance_buffer>
 800ec58:	2102      	movs	r1, #2
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f001 f956 	bl	800ff0c <ucdr_check_buffer_available_for>
 800ec60:	bb70      	cbnz	r0, 800ecc0 <ucdr_serialize_endian_uint16_t+0x88>
 800ec62:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec66:	42be      	cmp	r6, r7
 800ec68:	d925      	bls.n	800ecb6 <ucdr_serialize_endian_uint16_t+0x7e>
 800ec6a:	6923      	ldr	r3, [r4, #16]
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	60a6      	str	r6, [r4, #8]
 800ec70:	1bf6      	subs	r6, r6, r7
 800ec72:	4433      	add	r3, r6
 800ec74:	f1c6 0902 	rsb	r9, r6, #2
 800ec78:	6123      	str	r3, [r4, #16]
 800ec7a:	4649      	mov	r1, r9
 800ec7c:	f001 f952 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d039      	beq.n	800ecf8 <ucdr_serialize_endian_uint16_t+0xc0>
 800ec84:	2d01      	cmp	r5, #1
 800ec86:	d04a      	beq.n	800ed1e <ucdr_serialize_endian_uint16_t+0xe6>
 800ec88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec8c:	703b      	strb	r3, [r7, #0]
 800ec8e:	2e00      	cmp	r6, #0
 800ec90:	d040      	beq.n	800ed14 <ucdr_serialize_endian_uint16_t+0xdc>
 800ec92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec96:	707b      	strb	r3, [r7, #1]
 800ec98:	6923      	ldr	r3, [r4, #16]
 800ec9a:	2102      	movs	r1, #2
 800ec9c:	68a2      	ldr	r2, [r4, #8]
 800ec9e:	7da0      	ldrb	r0, [r4, #22]
 800eca0:	3302      	adds	r3, #2
 800eca2:	444a      	add	r2, r9
 800eca4:	7561      	strb	r1, [r4, #21]
 800eca6:	1b9b      	subs	r3, r3, r6
 800eca8:	f080 0001 	eor.w	r0, r0, #1
 800ecac:	60a2      	str	r2, [r4, #8]
 800ecae:	6123      	str	r3, [r4, #16]
 800ecb0:	b003      	add	sp, #12
 800ecb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecb6:	2102      	movs	r1, #2
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f001 f933 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800ecbe:	b188      	cbz	r0, 800ece4 <ucdr_serialize_endian_uint16_t+0xac>
 800ecc0:	2d01      	cmp	r5, #1
 800ecc2:	68a3      	ldr	r3, [r4, #8]
 800ecc4:	d014      	beq.n	800ecf0 <ucdr_serialize_endian_uint16_t+0xb8>
 800ecc6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ecca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ecce:	7019      	strb	r1, [r3, #0]
 800ecd0:	68a3      	ldr	r3, [r4, #8]
 800ecd2:	705a      	strb	r2, [r3, #1]
 800ecd4:	2102      	movs	r1, #2
 800ecd6:	68a2      	ldr	r2, [r4, #8]
 800ecd8:	6923      	ldr	r3, [r4, #16]
 800ecda:	440a      	add	r2, r1
 800ecdc:	7561      	strb	r1, [r4, #21]
 800ecde:	440b      	add	r3, r1
 800ece0:	60a2      	str	r2, [r4, #8]
 800ece2:	6123      	str	r3, [r4, #16]
 800ece4:	7da0      	ldrb	r0, [r4, #22]
 800ece6:	f080 0001 	eor.w	r0, r0, #1
 800ecea:	b003      	add	sp, #12
 800ecec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecf0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ecf4:	801a      	strh	r2, [r3, #0]
 800ecf6:	e7ed      	b.n	800ecd4 <ucdr_serialize_endian_uint16_t+0x9c>
 800ecf8:	68a2      	ldr	r2, [r4, #8]
 800ecfa:	6923      	ldr	r3, [r4, #16]
 800ecfc:	7da0      	ldrb	r0, [r4, #22]
 800ecfe:	1b92      	subs	r2, r2, r6
 800ed00:	1b9b      	subs	r3, r3, r6
 800ed02:	f884 8015 	strb.w	r8, [r4, #21]
 800ed06:	f080 0001 	eor.w	r0, r0, #1
 800ed0a:	60a2      	str	r2, [r4, #8]
 800ed0c:	6123      	str	r3, [r4, #16]
 800ed0e:	b003      	add	sp, #12
 800ed10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed14:	68a3      	ldr	r3, [r4, #8]
 800ed16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed1a:	701a      	strb	r2, [r3, #0]
 800ed1c:	e7bc      	b.n	800ec98 <ucdr_serialize_endian_uint16_t+0x60>
 800ed1e:	f10d 0506 	add.w	r5, sp, #6
 800ed22:	4632      	mov	r2, r6
 800ed24:	4638      	mov	r0, r7
 800ed26:	4629      	mov	r1, r5
 800ed28:	f00e fc0b 	bl	801d542 <memcpy>
 800ed2c:	464a      	mov	r2, r9
 800ed2e:	19a9      	adds	r1, r5, r6
 800ed30:	68a0      	ldr	r0, [r4, #8]
 800ed32:	f00e fc06 	bl	801d542 <memcpy>
 800ed36:	e7af      	b.n	800ec98 <ucdr_serialize_endian_uint16_t+0x60>

0800ed38 <ucdr_deserialize_uint16_t>:
 800ed38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	460d      	mov	r5, r1
 800ed40:	2102      	movs	r1, #2
 800ed42:	f001 f943 	bl	800ffcc <ucdr_buffer_alignment>
 800ed46:	4601      	mov	r1, r0
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed4e:	f001 f985 	bl	801005c <ucdr_advance_buffer>
 800ed52:	2102      	movs	r1, #2
 800ed54:	4620      	mov	r0, r4
 800ed56:	f001 f8d9 	bl	800ff0c <ucdr_check_buffer_available_for>
 800ed5a:	bb60      	cbnz	r0, 800edb6 <ucdr_deserialize_uint16_t+0x7e>
 800ed5c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ed60:	42be      	cmp	r6, r7
 800ed62:	d923      	bls.n	800edac <ucdr_deserialize_uint16_t+0x74>
 800ed64:	6923      	ldr	r3, [r4, #16]
 800ed66:	4620      	mov	r0, r4
 800ed68:	60a6      	str	r6, [r4, #8]
 800ed6a:	1bf6      	subs	r6, r6, r7
 800ed6c:	4433      	add	r3, r6
 800ed6e:	f1c6 0902 	rsb	r9, r6, #2
 800ed72:	6123      	str	r3, [r4, #16]
 800ed74:	4649      	mov	r1, r9
 800ed76:	f001 f8d5 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d034      	beq.n	800ede8 <ucdr_deserialize_uint16_t+0xb0>
 800ed7e:	7d23      	ldrb	r3, [r4, #20]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d042      	beq.n	800ee0a <ucdr_deserialize_uint16_t+0xd2>
 800ed84:	787b      	ldrb	r3, [r7, #1]
 800ed86:	702b      	strb	r3, [r5, #0]
 800ed88:	2e00      	cmp	r6, #0
 800ed8a:	d03a      	beq.n	800ee02 <ucdr_deserialize_uint16_t+0xca>
 800ed8c:	783b      	ldrb	r3, [r7, #0]
 800ed8e:	706b      	strb	r3, [r5, #1]
 800ed90:	6923      	ldr	r3, [r4, #16]
 800ed92:	2102      	movs	r1, #2
 800ed94:	68a2      	ldr	r2, [r4, #8]
 800ed96:	3302      	adds	r3, #2
 800ed98:	7da0      	ldrb	r0, [r4, #22]
 800ed9a:	444a      	add	r2, r9
 800ed9c:	7561      	strb	r1, [r4, #21]
 800ed9e:	1b9b      	subs	r3, r3, r6
 800eda0:	f080 0001 	eor.w	r0, r0, #1
 800eda4:	60a2      	str	r2, [r4, #8]
 800eda6:	6123      	str	r3, [r4, #16]
 800eda8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edac:	2102      	movs	r1, #2
 800edae:	4620      	mov	r0, r4
 800edb0:	f001 f8b8 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800edb4:	b180      	cbz	r0, 800edd8 <ucdr_deserialize_uint16_t+0xa0>
 800edb6:	7d23      	ldrb	r3, [r4, #20]
 800edb8:	2b01      	cmp	r3, #1
 800edba:	68a3      	ldr	r3, [r4, #8]
 800edbc:	d011      	beq.n	800ede2 <ucdr_deserialize_uint16_t+0xaa>
 800edbe:	785b      	ldrb	r3, [r3, #1]
 800edc0:	702b      	strb	r3, [r5, #0]
 800edc2:	68a3      	ldr	r3, [r4, #8]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	706b      	strb	r3, [r5, #1]
 800edc8:	2102      	movs	r1, #2
 800edca:	68a2      	ldr	r2, [r4, #8]
 800edcc:	6923      	ldr	r3, [r4, #16]
 800edce:	440a      	add	r2, r1
 800edd0:	7561      	strb	r1, [r4, #21]
 800edd2:	440b      	add	r3, r1
 800edd4:	60a2      	str	r2, [r4, #8]
 800edd6:	6123      	str	r3, [r4, #16]
 800edd8:	7da0      	ldrb	r0, [r4, #22]
 800edda:	f080 0001 	eor.w	r0, r0, #1
 800edde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede2:	881b      	ldrh	r3, [r3, #0]
 800ede4:	802b      	strh	r3, [r5, #0]
 800ede6:	e7ef      	b.n	800edc8 <ucdr_deserialize_uint16_t+0x90>
 800ede8:	68a2      	ldr	r2, [r4, #8]
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	1b92      	subs	r2, r2, r6
 800edee:	7da0      	ldrb	r0, [r4, #22]
 800edf0:	1b9b      	subs	r3, r3, r6
 800edf2:	f884 8015 	strb.w	r8, [r4, #21]
 800edf6:	f080 0001 	eor.w	r0, r0, #1
 800edfa:	60a2      	str	r2, [r4, #8]
 800edfc:	6123      	str	r3, [r4, #16]
 800edfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee02:	68a3      	ldr	r3, [r4, #8]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	706b      	strb	r3, [r5, #1]
 800ee08:	e7c2      	b.n	800ed90 <ucdr_deserialize_uint16_t+0x58>
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	4632      	mov	r2, r6
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f00e fb97 	bl	801d542 <memcpy>
 800ee14:	464a      	mov	r2, r9
 800ee16:	19a8      	adds	r0, r5, r6
 800ee18:	68a1      	ldr	r1, [r4, #8]
 800ee1a:	f00e fb92 	bl	801d542 <memcpy>
 800ee1e:	e7b7      	b.n	800ed90 <ucdr_deserialize_uint16_t+0x58>

0800ee20 <ucdr_deserialize_endian_uint16_t>:
 800ee20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee24:	4604      	mov	r4, r0
 800ee26:	460e      	mov	r6, r1
 800ee28:	2102      	movs	r1, #2
 800ee2a:	4615      	mov	r5, r2
 800ee2c:	f001 f8ce 	bl	800ffcc <ucdr_buffer_alignment>
 800ee30:	4601      	mov	r1, r0
 800ee32:	4620      	mov	r0, r4
 800ee34:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ee38:	f001 f910 	bl	801005c <ucdr_advance_buffer>
 800ee3c:	2102      	movs	r1, #2
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f001 f864 	bl	800ff0c <ucdr_check_buffer_available_for>
 800ee44:	bb70      	cbnz	r0, 800eea4 <ucdr_deserialize_endian_uint16_t+0x84>
 800ee46:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800ee4a:	454f      	cmp	r7, r9
 800ee4c:	d925      	bls.n	800ee9a <ucdr_deserialize_endian_uint16_t+0x7a>
 800ee4e:	6923      	ldr	r3, [r4, #16]
 800ee50:	4620      	mov	r0, r4
 800ee52:	60a7      	str	r7, [r4, #8]
 800ee54:	eba7 0709 	sub.w	r7, r7, r9
 800ee58:	443b      	add	r3, r7
 800ee5a:	f1c7 0a02 	rsb	sl, r7, #2
 800ee5e:	6123      	str	r3, [r4, #16]
 800ee60:	4651      	mov	r1, sl
 800ee62:	f001 f85f 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d034      	beq.n	800eed4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ee6a:	2e01      	cmp	r6, #1
 800ee6c:	d043      	beq.n	800eef6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ee6e:	f899 3001 	ldrb.w	r3, [r9, #1]
 800ee72:	702b      	strb	r3, [r5, #0]
 800ee74:	2f00      	cmp	r7, #0
 800ee76:	d03a      	beq.n	800eeee <ucdr_deserialize_endian_uint16_t+0xce>
 800ee78:	f899 3000 	ldrb.w	r3, [r9]
 800ee7c:	706b      	strb	r3, [r5, #1]
 800ee7e:	6923      	ldr	r3, [r4, #16]
 800ee80:	2102      	movs	r1, #2
 800ee82:	68a2      	ldr	r2, [r4, #8]
 800ee84:	3302      	adds	r3, #2
 800ee86:	7da0      	ldrb	r0, [r4, #22]
 800ee88:	4452      	add	r2, sl
 800ee8a:	7561      	strb	r1, [r4, #21]
 800ee8c:	1bdb      	subs	r3, r3, r7
 800ee8e:	f080 0001 	eor.w	r0, r0, #1
 800ee92:	60a2      	str	r2, [r4, #8]
 800ee94:	6123      	str	r3, [r4, #16]
 800ee96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee9a:	2102      	movs	r1, #2
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f001 f841 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800eea2:	b178      	cbz	r0, 800eec4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800eea4:	2e01      	cmp	r6, #1
 800eea6:	68a3      	ldr	r3, [r4, #8]
 800eea8:	d011      	beq.n	800eece <ucdr_deserialize_endian_uint16_t+0xae>
 800eeaa:	785b      	ldrb	r3, [r3, #1]
 800eeac:	702b      	strb	r3, [r5, #0]
 800eeae:	68a3      	ldr	r3, [r4, #8]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	706b      	strb	r3, [r5, #1]
 800eeb4:	2102      	movs	r1, #2
 800eeb6:	68a2      	ldr	r2, [r4, #8]
 800eeb8:	6923      	ldr	r3, [r4, #16]
 800eeba:	440a      	add	r2, r1
 800eebc:	7561      	strb	r1, [r4, #21]
 800eebe:	440b      	add	r3, r1
 800eec0:	60a2      	str	r2, [r4, #8]
 800eec2:	6123      	str	r3, [r4, #16]
 800eec4:	7da0      	ldrb	r0, [r4, #22]
 800eec6:	f080 0001 	eor.w	r0, r0, #1
 800eeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eece:	881b      	ldrh	r3, [r3, #0]
 800eed0:	802b      	strh	r3, [r5, #0]
 800eed2:	e7ef      	b.n	800eeb4 <ucdr_deserialize_endian_uint16_t+0x94>
 800eed4:	68a2      	ldr	r2, [r4, #8]
 800eed6:	6923      	ldr	r3, [r4, #16]
 800eed8:	1bd2      	subs	r2, r2, r7
 800eeda:	7da0      	ldrb	r0, [r4, #22]
 800eedc:	1bdb      	subs	r3, r3, r7
 800eede:	f884 8015 	strb.w	r8, [r4, #21]
 800eee2:	f080 0001 	eor.w	r0, r0, #1
 800eee6:	60a2      	str	r2, [r4, #8]
 800eee8:	6123      	str	r3, [r4, #16]
 800eeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeee:	68a3      	ldr	r3, [r4, #8]
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	706b      	strb	r3, [r5, #1]
 800eef4:	e7c3      	b.n	800ee7e <ucdr_deserialize_endian_uint16_t+0x5e>
 800eef6:	4649      	mov	r1, r9
 800eef8:	463a      	mov	r2, r7
 800eefa:	4628      	mov	r0, r5
 800eefc:	f00e fb21 	bl	801d542 <memcpy>
 800ef00:	4652      	mov	r2, sl
 800ef02:	19e8      	adds	r0, r5, r7
 800ef04:	68a1      	ldr	r1, [r4, #8]
 800ef06:	f00e fb1c 	bl	801d542 <memcpy>
 800ef0a:	e7b8      	b.n	800ee7e <ucdr_deserialize_endian_uint16_t+0x5e>

0800ef0c <ucdr_serialize_uint32_t>:
 800ef0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef10:	b082      	sub	sp, #8
 800ef12:	4604      	mov	r4, r0
 800ef14:	9101      	str	r1, [sp, #4]
 800ef16:	2104      	movs	r1, #4
 800ef18:	f001 f858 	bl	800ffcc <ucdr_buffer_alignment>
 800ef1c:	4601      	mov	r1, r0
 800ef1e:	4620      	mov	r0, r4
 800ef20:	7d67      	ldrb	r7, [r4, #21]
 800ef22:	f001 f89b 	bl	801005c <ucdr_advance_buffer>
 800ef26:	2104      	movs	r1, #4
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 ffef 	bl	800ff0c <ucdr_check_buffer_available_for>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d139      	bne.n	800efa6 <ucdr_serialize_uint32_t+0x9a>
 800ef32:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ef36:	42ab      	cmp	r3, r5
 800ef38:	d930      	bls.n	800ef9c <ucdr_serialize_uint32_t+0x90>
 800ef3a:	1b5e      	subs	r6, r3, r5
 800ef3c:	60a3      	str	r3, [r4, #8]
 800ef3e:	6923      	ldr	r3, [r4, #16]
 800ef40:	4620      	mov	r0, r4
 800ef42:	f1c6 0804 	rsb	r8, r6, #4
 800ef46:	4433      	add	r3, r6
 800ef48:	4641      	mov	r1, r8
 800ef4a:	6123      	str	r3, [r4, #16]
 800ef4c:	f000 ffea 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800ef50:	2800      	cmp	r0, #0
 800ef52:	d04c      	beq.n	800efee <ucdr_serialize_uint32_t+0xe2>
 800ef54:	7d23      	ldrb	r3, [r4, #20]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d063      	beq.n	800f022 <ucdr_serialize_uint32_t+0x116>
 800ef5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef5e:	702b      	strb	r3, [r5, #0]
 800ef60:	2e00      	cmp	r6, #0
 800ef62:	d051      	beq.n	800f008 <ucdr_serialize_uint32_t+0xfc>
 800ef64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef68:	2e01      	cmp	r6, #1
 800ef6a:	706b      	strb	r3, [r5, #1]
 800ef6c:	d050      	beq.n	800f010 <ucdr_serialize_uint32_t+0x104>
 800ef6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef72:	2e02      	cmp	r6, #2
 800ef74:	70ab      	strb	r3, [r5, #2]
 800ef76:	d04f      	beq.n	800f018 <ucdr_serialize_uint32_t+0x10c>
 800ef78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef7c:	70eb      	strb	r3, [r5, #3]
 800ef7e:	6923      	ldr	r3, [r4, #16]
 800ef80:	2104      	movs	r1, #4
 800ef82:	68a2      	ldr	r2, [r4, #8]
 800ef84:	3304      	adds	r3, #4
 800ef86:	7da0      	ldrb	r0, [r4, #22]
 800ef88:	4442      	add	r2, r8
 800ef8a:	7561      	strb	r1, [r4, #21]
 800ef8c:	1b9e      	subs	r6, r3, r6
 800ef8e:	f080 0001 	eor.w	r0, r0, #1
 800ef92:	60a2      	str	r2, [r4, #8]
 800ef94:	6126      	str	r6, [r4, #16]
 800ef96:	b002      	add	sp, #8
 800ef98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef9c:	2104      	movs	r1, #4
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f000 ffc0 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800efa4:	b1d0      	cbz	r0, 800efdc <ucdr_serialize_uint32_t+0xd0>
 800efa6:	7d23      	ldrb	r3, [r4, #20]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	68a3      	ldr	r3, [r4, #8]
 800efac:	d01c      	beq.n	800efe8 <ucdr_serialize_uint32_t+0xdc>
 800efae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800efb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efb6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800efba:	7018      	strb	r0, [r3, #0]
 800efbc:	68a3      	ldr	r3, [r4, #8]
 800efbe:	705a      	strb	r2, [r3, #1]
 800efc0:	68a3      	ldr	r3, [r4, #8]
 800efc2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efc6:	7099      	strb	r1, [r3, #2]
 800efc8:	68a3      	ldr	r3, [r4, #8]
 800efca:	70da      	strb	r2, [r3, #3]
 800efcc:	2104      	movs	r1, #4
 800efce:	68a2      	ldr	r2, [r4, #8]
 800efd0:	6923      	ldr	r3, [r4, #16]
 800efd2:	440a      	add	r2, r1
 800efd4:	7561      	strb	r1, [r4, #21]
 800efd6:	440b      	add	r3, r1
 800efd8:	60a2      	str	r2, [r4, #8]
 800efda:	6123      	str	r3, [r4, #16]
 800efdc:	7da0      	ldrb	r0, [r4, #22]
 800efde:	f080 0001 	eor.w	r0, r0, #1
 800efe2:	b002      	add	sp, #8
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe8:	9a01      	ldr	r2, [sp, #4]
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	e7ee      	b.n	800efcc <ucdr_serialize_uint32_t+0xc0>
 800efee:	68a2      	ldr	r2, [r4, #8]
 800eff0:	6923      	ldr	r3, [r4, #16]
 800eff2:	7da0      	ldrb	r0, [r4, #22]
 800eff4:	1b92      	subs	r2, r2, r6
 800eff6:	1b9b      	subs	r3, r3, r6
 800eff8:	7567      	strb	r7, [r4, #21]
 800effa:	f080 0001 	eor.w	r0, r0, #1
 800effe:	60a2      	str	r2, [r4, #8]
 800f000:	6123      	str	r3, [r4, #16]
 800f002:	b002      	add	sp, #8
 800f004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f008:	68a3      	ldr	r3, [r4, #8]
 800f00a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f00e:	701a      	strb	r2, [r3, #0]
 800f010:	68a3      	ldr	r3, [r4, #8]
 800f012:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f016:	701a      	strb	r2, [r3, #0]
 800f018:	68a3      	ldr	r3, [r4, #8]
 800f01a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f01e:	701a      	strb	r2, [r3, #0]
 800f020:	e7ad      	b.n	800ef7e <ucdr_serialize_uint32_t+0x72>
 800f022:	4628      	mov	r0, r5
 800f024:	ad01      	add	r5, sp, #4
 800f026:	4632      	mov	r2, r6
 800f028:	4629      	mov	r1, r5
 800f02a:	f00e fa8a 	bl	801d542 <memcpy>
 800f02e:	4642      	mov	r2, r8
 800f030:	19a9      	adds	r1, r5, r6
 800f032:	68a0      	ldr	r0, [r4, #8]
 800f034:	f00e fa85 	bl	801d542 <memcpy>
 800f038:	e7a1      	b.n	800ef7e <ucdr_serialize_uint32_t+0x72>
 800f03a:	bf00      	nop

0800f03c <ucdr_serialize_endian_uint32_t>:
 800f03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f040:	4604      	mov	r4, r0
 800f042:	b083      	sub	sp, #12
 800f044:	460d      	mov	r5, r1
 800f046:	2104      	movs	r1, #4
 800f048:	9201      	str	r2, [sp, #4]
 800f04a:	f000 ffbf 	bl	800ffcc <ucdr_buffer_alignment>
 800f04e:	4601      	mov	r1, r0
 800f050:	4620      	mov	r0, r4
 800f052:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f056:	f001 f801 	bl	801005c <ucdr_advance_buffer>
 800f05a:	2104      	movs	r1, #4
 800f05c:	4620      	mov	r0, r4
 800f05e:	f000 ff55 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f062:	2800      	cmp	r0, #0
 800f064:	d138      	bne.n	800f0d8 <ucdr_serialize_endian_uint32_t+0x9c>
 800f066:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f06a:	42b7      	cmp	r7, r6
 800f06c:	d92f      	bls.n	800f0ce <ucdr_serialize_endian_uint32_t+0x92>
 800f06e:	6923      	ldr	r3, [r4, #16]
 800f070:	4620      	mov	r0, r4
 800f072:	60a7      	str	r7, [r4, #8]
 800f074:	1bbf      	subs	r7, r7, r6
 800f076:	443b      	add	r3, r7
 800f078:	f1c7 0904 	rsb	r9, r7, #4
 800f07c:	6123      	str	r3, [r4, #16]
 800f07e:	4649      	mov	r1, r9
 800f080:	f000 ff50 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f084:	2800      	cmp	r0, #0
 800f086:	d04a      	beq.n	800f11e <ucdr_serialize_endian_uint32_t+0xe2>
 800f088:	2d01      	cmp	r5, #1
 800f08a:	d063      	beq.n	800f154 <ucdr_serialize_endian_uint32_t+0x118>
 800f08c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f090:	7033      	strb	r3, [r6, #0]
 800f092:	2f00      	cmp	r7, #0
 800f094:	d051      	beq.n	800f13a <ucdr_serialize_endian_uint32_t+0xfe>
 800f096:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f09a:	2f01      	cmp	r7, #1
 800f09c:	7073      	strb	r3, [r6, #1]
 800f09e:	d050      	beq.n	800f142 <ucdr_serialize_endian_uint32_t+0x106>
 800f0a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f0a4:	2f02      	cmp	r7, #2
 800f0a6:	70b3      	strb	r3, [r6, #2]
 800f0a8:	d04f      	beq.n	800f14a <ucdr_serialize_endian_uint32_t+0x10e>
 800f0aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0ae:	70f3      	strb	r3, [r6, #3]
 800f0b0:	6923      	ldr	r3, [r4, #16]
 800f0b2:	2104      	movs	r1, #4
 800f0b4:	68a2      	ldr	r2, [r4, #8]
 800f0b6:	7da0      	ldrb	r0, [r4, #22]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	444a      	add	r2, r9
 800f0bc:	7561      	strb	r1, [r4, #21]
 800f0be:	1bdb      	subs	r3, r3, r7
 800f0c0:	f080 0001 	eor.w	r0, r0, #1
 800f0c4:	60a2      	str	r2, [r4, #8]
 800f0c6:	6123      	str	r3, [r4, #16]
 800f0c8:	b003      	add	sp, #12
 800f0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0ce:	2104      	movs	r1, #4
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f000 ff27 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f0d6:	b1c8      	cbz	r0, 800f10c <ucdr_serialize_endian_uint32_t+0xd0>
 800f0d8:	2d01      	cmp	r5, #1
 800f0da:	68a3      	ldr	r3, [r4, #8]
 800f0dc:	d01c      	beq.n	800f118 <ucdr_serialize_endian_uint32_t+0xdc>
 800f0de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f0e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f0ea:	7018      	strb	r0, [r3, #0]
 800f0ec:	68a3      	ldr	r3, [r4, #8]
 800f0ee:	705a      	strb	r2, [r3, #1]
 800f0f0:	68a3      	ldr	r3, [r4, #8]
 800f0f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f0f6:	7099      	strb	r1, [r3, #2]
 800f0f8:	68a3      	ldr	r3, [r4, #8]
 800f0fa:	70da      	strb	r2, [r3, #3]
 800f0fc:	2104      	movs	r1, #4
 800f0fe:	68a2      	ldr	r2, [r4, #8]
 800f100:	6923      	ldr	r3, [r4, #16]
 800f102:	440a      	add	r2, r1
 800f104:	7561      	strb	r1, [r4, #21]
 800f106:	440b      	add	r3, r1
 800f108:	60a2      	str	r2, [r4, #8]
 800f10a:	6123      	str	r3, [r4, #16]
 800f10c:	7da0      	ldrb	r0, [r4, #22]
 800f10e:	f080 0001 	eor.w	r0, r0, #1
 800f112:	b003      	add	sp, #12
 800f114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f118:	9a01      	ldr	r2, [sp, #4]
 800f11a:	601a      	str	r2, [r3, #0]
 800f11c:	e7ee      	b.n	800f0fc <ucdr_serialize_endian_uint32_t+0xc0>
 800f11e:	68a2      	ldr	r2, [r4, #8]
 800f120:	6923      	ldr	r3, [r4, #16]
 800f122:	7da0      	ldrb	r0, [r4, #22]
 800f124:	1bd2      	subs	r2, r2, r7
 800f126:	1bdb      	subs	r3, r3, r7
 800f128:	f884 8015 	strb.w	r8, [r4, #21]
 800f12c:	f080 0001 	eor.w	r0, r0, #1
 800f130:	60a2      	str	r2, [r4, #8]
 800f132:	6123      	str	r3, [r4, #16]
 800f134:	b003      	add	sp, #12
 800f136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f13a:	68a3      	ldr	r3, [r4, #8]
 800f13c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f140:	701a      	strb	r2, [r3, #0]
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f148:	701a      	strb	r2, [r3, #0]
 800f14a:	68a3      	ldr	r3, [r4, #8]
 800f14c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f150:	701a      	strb	r2, [r3, #0]
 800f152:	e7ad      	b.n	800f0b0 <ucdr_serialize_endian_uint32_t+0x74>
 800f154:	ad01      	add	r5, sp, #4
 800f156:	463a      	mov	r2, r7
 800f158:	4630      	mov	r0, r6
 800f15a:	4629      	mov	r1, r5
 800f15c:	f00e f9f1 	bl	801d542 <memcpy>
 800f160:	464a      	mov	r2, r9
 800f162:	19e9      	adds	r1, r5, r7
 800f164:	68a0      	ldr	r0, [r4, #8]
 800f166:	f00e f9ec 	bl	801d542 <memcpy>
 800f16a:	e7a1      	b.n	800f0b0 <ucdr_serialize_endian_uint32_t+0x74>

0800f16c <ucdr_deserialize_uint32_t>:
 800f16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f170:	4604      	mov	r4, r0
 800f172:	460d      	mov	r5, r1
 800f174:	2104      	movs	r1, #4
 800f176:	f000 ff29 	bl	800ffcc <ucdr_buffer_alignment>
 800f17a:	4601      	mov	r1, r0
 800f17c:	4620      	mov	r0, r4
 800f17e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f182:	f000 ff6b 	bl	801005c <ucdr_advance_buffer>
 800f186:	2104      	movs	r1, #4
 800f188:	4620      	mov	r0, r4
 800f18a:	f000 febf 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d138      	bne.n	800f204 <ucdr_deserialize_uint32_t+0x98>
 800f192:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f196:	42b7      	cmp	r7, r6
 800f198:	d92f      	bls.n	800f1fa <ucdr_deserialize_uint32_t+0x8e>
 800f19a:	6923      	ldr	r3, [r4, #16]
 800f19c:	4620      	mov	r0, r4
 800f19e:	60a7      	str	r7, [r4, #8]
 800f1a0:	1bbf      	subs	r7, r7, r6
 800f1a2:	443b      	add	r3, r7
 800f1a4:	f1c7 0904 	rsb	r9, r7, #4
 800f1a8:	6123      	str	r3, [r4, #16]
 800f1aa:	4649      	mov	r1, r9
 800f1ac:	f000 feba 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d046      	beq.n	800f242 <ucdr_deserialize_uint32_t+0xd6>
 800f1b4:	7d23      	ldrb	r3, [r4, #20]
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d05c      	beq.n	800f274 <ucdr_deserialize_uint32_t+0x108>
 800f1ba:	78f3      	ldrb	r3, [r6, #3]
 800f1bc:	702b      	strb	r3, [r5, #0]
 800f1be:	2f00      	cmp	r7, #0
 800f1c0:	d04c      	beq.n	800f25c <ucdr_deserialize_uint32_t+0xf0>
 800f1c2:	78b3      	ldrb	r3, [r6, #2]
 800f1c4:	2f01      	cmp	r7, #1
 800f1c6:	706b      	strb	r3, [r5, #1]
 800f1c8:	f105 0302 	add.w	r3, r5, #2
 800f1cc:	d04a      	beq.n	800f264 <ucdr_deserialize_uint32_t+0xf8>
 800f1ce:	7873      	ldrb	r3, [r6, #1]
 800f1d0:	2f02      	cmp	r7, #2
 800f1d2:	70ab      	strb	r3, [r5, #2]
 800f1d4:	f105 0303 	add.w	r3, r5, #3
 800f1d8:	d048      	beq.n	800f26c <ucdr_deserialize_uint32_t+0x100>
 800f1da:	7833      	ldrb	r3, [r6, #0]
 800f1dc:	70eb      	strb	r3, [r5, #3]
 800f1de:	6923      	ldr	r3, [r4, #16]
 800f1e0:	2104      	movs	r1, #4
 800f1e2:	68a2      	ldr	r2, [r4, #8]
 800f1e4:	3304      	adds	r3, #4
 800f1e6:	7da0      	ldrb	r0, [r4, #22]
 800f1e8:	444a      	add	r2, r9
 800f1ea:	7561      	strb	r1, [r4, #21]
 800f1ec:	1bdb      	subs	r3, r3, r7
 800f1ee:	f080 0001 	eor.w	r0, r0, #1
 800f1f2:	60a2      	str	r2, [r4, #8]
 800f1f4:	6123      	str	r3, [r4, #16]
 800f1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1fa:	2104      	movs	r1, #4
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f000 fe91 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f202:	b1b0      	cbz	r0, 800f232 <ucdr_deserialize_uint32_t+0xc6>
 800f204:	7d23      	ldrb	r3, [r4, #20]
 800f206:	2b01      	cmp	r3, #1
 800f208:	68a3      	ldr	r3, [r4, #8]
 800f20a:	d017      	beq.n	800f23c <ucdr_deserialize_uint32_t+0xd0>
 800f20c:	78db      	ldrb	r3, [r3, #3]
 800f20e:	702b      	strb	r3, [r5, #0]
 800f210:	68a3      	ldr	r3, [r4, #8]
 800f212:	789b      	ldrb	r3, [r3, #2]
 800f214:	706b      	strb	r3, [r5, #1]
 800f216:	68a3      	ldr	r3, [r4, #8]
 800f218:	785b      	ldrb	r3, [r3, #1]
 800f21a:	70ab      	strb	r3, [r5, #2]
 800f21c:	68a3      	ldr	r3, [r4, #8]
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	70eb      	strb	r3, [r5, #3]
 800f222:	2104      	movs	r1, #4
 800f224:	68a2      	ldr	r2, [r4, #8]
 800f226:	6923      	ldr	r3, [r4, #16]
 800f228:	440a      	add	r2, r1
 800f22a:	7561      	strb	r1, [r4, #21]
 800f22c:	440b      	add	r3, r1
 800f22e:	60a2      	str	r2, [r4, #8]
 800f230:	6123      	str	r3, [r4, #16]
 800f232:	7da0      	ldrb	r0, [r4, #22]
 800f234:	f080 0001 	eor.w	r0, r0, #1
 800f238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	602b      	str	r3, [r5, #0]
 800f240:	e7ef      	b.n	800f222 <ucdr_deserialize_uint32_t+0xb6>
 800f242:	68a2      	ldr	r2, [r4, #8]
 800f244:	6923      	ldr	r3, [r4, #16]
 800f246:	1bd2      	subs	r2, r2, r7
 800f248:	7da0      	ldrb	r0, [r4, #22]
 800f24a:	1bdb      	subs	r3, r3, r7
 800f24c:	f884 8015 	strb.w	r8, [r4, #21]
 800f250:	f080 0001 	eor.w	r0, r0, #1
 800f254:	60a2      	str	r2, [r4, #8]
 800f256:	6123      	str	r3, [r4, #16]
 800f258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f25c:	68a3      	ldr	r3, [r4, #8]
 800f25e:	789b      	ldrb	r3, [r3, #2]
 800f260:	706b      	strb	r3, [r5, #1]
 800f262:	1cab      	adds	r3, r5, #2
 800f264:	68a2      	ldr	r2, [r4, #8]
 800f266:	7852      	ldrb	r2, [r2, #1]
 800f268:	f803 2b01 	strb.w	r2, [r3], #1
 800f26c:	68a2      	ldr	r2, [r4, #8]
 800f26e:	7812      	ldrb	r2, [r2, #0]
 800f270:	701a      	strb	r2, [r3, #0]
 800f272:	e7b4      	b.n	800f1de <ucdr_deserialize_uint32_t+0x72>
 800f274:	4631      	mov	r1, r6
 800f276:	463a      	mov	r2, r7
 800f278:	4628      	mov	r0, r5
 800f27a:	f00e f962 	bl	801d542 <memcpy>
 800f27e:	464a      	mov	r2, r9
 800f280:	19e8      	adds	r0, r5, r7
 800f282:	68a1      	ldr	r1, [r4, #8]
 800f284:	f00e f95d 	bl	801d542 <memcpy>
 800f288:	e7a9      	b.n	800f1de <ucdr_deserialize_uint32_t+0x72>
 800f28a:	bf00      	nop

0800f28c <ucdr_deserialize_endian_uint32_t>:
 800f28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f290:	4604      	mov	r4, r0
 800f292:	460e      	mov	r6, r1
 800f294:	2104      	movs	r1, #4
 800f296:	4615      	mov	r5, r2
 800f298:	f000 fe98 	bl	800ffcc <ucdr_buffer_alignment>
 800f29c:	4601      	mov	r1, r0
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f2a4:	f000 feda 	bl	801005c <ucdr_advance_buffer>
 800f2a8:	2104      	movs	r1, #4
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f000 fe2e 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	d13c      	bne.n	800f32e <ucdr_deserialize_endian_uint32_t+0xa2>
 800f2b4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f2b8:	42bb      	cmp	r3, r7
 800f2ba:	d933      	bls.n	800f324 <ucdr_deserialize_endian_uint32_t+0x98>
 800f2bc:	eba3 0907 	sub.w	r9, r3, r7
 800f2c0:	60a3      	str	r3, [r4, #8]
 800f2c2:	6923      	ldr	r3, [r4, #16]
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f1c9 0a04 	rsb	sl, r9, #4
 800f2ca:	444b      	add	r3, r9
 800f2cc:	4651      	mov	r1, sl
 800f2ce:	6123      	str	r3, [r4, #16]
 800f2d0:	f000 fe28 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d048      	beq.n	800f36a <ucdr_deserialize_endian_uint32_t+0xde>
 800f2d8:	2e01      	cmp	r6, #1
 800f2da:	d061      	beq.n	800f3a0 <ucdr_deserialize_endian_uint32_t+0x114>
 800f2dc:	78fb      	ldrb	r3, [r7, #3]
 800f2de:	702b      	strb	r3, [r5, #0]
 800f2e0:	f1b9 0f00 	cmp.w	r9, #0
 800f2e4:	d050      	beq.n	800f388 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f2e6:	78bb      	ldrb	r3, [r7, #2]
 800f2e8:	f1b9 0f01 	cmp.w	r9, #1
 800f2ec:	706b      	strb	r3, [r5, #1]
 800f2ee:	f105 0302 	add.w	r3, r5, #2
 800f2f2:	d04d      	beq.n	800f390 <ucdr_deserialize_endian_uint32_t+0x104>
 800f2f4:	787b      	ldrb	r3, [r7, #1]
 800f2f6:	f1b9 0f02 	cmp.w	r9, #2
 800f2fa:	70ab      	strb	r3, [r5, #2]
 800f2fc:	f105 0303 	add.w	r3, r5, #3
 800f300:	d04a      	beq.n	800f398 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f302:	783b      	ldrb	r3, [r7, #0]
 800f304:	70eb      	strb	r3, [r5, #3]
 800f306:	6923      	ldr	r3, [r4, #16]
 800f308:	2104      	movs	r1, #4
 800f30a:	68a2      	ldr	r2, [r4, #8]
 800f30c:	3304      	adds	r3, #4
 800f30e:	7da0      	ldrb	r0, [r4, #22]
 800f310:	4452      	add	r2, sl
 800f312:	7561      	strb	r1, [r4, #21]
 800f314:	eba3 0309 	sub.w	r3, r3, r9
 800f318:	f080 0001 	eor.w	r0, r0, #1
 800f31c:	60a2      	str	r2, [r4, #8]
 800f31e:	6123      	str	r3, [r4, #16]
 800f320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f324:	2104      	movs	r1, #4
 800f326:	4620      	mov	r0, r4
 800f328:	f000 fdfc 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f32c:	b1a8      	cbz	r0, 800f35a <ucdr_deserialize_endian_uint32_t+0xce>
 800f32e:	2e01      	cmp	r6, #1
 800f330:	68a3      	ldr	r3, [r4, #8]
 800f332:	d017      	beq.n	800f364 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f334:	78db      	ldrb	r3, [r3, #3]
 800f336:	702b      	strb	r3, [r5, #0]
 800f338:	68a3      	ldr	r3, [r4, #8]
 800f33a:	789b      	ldrb	r3, [r3, #2]
 800f33c:	706b      	strb	r3, [r5, #1]
 800f33e:	68a3      	ldr	r3, [r4, #8]
 800f340:	785b      	ldrb	r3, [r3, #1]
 800f342:	70ab      	strb	r3, [r5, #2]
 800f344:	68a3      	ldr	r3, [r4, #8]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	70eb      	strb	r3, [r5, #3]
 800f34a:	2104      	movs	r1, #4
 800f34c:	68a2      	ldr	r2, [r4, #8]
 800f34e:	6923      	ldr	r3, [r4, #16]
 800f350:	440a      	add	r2, r1
 800f352:	7561      	strb	r1, [r4, #21]
 800f354:	440b      	add	r3, r1
 800f356:	60a2      	str	r2, [r4, #8]
 800f358:	6123      	str	r3, [r4, #16]
 800f35a:	7da0      	ldrb	r0, [r4, #22]
 800f35c:	f080 0001 	eor.w	r0, r0, #1
 800f360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	602b      	str	r3, [r5, #0]
 800f368:	e7ef      	b.n	800f34a <ucdr_deserialize_endian_uint32_t+0xbe>
 800f36a:	68a2      	ldr	r2, [r4, #8]
 800f36c:	6923      	ldr	r3, [r4, #16]
 800f36e:	eba2 0209 	sub.w	r2, r2, r9
 800f372:	7da0      	ldrb	r0, [r4, #22]
 800f374:	eba3 0309 	sub.w	r3, r3, r9
 800f378:	f884 8015 	strb.w	r8, [r4, #21]
 800f37c:	f080 0001 	eor.w	r0, r0, #1
 800f380:	60a2      	str	r2, [r4, #8]
 800f382:	6123      	str	r3, [r4, #16]
 800f384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f388:	68a3      	ldr	r3, [r4, #8]
 800f38a:	789b      	ldrb	r3, [r3, #2]
 800f38c:	706b      	strb	r3, [r5, #1]
 800f38e:	1cab      	adds	r3, r5, #2
 800f390:	68a2      	ldr	r2, [r4, #8]
 800f392:	7852      	ldrb	r2, [r2, #1]
 800f394:	f803 2b01 	strb.w	r2, [r3], #1
 800f398:	68a2      	ldr	r2, [r4, #8]
 800f39a:	7812      	ldrb	r2, [r2, #0]
 800f39c:	701a      	strb	r2, [r3, #0]
 800f39e:	e7b2      	b.n	800f306 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f3a0:	4639      	mov	r1, r7
 800f3a2:	464a      	mov	r2, r9
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	f00e f8cc 	bl	801d542 <memcpy>
 800f3aa:	4652      	mov	r2, sl
 800f3ac:	eb05 0009 	add.w	r0, r5, r9
 800f3b0:	68a1      	ldr	r1, [r4, #8]
 800f3b2:	f00e f8c6 	bl	801d542 <memcpy>
 800f3b6:	e7a6      	b.n	800f306 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f3b8 <ucdr_serialize_uint64_t>:
 800f3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3bc:	4604      	mov	r4, r0
 800f3be:	b082      	sub	sp, #8
 800f3c0:	2108      	movs	r1, #8
 800f3c2:	e9cd 2300 	strd	r2, r3, [sp]
 800f3c6:	f000 fe01 	bl	800ffcc <ucdr_buffer_alignment>
 800f3ca:	4601      	mov	r1, r0
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	7d67      	ldrb	r7, [r4, #21]
 800f3d0:	f000 fe44 	bl	801005c <ucdr_advance_buffer>
 800f3d4:	2108      	movs	r1, #8
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f000 fd98 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d14e      	bne.n	800f47e <ucdr_serialize_uint64_t+0xc6>
 800f3e0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f3e4:	42ab      	cmp	r3, r5
 800f3e6:	d945      	bls.n	800f474 <ucdr_serialize_uint64_t+0xbc>
 800f3e8:	1b5e      	subs	r6, r3, r5
 800f3ea:	60a3      	str	r3, [r4, #8]
 800f3ec:	6923      	ldr	r3, [r4, #16]
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f1c6 0808 	rsb	r8, r6, #8
 800f3f4:	4433      	add	r3, r6
 800f3f6:	4641      	mov	r1, r8
 800f3f8:	6123      	str	r3, [r4, #16]
 800f3fa:	f000 fd93 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f3fe:	2800      	cmp	r0, #0
 800f400:	d074      	beq.n	800f4ec <ucdr_serialize_uint64_t+0x134>
 800f402:	7d23      	ldrb	r3, [r4, #20]
 800f404:	2b01      	cmp	r3, #1
 800f406:	f000 809b 	beq.w	800f540 <ucdr_serialize_uint64_t+0x188>
 800f40a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f40e:	702b      	strb	r3, [r5, #0]
 800f410:	2e00      	cmp	r6, #0
 800f412:	d078      	beq.n	800f506 <ucdr_serialize_uint64_t+0x14e>
 800f414:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f418:	2e01      	cmp	r6, #1
 800f41a:	706b      	strb	r3, [r5, #1]
 800f41c:	d077      	beq.n	800f50e <ucdr_serialize_uint64_t+0x156>
 800f41e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f422:	2e02      	cmp	r6, #2
 800f424:	70ab      	strb	r3, [r5, #2]
 800f426:	d076      	beq.n	800f516 <ucdr_serialize_uint64_t+0x15e>
 800f428:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f42c:	2e03      	cmp	r6, #3
 800f42e:	70eb      	strb	r3, [r5, #3]
 800f430:	d075      	beq.n	800f51e <ucdr_serialize_uint64_t+0x166>
 800f432:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f436:	2e04      	cmp	r6, #4
 800f438:	712b      	strb	r3, [r5, #4]
 800f43a:	d074      	beq.n	800f526 <ucdr_serialize_uint64_t+0x16e>
 800f43c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f440:	2e05      	cmp	r6, #5
 800f442:	716b      	strb	r3, [r5, #5]
 800f444:	d073      	beq.n	800f52e <ucdr_serialize_uint64_t+0x176>
 800f446:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f44a:	2e06      	cmp	r6, #6
 800f44c:	71ab      	strb	r3, [r5, #6]
 800f44e:	d072      	beq.n	800f536 <ucdr_serialize_uint64_t+0x17e>
 800f450:	f89d 3000 	ldrb.w	r3, [sp]
 800f454:	71eb      	strb	r3, [r5, #7]
 800f456:	6923      	ldr	r3, [r4, #16]
 800f458:	2108      	movs	r1, #8
 800f45a:	68a2      	ldr	r2, [r4, #8]
 800f45c:	3308      	adds	r3, #8
 800f45e:	7da0      	ldrb	r0, [r4, #22]
 800f460:	4442      	add	r2, r8
 800f462:	7561      	strb	r1, [r4, #21]
 800f464:	1b9e      	subs	r6, r3, r6
 800f466:	f080 0001 	eor.w	r0, r0, #1
 800f46a:	60a2      	str	r2, [r4, #8]
 800f46c:	6126      	str	r6, [r4, #16]
 800f46e:	b002      	add	sp, #8
 800f470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f474:	2108      	movs	r1, #8
 800f476:	4620      	mov	r0, r4
 800f478:	f000 fd54 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f47c:	b350      	cbz	r0, 800f4d4 <ucdr_serialize_uint64_t+0x11c>
 800f47e:	7d23      	ldrb	r3, [r4, #20]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d02d      	beq.n	800f4e0 <ucdr_serialize_uint64_t+0x128>
 800f484:	68a3      	ldr	r3, [r4, #8]
 800f486:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f48a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f48e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f492:	7018      	strb	r0, [r3, #0]
 800f494:	68a3      	ldr	r3, [r4, #8]
 800f496:	705a      	strb	r2, [r3, #1]
 800f498:	68a3      	ldr	r3, [r4, #8]
 800f49a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f49e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f4a2:	7099      	strb	r1, [r3, #2]
 800f4a4:	68a3      	ldr	r3, [r4, #8]
 800f4a6:	70da      	strb	r2, [r3, #3]
 800f4a8:	68a3      	ldr	r3, [r4, #8]
 800f4aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f4ae:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f4b2:	7118      	strb	r0, [r3, #4]
 800f4b4:	68a3      	ldr	r3, [r4, #8]
 800f4b6:	715a      	strb	r2, [r3, #5]
 800f4b8:	68a3      	ldr	r3, [r4, #8]
 800f4ba:	f89d 2000 	ldrb.w	r2, [sp]
 800f4be:	7199      	strb	r1, [r3, #6]
 800f4c0:	68a3      	ldr	r3, [r4, #8]
 800f4c2:	71da      	strb	r2, [r3, #7]
 800f4c4:	2108      	movs	r1, #8
 800f4c6:	68a2      	ldr	r2, [r4, #8]
 800f4c8:	6923      	ldr	r3, [r4, #16]
 800f4ca:	440a      	add	r2, r1
 800f4cc:	7561      	strb	r1, [r4, #21]
 800f4ce:	440b      	add	r3, r1
 800f4d0:	60a2      	str	r2, [r4, #8]
 800f4d2:	6123      	str	r3, [r4, #16]
 800f4d4:	7da0      	ldrb	r0, [r4, #22]
 800f4d6:	f080 0001 	eor.w	r0, r0, #1
 800f4da:	b002      	add	sp, #8
 800f4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e0:	466b      	mov	r3, sp
 800f4e2:	68a2      	ldr	r2, [r4, #8]
 800f4e4:	cb03      	ldmia	r3!, {r0, r1}
 800f4e6:	6010      	str	r0, [r2, #0]
 800f4e8:	6051      	str	r1, [r2, #4]
 800f4ea:	e7eb      	b.n	800f4c4 <ucdr_serialize_uint64_t+0x10c>
 800f4ec:	68a2      	ldr	r2, [r4, #8]
 800f4ee:	6923      	ldr	r3, [r4, #16]
 800f4f0:	7da0      	ldrb	r0, [r4, #22]
 800f4f2:	1b92      	subs	r2, r2, r6
 800f4f4:	1b9b      	subs	r3, r3, r6
 800f4f6:	7567      	strb	r7, [r4, #21]
 800f4f8:	f080 0001 	eor.w	r0, r0, #1
 800f4fc:	60a2      	str	r2, [r4, #8]
 800f4fe:	6123      	str	r3, [r4, #16]
 800f500:	b002      	add	sp, #8
 800f502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f506:	68a3      	ldr	r3, [r4, #8]
 800f508:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f50c:	701a      	strb	r2, [r3, #0]
 800f50e:	68a3      	ldr	r3, [r4, #8]
 800f510:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f514:	701a      	strb	r2, [r3, #0]
 800f516:	68a3      	ldr	r3, [r4, #8]
 800f518:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f51c:	701a      	strb	r2, [r3, #0]
 800f51e:	68a3      	ldr	r3, [r4, #8]
 800f520:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f524:	701a      	strb	r2, [r3, #0]
 800f526:	68a3      	ldr	r3, [r4, #8]
 800f528:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f52c:	701a      	strb	r2, [r3, #0]
 800f52e:	68a3      	ldr	r3, [r4, #8]
 800f530:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f534:	701a      	strb	r2, [r3, #0]
 800f536:	68a3      	ldr	r3, [r4, #8]
 800f538:	f89d 2000 	ldrb.w	r2, [sp]
 800f53c:	701a      	strb	r2, [r3, #0]
 800f53e:	e78a      	b.n	800f456 <ucdr_serialize_uint64_t+0x9e>
 800f540:	4628      	mov	r0, r5
 800f542:	466d      	mov	r5, sp
 800f544:	4632      	mov	r2, r6
 800f546:	4629      	mov	r1, r5
 800f548:	f00d fffb 	bl	801d542 <memcpy>
 800f54c:	4642      	mov	r2, r8
 800f54e:	19a9      	adds	r1, r5, r6
 800f550:	68a0      	ldr	r0, [r4, #8]
 800f552:	f00d fff6 	bl	801d542 <memcpy>
 800f556:	e77e      	b.n	800f456 <ucdr_serialize_uint64_t+0x9e>

0800f558 <ucdr_serialize_int16_t>:
 800f558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f55c:	460b      	mov	r3, r1
 800f55e:	b082      	sub	sp, #8
 800f560:	4604      	mov	r4, r0
 800f562:	2102      	movs	r1, #2
 800f564:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f568:	f000 fd30 	bl	800ffcc <ucdr_buffer_alignment>
 800f56c:	4601      	mov	r1, r0
 800f56e:	4620      	mov	r0, r4
 800f570:	7d67      	ldrb	r7, [r4, #21]
 800f572:	f000 fd73 	bl	801005c <ucdr_advance_buffer>
 800f576:	2102      	movs	r1, #2
 800f578:	4620      	mov	r0, r4
 800f57a:	f000 fcc7 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f57e:	bb78      	cbnz	r0, 800f5e0 <ucdr_serialize_int16_t+0x88>
 800f580:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f584:	42ab      	cmp	r3, r5
 800f586:	d926      	bls.n	800f5d6 <ucdr_serialize_int16_t+0x7e>
 800f588:	1b5e      	subs	r6, r3, r5
 800f58a:	60a3      	str	r3, [r4, #8]
 800f58c:	6923      	ldr	r3, [r4, #16]
 800f58e:	4620      	mov	r0, r4
 800f590:	f1c6 0802 	rsb	r8, r6, #2
 800f594:	4433      	add	r3, r6
 800f596:	4641      	mov	r1, r8
 800f598:	6123      	str	r3, [r4, #16]
 800f59a:	f000 fcc3 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d03b      	beq.n	800f61a <ucdr_serialize_int16_t+0xc2>
 800f5a2:	7d23      	ldrb	r3, [r4, #20]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d04a      	beq.n	800f63e <ucdr_serialize_int16_t+0xe6>
 800f5a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5ac:	702b      	strb	r3, [r5, #0]
 800f5ae:	2e00      	cmp	r6, #0
 800f5b0:	d040      	beq.n	800f634 <ucdr_serialize_int16_t+0xdc>
 800f5b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5b6:	706b      	strb	r3, [r5, #1]
 800f5b8:	6923      	ldr	r3, [r4, #16]
 800f5ba:	2102      	movs	r1, #2
 800f5bc:	68a2      	ldr	r2, [r4, #8]
 800f5be:	3302      	adds	r3, #2
 800f5c0:	7da0      	ldrb	r0, [r4, #22]
 800f5c2:	4442      	add	r2, r8
 800f5c4:	7561      	strb	r1, [r4, #21]
 800f5c6:	1b9e      	subs	r6, r3, r6
 800f5c8:	f080 0001 	eor.w	r0, r0, #1
 800f5cc:	60a2      	str	r2, [r4, #8]
 800f5ce:	6126      	str	r6, [r4, #16]
 800f5d0:	b002      	add	sp, #8
 800f5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d6:	2102      	movs	r1, #2
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f000 fca3 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f5de:	b190      	cbz	r0, 800f606 <ucdr_serialize_int16_t+0xae>
 800f5e0:	7d23      	ldrb	r3, [r4, #20]
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	68a3      	ldr	r3, [r4, #8]
 800f5e6:	d014      	beq.n	800f612 <ucdr_serialize_int16_t+0xba>
 800f5e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f5ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5f0:	7019      	strb	r1, [r3, #0]
 800f5f2:	68a3      	ldr	r3, [r4, #8]
 800f5f4:	705a      	strb	r2, [r3, #1]
 800f5f6:	2102      	movs	r1, #2
 800f5f8:	68a2      	ldr	r2, [r4, #8]
 800f5fa:	6923      	ldr	r3, [r4, #16]
 800f5fc:	440a      	add	r2, r1
 800f5fe:	7561      	strb	r1, [r4, #21]
 800f600:	440b      	add	r3, r1
 800f602:	60a2      	str	r2, [r4, #8]
 800f604:	6123      	str	r3, [r4, #16]
 800f606:	7da0      	ldrb	r0, [r4, #22]
 800f608:	f080 0001 	eor.w	r0, r0, #1
 800f60c:	b002      	add	sp, #8
 800f60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f612:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f616:	801a      	strh	r2, [r3, #0]
 800f618:	e7ed      	b.n	800f5f6 <ucdr_serialize_int16_t+0x9e>
 800f61a:	68a2      	ldr	r2, [r4, #8]
 800f61c:	6923      	ldr	r3, [r4, #16]
 800f61e:	7da0      	ldrb	r0, [r4, #22]
 800f620:	1b92      	subs	r2, r2, r6
 800f622:	1b9b      	subs	r3, r3, r6
 800f624:	7567      	strb	r7, [r4, #21]
 800f626:	f080 0001 	eor.w	r0, r0, #1
 800f62a:	60a2      	str	r2, [r4, #8]
 800f62c:	6123      	str	r3, [r4, #16]
 800f62e:	b002      	add	sp, #8
 800f630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f634:	68a3      	ldr	r3, [r4, #8]
 800f636:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f63a:	701a      	strb	r2, [r3, #0]
 800f63c:	e7bc      	b.n	800f5b8 <ucdr_serialize_int16_t+0x60>
 800f63e:	4628      	mov	r0, r5
 800f640:	f10d 0506 	add.w	r5, sp, #6
 800f644:	4632      	mov	r2, r6
 800f646:	4629      	mov	r1, r5
 800f648:	f00d ff7b 	bl	801d542 <memcpy>
 800f64c:	4642      	mov	r2, r8
 800f64e:	19a9      	adds	r1, r5, r6
 800f650:	68a0      	ldr	r0, [r4, #8]
 800f652:	f00d ff76 	bl	801d542 <memcpy>
 800f656:	e7af      	b.n	800f5b8 <ucdr_serialize_int16_t+0x60>

0800f658 <ucdr_deserialize_int16_t>:
 800f658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f65c:	4604      	mov	r4, r0
 800f65e:	460d      	mov	r5, r1
 800f660:	2102      	movs	r1, #2
 800f662:	f000 fcb3 	bl	800ffcc <ucdr_buffer_alignment>
 800f666:	4601      	mov	r1, r0
 800f668:	4620      	mov	r0, r4
 800f66a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f66e:	f000 fcf5 	bl	801005c <ucdr_advance_buffer>
 800f672:	2102      	movs	r1, #2
 800f674:	4620      	mov	r0, r4
 800f676:	f000 fc49 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f67a:	bb60      	cbnz	r0, 800f6d6 <ucdr_deserialize_int16_t+0x7e>
 800f67c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f680:	42be      	cmp	r6, r7
 800f682:	d923      	bls.n	800f6cc <ucdr_deserialize_int16_t+0x74>
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	4620      	mov	r0, r4
 800f688:	60a6      	str	r6, [r4, #8]
 800f68a:	1bf6      	subs	r6, r6, r7
 800f68c:	4433      	add	r3, r6
 800f68e:	f1c6 0902 	rsb	r9, r6, #2
 800f692:	6123      	str	r3, [r4, #16]
 800f694:	4649      	mov	r1, r9
 800f696:	f000 fc45 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f69a:	2800      	cmp	r0, #0
 800f69c:	d034      	beq.n	800f708 <ucdr_deserialize_int16_t+0xb0>
 800f69e:	7d23      	ldrb	r3, [r4, #20]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d042      	beq.n	800f72a <ucdr_deserialize_int16_t+0xd2>
 800f6a4:	787b      	ldrb	r3, [r7, #1]
 800f6a6:	702b      	strb	r3, [r5, #0]
 800f6a8:	2e00      	cmp	r6, #0
 800f6aa:	d03a      	beq.n	800f722 <ucdr_deserialize_int16_t+0xca>
 800f6ac:	783b      	ldrb	r3, [r7, #0]
 800f6ae:	706b      	strb	r3, [r5, #1]
 800f6b0:	6923      	ldr	r3, [r4, #16]
 800f6b2:	2102      	movs	r1, #2
 800f6b4:	68a2      	ldr	r2, [r4, #8]
 800f6b6:	3302      	adds	r3, #2
 800f6b8:	7da0      	ldrb	r0, [r4, #22]
 800f6ba:	444a      	add	r2, r9
 800f6bc:	7561      	strb	r1, [r4, #21]
 800f6be:	1b9b      	subs	r3, r3, r6
 800f6c0:	f080 0001 	eor.w	r0, r0, #1
 800f6c4:	60a2      	str	r2, [r4, #8]
 800f6c6:	6123      	str	r3, [r4, #16]
 800f6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6cc:	2102      	movs	r1, #2
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f000 fc28 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f6d4:	b180      	cbz	r0, 800f6f8 <ucdr_deserialize_int16_t+0xa0>
 800f6d6:	7d23      	ldrb	r3, [r4, #20]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	68a3      	ldr	r3, [r4, #8]
 800f6dc:	d011      	beq.n	800f702 <ucdr_deserialize_int16_t+0xaa>
 800f6de:	785b      	ldrb	r3, [r3, #1]
 800f6e0:	702b      	strb	r3, [r5, #0]
 800f6e2:	68a3      	ldr	r3, [r4, #8]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	706b      	strb	r3, [r5, #1]
 800f6e8:	2102      	movs	r1, #2
 800f6ea:	68a2      	ldr	r2, [r4, #8]
 800f6ec:	6923      	ldr	r3, [r4, #16]
 800f6ee:	440a      	add	r2, r1
 800f6f0:	7561      	strb	r1, [r4, #21]
 800f6f2:	440b      	add	r3, r1
 800f6f4:	60a2      	str	r2, [r4, #8]
 800f6f6:	6123      	str	r3, [r4, #16]
 800f6f8:	7da0      	ldrb	r0, [r4, #22]
 800f6fa:	f080 0001 	eor.w	r0, r0, #1
 800f6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f702:	881b      	ldrh	r3, [r3, #0]
 800f704:	802b      	strh	r3, [r5, #0]
 800f706:	e7ef      	b.n	800f6e8 <ucdr_deserialize_int16_t+0x90>
 800f708:	68a2      	ldr	r2, [r4, #8]
 800f70a:	6923      	ldr	r3, [r4, #16]
 800f70c:	1b92      	subs	r2, r2, r6
 800f70e:	7da0      	ldrb	r0, [r4, #22]
 800f710:	1b9b      	subs	r3, r3, r6
 800f712:	f884 8015 	strb.w	r8, [r4, #21]
 800f716:	f080 0001 	eor.w	r0, r0, #1
 800f71a:	60a2      	str	r2, [r4, #8]
 800f71c:	6123      	str	r3, [r4, #16]
 800f71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f722:	68a3      	ldr	r3, [r4, #8]
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	706b      	strb	r3, [r5, #1]
 800f728:	e7c2      	b.n	800f6b0 <ucdr_deserialize_int16_t+0x58>
 800f72a:	4639      	mov	r1, r7
 800f72c:	4632      	mov	r2, r6
 800f72e:	4628      	mov	r0, r5
 800f730:	f00d ff07 	bl	801d542 <memcpy>
 800f734:	464a      	mov	r2, r9
 800f736:	19a8      	adds	r0, r5, r6
 800f738:	68a1      	ldr	r1, [r4, #8]
 800f73a:	f00d ff02 	bl	801d542 <memcpy>
 800f73e:	e7b7      	b.n	800f6b0 <ucdr_deserialize_int16_t+0x58>

0800f740 <ucdr_serialize_int32_t>:
 800f740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f744:	b082      	sub	sp, #8
 800f746:	4604      	mov	r4, r0
 800f748:	9101      	str	r1, [sp, #4]
 800f74a:	2104      	movs	r1, #4
 800f74c:	f000 fc3e 	bl	800ffcc <ucdr_buffer_alignment>
 800f750:	4601      	mov	r1, r0
 800f752:	4620      	mov	r0, r4
 800f754:	7d67      	ldrb	r7, [r4, #21]
 800f756:	f000 fc81 	bl	801005c <ucdr_advance_buffer>
 800f75a:	2104      	movs	r1, #4
 800f75c:	4620      	mov	r0, r4
 800f75e:	f000 fbd5 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f762:	2800      	cmp	r0, #0
 800f764:	d139      	bne.n	800f7da <ucdr_serialize_int32_t+0x9a>
 800f766:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f76a:	42ab      	cmp	r3, r5
 800f76c:	d930      	bls.n	800f7d0 <ucdr_serialize_int32_t+0x90>
 800f76e:	1b5e      	subs	r6, r3, r5
 800f770:	60a3      	str	r3, [r4, #8]
 800f772:	6923      	ldr	r3, [r4, #16]
 800f774:	4620      	mov	r0, r4
 800f776:	f1c6 0804 	rsb	r8, r6, #4
 800f77a:	4433      	add	r3, r6
 800f77c:	4641      	mov	r1, r8
 800f77e:	6123      	str	r3, [r4, #16]
 800f780:	f000 fbd0 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f784:	2800      	cmp	r0, #0
 800f786:	d04c      	beq.n	800f822 <ucdr_serialize_int32_t+0xe2>
 800f788:	7d23      	ldrb	r3, [r4, #20]
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d063      	beq.n	800f856 <ucdr_serialize_int32_t+0x116>
 800f78e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f792:	702b      	strb	r3, [r5, #0]
 800f794:	2e00      	cmp	r6, #0
 800f796:	d051      	beq.n	800f83c <ucdr_serialize_int32_t+0xfc>
 800f798:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f79c:	2e01      	cmp	r6, #1
 800f79e:	706b      	strb	r3, [r5, #1]
 800f7a0:	d050      	beq.n	800f844 <ucdr_serialize_int32_t+0x104>
 800f7a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f7a6:	2e02      	cmp	r6, #2
 800f7a8:	70ab      	strb	r3, [r5, #2]
 800f7aa:	d04f      	beq.n	800f84c <ucdr_serialize_int32_t+0x10c>
 800f7ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f7b0:	70eb      	strb	r3, [r5, #3]
 800f7b2:	6923      	ldr	r3, [r4, #16]
 800f7b4:	2104      	movs	r1, #4
 800f7b6:	68a2      	ldr	r2, [r4, #8]
 800f7b8:	3304      	adds	r3, #4
 800f7ba:	7da0      	ldrb	r0, [r4, #22]
 800f7bc:	4442      	add	r2, r8
 800f7be:	7561      	strb	r1, [r4, #21]
 800f7c0:	1b9e      	subs	r6, r3, r6
 800f7c2:	f080 0001 	eor.w	r0, r0, #1
 800f7c6:	60a2      	str	r2, [r4, #8]
 800f7c8:	6126      	str	r6, [r4, #16]
 800f7ca:	b002      	add	sp, #8
 800f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d0:	2104      	movs	r1, #4
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f000 fba6 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f7d8:	b1d0      	cbz	r0, 800f810 <ucdr_serialize_int32_t+0xd0>
 800f7da:	7d23      	ldrb	r3, [r4, #20]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	68a3      	ldr	r3, [r4, #8]
 800f7e0:	d01c      	beq.n	800f81c <ucdr_serialize_int32_t+0xdc>
 800f7e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f7e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f7ee:	7018      	strb	r0, [r3, #0]
 800f7f0:	68a3      	ldr	r3, [r4, #8]
 800f7f2:	705a      	strb	r2, [r3, #1]
 800f7f4:	68a3      	ldr	r3, [r4, #8]
 800f7f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f7fa:	7099      	strb	r1, [r3, #2]
 800f7fc:	68a3      	ldr	r3, [r4, #8]
 800f7fe:	70da      	strb	r2, [r3, #3]
 800f800:	2104      	movs	r1, #4
 800f802:	68a2      	ldr	r2, [r4, #8]
 800f804:	6923      	ldr	r3, [r4, #16]
 800f806:	440a      	add	r2, r1
 800f808:	7561      	strb	r1, [r4, #21]
 800f80a:	440b      	add	r3, r1
 800f80c:	60a2      	str	r2, [r4, #8]
 800f80e:	6123      	str	r3, [r4, #16]
 800f810:	7da0      	ldrb	r0, [r4, #22]
 800f812:	f080 0001 	eor.w	r0, r0, #1
 800f816:	b002      	add	sp, #8
 800f818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81c:	9a01      	ldr	r2, [sp, #4]
 800f81e:	601a      	str	r2, [r3, #0]
 800f820:	e7ee      	b.n	800f800 <ucdr_serialize_int32_t+0xc0>
 800f822:	68a2      	ldr	r2, [r4, #8]
 800f824:	6923      	ldr	r3, [r4, #16]
 800f826:	7da0      	ldrb	r0, [r4, #22]
 800f828:	1b92      	subs	r2, r2, r6
 800f82a:	1b9b      	subs	r3, r3, r6
 800f82c:	7567      	strb	r7, [r4, #21]
 800f82e:	f080 0001 	eor.w	r0, r0, #1
 800f832:	60a2      	str	r2, [r4, #8]
 800f834:	6123      	str	r3, [r4, #16]
 800f836:	b002      	add	sp, #8
 800f838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f83c:	68a3      	ldr	r3, [r4, #8]
 800f83e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f842:	701a      	strb	r2, [r3, #0]
 800f844:	68a3      	ldr	r3, [r4, #8]
 800f846:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f84a:	701a      	strb	r2, [r3, #0]
 800f84c:	68a3      	ldr	r3, [r4, #8]
 800f84e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f852:	701a      	strb	r2, [r3, #0]
 800f854:	e7ad      	b.n	800f7b2 <ucdr_serialize_int32_t+0x72>
 800f856:	4628      	mov	r0, r5
 800f858:	ad01      	add	r5, sp, #4
 800f85a:	4632      	mov	r2, r6
 800f85c:	4629      	mov	r1, r5
 800f85e:	f00d fe70 	bl	801d542 <memcpy>
 800f862:	4642      	mov	r2, r8
 800f864:	19a9      	adds	r1, r5, r6
 800f866:	68a0      	ldr	r0, [r4, #8]
 800f868:	f00d fe6b 	bl	801d542 <memcpy>
 800f86c:	e7a1      	b.n	800f7b2 <ucdr_serialize_int32_t+0x72>
 800f86e:	bf00      	nop

0800f870 <ucdr_deserialize_int32_t>:
 800f870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f874:	4604      	mov	r4, r0
 800f876:	460d      	mov	r5, r1
 800f878:	2104      	movs	r1, #4
 800f87a:	f000 fba7 	bl	800ffcc <ucdr_buffer_alignment>
 800f87e:	4601      	mov	r1, r0
 800f880:	4620      	mov	r0, r4
 800f882:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f886:	f000 fbe9 	bl	801005c <ucdr_advance_buffer>
 800f88a:	2104      	movs	r1, #4
 800f88c:	4620      	mov	r0, r4
 800f88e:	f000 fb3d 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f892:	2800      	cmp	r0, #0
 800f894:	d138      	bne.n	800f908 <ucdr_deserialize_int32_t+0x98>
 800f896:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f89a:	42b7      	cmp	r7, r6
 800f89c:	d92f      	bls.n	800f8fe <ucdr_deserialize_int32_t+0x8e>
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	60a7      	str	r7, [r4, #8]
 800f8a4:	1bbf      	subs	r7, r7, r6
 800f8a6:	443b      	add	r3, r7
 800f8a8:	f1c7 0904 	rsb	r9, r7, #4
 800f8ac:	6123      	str	r3, [r4, #16]
 800f8ae:	4649      	mov	r1, r9
 800f8b0:	f000 fb38 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d046      	beq.n	800f946 <ucdr_deserialize_int32_t+0xd6>
 800f8b8:	7d23      	ldrb	r3, [r4, #20]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d05c      	beq.n	800f978 <ucdr_deserialize_int32_t+0x108>
 800f8be:	78f3      	ldrb	r3, [r6, #3]
 800f8c0:	702b      	strb	r3, [r5, #0]
 800f8c2:	2f00      	cmp	r7, #0
 800f8c4:	d04c      	beq.n	800f960 <ucdr_deserialize_int32_t+0xf0>
 800f8c6:	78b3      	ldrb	r3, [r6, #2]
 800f8c8:	2f01      	cmp	r7, #1
 800f8ca:	706b      	strb	r3, [r5, #1]
 800f8cc:	f105 0302 	add.w	r3, r5, #2
 800f8d0:	d04a      	beq.n	800f968 <ucdr_deserialize_int32_t+0xf8>
 800f8d2:	7873      	ldrb	r3, [r6, #1]
 800f8d4:	2f02      	cmp	r7, #2
 800f8d6:	70ab      	strb	r3, [r5, #2]
 800f8d8:	f105 0303 	add.w	r3, r5, #3
 800f8dc:	d048      	beq.n	800f970 <ucdr_deserialize_int32_t+0x100>
 800f8de:	7833      	ldrb	r3, [r6, #0]
 800f8e0:	70eb      	strb	r3, [r5, #3]
 800f8e2:	6923      	ldr	r3, [r4, #16]
 800f8e4:	2104      	movs	r1, #4
 800f8e6:	68a2      	ldr	r2, [r4, #8]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	7da0      	ldrb	r0, [r4, #22]
 800f8ec:	444a      	add	r2, r9
 800f8ee:	7561      	strb	r1, [r4, #21]
 800f8f0:	1bdb      	subs	r3, r3, r7
 800f8f2:	f080 0001 	eor.w	r0, r0, #1
 800f8f6:	60a2      	str	r2, [r4, #8]
 800f8f8:	6123      	str	r3, [r4, #16]
 800f8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8fe:	2104      	movs	r1, #4
 800f900:	4620      	mov	r0, r4
 800f902:	f000 fb0f 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f906:	b1b0      	cbz	r0, 800f936 <ucdr_deserialize_int32_t+0xc6>
 800f908:	7d23      	ldrb	r3, [r4, #20]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	68a3      	ldr	r3, [r4, #8]
 800f90e:	d017      	beq.n	800f940 <ucdr_deserialize_int32_t+0xd0>
 800f910:	78db      	ldrb	r3, [r3, #3]
 800f912:	702b      	strb	r3, [r5, #0]
 800f914:	68a3      	ldr	r3, [r4, #8]
 800f916:	789b      	ldrb	r3, [r3, #2]
 800f918:	706b      	strb	r3, [r5, #1]
 800f91a:	68a3      	ldr	r3, [r4, #8]
 800f91c:	785b      	ldrb	r3, [r3, #1]
 800f91e:	70ab      	strb	r3, [r5, #2]
 800f920:	68a3      	ldr	r3, [r4, #8]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	70eb      	strb	r3, [r5, #3]
 800f926:	2104      	movs	r1, #4
 800f928:	68a2      	ldr	r2, [r4, #8]
 800f92a:	6923      	ldr	r3, [r4, #16]
 800f92c:	440a      	add	r2, r1
 800f92e:	7561      	strb	r1, [r4, #21]
 800f930:	440b      	add	r3, r1
 800f932:	60a2      	str	r2, [r4, #8]
 800f934:	6123      	str	r3, [r4, #16]
 800f936:	7da0      	ldrb	r0, [r4, #22]
 800f938:	f080 0001 	eor.w	r0, r0, #1
 800f93c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	602b      	str	r3, [r5, #0]
 800f944:	e7ef      	b.n	800f926 <ucdr_deserialize_int32_t+0xb6>
 800f946:	68a2      	ldr	r2, [r4, #8]
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	1bd2      	subs	r2, r2, r7
 800f94c:	7da0      	ldrb	r0, [r4, #22]
 800f94e:	1bdb      	subs	r3, r3, r7
 800f950:	f884 8015 	strb.w	r8, [r4, #21]
 800f954:	f080 0001 	eor.w	r0, r0, #1
 800f958:	60a2      	str	r2, [r4, #8]
 800f95a:	6123      	str	r3, [r4, #16]
 800f95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f960:	68a3      	ldr	r3, [r4, #8]
 800f962:	789b      	ldrb	r3, [r3, #2]
 800f964:	706b      	strb	r3, [r5, #1]
 800f966:	1cab      	adds	r3, r5, #2
 800f968:	68a2      	ldr	r2, [r4, #8]
 800f96a:	7852      	ldrb	r2, [r2, #1]
 800f96c:	f803 2b01 	strb.w	r2, [r3], #1
 800f970:	68a2      	ldr	r2, [r4, #8]
 800f972:	7812      	ldrb	r2, [r2, #0]
 800f974:	701a      	strb	r2, [r3, #0]
 800f976:	e7b4      	b.n	800f8e2 <ucdr_deserialize_int32_t+0x72>
 800f978:	4631      	mov	r1, r6
 800f97a:	463a      	mov	r2, r7
 800f97c:	4628      	mov	r0, r5
 800f97e:	f00d fde0 	bl	801d542 <memcpy>
 800f982:	464a      	mov	r2, r9
 800f984:	19e8      	adds	r0, r5, r7
 800f986:	68a1      	ldr	r1, [r4, #8]
 800f988:	f00d fddb 	bl	801d542 <memcpy>
 800f98c:	e7a9      	b.n	800f8e2 <ucdr_deserialize_int32_t+0x72>
 800f98e:	bf00      	nop

0800f990 <ucdr_serialize_float>:
 800f990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f994:	4604      	mov	r4, r0
 800f996:	b082      	sub	sp, #8
 800f998:	2104      	movs	r1, #4
 800f99a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f99e:	f000 fb15 	bl	800ffcc <ucdr_buffer_alignment>
 800f9a2:	4601      	mov	r1, r0
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	7d67      	ldrb	r7, [r4, #21]
 800f9a8:	f000 fb58 	bl	801005c <ucdr_advance_buffer>
 800f9ac:	2104      	movs	r1, #4
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f000 faac 	bl	800ff0c <ucdr_check_buffer_available_for>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d139      	bne.n	800fa2c <ucdr_serialize_float+0x9c>
 800f9b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f9bc:	42ab      	cmp	r3, r5
 800f9be:	d930      	bls.n	800fa22 <ucdr_serialize_float+0x92>
 800f9c0:	1b5e      	subs	r6, r3, r5
 800f9c2:	60a3      	str	r3, [r4, #8]
 800f9c4:	6923      	ldr	r3, [r4, #16]
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f1c6 0804 	rsb	r8, r6, #4
 800f9cc:	4433      	add	r3, r6
 800f9ce:	4641      	mov	r1, r8
 800f9d0:	6123      	str	r3, [r4, #16]
 800f9d2:	f000 faa7 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d04c      	beq.n	800fa74 <ucdr_serialize_float+0xe4>
 800f9da:	7d23      	ldrb	r3, [r4, #20]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d063      	beq.n	800faa8 <ucdr_serialize_float+0x118>
 800f9e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f9e4:	702b      	strb	r3, [r5, #0]
 800f9e6:	2e00      	cmp	r6, #0
 800f9e8:	d051      	beq.n	800fa8e <ucdr_serialize_float+0xfe>
 800f9ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f9ee:	2e01      	cmp	r6, #1
 800f9f0:	706b      	strb	r3, [r5, #1]
 800f9f2:	d050      	beq.n	800fa96 <ucdr_serialize_float+0x106>
 800f9f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f9f8:	2e02      	cmp	r6, #2
 800f9fa:	70ab      	strb	r3, [r5, #2]
 800f9fc:	d04f      	beq.n	800fa9e <ucdr_serialize_float+0x10e>
 800f9fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa02:	70eb      	strb	r3, [r5, #3]
 800fa04:	6923      	ldr	r3, [r4, #16]
 800fa06:	2104      	movs	r1, #4
 800fa08:	68a2      	ldr	r2, [r4, #8]
 800fa0a:	3304      	adds	r3, #4
 800fa0c:	7da0      	ldrb	r0, [r4, #22]
 800fa0e:	4442      	add	r2, r8
 800fa10:	7561      	strb	r1, [r4, #21]
 800fa12:	1b9e      	subs	r6, r3, r6
 800fa14:	f080 0001 	eor.w	r0, r0, #1
 800fa18:	60a2      	str	r2, [r4, #8]
 800fa1a:	6126      	str	r6, [r4, #16]
 800fa1c:	b002      	add	sp, #8
 800fa1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa22:	2104      	movs	r1, #4
 800fa24:	4620      	mov	r0, r4
 800fa26:	f000 fa7d 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800fa2a:	b1d0      	cbz	r0, 800fa62 <ucdr_serialize_float+0xd2>
 800fa2c:	7d23      	ldrb	r3, [r4, #20]
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	68a3      	ldr	r3, [r4, #8]
 800fa32:	d01c      	beq.n	800fa6e <ucdr_serialize_float+0xde>
 800fa34:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fa38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa3c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fa40:	7018      	strb	r0, [r3, #0]
 800fa42:	68a3      	ldr	r3, [r4, #8]
 800fa44:	705a      	strb	r2, [r3, #1]
 800fa46:	68a3      	ldr	r3, [r4, #8]
 800fa48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa4c:	7099      	strb	r1, [r3, #2]
 800fa4e:	68a3      	ldr	r3, [r4, #8]
 800fa50:	70da      	strb	r2, [r3, #3]
 800fa52:	2104      	movs	r1, #4
 800fa54:	68a2      	ldr	r2, [r4, #8]
 800fa56:	6923      	ldr	r3, [r4, #16]
 800fa58:	440a      	add	r2, r1
 800fa5a:	7561      	strb	r1, [r4, #21]
 800fa5c:	440b      	add	r3, r1
 800fa5e:	60a2      	str	r2, [r4, #8]
 800fa60:	6123      	str	r3, [r4, #16]
 800fa62:	7da0      	ldrb	r0, [r4, #22]
 800fa64:	f080 0001 	eor.w	r0, r0, #1
 800fa68:	b002      	add	sp, #8
 800fa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa6e:	9a01      	ldr	r2, [sp, #4]
 800fa70:	601a      	str	r2, [r3, #0]
 800fa72:	e7ee      	b.n	800fa52 <ucdr_serialize_float+0xc2>
 800fa74:	68a2      	ldr	r2, [r4, #8]
 800fa76:	6923      	ldr	r3, [r4, #16]
 800fa78:	7da0      	ldrb	r0, [r4, #22]
 800fa7a:	1b92      	subs	r2, r2, r6
 800fa7c:	1b9b      	subs	r3, r3, r6
 800fa7e:	7567      	strb	r7, [r4, #21]
 800fa80:	f080 0001 	eor.w	r0, r0, #1
 800fa84:	60a2      	str	r2, [r4, #8]
 800fa86:	6123      	str	r3, [r4, #16]
 800fa88:	b002      	add	sp, #8
 800fa8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa8e:	68a3      	ldr	r3, [r4, #8]
 800fa90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa94:	701a      	strb	r2, [r3, #0]
 800fa96:	68a3      	ldr	r3, [r4, #8]
 800fa98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fa9c:	701a      	strb	r2, [r3, #0]
 800fa9e:	68a3      	ldr	r3, [r4, #8]
 800faa0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800faa4:	701a      	strb	r2, [r3, #0]
 800faa6:	e7ad      	b.n	800fa04 <ucdr_serialize_float+0x74>
 800faa8:	4628      	mov	r0, r5
 800faaa:	ad01      	add	r5, sp, #4
 800faac:	4632      	mov	r2, r6
 800faae:	4629      	mov	r1, r5
 800fab0:	f00d fd47 	bl	801d542 <memcpy>
 800fab4:	4642      	mov	r2, r8
 800fab6:	19a9      	adds	r1, r5, r6
 800fab8:	68a0      	ldr	r0, [r4, #8]
 800faba:	f00d fd42 	bl	801d542 <memcpy>
 800fabe:	e7a1      	b.n	800fa04 <ucdr_serialize_float+0x74>

0800fac0 <ucdr_deserialize_float>:
 800fac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fac4:	4604      	mov	r4, r0
 800fac6:	460d      	mov	r5, r1
 800fac8:	2104      	movs	r1, #4
 800faca:	f000 fa7f 	bl	800ffcc <ucdr_buffer_alignment>
 800face:	4601      	mov	r1, r0
 800fad0:	4620      	mov	r0, r4
 800fad2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fad6:	f000 fac1 	bl	801005c <ucdr_advance_buffer>
 800fada:	2104      	movs	r1, #4
 800fadc:	4620      	mov	r0, r4
 800fade:	f000 fa15 	bl	800ff0c <ucdr_check_buffer_available_for>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d138      	bne.n	800fb58 <ucdr_deserialize_float+0x98>
 800fae6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800faea:	42b7      	cmp	r7, r6
 800faec:	d92f      	bls.n	800fb4e <ucdr_deserialize_float+0x8e>
 800faee:	6923      	ldr	r3, [r4, #16]
 800faf0:	4620      	mov	r0, r4
 800faf2:	60a7      	str	r7, [r4, #8]
 800faf4:	1bbf      	subs	r7, r7, r6
 800faf6:	443b      	add	r3, r7
 800faf8:	f1c7 0904 	rsb	r9, r7, #4
 800fafc:	6123      	str	r3, [r4, #16]
 800fafe:	4649      	mov	r1, r9
 800fb00:	f000 fa10 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d046      	beq.n	800fb96 <ucdr_deserialize_float+0xd6>
 800fb08:	7d23      	ldrb	r3, [r4, #20]
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d05c      	beq.n	800fbc8 <ucdr_deserialize_float+0x108>
 800fb0e:	78f3      	ldrb	r3, [r6, #3]
 800fb10:	702b      	strb	r3, [r5, #0]
 800fb12:	2f00      	cmp	r7, #0
 800fb14:	d04c      	beq.n	800fbb0 <ucdr_deserialize_float+0xf0>
 800fb16:	78b3      	ldrb	r3, [r6, #2]
 800fb18:	2f01      	cmp	r7, #1
 800fb1a:	706b      	strb	r3, [r5, #1]
 800fb1c:	f105 0302 	add.w	r3, r5, #2
 800fb20:	d04a      	beq.n	800fbb8 <ucdr_deserialize_float+0xf8>
 800fb22:	7873      	ldrb	r3, [r6, #1]
 800fb24:	2f02      	cmp	r7, #2
 800fb26:	70ab      	strb	r3, [r5, #2]
 800fb28:	f105 0303 	add.w	r3, r5, #3
 800fb2c:	d048      	beq.n	800fbc0 <ucdr_deserialize_float+0x100>
 800fb2e:	7833      	ldrb	r3, [r6, #0]
 800fb30:	70eb      	strb	r3, [r5, #3]
 800fb32:	6923      	ldr	r3, [r4, #16]
 800fb34:	2104      	movs	r1, #4
 800fb36:	68a2      	ldr	r2, [r4, #8]
 800fb38:	3304      	adds	r3, #4
 800fb3a:	7da0      	ldrb	r0, [r4, #22]
 800fb3c:	444a      	add	r2, r9
 800fb3e:	7561      	strb	r1, [r4, #21]
 800fb40:	1bdb      	subs	r3, r3, r7
 800fb42:	f080 0001 	eor.w	r0, r0, #1
 800fb46:	60a2      	str	r2, [r4, #8]
 800fb48:	6123      	str	r3, [r4, #16]
 800fb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb4e:	2104      	movs	r1, #4
 800fb50:	4620      	mov	r0, r4
 800fb52:	f000 f9e7 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800fb56:	b1b0      	cbz	r0, 800fb86 <ucdr_deserialize_float+0xc6>
 800fb58:	7d23      	ldrb	r3, [r4, #20]
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	68a3      	ldr	r3, [r4, #8]
 800fb5e:	d017      	beq.n	800fb90 <ucdr_deserialize_float+0xd0>
 800fb60:	78db      	ldrb	r3, [r3, #3]
 800fb62:	702b      	strb	r3, [r5, #0]
 800fb64:	68a3      	ldr	r3, [r4, #8]
 800fb66:	789b      	ldrb	r3, [r3, #2]
 800fb68:	706b      	strb	r3, [r5, #1]
 800fb6a:	68a3      	ldr	r3, [r4, #8]
 800fb6c:	785b      	ldrb	r3, [r3, #1]
 800fb6e:	70ab      	strb	r3, [r5, #2]
 800fb70:	68a3      	ldr	r3, [r4, #8]
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	70eb      	strb	r3, [r5, #3]
 800fb76:	2104      	movs	r1, #4
 800fb78:	68a2      	ldr	r2, [r4, #8]
 800fb7a:	6923      	ldr	r3, [r4, #16]
 800fb7c:	440a      	add	r2, r1
 800fb7e:	7561      	strb	r1, [r4, #21]
 800fb80:	440b      	add	r3, r1
 800fb82:	60a2      	str	r2, [r4, #8]
 800fb84:	6123      	str	r3, [r4, #16]
 800fb86:	7da0      	ldrb	r0, [r4, #22]
 800fb88:	f080 0001 	eor.w	r0, r0, #1
 800fb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	602b      	str	r3, [r5, #0]
 800fb94:	e7ef      	b.n	800fb76 <ucdr_deserialize_float+0xb6>
 800fb96:	68a2      	ldr	r2, [r4, #8]
 800fb98:	6923      	ldr	r3, [r4, #16]
 800fb9a:	1bd2      	subs	r2, r2, r7
 800fb9c:	7da0      	ldrb	r0, [r4, #22]
 800fb9e:	1bdb      	subs	r3, r3, r7
 800fba0:	f884 8015 	strb.w	r8, [r4, #21]
 800fba4:	f080 0001 	eor.w	r0, r0, #1
 800fba8:	60a2      	str	r2, [r4, #8]
 800fbaa:	6123      	str	r3, [r4, #16]
 800fbac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbb0:	68a3      	ldr	r3, [r4, #8]
 800fbb2:	789b      	ldrb	r3, [r3, #2]
 800fbb4:	706b      	strb	r3, [r5, #1]
 800fbb6:	1cab      	adds	r3, r5, #2
 800fbb8:	68a2      	ldr	r2, [r4, #8]
 800fbba:	7852      	ldrb	r2, [r2, #1]
 800fbbc:	f803 2b01 	strb.w	r2, [r3], #1
 800fbc0:	68a2      	ldr	r2, [r4, #8]
 800fbc2:	7812      	ldrb	r2, [r2, #0]
 800fbc4:	701a      	strb	r2, [r3, #0]
 800fbc6:	e7b4      	b.n	800fb32 <ucdr_deserialize_float+0x72>
 800fbc8:	4631      	mov	r1, r6
 800fbca:	463a      	mov	r2, r7
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f00d fcb8 	bl	801d542 <memcpy>
 800fbd2:	464a      	mov	r2, r9
 800fbd4:	19e8      	adds	r0, r5, r7
 800fbd6:	68a1      	ldr	r1, [r4, #8]
 800fbd8:	f00d fcb3 	bl	801d542 <memcpy>
 800fbdc:	e7a9      	b.n	800fb32 <ucdr_deserialize_float+0x72>
 800fbde:	bf00      	nop

0800fbe0 <ucdr_serialize_double>:
 800fbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	2108      	movs	r1, #8
 800fbea:	ed8d 0b00 	vstr	d0, [sp]
 800fbee:	f000 f9ed 	bl	800ffcc <ucdr_buffer_alignment>
 800fbf2:	4601      	mov	r1, r0
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	7d67      	ldrb	r7, [r4, #21]
 800fbf8:	f000 fa30 	bl	801005c <ucdr_advance_buffer>
 800fbfc:	2108      	movs	r1, #8
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f000 f984 	bl	800ff0c <ucdr_check_buffer_available_for>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d14e      	bne.n	800fca6 <ucdr_serialize_double+0xc6>
 800fc08:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fc0c:	42ab      	cmp	r3, r5
 800fc0e:	d945      	bls.n	800fc9c <ucdr_serialize_double+0xbc>
 800fc10:	1b5e      	subs	r6, r3, r5
 800fc12:	60a3      	str	r3, [r4, #8]
 800fc14:	6923      	ldr	r3, [r4, #16]
 800fc16:	4620      	mov	r0, r4
 800fc18:	f1c6 0808 	rsb	r8, r6, #8
 800fc1c:	4433      	add	r3, r6
 800fc1e:	4641      	mov	r1, r8
 800fc20:	6123      	str	r3, [r4, #16]
 800fc22:	f000 f97f 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800fc26:	2800      	cmp	r0, #0
 800fc28:	d074      	beq.n	800fd14 <ucdr_serialize_double+0x134>
 800fc2a:	7d23      	ldrb	r3, [r4, #20]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	f000 809b 	beq.w	800fd68 <ucdr_serialize_double+0x188>
 800fc32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc36:	702b      	strb	r3, [r5, #0]
 800fc38:	2e00      	cmp	r6, #0
 800fc3a:	d078      	beq.n	800fd2e <ucdr_serialize_double+0x14e>
 800fc3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc40:	2e01      	cmp	r6, #1
 800fc42:	706b      	strb	r3, [r5, #1]
 800fc44:	d077      	beq.n	800fd36 <ucdr_serialize_double+0x156>
 800fc46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fc4a:	2e02      	cmp	r6, #2
 800fc4c:	70ab      	strb	r3, [r5, #2]
 800fc4e:	d076      	beq.n	800fd3e <ucdr_serialize_double+0x15e>
 800fc50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fc54:	2e03      	cmp	r6, #3
 800fc56:	70eb      	strb	r3, [r5, #3]
 800fc58:	d075      	beq.n	800fd46 <ucdr_serialize_double+0x166>
 800fc5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fc5e:	2e04      	cmp	r6, #4
 800fc60:	712b      	strb	r3, [r5, #4]
 800fc62:	d074      	beq.n	800fd4e <ucdr_serialize_double+0x16e>
 800fc64:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fc68:	2e05      	cmp	r6, #5
 800fc6a:	716b      	strb	r3, [r5, #5]
 800fc6c:	d073      	beq.n	800fd56 <ucdr_serialize_double+0x176>
 800fc6e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fc72:	2e06      	cmp	r6, #6
 800fc74:	71ab      	strb	r3, [r5, #6]
 800fc76:	d072      	beq.n	800fd5e <ucdr_serialize_double+0x17e>
 800fc78:	f89d 3000 	ldrb.w	r3, [sp]
 800fc7c:	71eb      	strb	r3, [r5, #7]
 800fc7e:	6923      	ldr	r3, [r4, #16]
 800fc80:	2108      	movs	r1, #8
 800fc82:	68a2      	ldr	r2, [r4, #8]
 800fc84:	3308      	adds	r3, #8
 800fc86:	7da0      	ldrb	r0, [r4, #22]
 800fc88:	4442      	add	r2, r8
 800fc8a:	7561      	strb	r1, [r4, #21]
 800fc8c:	1b9e      	subs	r6, r3, r6
 800fc8e:	f080 0001 	eor.w	r0, r0, #1
 800fc92:	60a2      	str	r2, [r4, #8]
 800fc94:	6126      	str	r6, [r4, #16]
 800fc96:	b002      	add	sp, #8
 800fc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc9c:	2108      	movs	r1, #8
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f000 f940 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800fca4:	b350      	cbz	r0, 800fcfc <ucdr_serialize_double+0x11c>
 800fca6:	7d23      	ldrb	r3, [r4, #20]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d02d      	beq.n	800fd08 <ucdr_serialize_double+0x128>
 800fcac:	68a3      	ldr	r3, [r4, #8]
 800fcae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fcb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fcb6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fcba:	7018      	strb	r0, [r3, #0]
 800fcbc:	68a3      	ldr	r3, [r4, #8]
 800fcbe:	705a      	strb	r2, [r3, #1]
 800fcc0:	68a3      	ldr	r3, [r4, #8]
 800fcc2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fcc6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fcca:	7099      	strb	r1, [r3, #2]
 800fccc:	68a3      	ldr	r3, [r4, #8]
 800fcce:	70da      	strb	r2, [r3, #3]
 800fcd0:	68a3      	ldr	r3, [r4, #8]
 800fcd2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fcd6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fcda:	7118      	strb	r0, [r3, #4]
 800fcdc:	68a3      	ldr	r3, [r4, #8]
 800fcde:	715a      	strb	r2, [r3, #5]
 800fce0:	68a3      	ldr	r3, [r4, #8]
 800fce2:	f89d 2000 	ldrb.w	r2, [sp]
 800fce6:	7199      	strb	r1, [r3, #6]
 800fce8:	68a3      	ldr	r3, [r4, #8]
 800fcea:	71da      	strb	r2, [r3, #7]
 800fcec:	2108      	movs	r1, #8
 800fcee:	68a2      	ldr	r2, [r4, #8]
 800fcf0:	6923      	ldr	r3, [r4, #16]
 800fcf2:	440a      	add	r2, r1
 800fcf4:	7561      	strb	r1, [r4, #21]
 800fcf6:	440b      	add	r3, r1
 800fcf8:	60a2      	str	r2, [r4, #8]
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	7da0      	ldrb	r0, [r4, #22]
 800fcfe:	f080 0001 	eor.w	r0, r0, #1
 800fd02:	b002      	add	sp, #8
 800fd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd08:	466b      	mov	r3, sp
 800fd0a:	68a2      	ldr	r2, [r4, #8]
 800fd0c:	cb03      	ldmia	r3!, {r0, r1}
 800fd0e:	6010      	str	r0, [r2, #0]
 800fd10:	6051      	str	r1, [r2, #4]
 800fd12:	e7eb      	b.n	800fcec <ucdr_serialize_double+0x10c>
 800fd14:	68a2      	ldr	r2, [r4, #8]
 800fd16:	6923      	ldr	r3, [r4, #16]
 800fd18:	7da0      	ldrb	r0, [r4, #22]
 800fd1a:	1b92      	subs	r2, r2, r6
 800fd1c:	1b9b      	subs	r3, r3, r6
 800fd1e:	7567      	strb	r7, [r4, #21]
 800fd20:	f080 0001 	eor.w	r0, r0, #1
 800fd24:	60a2      	str	r2, [r4, #8]
 800fd26:	6123      	str	r3, [r4, #16]
 800fd28:	b002      	add	sp, #8
 800fd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd2e:	68a3      	ldr	r3, [r4, #8]
 800fd30:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd34:	701a      	strb	r2, [r3, #0]
 800fd36:	68a3      	ldr	r3, [r4, #8]
 800fd38:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd3c:	701a      	strb	r2, [r3, #0]
 800fd3e:	68a3      	ldr	r3, [r4, #8]
 800fd40:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fd44:	701a      	strb	r2, [r3, #0]
 800fd46:	68a3      	ldr	r3, [r4, #8]
 800fd48:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fd4c:	701a      	strb	r2, [r3, #0]
 800fd4e:	68a3      	ldr	r3, [r4, #8]
 800fd50:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fd54:	701a      	strb	r2, [r3, #0]
 800fd56:	68a3      	ldr	r3, [r4, #8]
 800fd58:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fd5c:	701a      	strb	r2, [r3, #0]
 800fd5e:	68a3      	ldr	r3, [r4, #8]
 800fd60:	f89d 2000 	ldrb.w	r2, [sp]
 800fd64:	701a      	strb	r2, [r3, #0]
 800fd66:	e78a      	b.n	800fc7e <ucdr_serialize_double+0x9e>
 800fd68:	4628      	mov	r0, r5
 800fd6a:	466d      	mov	r5, sp
 800fd6c:	4632      	mov	r2, r6
 800fd6e:	4629      	mov	r1, r5
 800fd70:	f00d fbe7 	bl	801d542 <memcpy>
 800fd74:	4642      	mov	r2, r8
 800fd76:	19a9      	adds	r1, r5, r6
 800fd78:	68a0      	ldr	r0, [r4, #8]
 800fd7a:	f00d fbe2 	bl	801d542 <memcpy>
 800fd7e:	e77e      	b.n	800fc7e <ucdr_serialize_double+0x9e>

0800fd80 <ucdr_deserialize_double>:
 800fd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd84:	4604      	mov	r4, r0
 800fd86:	460d      	mov	r5, r1
 800fd88:	2108      	movs	r1, #8
 800fd8a:	f000 f91f 	bl	800ffcc <ucdr_buffer_alignment>
 800fd8e:	4601      	mov	r1, r0
 800fd90:	4620      	mov	r0, r4
 800fd92:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fd96:	f000 f961 	bl	801005c <ucdr_advance_buffer>
 800fd9a:	2108      	movs	r1, #8
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f000 f8b5 	bl	800ff0c <ucdr_check_buffer_available_for>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d151      	bne.n	800fe4a <ucdr_deserialize_double+0xca>
 800fda6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fdaa:	42be      	cmp	r6, r7
 800fdac:	d948      	bls.n	800fe40 <ucdr_deserialize_double+0xc0>
 800fdae:	6923      	ldr	r3, [r4, #16]
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	60a6      	str	r6, [r4, #8]
 800fdb4:	1bf6      	subs	r6, r6, r7
 800fdb6:	4433      	add	r3, r6
 800fdb8:	f1c6 0908 	rsb	r9, r6, #8
 800fdbc:	6123      	str	r3, [r4, #16]
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	f000 f8b0 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	d06d      	beq.n	800fea4 <ucdr_deserialize_double+0x124>
 800fdc8:	7d23      	ldrb	r3, [r4, #20]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	f000 8093 	beq.w	800fef6 <ucdr_deserialize_double+0x176>
 800fdd0:	79fb      	ldrb	r3, [r7, #7]
 800fdd2:	702b      	strb	r3, [r5, #0]
 800fdd4:	2e00      	cmp	r6, #0
 800fdd6:	d072      	beq.n	800febe <ucdr_deserialize_double+0x13e>
 800fdd8:	79bb      	ldrb	r3, [r7, #6]
 800fdda:	2e01      	cmp	r6, #1
 800fddc:	706b      	strb	r3, [r5, #1]
 800fdde:	f105 0302 	add.w	r3, r5, #2
 800fde2:	d070      	beq.n	800fec6 <ucdr_deserialize_double+0x146>
 800fde4:	797b      	ldrb	r3, [r7, #5]
 800fde6:	2e02      	cmp	r6, #2
 800fde8:	70ab      	strb	r3, [r5, #2]
 800fdea:	f105 0303 	add.w	r3, r5, #3
 800fdee:	d06e      	beq.n	800fece <ucdr_deserialize_double+0x14e>
 800fdf0:	793b      	ldrb	r3, [r7, #4]
 800fdf2:	2e03      	cmp	r6, #3
 800fdf4:	70eb      	strb	r3, [r5, #3]
 800fdf6:	f105 0304 	add.w	r3, r5, #4
 800fdfa:	d06c      	beq.n	800fed6 <ucdr_deserialize_double+0x156>
 800fdfc:	78fb      	ldrb	r3, [r7, #3]
 800fdfe:	2e04      	cmp	r6, #4
 800fe00:	712b      	strb	r3, [r5, #4]
 800fe02:	f105 0305 	add.w	r3, r5, #5
 800fe06:	d06a      	beq.n	800fede <ucdr_deserialize_double+0x15e>
 800fe08:	78bb      	ldrb	r3, [r7, #2]
 800fe0a:	2e05      	cmp	r6, #5
 800fe0c:	716b      	strb	r3, [r5, #5]
 800fe0e:	f105 0306 	add.w	r3, r5, #6
 800fe12:	d068      	beq.n	800fee6 <ucdr_deserialize_double+0x166>
 800fe14:	787b      	ldrb	r3, [r7, #1]
 800fe16:	2e06      	cmp	r6, #6
 800fe18:	71ab      	strb	r3, [r5, #6]
 800fe1a:	f105 0307 	add.w	r3, r5, #7
 800fe1e:	d066      	beq.n	800feee <ucdr_deserialize_double+0x16e>
 800fe20:	783b      	ldrb	r3, [r7, #0]
 800fe22:	71eb      	strb	r3, [r5, #7]
 800fe24:	6923      	ldr	r3, [r4, #16]
 800fe26:	2108      	movs	r1, #8
 800fe28:	68a2      	ldr	r2, [r4, #8]
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	7da0      	ldrb	r0, [r4, #22]
 800fe2e:	444a      	add	r2, r9
 800fe30:	7561      	strb	r1, [r4, #21]
 800fe32:	1b9e      	subs	r6, r3, r6
 800fe34:	f080 0001 	eor.w	r0, r0, #1
 800fe38:	60a2      	str	r2, [r4, #8]
 800fe3a:	6126      	str	r6, [r4, #16]
 800fe3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe40:	2108      	movs	r1, #8
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 f86e 	bl	800ff24 <ucdr_check_final_buffer_behavior>
 800fe48:	b310      	cbz	r0, 800fe90 <ucdr_deserialize_double+0x110>
 800fe4a:	7d23      	ldrb	r3, [r4, #20]
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	68a3      	ldr	r3, [r4, #8]
 800fe50:	d023      	beq.n	800fe9a <ucdr_deserialize_double+0x11a>
 800fe52:	79db      	ldrb	r3, [r3, #7]
 800fe54:	702b      	strb	r3, [r5, #0]
 800fe56:	68a3      	ldr	r3, [r4, #8]
 800fe58:	799b      	ldrb	r3, [r3, #6]
 800fe5a:	706b      	strb	r3, [r5, #1]
 800fe5c:	68a3      	ldr	r3, [r4, #8]
 800fe5e:	795b      	ldrb	r3, [r3, #5]
 800fe60:	70ab      	strb	r3, [r5, #2]
 800fe62:	68a3      	ldr	r3, [r4, #8]
 800fe64:	791b      	ldrb	r3, [r3, #4]
 800fe66:	70eb      	strb	r3, [r5, #3]
 800fe68:	68a3      	ldr	r3, [r4, #8]
 800fe6a:	78db      	ldrb	r3, [r3, #3]
 800fe6c:	712b      	strb	r3, [r5, #4]
 800fe6e:	68a3      	ldr	r3, [r4, #8]
 800fe70:	789b      	ldrb	r3, [r3, #2]
 800fe72:	716b      	strb	r3, [r5, #5]
 800fe74:	68a3      	ldr	r3, [r4, #8]
 800fe76:	785b      	ldrb	r3, [r3, #1]
 800fe78:	71ab      	strb	r3, [r5, #6]
 800fe7a:	68a3      	ldr	r3, [r4, #8]
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	71eb      	strb	r3, [r5, #7]
 800fe80:	2108      	movs	r1, #8
 800fe82:	68a2      	ldr	r2, [r4, #8]
 800fe84:	6923      	ldr	r3, [r4, #16]
 800fe86:	440a      	add	r2, r1
 800fe88:	7561      	strb	r1, [r4, #21]
 800fe8a:	440b      	add	r3, r1
 800fe8c:	60a2      	str	r2, [r4, #8]
 800fe8e:	6123      	str	r3, [r4, #16]
 800fe90:	7da0      	ldrb	r0, [r4, #22]
 800fe92:	f080 0001 	eor.w	r0, r0, #1
 800fe96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	602a      	str	r2, [r5, #0]
 800fea0:	606b      	str	r3, [r5, #4]
 800fea2:	e7ed      	b.n	800fe80 <ucdr_deserialize_double+0x100>
 800fea4:	68a2      	ldr	r2, [r4, #8]
 800fea6:	6923      	ldr	r3, [r4, #16]
 800fea8:	1b92      	subs	r2, r2, r6
 800feaa:	7da0      	ldrb	r0, [r4, #22]
 800feac:	1b9b      	subs	r3, r3, r6
 800feae:	f884 8015 	strb.w	r8, [r4, #21]
 800feb2:	f080 0001 	eor.w	r0, r0, #1
 800feb6:	60a2      	str	r2, [r4, #8]
 800feb8:	6123      	str	r3, [r4, #16]
 800feba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800febe:	68a3      	ldr	r3, [r4, #8]
 800fec0:	799b      	ldrb	r3, [r3, #6]
 800fec2:	706b      	strb	r3, [r5, #1]
 800fec4:	1cab      	adds	r3, r5, #2
 800fec6:	68a2      	ldr	r2, [r4, #8]
 800fec8:	7952      	ldrb	r2, [r2, #5]
 800feca:	f803 2b01 	strb.w	r2, [r3], #1
 800fece:	68a2      	ldr	r2, [r4, #8]
 800fed0:	7912      	ldrb	r2, [r2, #4]
 800fed2:	f803 2b01 	strb.w	r2, [r3], #1
 800fed6:	68a2      	ldr	r2, [r4, #8]
 800fed8:	78d2      	ldrb	r2, [r2, #3]
 800feda:	f803 2b01 	strb.w	r2, [r3], #1
 800fede:	68a2      	ldr	r2, [r4, #8]
 800fee0:	7892      	ldrb	r2, [r2, #2]
 800fee2:	f803 2b01 	strb.w	r2, [r3], #1
 800fee6:	68a2      	ldr	r2, [r4, #8]
 800fee8:	7852      	ldrb	r2, [r2, #1]
 800feea:	f803 2b01 	strb.w	r2, [r3], #1
 800feee:	68a2      	ldr	r2, [r4, #8]
 800fef0:	7812      	ldrb	r2, [r2, #0]
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e796      	b.n	800fe24 <ucdr_deserialize_double+0xa4>
 800fef6:	4639      	mov	r1, r7
 800fef8:	4632      	mov	r2, r6
 800fefa:	4628      	mov	r0, r5
 800fefc:	f00d fb21 	bl	801d542 <memcpy>
 800ff00:	464a      	mov	r2, r9
 800ff02:	19a8      	adds	r0, r5, r6
 800ff04:	68a1      	ldr	r1, [r4, #8]
 800ff06:	f00d fb1c 	bl	801d542 <memcpy>
 800ff0a:	e78b      	b.n	800fe24 <ucdr_deserialize_double+0xa4>

0800ff0c <ucdr_check_buffer_available_for>:
 800ff0c:	7d83      	ldrb	r3, [r0, #22]
 800ff0e:	b93b      	cbnz	r3, 800ff20 <ucdr_check_buffer_available_for+0x14>
 800ff10:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ff14:	4419      	add	r1, r3
 800ff16:	4288      	cmp	r0, r1
 800ff18:	bf34      	ite	cc
 800ff1a:	2000      	movcc	r0, #0
 800ff1c:	2001      	movcs	r0, #1
 800ff1e:	4770      	bx	lr
 800ff20:	2000      	movs	r0, #0
 800ff22:	4770      	bx	lr

0800ff24 <ucdr_check_final_buffer_behavior>:
 800ff24:	7d83      	ldrb	r3, [r0, #22]
 800ff26:	b943      	cbnz	r3, 800ff3a <ucdr_check_final_buffer_behavior+0x16>
 800ff28:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ff2c:	b510      	push	{r4, lr}
 800ff2e:	4291      	cmp	r1, r2
 800ff30:	4604      	mov	r4, r0
 800ff32:	d205      	bcs.n	800ff40 <ucdr_check_final_buffer_behavior+0x1c>
 800ff34:	2301      	movs	r3, #1
 800ff36:	4618      	mov	r0, r3
 800ff38:	bd10      	pop	{r4, pc}
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	4770      	bx	lr
 800ff40:	6982      	ldr	r2, [r0, #24]
 800ff42:	b13a      	cbz	r2, 800ff54 <ucdr_check_final_buffer_behavior+0x30>
 800ff44:	69c1      	ldr	r1, [r0, #28]
 800ff46:	4790      	blx	r2
 800ff48:	f080 0301 	eor.w	r3, r0, #1
 800ff4c:	75a0      	strb	r0, [r4, #22]
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	4618      	mov	r0, r3
 800ff52:	bd10      	pop	{r4, pc}
 800ff54:	2001      	movs	r0, #1
 800ff56:	75a0      	strb	r0, [r4, #22]
 800ff58:	e7fa      	b.n	800ff50 <ucdr_check_final_buffer_behavior+0x2c>
 800ff5a:	bf00      	nop

0800ff5c <ucdr_set_on_full_buffer_callback>:
 800ff5c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop

0800ff64 <ucdr_init_buffer_origin_offset_endian>:
 800ff64:	b410      	push	{r4}
 800ff66:	9c01      	ldr	r4, [sp, #4]
 800ff68:	440a      	add	r2, r1
 800ff6a:	6001      	str	r1, [r0, #0]
 800ff6c:	6042      	str	r2, [r0, #4]
 800ff6e:	190a      	adds	r2, r1, r4
 800ff70:	441c      	add	r4, r3
 800ff72:	6082      	str	r2, [r0, #8]
 800ff74:	2200      	movs	r2, #0
 800ff76:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ff7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ff7e:	7542      	strb	r2, [r0, #21]
 800ff80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff84:	7582      	strb	r2, [r0, #22]
 800ff86:	7503      	strb	r3, [r0, #20]
 800ff88:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop

0800ff90 <ucdr_init_buffer_origin_offset>:
 800ff90:	b510      	push	{r4, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	9c04      	ldr	r4, [sp, #16]
 800ff96:	9400      	str	r4, [sp, #0]
 800ff98:	2401      	movs	r4, #1
 800ff9a:	9401      	str	r4, [sp, #4]
 800ff9c:	f7ff ffe2 	bl	800ff64 <ucdr_init_buffer_origin_offset_endian>
 800ffa0:	b002      	add	sp, #8
 800ffa2:	bd10      	pop	{r4, pc}

0800ffa4 <ucdr_init_buffer_origin>:
 800ffa4:	b510      	push	{r4, lr}
 800ffa6:	2400      	movs	r4, #0
 800ffa8:	b082      	sub	sp, #8
 800ffaa:	9400      	str	r4, [sp, #0]
 800ffac:	f7ff fff0 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 800ffb0:	b002      	add	sp, #8
 800ffb2:	bd10      	pop	{r4, pc}

0800ffb4 <ucdr_init_buffer>:
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	f7ff bff5 	b.w	800ffa4 <ucdr_init_buffer_origin>
 800ffba:	bf00      	nop

0800ffbc <ucdr_alignment>:
 800ffbc:	fbb0 f2f1 	udiv	r2, r0, r1
 800ffc0:	fb02 0011 	mls	r0, r2, r1, r0
 800ffc4:	1e4b      	subs	r3, r1, #1
 800ffc6:	1a08      	subs	r0, r1, r0
 800ffc8:	4018      	ands	r0, r3
 800ffca:	4770      	bx	lr

0800ffcc <ucdr_buffer_alignment>:
 800ffcc:	7d43      	ldrb	r3, [r0, #21]
 800ffce:	428b      	cmp	r3, r1
 800ffd0:	d209      	bcs.n	800ffe6 <ucdr_buffer_alignment+0x1a>
 800ffd2:	6903      	ldr	r3, [r0, #16]
 800ffd4:	1e4a      	subs	r2, r1, #1
 800ffd6:	fbb3 f0f1 	udiv	r0, r3, r1
 800ffda:	fb01 3010 	mls	r0, r1, r0, r3
 800ffde:	1a09      	subs	r1, r1, r0
 800ffe0:	ea01 0002 	and.w	r0, r1, r2
 800ffe4:	4770      	bx	lr
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop

0800ffec <ucdr_align_to>:
 800ffec:	b538      	push	{r3, r4, r5, lr}
 800ffee:	4604      	mov	r4, r0
 800fff0:	460d      	mov	r5, r1
 800fff2:	f7ff ffeb 	bl	800ffcc <ucdr_buffer_alignment>
 800fff6:	68a3      	ldr	r3, [r4, #8]
 800fff8:	7565      	strb	r5, [r4, #21]
 800fffa:	181a      	adds	r2, r3, r0
 800fffc:	6923      	ldr	r3, [r4, #16]
 800fffe:	4418      	add	r0, r3
 8010000:	6863      	ldr	r3, [r4, #4]
 8010002:	4293      	cmp	r3, r2
 8010004:	6120      	str	r0, [r4, #16]
 8010006:	bf28      	it	cs
 8010008:	4613      	movcs	r3, r2
 801000a:	60a3      	str	r3, [r4, #8]
 801000c:	bd38      	pop	{r3, r4, r5, pc}
 801000e:	bf00      	nop

08010010 <ucdr_buffer_length>:
 8010010:	6882      	ldr	r2, [r0, #8]
 8010012:	6800      	ldr	r0, [r0, #0]
 8010014:	1a10      	subs	r0, r2, r0
 8010016:	4770      	bx	lr

08010018 <ucdr_buffer_remaining>:
 8010018:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801001c:	1a10      	subs	r0, r2, r0
 801001e:	4770      	bx	lr

08010020 <ucdr_check_final_buffer_behavior_array>:
 8010020:	b538      	push	{r3, r4, r5, lr}
 8010022:	7d83      	ldrb	r3, [r0, #22]
 8010024:	b9a3      	cbnz	r3, 8010050 <ucdr_check_final_buffer_behavior_array+0x30>
 8010026:	4604      	mov	r4, r0
 8010028:	460d      	mov	r5, r1
 801002a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801002e:	429a      	cmp	r2, r3
 8010030:	d300      	bcc.n	8010034 <ucdr_check_final_buffer_behavior_array+0x14>
 8010032:	b931      	cbnz	r1, 8010042 <ucdr_check_final_buffer_behavior_array+0x22>
 8010034:	4620      	mov	r0, r4
 8010036:	f7ff ffef 	bl	8010018 <ucdr_buffer_remaining>
 801003a:	42a8      	cmp	r0, r5
 801003c:	bf28      	it	cs
 801003e:	4628      	movcs	r0, r5
 8010040:	bd38      	pop	{r3, r4, r5, pc}
 8010042:	6983      	ldr	r3, [r0, #24]
 8010044:	b133      	cbz	r3, 8010054 <ucdr_check_final_buffer_behavior_array+0x34>
 8010046:	69c1      	ldr	r1, [r0, #28]
 8010048:	4798      	blx	r3
 801004a:	75a0      	strb	r0, [r4, #22]
 801004c:	2800      	cmp	r0, #0
 801004e:	d0f1      	beq.n	8010034 <ucdr_check_final_buffer_behavior_array+0x14>
 8010050:	2000      	movs	r0, #0
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	2301      	movs	r3, #1
 8010056:	7583      	strb	r3, [r0, #22]
 8010058:	e7fa      	b.n	8010050 <ucdr_check_final_buffer_behavior_array+0x30>
 801005a:	bf00      	nop

0801005c <ucdr_advance_buffer>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4604      	mov	r4, r0
 8010060:	460d      	mov	r5, r1
 8010062:	f7ff ff53 	bl	800ff0c <ucdr_check_buffer_available_for>
 8010066:	b178      	cbz	r0, 8010088 <ucdr_advance_buffer+0x2c>
 8010068:	6923      	ldr	r3, [r4, #16]
 801006a:	68a2      	ldr	r2, [r4, #8]
 801006c:	442b      	add	r3, r5
 801006e:	442a      	add	r2, r5
 8010070:	6123      	str	r3, [r4, #16]
 8010072:	2301      	movs	r3, #1
 8010074:	60a2      	str	r2, [r4, #8]
 8010076:	7563      	strb	r3, [r4, #21]
 8010078:	bd38      	pop	{r3, r4, r5, pc}
 801007a:	68a2      	ldr	r2, [r4, #8]
 801007c:	1a2d      	subs	r5, r5, r0
 801007e:	6923      	ldr	r3, [r4, #16]
 8010080:	4402      	add	r2, r0
 8010082:	4418      	add	r0, r3
 8010084:	60a2      	str	r2, [r4, #8]
 8010086:	6120      	str	r0, [r4, #16]
 8010088:	4629      	mov	r1, r5
 801008a:	2201      	movs	r2, #1
 801008c:	4620      	mov	r0, r4
 801008e:	f7ff ffc7 	bl	8010020 <ucdr_check_final_buffer_behavior_array>
 8010092:	2800      	cmp	r0, #0
 8010094:	d1f1      	bne.n	801007a <ucdr_advance_buffer+0x1e>
 8010096:	2301      	movs	r3, #1
 8010098:	7563      	strb	r3, [r4, #21]
 801009a:	bd38      	pop	{r3, r4, r5, pc}

0801009c <_rclc_check_for_new_data>:
 801009c:	2800      	cmp	r0, #0
 801009e:	d046      	beq.n	801012e <_rclc_check_for_new_data+0x92>
 80100a0:	4603      	mov	r3, r0
 80100a2:	b530      	push	{r4, r5, lr}
 80100a4:	7802      	ldrb	r2, [r0, #0]
 80100a6:	b085      	sub	sp, #20
 80100a8:	2a0a      	cmp	r2, #10
 80100aa:	d842      	bhi.n	8010132 <_rclc_check_for_new_data+0x96>
 80100ac:	e8df f002 	tbb	[pc, r2]
 80100b0:	14181212 	.word	0x14181212
 80100b4:	06060614 	.word	0x06060614
 80100b8:	2e1a      	.short	0x2e1a
 80100ba:	16          	.byte	0x16
 80100bb:	00          	.byte	0x00
 80100bc:	6a0a      	ldr	r2, [r1, #32]
 80100be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80100c0:	2000      	movs	r0, #0
 80100c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80100c6:	1a12      	subs	r2, r2, r0
 80100c8:	bf18      	it	ne
 80100ca:	2201      	movne	r2, #1
 80100cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80100d0:	b005      	add	sp, #20
 80100d2:	bd30      	pop	{r4, r5, pc}
 80100d4:	680a      	ldr	r2, [r1, #0]
 80100d6:	e7f2      	b.n	80100be <_rclc_check_for_new_data+0x22>
 80100d8:	698a      	ldr	r2, [r1, #24]
 80100da:	e7f0      	b.n	80100be <_rclc_check_for_new_data+0x22>
 80100dc:	688a      	ldr	r2, [r1, #8]
 80100de:	e7ee      	b.n	80100be <_rclc_check_for_new_data+0x22>
 80100e0:	690a      	ldr	r2, [r1, #16]
 80100e2:	e7ec      	b.n	80100be <_rclc_check_for_new_data+0x22>
 80100e4:	685c      	ldr	r4, [r3, #4]
 80100e6:	4608      	mov	r0, r1
 80100e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80100ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100f0:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 80100f4:	f104 0110 	add.w	r1, r4, #16
 80100f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80100fc:	9500      	str	r5, [sp, #0]
 80100fe:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8010102:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8010106:	f004 f987 	bl	8014418 <rcl_action_client_wait_set_get_entities_ready>
 801010a:	e7e1      	b.n	80100d0 <_rclc_check_for_new_data+0x34>
 801010c:	685c      	ldr	r4, [r3, #4]
 801010e:	4608      	mov	r0, r1
 8010110:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 8010114:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8010118:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801011c:	e9cd 2100 	strd	r2, r1, [sp]
 8010120:	f104 0220 	add.w	r2, r4, #32
 8010124:	f104 0110 	add.w	r1, r4, #16
 8010128:	f004 fb90 	bl	801484c <rcl_action_server_wait_set_get_entities_ready>
 801012c:	e7d0      	b.n	80100d0 <_rclc_check_for_new_data+0x34>
 801012e:	200b      	movs	r0, #11
 8010130:	4770      	bx	lr
 8010132:	2001      	movs	r0, #1
 8010134:	e7cc      	b.n	80100d0 <_rclc_check_for_new_data+0x34>
 8010136:	bf00      	nop

08010138 <_rclc_take_new_data>:
 8010138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801013a:	b09b      	sub	sp, #108	@ 0x6c
 801013c:	2800      	cmp	r0, #0
 801013e:	f000 8088 	beq.w	8010252 <_rclc_take_new_data+0x11a>
 8010142:	7803      	ldrb	r3, [r0, #0]
 8010144:	4604      	mov	r4, r0
 8010146:	2b0a      	cmp	r3, #10
 8010148:	f200 8167 	bhi.w	801041a <_rclc_take_new_data+0x2e2>
 801014c:	e8df f003 	tbb	[pc, r3]
 8010150:	44152d2d 	.word	0x44152d2d
 8010154:	19191944 	.word	0x19191944
 8010158:	065a      	.short	0x065a
 801015a:	15          	.byte	0x15
 801015b:	00          	.byte	0x00
 801015c:	6840      	ldr	r0, [r0, #4]
 801015e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010162:	2b00      	cmp	r3, #0
 8010164:	f040 80b2 	bne.w	80102cc <_rclc_take_new_data+0x194>
 8010168:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 801016c:	2b00      	cmp	r3, #0
 801016e:	f040 80e4 	bne.w	801033a <_rclc_take_new_data+0x202>
 8010172:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8010176:	2b00      	cmp	r3, #0
 8010178:	d16f      	bne.n	801025a <_rclc_take_new_data+0x122>
 801017a:	2500      	movs	r5, #0
 801017c:	4628      	mov	r0, r5
 801017e:	b01b      	add	sp, #108	@ 0x6c
 8010180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010182:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010184:	6a0b      	ldr	r3, [r1, #32]
 8010186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d0f5      	beq.n	801017a <_rclc_take_new_data+0x42>
 801018e:	6882      	ldr	r2, [r0, #8]
 8010190:	f100 0110 	add.w	r1, r0, #16
 8010194:	6840      	ldr	r0, [r0, #4]
 8010196:	f002 fdfd 	bl	8012d94 <rcl_take_request>
 801019a:	4605      	mov	r5, r0
 801019c:	2800      	cmp	r0, #0
 801019e:	d0ec      	beq.n	801017a <_rclc_take_new_data+0x42>
 80101a0:	f240 2359 	movw	r3, #601	@ 0x259
 80101a4:	4298      	cmp	r0, r3
 80101a6:	d013      	beq.n	80101d0 <_rclc_take_new_data+0x98>
 80101a8:	e029      	b.n	80101fe <_rclc_take_new_data+0xc6>
 80101aa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80101ac:	680b      	ldr	r3, [r1, #0]
 80101ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d0e1      	beq.n	801017a <_rclc_take_new_data+0x42>
 80101b6:	2300      	movs	r3, #0
 80101b8:	aa0a      	add	r2, sp, #40	@ 0x28
 80101ba:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80101be:	f002 ff2d 	bl	801301c <rcl_take>
 80101c2:	4605      	mov	r5, r0
 80101c4:	2800      	cmp	r0, #0
 80101c6:	d0d9      	beq.n	801017c <_rclc_take_new_data+0x44>
 80101c8:	f240 1391 	movw	r3, #401	@ 0x191
 80101cc:	4298      	cmp	r0, r3
 80101ce:	d116      	bne.n	80101fe <_rclc_take_new_data+0xc6>
 80101d0:	2300      	movs	r3, #0
 80101d2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80101d6:	e7d1      	b.n	801017c <_rclc_take_new_data+0x44>
 80101d8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80101da:	698b      	ldr	r3, [r1, #24]
 80101dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d0ca      	beq.n	801017a <_rclc_take_new_data+0x42>
 80101e4:	6882      	ldr	r2, [r0, #8]
 80101e6:	f100 0110 	add.w	r1, r0, #16
 80101ea:	6840      	ldr	r0, [r0, #4]
 80101ec:	f001 fdb8 	bl	8011d60 <rcl_take_response>
 80101f0:	4605      	mov	r5, r0
 80101f2:	2800      	cmp	r0, #0
 80101f4:	d0c1      	beq.n	801017a <_rclc_take_new_data+0x42>
 80101f6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80101fa:	4298      	cmp	r0, r3
 80101fc:	d0be      	beq.n	801017c <_rclc_take_new_data+0x44>
 80101fe:	f000 ff63 	bl	80110c8 <rcutils_reset_error>
 8010202:	e7bb      	b.n	801017c <_rclc_take_new_data+0x44>
 8010204:	6840      	ldr	r0, [r0, #4]
 8010206:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801020a:	2b00      	cmp	r3, #0
 801020c:	d17d      	bne.n	801030a <_rclc_take_new_data+0x1d2>
 801020e:	69c3      	ldr	r3, [r0, #28]
 8010210:	b11b      	cbz	r3, 801021a <_rclc_take_new_data+0xe2>
 8010212:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010216:	2b00      	cmp	r3, #0
 8010218:	d144      	bne.n	80102a4 <_rclc_take_new_data+0x16c>
 801021a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801021e:	2b00      	cmp	r3, #0
 8010220:	f040 80ac 	bne.w	801037c <_rclc_take_new_data+0x244>
 8010224:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8010228:	2b00      	cmp	r3, #0
 801022a:	d0a6      	beq.n	801017a <_rclc_take_new_data+0x42>
 801022c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801022e:	a90a      	add	r1, sp, #40	@ 0x28
 8010230:	3010      	adds	r0, #16
 8010232:	f003 ffc9 	bl	80141c8 <rcl_action_take_result_response>
 8010236:	4605      	mov	r5, r0
 8010238:	2800      	cmp	r0, #0
 801023a:	d1e0      	bne.n	80101fe <_rclc_take_new_data+0xc6>
 801023c:	6860      	ldr	r0, [r4, #4]
 801023e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010242:	f004 fc33 	bl	8014aac <rclc_action_find_handle_by_result_request_sequence_number>
 8010246:	2800      	cmp	r0, #0
 8010248:	d098      	beq.n	801017c <_rclc_take_new_data+0x44>
 801024a:	2301      	movs	r3, #1
 801024c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8010250:	e794      	b.n	801017c <_rclc_take_new_data+0x44>
 8010252:	250b      	movs	r5, #11
 8010254:	4628      	mov	r0, r5
 8010256:	b01b      	add	sp, #108	@ 0x6c
 8010258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801025a:	ae04      	add	r6, sp, #16
 801025c:	3010      	adds	r0, #16
 801025e:	aa0a      	add	r2, sp, #40	@ 0x28
 8010260:	4631      	mov	r1, r6
 8010262:	f004 fa27 	bl	80146b4 <rcl_action_take_cancel_request>
 8010266:	4605      	mov	r5, r0
 8010268:	2800      	cmp	r0, #0
 801026a:	d1c8      	bne.n	80101fe <_rclc_take_new_data+0xc6>
 801026c:	a90a      	add	r1, sp, #40	@ 0x28
 801026e:	6860      	ldr	r0, [r4, #4]
 8010270:	f004 fbdc 	bl	8014a2c <rclc_action_find_goal_handle_by_uuid>
 8010274:	4607      	mov	r7, r0
 8010276:	2800      	cmp	r0, #0
 8010278:	f000 80bb 	beq.w	80103f2 <_rclc_take_new_data+0x2ba>
 801027c:	2101      	movs	r1, #1
 801027e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8010282:	f004 fb5d 	bl	8014940 <rcl_action_transition_goal_state>
 8010286:	2803      	cmp	r0, #3
 8010288:	4684      	mov	ip, r0
 801028a:	f040 80a7 	bne.w	80103dc <_rclc_take_new_data+0x2a4>
 801028e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8010292:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010296:	e896 0003 	ldmia.w	r6, {r0, r1}
 801029a:	e884 0003 	stmia.w	r4, {r0, r1}
 801029e:	f887 c008 	strb.w	ip, [r7, #8]
 80102a2:	e76b      	b.n	801017c <_rclc_take_new_data+0x44>
 80102a4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80102a6:	3010      	adds	r0, #16
 80102a8:	f004 f80e 	bl	80142c8 <rcl_action_take_feedback>
 80102ac:	4605      	mov	r5, r0
 80102ae:	2800      	cmp	r0, #0
 80102b0:	d1a5      	bne.n	80101fe <_rclc_take_new_data+0xc6>
 80102b2:	6860      	ldr	r0, [r4, #4]
 80102b4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80102b6:	f004 fbb9 	bl	8014a2c <rclc_action_find_goal_handle_by_uuid>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2800      	cmp	r0, #0
 80102be:	f000 80a3 	beq.w	8010408 <_rclc_take_new_data+0x2d0>
 80102c2:	2201      	movs	r2, #1
 80102c4:	6860      	ldr	r0, [r4, #4]
 80102c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80102ca:	e7a6      	b.n	801021a <_rclc_take_new_data+0xe2>
 80102cc:	f004 fb88 	bl	80149e0 <rclc_action_take_goal_handle>
 80102d0:	4606      	mov	r6, r0
 80102d2:	6860      	ldr	r0, [r4, #4]
 80102d4:	2e00      	cmp	r6, #0
 80102d6:	f43f af47 	beq.w	8010168 <_rclc_take_new_data+0x30>
 80102da:	6070      	str	r0, [r6, #4]
 80102dc:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80102e0:	69f2      	ldr	r2, [r6, #28]
 80102e2:	3010      	adds	r0, #16
 80102e4:	f004 f92e 	bl	8014544 <rcl_action_take_goal_request>
 80102e8:	4605      	mov	r5, r0
 80102ea:	2800      	cmp	r0, #0
 80102ec:	f040 808e 	bne.w	801040c <_rclc_take_new_data+0x2d4>
 80102f0:	69f7      	ldr	r7, [r6, #28]
 80102f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80102f4:	7235      	strb	r5, [r6, #8]
 80102f6:	f8c6 0009 	str.w	r0, [r6, #9]
 80102fa:	f8c6 100d 	str.w	r1, [r6, #13]
 80102fe:	6860      	ldr	r0, [r4, #4]
 8010300:	f8c6 2011 	str.w	r2, [r6, #17]
 8010304:	f8c6 3015 	str.w	r3, [r6, #21]
 8010308:	e72e      	b.n	8010168 <_rclc_take_new_data+0x30>
 801030a:	aa04      	add	r2, sp, #16
 801030c:	a90a      	add	r1, sp, #40	@ 0x28
 801030e:	3010      	adds	r0, #16
 8010310:	f003 fee2 	bl	80140d8 <rcl_action_take_goal_response>
 8010314:	4605      	mov	r5, r0
 8010316:	2800      	cmp	r0, #0
 8010318:	f47f af71 	bne.w	80101fe <_rclc_take_new_data+0xc6>
 801031c:	6860      	ldr	r0, [r4, #4]
 801031e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010322:	f004 fbb1 	bl	8014a88 <rclc_action_find_handle_by_goal_request_sequence_number>
 8010326:	b130      	cbz	r0, 8010336 <_rclc_take_new_data+0x1fe>
 8010328:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801032c:	2201      	movs	r2, #1
 801032e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010332:	f880 2020 	strb.w	r2, [r0, #32]
 8010336:	6860      	ldr	r0, [r4, #4]
 8010338:	e769      	b.n	801020e <_rclc_take_new_data+0xd6>
 801033a:	3010      	adds	r0, #16
 801033c:	aa04      	add	r2, sp, #16
 801033e:	a90a      	add	r1, sp, #40	@ 0x28
 8010340:	f004 f978 	bl	8014634 <rcl_action_take_result_request>
 8010344:	4605      	mov	r5, r0
 8010346:	2800      	cmp	r0, #0
 8010348:	f47f af59 	bne.w	80101fe <_rclc_take_new_data+0xc6>
 801034c:	a904      	add	r1, sp, #16
 801034e:	6860      	ldr	r0, [r4, #4]
 8010350:	f004 fb6c 	bl	8014a2c <rclc_action_find_goal_handle_by_uuid>
 8010354:	4607      	mov	r7, r0
 8010356:	b160      	cbz	r0, 8010372 <_rclc_take_new_data+0x23a>
 8010358:	ad0a      	add	r5, sp, #40	@ 0x28
 801035a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801035e:	f04f 0c02 	mov.w	ip, #2
 8010362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010364:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010366:	e895 0003 	ldmia.w	r5, {r0, r1}
 801036a:	e886 0003 	stmia.w	r6, {r0, r1}
 801036e:	f887 c008 	strb.w	ip, [r7, #8]
 8010372:	6860      	ldr	r0, [r4, #4]
 8010374:	2300      	movs	r3, #0
 8010376:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 801037a:	e6fa      	b.n	8010172 <_rclc_take_new_data+0x3a>
 801037c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8010380:	a90a      	add	r1, sp, #40	@ 0x28
 8010382:	3010      	adds	r0, #16
 8010384:	f003 ff60 	bl	8014248 <rcl_action_take_cancel_response>
 8010388:	4605      	mov	r5, r0
 801038a:	2800      	cmp	r0, #0
 801038c:	f47f af37 	bne.w	80101fe <_rclc_take_new_data+0xc6>
 8010390:	6860      	ldr	r0, [r4, #4]
 8010392:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010396:	f004 fb9b 	bl	8014ad0 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801039a:	4606      	mov	r6, r0
 801039c:	6860      	ldr	r0, [r4, #4]
 801039e:	2e00      	cmp	r6, #0
 80103a0:	f43f af40 	beq.w	8010224 <_rclc_take_new_data+0xec>
 80103a4:	2701      	movs	r7, #1
 80103a6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80103a8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	f43f af3a 	beq.w	8010224 <_rclc_take_new_data+0xec>
 80103b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80103b2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80103b6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80103ba:	f004 fb37 	bl	8014a2c <rclc_action_find_goal_handle_by_uuid>
 80103be:	b138      	cbz	r0, 80103d0 <_rclc_take_new_data+0x298>
 80103c0:	6860      	ldr	r0, [r4, #4]
 80103c2:	3501      	adds	r5, #1
 80103c4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80103c8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80103ca:	42ab      	cmp	r3, r5
 80103cc:	d8f0      	bhi.n	80103b0 <_rclc_take_new_data+0x278>
 80103ce:	e729      	b.n	8010224 <_rclc_take_new_data+0xec>
 80103d0:	6860      	ldr	r0, [r4, #4]
 80103d2:	3501      	adds	r5, #1
 80103d4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80103d6:	42ab      	cmp	r3, r5
 80103d8:	d8ea      	bhi.n	80103b0 <_rclc_take_new_data+0x278>
 80103da:	e723      	b.n	8010224 <_rclc_take_new_data+0xec>
 80103dc:	ab06      	add	r3, sp, #24
 80103de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80103e4:	2103      	movs	r1, #3
 80103e6:	6860      	ldr	r0, [r4, #4]
 80103e8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80103ec:	f004 fbe4 	bl	8014bb8 <rclc_action_server_goal_cancel_reject>
 80103f0:	e6c4      	b.n	801017c <_rclc_take_new_data+0x44>
 80103f2:	ab06      	add	r3, sp, #24
 80103f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80103fa:	2102      	movs	r1, #2
 80103fc:	6860      	ldr	r0, [r4, #4]
 80103fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010402:	f004 fbd9 	bl	8014bb8 <rclc_action_server_goal_cancel_reject>
 8010406:	e6b9      	b.n	801017c <_rclc_take_new_data+0x44>
 8010408:	6860      	ldr	r0, [r4, #4]
 801040a:	e706      	b.n	801021a <_rclc_take_new_data+0xe2>
 801040c:	4631      	mov	r1, r6
 801040e:	6860      	ldr	r0, [r4, #4]
 8010410:	f004 faf6 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 8010414:	f000 fe58 	bl	80110c8 <rcutils_reset_error>
 8010418:	e6b0      	b.n	801017c <_rclc_take_new_data+0x44>
 801041a:	2501      	movs	r5, #1
 801041c:	e6ae      	b.n	801017c <_rclc_take_new_data+0x44>
 801041e:	bf00      	nop

08010420 <_rclc_execute.part.0>:
 8010420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010422:	7803      	ldrb	r3, [r0, #0]
 8010424:	b085      	sub	sp, #20
 8010426:	4604      	mov	r4, r0
 8010428:	2b0a      	cmp	r3, #10
 801042a:	f200 8139 	bhi.w	80106a0 <_rclc_execute.part.0+0x280>
 801042e:	e8df f003 	tbb	[pc, r3]
 8010432:	4268      	.short	0x4268
 8010434:	06a75b4d 	.word	0x06a75b4d
 8010438:	721d0606 	.word	0x721d0606
 801043c:	62          	.byte	0x62
 801043d:	00          	.byte	0x00
 801043e:	2b06      	cmp	r3, #6
 8010440:	f000 8126 	beq.w	8010690 <_rclc_execute.part.0+0x270>
 8010444:	2b07      	cmp	r3, #7
 8010446:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010448:	f040 811c 	bne.w	8010684 <_rclc_execute.part.0+0x264>
 801044c:	f104 0510 	add.w	r5, r4, #16
 8010450:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8010454:	6880      	ldr	r0, [r0, #8]
 8010456:	4798      	blx	r3
 8010458:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801045a:	4629      	mov	r1, r5
 801045c:	6860      	ldr	r0, [r4, #4]
 801045e:	f002 fcd9 	bl	8012e14 <rcl_send_response>
 8010462:	4604      	mov	r4, r0
 8010464:	b378      	cbz	r0, 80104c6 <_rclc_execute.part.0+0xa6>
 8010466:	f000 fe2f 	bl	80110c8 <rcutils_reset_error>
 801046a:	e02c      	b.n	80104c6 <_rclc_execute.part.0+0xa6>
 801046c:	6840      	ldr	r0, [r0, #4]
 801046e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 808e 	beq.w	8010594 <_rclc_execute.part.0+0x174>
 8010478:	2600      	movs	r6, #0
 801047a:	2701      	movs	r7, #1
 801047c:	e004      	b.n	8010488 <_rclc_execute.part.0+0x68>
 801047e:	f004 fa89 	bl	8014994 <rclc_action_send_result_request>
 8010482:	b998      	cbnz	r0, 80104ac <_rclc_execute.part.0+0x8c>
 8010484:	722f      	strb	r7, [r5, #8]
 8010486:	6860      	ldr	r0, [r4, #4]
 8010488:	f004 fb34 	bl	8014af4 <rclc_action_find_first_handle_with_goal_response>
 801048c:	4605      	mov	r5, r0
 801048e:	2800      	cmp	r0, #0
 8010490:	d07f      	beq.n	8010592 <_rclc_execute.part.0+0x172>
 8010492:	6863      	ldr	r3, [r4, #4]
 8010494:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010496:	699b      	ldr	r3, [r3, #24]
 8010498:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 801049c:	f885 6020 	strb.w	r6, [r5, #32]
 80104a0:	4798      	blx	r3
 80104a2:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80104a6:	4628      	mov	r0, r5
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1e8      	bne.n	801047e <_rclc_execute.part.0+0x5e>
 80104ac:	6860      	ldr	r0, [r4, #4]
 80104ae:	4629      	mov	r1, r5
 80104b0:	f004 faa6 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 80104b4:	e7e7      	b.n	8010486 <_rclc_execute.part.0+0x66>
 80104b6:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80104ba:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 80104be:	b100      	cbz	r0, 80104c2 <_rclc_execute.part.0+0xa2>
 80104c0:	68a0      	ldr	r0, [r4, #8]
 80104c2:	2400      	movs	r4, #0
 80104c4:	4798      	blx	r3
 80104c6:	4620      	mov	r0, r4
 80104c8:	b005      	add	sp, #20
 80104ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104cc:	6840      	ldr	r0, [r0, #4]
 80104ce:	f002 feb9 	bl	8013244 <rcl_timer_call>
 80104d2:	f240 3321 	movw	r3, #801	@ 0x321
 80104d6:	4604      	mov	r4, r0
 80104d8:	4298      	cmp	r0, r3
 80104da:	d001      	beq.n	80104e0 <_rclc_execute.part.0+0xc0>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d1c2      	bne.n	8010466 <_rclc_execute.part.0+0x46>
 80104e0:	2400      	movs	r4, #0
 80104e2:	4620      	mov	r0, r4
 80104e4:	b005      	add	sp, #20
 80104e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104e8:	2400      	movs	r4, #0
 80104ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80104ec:	6880      	ldr	r0, [r0, #8]
 80104ee:	4798      	blx	r3
 80104f0:	4620      	mov	r0, r4
 80104f2:	b005      	add	sp, #20
 80104f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f6:	2400      	movs	r4, #0
 80104f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80104fa:	4798      	blx	r3
 80104fc:	4620      	mov	r0, r4
 80104fe:	b005      	add	sp, #20
 8010500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010502:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8010506:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010508:	b100      	cbz	r0, 801050c <_rclc_execute.part.0+0xec>
 801050a:	68a0      	ldr	r0, [r4, #8]
 801050c:	2400      	movs	r4, #0
 801050e:	4798      	blx	r3
 8010510:	4620      	mov	r0, r4
 8010512:	b005      	add	sp, #20
 8010514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010516:	6840      	ldr	r0, [r0, #4]
 8010518:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801051c:	bb3b      	cbnz	r3, 801056e <_rclc_execute.part.0+0x14e>
 801051e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d07d      	beq.n	8010622 <_rclc_execute.part.0+0x202>
 8010526:	f640 0634 	movw	r6, #2100	@ 0x834
 801052a:	2701      	movs	r7, #1
 801052c:	e007      	b.n	801053e <_rclc_execute.part.0+0x11e>
 801052e:	4628      	mov	r0, r5
 8010530:	f004 faf8 	bl	8014b24 <rclc_action_server_response_goal_request>
 8010534:	4629      	mov	r1, r5
 8010536:	6860      	ldr	r0, [r4, #4]
 8010538:	f004 fa62 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 801053c:	6860      	ldr	r0, [r4, #4]
 801053e:	2100      	movs	r1, #0
 8010540:	f004 fa8a 	bl	8014a58 <rclc_action_find_first_handle_by_status>
 8010544:	4605      	mov	r5, r0
 8010546:	2800      	cmp	r0, #0
 8010548:	d068      	beq.n	801061c <_rclc_execute.part.0+0x1fc>
 801054a:	6863      	ldr	r3, [r4, #4]
 801054c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801054e:	699b      	ldr	r3, [r3, #24]
 8010550:	4798      	blx	r3
 8010552:	42b0      	cmp	r0, r6
 8010554:	f04f 0100 	mov.w	r1, #0
 8010558:	d1e9      	bne.n	801052e <_rclc_execute.part.0+0x10e>
 801055a:	2101      	movs	r1, #1
 801055c:	4628      	mov	r0, r5
 801055e:	f004 fae1 	bl	8014b24 <rclc_action_server_response_goal_request>
 8010562:	722f      	strb	r7, [r5, #8]
 8010564:	e7ea      	b.n	801053c <_rclc_execute.part.0+0x11c>
 8010566:	6848      	ldr	r0, [r1, #4]
 8010568:	f004 fa4a 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 801056c:	6860      	ldr	r0, [r4, #4]
 801056e:	f004 fa7f 	bl	8014a70 <rclc_action_find_first_terminated_handle>
 8010572:	4601      	mov	r1, r0
 8010574:	2800      	cmp	r0, #0
 8010576:	d1f6      	bne.n	8010566 <_rclc_execute.part.0+0x146>
 8010578:	6860      	ldr	r0, [r4, #4]
 801057a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801057e:	e7ce      	b.n	801051e <_rclc_execute.part.0+0xfe>
 8010580:	2400      	movs	r4, #0
 8010582:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010584:	f100 0110 	add.w	r1, r0, #16
 8010588:	6880      	ldr	r0, [r0, #8]
 801058a:	4798      	blx	r3
 801058c:	4620      	mov	r0, r4
 801058e:	b005      	add	sp, #20
 8010590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010592:	6860      	ldr	r0, [r4, #4]
 8010594:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010598:	b18b      	cbz	r3, 80105be <_rclc_execute.part.0+0x19e>
 801059a:	68c5      	ldr	r5, [r0, #12]
 801059c:	b32d      	cbz	r5, 80105ea <_rclc_execute.part.0+0x1ca>
 801059e:	2600      	movs	r6, #0
 80105a0:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80105a4:	b143      	cbz	r3, 80105b8 <_rclc_execute.part.0+0x198>
 80105a6:	69c3      	ldr	r3, [r0, #28]
 80105a8:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80105ac:	b123      	cbz	r3, 80105b8 <_rclc_execute.part.0+0x198>
 80105ae:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80105b0:	4628      	mov	r0, r5
 80105b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80105b4:	4798      	blx	r3
 80105b6:	6860      	ldr	r0, [r4, #4]
 80105b8:	682d      	ldr	r5, [r5, #0]
 80105ba:	2d00      	cmp	r5, #0
 80105bc:	d1f0      	bne.n	80105a0 <_rclc_execute.part.0+0x180>
 80105be:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80105c2:	b193      	cbz	r3, 80105ea <_rclc_execute.part.0+0x1ca>
 80105c4:	68c5      	ldr	r5, [r0, #12]
 80105c6:	b185      	cbz	r5, 80105ea <_rclc_execute.part.0+0x1ca>
 80105c8:	2600      	movs	r6, #0
 80105ca:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80105ce:	b14b      	cbz	r3, 80105e4 <_rclc_execute.part.0+0x1c4>
 80105d0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80105d2:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80105d6:	b12b      	cbz	r3, 80105e4 <_rclc_execute.part.0+0x1c4>
 80105d8:	4628      	mov	r0, r5
 80105da:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80105de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80105e0:	4798      	blx	r3
 80105e2:	6860      	ldr	r0, [r4, #4]
 80105e4:	682d      	ldr	r5, [r5, #0]
 80105e6:	2d00      	cmp	r5, #0
 80105e8:	d1ef      	bne.n	80105ca <_rclc_execute.part.0+0x1aa>
 80105ea:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f43f af76 	beq.w	80104e0 <_rclc_execute.part.0+0xc0>
 80105f4:	2700      	movs	r7, #0
 80105f6:	e00b      	b.n	8010610 <_rclc_execute.part.0+0x1f0>
 80105f8:	6863      	ldr	r3, [r4, #4]
 80105fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80105fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80105fe:	6a1e      	ldr	r6, [r3, #32]
 8010600:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8010604:	47b0      	blx	r6
 8010606:	6860      	ldr	r0, [r4, #4]
 8010608:	4629      	mov	r1, r5
 801060a:	f004 f9f9 	bl	8014a00 <rclc_action_remove_used_goal_handle>
 801060e:	6860      	ldr	r0, [r4, #4]
 8010610:	f004 fa7c 	bl	8014b0c <rclc_action_find_first_handle_with_result_response>
 8010614:	4605      	mov	r5, r0
 8010616:	2800      	cmp	r0, #0
 8010618:	d1ee      	bne.n	80105f8 <_rclc_execute.part.0+0x1d8>
 801061a:	e761      	b.n	80104e0 <_rclc_execute.part.0+0xc0>
 801061c:	6860      	ldr	r0, [r4, #4]
 801061e:	f880 5020 	strb.w	r5, [r0, #32]
 8010622:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8010626:	2b00      	cmp	r3, #0
 8010628:	f43f af5a 	beq.w	80104e0 <_rclc_execute.part.0+0xc0>
 801062c:	68c5      	ldr	r5, [r0, #12]
 801062e:	b1b5      	cbz	r5, 801065e <_rclc_execute.part.0+0x23e>
 8010630:	2602      	movs	r6, #2
 8010632:	e001      	b.n	8010638 <_rclc_execute.part.0+0x218>
 8010634:	682d      	ldr	r5, [r5, #0]
 8010636:	b195      	cbz	r5, 801065e <_rclc_execute.part.0+0x23e>
 8010638:	f995 3008 	ldrsb.w	r3, [r5, #8]
 801063c:	2b03      	cmp	r3, #3
 801063e:	d1f9      	bne.n	8010634 <_rclc_execute.part.0+0x214>
 8010640:	69c3      	ldr	r3, [r0, #28]
 8010642:	4628      	mov	r0, r5
 8010644:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010646:	4798      	blx	r3
 8010648:	4603      	mov	r3, r0
 801064a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 801064e:	4628      	mov	r0, r5
 8010650:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010654:	b143      	cbz	r3, 8010668 <_rclc_execute.part.0+0x248>
 8010656:	f004 fa83 	bl	8014b60 <rclc_action_server_goal_cancel_accept>
 801065a:	6860      	ldr	r0, [r4, #4]
 801065c:	e7ea      	b.n	8010634 <_rclc_execute.part.0+0x214>
 801065e:	2300      	movs	r3, #0
 8010660:	461c      	mov	r4, r3
 8010662:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010666:	e72e      	b.n	80104c6 <_rclc_execute.part.0+0xa6>
 8010668:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801066a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 801066e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010672:	2101      	movs	r1, #1
 8010674:	6860      	ldr	r0, [r4, #4]
 8010676:	e9d7 2300 	ldrd	r2, r3, [r7]
 801067a:	f004 fa9d 	bl	8014bb8 <rclc_action_server_goal_cancel_reject>
 801067e:	722e      	strb	r6, [r5, #8]
 8010680:	6860      	ldr	r0, [r4, #4]
 8010682:	e7d7      	b.n	8010634 <_rclc_execute.part.0+0x214>
 8010684:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010686:	f104 0510 	add.w	r5, r4, #16
 801068a:	6880      	ldr	r0, [r0, #8]
 801068c:	4798      	blx	r3
 801068e:	e6e3      	b.n	8010458 <_rclc_execute.part.0+0x38>
 8010690:	f100 0510 	add.w	r5, r0, #16
 8010694:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010696:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8010698:	4629      	mov	r1, r5
 801069a:	6880      	ldr	r0, [r0, #8]
 801069c:	4798      	blx	r3
 801069e:	e6db      	b.n	8010458 <_rclc_execute.part.0+0x38>
 80106a0:	2401      	movs	r4, #1
 80106a2:	e710      	b.n	80104c6 <_rclc_execute.part.0+0xa6>

080106a4 <rclc_executor_trigger_any>:
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d03d      	beq.n	8010724 <rclc_executor_trigger_any+0x80>
 80106a8:	2900      	cmp	r1, #0
 80106aa:	d03c      	beq.n	8010726 <rclc_executor_trigger_any+0x82>
 80106ac:	4603      	mov	r3, r0
 80106ae:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80106b2:	2200      	movs	r2, #0
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d035      	beq.n	8010724 <rclc_executor_trigger_any+0x80>
 80106b8:	b430      	push	{r4, r5}
 80106ba:	f893 c000 	ldrb.w	ip, [r3]
 80106be:	f1bc 0f08 	cmp.w	ip, #8
 80106c2:	d11d      	bne.n	8010700 <rclc_executor_trigger_any+0x5c>
 80106c4:	685c      	ldr	r4, [r3, #4]
 80106c6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80106c8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 80106cc:	d105      	bne.n	80106da <rclc_executor_trigger_any+0x36>
 80106ce:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80106d2:	b910      	cbnz	r0, 80106da <rclc_executor_trigger_any+0x36>
 80106d4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 80106d8:	b128      	cbz	r0, 80106e6 <rclc_executor_trigger_any+0x42>
 80106da:	bc30      	pop	{r4, r5}
 80106dc:	4770      	bx	lr
 80106de:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80106e2:	2800      	cmp	r0, #0
 80106e4:	d1f9      	bne.n	80106da <rclc_executor_trigger_any+0x36>
 80106e6:	3201      	adds	r2, #1
 80106e8:	3340      	adds	r3, #64	@ 0x40
 80106ea:	4291      	cmp	r1, r2
 80106ec:	d017      	beq.n	801071e <rclc_executor_trigger_any+0x7a>
 80106ee:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d0f1      	beq.n	80106da <rclc_executor_trigger_any+0x36>
 80106f6:	f893 c000 	ldrb.w	ip, [r3]
 80106fa:	f1bc 0f08 	cmp.w	ip, #8
 80106fe:	d0e1      	beq.n	80106c4 <rclc_executor_trigger_any+0x20>
 8010700:	f1bc 0f09 	cmp.w	ip, #9
 8010704:	d1eb      	bne.n	80106de <rclc_executor_trigger_any+0x3a>
 8010706:	685c      	ldr	r4, [r3, #4]
 8010708:	6a25      	ldr	r5, [r4, #32]
 801070a:	2d00      	cmp	r5, #0
 801070c:	d1e5      	bne.n	80106da <rclc_executor_trigger_any+0x36>
 801070e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8010712:	2800      	cmp	r0, #0
 8010714:	d1e1      	bne.n	80106da <rclc_executor_trigger_any+0x36>
 8010716:	3201      	adds	r2, #1
 8010718:	3340      	adds	r3, #64	@ 0x40
 801071a:	4291      	cmp	r1, r2
 801071c:	d1e7      	bne.n	80106ee <rclc_executor_trigger_any+0x4a>
 801071e:	2000      	movs	r0, #0
 8010720:	bc30      	pop	{r4, r5}
 8010722:	4770      	bx	lr
 8010724:	4770      	bx	lr
 8010726:	4608      	mov	r0, r1
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop

0801072c <rclc_executor_get_zero_initialized_executor>:
 801072c:	b510      	push	{r4, lr}
 801072e:	4604      	mov	r4, r0
 8010730:	2288      	movs	r2, #136	@ 0x88
 8010732:	4902      	ldr	r1, [pc, #8]	@ (801073c <rclc_executor_get_zero_initialized_executor+0x10>)
 8010734:	f00c ff05 	bl	801d542 <memcpy>
 8010738:	4620      	mov	r0, r4
 801073a:	bd10      	pop	{r4, pc}
 801073c:	0801f6f0 	.word	0x0801f6f0

08010740 <rclc_executor_init>:
 8010740:	2900      	cmp	r1, #0
 8010742:	d06a      	beq.n	801081a <rclc_executor_init+0xda>
 8010744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010748:	4605      	mov	r5, r0
 801074a:	b0b0      	sub	sp, #192	@ 0xc0
 801074c:	2800      	cmp	r0, #0
 801074e:	d05c      	beq.n	801080a <rclc_executor_init+0xca>
 8010750:	4616      	mov	r6, r2
 8010752:	4618      	mov	r0, r3
 8010754:	4688      	mov	r8, r1
 8010756:	461f      	mov	r7, r3
 8010758:	f000 fc92 	bl	8011080 <rcutils_allocator_is_valid>
 801075c:	2e00      	cmp	r6, #0
 801075e:	d054      	beq.n	801080a <rclc_executor_init+0xca>
 8010760:	f080 0401 	eor.w	r4, r0, #1
 8010764:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8010768:	d14f      	bne.n	801080a <rclc_executor_init+0xca>
 801076a:	2288      	movs	r2, #136	@ 0x88
 801076c:	4930      	ldr	r1, [pc, #192]	@ (8010830 <rclc_executor_init+0xf0>)
 801076e:	a80e      	add	r0, sp, #56	@ 0x38
 8010770:	f00c fee7 	bl	801d542 <memcpy>
 8010774:	a90e      	add	r1, sp, #56	@ 0x38
 8010776:	2288      	movs	r2, #136	@ 0x88
 8010778:	4628      	mov	r0, r5
 801077a:	f00c fee2 	bl	801d542 <memcpy>
 801077e:	4668      	mov	r0, sp
 8010780:	f8c5 8000 	str.w	r8, [r5]
 8010784:	60ae      	str	r6, [r5, #8]
 8010786:	f002 fed3 	bl	8013530 <rcl_get_zero_initialized_wait_set>
 801078a:	46ec      	mov	ip, sp
 801078c:	f105 0e14 	add.w	lr, r5, #20
 8010790:	f8d7 8000 	ldr.w	r8, [r7]
 8010794:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010798:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801079c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80107a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107a8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8010828 <rclc_executor_init+0xe8>
 80107ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80107b0:	f8dc 3000 	ldr.w	r3, [ip]
 80107b4:	01b0      	lsls	r0, r6, #6
 80107b6:	6939      	ldr	r1, [r7, #16]
 80107b8:	f8ce 3000 	str.w	r3, [lr]
 80107bc:	612f      	str	r7, [r5, #16]
 80107be:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 80107c2:	47c0      	blx	r8
 80107c4:	6068      	str	r0, [r5, #4]
 80107c6:	b908      	cbnz	r0, 80107cc <rclc_executor_init+0x8c>
 80107c8:	e029      	b.n	801081e <rclc_executor_init+0xde>
 80107ca:	6868      	ldr	r0, [r5, #4]
 80107cc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80107d0:	3401      	adds	r4, #1
 80107d2:	4631      	mov	r1, r6
 80107d4:	f000 fac0 	bl	8010d58 <rclc_executor_handle_init>
 80107d8:	42a6      	cmp	r6, r4
 80107da:	d8f6      	bhi.n	80107ca <rclc_executor_init+0x8a>
 80107dc:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80107e0:	f000 faae 	bl	8010d40 <rclc_executor_handle_counters_zero_init>
 80107e4:	4a13      	ldr	r2, [pc, #76]	@ (8010834 <rclc_executor_init+0xf4>)
 80107e6:	2300      	movs	r3, #0
 80107e8:	6868      	ldr	r0, [r5, #4]
 80107ea:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 80107ee:	b168      	cbz	r0, 801080c <rclc_executor_init+0xcc>
 80107f0:	68ab      	ldr	r3, [r5, #8]
 80107f2:	b173      	cbz	r3, 8010812 <rclc_executor_init+0xd2>
 80107f4:	692a      	ldr	r2, [r5, #16]
 80107f6:	fab2 f382 	clz	r3, r2
 80107fa:	095b      	lsrs	r3, r3, #5
 80107fc:	b14a      	cbz	r2, 8010812 <rclc_executor_init+0xd2>
 80107fe:	4618      	mov	r0, r3
 8010800:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8010804:	b030      	add	sp, #192	@ 0xc0
 8010806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801080a:	200b      	movs	r0, #11
 801080c:	b030      	add	sp, #192	@ 0xc0
 801080e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010812:	2000      	movs	r0, #0
 8010814:	b030      	add	sp, #192	@ 0xc0
 8010816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081a:	200b      	movs	r0, #11
 801081c:	4770      	bx	lr
 801081e:	200a      	movs	r0, #10
 8010820:	e7f4      	b.n	801080c <rclc_executor_init+0xcc>
 8010822:	bf00      	nop
 8010824:	f3af 8000 	nop.w
 8010828:	3b9aca00 	.word	0x3b9aca00
 801082c:	00000000 	.word	0x00000000
 8010830:	0801f6f0 	.word	0x0801f6f0
 8010834:	080106a5 	.word	0x080106a5

08010838 <rclc_executor_add_subscription>:
 8010838:	2b00      	cmp	r3, #0
 801083a:	bf18      	it	ne
 801083c:	2a00      	cmpne	r2, #0
 801083e:	b570      	push	{r4, r5, r6, lr}
 8010840:	4604      	mov	r4, r0
 8010842:	bf0c      	ite	eq
 8010844:	2001      	moveq	r0, #1
 8010846:	2000      	movne	r0, #0
 8010848:	f89d c010 	ldrb.w	ip, [sp, #16]
 801084c:	2900      	cmp	r1, #0
 801084e:	bf08      	it	eq
 8010850:	f040 0001 	orreq.w	r0, r0, #1
 8010854:	bb28      	cbnz	r0, 80108a2 <rclc_executor_add_subscription+0x6a>
 8010856:	fab4 f584 	clz	r5, r4
 801085a:	096d      	lsrs	r5, r5, #5
 801085c:	b30c      	cbz	r4, 80108a2 <rclc_executor_add_subscription+0x6a>
 801085e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8010862:	4286      	cmp	r6, r0
 8010864:	d301      	bcc.n	801086a <rclc_executor_add_subscription+0x32>
 8010866:	2001      	movs	r0, #1
 8010868:	bd70      	pop	{r4, r5, r6, pc}
 801086a:	6860      	ldr	r0, [r4, #4]
 801086c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8010870:	f800 500e 	strb.w	r5, [r0, lr]
 8010874:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8010878:	3601      	adds	r6, #1
 801087a:	6303      	str	r3, [r0, #48]	@ 0x30
 801087c:	2301      	movs	r3, #1
 801087e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8010880:	f104 0514 	add.w	r5, r4, #20
 8010884:	f880 c001 	strb.w	ip, [r0, #1]
 8010888:	8703      	strh	r3, [r0, #56]	@ 0x38
 801088a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801088e:	4628      	mov	r0, r5
 8010890:	60e6      	str	r6, [r4, #12]
 8010892:	f002 fe61 	bl	8013558 <rcl_wait_set_is_valid>
 8010896:	b930      	cbnz	r0, 80108a6 <rclc_executor_add_subscription+0x6e>
 8010898:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801089a:	2000      	movs	r0, #0
 801089c:	3301      	adds	r3, #1
 801089e:	64a3      	str	r3, [r4, #72]	@ 0x48
 80108a0:	bd70      	pop	{r4, r5, r6, pc}
 80108a2:	200b      	movs	r0, #11
 80108a4:	bd70      	pop	{r4, r5, r6, pc}
 80108a6:	4628      	mov	r0, r5
 80108a8:	f002 fe5c 	bl	8013564 <rcl_wait_set_fini>
 80108ac:	2800      	cmp	r0, #0
 80108ae:	d0f3      	beq.n	8010898 <rclc_executor_add_subscription+0x60>
 80108b0:	bd70      	pop	{r4, r5, r6, pc}
 80108b2:	bf00      	nop

080108b4 <rclc_executor_add_service>:
 80108b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b6:	9d06      	ldr	r5, [sp, #24]
 80108b8:	4604      	mov	r4, r0
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	bf18      	it	ne
 80108be:	2d00      	cmpne	r5, #0
 80108c0:	bf0c      	ite	eq
 80108c2:	2001      	moveq	r0, #1
 80108c4:	2000      	movne	r0, #0
 80108c6:	2a00      	cmp	r2, #0
 80108c8:	bf08      	it	eq
 80108ca:	f040 0001 	orreq.w	r0, r0, #1
 80108ce:	2900      	cmp	r1, #0
 80108d0:	bf08      	it	eq
 80108d2:	f040 0001 	orreq.w	r0, r0, #1
 80108d6:	bb40      	cbnz	r0, 801092a <rclc_executor_add_service+0x76>
 80108d8:	fab4 f684 	clz	r6, r4
 80108dc:	0976      	lsrs	r6, r6, #5
 80108de:	b324      	cbz	r4, 801092a <rclc_executor_add_service+0x76>
 80108e0:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 80108e4:	42b8      	cmp	r0, r7
 80108e6:	d301      	bcc.n	80108ec <rclc_executor_add_service+0x38>
 80108e8:	2001      	movs	r0, #1
 80108ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ec:	6867      	ldr	r7, [r4, #4]
 80108ee:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 80108f2:	f100 0c01 	add.w	ip, r0, #1
 80108f6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 80108fa:	6283      	str	r3, [r0, #40]	@ 0x28
 80108fc:	2305      	movs	r3, #5
 80108fe:	6305      	str	r5, [r0, #48]	@ 0x30
 8010900:	f104 0514 	add.w	r5, r4, #20
 8010904:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8010908:	f827 300e 	strh.w	r3, [r7, lr]
 801090c:	2301      	movs	r3, #1
 801090e:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8010910:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8010914:	4628      	mov	r0, r5
 8010916:	f8c4 c00c 	str.w	ip, [r4, #12]
 801091a:	f002 fe1d 	bl	8013558 <rcl_wait_set_is_valid>
 801091e:	b930      	cbnz	r0, 801092e <rclc_executor_add_service+0x7a>
 8010920:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010922:	2000      	movs	r0, #0
 8010924:	3301      	adds	r3, #1
 8010926:	6563      	str	r3, [r4, #84]	@ 0x54
 8010928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801092a:	200b      	movs	r0, #11
 801092c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801092e:	4628      	mov	r0, r5
 8010930:	f002 fe18 	bl	8013564 <rcl_wait_set_fini>
 8010934:	2800      	cmp	r0, #0
 8010936:	d0f3      	beq.n	8010920 <rclc_executor_add_service+0x6c>
 8010938:	e7d7      	b.n	80108ea <rclc_executor_add_service+0x36>
 801093a:	bf00      	nop

0801093c <rclc_executor_prepare>:
 801093c:	2800      	cmp	r0, #0
 801093e:	d044      	beq.n	80109ca <rclc_executor_prepare+0x8e>
 8010940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010942:	f100 0514 	add.w	r5, r0, #20
 8010946:	b09b      	sub	sp, #108	@ 0x6c
 8010948:	4604      	mov	r4, r0
 801094a:	4628      	mov	r0, r5
 801094c:	f002 fe04 	bl	8013558 <rcl_wait_set_is_valid>
 8010950:	b110      	cbz	r0, 8010958 <rclc_executor_prepare+0x1c>
 8010952:	2000      	movs	r0, #0
 8010954:	b01b      	add	sp, #108	@ 0x6c
 8010956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010958:	4628      	mov	r0, r5
 801095a:	f002 fe03 	bl	8013564 <rcl_wait_set_fini>
 801095e:	2800      	cmp	r0, #0
 8010960:	d130      	bne.n	80109c4 <rclc_executor_prepare+0x88>
 8010962:	a80c      	add	r0, sp, #48	@ 0x30
 8010964:	ae04      	add	r6, sp, #16
 8010966:	f002 fde3 	bl	8013530 <rcl_get_zero_initialized_wait_set>
 801096a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801096e:	46ae      	mov	lr, r5
 8010970:	6927      	ldr	r7, [r4, #16]
 8010972:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010976:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801097a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801097e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010982:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010986:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801098a:	f8dc 3000 	ldr.w	r3, [ip]
 801098e:	f8ce 3000 	str.w	r3, [lr]
 8010992:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010994:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	4628      	mov	r0, r5
 801099a:	6822      	ldr	r2, [r4, #0]
 801099c:	6033      	str	r3, [r6, #0]
 801099e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80109a0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80109a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80109a6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80109aa:	e9cd 2100 	strd	r2, r1, [sp]
 80109ae:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80109b0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80109b2:	f003 f8d7 	bl	8013b64 <rcl_wait_set_init>
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d0cc      	beq.n	8010954 <rclc_executor_prepare+0x18>
 80109ba:	900b      	str	r0, [sp, #44]	@ 0x2c
 80109bc:	f000 fb84 	bl	80110c8 <rcutils_reset_error>
 80109c0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80109c2:	e7c7      	b.n	8010954 <rclc_executor_prepare+0x18>
 80109c4:	f000 fb80 	bl	80110c8 <rcutils_reset_error>
 80109c8:	e7cb      	b.n	8010962 <rclc_executor_prepare+0x26>
 80109ca:	200b      	movs	r0, #11
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop

080109d0 <rclc_executor_spin_some.part.0>:
 80109d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d4:	4605      	mov	r5, r0
 80109d6:	4691      	mov	r9, r2
 80109d8:	4698      	mov	r8, r3
 80109da:	f7ff ffaf 	bl	801093c <rclc_executor_prepare>
 80109de:	f105 0614 	add.w	r6, r5, #20
 80109e2:	4630      	mov	r0, r6
 80109e4:	f002 fe8a 	bl	80136fc <rcl_wait_set_clear>
 80109e8:	4607      	mov	r7, r0
 80109ea:	2800      	cmp	r0, #0
 80109ec:	f040 80a8 	bne.w	8010b40 <rclc_executor_spin_some.part.0+0x170>
 80109f0:	68ab      	ldr	r3, [r5, #8]
 80109f2:	b30b      	cbz	r3, 8010a38 <rclc_executor_spin_some.part.0+0x68>
 80109f4:	4604      	mov	r4, r0
 80109f6:	6869      	ldr	r1, [r5, #4]
 80109f8:	01a2      	lsls	r2, r4, #6
 80109fa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80109fe:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8010a02:	b1cb      	cbz	r3, 8010a38 <rclc_executor_spin_some.part.0+0x68>
 8010a04:	5c8b      	ldrb	r3, [r1, r2]
 8010a06:	2b0a      	cmp	r3, #10
 8010a08:	f200 80de 	bhi.w	8010bc8 <rclc_executor_spin_some.part.0+0x1f8>
 8010a0c:	e8df f003 	tbb	[pc, r3]
 8010a10:	8da99d9d 	.word	0x8da99d9d
 8010a14:	0606068d 	.word	0x0606068d
 8010a18:	c1ce      	.short	0xc1ce
 8010a1a:	b5          	.byte	0xb5
 8010a1b:	00          	.byte	0x00
 8010a1c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010a20:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010a24:	4630      	mov	r0, r6
 8010a26:	f003 f9b9 	bl	8013d9c <rcl_wait_set_add_service>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	f040 8087 	bne.w	8010b3e <rclc_executor_spin_some.part.0+0x16e>
 8010a30:	3401      	adds	r4, #1
 8010a32:	68ab      	ldr	r3, [r5, #8]
 8010a34:	429c      	cmp	r4, r3
 8010a36:	d3de      	bcc.n	80109f6 <rclc_executor_spin_some.part.0+0x26>
 8010a38:	4643      	mov	r3, r8
 8010a3a:	464a      	mov	r2, r9
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f003 f9db 	bl	8013df8 <rcl_wait>
 8010a42:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	f000 80c6 	beq.w	8010bd8 <rclc_executor_spin_some.part.0+0x208>
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	f040 80bb 	bne.w	8010bc8 <rclc_executor_spin_some.part.0+0x1f8>
 8010a52:	68ab      	ldr	r3, [r5, #8]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	f000 8159 	beq.w	8010d0c <rclc_executor_spin_some.part.0+0x33c>
 8010a5a:	2400      	movs	r4, #0
 8010a5c:	f240 1991 	movw	r9, #401	@ 0x191
 8010a60:	46a0      	mov	r8, r4
 8010a62:	e00a      	b.n	8010a7a <rclc_executor_spin_some.part.0+0xaa>
 8010a64:	f7ff fb1a 	bl	801009c <_rclc_check_for_new_data>
 8010a68:	4604      	mov	r4, r0
 8010a6a:	b110      	cbz	r0, 8010a72 <rclc_executor_spin_some.part.0+0xa2>
 8010a6c:	4548      	cmp	r0, r9
 8010a6e:	f040 80b1 	bne.w	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010a72:	68ab      	ldr	r3, [r5, #8]
 8010a74:	4598      	cmp	r8, r3
 8010a76:	f080 8126 	bcs.w	8010cc6 <rclc_executor_spin_some.part.0+0x2f6>
 8010a7a:	686a      	ldr	r2, [r5, #4]
 8010a7c:	4631      	mov	r1, r6
 8010a7e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010a82:	f108 0801 	add.w	r8, r8, #1
 8010a86:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010a8a:	f1bc 0f00 	cmp.w	ip, #0
 8010a8e:	d1e9      	bne.n	8010a64 <rclc_executor_spin_some.part.0+0x94>
 8010a90:	4619      	mov	r1, r3
 8010a92:	4610      	mov	r0, r2
 8010a94:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010a98:	4798      	blx	r3
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	f000 809a 	beq.w	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010aa0:	68ab      	ldr	r3, [r5, #8]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f000 8096 	beq.w	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010aa8:	f04f 0800 	mov.w	r8, #0
 8010aac:	f240 1991 	movw	r9, #401	@ 0x191
 8010ab0:	e009      	b.n	8010ac6 <rclc_executor_spin_some.part.0+0xf6>
 8010ab2:	f7ff fb41 	bl	8010138 <_rclc_take_new_data>
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	b110      	cbz	r0, 8010ac0 <rclc_executor_spin_some.part.0+0xf0>
 8010aba:	4548      	cmp	r0, r9
 8010abc:	f040 808a 	bne.w	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010ac0:	68ab      	ldr	r3, [r5, #8]
 8010ac2:	4598      	cmp	r8, r3
 8010ac4:	d209      	bcs.n	8010ada <rclc_executor_spin_some.part.0+0x10a>
 8010ac6:	6868      	ldr	r0, [r5, #4]
 8010ac8:	4631      	mov	r1, r6
 8010aca:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8010ace:	f108 0801 	add.w	r8, r8, #1
 8010ad2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	d1eb      	bne.n	8010ab2 <rclc_executor_spin_some.part.0+0xe2>
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d07a      	beq.n	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010ade:	2600      	movs	r6, #0
 8010ae0:	e00e      	b.n	8010b00 <rclc_executor_spin_some.part.0+0x130>
 8010ae2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8010ae6:	2a08      	cmp	r2, #8
 8010ae8:	f000 80fc 	beq.w	8010ce4 <rclc_executor_spin_some.part.0+0x314>
 8010aec:	2a09      	cmp	r2, #9
 8010aee:	f000 80ee 	beq.w	8010cce <rclc_executor_spin_some.part.0+0x2fe>
 8010af2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8010af6:	b98a      	cbnz	r2, 8010b1c <rclc_executor_spin_some.part.0+0x14c>
 8010af8:	3601      	adds	r6, #1
 8010afa:	429e      	cmp	r6, r3
 8010afc:	d267      	bcs.n	8010bce <rclc_executor_spin_some.part.0+0x1fe>
 8010afe:	2400      	movs	r4, #0
 8010b00:	686a      	ldr	r2, [r5, #4]
 8010b02:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8010b06:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8010b0a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8010b0e:	2900      	cmp	r1, #0
 8010b10:	d060      	beq.n	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010b12:	7841      	ldrb	r1, [r0, #1]
 8010b14:	2900      	cmp	r1, #0
 8010b16:	d0e4      	beq.n	8010ae2 <rclc_executor_spin_some.part.0+0x112>
 8010b18:	2901      	cmp	r1, #1
 8010b1a:	d1ed      	bne.n	8010af8 <rclc_executor_spin_some.part.0+0x128>
 8010b1c:	f7ff fc80 	bl	8010420 <_rclc_execute.part.0>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	f040 80b5 	bne.w	8010c90 <rclc_executor_spin_some.part.0+0x2c0>
 8010b26:	68ab      	ldr	r3, [r5, #8]
 8010b28:	e7e6      	b.n	8010af8 <rclc_executor_spin_some.part.0+0x128>
 8010b2a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010b2e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010b32:	4630      	mov	r0, r6
 8010b34:	f003 f906 	bl	8013d44 <rcl_wait_set_add_client>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	f43f af79 	beq.w	8010a30 <rclc_executor_spin_some.part.0+0x60>
 8010b3e:	4607      	mov	r7, r0
 8010b40:	f000 fac2 	bl	80110c8 <rcutils_reset_error>
 8010b44:	4638      	mov	r0, r7
 8010b46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b4a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010b4e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010b52:	4630      	mov	r0, r6
 8010b54:	f002 fda6 	bl	80136a4 <rcl_wait_set_add_subscription>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	f43f af69 	beq.w	8010a30 <rclc_executor_spin_some.part.0+0x60>
 8010b5e:	4607      	mov	r7, r0
 8010b60:	e7ee      	b.n	8010b40 <rclc_executor_spin_some.part.0+0x170>
 8010b62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010b66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f003 f8ba 	bl	8013ce4 <rcl_wait_set_add_timer>
 8010b70:	2800      	cmp	r0, #0
 8010b72:	f43f af5d 	beq.w	8010a30 <rclc_executor_spin_some.part.0+0x60>
 8010b76:	4607      	mov	r7, r0
 8010b78:	e7e2      	b.n	8010b40 <rclc_executor_spin_some.part.0+0x170>
 8010b7a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010b7e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010b82:	4630      	mov	r0, r6
 8010b84:	f003 f882 	bl	8013c8c <rcl_wait_set_add_guard_condition>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	f43f af51 	beq.w	8010a30 <rclc_executor_spin_some.part.0+0x60>
 8010b8e:	4607      	mov	r7, r0
 8010b90:	e7d6      	b.n	8010b40 <rclc_executor_spin_some.part.0+0x170>
 8010b92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010b96:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	3110      	adds	r1, #16
 8010b9e:	f003 fe01 	bl	80147a4 <rcl_action_wait_set_add_action_server>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	f43f af44 	beq.w	8010a30 <rclc_executor_spin_some.part.0+0x60>
 8010ba8:	4607      	mov	r7, r0
 8010baa:	e7c9      	b.n	8010b40 <rclc_executor_spin_some.part.0+0x170>
 8010bac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010bb6:	4630      	mov	r0, r6
 8010bb8:	3110      	adds	r1, #16
 8010bba:	f003 fbc9 	bl	8014350 <rcl_action_wait_set_add_action_client>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	f43f af36 	beq.w	8010a30 <rclc_executor_spin_some.part.0+0x60>
 8010bc4:	4607      	mov	r7, r0
 8010bc6:	e7bb      	b.n	8010b40 <rclc_executor_spin_some.part.0+0x170>
 8010bc8:	2701      	movs	r7, #1
 8010bca:	f000 fa7d 	bl	80110c8 <rcutils_reset_error>
 8010bce:	4638      	mov	r0, r7
 8010bd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd4:	4627      	mov	r7, r4
 8010bd6:	e7fa      	b.n	8010bce <rclc_executor_spin_some.part.0+0x1fe>
 8010bd8:	68ab      	ldr	r3, [r5, #8]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 8093 	beq.w	8010d06 <rclc_executor_spin_some.part.0+0x336>
 8010be0:	2400      	movs	r4, #0
 8010be2:	f240 1991 	movw	r9, #401	@ 0x191
 8010be6:	46a0      	mov	r8, r4
 8010be8:	e008      	b.n	8010bfc <rclc_executor_spin_some.part.0+0x22c>
 8010bea:	f7ff fa57 	bl	801009c <_rclc_check_for_new_data>
 8010bee:	4604      	mov	r4, r0
 8010bf0:	b108      	cbz	r0, 8010bf6 <rclc_executor_spin_some.part.0+0x226>
 8010bf2:	4548      	cmp	r0, r9
 8010bf4:	d1ee      	bne.n	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010bf6:	68ab      	ldr	r3, [r5, #8]
 8010bf8:	4598      	cmp	r8, r3
 8010bfa:	d266      	bcs.n	8010cca <rclc_executor_spin_some.part.0+0x2fa>
 8010bfc:	686a      	ldr	r2, [r5, #4]
 8010bfe:	4631      	mov	r1, r6
 8010c00:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010c04:	f108 0801 	add.w	r8, r8, #1
 8010c08:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010c0c:	f1bc 0f00 	cmp.w	ip, #0
 8010c10:	d1eb      	bne.n	8010bea <rclc_executor_spin_some.part.0+0x21a>
 8010c12:	4619      	mov	r1, r3
 8010c14:	4610      	mov	r0, r2
 8010c16:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010c1a:	4798      	blx	r3
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	d0d9      	beq.n	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010c20:	68ab      	ldr	r3, [r5, #8]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d0d6      	beq.n	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010c26:	f04f 0a00 	mov.w	sl, #0
 8010c2a:	f240 1891 	movw	r8, #401	@ 0x191
 8010c2e:	f240 2959 	movw	r9, #601	@ 0x259
 8010c32:	e00e      	b.n	8010c52 <rclc_executor_spin_some.part.0+0x282>
 8010c34:	f813 300b 	ldrb.w	r3, [r3, fp]
 8010c38:	2b08      	cmp	r3, #8
 8010c3a:	d034      	beq.n	8010ca6 <rclc_executor_spin_some.part.0+0x2d6>
 8010c3c:	2b09      	cmp	r3, #9
 8010c3e:	d029      	beq.n	8010c94 <rclc_executor_spin_some.part.0+0x2c4>
 8010c40:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8010c44:	bb03      	cbnz	r3, 8010c88 <rclc_executor_spin_some.part.0+0x2b8>
 8010c46:	f10a 0a01 	add.w	sl, sl, #1
 8010c4a:	68ab      	ldr	r3, [r5, #8]
 8010c4c:	459a      	cmp	sl, r3
 8010c4e:	d2be      	bcs.n	8010bce <rclc_executor_spin_some.part.0+0x1fe>
 8010c50:	2400      	movs	r4, #0
 8010c52:	6868      	ldr	r0, [r5, #4]
 8010c54:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8010c58:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8010c5c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d0b7      	beq.n	8010bd4 <rclc_executor_spin_some.part.0+0x204>
 8010c64:	4631      	mov	r1, r6
 8010c66:	f7ff fa67 	bl	8010138 <_rclc_take_new_data>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	bf18      	it	ne
 8010c6e:	4540      	cmpne	r0, r8
 8010c70:	d001      	beq.n	8010c76 <rclc_executor_spin_some.part.0+0x2a6>
 8010c72:	4548      	cmp	r0, r9
 8010c74:	d10c      	bne.n	8010c90 <rclc_executor_spin_some.part.0+0x2c0>
 8010c76:	686b      	ldr	r3, [r5, #4]
 8010c78:	eb13 000b 	adds.w	r0, r3, fp
 8010c7c:	d021      	beq.n	8010cc2 <rclc_executor_spin_some.part.0+0x2f2>
 8010c7e:	7842      	ldrb	r2, [r0, #1]
 8010c80:	2a00      	cmp	r2, #0
 8010c82:	d0d7      	beq.n	8010c34 <rclc_executor_spin_some.part.0+0x264>
 8010c84:	2a01      	cmp	r2, #1
 8010c86:	d1de      	bne.n	8010c46 <rclc_executor_spin_some.part.0+0x276>
 8010c88:	f7ff fbca 	bl	8010420 <_rclc_execute.part.0>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d0da      	beq.n	8010c46 <rclc_executor_spin_some.part.0+0x276>
 8010c90:	4607      	mov	r7, r0
 8010c92:	e79c      	b.n	8010bce <rclc_executor_spin_some.part.0+0x1fe>
 8010c94:	6843      	ldr	r3, [r0, #4]
 8010c96:	6a1a      	ldr	r2, [r3, #32]
 8010c98:	2a00      	cmp	r2, #0
 8010c9a:	d1f5      	bne.n	8010c88 <rclc_executor_spin_some.part.0+0x2b8>
 8010c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d0d0      	beq.n	8010c46 <rclc_executor_spin_some.part.0+0x276>
 8010ca4:	e7f0      	b.n	8010c88 <rclc_executor_spin_some.part.0+0x2b8>
 8010ca6:	6843      	ldr	r3, [r0, #4]
 8010ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010caa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8010cae:	d1eb      	bne.n	8010c88 <rclc_executor_spin_some.part.0+0x2b8>
 8010cb0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	d1e7      	bne.n	8010c88 <rclc_executor_spin_some.part.0+0x2b8>
 8010cb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d0c2      	beq.n	8010c46 <rclc_executor_spin_some.part.0+0x276>
 8010cc0:	e7e2      	b.n	8010c88 <rclc_executor_spin_some.part.0+0x2b8>
 8010cc2:	270b      	movs	r7, #11
 8010cc4:	e783      	b.n	8010bce <rclc_executor_spin_some.part.0+0x1fe>
 8010cc6:	686a      	ldr	r2, [r5, #4]
 8010cc8:	e6e2      	b.n	8010a90 <rclc_executor_spin_some.part.0+0xc0>
 8010cca:	686a      	ldr	r2, [r5, #4]
 8010ccc:	e7a1      	b.n	8010c12 <rclc_executor_spin_some.part.0+0x242>
 8010cce:	6842      	ldr	r2, [r0, #4]
 8010cd0:	6a11      	ldr	r1, [r2, #32]
 8010cd2:	2900      	cmp	r1, #0
 8010cd4:	f47f af22 	bne.w	8010b1c <rclc_executor_spin_some.part.0+0x14c>
 8010cd8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8010cdc:	2a00      	cmp	r2, #0
 8010cde:	f43f af0b 	beq.w	8010af8 <rclc_executor_spin_some.part.0+0x128>
 8010ce2:	e71b      	b.n	8010b1c <rclc_executor_spin_some.part.0+0x14c>
 8010ce4:	6842      	ldr	r2, [r0, #4]
 8010ce6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8010ce8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8010cec:	f47f af16 	bne.w	8010b1c <rclc_executor_spin_some.part.0+0x14c>
 8010cf0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8010cf4:	2900      	cmp	r1, #0
 8010cf6:	f47f af11 	bne.w	8010b1c <rclc_executor_spin_some.part.0+0x14c>
 8010cfa:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8010cfe:	2a00      	cmp	r2, #0
 8010d00:	f43f aefa 	beq.w	8010af8 <rclc_executor_spin_some.part.0+0x128>
 8010d04:	e70a      	b.n	8010b1c <rclc_executor_spin_some.part.0+0x14c>
 8010d06:	686a      	ldr	r2, [r5, #4]
 8010d08:	461c      	mov	r4, r3
 8010d0a:	e782      	b.n	8010c12 <rclc_executor_spin_some.part.0+0x242>
 8010d0c:	686a      	ldr	r2, [r5, #4]
 8010d0e:	461c      	mov	r4, r3
 8010d10:	e6be      	b.n	8010a90 <rclc_executor_spin_some.part.0+0xc0>
 8010d12:	bf00      	nop

08010d14 <rclc_executor_spin_some>:
 8010d14:	b190      	cbz	r0, 8010d3c <rclc_executor_spin_some+0x28>
 8010d16:	b570      	push	{r4, r5, r6, lr}
 8010d18:	4604      	mov	r4, r0
 8010d1a:	6800      	ldr	r0, [r0, #0]
 8010d1c:	4616      	mov	r6, r2
 8010d1e:	461d      	mov	r5, r3
 8010d20:	f001 f87a 	bl	8011e18 <rcl_context_is_valid>
 8010d24:	b130      	cbz	r0, 8010d34 <rclc_executor_spin_some+0x20>
 8010d26:	4632      	mov	r2, r6
 8010d28:	462b      	mov	r3, r5
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d30:	f7ff be4e 	b.w	80109d0 <rclc_executor_spin_some.part.0>
 8010d34:	f000 f9c8 	bl	80110c8 <rcutils_reset_error>
 8010d38:	2001      	movs	r0, #1
 8010d3a:	bd70      	pop	{r4, r5, r6, pc}
 8010d3c:	200b      	movs	r0, #11
 8010d3e:	4770      	bx	lr

08010d40 <rclc_executor_handle_counters_zero_init>:
 8010d40:	b130      	cbz	r0, 8010d50 <rclc_executor_handle_counters_zero_init+0x10>
 8010d42:	2220      	movs	r2, #32
 8010d44:	2100      	movs	r1, #0
 8010d46:	b508      	push	{r3, lr}
 8010d48:	f00c fadc 	bl	801d304 <memset>
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	bd08      	pop	{r3, pc}
 8010d50:	200b      	movs	r0, #11
 8010d52:	4770      	bx	lr
 8010d54:	0000      	movs	r0, r0
	...

08010d58 <rclc_executor_handle_init>:
 8010d58:	4603      	mov	r3, r0
 8010d5a:	b178      	cbz	r0, 8010d7c <rclc_executor_handle_init+0x24>
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	f04f 0c0b 	mov.w	ip, #11
 8010d62:	6341      	str	r1, [r0, #52]	@ 0x34
 8010d64:	4610      	mov	r0, r2
 8010d66:	f8a3 c000 	strh.w	ip, [r3]
 8010d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8010d6c:	871a      	strh	r2, [r3, #56]	@ 0x38
 8010d6e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8010d80 <rclc_executor_handle_init+0x28>
 8010d72:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8010d76:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 8010d7a:	4770      	bx	lr
 8010d7c:	200b      	movs	r0, #11
 8010d7e:	4770      	bx	lr
	...

08010d88 <rclc_support_init>:
 8010d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d8c:	b086      	sub	sp, #24
 8010d8e:	b3bb      	cbz	r3, 8010e00 <rclc_support_init+0x78>
 8010d90:	4606      	mov	r6, r0
 8010d92:	b3a8      	cbz	r0, 8010e00 <rclc_support_init+0x78>
 8010d94:	461c      	mov	r4, r3
 8010d96:	460f      	mov	r7, r1
 8010d98:	4690      	mov	r8, r2
 8010d9a:	f001 f9a9 	bl	80120f0 <rcl_get_zero_initialized_init_options>
 8010d9e:	f104 050c 	add.w	r5, r4, #12
 8010da2:	9005      	str	r0, [sp, #20]
 8010da4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010da8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010dac:	a805      	add	r0, sp, #20
 8010dae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010db2:	f001 f99f 	bl	80120f4 <rcl_init_options_init>
 8010db6:	4605      	mov	r5, r0
 8010db8:	b9e0      	cbnz	r0, 8010df4 <rclc_support_init+0x6c>
 8010dba:	ad02      	add	r5, sp, #8
 8010dbc:	4628      	mov	r0, r5
 8010dbe:	f001 f821 	bl	8011e04 <rcl_get_zero_initialized_context>
 8010dc2:	4633      	mov	r3, r6
 8010dc4:	aa05      	add	r2, sp, #20
 8010dc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010dca:	e886 0003 	stmia.w	r6, {r0, r1}
 8010dce:	4641      	mov	r1, r8
 8010dd0:	4638      	mov	r0, r7
 8010dd2:	f001 f887 	bl	8011ee4 <rcl_init>
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	b9b8      	cbnz	r0, 8010e0a <rclc_support_init+0x82>
 8010dda:	4622      	mov	r2, r4
 8010ddc:	f106 010c 	add.w	r1, r6, #12
 8010de0:	2003      	movs	r0, #3
 8010de2:	60b4      	str	r4, [r6, #8]
 8010de4:	f002 f99a 	bl	801311c <rcl_clock_init>
 8010de8:	4605      	mov	r5, r0
 8010dea:	b970      	cbnz	r0, 8010e0a <rclc_support_init+0x82>
 8010dec:	a805      	add	r0, sp, #20
 8010dee:	f001 f9e7 	bl	80121c0 <rcl_init_options_fini>
 8010df2:	b108      	cbz	r0, 8010df8 <rclc_support_init+0x70>
 8010df4:	f000 f968 	bl	80110c8 <rcutils_reset_error>
 8010df8:	4628      	mov	r0, r5
 8010dfa:	b006      	add	sp, #24
 8010dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e00:	250b      	movs	r5, #11
 8010e02:	4628      	mov	r0, r5
 8010e04:	b006      	add	sp, #24
 8010e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e0a:	f000 f95d 	bl	80110c8 <rcutils_reset_error>
 8010e0e:	a805      	add	r0, sp, #20
 8010e10:	f001 f9d6 	bl	80121c0 <rcl_init_options_fini>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d0ef      	beq.n	8010df8 <rclc_support_init+0x70>
 8010e18:	e7ec      	b.n	8010df4 <rclc_support_init+0x6c>
 8010e1a:	bf00      	nop

08010e1c <rclc_node_init_default>:
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	bf18      	it	ne
 8010e20:	2a00      	cmpne	r2, #0
 8010e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e26:	4616      	mov	r6, r2
 8010e28:	bf0c      	ite	eq
 8010e2a:	2201      	moveq	r2, #1
 8010e2c:	2200      	movne	r2, #0
 8010e2e:	b0a1      	sub	sp, #132	@ 0x84
 8010e30:	2900      	cmp	r1, #0
 8010e32:	bf08      	it	eq
 8010e34:	f042 0201 	orreq.w	r2, r2, #1
 8010e38:	bb22      	cbnz	r2, 8010e84 <rclc_node_init_default+0x68>
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	b310      	cbz	r0, 8010e84 <rclc_node_init_default+0x68>
 8010e3e:	f10d 0810 	add.w	r8, sp, #16
 8010e42:	461f      	mov	r7, r3
 8010e44:	460d      	mov	r5, r1
 8010e46:	f10d 0918 	add.w	r9, sp, #24
 8010e4a:	4640      	mov	r0, r8
 8010e4c:	f001 fa72 	bl	8012334 <rcl_get_zero_initialized_node>
 8010e50:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010e54:	e884 0003 	stmia.w	r4, {r0, r1}
 8010e58:	4648      	mov	r0, r9
 8010e5a:	f001 fbe5 	bl	8012628 <rcl_node_get_default_options>
 8010e5e:	4640      	mov	r0, r8
 8010e60:	f001 fa68 	bl	8012334 <rcl_get_zero_initialized_node>
 8010e64:	f8cd 9000 	str.w	r9, [sp]
 8010e68:	463b      	mov	r3, r7
 8010e6a:	4632      	mov	r2, r6
 8010e6c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010e70:	e884 0003 	stmia.w	r4, {r0, r1}
 8010e74:	4629      	mov	r1, r5
 8010e76:	4620      	mov	r0, r4
 8010e78:	f001 fa66 	bl	8012348 <rcl_node_init>
 8010e7c:	b930      	cbnz	r0, 8010e8c <rclc_node_init_default+0x70>
 8010e7e:	b021      	add	sp, #132	@ 0x84
 8010e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e84:	200b      	movs	r0, #11
 8010e86:	b021      	add	sp, #132	@ 0x84
 8010e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e8c:	9003      	str	r0, [sp, #12]
 8010e8e:	f000 f91b 	bl	80110c8 <rcutils_reset_error>
 8010e92:	f000 f919 	bl	80110c8 <rcutils_reset_error>
 8010e96:	9803      	ldr	r0, [sp, #12]
 8010e98:	b021      	add	sp, #132	@ 0x84
 8010e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e9e:	bf00      	nop

08010ea0 <rclc_publisher_init_default>:
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	bf18      	it	ne
 8010ea4:	2a00      	cmpne	r2, #0
 8010ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eaa:	4616      	mov	r6, r2
 8010eac:	bf0c      	ite	eq
 8010eae:	2201      	moveq	r2, #1
 8010eb0:	2200      	movne	r2, #0
 8010eb2:	b0a0      	sub	sp, #128	@ 0x80
 8010eb4:	2900      	cmp	r1, #0
 8010eb6:	bf08      	it	eq
 8010eb8:	f042 0201 	orreq.w	r2, r2, #1
 8010ebc:	bb1a      	cbnz	r2, 8010f06 <rclc_publisher_init_default+0x66>
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	b308      	cbz	r0, 8010f06 <rclc_publisher_init_default+0x66>
 8010ec2:	f10d 0810 	add.w	r8, sp, #16
 8010ec6:	461f      	mov	r7, r3
 8010ec8:	460d      	mov	r5, r1
 8010eca:	f001 fcb3 	bl	8012834 <rcl_get_zero_initialized_publisher>
 8010ece:	6020      	str	r0, [r4, #0]
 8010ed0:	4640      	mov	r0, r8
 8010ed2:	f001 fd4f 	bl	8012974 <rcl_publisher_get_default_options>
 8010ed6:	2250      	movs	r2, #80	@ 0x50
 8010ed8:	490d      	ldr	r1, [pc, #52]	@ (8010f10 <rclc_publisher_init_default+0x70>)
 8010eda:	4640      	mov	r0, r8
 8010edc:	f00c fb31 	bl	801d542 <memcpy>
 8010ee0:	463b      	mov	r3, r7
 8010ee2:	4632      	mov	r2, r6
 8010ee4:	4629      	mov	r1, r5
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f8cd 8000 	str.w	r8, [sp]
 8010eec:	f001 fca8 	bl	8012840 <rcl_publisher_init>
 8010ef0:	b910      	cbnz	r0, 8010ef8 <rclc_publisher_init_default+0x58>
 8010ef2:	b020      	add	sp, #128	@ 0x80
 8010ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef8:	9003      	str	r0, [sp, #12]
 8010efa:	f000 f8e5 	bl	80110c8 <rcutils_reset_error>
 8010efe:	9803      	ldr	r0, [sp, #12]
 8010f00:	b020      	add	sp, #128	@ 0x80
 8010f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f06:	200b      	movs	r0, #11
 8010f08:	b020      	add	sp, #128	@ 0x80
 8010f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f0e:	bf00      	nop
 8010f10:	0801f778 	.word	0x0801f778

08010f14 <rclc_service_init_default>:
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	bf18      	it	ne
 8010f18:	2a00      	cmpne	r2, #0
 8010f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f1e:	4616      	mov	r6, r2
 8010f20:	bf0c      	ite	eq
 8010f22:	2201      	moveq	r2, #1
 8010f24:	2200      	movne	r2, #0
 8010f26:	b09e      	sub	sp, #120	@ 0x78
 8010f28:	2900      	cmp	r1, #0
 8010f2a:	bf08      	it	eq
 8010f2c:	f042 0201 	orreq.w	r2, r2, #1
 8010f30:	bb1a      	cbnz	r2, 8010f7a <rclc_service_init_default+0x66>
 8010f32:	4604      	mov	r4, r0
 8010f34:	b308      	cbz	r0, 8010f7a <rclc_service_init_default+0x66>
 8010f36:	f10d 0810 	add.w	r8, sp, #16
 8010f3a:	461f      	mov	r7, r3
 8010f3c:	460d      	mov	r5, r1
 8010f3e:	f001 fe67 	bl	8012c10 <rcl_get_zero_initialized_service>
 8010f42:	6020      	str	r0, [r4, #0]
 8010f44:	4640      	mov	r0, r8
 8010f46:	f001 fefb 	bl	8012d40 <rcl_service_get_default_options>
 8010f4a:	2250      	movs	r2, #80	@ 0x50
 8010f4c:	490d      	ldr	r1, [pc, #52]	@ (8010f84 <rclc_service_init_default+0x70>)
 8010f4e:	4640      	mov	r0, r8
 8010f50:	f00c faf7 	bl	801d542 <memcpy>
 8010f54:	463b      	mov	r3, r7
 8010f56:	4632      	mov	r2, r6
 8010f58:	4629      	mov	r1, r5
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f8cd 8000 	str.w	r8, [sp]
 8010f60:	f001 fe5c 	bl	8012c1c <rcl_service_init>
 8010f64:	b910      	cbnz	r0, 8010f6c <rclc_service_init_default+0x58>
 8010f66:	b01e      	add	sp, #120	@ 0x78
 8010f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f6c:	9003      	str	r0, [sp, #12]
 8010f6e:	f000 f8ab 	bl	80110c8 <rcutils_reset_error>
 8010f72:	9803      	ldr	r0, [sp, #12]
 8010f74:	b01e      	add	sp, #120	@ 0x78
 8010f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f7a:	200b      	movs	r0, #11
 8010f7c:	b01e      	add	sp, #120	@ 0x78
 8010f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f82:	bf00      	nop
 8010f84:	0801f7c8 	.word	0x0801f7c8

08010f88 <rclc_subscription_init_default>:
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	bf18      	it	ne
 8010f8c:	2a00      	cmpne	r2, #0
 8010f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f92:	4616      	mov	r6, r2
 8010f94:	bf0c      	ite	eq
 8010f96:	2201      	moveq	r2, #1
 8010f98:	2200      	movne	r2, #0
 8010f9a:	b0a0      	sub	sp, #128	@ 0x80
 8010f9c:	2900      	cmp	r1, #0
 8010f9e:	bf08      	it	eq
 8010fa0:	f042 0201 	orreq.w	r2, r2, #1
 8010fa4:	bb1a      	cbnz	r2, 8010fee <rclc_subscription_init_default+0x66>
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	b308      	cbz	r0, 8010fee <rclc_subscription_init_default+0x66>
 8010faa:	f10d 0810 	add.w	r8, sp, #16
 8010fae:	461f      	mov	r7, r3
 8010fb0:	460d      	mov	r5, r1
 8010fb2:	f001 ff51 	bl	8012e58 <rcl_get_zero_initialized_subscription>
 8010fb6:	6020      	str	r0, [r4, #0]
 8010fb8:	4640      	mov	r0, r8
 8010fba:	f002 f801 	bl	8012fc0 <rcl_subscription_get_default_options>
 8010fbe:	2250      	movs	r2, #80	@ 0x50
 8010fc0:	490d      	ldr	r1, [pc, #52]	@ (8010ff8 <rclc_subscription_init_default+0x70>)
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	f00c fabd 	bl	801d542 <memcpy>
 8010fc8:	463b      	mov	r3, r7
 8010fca:	4632      	mov	r2, r6
 8010fcc:	4629      	mov	r1, r5
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f8cd 8000 	str.w	r8, [sp]
 8010fd4:	f001 ff46 	bl	8012e64 <rcl_subscription_init>
 8010fd8:	b910      	cbnz	r0, 8010fe0 <rclc_subscription_init_default+0x58>
 8010fda:	b020      	add	sp, #128	@ 0x80
 8010fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fe0:	9003      	str	r0, [sp, #12]
 8010fe2:	f000 f871 	bl	80110c8 <rcutils_reset_error>
 8010fe6:	9803      	ldr	r0, [sp, #12]
 8010fe8:	b020      	add	sp, #128	@ 0x80
 8010fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fee:	200b      	movs	r0, #11
 8010ff0:	b020      	add	sp, #128	@ 0x80
 8010ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff6:	bf00      	nop
 8010ff8:	0801f818 	.word	0x0801f818

08010ffc <__default_zero_allocate>:
 8010ffc:	f00b bcaa 	b.w	801c954 <calloc>

08011000 <__default_reallocate>:
 8011000:	f00b be48 	b.w	801cc94 <realloc>

08011004 <__default_deallocate>:
 8011004:	f00b bd24 	b.w	801ca50 <free>

08011008 <__default_allocate>:
 8011008:	f00b bd1a 	b.w	801ca40 <malloc>

0801100c <rcutils_get_zero_initialized_allocator>:
 801100c:	b510      	push	{r4, lr}
 801100e:	4c05      	ldr	r4, [pc, #20]	@ (8011024 <rcutils_get_zero_initialized_allocator+0x18>)
 8011010:	4686      	mov	lr, r0
 8011012:	4684      	mov	ip, r0
 8011014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011016:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801101a:	6823      	ldr	r3, [r4, #0]
 801101c:	4670      	mov	r0, lr
 801101e:	f8cc 3000 	str.w	r3, [ip]
 8011022:	bd10      	pop	{r4, pc}
 8011024:	0801f868 	.word	0x0801f868

08011028 <rcutils_set_default_allocator>:
 8011028:	b1a8      	cbz	r0, 8011056 <rcutils_set_default_allocator+0x2e>
 801102a:	6802      	ldr	r2, [r0, #0]
 801102c:	b1a2      	cbz	r2, 8011058 <rcutils_set_default_allocator+0x30>
 801102e:	6841      	ldr	r1, [r0, #4]
 8011030:	b1a1      	cbz	r1, 801105c <rcutils_set_default_allocator+0x34>
 8011032:	b410      	push	{r4}
 8011034:	68c4      	ldr	r4, [r0, #12]
 8011036:	b164      	cbz	r4, 8011052 <rcutils_set_default_allocator+0x2a>
 8011038:	6880      	ldr	r0, [r0, #8]
 801103a:	b138      	cbz	r0, 801104c <rcutils_set_default_allocator+0x24>
 801103c:	4b08      	ldr	r3, [pc, #32]	@ (8011060 <rcutils_set_default_allocator+0x38>)
 801103e:	601a      	str	r2, [r3, #0]
 8011040:	2200      	movs	r2, #0
 8011042:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8011046:	2001      	movs	r0, #1
 8011048:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801104c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011050:	4770      	bx	lr
 8011052:	4620      	mov	r0, r4
 8011054:	e7fa      	b.n	801104c <rcutils_set_default_allocator+0x24>
 8011056:	4770      	bx	lr
 8011058:	4610      	mov	r0, r2
 801105a:	4770      	bx	lr
 801105c:	4608      	mov	r0, r1
 801105e:	4770      	bx	lr
 8011060:	24000dfc 	.word	0x24000dfc

08011064 <rcutils_get_default_allocator>:
 8011064:	b510      	push	{r4, lr}
 8011066:	4c05      	ldr	r4, [pc, #20]	@ (801107c <rcutils_get_default_allocator+0x18>)
 8011068:	4686      	mov	lr, r0
 801106a:	4684      	mov	ip, r0
 801106c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801106e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011072:	6823      	ldr	r3, [r4, #0]
 8011074:	4670      	mov	r0, lr
 8011076:	f8cc 3000 	str.w	r3, [ip]
 801107a:	bd10      	pop	{r4, pc}
 801107c:	24000dfc 	.word	0x24000dfc

08011080 <rcutils_allocator_is_valid>:
 8011080:	b158      	cbz	r0, 801109a <rcutils_allocator_is_valid+0x1a>
 8011082:	6803      	ldr	r3, [r0, #0]
 8011084:	b143      	cbz	r3, 8011098 <rcutils_allocator_is_valid+0x18>
 8011086:	6843      	ldr	r3, [r0, #4]
 8011088:	b133      	cbz	r3, 8011098 <rcutils_allocator_is_valid+0x18>
 801108a:	68c3      	ldr	r3, [r0, #12]
 801108c:	b123      	cbz	r3, 8011098 <rcutils_allocator_is_valid+0x18>
 801108e:	6880      	ldr	r0, [r0, #8]
 8011090:	3800      	subs	r0, #0
 8011092:	bf18      	it	ne
 8011094:	2001      	movne	r0, #1
 8011096:	4770      	bx	lr
 8011098:	4618      	mov	r0, r3
 801109a:	4770      	bx	lr

0801109c <rcutils_get_error_string>:
 801109c:	4b06      	ldr	r3, [pc, #24]	@ (80110b8 <rcutils_get_error_string+0x1c>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	b13b      	cbz	r3, 80110b2 <rcutils_get_error_string+0x16>
 80110a2:	4b06      	ldr	r3, [pc, #24]	@ (80110bc <rcutils_get_error_string+0x20>)
 80110a4:	781a      	ldrb	r2, [r3, #0]
 80110a6:	b90a      	cbnz	r2, 80110ac <rcutils_get_error_string+0x10>
 80110a8:	2201      	movs	r2, #1
 80110aa:	701a      	strb	r2, [r3, #0]
 80110ac:	4b04      	ldr	r3, [pc, #16]	@ (80110c0 <rcutils_get_error_string+0x24>)
 80110ae:	7818      	ldrb	r0, [r3, #0]
 80110b0:	4770      	bx	lr
 80110b2:	4b04      	ldr	r3, [pc, #16]	@ (80110c4 <rcutils_get_error_string+0x28>)
 80110b4:	7818      	ldrb	r0, [r3, #0]
 80110b6:	4770      	bx	lr
 80110b8:	2406468c 	.word	0x2406468c
 80110bc:	240646a1 	.word	0x240646a1
 80110c0:	240646a0 	.word	0x240646a0
 80110c4:	0801f87c 	.word	0x0801f87c

080110c8 <rcutils_reset_error>:
 80110c8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80110e8 <rcutils_reset_error+0x20>
 80110cc:	2300      	movs	r3, #0
 80110ce:	4a08      	ldr	r2, [pc, #32]	@ (80110f0 <rcutils_reset_error+0x28>)
 80110d0:	4808      	ldr	r0, [pc, #32]	@ (80110f4 <rcutils_reset_error+0x2c>)
 80110d2:	8013      	strh	r3, [r2, #0]
 80110d4:	4908      	ldr	r1, [pc, #32]	@ (80110f8 <rcutils_reset_error+0x30>)
 80110d6:	7003      	strb	r3, [r0, #0]
 80110d8:	700b      	strb	r3, [r1, #0]
 80110da:	ed82 7b02 	vstr	d7, [r2, #8]
 80110de:	4a07      	ldr	r2, [pc, #28]	@ (80110fc <rcutils_reset_error+0x34>)
 80110e0:	7013      	strb	r3, [r2, #0]
 80110e2:	4770      	bx	lr
 80110e4:	f3af 8000 	nop.w
	...
 80110f0:	24064690 	.word	0x24064690
 80110f4:	240646a1 	.word	0x240646a1
 80110f8:	240646a0 	.word	0x240646a0
 80110fc:	2406468c 	.word	0x2406468c

08011100 <rcutils_system_time_now>:
 8011100:	b300      	cbz	r0, 8011144 <rcutils_system_time_now+0x44>
 8011102:	b570      	push	{r4, r5, r6, lr}
 8011104:	b084      	sub	sp, #16
 8011106:	4604      	mov	r4, r0
 8011108:	2001      	movs	r0, #1
 801110a:	4669      	mov	r1, sp
 801110c:	f7f0 fc48 	bl	80019a0 <clock_gettime>
 8011110:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011114:	2900      	cmp	r1, #0
 8011116:	db12      	blt.n	801113e <rcutils_system_time_now+0x3e>
 8011118:	ea53 0201 	orrs.w	r2, r3, r1
 801111c:	9d02      	ldr	r5, [sp, #8]
 801111e:	d101      	bne.n	8011124 <rcutils_system_time_now+0x24>
 8011120:	2d00      	cmp	r5, #0
 8011122:	db0c      	blt.n	801113e <rcutils_system_time_now+0x3e>
 8011124:	4e08      	ldr	r6, [pc, #32]	@ (8011148 <rcutils_system_time_now+0x48>)
 8011126:	2000      	movs	r0, #0
 8011128:	fba3 3206 	umull	r3, r2, r3, r6
 801112c:	195b      	adds	r3, r3, r5
 801112e:	fb06 2201 	mla	r2, r6, r1, r2
 8011132:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8011136:	e9c4 3200 	strd	r3, r2, [r4]
 801113a:	b004      	add	sp, #16
 801113c:	bd70      	pop	{r4, r5, r6, pc}
 801113e:	2002      	movs	r0, #2
 8011140:	b004      	add	sp, #16
 8011142:	bd70      	pop	{r4, r5, r6, pc}
 8011144:	200b      	movs	r0, #11
 8011146:	4770      	bx	lr
 8011148:	3b9aca00 	.word	0x3b9aca00

0801114c <rcutils_steady_time_now>:
 801114c:	b300      	cbz	r0, 8011190 <rcutils_steady_time_now+0x44>
 801114e:	b570      	push	{r4, r5, r6, lr}
 8011150:	b084      	sub	sp, #16
 8011152:	4604      	mov	r4, r0
 8011154:	2000      	movs	r0, #0
 8011156:	4669      	mov	r1, sp
 8011158:	f7f0 fc22 	bl	80019a0 <clock_gettime>
 801115c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011160:	2900      	cmp	r1, #0
 8011162:	db12      	blt.n	801118a <rcutils_steady_time_now+0x3e>
 8011164:	ea53 0201 	orrs.w	r2, r3, r1
 8011168:	9d02      	ldr	r5, [sp, #8]
 801116a:	d101      	bne.n	8011170 <rcutils_steady_time_now+0x24>
 801116c:	2d00      	cmp	r5, #0
 801116e:	db0c      	blt.n	801118a <rcutils_steady_time_now+0x3e>
 8011170:	4e08      	ldr	r6, [pc, #32]	@ (8011194 <rcutils_steady_time_now+0x48>)
 8011172:	2000      	movs	r0, #0
 8011174:	fba3 3206 	umull	r3, r2, r3, r6
 8011178:	195b      	adds	r3, r3, r5
 801117a:	fb06 2201 	mla	r2, r6, r1, r2
 801117e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8011182:	e9c4 3200 	strd	r3, r2, [r4]
 8011186:	b004      	add	sp, #16
 8011188:	bd70      	pop	{r4, r5, r6, pc}
 801118a:	2002      	movs	r0, #2
 801118c:	b004      	add	sp, #16
 801118e:	bd70      	pop	{r4, r5, r6, pc}
 8011190:	200b      	movs	r0, #11
 8011192:	4770      	bx	lr
 8011194:	3b9aca00 	.word	0x3b9aca00

08011198 <rmw_uros_set_custom_transport>:
 8011198:	b470      	push	{r4, r5, r6}
 801119a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801119e:	b162      	cbz	r2, 80111ba <rmw_uros_set_custom_transport+0x22>
 80111a0:	b15b      	cbz	r3, 80111ba <rmw_uros_set_custom_transport+0x22>
 80111a2:	b155      	cbz	r5, 80111ba <rmw_uros_set_custom_transport+0x22>
 80111a4:	b14e      	cbz	r6, 80111ba <rmw_uros_set_custom_transport+0x22>
 80111a6:	4c06      	ldr	r4, [pc, #24]	@ (80111c0 <rmw_uros_set_custom_transport+0x28>)
 80111a8:	7020      	strb	r0, [r4, #0]
 80111aa:	2000      	movs	r0, #0
 80111ac:	6166      	str	r6, [r4, #20]
 80111ae:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80111b2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80111b6:	bc70      	pop	{r4, r5, r6}
 80111b8:	4770      	bx	lr
 80111ba:	200b      	movs	r0, #11
 80111bc:	bc70      	pop	{r4, r5, r6}
 80111be:	4770      	bx	lr
 80111c0:	240646a4 	.word	0x240646a4

080111c4 <get_message_typesupport_handle>:
 80111c4:	6883      	ldr	r3, [r0, #8]
 80111c6:	4718      	bx	r3

080111c8 <get_message_typesupport_handle_function>:
 80111c8:	b510      	push	{r4, lr}
 80111ca:	4604      	mov	r4, r0
 80111cc:	6800      	ldr	r0, [r0, #0]
 80111ce:	f7ef f887 	bl	80002e0 <strcmp>
 80111d2:	2800      	cmp	r0, #0
 80111d4:	bf0c      	ite	eq
 80111d6:	4620      	moveq	r0, r4
 80111d8:	2000      	movne	r0, #0
 80111da:	bd10      	pop	{r4, pc}

080111dc <get_service_typesupport_handle>:
 80111dc:	6883      	ldr	r3, [r0, #8]
 80111de:	4718      	bx	r3

080111e0 <get_service_typesupport_handle_function>:
 80111e0:	b510      	push	{r4, lr}
 80111e2:	4604      	mov	r4, r0
 80111e4:	6800      	ldr	r0, [r0, #0]
 80111e6:	f7ef f87b 	bl	80002e0 <strcmp>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	bf0c      	ite	eq
 80111ee:	4620      	moveq	r0, r4
 80111f0:	2000      	movne	r0, #0
 80111f2:	bd10      	pop	{r4, pc}

080111f4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80111f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f8:	6805      	ldr	r5, [r0, #0]
 80111fa:	4604      	mov	r4, r0
 80111fc:	460e      	mov	r6, r1
 80111fe:	4628      	mov	r0, r5
 8011200:	f7ef f86e 	bl	80002e0 <strcmp>
 8011204:	b1c8      	cbz	r0, 801123a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8011206:	4b11      	ldr	r3, [pc, #68]	@ (801124c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	429d      	cmp	r5, r3
 801120c:	d112      	bne.n	8011234 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801120e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011212:	f8d8 4000 	ldr.w	r4, [r8]
 8011216:	b16c      	cbz	r4, 8011234 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011218:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801121c:	2700      	movs	r7, #0
 801121e:	3d04      	subs	r5, #4
 8011220:	4631      	mov	r1, r6
 8011222:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011226:	f7ef f85b 	bl	80002e0 <strcmp>
 801122a:	00bb      	lsls	r3, r7, #2
 801122c:	b140      	cbz	r0, 8011240 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801122e:	3701      	adds	r7, #1
 8011230:	42bc      	cmp	r4, r7
 8011232:	d1f5      	bne.n	8011220 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011234:	2000      	movs	r0, #0
 8011236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123a:	4620      	mov	r0, r4
 801123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011240:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011248:	58d3      	ldr	r3, [r2, r3]
 801124a:	4718      	bx	r3
 801124c:	24000e10 	.word	0x24000e10

08011250 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8011250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011254:	6805      	ldr	r5, [r0, #0]
 8011256:	4604      	mov	r4, r0
 8011258:	460e      	mov	r6, r1
 801125a:	4628      	mov	r0, r5
 801125c:	f7ef f840 	bl	80002e0 <strcmp>
 8011260:	b1c8      	cbz	r0, 8011296 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8011262:	4b11      	ldr	r3, [pc, #68]	@ (80112a8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	429d      	cmp	r5, r3
 8011268:	d112      	bne.n	8011290 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801126a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801126e:	f8d8 4000 	ldr.w	r4, [r8]
 8011272:	b16c      	cbz	r4, 8011290 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8011274:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011278:	2700      	movs	r7, #0
 801127a:	3d04      	subs	r5, #4
 801127c:	4631      	mov	r1, r6
 801127e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011282:	f7ef f82d 	bl	80002e0 <strcmp>
 8011286:	00bb      	lsls	r3, r7, #2
 8011288:	b140      	cbz	r0, 801129c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 801128a:	3701      	adds	r7, #1
 801128c:	42bc      	cmp	r4, r7
 801128e:	d1f5      	bne.n	801127c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8011290:	2000      	movs	r0, #0
 8011292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011296:	4620      	mov	r0, r4
 8011298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801129c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80112a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112a4:	58d3      	ldr	r3, [r2, r3]
 80112a6:	4718      	bx	r3
 80112a8:	24000e10 	.word	0x24000e10

080112ac <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80112ac:	f006 b8be 	b.w	801742c <std_msgs__msg__Header__init>

080112b0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80112b0:	f006 b8e0 	b.w	8017474 <std_msgs__msg__Header__fini>

080112b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80112b4:	b508      	push	{r3, lr}
 80112b6:	f7fd fb6f 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80112ba:	4b06      	ldr	r3, [pc, #24]	@ (80112d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80112bc:	4906      	ldr	r1, [pc, #24]	@ (80112d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	60c8      	str	r0, [r1, #12]
 80112c2:	b10a      	cbz	r2, 80112c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80112c4:	4803      	ldr	r0, [pc, #12]	@ (80112d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80112c6:	bd08      	pop	{r3, pc}
 80112c8:	4a04      	ldr	r2, [pc, #16]	@ (80112dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80112ca:	4802      	ldr	r0, [pc, #8]	@ (80112d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80112cc:	6812      	ldr	r2, [r2, #0]
 80112ce:	601a      	str	r2, [r3, #0]
 80112d0:	bd08      	pop	{r3, pc}
 80112d2:	bf00      	nop
 80112d4:	24000e90 	.word	0x24000e90
 80112d8:	24000e18 	.word	0x24000e18
 80112dc:	24000e14 	.word	0x24000e14

080112e0 <_Header__max_serialized_size>:
 80112e0:	b500      	push	{lr}
 80112e2:	b083      	sub	sp, #12
 80112e4:	2301      	movs	r3, #1
 80112e6:	2100      	movs	r1, #0
 80112e8:	f10d 0007 	add.w	r0, sp, #7
 80112ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80112f0:	f7fd fbb0 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 80112f4:	b003      	add	sp, #12
 80112f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80112fa:	bf00      	nop

080112fc <get_serialized_size_std_msgs__msg__Header>:
 80112fc:	b570      	push	{r4, r5, r6, lr}
 80112fe:	4605      	mov	r5, r0
 8011300:	b168      	cbz	r0, 801131e <get_serialized_size_std_msgs__msg__Header+0x22>
 8011302:	460c      	mov	r4, r1
 8011304:	f7fd fb56 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 8011308:	2104      	movs	r1, #4
 801130a:	1826      	adds	r6, r4, r0
 801130c:	f1c4 0405 	rsb	r4, r4, #5
 8011310:	4630      	mov	r0, r6
 8011312:	f7fe fe53 	bl	800ffbc <ucdr_alignment>
 8011316:	68e9      	ldr	r1, [r5, #12]
 8011318:	440c      	add	r4, r1
 801131a:	4404      	add	r4, r0
 801131c:	19a0      	adds	r0, r4, r6
 801131e:	bd70      	pop	{r4, r5, r6, pc}

08011320 <_Header__cdr_deserialize>:
 8011320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011322:	460c      	mov	r4, r1
 8011324:	b083      	sub	sp, #12
 8011326:	b1e9      	cbz	r1, 8011364 <_Header__cdr_deserialize+0x44>
 8011328:	4606      	mov	r6, r0
 801132a:	f7fd fba7 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801132e:	4603      	mov	r3, r0
 8011330:	4621      	mov	r1, r4
 8011332:	4630      	mov	r0, r6
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	4798      	blx	r3
 801133a:	6927      	ldr	r7, [r4, #16]
 801133c:	ab01      	add	r3, sp, #4
 801133e:	68a1      	ldr	r1, [r4, #8]
 8011340:	463a      	mov	r2, r7
 8011342:	4630      	mov	r0, r6
 8011344:	f000 fc86 	bl	8011c54 <ucdr_deserialize_sequence_char>
 8011348:	9b01      	ldr	r3, [sp, #4]
 801134a:	4605      	mov	r5, r0
 801134c:	b920      	cbnz	r0, 8011358 <_Header__cdr_deserialize+0x38>
 801134e:	429f      	cmp	r7, r3
 8011350:	d30c      	bcc.n	801136c <_Header__cdr_deserialize+0x4c>
 8011352:	4628      	mov	r0, r5
 8011354:	b003      	add	sp, #12
 8011356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011358:	b103      	cbz	r3, 801135c <_Header__cdr_deserialize+0x3c>
 801135a:	3b01      	subs	r3, #1
 801135c:	4628      	mov	r0, r5
 801135e:	60e3      	str	r3, [r4, #12]
 8011360:	b003      	add	sp, #12
 8011362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011364:	460d      	mov	r5, r1
 8011366:	4628      	mov	r0, r5
 8011368:	b003      	add	sp, #12
 801136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801136c:	2101      	movs	r1, #1
 801136e:	4630      	mov	r0, r6
 8011370:	75b5      	strb	r5, [r6, #22]
 8011372:	7571      	strb	r1, [r6, #21]
 8011374:	60e5      	str	r5, [r4, #12]
 8011376:	f7fe fe39 	bl	800ffec <ucdr_align_to>
 801137a:	4630      	mov	r0, r6
 801137c:	9901      	ldr	r1, [sp, #4]
 801137e:	f7fe fe6d 	bl	801005c <ucdr_advance_buffer>
 8011382:	4628      	mov	r0, r5
 8011384:	b003      	add	sp, #12
 8011386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011388 <_Header__cdr_serialize>:
 8011388:	b308      	cbz	r0, 80113ce <_Header__cdr_serialize+0x46>
 801138a:	b570      	push	{r4, r5, r6, lr}
 801138c:	4604      	mov	r4, r0
 801138e:	460d      	mov	r5, r1
 8011390:	f7fd fb74 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011394:	4603      	mov	r3, r0
 8011396:	4629      	mov	r1, r5
 8011398:	4620      	mov	r0, r4
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	689b      	ldr	r3, [r3, #8]
 801139e:	4798      	blx	r3
 80113a0:	68a6      	ldr	r6, [r4, #8]
 80113a2:	b15e      	cbz	r6, 80113bc <_Header__cdr_serialize+0x34>
 80113a4:	4630      	mov	r0, r6
 80113a6:	f7ee ffa5 	bl	80002f4 <strlen>
 80113aa:	4603      	mov	r3, r0
 80113ac:	1c42      	adds	r2, r0, #1
 80113ae:	4631      	mov	r1, r6
 80113b0:	4628      	mov	r0, r5
 80113b2:	60e3      	str	r3, [r4, #12]
 80113b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113b8:	f000 bc3a 	b.w	8011c30 <ucdr_serialize_sequence_char>
 80113bc:	4633      	mov	r3, r6
 80113be:	4632      	mov	r2, r6
 80113c0:	4631      	mov	r1, r6
 80113c2:	4628      	mov	r0, r5
 80113c4:	60e3      	str	r3, [r4, #12]
 80113c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113ca:	f000 bc31 	b.w	8011c30 <ucdr_serialize_sequence_char>
 80113ce:	4770      	bx	lr

080113d0 <_Header__get_serialized_size>:
 80113d0:	b538      	push	{r3, r4, r5, lr}
 80113d2:	4604      	mov	r4, r0
 80113d4:	b150      	cbz	r0, 80113ec <_Header__get_serialized_size+0x1c>
 80113d6:	2100      	movs	r1, #0
 80113d8:	f7fd faec 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 80113dc:	2104      	movs	r1, #4
 80113de:	4605      	mov	r5, r0
 80113e0:	f7fe fdec 	bl	800ffbc <ucdr_alignment>
 80113e4:	68e2      	ldr	r2, [r4, #12]
 80113e6:	3205      	adds	r2, #5
 80113e8:	1953      	adds	r3, r2, r5
 80113ea:	4418      	add	r0, r3
 80113ec:	bd38      	pop	{r3, r4, r5, pc}
 80113ee:	bf00      	nop

080113f0 <max_serialized_size_std_msgs__msg__Header>:
 80113f0:	2301      	movs	r3, #1
 80113f2:	b510      	push	{r4, lr}
 80113f4:	7003      	strb	r3, [r0, #0]
 80113f6:	4604      	mov	r4, r0
 80113f8:	f7fd fb2c 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 80113fc:	2300      	movs	r3, #0
 80113fe:	7023      	strb	r3, [r4, #0]
 8011400:	bd10      	pop	{r4, pc}
 8011402:	bf00      	nop

08011404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011404:	4800      	ldr	r0, [pc, #0]	@ (8011408 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011406:	4770      	bx	lr
 8011408:	24000e9c 	.word	0x24000e9c

0801140c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 801140c:	4b04      	ldr	r3, [pc, #16]	@ (8011420 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	b10a      	cbz	r2, 8011416 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 8011412:	4803      	ldr	r0, [pc, #12]	@ (8011420 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 8011414:	4770      	bx	lr
 8011416:	4a03      	ldr	r2, [pc, #12]	@ (8011424 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 8011418:	4801      	ldr	r0, [pc, #4]	@ (8011420 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801141a:	6812      	ldr	r2, [r2, #0]
 801141c:	601a      	str	r2, [r3, #0]
 801141e:	4770      	bx	lr
 8011420:	24000ecc 	.word	0x24000ecc
 8011424:	24000e10 	.word	0x24000e10

08011428 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011428:	4a02      	ldr	r2, [pc, #8]	@ (8011434 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 801142a:	4b03      	ldr	r3, [pc, #12]	@ (8011438 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 801142c:	6812      	ldr	r2, [r2, #0]
 801142e:	601a      	str	r2, [r3, #0]
 8011430:	4770      	bx	lr
 8011432:	bf00      	nop
 8011434:	24000e10 	.word	0x24000e10
 8011438:	24000ecc 	.word	0x24000ecc

0801143c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 801143c:	4b04      	ldr	r3, [pc, #16]	@ (8011450 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	b10a      	cbz	r2, 8011446 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 8011442:	4803      	ldr	r0, [pc, #12]	@ (8011450 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 8011444:	4770      	bx	lr
 8011446:	4a03      	ldr	r2, [pc, #12]	@ (8011454 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 8011448:	4801      	ldr	r0, [pc, #4]	@ (8011450 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 801144a:	6812      	ldr	r2, [r2, #0]
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	4770      	bx	lr
 8011450:	24000ee0 	.word	0x24000ee0
 8011454:	24000e10 	.word	0x24000e10

08011458 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8011458:	4a02      	ldr	r2, [pc, #8]	@ (8011464 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 801145a:	4b03      	ldr	r3, [pc, #12]	@ (8011468 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 801145c:	6812      	ldr	r2, [r2, #0]
 801145e:	601a      	str	r2, [r3, #0]
 8011460:	4770      	bx	lr
 8011462:	bf00      	nop
 8011464:	24000e10 	.word	0x24000e10
 8011468:	24000ee0 	.word	0x24000ee0

0801146c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 801146c:	4b04      	ldr	r3, [pc, #16]	@ (8011480 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	b10a      	cbz	r2, 8011476 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 8011472:	4803      	ldr	r0, [pc, #12]	@ (8011480 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8011474:	4770      	bx	lr
 8011476:	4a03      	ldr	r2, [pc, #12]	@ (8011484 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8011478:	4801      	ldr	r0, [pc, #4]	@ (8011480 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 801147a:	6812      	ldr	r2, [r2, #0]
 801147c:	601a      	str	r2, [r3, #0]
 801147e:	4770      	bx	lr
 8011480:	24000ef4 	.word	0x24000ef4
 8011484:	24000e10 	.word	0x24000e10

08011488 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011488:	4a02      	ldr	r2, [pc, #8]	@ (8011494 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 801148a:	4b03      	ldr	r3, [pc, #12]	@ (8011498 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 801148c:	6812      	ldr	r2, [r2, #0]
 801148e:	601a      	str	r2, [r3, #0]
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	24000e10 	.word	0x24000e10
 8011498:	24000ef4 	.word	0x24000ef4

0801149c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801149c:	4b04      	ldr	r3, [pc, #16]	@ (80114b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	b10a      	cbz	r2, 80114a6 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 80114a2:	4803      	ldr	r0, [pc, #12]	@ (80114b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 80114a4:	4770      	bx	lr
 80114a6:	4a03      	ldr	r2, [pc, #12]	@ (80114b4 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 80114a8:	4801      	ldr	r0, [pc, #4]	@ (80114b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 80114aa:	6812      	ldr	r2, [r2, #0]
 80114ac:	601a      	str	r2, [r3, #0]
 80114ae:	4770      	bx	lr
 80114b0:	24000f08 	.word	0x24000f08
 80114b4:	24000e10 	.word	0x24000e10

080114b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80114b8:	4a02      	ldr	r2, [pc, #8]	@ (80114c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 80114ba:	4b03      	ldr	r3, [pc, #12]	@ (80114c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 80114bc:	6812      	ldr	r2, [r2, #0]
 80114be:	601a      	str	r2, [r3, #0]
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	24000e10 	.word	0x24000e10
 80114c8:	24000f08 	.word	0x24000f08

080114cc <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 80114cc:	f005 bfde 	b.w	801748c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

080114d0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 80114d0:	f006 b800 	b.w	80174d4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

080114d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80114d4:	b510      	push	{r4, lr}
 80114d6:	4c08      	ldr	r4, [pc, #32]	@ (80114f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 80114d8:	f7ff feec 	bl	80112b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80114dc:	60e0      	str	r0, [r4, #12]
 80114de:	f006 f865 	bl	80175ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80114e2:	4b06      	ldr	r3, [pc, #24]	@ (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80114e4:	64a0      	str	r0, [r4, #72]	@ 0x48
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	b10a      	cbz	r2, 80114ee <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 80114ea:	4804      	ldr	r0, [pc, #16]	@ (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80114ec:	bd10      	pop	{r4, pc}
 80114ee:	4a04      	ldr	r2, [pc, #16]	@ (8011500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 80114f0:	4802      	ldr	r0, [pc, #8]	@ (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80114f2:	6812      	ldr	r2, [r2, #0]
 80114f4:	601a      	str	r2, [r3, #0]
 80114f6:	bd10      	pop	{r4, pc}
 80114f8:	24000f14 	.word	0x24000f14
 80114fc:	24000f8c 	.word	0x24000f8c
 8011500:	24000e14 	.word	0x24000e14

08011504 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8011504:	f005 bff2 	b.w	80174ec <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08011508 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8011508:	f006 b814 	b.w	8017534 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

0801150c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 801150c:	b510      	push	{r4, lr}
 801150e:	4c08      	ldr	r4, [pc, #32]	@ (8011530 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 8011510:	f7ff fed0 	bl	80112b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011514:	60e0      	str	r0, [r4, #12]
 8011516:	f006 f85b 	bl	80175d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801151a:	4b06      	ldr	r3, [pc, #24]	@ (8011534 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 801151c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	b10a      	cbz	r2, 8011526 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 8011522:	4804      	ldr	r0, [pc, #16]	@ (8011534 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 8011524:	bd10      	pop	{r4, pc}
 8011526:	4a04      	ldr	r2, [pc, #16]	@ (8011538 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 8011528:	4802      	ldr	r0, [pc, #8]	@ (8011534 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 801152a:	6812      	ldr	r2, [r2, #0]
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	bd10      	pop	{r4, pc}
 8011530:	24000f98 	.word	0x24000f98
 8011534:	24001010 	.word	0x24001010
 8011538:	24000e14 	.word	0x24000e14

0801153c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 801153c:	f006 b806 	b.w	801754c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

08011540 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 8011540:	f006 b816 	b.w	8017570 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

08011544 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011544:	b508      	push	{r3, lr}
 8011546:	f7fd fa27 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801154a:	4b06      	ldr	r3, [pc, #24]	@ (8011564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801154c:	4906      	ldr	r1, [pc, #24]	@ (8011568 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 801154e:	681a      	ldr	r2, [r3, #0]
 8011550:	60c8      	str	r0, [r1, #12]
 8011552:	b10a      	cbz	r2, 8011558 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8011554:	4803      	ldr	r0, [pc, #12]	@ (8011564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8011556:	bd08      	pop	{r3, pc}
 8011558:	4a04      	ldr	r2, [pc, #16]	@ (801156c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 801155a:	4802      	ldr	r0, [pc, #8]	@ (8011564 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801155c:	6812      	ldr	r2, [r2, #0]
 801155e:	601a      	str	r2, [r3, #0]
 8011560:	bd08      	pop	{r3, pc}
 8011562:	bf00      	nop
 8011564:	24001094 	.word	0x24001094
 8011568:	2400101c 	.word	0x2400101c
 801156c:	24000e14 	.word	0x24000e14

08011570 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8011570:	f006 b802 	b.w	8017578 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08011574 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8011574:	f006 b812 	b.w	801759c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08011578 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8011578:	b508      	push	{r3, lr}
 801157a:	f7fd fa0d 	bl	800e998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801157e:	4b06      	ldr	r3, [pc, #24]	@ (8011598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011580:	4906      	ldr	r1, [pc, #24]	@ (801159c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	60c8      	str	r0, [r1, #12]
 8011586:	b10a      	cbz	r2, 801158c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8011588:	4803      	ldr	r0, [pc, #12]	@ (8011598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801158a:	bd08      	pop	{r3, pc}
 801158c:	4a04      	ldr	r2, [pc, #16]	@ (80115a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 801158e:	4802      	ldr	r0, [pc, #8]	@ (8011598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8011590:	6812      	ldr	r2, [r2, #0]
 8011592:	601a      	str	r2, [r3, #0]
 8011594:	bd08      	pop	{r3, pc}
 8011596:	bf00      	nop
 8011598:	24001118 	.word	0x24001118
 801159c:	240010a0 	.word	0x240010a0
 80115a0:	24000e14 	.word	0x24000e14

080115a4 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	4604      	mov	r4, r0
 80115a8:	b150      	cbz	r0, 80115c0 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 80115aa:	460d      	mov	r5, r1
 80115ac:	f7ff fea6 	bl	80112fc <get_serialized_size_std_msgs__msg__Header>
 80115b0:	4603      	mov	r3, r0
 80115b2:	f104 0018 	add.w	r0, r4, #24
 80115b6:	461c      	mov	r4, r3
 80115b8:	18e9      	adds	r1, r5, r3
 80115ba:	f006 f817 	bl	80175ec <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80115be:	4420      	add	r0, r4
 80115c0:	bd38      	pop	{r3, r4, r5, pc}
 80115c2:	bf00      	nop

080115c4 <_ActuationCommandStamped__cdr_deserialize>:
 80115c4:	b570      	push	{r4, r5, r6, lr}
 80115c6:	460c      	mov	r4, r1
 80115c8:	b199      	cbz	r1, 80115f2 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 80115ca:	4605      	mov	r5, r0
 80115cc:	f7ff ff1a 	bl	8011404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80115d0:	4603      	mov	r3, r0
 80115d2:	4621      	mov	r1, r4
 80115d4:	4628      	mov	r0, r5
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	4798      	blx	r3
 80115dc:	f006 f88e 	bl	80176fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80115e0:	4603      	mov	r3, r0
 80115e2:	f104 0118 	add.w	r1, r4, #24
 80115e6:	4628      	mov	r0, r5
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	4718      	bx	r3
 80115f2:	4608      	mov	r0, r1
 80115f4:	bd70      	pop	{r4, r5, r6, pc}
 80115f6:	bf00      	nop

080115f8 <_ActuationCommandStamped__cdr_serialize>:
 80115f8:	b510      	push	{r4, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	9101      	str	r1, [sp, #4]
 80115fe:	b1a0      	cbz	r0, 801162a <_ActuationCommandStamped__cdr_serialize+0x32>
 8011600:	4604      	mov	r4, r0
 8011602:	f7ff feff 	bl	8011404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011606:	4603      	mov	r3, r0
 8011608:	9901      	ldr	r1, [sp, #4]
 801160a:	4620      	mov	r0, r4
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	689b      	ldr	r3, [r3, #8]
 8011610:	4798      	blx	r3
 8011612:	f006 f873 	bl	80176fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8011616:	4603      	mov	r3, r0
 8011618:	9901      	ldr	r1, [sp, #4]
 801161a:	f104 0018 	add.w	r0, r4, #24
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	b002      	add	sp, #8
 8011624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011628:	4718      	bx	r3
 801162a:	b002      	add	sp, #8
 801162c:	bd10      	pop	{r4, pc}
 801162e:	bf00      	nop

08011630 <_ActuationCommandStamped__get_serialized_size>:
 8011630:	b510      	push	{r4, lr}
 8011632:	4604      	mov	r4, r0
 8011634:	b148      	cbz	r0, 801164a <_ActuationCommandStamped__get_serialized_size+0x1a>
 8011636:	2100      	movs	r1, #0
 8011638:	f7ff fe60 	bl	80112fc <get_serialized_size_std_msgs__msg__Header>
 801163c:	4601      	mov	r1, r0
 801163e:	f104 0018 	add.w	r0, r4, #24
 8011642:	460c      	mov	r4, r1
 8011644:	f005 ffd2 	bl	80175ec <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8011648:	4420      	add	r0, r4
 801164a:	bd10      	pop	{r4, pc}

0801164c <_ActuationCommandStamped__max_serialized_size>:
 801164c:	b510      	push	{r4, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	2301      	movs	r3, #1
 8011652:	2100      	movs	r1, #0
 8011654:	f10d 0007 	add.w	r0, sp, #7
 8011658:	f88d 3007 	strb.w	r3, [sp, #7]
 801165c:	f7ff fec8 	bl	80113f0 <max_serialized_size_std_msgs__msg__Header>
 8011660:	4604      	mov	r4, r0
 8011662:	f10d 0007 	add.w	r0, sp, #7
 8011666:	4621      	mov	r1, r4
 8011668:	f006 f82e 	bl	80176c8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801166c:	4420      	add	r0, r4
 801166e:	b002      	add	sp, #8
 8011670:	bd10      	pop	{r4, pc}
 8011672:	bf00      	nop

08011674 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8011674:	4800      	ldr	r0, [pc, #0]	@ (8011678 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8011676:	4770      	bx	lr
 8011678:	24001124 	.word	0x24001124

0801167c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 801167c:	b538      	push	{r3, r4, r5, lr}
 801167e:	4604      	mov	r4, r0
 8011680:	b150      	cbz	r0, 8011698 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8011682:	460d      	mov	r5, r1
 8011684:	f7ff fe3a 	bl	80112fc <get_serialized_size_std_msgs__msg__Header>
 8011688:	4603      	mov	r3, r0
 801168a:	f104 0018 	add.w	r0, r4, #24
 801168e:	461c      	mov	r4, r3
 8011690:	18e9      	adds	r1, r5, r3
 8011692:	f006 f837 	bl	8017704 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011696:	4420      	add	r0, r4
 8011698:	bd38      	pop	{r3, r4, r5, pc}
 801169a:	bf00      	nop

0801169c <_ActuationStatusStamped__cdr_deserialize>:
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	460c      	mov	r4, r1
 80116a0:	b199      	cbz	r1, 80116ca <_ActuationStatusStamped__cdr_deserialize+0x2e>
 80116a2:	4605      	mov	r5, r0
 80116a4:	f7ff feae 	bl	8011404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80116a8:	4603      	mov	r3, r0
 80116aa:	4621      	mov	r1, r4
 80116ac:	4628      	mov	r0, r5
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	4798      	blx	r3
 80116b4:	f006 f8ae 	bl	8017814 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80116b8:	4603      	mov	r3, r0
 80116ba:	f104 0118 	add.w	r1, r4, #24
 80116be:	4628      	mov	r0, r5
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	4718      	bx	r3
 80116ca:	4608      	mov	r0, r1
 80116cc:	bd70      	pop	{r4, r5, r6, pc}
 80116ce:	bf00      	nop

080116d0 <_ActuationStatusStamped__cdr_serialize>:
 80116d0:	b510      	push	{r4, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	9101      	str	r1, [sp, #4]
 80116d6:	b1a0      	cbz	r0, 8011702 <_ActuationStatusStamped__cdr_serialize+0x32>
 80116d8:	4604      	mov	r4, r0
 80116da:	f7ff fe93 	bl	8011404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80116de:	4603      	mov	r3, r0
 80116e0:	9901      	ldr	r1, [sp, #4]
 80116e2:	4620      	mov	r0, r4
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	4798      	blx	r3
 80116ea:	f006 f893 	bl	8017814 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80116ee:	4603      	mov	r3, r0
 80116f0:	9901      	ldr	r1, [sp, #4]
 80116f2:	f104 0018 	add.w	r0, r4, #24
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	689b      	ldr	r3, [r3, #8]
 80116fa:	b002      	add	sp, #8
 80116fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011700:	4718      	bx	r3
 8011702:	b002      	add	sp, #8
 8011704:	bd10      	pop	{r4, pc}
 8011706:	bf00      	nop

08011708 <_ActuationStatusStamped__get_serialized_size>:
 8011708:	b510      	push	{r4, lr}
 801170a:	4604      	mov	r4, r0
 801170c:	b148      	cbz	r0, 8011722 <_ActuationStatusStamped__get_serialized_size+0x1a>
 801170e:	2100      	movs	r1, #0
 8011710:	f7ff fdf4 	bl	80112fc <get_serialized_size_std_msgs__msg__Header>
 8011714:	4601      	mov	r1, r0
 8011716:	f104 0018 	add.w	r0, r4, #24
 801171a:	460c      	mov	r4, r1
 801171c:	f005 fff2 	bl	8017704 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011720:	4420      	add	r0, r4
 8011722:	bd10      	pop	{r4, pc}

08011724 <_ActuationStatusStamped__max_serialized_size>:
 8011724:	b510      	push	{r4, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	2301      	movs	r3, #1
 801172a:	2100      	movs	r1, #0
 801172c:	f10d 0007 	add.w	r0, sp, #7
 8011730:	f88d 3007 	strb.w	r3, [sp, #7]
 8011734:	f7ff fe5c 	bl	80113f0 <max_serialized_size_std_msgs__msg__Header>
 8011738:	4604      	mov	r4, r0
 801173a:	f10d 0007 	add.w	r0, sp, #7
 801173e:	4621      	mov	r1, r4
 8011740:	f006 f84e 	bl	80177e0 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8011744:	4420      	add	r0, r4
 8011746:	b002      	add	sp, #8
 8011748:	bd10      	pop	{r4, pc}
 801174a:	bf00      	nop

0801174c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 801174c:	4800      	ldr	r0, [pc, #0]	@ (8011750 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 801174e:	4770      	bx	lr
 8011750:	2400114c 	.word	0x2400114c

08011754 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011754:	b538      	push	{r3, r4, r5, lr}
 8011756:	b158      	cbz	r0, 8011770 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 8011758:	460d      	mov	r5, r1
 801175a:	f7fd f92b 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 801175e:	2104      	movs	r1, #4
 8011760:	182c      	adds	r4, r5, r0
 8011762:	f1c5 0504 	rsb	r5, r5, #4
 8011766:	4620      	mov	r0, r4
 8011768:	f7fe fc28 	bl	800ffbc <ucdr_alignment>
 801176c:	4428      	add	r0, r5
 801176e:	4420      	add	r0, r4
 8011770:	bd38      	pop	{r3, r4, r5, pc}
 8011772:	bf00      	nop

08011774 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8011774:	b538      	push	{r3, r4, r5, lr}
 8011776:	460c      	mov	r4, r1
 8011778:	b179      	cbz	r1, 801179a <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 801177a:	4605      	mov	r5, r0
 801177c:	f7fd f97e 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011780:	4603      	mov	r3, r0
 8011782:	4621      	mov	r1, r4
 8011784:	4628      	mov	r0, r5
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	4798      	blx	r3
 801178c:	f104 0108 	add.w	r1, r4, #8
 8011790:	4628      	mov	r0, r5
 8011792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011796:	f7fe b993 	b.w	800fac0 <ucdr_deserialize_float>
 801179a:	4608      	mov	r0, r1
 801179c:	bd38      	pop	{r3, r4, r5, pc}
 801179e:	bf00      	nop

080117a0 <_SteeringWheelStatusStamped__cdr_serialize>:
 80117a0:	b188      	cbz	r0, 80117c6 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 80117a2:	b538      	push	{r3, r4, r5, lr}
 80117a4:	4604      	mov	r4, r0
 80117a6:	460d      	mov	r5, r1
 80117a8:	f7fd f968 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80117ac:	4603      	mov	r3, r0
 80117ae:	4629      	mov	r1, r5
 80117b0:	4620      	mov	r0, r4
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	689b      	ldr	r3, [r3, #8]
 80117b6:	4798      	blx	r3
 80117b8:	ed94 0a02 	vldr	s0, [r4, #8]
 80117bc:	4628      	mov	r0, r5
 80117be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117c2:	f7fe b8e5 	b.w	800f990 <ucdr_serialize_float>
 80117c6:	4770      	bx	lr

080117c8 <_SteeringWheelStatusStamped__get_serialized_size>:
 80117c8:	b150      	cbz	r0, 80117e0 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 80117ca:	2100      	movs	r1, #0
 80117cc:	b510      	push	{r4, lr}
 80117ce:	f7fd f8f1 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 80117d2:	4604      	mov	r4, r0
 80117d4:	2104      	movs	r1, #4
 80117d6:	f7fe fbf1 	bl	800ffbc <ucdr_alignment>
 80117da:	4420      	add	r0, r4
 80117dc:	3004      	adds	r0, #4
 80117de:	bd10      	pop	{r4, pc}
 80117e0:	4770      	bx	lr
 80117e2:	bf00      	nop

080117e4 <_SteeringWheelStatusStamped__max_serialized_size>:
 80117e4:	b510      	push	{r4, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	2301      	movs	r3, #1
 80117ea:	2100      	movs	r1, #0
 80117ec:	f10d 0007 	add.w	r0, sp, #7
 80117f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80117f4:	f7fd f92e 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 80117f8:	4604      	mov	r4, r0
 80117fa:	2104      	movs	r1, #4
 80117fc:	f7fe fbde 	bl	800ffbc <ucdr_alignment>
 8011800:	4420      	add	r0, r4
 8011802:	3004      	adds	r0, #4
 8011804:	b002      	add	sp, #8
 8011806:	bd10      	pop	{r4, pc}

08011808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8011808:	4800      	ldr	r0, [pc, #0]	@ (801180c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 801180a:	4770      	bx	lr
 801180c:	24001174 	.word	0x24001174

08011810 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	b158      	cbz	r0, 801182c <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 8011814:	460d      	mov	r5, r1
 8011816:	f7fd f8cd 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 801181a:	2101      	movs	r1, #1
 801181c:	182c      	adds	r4, r5, r0
 801181e:	f1c5 0501 	rsb	r5, r5, #1
 8011822:	4620      	mov	r0, r4
 8011824:	f7fe fbca 	bl	800ffbc <ucdr_alignment>
 8011828:	4428      	add	r0, r5
 801182a:	4420      	add	r0, r4
 801182c:	bd38      	pop	{r3, r4, r5, pc}
 801182e:	bf00      	nop

08011830 <_VehicleEmergencyStamped__cdr_deserialize>:
 8011830:	b538      	push	{r3, r4, r5, lr}
 8011832:	460c      	mov	r4, r1
 8011834:	b179      	cbz	r1, 8011856 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 8011836:	4605      	mov	r5, r0
 8011838:	f7fd f920 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801183c:	4603      	mov	r3, r0
 801183e:	4621      	mov	r1, r4
 8011840:	4628      	mov	r0, r5
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	4798      	blx	r3
 8011848:	f104 0108 	add.w	r1, r4, #8
 801184c:	4628      	mov	r0, r5
 801184e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011852:	f7fd b92d 	b.w	800eab0 <ucdr_deserialize_bool>
 8011856:	4608      	mov	r0, r1
 8011858:	bd38      	pop	{r3, r4, r5, pc}
 801185a:	bf00      	nop

0801185c <_VehicleEmergencyStamped__cdr_serialize>:
 801185c:	b180      	cbz	r0, 8011880 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 801185e:	b538      	push	{r3, r4, r5, lr}
 8011860:	4604      	mov	r4, r0
 8011862:	460d      	mov	r5, r1
 8011864:	f7fd f90a 	bl	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011868:	4603      	mov	r3, r0
 801186a:	4629      	mov	r1, r5
 801186c:	4620      	mov	r0, r4
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	4798      	blx	r3
 8011874:	7a21      	ldrb	r1, [r4, #8]
 8011876:	4628      	mov	r0, r5
 8011878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801187c:	f7fd b902 	b.w	800ea84 <ucdr_serialize_bool>
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop

08011884 <_VehicleEmergencyStamped__get_serialized_size>:
 8011884:	b150      	cbz	r0, 801189c <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8011886:	2100      	movs	r1, #0
 8011888:	b510      	push	{r4, lr}
 801188a:	f7fd f893 	bl	800e9b4 <get_serialized_size_builtin_interfaces__msg__Time>
 801188e:	4604      	mov	r4, r0
 8011890:	2101      	movs	r1, #1
 8011892:	f7fe fb93 	bl	800ffbc <ucdr_alignment>
 8011896:	4420      	add	r0, r4
 8011898:	3001      	adds	r0, #1
 801189a:	bd10      	pop	{r4, pc}
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop

080118a0 <_VehicleEmergencyStamped__max_serialized_size>:
 80118a0:	b510      	push	{r4, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	2401      	movs	r4, #1
 80118a6:	2100      	movs	r1, #0
 80118a8:	f10d 0007 	add.w	r0, sp, #7
 80118ac:	f88d 4007 	strb.w	r4, [sp, #7]
 80118b0:	f7fd f8d0 	bl	800ea54 <max_serialized_size_builtin_interfaces__msg__Time>
 80118b4:	4621      	mov	r1, r4
 80118b6:	4604      	mov	r4, r0
 80118b8:	f7fe fb80 	bl	800ffbc <ucdr_alignment>
 80118bc:	4420      	add	r0, r4
 80118be:	3001      	adds	r0, #1
 80118c0:	b002      	add	sp, #8
 80118c2:	bd10      	pop	{r4, pc}

080118c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80118c4:	4800      	ldr	r0, [pc, #0]	@ (80118c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 80118c6:	4770      	bx	lr
 80118c8:	2400119c 	.word	0x2400119c

080118cc <autoware_control_msgs__msg__Control__init>:
 80118cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118d0:	4605      	mov	r5, r0
 80118d2:	b3c0      	cbz	r0, 8011946 <autoware_control_msgs__msg__Control__init+0x7a>
 80118d4:	f000 f9a6 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 80118d8:	4604      	mov	r4, r0
 80118da:	b310      	cbz	r0, 8011922 <autoware_control_msgs__msg__Control__init+0x56>
 80118dc:	f105 0608 	add.w	r6, r5, #8
 80118e0:	4630      	mov	r0, r6
 80118e2:	f000 f99f 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 80118e6:	4604      	mov	r4, r0
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d040      	beq.n	801196e <autoware_control_msgs__msg__Control__init+0xa2>
 80118ec:	f105 0710 	add.w	r7, r5, #16
 80118f0:	4638      	mov	r0, r7
 80118f2:	f000 f855 	bl	80119a0 <autoware_control_msgs__msg__Lateral__init>
 80118f6:	4604      	mov	r4, r0
 80118f8:	b348      	cbz	r0, 801194e <autoware_control_msgs__msg__Control__init+0x82>
 80118fa:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 80118fe:	4640      	mov	r0, r8
 8011900:	f000 f87e 	bl	8011a00 <autoware_control_msgs__msg__Longitudinal__init>
 8011904:	4604      	mov	r4, r0
 8011906:	b9d8      	cbnz	r0, 8011940 <autoware_control_msgs__msg__Control__init+0x74>
 8011908:	4628      	mov	r0, r5
 801190a:	f000 f98f 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 801190e:	4630      	mov	r0, r6
 8011910:	f000 f98c 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011914:	4638      	mov	r0, r7
 8011916:	f000 f867 	bl	80119e8 <autoware_control_msgs__msg__Lateral__fini>
 801191a:	4640      	mov	r0, r8
 801191c:	f000 f894 	bl	8011a48 <autoware_control_msgs__msg__Longitudinal__fini>
 8011920:	e00e      	b.n	8011940 <autoware_control_msgs__msg__Control__init+0x74>
 8011922:	4628      	mov	r0, r5
 8011924:	f000 f982 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011928:	f105 0008 	add.w	r0, r5, #8
 801192c:	f000 f97e 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011930:	f105 0010 	add.w	r0, r5, #16
 8011934:	f000 f858 	bl	80119e8 <autoware_control_msgs__msg__Lateral__fini>
 8011938:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 801193c:	f000 f884 	bl	8011a48 <autoware_control_msgs__msg__Longitudinal__fini>
 8011940:	4620      	mov	r0, r4
 8011942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011946:	4604      	mov	r4, r0
 8011948:	4620      	mov	r0, r4
 801194a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801194e:	4628      	mov	r0, r5
 8011950:	f000 f96c 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011954:	4630      	mov	r0, r6
 8011956:	f000 f969 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 801195a:	4638      	mov	r0, r7
 801195c:	f000 f844 	bl	80119e8 <autoware_control_msgs__msg__Lateral__fini>
 8011960:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8011964:	f000 f870 	bl	8011a48 <autoware_control_msgs__msg__Longitudinal__fini>
 8011968:	4620      	mov	r0, r4
 801196a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801196e:	4628      	mov	r0, r5
 8011970:	f000 f95c 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011974:	4630      	mov	r0, r6
 8011976:	e7d9      	b.n	801192c <autoware_control_msgs__msg__Control__init+0x60>

08011978 <autoware_control_msgs__msg__Control__fini>:
 8011978:	b188      	cbz	r0, 801199e <autoware_control_msgs__msg__Control__fini+0x26>
 801197a:	b510      	push	{r4, lr}
 801197c:	4604      	mov	r4, r0
 801197e:	f000 f955 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011982:	f104 0008 	add.w	r0, r4, #8
 8011986:	f000 f951 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 801198a:	f104 0010 	add.w	r0, r4, #16
 801198e:	f000 f82b 	bl	80119e8 <autoware_control_msgs__msg__Lateral__fini>
 8011992:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8011996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801199a:	f000 b855 	b.w	8011a48 <autoware_control_msgs__msg__Longitudinal__fini>
 801199e:	4770      	bx	lr

080119a0 <autoware_control_msgs__msg__Lateral__init>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	4605      	mov	r5, r0
 80119a4:	b1a8      	cbz	r0, 80119d2 <autoware_control_msgs__msg__Lateral__init+0x32>
 80119a6:	f000 f93d 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 80119aa:	4604      	mov	r4, r0
 80119ac:	b140      	cbz	r0, 80119c0 <autoware_control_msgs__msg__Lateral__init+0x20>
 80119ae:	f105 0608 	add.w	r6, r5, #8
 80119b2:	4630      	mov	r0, r6
 80119b4:	f000 f936 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 80119b8:	4604      	mov	r4, r0
 80119ba:	b168      	cbz	r0, 80119d8 <autoware_control_msgs__msg__Lateral__init+0x38>
 80119bc:	4620      	mov	r0, r4
 80119be:	bd70      	pop	{r4, r5, r6, pc}
 80119c0:	4628      	mov	r0, r5
 80119c2:	f000 f933 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 80119c6:	f105 0008 	add.w	r0, r5, #8
 80119ca:	f000 f92f 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 80119ce:	4620      	mov	r0, r4
 80119d0:	bd70      	pop	{r4, r5, r6, pc}
 80119d2:	4604      	mov	r4, r0
 80119d4:	4620      	mov	r0, r4
 80119d6:	bd70      	pop	{r4, r5, r6, pc}
 80119d8:	4628      	mov	r0, r5
 80119da:	f000 f927 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 80119de:	4630      	mov	r0, r6
 80119e0:	f000 f924 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 80119e4:	e7ea      	b.n	80119bc <autoware_control_msgs__msg__Lateral__init+0x1c>
 80119e6:	bf00      	nop

080119e8 <autoware_control_msgs__msg__Lateral__fini>:
 80119e8:	b148      	cbz	r0, 80119fe <autoware_control_msgs__msg__Lateral__fini+0x16>
 80119ea:	b510      	push	{r4, lr}
 80119ec:	4604      	mov	r4, r0
 80119ee:	f000 f91d 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 80119f2:	f104 0008 	add.w	r0, r4, #8
 80119f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119fa:	f000 b917 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 80119fe:	4770      	bx	lr

08011a00 <autoware_control_msgs__msg__Longitudinal__init>:
 8011a00:	b570      	push	{r4, r5, r6, lr}
 8011a02:	4605      	mov	r5, r0
 8011a04:	b1a8      	cbz	r0, 8011a32 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 8011a06:	f000 f90d 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	b140      	cbz	r0, 8011a20 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8011a0e:	f105 0608 	add.w	r6, r5, #8
 8011a12:	4630      	mov	r0, r6
 8011a14:	f000 f906 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011a18:	4604      	mov	r4, r0
 8011a1a:	b168      	cbz	r0, 8011a38 <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	4628      	mov	r0, r5
 8011a22:	f000 f903 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011a26:	f105 0008 	add.w	r0, r5, #8
 8011a2a:	f000 f8ff 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011a2e:	4620      	mov	r0, r4
 8011a30:	bd70      	pop	{r4, r5, r6, pc}
 8011a32:	4604      	mov	r4, r0
 8011a34:	4620      	mov	r0, r4
 8011a36:	bd70      	pop	{r4, r5, r6, pc}
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f000 f8f7 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f000 f8f4 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011a44:	e7ea      	b.n	8011a1c <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8011a46:	bf00      	nop

08011a48 <autoware_control_msgs__msg__Longitudinal__fini>:
 8011a48:	b148      	cbz	r0, 8011a5e <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8011a4a:	b510      	push	{r4, lr}
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	f000 f8ed 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011a52:	f104 0008 	add.w	r0, r4, #8
 8011a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a5a:	f000 b8e7 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011a5e:	4770      	bx	lr

08011a60 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8011a60:	b538      	push	{r3, r4, r5, lr}
 8011a62:	4604      	mov	r4, r0
 8011a64:	b128      	cbz	r0, 8011a72 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8011a66:	f000 f8dd 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011a6a:	4605      	mov	r5, r0
 8011a6c:	b120      	cbz	r0, 8011a78 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8011a6e:	4628      	mov	r0, r5
 8011a70:	bd38      	pop	{r3, r4, r5, pc}
 8011a72:	4605      	mov	r5, r0
 8011a74:	4628      	mov	r0, r5
 8011a76:	bd38      	pop	{r3, r4, r5, pc}
 8011a78:	4620      	mov	r0, r4
 8011a7a:	f000 f8d7 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011a7e:	4628      	mov	r0, r5
 8011a80:	bd38      	pop	{r3, r4, r5, pc}
 8011a82:	bf00      	nop

08011a84 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8011a84:	b108      	cbz	r0, 8011a8a <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8011a86:	f000 b8d1 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011a8a:	4770      	bx	lr

08011a8c <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8011a8c:	3800      	subs	r0, #0
 8011a8e:	bf18      	it	ne
 8011a90:	2001      	movne	r0, #1
 8011a92:	4770      	bx	lr

08011a94 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop

08011a98 <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8011a98:	b538      	push	{r3, r4, r5, lr}
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	b128      	cbz	r0, 8011aaa <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8011a9e:	f000 f8c1 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	b120      	cbz	r0, 8011ab0 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	bd38      	pop	{r3, r4, r5, pc}
 8011aaa:	4605      	mov	r5, r0
 8011aac:	4628      	mov	r0, r5
 8011aae:	bd38      	pop	{r3, r4, r5, pc}
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	f000 f8bb 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	bd38      	pop	{r3, r4, r5, pc}
 8011aba:	bf00      	nop

08011abc <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8011abc:	b108      	cbz	r0, 8011ac2 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8011abe:	f000 b8b5 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011ac2:	4770      	bx	lr

08011ac4 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	b128      	cbz	r0, 8011ad6 <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 8011aca:	f000 f8ab 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011ace:	4605      	mov	r5, r0
 8011ad0:	b120      	cbz	r0, 8011adc <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	bd38      	pop	{r3, r4, r5, pc}
 8011ad6:	4605      	mov	r5, r0
 8011ad8:	4628      	mov	r0, r5
 8011ada:	bd38      	pop	{r3, r4, r5, pc}
 8011adc:	4620      	mov	r0, r4
 8011ade:	f000 f8a5 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	bd38      	pop	{r3, r4, r5, pc}
 8011ae6:	bf00      	nop

08011ae8 <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8011ae8:	b108      	cbz	r0, 8011aee <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 8011aea:	f000 b89f 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011aee:	4770      	bx	lr

08011af0 <autoware_vehicle_msgs__msg__GearReport__init>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	4604      	mov	r4, r0
 8011af4:	b128      	cbz	r0, 8011b02 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 8011af6:	f000 f895 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011afa:	4605      	mov	r5, r0
 8011afc:	b120      	cbz	r0, 8011b08 <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 8011afe:	4628      	mov	r0, r5
 8011b00:	bd38      	pop	{r3, r4, r5, pc}
 8011b02:	4605      	mov	r5, r0
 8011b04:	4628      	mov	r0, r5
 8011b06:	bd38      	pop	{r3, r4, r5, pc}
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f000 f88f 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011b0e:	4628      	mov	r0, r5
 8011b10:	bd38      	pop	{r3, r4, r5, pc}
 8011b12:	bf00      	nop

08011b14 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8011b14:	b108      	cbz	r0, 8011b1a <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 8011b16:	f000 b889 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011b1a:	4770      	bx	lr

08011b1c <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8011b1c:	b538      	push	{r3, r4, r5, lr}
 8011b1e:	4604      	mov	r4, r0
 8011b20:	b128      	cbz	r0, 8011b2e <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8011b22:	f000 f87f 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011b26:	4605      	mov	r5, r0
 8011b28:	b120      	cbz	r0, 8011b34 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	bd38      	pop	{r3, r4, r5, pc}
 8011b2e:	4605      	mov	r5, r0
 8011b30:	4628      	mov	r0, r5
 8011b32:	bd38      	pop	{r3, r4, r5, pc}
 8011b34:	4620      	mov	r0, r4
 8011b36:	f000 f879 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	bd38      	pop	{r3, r4, r5, pc}
 8011b3e:	bf00      	nop

08011b40 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8011b40:	b108      	cbz	r0, 8011b46 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8011b42:	f000 b873 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011b46:	4770      	bx	lr

08011b48 <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	b128      	cbz	r0, 8011b5a <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8011b4e:	f000 f869 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011b52:	4605      	mov	r5, r0
 8011b54:	b120      	cbz	r0, 8011b60 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 8011b56:	4628      	mov	r0, r5
 8011b58:	bd38      	pop	{r3, r4, r5, pc}
 8011b5a:	4605      	mov	r5, r0
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	bd38      	pop	{r3, r4, r5, pc}
 8011b60:	4620      	mov	r0, r4
 8011b62:	f000 f863 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011b66:	4628      	mov	r0, r5
 8011b68:	bd38      	pop	{r3, r4, r5, pc}
 8011b6a:	bf00      	nop

08011b6c <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8011b6c:	b108      	cbz	r0, 8011b72 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8011b6e:	f000 b85d 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011b72:	4770      	bx	lr

08011b74 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4604      	mov	r4, r0
 8011b78:	b128      	cbz	r0, 8011b86 <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 8011b7a:	f000 f853 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011b7e:	4605      	mov	r5, r0
 8011b80:	b120      	cbz	r0, 8011b8c <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8011b82:	4628      	mov	r0, r5
 8011b84:	bd38      	pop	{r3, r4, r5, pc}
 8011b86:	4605      	mov	r5, r0
 8011b88:	4628      	mov	r0, r5
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	f000 f84d 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011b92:	4628      	mov	r0, r5
 8011b94:	bd38      	pop	{r3, r4, r5, pc}
 8011b96:	bf00      	nop

08011b98 <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8011b98:	b108      	cbz	r0, 8011b9e <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8011b9a:	f000 b847 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011b9e:	4770      	bx	lr

08011ba0 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8011ba0:	b538      	push	{r3, r4, r5, lr}
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	b128      	cbz	r0, 8011bb2 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 8011ba6:	f000 f83d 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011baa:	4605      	mov	r5, r0
 8011bac:	b120      	cbz	r0, 8011bb8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8011bae:	4628      	mov	r0, r5
 8011bb0:	bd38      	pop	{r3, r4, r5, pc}
 8011bb2:	4605      	mov	r5, r0
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	bd38      	pop	{r3, r4, r5, pc}
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f000 f837 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	bd38      	pop	{r3, r4, r5, pc}
 8011bc2:	bf00      	nop

08011bc4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8011bc4:	b108      	cbz	r0, 8011bca <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8011bc6:	f000 b831 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011bca:	4770      	bx	lr

08011bcc <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	4604      	mov	r4, r0
 8011bd0:	b128      	cbz	r0, 8011bde <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8011bd2:	f000 f827 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8011bd6:	4605      	mov	r5, r0
 8011bd8:	b120      	cbz	r0, 8011be4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 8011bda:	4628      	mov	r0, r5
 8011bdc:	bd38      	pop	{r3, r4, r5, pc}
 8011bde:	4605      	mov	r5, r0
 8011be0:	4628      	mov	r0, r5
 8011be2:	bd38      	pop	{r3, r4, r5, pc}
 8011be4:	4620      	mov	r0, r4
 8011be6:	f000 f821 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8011bea:	4628      	mov	r0, r5
 8011bec:	bd38      	pop	{r3, r4, r5, pc}
 8011bee:	bf00      	nop

08011bf0 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8011bf0:	b108      	cbz	r0, 8011bf6 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8011bf2:	f000 b81b 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8011bf6:	4770      	bx	lr

08011bf8 <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8011bf8:	b538      	push	{r3, r4, r5, lr}
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	b128      	cbz	r0, 8011c0a <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 8011bfe:	f005 fc15 	bl	801742c <std_msgs__msg__Header__init>
 8011c02:	4605      	mov	r5, r0
 8011c04:	b120      	cbz	r0, 8011c10 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 8011c06:	4628      	mov	r0, r5
 8011c08:	bd38      	pop	{r3, r4, r5, pc}
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}
 8011c10:	4620      	mov	r0, r4
 8011c12:	f005 fc2f 	bl	8017474 <std_msgs__msg__Header__fini>
 8011c16:	4628      	mov	r0, r5
 8011c18:	bd38      	pop	{r3, r4, r5, pc}
 8011c1a:	bf00      	nop

08011c1c <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8011c1c:	b108      	cbz	r0, 8011c22 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8011c1e:	f005 bc29 	b.w	8017474 <std_msgs__msg__Header__fini>
 8011c22:	4770      	bx	lr

08011c24 <builtin_interfaces__msg__Time__init>:
 8011c24:	3800      	subs	r0, #0
 8011c26:	bf18      	it	ne
 8011c28:	2001      	movne	r0, #1
 8011c2a:	4770      	bx	lr

08011c2c <builtin_interfaces__msg__Time__fini>:
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop

08011c30 <ucdr_serialize_sequence_char>:
 8011c30:	b570      	push	{r4, r5, r6, lr}
 8011c32:	4615      	mov	r5, r2
 8011c34:	460e      	mov	r6, r1
 8011c36:	7d01      	ldrb	r1, [r0, #20]
 8011c38:	4604      	mov	r4, r0
 8011c3a:	f7fd f9ff 	bl	800f03c <ucdr_serialize_endian_uint32_t>
 8011c3e:	b90d      	cbnz	r5, 8011c44 <ucdr_serialize_sequence_char+0x14>
 8011c40:	2001      	movs	r0, #1
 8011c42:	bd70      	pop	{r4, r5, r6, pc}
 8011c44:	462b      	mov	r3, r5
 8011c46:	4632      	mov	r2, r6
 8011c48:	7d21      	ldrb	r1, [r4, #20]
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c50:	f005 bde4 	b.w	801781c <ucdr_serialize_endian_array_char>

08011c54 <ucdr_deserialize_sequence_char>:
 8011c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c58:	461d      	mov	r5, r3
 8011c5a:	4616      	mov	r6, r2
 8011c5c:	460f      	mov	r7, r1
 8011c5e:	461a      	mov	r2, r3
 8011c60:	7d01      	ldrb	r1, [r0, #20]
 8011c62:	4604      	mov	r4, r0
 8011c64:	f7fd fb12 	bl	800f28c <ucdr_deserialize_endian_uint32_t>
 8011c68:	682b      	ldr	r3, [r5, #0]
 8011c6a:	429e      	cmp	r6, r3
 8011c6c:	d201      	bcs.n	8011c72 <ucdr_deserialize_sequence_char+0x1e>
 8011c6e:	2201      	movs	r2, #1
 8011c70:	75a2      	strb	r2, [r4, #22]
 8011c72:	b913      	cbnz	r3, 8011c7a <ucdr_deserialize_sequence_char+0x26>
 8011c74:	2001      	movs	r0, #1
 8011c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c7a:	463a      	mov	r2, r7
 8011c7c:	7d21      	ldrb	r1, [r4, #20]
 8011c7e:	4620      	mov	r0, r4
 8011c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c84:	f005 bdfc 	b.w	8017880 <ucdr_deserialize_endian_array_char>

08011c88 <ucdr_serialize_sequence_uint8_t>:
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	4615      	mov	r5, r2
 8011c8c:	460e      	mov	r6, r1
 8011c8e:	7d01      	ldrb	r1, [r0, #20]
 8011c90:	4604      	mov	r4, r0
 8011c92:	f7fd f9d3 	bl	800f03c <ucdr_serialize_endian_uint32_t>
 8011c96:	b90d      	cbnz	r5, 8011c9c <ucdr_serialize_sequence_uint8_t+0x14>
 8011c98:	2001      	movs	r0, #1
 8011c9a:	bd70      	pop	{r4, r5, r6, pc}
 8011c9c:	462b      	mov	r3, r5
 8011c9e:	4632      	mov	r2, r6
 8011ca0:	7d21      	ldrb	r1, [r4, #20]
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ca8:	f005 be50 	b.w	801794c <ucdr_serialize_endian_array_uint8_t>

08011cac <ucdr_deserialize_sequence_uint8_t>:
 8011cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb0:	461d      	mov	r5, r3
 8011cb2:	4616      	mov	r6, r2
 8011cb4:	460f      	mov	r7, r1
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	7d01      	ldrb	r1, [r0, #20]
 8011cba:	4604      	mov	r4, r0
 8011cbc:	f7fd fae6 	bl	800f28c <ucdr_deserialize_endian_uint32_t>
 8011cc0:	682b      	ldr	r3, [r5, #0]
 8011cc2:	429e      	cmp	r6, r3
 8011cc4:	d201      	bcs.n	8011cca <ucdr_deserialize_sequence_uint8_t+0x1e>
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	75a2      	strb	r2, [r4, #22]
 8011cca:	b913      	cbnz	r3, 8011cd2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8011ccc:	2001      	movs	r0, #1
 8011cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd2:	463a      	mov	r2, r7
 8011cd4:	7d21      	ldrb	r1, [r4, #20]
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cdc:	f005 be9c 	b.w	8017a18 <ucdr_deserialize_endian_array_uint8_t>

08011ce0 <rcl_client_get_rmw_handle>:
 8011ce0:	b118      	cbz	r0, 8011cea <rcl_client_get_rmw_handle+0xa>
 8011ce2:	6800      	ldr	r0, [r0, #0]
 8011ce4:	b108      	cbz	r0, 8011cea <rcl_client_get_rmw_handle+0xa>
 8011ce6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011cea:	4770      	bx	lr

08011cec <rcl_send_request>:
 8011cec:	b570      	push	{r4, r5, r6, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	b1f8      	cbz	r0, 8011d32 <rcl_send_request+0x46>
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	6800      	ldr	r0, [r0, #0]
 8011cf6:	b1e0      	cbz	r0, 8011d32 <rcl_send_request+0x46>
 8011cf8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011cfc:	b1cb      	cbz	r3, 8011d32 <rcl_send_request+0x46>
 8011cfe:	460e      	mov	r6, r1
 8011d00:	b1e1      	cbz	r1, 8011d3c <rcl_send_request+0x50>
 8011d02:	4615      	mov	r5, r2
 8011d04:	b1d2      	cbz	r2, 8011d3c <rcl_send_request+0x50>
 8011d06:	2105      	movs	r1, #5
 8011d08:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011d0c:	f002 ff74 	bl	8014bf8 <__atomic_load_8>
 8011d10:	4602      	mov	r2, r0
 8011d12:	460b      	mov	r3, r1
 8011d14:	4631      	mov	r1, r6
 8011d16:	e9c5 2300 	strd	r2, r3, [r5]
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	462a      	mov	r2, r5
 8011d1e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011d22:	f004 f991 	bl	8016048 <rmw_send_request>
 8011d26:	4606      	mov	r6, r0
 8011d28:	b160      	cbz	r0, 8011d44 <rcl_send_request+0x58>
 8011d2a:	2601      	movs	r6, #1
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	b002      	add	sp, #8
 8011d30:	bd70      	pop	{r4, r5, r6, pc}
 8011d32:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011d36:	4630      	mov	r0, r6
 8011d38:	b002      	add	sp, #8
 8011d3a:	bd70      	pop	{r4, r5, r6, pc}
 8011d3c:	260b      	movs	r6, #11
 8011d3e:	4630      	mov	r0, r6
 8011d40:	b002      	add	sp, #8
 8011d42:	bd70      	pop	{r4, r5, r6, pc}
 8011d44:	6820      	ldr	r0, [r4, #0]
 8011d46:	2105      	movs	r1, #5
 8011d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d4c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011d50:	9100      	str	r1, [sp, #0]
 8011d52:	f002 ffbd 	bl	8014cd0 <__atomic_exchange_8>
 8011d56:	4630      	mov	r0, r6
 8011d58:	b002      	add	sp, #8
 8011d5a:	bd70      	pop	{r4, r5, r6, pc}
 8011d5c:	0000      	movs	r0, r0
	...

08011d60 <rcl_take_response>:
 8011d60:	b570      	push	{r4, r5, r6, lr}
 8011d62:	468e      	mov	lr, r1
 8011d64:	b08c      	sub	sp, #48	@ 0x30
 8011d66:	460c      	mov	r4, r1
 8011d68:	4616      	mov	r6, r2
 8011d6a:	f10d 0c18 	add.w	ip, sp, #24
 8011d6e:	4605      	mov	r5, r0
 8011d70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d78:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011d7c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011d80:	b35d      	cbz	r5, 8011dda <rcl_take_response+0x7a>
 8011d82:	682b      	ldr	r3, [r5, #0]
 8011d84:	b34b      	cbz	r3, 8011dda <rcl_take_response+0x7a>
 8011d86:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011d8a:	b330      	cbz	r0, 8011dda <rcl_take_response+0x7a>
 8011d8c:	b346      	cbz	r6, 8011de0 <rcl_take_response+0x80>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	4632      	mov	r2, r6
 8011d92:	a902      	add	r1, sp, #8
 8011d94:	f88d 3007 	strb.w	r3, [sp, #7]
 8011d98:	f10d 0307 	add.w	r3, sp, #7
 8011d9c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8011de8 <rcl_take_response+0x88>
 8011da0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011da4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011da8:	f004 fa56 	bl	8016258 <rmw_take_response>
 8011dac:	4605      	mov	r5, r0
 8011dae:	b9c8      	cbnz	r0, 8011de4 <rcl_take_response+0x84>
 8011db0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011db4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011db8:	2a00      	cmp	r2, #0
 8011dba:	bf08      	it	eq
 8011dbc:	461d      	moveq	r5, r3
 8011dbe:	f10d 0e18 	add.w	lr, sp, #24
 8011dc2:	46a4      	mov	ip, r4
 8011dc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011dc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011dcc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011dd0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	b00c      	add	sp, #48	@ 0x30
 8011dd8:	bd70      	pop	{r4, r5, r6, pc}
 8011dda:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011dde:	e7ee      	b.n	8011dbe <rcl_take_response+0x5e>
 8011de0:	250b      	movs	r5, #11
 8011de2:	e7ec      	b.n	8011dbe <rcl_take_response+0x5e>
 8011de4:	2501      	movs	r5, #1
 8011de6:	e7ea      	b.n	8011dbe <rcl_take_response+0x5e>
	...

08011df0 <rcl_client_is_valid>:
 8011df0:	b130      	cbz	r0, 8011e00 <rcl_client_is_valid+0x10>
 8011df2:	6800      	ldr	r0, [r0, #0]
 8011df4:	b120      	cbz	r0, 8011e00 <rcl_client_is_valid+0x10>
 8011df6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011dfa:	3800      	subs	r0, #0
 8011dfc:	bf18      	it	ne
 8011dfe:	2001      	movne	r0, #1
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop

08011e04 <rcl_get_zero_initialized_context>:
 8011e04:	4a03      	ldr	r2, [pc, #12]	@ (8011e14 <rcl_get_zero_initialized_context+0x10>)
 8011e06:	4603      	mov	r3, r0
 8011e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e10:	4618      	mov	r0, r3
 8011e12:	4770      	bx	lr
 8011e14:	0801fe78 	.word	0x0801fe78

08011e18 <rcl_context_is_valid>:
 8011e18:	b118      	cbz	r0, 8011e22 <rcl_context_is_valid+0xa>
 8011e1a:	6840      	ldr	r0, [r0, #4]
 8011e1c:	3800      	subs	r0, #0
 8011e1e:	bf18      	it	ne
 8011e20:	2001      	movne	r0, #1
 8011e22:	4770      	bx	lr

08011e24 <__cleanup_context>:
 8011e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e28:	4606      	mov	r6, r0
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	6800      	ldr	r0, [r0, #0]
 8011e2e:	6073      	str	r3, [r6, #4]
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d049      	beq.n	8011ec8 <__cleanup_context+0xa4>
 8011e34:	6947      	ldr	r7, [r0, #20]
 8011e36:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011e3a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011e3e:	b137      	cbz	r7, 8011e4e <__cleanup_context+0x2a>
 8011e40:	3014      	adds	r0, #20
 8011e42:	f000 f9bd 	bl	80121c0 <rcl_init_options_fini>
 8011e46:	4607      	mov	r7, r0
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	d144      	bne.n	8011ed6 <__cleanup_context+0xb2>
 8011e4c:	6830      	ldr	r0, [r6, #0]
 8011e4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011e50:	b143      	cbz	r3, 8011e64 <__cleanup_context+0x40>
 8011e52:	3028      	adds	r0, #40	@ 0x28
 8011e54:	f003 fe64 	bl	8015b20 <rmw_context_fini>
 8011e58:	b118      	cbz	r0, 8011e62 <__cleanup_context+0x3e>
 8011e5a:	2f00      	cmp	r7, #0
 8011e5c:	d03e      	beq.n	8011edc <__cleanup_context+0xb8>
 8011e5e:	f7ff f933 	bl	80110c8 <rcutils_reset_error>
 8011e62:	6830      	ldr	r0, [r6, #0]
 8011e64:	6a03      	ldr	r3, [r0, #32]
 8011e66:	b1db      	cbz	r3, 8011ea0 <__cleanup_context+0x7c>
 8011e68:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011e6c:	2a01      	cmp	r2, #1
 8011e6e:	f17c 0100 	sbcs.w	r1, ip, #0
 8011e72:	db11      	blt.n	8011e98 <__cleanup_context+0x74>
 8011e74:	2400      	movs	r4, #0
 8011e76:	4625      	mov	r5, r4
 8011e78:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011e7c:	4649      	mov	r1, r9
 8011e7e:	b1b8      	cbz	r0, 8011eb0 <__cleanup_context+0x8c>
 8011e80:	47c0      	blx	r8
 8011e82:	6833      	ldr	r3, [r6, #0]
 8011e84:	3401      	adds	r4, #1
 8011e86:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011e8a:	f145 0500 	adc.w	r5, r5, #0
 8011e8e:	6a1b      	ldr	r3, [r3, #32]
 8011e90:	4294      	cmp	r4, r2
 8011e92:	eb75 010c 	sbcs.w	r1, r5, ip
 8011e96:	dbef      	blt.n	8011e78 <__cleanup_context+0x54>
 8011e98:	4618      	mov	r0, r3
 8011e9a:	4649      	mov	r1, r9
 8011e9c:	47c0      	blx	r8
 8011e9e:	6830      	ldr	r0, [r6, #0]
 8011ea0:	4649      	mov	r1, r9
 8011ea2:	47c0      	blx	r8
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	4638      	mov	r0, r7
 8011ea8:	e9c6 3300 	strd	r3, r3, [r6]
 8011eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eb0:	3401      	adds	r4, #1
 8011eb2:	f145 0500 	adc.w	r5, r5, #0
 8011eb6:	4294      	cmp	r4, r2
 8011eb8:	eb75 010c 	sbcs.w	r1, r5, ip
 8011ebc:	dbdc      	blt.n	8011e78 <__cleanup_context+0x54>
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	4649      	mov	r1, r9
 8011ec2:	47c0      	blx	r8
 8011ec4:	6830      	ldr	r0, [r6, #0]
 8011ec6:	e7eb      	b.n	8011ea0 <__cleanup_context+0x7c>
 8011ec8:	4607      	mov	r7, r0
 8011eca:	2300      	movs	r3, #0
 8011ecc:	4638      	mov	r0, r7
 8011ece:	e9c6 3300 	strd	r3, r3, [r6]
 8011ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ed6:	f7ff f8f7 	bl	80110c8 <rcutils_reset_error>
 8011eda:	e7b7      	b.n	8011e4c <__cleanup_context+0x28>
 8011edc:	f009 f9e6 	bl	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>
 8011ee0:	4607      	mov	r7, r0
 8011ee2:	e7bc      	b.n	8011e5e <__cleanup_context+0x3a>

08011ee4 <rcl_init>:
 8011ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ee8:	1e05      	subs	r5, r0, #0
 8011eea:	b09e      	sub	sp, #120	@ 0x78
 8011eec:	460e      	mov	r6, r1
 8011eee:	4690      	mov	r8, r2
 8011ef0:	461f      	mov	r7, r3
 8011ef2:	f340 809f 	ble.w	8012034 <rcl_init+0x150>
 8011ef6:	2900      	cmp	r1, #0
 8011ef8:	f000 809f 	beq.w	801203a <rcl_init+0x156>
 8011efc:	f1a1 0e04 	sub.w	lr, r1, #4
 8011f00:	f04f 0c00 	mov.w	ip, #0
 8011f04:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011f08:	f10c 0c01 	add.w	ip, ip, #1
 8011f0c:	2c00      	cmp	r4, #0
 8011f0e:	f000 8094 	beq.w	801203a <rcl_init+0x156>
 8011f12:	4565      	cmp	r5, ip
 8011f14:	d1f6      	bne.n	8011f04 <rcl_init+0x20>
 8011f16:	f1b8 0f00 	cmp.w	r8, #0
 8011f1a:	f000 808e 	beq.w	801203a <rcl_init+0x156>
 8011f1e:	f8d8 4000 	ldr.w	r4, [r8]
 8011f22:	2c00      	cmp	r4, #0
 8011f24:	f000 8089 	beq.w	801203a <rcl_init+0x156>
 8011f28:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	a819      	add	r0, sp, #100	@ 0x64
 8011f36:	f8cc 3000 	str.w	r3, [ip]
 8011f3a:	f7ff f8a1 	bl	8011080 <rcutils_allocator_is_valid>
 8011f3e:	f080 0001 	eor.w	r0, r0, #1
 8011f42:	b2c0      	uxtb	r0, r0
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d178      	bne.n	801203a <rcl_init+0x156>
 8011f48:	2f00      	cmp	r7, #0
 8011f4a:	d076      	beq.n	801203a <rcl_init+0x156>
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d178      	bne.n	8012044 <rcl_init+0x160>
 8011f52:	2178      	movs	r1, #120	@ 0x78
 8011f54:	2001      	movs	r0, #1
 8011f56:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011f5a:	4798      	blx	r3
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	6038      	str	r0, [r7, #0]
 8011f60:	2800      	cmp	r0, #0
 8011f62:	f000 80b6 	beq.w	80120d2 <rcl_init+0x1ee>
 8011f66:	a802      	add	r0, sp, #8
 8011f68:	f003 f9ba 	bl	80152e0 <rmw_get_zero_initialized_context>
 8011f6c:	a902      	add	r1, sp, #8
 8011f6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011f72:	2250      	movs	r2, #80	@ 0x50
 8011f74:	f00b fae5 	bl	801d542 <memcpy>
 8011f78:	ac19      	add	r4, sp, #100	@ 0x64
 8011f7a:	f8d7 e000 	ldr.w	lr, [r7]
 8011f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f80:	46f4      	mov	ip, lr
 8011f82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	f10e 0114 	add.w	r1, lr, #20
 8011f8c:	4640      	mov	r0, r8
 8011f8e:	f8cc 3000 	str.w	r3, [ip]
 8011f92:	f000 f93f 	bl	8012214 <rcl_init_options_copy>
 8011f96:	4604      	mov	r4, r0
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d144      	bne.n	8012026 <rcl_init+0x142>
 8011f9c:	f8d7 9000 	ldr.w	r9, [r7]
 8011fa0:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011fa4:	f8c9 0020 	str.w	r0, [r9, #32]
 8011fa8:	f8c9 5018 	str.w	r5, [r9, #24]
 8011fac:	f8c9 801c 	str.w	r8, [r9, #28]
 8011fb0:	2d00      	cmp	r5, #0
 8011fb2:	d04e      	beq.n	8012052 <rcl_init+0x16e>
 8011fb4:	2e00      	cmp	r6, #0
 8011fb6:	d04c      	beq.n	8012052 <rcl_init+0x16e>
 8011fb8:	2104      	movs	r1, #4
 8011fba:	4628      	mov	r0, r5
 8011fbc:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011fc0:	4798      	blx	r3
 8011fc2:	f8c9 0020 	str.w	r0, [r9, #32]
 8011fc6:	f8d7 9000 	ldr.w	r9, [r7]
 8011fca:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011fce:	46ca      	mov	sl, r9
 8011fd0:	b343      	cbz	r3, 8012024 <rcl_init+0x140>
 8011fd2:	2d01      	cmp	r5, #1
 8011fd4:	f178 0300 	sbcs.w	r3, r8, #0
 8011fd8:	db3b      	blt.n	8012052 <rcl_init+0x16e>
 8011fda:	2400      	movs	r4, #0
 8011fdc:	3e04      	subs	r6, #4
 8011fde:	46a1      	mov	r9, r4
 8011fe0:	e00b      	b.n	8011ffa <rcl_init+0x116>
 8011fe2:	6831      	ldr	r1, [r6, #0]
 8011fe4:	f00b faad 	bl	801d542 <memcpy>
 8011fe8:	3401      	adds	r4, #1
 8011fea:	f149 0900 	adc.w	r9, r9, #0
 8011fee:	45c8      	cmp	r8, r9
 8011ff0:	bf08      	it	eq
 8011ff2:	42a5      	cmpeq	r5, r4
 8011ff4:	d02b      	beq.n	801204e <rcl_init+0x16a>
 8011ff6:	f8d7 a000 	ldr.w	sl, [r7]
 8011ffa:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011ffe:	f7ee f979 	bl	80002f4 <strlen>
 8012002:	1c42      	adds	r2, r0, #1
 8012004:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012006:	4610      	mov	r0, r2
 8012008:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801200a:	f8da a020 	ldr.w	sl, [sl, #32]
 801200e:	9201      	str	r2, [sp, #4]
 8012010:	4798      	blx	r3
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012018:	6a1b      	ldr	r3, [r3, #32]
 801201a:	9a01      	ldr	r2, [sp, #4]
 801201c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012020:	2800      	cmp	r0, #0
 8012022:	d1de      	bne.n	8011fe2 <rcl_init+0xfe>
 8012024:	240a      	movs	r4, #10
 8012026:	4638      	mov	r0, r7
 8012028:	f7ff fefc 	bl	8011e24 <__cleanup_context>
 801202c:	4620      	mov	r0, r4
 801202e:	b01e      	add	sp, #120	@ 0x78
 8012030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012034:	2900      	cmp	r1, #0
 8012036:	f43f af6e 	beq.w	8011f16 <rcl_init+0x32>
 801203a:	240b      	movs	r4, #11
 801203c:	4620      	mov	r0, r4
 801203e:	b01e      	add	sp, #120	@ 0x78
 8012040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012044:	2464      	movs	r4, #100	@ 0x64
 8012046:	4620      	mov	r0, r4
 8012048:	b01e      	add	sp, #120	@ 0x78
 801204a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801204e:	f8d7 9000 	ldr.w	r9, [r7]
 8012052:	4926      	ldr	r1, [pc, #152]	@ (80120ec <rcl_init+0x208>)
 8012054:	680b      	ldr	r3, [r1, #0]
 8012056:	3301      	adds	r3, #1
 8012058:	d036      	beq.n	80120c8 <rcl_init+0x1e4>
 801205a:	461a      	mov	r2, r3
 801205c:	2400      	movs	r4, #0
 801205e:	600b      	str	r3, [r1, #0]
 8012060:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012064:	607b      	str	r3, [r7, #4]
 8012066:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012068:	3301      	adds	r3, #1
 801206a:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801206e:	d034      	beq.n	80120da <rcl_init+0x1f6>
 8012070:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8012074:	b93b      	cbnz	r3, 8012086 <rcl_init+0x1a2>
 8012076:	3030      	adds	r0, #48	@ 0x30
 8012078:	f000 f93a 	bl	80122f0 <rcl_get_localhost_only>
 801207c:	4604      	mov	r4, r0
 801207e:	2800      	cmp	r0, #0
 8012080:	d1d1      	bne.n	8012026 <rcl_init+0x142>
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	6958      	ldr	r0, [r3, #20]
 8012086:	aa18      	add	r2, sp, #96	@ 0x60
 8012088:	a917      	add	r1, sp, #92	@ 0x5c
 801208a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801208c:	f001 fa3e 	bl	801350c <rcl_validate_enclave_name>
 8012090:	4604      	mov	r4, r0
 8012092:	2800      	cmp	r0, #0
 8012094:	d1c7      	bne.n	8012026 <rcl_init+0x142>
 8012096:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012098:	b9eb      	cbnz	r3, 80120d6 <rcl_init+0x1f2>
 801209a:	6839      	ldr	r1, [r7, #0]
 801209c:	694b      	ldr	r3, [r1, #20]
 801209e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80120a2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80120a4:	f000 fd62 	bl	8012b6c <rcl_get_security_options_from_environment>
 80120a8:	4604      	mov	r4, r0
 80120aa:	2800      	cmp	r0, #0
 80120ac:	d1bb      	bne.n	8012026 <rcl_init+0x142>
 80120ae:	6839      	ldr	r1, [r7, #0]
 80120b0:	6948      	ldr	r0, [r1, #20]
 80120b2:	3128      	adds	r1, #40	@ 0x28
 80120b4:	3018      	adds	r0, #24
 80120b6:	f003 fbfd 	bl	80158b4 <rmw_init>
 80120ba:	4604      	mov	r4, r0
 80120bc:	2800      	cmp	r0, #0
 80120be:	d0bd      	beq.n	801203c <rcl_init+0x158>
 80120c0:	f009 f8f4 	bl	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>
 80120c4:	4604      	mov	r4, r0
 80120c6:	e7ae      	b.n	8012026 <rcl_init+0x142>
 80120c8:	2201      	movs	r2, #1
 80120ca:	461c      	mov	r4, r3
 80120cc:	600a      	str	r2, [r1, #0]
 80120ce:	4613      	mov	r3, r2
 80120d0:	e7c6      	b.n	8012060 <rcl_init+0x17c>
 80120d2:	240a      	movs	r4, #10
 80120d4:	e7b2      	b.n	801203c <rcl_init+0x158>
 80120d6:	2401      	movs	r4, #1
 80120d8:	e7a5      	b.n	8012026 <rcl_init+0x142>
 80120da:	3024      	adds	r0, #36	@ 0x24
 80120dc:	f009 f8fa 	bl	801b2d4 <rcl_get_default_domain_id>
 80120e0:	4604      	mov	r4, r0
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d19f      	bne.n	8012026 <rcl_init+0x142>
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	6958      	ldr	r0, [r3, #20]
 80120ea:	e7c1      	b.n	8012070 <rcl_init+0x18c>
 80120ec:	240646c0 	.word	0x240646c0

080120f0 <rcl_get_zero_initialized_init_options>:
 80120f0:	2000      	movs	r0, #0
 80120f2:	4770      	bx	lr

080120f4 <rcl_init_options_init>:
 80120f4:	b084      	sub	sp, #16
 80120f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120f8:	b097      	sub	sp, #92	@ 0x5c
 80120fa:	ae1d      	add	r6, sp, #116	@ 0x74
 80120fc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012100:	2800      	cmp	r0, #0
 8012102:	d058      	beq.n	80121b6 <rcl_init_options_init+0xc2>
 8012104:	6803      	ldr	r3, [r0, #0]
 8012106:	4605      	mov	r5, r0
 8012108:	b133      	cbz	r3, 8012118 <rcl_init_options_init+0x24>
 801210a:	2464      	movs	r4, #100	@ 0x64
 801210c:	4620      	mov	r0, r4
 801210e:	b017      	add	sp, #92	@ 0x5c
 8012110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012114:	b004      	add	sp, #16
 8012116:	4770      	bx	lr
 8012118:	4630      	mov	r0, r6
 801211a:	f7fe ffb1 	bl	8011080 <rcutils_allocator_is_valid>
 801211e:	2800      	cmp	r0, #0
 8012120:	d049      	beq.n	80121b6 <rcl_init_options_init+0xc2>
 8012122:	46b4      	mov	ip, r6
 8012124:	ac11      	add	r4, sp, #68	@ 0x44
 8012126:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801212a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801212c:	f8dc 3000 	ldr.w	r3, [ip]
 8012130:	2050      	movs	r0, #80	@ 0x50
 8012132:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012134:	6023      	str	r3, [r4, #0]
 8012136:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012138:	4798      	blx	r3
 801213a:	4604      	mov	r4, r0
 801213c:	6028      	str	r0, [r5, #0]
 801213e:	2800      	cmp	r0, #0
 8012140:	d03b      	beq.n	80121ba <rcl_init_options_init+0xc6>
 8012142:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012146:	4686      	mov	lr, r0
 8012148:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801214c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012150:	f8dc 3000 	ldr.w	r3, [ip]
 8012154:	a802      	add	r0, sp, #8
 8012156:	f8ce 3000 	str.w	r3, [lr]
 801215a:	f003 f8d5 	bl	8015308 <rmw_get_zero_initialized_init_options>
 801215e:	f10d 0e08 	add.w	lr, sp, #8
 8012162:	f104 0c18 	add.w	ip, r4, #24
 8012166:	682f      	ldr	r7, [r5, #0]
 8012168:	ac20      	add	r4, sp, #128	@ 0x80
 801216a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801216e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012172:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012176:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801217a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801217e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012182:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012186:	e88c 0003 	stmia.w	ip, {r0, r1}
 801218a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801218e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012192:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8012196:	f107 0018 	add.w	r0, r7, #24
 801219a:	f003 fa8d 	bl	80156b8 <rmw_init_options_init>
 801219e:	4604      	mov	r4, r0
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d0b3      	beq.n	801210c <rcl_init_options_init+0x18>
 80121a4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80121a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80121a8:	6828      	ldr	r0, [r5, #0]
 80121aa:	4798      	blx	r3
 80121ac:	4620      	mov	r0, r4
 80121ae:	f009 f87d 	bl	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>
 80121b2:	4604      	mov	r4, r0
 80121b4:	e7aa      	b.n	801210c <rcl_init_options_init+0x18>
 80121b6:	240b      	movs	r4, #11
 80121b8:	e7a8      	b.n	801210c <rcl_init_options_init+0x18>
 80121ba:	240a      	movs	r4, #10
 80121bc:	e7a6      	b.n	801210c <rcl_init_options_init+0x18>
 80121be:	bf00      	nop

080121c0 <rcl_init_options_fini>:
 80121c0:	b530      	push	{r4, r5, lr}
 80121c2:	b087      	sub	sp, #28
 80121c4:	b1f0      	cbz	r0, 8012204 <rcl_init_options_fini+0x44>
 80121c6:	6803      	ldr	r3, [r0, #0]
 80121c8:	4604      	mov	r4, r0
 80121ca:	b1db      	cbz	r3, 8012204 <rcl_init_options_fini+0x44>
 80121cc:	469c      	mov	ip, r3
 80121ce:	f10d 0e04 	add.w	lr, sp, #4
 80121d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80121d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80121da:	f8dc 3000 	ldr.w	r3, [ip]
 80121de:	a801      	add	r0, sp, #4
 80121e0:	f8ce 3000 	str.w	r3, [lr]
 80121e4:	f7fe ff4c 	bl	8011080 <rcutils_allocator_is_valid>
 80121e8:	b160      	cbz	r0, 8012204 <rcl_init_options_fini+0x44>
 80121ea:	6820      	ldr	r0, [r4, #0]
 80121ec:	3018      	adds	r0, #24
 80121ee:	f003 fb1d 	bl	801582c <rmw_init_options_fini>
 80121f2:	4605      	mov	r5, r0
 80121f4:	b950      	cbnz	r0, 801220c <rcl_init_options_fini+0x4c>
 80121f6:	6820      	ldr	r0, [r4, #0]
 80121f8:	9b02      	ldr	r3, [sp, #8]
 80121fa:	9905      	ldr	r1, [sp, #20]
 80121fc:	4798      	blx	r3
 80121fe:	4628      	mov	r0, r5
 8012200:	b007      	add	sp, #28
 8012202:	bd30      	pop	{r4, r5, pc}
 8012204:	250b      	movs	r5, #11
 8012206:	4628      	mov	r0, r5
 8012208:	b007      	add	sp, #28
 801220a:	bd30      	pop	{r4, r5, pc}
 801220c:	f009 f84e 	bl	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>
 8012210:	4605      	mov	r5, r0
 8012212:	e7f8      	b.n	8012206 <rcl_init_options_fini+0x46>

08012214 <rcl_init_options_copy>:
 8012214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012218:	b094      	sub	sp, #80	@ 0x50
 801221a:	2800      	cmp	r0, #0
 801221c:	d05b      	beq.n	80122d6 <rcl_init_options_copy+0xc2>
 801221e:	4604      	mov	r4, r0
 8012220:	6800      	ldr	r0, [r0, #0]
 8012222:	2800      	cmp	r0, #0
 8012224:	d057      	beq.n	80122d6 <rcl_init_options_copy+0xc2>
 8012226:	460e      	mov	r6, r1
 8012228:	f7fe ff2a 	bl	8011080 <rcutils_allocator_is_valid>
 801222c:	2e00      	cmp	r6, #0
 801222e:	d052      	beq.n	80122d6 <rcl_init_options_copy+0xc2>
 8012230:	f080 0001 	eor.w	r0, r0, #1
 8012234:	b2c0      	uxtb	r0, r0
 8012236:	2800      	cmp	r0, #0
 8012238:	d14d      	bne.n	80122d6 <rcl_init_options_copy+0xc2>
 801223a:	6833      	ldr	r3, [r6, #0]
 801223c:	b123      	cbz	r3, 8012248 <rcl_init_options_copy+0x34>
 801223e:	2464      	movs	r4, #100	@ 0x64
 8012240:	4620      	mov	r0, r4
 8012242:	b014      	add	sp, #80	@ 0x50
 8012244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012248:	6827      	ldr	r7, [r4, #0]
 801224a:	ad0f      	add	r5, sp, #60	@ 0x3c
 801224c:	46bc      	mov	ip, r7
 801224e:	f8d7 8000 	ldr.w	r8, [r7]
 8012252:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012258:	f8dc 3000 	ldr.w	r3, [ip]
 801225c:	2050      	movs	r0, #80	@ 0x50
 801225e:	4619      	mov	r1, r3
 8012260:	602b      	str	r3, [r5, #0]
 8012262:	47c0      	blx	r8
 8012264:	4605      	mov	r5, r0
 8012266:	6030      	str	r0, [r6, #0]
 8012268:	b3d0      	cbz	r0, 80122e0 <rcl_init_options_copy+0xcc>
 801226a:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801226e:	4686      	mov	lr, r0
 8012270:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012274:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012278:	f8dc 3000 	ldr.w	r3, [ip]
 801227c:	4668      	mov	r0, sp
 801227e:	f8ce 3000 	str.w	r3, [lr]
 8012282:	f003 f841 	bl	8015308 <rmw_get_zero_initialized_init_options>
 8012286:	46ee      	mov	lr, sp
 8012288:	f105 0c18 	add.w	ip, r5, #24
 801228c:	6824      	ldr	r4, [r4, #0]
 801228e:	6835      	ldr	r5, [r6, #0]
 8012290:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012298:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801229c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80122ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80122b0:	f104 0018 	add.w	r0, r4, #24
 80122b4:	f105 0118 	add.w	r1, r5, #24
 80122b8:	f003 fa66 	bl	8015788 <rmw_init_options_copy>
 80122bc:	4604      	mov	r4, r0
 80122be:	2800      	cmp	r0, #0
 80122c0:	d0be      	beq.n	8012240 <rcl_init_options_copy+0x2c>
 80122c2:	f7fe feeb 	bl	801109c <rcutils_get_error_string>
 80122c6:	f7fe feff 	bl	80110c8 <rcutils_reset_error>
 80122ca:	4630      	mov	r0, r6
 80122cc:	f7ff ff78 	bl	80121c0 <rcl_init_options_fini>
 80122d0:	b140      	cbz	r0, 80122e4 <rcl_init_options_copy+0xd0>
 80122d2:	4604      	mov	r4, r0
 80122d4:	e7b4      	b.n	8012240 <rcl_init_options_copy+0x2c>
 80122d6:	240b      	movs	r4, #11
 80122d8:	4620      	mov	r0, r4
 80122da:	b014      	add	sp, #80	@ 0x50
 80122dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122e0:	240a      	movs	r4, #10
 80122e2:	e7ad      	b.n	8012240 <rcl_init_options_copy+0x2c>
 80122e4:	4620      	mov	r0, r4
 80122e6:	b014      	add	sp, #80	@ 0x50
 80122e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122ec:	f008 bfde 	b.w	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>

080122f0 <rcl_get_localhost_only>:
 80122f0:	b510      	push	{r4, lr}
 80122f2:	2300      	movs	r3, #0
 80122f4:	b082      	sub	sp, #8
 80122f6:	9301      	str	r3, [sp, #4]
 80122f8:	b1b8      	cbz	r0, 801232a <rcl_get_localhost_only+0x3a>
 80122fa:	4604      	mov	r4, r0
 80122fc:	a901      	add	r1, sp, #4
 80122fe:	480c      	ldr	r0, [pc, #48]	@ (8012330 <rcl_get_localhost_only+0x40>)
 8012300:	f002 fd1e 	bl	8014d40 <rcutils_get_env>
 8012304:	b110      	cbz	r0, 801230c <rcl_get_localhost_only+0x1c>
 8012306:	2001      	movs	r0, #1
 8012308:	b002      	add	sp, #8
 801230a:	bd10      	pop	{r4, pc}
 801230c:	9b01      	ldr	r3, [sp, #4]
 801230e:	b113      	cbz	r3, 8012316 <rcl_get_localhost_only+0x26>
 8012310:	781a      	ldrb	r2, [r3, #0]
 8012312:	2a31      	cmp	r2, #49	@ 0x31
 8012314:	d004      	beq.n	8012320 <rcl_get_localhost_only+0x30>
 8012316:	2302      	movs	r3, #2
 8012318:	2000      	movs	r0, #0
 801231a:	7023      	strb	r3, [r4, #0]
 801231c:	b002      	add	sp, #8
 801231e:	bd10      	pop	{r4, pc}
 8012320:	785b      	ldrb	r3, [r3, #1]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1f7      	bne.n	8012316 <rcl_get_localhost_only+0x26>
 8012326:	2301      	movs	r3, #1
 8012328:	e7f6      	b.n	8012318 <rcl_get_localhost_only+0x28>
 801232a:	200b      	movs	r0, #11
 801232c:	b002      	add	sp, #8
 801232e:	bd10      	pop	{r4, pc}
 8012330:	0801fe80 	.word	0x0801fe80

08012334 <rcl_get_zero_initialized_node>:
 8012334:	4a03      	ldr	r2, [pc, #12]	@ (8012344 <rcl_get_zero_initialized_node+0x10>)
 8012336:	4603      	mov	r3, r0
 8012338:	e892 0003 	ldmia.w	r2, {r0, r1}
 801233c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012340:	4618      	mov	r0, r3
 8012342:	4770      	bx	lr
 8012344:	0801feb0 	.word	0x0801feb0

08012348 <rcl_node_init>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	b0a9      	sub	sp, #164	@ 0xa4
 801234e:	4604      	mov	r4, r0
 8012350:	460e      	mov	r6, r1
 8012352:	4615      	mov	r5, r2
 8012354:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012358:	a823      	add	r0, sp, #140	@ 0x8c
 801235a:	461f      	mov	r7, r3
 801235c:	f009 f9e0 	bl	801b720 <rcl_guard_condition_get_default_options>
 8012360:	f1b8 0f00 	cmp.w	r8, #0
 8012364:	f000 80f3 	beq.w	801254e <rcl_node_init+0x206>
 8012368:	4640      	mov	r0, r8
 801236a:	f7fe fe89 	bl	8011080 <rcutils_allocator_is_valid>
 801236e:	2d00      	cmp	r5, #0
 8012370:	bf18      	it	ne
 8012372:	2c00      	cmpne	r4, #0
 8012374:	f080 0001 	eor.w	r0, r0, #1
 8012378:	bf0c      	ite	eq
 801237a:	f04f 0c01 	moveq.w	ip, #1
 801237e:	f04f 0c00 	movne.w	ip, #0
 8012382:	2e00      	cmp	r6, #0
 8012384:	bf08      	it	eq
 8012386:	f04c 0c01 	orreq.w	ip, ip, #1
 801238a:	ea4c 0c00 	orr.w	ip, ip, r0
 801238e:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8012392:	f040 80dc 	bne.w	801254e <rcl_node_init+0x206>
 8012396:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801239a:	f1ba 0f00 	cmp.w	sl, #0
 801239e:	f040 80fc 	bne.w	801259a <rcl_node_init+0x252>
 80123a2:	2f00      	cmp	r7, #0
 80123a4:	f000 80d3 	beq.w	801254e <rcl_node_init+0x206>
 80123a8:	4638      	mov	r0, r7
 80123aa:	f7ff fd35 	bl	8011e18 <rcl_context_is_valid>
 80123ae:	4683      	mov	fp, r0
 80123b0:	2800      	cmp	r0, #0
 80123b2:	f000 80d2 	beq.w	801255a <rcl_node_init+0x212>
 80123b6:	4652      	mov	r2, sl
 80123b8:	4630      	mov	r0, r6
 80123ba:	a922      	add	r1, sp, #136	@ 0x88
 80123bc:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 80123c0:	f003 f8d0 	bl	8015564 <rmw_validate_node_name>
 80123c4:	4682      	mov	sl, r0
 80123c6:	2800      	cmp	r0, #0
 80123c8:	f040 80c3 	bne.w	8012552 <rcl_node_init+0x20a>
 80123cc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80123ce:	2800      	cmp	r0, #0
 80123d0:	f040 80f1 	bne.w	80125b6 <rcl_node_init+0x26e>
 80123d4:	4628      	mov	r0, r5
 80123d6:	f7ed ff8d 	bl	80002f4 <strlen>
 80123da:	2800      	cmp	r0, #0
 80123dc:	f040 80c0 	bne.w	8012560 <rcl_node_init+0x218>
 80123e0:	4d79      	ldr	r5, [pc, #484]	@ (80125c8 <rcl_node_init+0x280>)
 80123e2:	a922      	add	r1, sp, #136	@ 0x88
 80123e4:	2200      	movs	r2, #0
 80123e6:	4628      	mov	r0, r5
 80123e8:	f003 f89e 	bl	8015528 <rmw_validate_namespace>
 80123ec:	4682      	mov	sl, r0
 80123ee:	2800      	cmp	r0, #0
 80123f0:	f040 80af 	bne.w	8012552 <rcl_node_init+0x20a>
 80123f4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80123f6:	2800      	cmp	r0, #0
 80123f8:	f040 80d5 	bne.w	80125a6 <rcl_node_init+0x25e>
 80123fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012400:	2078      	movs	r0, #120	@ 0x78
 8012402:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012406:	4798      	blx	r3
 8012408:	4682      	mov	sl, r0
 801240a:	6060      	str	r0, [r4, #4]
 801240c:	2800      	cmp	r0, #0
 801240e:	f000 80cf 	beq.w	80125b0 <rcl_node_init+0x268>
 8012412:	2200      	movs	r2, #0
 8012414:	2300      	movs	r3, #0
 8012416:	a808      	add	r0, sp, #32
 8012418:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801241c:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8012420:	f000 f902 	bl	8012628 <rcl_node_get_default_options>
 8012424:	a908      	add	r1, sp, #32
 8012426:	4650      	mov	r0, sl
 8012428:	2268      	movs	r2, #104	@ 0x68
 801242a:	f00b f88a 	bl	801d542 <memcpy>
 801242e:	6861      	ldr	r1, [r4, #4]
 8012430:	4640      	mov	r0, r8
 8012432:	6027      	str	r7, [r4, #0]
 8012434:	f000 f906 	bl	8012644 <rcl_node_options_copy>
 8012438:	2800      	cmp	r0, #0
 801243a:	d158      	bne.n	80124ee <rcl_node_init+0x1a6>
 801243c:	4628      	mov	r0, r5
 801243e:	f7ed ff59 	bl	80002f4 <strlen>
 8012442:	4428      	add	r0, r5
 8012444:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012448:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801244c:	2b2f      	cmp	r3, #47	@ 0x2f
 801244e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	bf0c      	ite	eq
 8012456:	4b5d      	ldreq	r3, [pc, #372]	@ (80125cc <rcl_node_init+0x284>)
 8012458:	4b5d      	ldrne	r3, [pc, #372]	@ (80125d0 <rcl_node_init+0x288>)
 801245a:	9302      	str	r3, [sp, #8]
 801245c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012460:	9301      	str	r3, [sp, #4]
 8012462:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8012466:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801246a:	f002 fc91 	bl	8014d90 <rcutils_format_string_limit>
 801246e:	6823      	ldr	r3, [r4, #0]
 8012470:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8012474:	4631      	mov	r1, r6
 8012476:	6818      	ldr	r0, [r3, #0]
 8012478:	462a      	mov	r2, r5
 801247a:	6866      	ldr	r6, [r4, #4]
 801247c:	3028      	adds	r0, #40	@ 0x28
 801247e:	f003 fc01 	bl	8015c84 <rmw_create_node>
 8012482:	6863      	ldr	r3, [r4, #4]
 8012484:	66b0      	str	r0, [r6, #104]	@ 0x68
 8012486:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012488:	2800      	cmp	r0, #0
 801248a:	d032      	beq.n	80124f2 <rcl_node_init+0x1aa>
 801248c:	f003 fc8a 	bl	8015da4 <rmw_node_get_graph_guard_condition>
 8012490:	4682      	mov	sl, r0
 8012492:	b360      	cbz	r0, 80124ee <rcl_node_init+0x1a6>
 8012494:	f8d8 3000 	ldr.w	r3, [r8]
 8012498:	2008      	movs	r0, #8
 801249a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801249e:	6866      	ldr	r6, [r4, #4]
 80124a0:	4798      	blx	r3
 80124a2:	6863      	ldr	r3, [r4, #4]
 80124a4:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80124a6:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80124aa:	f1bb 0f00 	cmp.w	fp, #0
 80124ae:	d020      	beq.n	80124f2 <rcl_node_init+0x1aa>
 80124b0:	a806      	add	r0, sp, #24
 80124b2:	ae23      	add	r6, sp, #140	@ 0x8c
 80124b4:	f009 f8a8 	bl	801b608 <rcl_get_zero_initialized_guard_condition>
 80124b8:	a806      	add	r0, sp, #24
 80124ba:	6863      	ldr	r3, [r4, #4]
 80124bc:	46c4      	mov	ip, r8
 80124be:	c803      	ldmia	r0, {r0, r1}
 80124c0:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80124c4:	e88b 0003 	stmia.w	fp, {r0, r1}
 80124c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80124cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80124ce:	f8dc 3000 	ldr.w	r3, [ip]
 80124d2:	6033      	str	r3, [r6, #0]
 80124d4:	ab28      	add	r3, sp, #160	@ 0xa0
 80124d6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80124da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80124de:	4651      	mov	r1, sl
 80124e0:	463a      	mov	r2, r7
 80124e2:	4670      	mov	r0, lr
 80124e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80124e6:	f009 f899 	bl	801b61c <rcl_guard_condition_init_from_rmw>
 80124ea:	4682      	mov	sl, r0
 80124ec:	b328      	cbz	r0, 801253a <rcl_node_init+0x1f2>
 80124ee:	6863      	ldr	r3, [r4, #4]
 80124f0:	b1f3      	cbz	r3, 8012530 <rcl_node_init+0x1e8>
 80124f2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80124f4:	b128      	cbz	r0, 8012502 <rcl_node_init+0x1ba>
 80124f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80124fe:	4798      	blx	r3
 8012500:	6863      	ldr	r3, [r4, #4]
 8012502:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012504:	b110      	cbz	r0, 801250c <rcl_node_init+0x1c4>
 8012506:	f003 fbcf 	bl	8015ca8 <rmw_destroy_node>
 801250a:	6863      	ldr	r3, [r4, #4]
 801250c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801250e:	b148      	cbz	r0, 8012524 <rcl_node_init+0x1dc>
 8012510:	f009 f8e0 	bl	801b6d4 <rcl_guard_condition_fini>
 8012514:	6863      	ldr	r3, [r4, #4]
 8012516:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801251a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801251c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012520:	4798      	blx	r3
 8012522:	6863      	ldr	r3, [r4, #4]
 8012524:	4618      	mov	r0, r3
 8012526:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801252a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801252e:	4798      	blx	r3
 8012530:	2300      	movs	r3, #0
 8012532:	f04f 0a01 	mov.w	sl, #1
 8012536:	e9c4 3300 	strd	r3, r3, [r4]
 801253a:	f1b9 0f00 	cmp.w	r9, #0
 801253e:	d008      	beq.n	8012552 <rcl_node_init+0x20a>
 8012540:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012544:	4628      	mov	r0, r5
 8012546:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801254a:	4798      	blx	r3
 801254c:	e001      	b.n	8012552 <rcl_node_init+0x20a>
 801254e:	f04f 0a0b 	mov.w	sl, #11
 8012552:	4650      	mov	r0, sl
 8012554:	b029      	add	sp, #164	@ 0xa4
 8012556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801255a:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801255e:	e7f8      	b.n	8012552 <rcl_node_init+0x20a>
 8012560:	782b      	ldrb	r3, [r5, #0]
 8012562:	2b2f      	cmp	r3, #47	@ 0x2f
 8012564:	f43f af3d 	beq.w	80123e2 <rcl_node_init+0x9a>
 8012568:	9503      	str	r5, [sp, #12]
 801256a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801256e:	9300      	str	r3, [sp, #0]
 8012570:	4b18      	ldr	r3, [pc, #96]	@ (80125d4 <rcl_node_init+0x28c>)
 8012572:	9302      	str	r3, [sp, #8]
 8012574:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012578:	9301      	str	r3, [sp, #4]
 801257a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801257e:	f002 fc07 	bl	8014d90 <rcutils_format_string_limit>
 8012582:	4605      	mov	r5, r0
 8012584:	b1e0      	cbz	r0, 80125c0 <rcl_node_init+0x278>
 8012586:	2200      	movs	r2, #0
 8012588:	a922      	add	r1, sp, #136	@ 0x88
 801258a:	9222      	str	r2, [sp, #136]	@ 0x88
 801258c:	f002 ffcc 	bl	8015528 <rmw_validate_namespace>
 8012590:	4682      	mov	sl, r0
 8012592:	2800      	cmp	r0, #0
 8012594:	d1d4      	bne.n	8012540 <rcl_node_init+0x1f8>
 8012596:	46d9      	mov	r9, fp
 8012598:	e72c      	b.n	80123f4 <rcl_node_init+0xac>
 801259a:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801259e:	4650      	mov	r0, sl
 80125a0:	b029      	add	sp, #164	@ 0xa4
 80125a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a6:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 80125aa:	f002 ffcf 	bl	801554c <rmw_namespace_validation_result_string>
 80125ae:	e7c4      	b.n	801253a <rcl_node_init+0x1f2>
 80125b0:	f04f 0a0a 	mov.w	sl, #10
 80125b4:	e7c1      	b.n	801253a <rcl_node_init+0x1f2>
 80125b6:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 80125ba:	f003 f827 	bl	801560c <rmw_node_name_validation_result_string>
 80125be:	e7c8      	b.n	8012552 <rcl_node_init+0x20a>
 80125c0:	f04f 0a0a 	mov.w	sl, #10
 80125c4:	e7c5      	b.n	8012552 <rcl_node_init+0x20a>
 80125c6:	bf00      	nop
 80125c8:	0801fe98 	.word	0x0801fe98
 80125cc:	0801fea0 	.word	0x0801fea0
 80125d0:	0801fea8 	.word	0x0801fea8
 80125d4:	0801fe9c 	.word	0x0801fe9c

080125d8 <rcl_node_is_valid>:
 80125d8:	b130      	cbz	r0, 80125e8 <rcl_node_is_valid+0x10>
 80125da:	6843      	ldr	r3, [r0, #4]
 80125dc:	b123      	cbz	r3, 80125e8 <rcl_node_is_valid+0x10>
 80125de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80125e0:	b113      	cbz	r3, 80125e8 <rcl_node_is_valid+0x10>
 80125e2:	6800      	ldr	r0, [r0, #0]
 80125e4:	f7ff bc18 	b.w	8011e18 <rcl_context_is_valid>
 80125e8:	2000      	movs	r0, #0
 80125ea:	4770      	bx	lr

080125ec <rcl_node_get_name>:
 80125ec:	b120      	cbz	r0, 80125f8 <rcl_node_get_name+0xc>
 80125ee:	6840      	ldr	r0, [r0, #4]
 80125f0:	b110      	cbz	r0, 80125f8 <rcl_node_get_name+0xc>
 80125f2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80125f4:	b100      	cbz	r0, 80125f8 <rcl_node_get_name+0xc>
 80125f6:	6880      	ldr	r0, [r0, #8]
 80125f8:	4770      	bx	lr
 80125fa:	bf00      	nop

080125fc <rcl_node_get_namespace>:
 80125fc:	b120      	cbz	r0, 8012608 <rcl_node_get_namespace+0xc>
 80125fe:	6840      	ldr	r0, [r0, #4]
 8012600:	b110      	cbz	r0, 8012608 <rcl_node_get_namespace+0xc>
 8012602:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012604:	b100      	cbz	r0, 8012608 <rcl_node_get_namespace+0xc>
 8012606:	68c0      	ldr	r0, [r0, #12]
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop

0801260c <rcl_node_get_options>:
 801260c:	b128      	cbz	r0, 801261a <rcl_node_get_options+0xe>
 801260e:	6840      	ldr	r0, [r0, #4]
 8012610:	b118      	cbz	r0, 801261a <rcl_node_get_options+0xe>
 8012612:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012614:	2b00      	cmp	r3, #0
 8012616:	bf08      	it	eq
 8012618:	2000      	moveq	r0, #0
 801261a:	4770      	bx	lr

0801261c <rcl_node_get_rmw_handle>:
 801261c:	b110      	cbz	r0, 8012624 <rcl_node_get_rmw_handle+0x8>
 801261e:	6840      	ldr	r0, [r0, #4]
 8012620:	b100      	cbz	r0, 8012624 <rcl_node_get_rmw_handle+0x8>
 8012622:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop

08012628 <rcl_node_get_default_options>:
 8012628:	b510      	push	{r4, lr}
 801262a:	4604      	mov	r4, r0
 801262c:	2268      	movs	r2, #104	@ 0x68
 801262e:	2100      	movs	r1, #0
 8012630:	f00a fe68 	bl	801d304 <memset>
 8012634:	4620      	mov	r0, r4
 8012636:	f7fe fd15 	bl	8011064 <rcutils_get_default_allocator>
 801263a:	2301      	movs	r3, #1
 801263c:	4620      	mov	r0, r4
 801263e:	7523      	strb	r3, [r4, #20]
 8012640:	bd10      	pop	{r4, pc}
 8012642:	bf00      	nop

08012644 <rcl_node_options_copy>:
 8012644:	2800      	cmp	r0, #0
 8012646:	bf18      	it	ne
 8012648:	4288      	cmpne	r0, r1
 801264a:	d01b      	beq.n	8012684 <rcl_node_options_copy+0x40>
 801264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264e:	fab1 f681 	clz	r6, r1
 8012652:	460c      	mov	r4, r1
 8012654:	0976      	lsrs	r6, r6, #5
 8012656:	b199      	cbz	r1, 8012680 <rcl_node_options_copy+0x3c>
 8012658:	4605      	mov	r5, r0
 801265a:	8a87      	ldrh	r7, [r0, #20]
 801265c:	4684      	mov	ip, r0
 801265e:	468e      	mov	lr, r1
 8012660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012662:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012666:	682b      	ldr	r3, [r5, #0]
 8012668:	2250      	movs	r2, #80	@ 0x50
 801266a:	f10c 0118 	add.w	r1, ip, #24
 801266e:	f104 0018 	add.w	r0, r4, #24
 8012672:	f8ce 3000 	str.w	r3, [lr]
 8012676:	82a7      	strh	r7, [r4, #20]
 8012678:	f00a ff63 	bl	801d542 <memcpy>
 801267c:	4630      	mov	r0, r6
 801267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012680:	200b      	movs	r0, #11
 8012682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012684:	200b      	movs	r0, #11
 8012686:	4770      	bx	lr

08012688 <rcl_node_resolve_name>:
 8012688:	b082      	sub	sp, #8
 801268a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268e:	b091      	sub	sp, #68	@ 0x44
 8012690:	ac1a      	add	r4, sp, #104	@ 0x68
 8012692:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012696:	e884 000c 	stmia.w	r4, {r2, r3}
 801269a:	2800      	cmp	r0, #0
 801269c:	d03d      	beq.n	801271a <rcl_node_resolve_name+0x92>
 801269e:	460c      	mov	r4, r1
 80126a0:	4605      	mov	r5, r0
 80126a2:	f7ff ffb3 	bl	801260c <rcl_node_get_options>
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d03a      	beq.n	8012720 <rcl_node_resolve_name+0x98>
 80126aa:	4628      	mov	r0, r5
 80126ac:	f7ff ff9e 	bl	80125ec <rcl_node_get_name>
 80126b0:	4606      	mov	r6, r0
 80126b2:	4628      	mov	r0, r5
 80126b4:	ad0b      	add	r5, sp, #44	@ 0x2c
 80126b6:	f7ff ffa1 	bl	80125fc <rcl_node_get_namespace>
 80126ba:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80126be:	4607      	mov	r7, r0
 80126c0:	46ac      	mov	ip, r5
 80126c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80126c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126ca:	f8de 3000 	ldr.w	r3, [lr]
 80126ce:	f8cc 3000 	str.w	r3, [ip]
 80126d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80126d4:	b30b      	cbz	r3, 801271a <rcl_node_resolve_name+0x92>
 80126d6:	4689      	mov	r9, r1
 80126d8:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 80126dc:	f002 fcd0 	bl	8015080 <rcutils_get_zero_initialized_string_map>
 80126e0:	ab10      	add	r3, sp, #64	@ 0x40
 80126e2:	9008      	str	r0, [sp, #32]
 80126e4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80126e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80126ec:	2100      	movs	r1, #0
 80126ee:	a808      	add	r0, sp, #32
 80126f0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80126f4:	f002 fd3a 	bl	801516c <rcutils_string_map_init>
 80126f8:	4683      	mov	fp, r0
 80126fa:	b1a0      	cbz	r0, 8012726 <rcl_node_resolve_name+0x9e>
 80126fc:	f7fe fcce 	bl	801109c <rcutils_get_error_string>
 8012700:	f7fe fce2 	bl	80110c8 <rcutils_reset_error>
 8012704:	f1bb 0f0a 	cmp.w	fp, #10
 8012708:	bf18      	it	ne
 801270a:	f04f 0b01 	movne.w	fp, #1
 801270e:	4658      	mov	r0, fp
 8012710:	b011      	add	sp, #68	@ 0x44
 8012712:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012716:	b002      	add	sp, #8
 8012718:	4770      	bx	lr
 801271a:	f04f 0b0b 	mov.w	fp, #11
 801271e:	e7f6      	b.n	801270e <rcl_node_resolve_name+0x86>
 8012720:	f04f 0b01 	mov.w	fp, #1
 8012724:	e7f3      	b.n	801270e <rcl_node_resolve_name+0x86>
 8012726:	9009      	str	r0, [sp, #36]	@ 0x24
 8012728:	9007      	str	r0, [sp, #28]
 801272a:	a808      	add	r0, sp, #32
 801272c:	f008 ff66 	bl	801b5fc <rcl_get_default_topic_name_substitutions>
 8012730:	4683      	mov	fp, r0
 8012732:	b180      	cbz	r0, 8012756 <rcl_node_resolve_name+0xce>
 8012734:	280a      	cmp	r0, #10
 8012736:	a808      	add	r0, sp, #32
 8012738:	bf18      	it	ne
 801273a:	f04f 0b01 	movne.w	fp, #1
 801273e:	f002 fd55 	bl	80151ec <rcutils_string_map_fini>
 8012742:	4604      	mov	r4, r0
 8012744:	2800      	cmp	r0, #0
 8012746:	d15b      	bne.n	8012800 <rcl_node_resolve_name+0x178>
 8012748:	4651      	mov	r1, sl
 801274a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801274c:	47c8      	blx	r9
 801274e:	4651      	mov	r1, sl
 8012750:	4620      	mov	r0, r4
 8012752:	47c8      	blx	r9
 8012754:	e7db      	b.n	801270e <rcl_node_resolve_name+0x86>
 8012756:	ab09      	add	r3, sp, #36	@ 0x24
 8012758:	46ec      	mov	ip, sp
 801275a:	9305      	str	r3, [sp, #20]
 801275c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801275e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012762:	682b      	ldr	r3, [r5, #0]
 8012764:	463a      	mov	r2, r7
 8012766:	4631      	mov	r1, r6
 8012768:	4620      	mov	r0, r4
 801276a:	f8cc 3000 	str.w	r3, [ip]
 801276e:	ab08      	add	r3, sp, #32
 8012770:	f008 fde4 	bl	801b33c <rcl_expand_topic_name>
 8012774:	4683      	mov	fp, r0
 8012776:	b9d8      	cbnz	r0, 80127b0 <rcl_node_resolve_name+0x128>
 8012778:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801277a:	4602      	mov	r2, r0
 801277c:	9009      	str	r0, [sp, #36]	@ 0x24
 801277e:	a90a      	add	r1, sp, #40	@ 0x28
 8012780:	4620      	mov	r0, r4
 8012782:	f002 fe01 	bl	8015388 <rmw_validate_full_topic_name>
 8012786:	bb50      	cbnz	r0, 80127de <rcl_node_resolve_name+0x156>
 8012788:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801278a:	2d00      	cmp	r5, #0
 801278c:	d140      	bne.n	8012810 <rcl_node_resolve_name+0x188>
 801278e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012790:	a808      	add	r0, sp, #32
 8012792:	601c      	str	r4, [r3, #0]
 8012794:	f002 fd2a 	bl	80151ec <rcutils_string_map_fini>
 8012798:	4683      	mov	fp, r0
 801279a:	2800      	cmp	r0, #0
 801279c:	d043      	beq.n	8012826 <rcl_node_resolve_name+0x19e>
 801279e:	f7fe fc7d 	bl	801109c <rcutils_get_error_string>
 80127a2:	46a8      	mov	r8, r5
 80127a4:	f04f 0b01 	mov.w	fp, #1
 80127a8:	462c      	mov	r4, r5
 80127aa:	f7fe fc8d 	bl	80110c8 <rcutils_reset_error>
 80127ae:	e00a      	b.n	80127c6 <rcl_node_resolve_name+0x13e>
 80127b0:	2867      	cmp	r0, #103	@ 0x67
 80127b2:	bf14      	ite	ne
 80127b4:	f04f 0800 	movne.w	r8, #0
 80127b8:	f008 0801 	andeq.w	r8, r8, #1
 80127bc:	9c07      	ldr	r4, [sp, #28]
 80127be:	a808      	add	r0, sp, #32
 80127c0:	f002 fd14 	bl	80151ec <rcutils_string_map_fini>
 80127c4:	bb50      	cbnz	r0, 801281c <rcl_node_resolve_name+0x194>
 80127c6:	4651      	mov	r1, sl
 80127c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127ca:	47c8      	blx	r9
 80127cc:	4651      	mov	r1, sl
 80127ce:	4620      	mov	r0, r4
 80127d0:	47c8      	blx	r9
 80127d2:	f1b8 0f00 	cmp.w	r8, #0
 80127d6:	bf18      	it	ne
 80127d8:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 80127dc:	e797      	b.n	801270e <rcl_node_resolve_name+0x86>
 80127de:	f7fe fc5d 	bl	801109c <rcutils_get_error_string>
 80127e2:	f7fe fc71 	bl	80110c8 <rcutils_reset_error>
 80127e6:	a808      	add	r0, sp, #32
 80127e8:	f002 fd00 	bl	80151ec <rcutils_string_map_fini>
 80127ec:	b998      	cbnz	r0, 8012816 <rcl_node_resolve_name+0x18e>
 80127ee:	4651      	mov	r1, sl
 80127f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80127f2:	47c8      	blx	r9
 80127f4:	4651      	mov	r1, sl
 80127f6:	4620      	mov	r0, r4
 80127f8:	f04f 0b01 	mov.w	fp, #1
 80127fc:	47c8      	blx	r9
 80127fe:	e786      	b.n	801270e <rcl_node_resolve_name+0x86>
 8012800:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012804:	f7fe fc4a 	bl	801109c <rcutils_get_error_string>
 8012808:	f7fe fc5e 	bl	80110c8 <rcutils_reset_error>
 801280c:	4644      	mov	r4, r8
 801280e:	e7da      	b.n	80127c6 <rcl_node_resolve_name+0x13e>
 8012810:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 8012814:	e7d3      	b.n	80127be <rcl_node_resolve_name+0x136>
 8012816:	46d8      	mov	r8, fp
 8012818:	f04f 0b01 	mov.w	fp, #1
 801281c:	f7fe fc3e 	bl	801109c <rcutils_get_error_string>
 8012820:	f7fe fc52 	bl	80110c8 <rcutils_reset_error>
 8012824:	e7cf      	b.n	80127c6 <rcl_node_resolve_name+0x13e>
 8012826:	4651      	mov	r1, sl
 8012828:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801282a:	47c8      	blx	r9
 801282c:	4651      	mov	r1, sl
 801282e:	4658      	mov	r0, fp
 8012830:	47c8      	blx	r9
 8012832:	e76c      	b.n	801270e <rcl_node_resolve_name+0x86>

08012834 <rcl_get_zero_initialized_publisher>:
 8012834:	4b01      	ldr	r3, [pc, #4]	@ (801283c <rcl_get_zero_initialized_publisher+0x8>)
 8012836:	6818      	ldr	r0, [r3, #0]
 8012838:	4770      	bx	lr
 801283a:	bf00      	nop
 801283c:	0801feb8 	.word	0x0801feb8

08012840 <rcl_publisher_init>:
 8012840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012844:	b088      	sub	sp, #32
 8012846:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012848:	2e00      	cmp	r6, #0
 801284a:	d06b      	beq.n	8012924 <rcl_publisher_init+0xe4>
 801284c:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 8012850:	4605      	mov	r5, r0
 8012852:	460f      	mov	r7, r1
 8012854:	4690      	mov	r8, r2
 8012856:	4650      	mov	r0, sl
 8012858:	4699      	mov	r9, r3
 801285a:	f7fe fc11 	bl	8011080 <rcutils_allocator_is_valid>
 801285e:	f080 0401 	eor.w	r4, r0, #1
 8012862:	b2e4      	uxtb	r4, r4
 8012864:	2c00      	cmp	r4, #0
 8012866:	d15d      	bne.n	8012924 <rcl_publisher_init+0xe4>
 8012868:	2d00      	cmp	r5, #0
 801286a:	d05b      	beq.n	8012924 <rcl_publisher_init+0xe4>
 801286c:	682b      	ldr	r3, [r5, #0]
 801286e:	b123      	cbz	r3, 801287a <rcl_publisher_init+0x3a>
 8012870:	2464      	movs	r4, #100	@ 0x64
 8012872:	4620      	mov	r0, r4
 8012874:	b008      	add	sp, #32
 8012876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801287a:	4638      	mov	r0, r7
 801287c:	f7ff feac 	bl	80125d8 <rcl_node_is_valid>
 8012880:	2800      	cmp	r0, #0
 8012882:	d054      	beq.n	801292e <rcl_publisher_init+0xee>
 8012884:	f1b8 0f00 	cmp.w	r8, #0
 8012888:	d04c      	beq.n	8012924 <rcl_publisher_init+0xe4>
 801288a:	fab9 f389 	clz	r3, r9
 801288e:	095b      	lsrs	r3, r3, #5
 8012890:	f1b9 0f00 	cmp.w	r9, #0
 8012894:	d046      	beq.n	8012924 <rcl_publisher_init+0xe4>
 8012896:	aa07      	add	r2, sp, #28
 8012898:	9307      	str	r3, [sp, #28]
 801289a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801289e:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80128a2:	9205      	str	r2, [sp, #20]
 80128a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80128a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80128ac:	4649      	mov	r1, r9
 80128ae:	4638      	mov	r0, r7
 80128b0:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80128b4:	f7ff fee8 	bl	8012688 <rcl_node_resolve_name>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d14f      	bne.n	801295c <rcl_publisher_init+0x11c>
 80128bc:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80128be:	20c8      	movs	r0, #200	@ 0xc8
 80128c0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80128c2:	4798      	blx	r3
 80128c4:	6028      	str	r0, [r5, #0]
 80128c6:	2800      	cmp	r0, #0
 80128c8:	d050      	beq.n	801296c <rcl_publisher_init+0x12c>
 80128ca:	4638      	mov	r0, r7
 80128cc:	f7ff fea6 	bl	801261c <rcl_node_get_rmw_handle>
 80128d0:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80128d4:	4641      	mov	r1, r8
 80128d6:	9a07      	ldr	r2, [sp, #28]
 80128d8:	9300      	str	r3, [sp, #0]
 80128da:	4633      	mov	r3, r6
 80128dc:	682c      	ldr	r4, [r5, #0]
 80128de:	f003 fa67 	bl	8015db0 <rmw_create_publisher>
 80128e2:	682b      	ldr	r3, [r5, #0]
 80128e4:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 80128e8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80128ec:	b370      	cbz	r0, 801294c <rcl_publisher_init+0x10c>
 80128ee:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80128f2:	f003 fb41 	bl	8015f78 <rmw_publisher_get_actual_qos>
 80128f6:	682b      	ldr	r3, [r5, #0]
 80128f8:	4604      	mov	r4, r0
 80128fa:	b9d0      	cbnz	r0, 8012932 <rcl_publisher_init+0xf2>
 80128fc:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 8012900:	4631      	mov	r1, r6
 8012902:	4618      	mov	r0, r3
 8012904:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8012908:	2270      	movs	r2, #112	@ 0x70
 801290a:	f00a fe1a 	bl	801d542 <memcpy>
 801290e:	683a      	ldr	r2, [r7, #0]
 8012910:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8012914:	9807      	ldr	r0, [sp, #28]
 8012916:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012918:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801291a:	4798      	blx	r3
 801291c:	4620      	mov	r0, r4
 801291e:	b008      	add	sp, #32
 8012920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012924:	240b      	movs	r4, #11
 8012926:	4620      	mov	r0, r4
 8012928:	b008      	add	sp, #32
 801292a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801292e:	24c8      	movs	r4, #200	@ 0xc8
 8012930:	e79f      	b.n	8012872 <rcl_publisher_init+0x32>
 8012932:	b1cb      	cbz	r3, 8012968 <rcl_publisher_init+0x128>
 8012934:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8012938:	b142      	cbz	r2, 801294c <rcl_publisher_init+0x10c>
 801293a:	4638      	mov	r0, r7
 801293c:	f7ff fe6e 	bl	801261c <rcl_node_get_rmw_handle>
 8012940:	682b      	ldr	r3, [r5, #0]
 8012942:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8012946:	f003 fb2b 	bl	8015fa0 <rmw_destroy_publisher>
 801294a:	682b      	ldr	r3, [r5, #0]
 801294c:	4618      	mov	r0, r3
 801294e:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 8012950:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012952:	2401      	movs	r4, #1
 8012954:	4790      	blx	r2
 8012956:	2300      	movs	r3, #0
 8012958:	602b      	str	r3, [r5, #0]
 801295a:	e7db      	b.n	8012914 <rcl_publisher_init+0xd4>
 801295c:	2867      	cmp	r0, #103	@ 0x67
 801295e:	d007      	beq.n	8012970 <rcl_publisher_init+0x130>
 8012960:	2869      	cmp	r0, #105	@ 0x69
 8012962:	d005      	beq.n	8012970 <rcl_publisher_init+0x130>
 8012964:	280a      	cmp	r0, #10
 8012966:	d001      	beq.n	801296c <rcl_publisher_init+0x12c>
 8012968:	2401      	movs	r4, #1
 801296a:	e7d3      	b.n	8012914 <rcl_publisher_init+0xd4>
 801296c:	240a      	movs	r4, #10
 801296e:	e7d1      	b.n	8012914 <rcl_publisher_init+0xd4>
 8012970:	2467      	movs	r4, #103	@ 0x67
 8012972:	e7cf      	b.n	8012914 <rcl_publisher_init+0xd4>

08012974 <rcl_publisher_get_default_options>:
 8012974:	b570      	push	{r4, r5, r6, lr}
 8012976:	4d14      	ldr	r5, [pc, #80]	@ (80129c8 <rcl_publisher_get_default_options+0x54>)
 8012978:	b088      	sub	sp, #32
 801297a:	4604      	mov	r4, r0
 801297c:	2250      	movs	r2, #80	@ 0x50
 801297e:	4913      	ldr	r1, [pc, #76]	@ (80129cc <rcl_publisher_get_default_options+0x58>)
 8012980:	4628      	mov	r0, r5
 8012982:	f00a fdde 	bl	801d542 <memcpy>
 8012986:	a802      	add	r0, sp, #8
 8012988:	f7fe fb6c 	bl	8011064 <rcutils_get_default_allocator>
 801298c:	f10d 0c08 	add.w	ip, sp, #8
 8012990:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012994:	466e      	mov	r6, sp
 8012996:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801299a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801299e:	f8dc 3000 	ldr.w	r3, [ip]
 80129a2:	4630      	mov	r0, r6
 80129a4:	f8ce 3000 	str.w	r3, [lr]
 80129a8:	f002 fcbe 	bl	8015328 <rmw_get_default_publisher_options>
 80129ac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80129b0:	2270      	movs	r2, #112	@ 0x70
 80129b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80129b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80129ba:	4629      	mov	r1, r5
 80129bc:	4620      	mov	r0, r4
 80129be:	f00a fdc0 	bl	801d542 <memcpy>
 80129c2:	4620      	mov	r0, r4
 80129c4:	b008      	add	sp, #32
 80129c6:	bd70      	pop	{r4, r5, r6, pc}
 80129c8:	240646c8 	.word	0x240646c8
 80129cc:	0801fec0 	.word	0x0801fec0

080129d0 <rcl_publisher_is_valid>:
 80129d0:	b1a0      	cbz	r0, 80129fc <rcl_publisher_is_valid+0x2c>
 80129d2:	6803      	ldr	r3, [r0, #0]
 80129d4:	b510      	push	{r4, lr}
 80129d6:	4604      	mov	r4, r0
 80129d8:	b173      	cbz	r3, 80129f8 <rcl_publisher_is_valid+0x28>
 80129da:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80129de:	b15a      	cbz	r2, 80129f8 <rcl_publisher_is_valid+0x28>
 80129e0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80129e4:	f7ff fa18 	bl	8011e18 <rcl_context_is_valid>
 80129e8:	b130      	cbz	r0, 80129f8 <rcl_publisher_is_valid+0x28>
 80129ea:	6823      	ldr	r3, [r4, #0]
 80129ec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80129f0:	3800      	subs	r0, #0
 80129f2:	bf18      	it	ne
 80129f4:	2001      	movne	r0, #1
 80129f6:	bd10      	pop	{r4, pc}
 80129f8:	2000      	movs	r0, #0
 80129fa:	bd10      	pop	{r4, pc}
 80129fc:	2000      	movs	r0, #0
 80129fe:	4770      	bx	lr

08012a00 <rcl_publisher_is_valid_except_context>:
 8012a00:	b130      	cbz	r0, 8012a10 <rcl_publisher_is_valid_except_context+0x10>
 8012a02:	6800      	ldr	r0, [r0, #0]
 8012a04:	b120      	cbz	r0, 8012a10 <rcl_publisher_is_valid_except_context+0x10>
 8012a06:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8012a0a:	3800      	subs	r0, #0
 8012a0c:	bf18      	it	ne
 8012a0e:	2001      	movne	r0, #1
 8012a10:	4770      	bx	lr
 8012a12:	bf00      	nop

08012a14 <exact_match_lookup>:
 8012a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a16:	f102 0708 	add.w	r7, r2, #8
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	b085      	sub	sp, #20
 8012a1e:	4614      	mov	r4, r2
 8012a20:	4606      	mov	r6, r0
 8012a22:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012a26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	4919      	ldr	r1, [pc, #100]	@ (8012a94 <exact_match_lookup+0x80>)
 8012a2e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012a32:	f002 f99f 	bl	8014d74 <rcutils_join_path>
 8012a36:	7833      	ldrb	r3, [r6, #0]
 8012a38:	4605      	mov	r5, r0
 8012a3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a3c:	d023      	beq.n	8012a86 <exact_match_lookup+0x72>
 8012a3e:	f104 030c 	add.w	r3, r4, #12
 8012a42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a46:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a4a:	1c70      	adds	r0, r6, #1
 8012a4c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012a50:	f002 f996 	bl	8014d80 <rcutils_to_native_path>
 8012a54:	4606      	mov	r6, r0
 8012a56:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012a5a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a5e:	4631      	mov	r1, r6
 8012a60:	4628      	mov	r0, r5
 8012a62:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012a66:	f002 f985 	bl	8014d74 <rcutils_join_path>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	4630      	mov	r0, r6
 8012a6e:	6862      	ldr	r2, [r4, #4]
 8012a70:	461e      	mov	r6, r3
 8012a72:	6921      	ldr	r1, [r4, #16]
 8012a74:	4790      	blx	r2
 8012a76:	4628      	mov	r0, r5
 8012a78:	4635      	mov	r5, r6
 8012a7a:	6863      	ldr	r3, [r4, #4]
 8012a7c:	6921      	ldr	r1, [r4, #16]
 8012a7e:	4798      	blx	r3
 8012a80:	4628      	mov	r0, r5
 8012a82:	b005      	add	sp, #20
 8012a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a86:	7873      	ldrb	r3, [r6, #1]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d1d8      	bne.n	8012a3e <exact_match_lookup+0x2a>
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	b005      	add	sp, #20
 8012a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a92:	bf00      	nop
 8012a94:	0801ff4c 	.word	0x0801ff4c

08012a98 <rcl_get_secure_root>:
 8012a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a9c:	b085      	sub	sp, #20
 8012a9e:	b168      	cbz	r0, 8012abc <rcl_get_secure_root+0x24>
 8012aa0:	4607      	mov	r7, r0
 8012aa2:	4608      	mov	r0, r1
 8012aa4:	460c      	mov	r4, r1
 8012aa6:	f7fe faeb 	bl	8011080 <rcutils_allocator_is_valid>
 8012aaa:	b138      	cbz	r0, 8012abc <rcl_get_secure_root+0x24>
 8012aac:	2300      	movs	r3, #0
 8012aae:	482d      	ldr	r0, [pc, #180]	@ (8012b64 <rcl_get_secure_root+0xcc>)
 8012ab0:	a903      	add	r1, sp, #12
 8012ab2:	9303      	str	r3, [sp, #12]
 8012ab4:	f002 f944 	bl	8014d40 <rcutils_get_env>
 8012ab8:	4605      	mov	r5, r0
 8012aba:	b120      	cbz	r0, 8012ac6 <rcl_get_secure_root+0x2e>
 8012abc:	2500      	movs	r5, #0
 8012abe:	4628      	mov	r0, r5
 8012ac0:	b005      	add	sp, #20
 8012ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ac6:	9b03      	ldr	r3, [sp, #12]
 8012ac8:	781a      	ldrb	r2, [r3, #0]
 8012aca:	2a00      	cmp	r2, #0
 8012acc:	d0f6      	beq.n	8012abc <rcl_get_secure_root+0x24>
 8012ace:	f104 090c 	add.w	r9, r4, #12
 8012ad2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012ad6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012ada:	4618      	mov	r0, r3
 8012adc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012ae0:	f002 fa90 	bl	8015004 <rcutils_strdup>
 8012ae4:	4680      	mov	r8, r0
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	d0e8      	beq.n	8012abc <rcl_get_secure_root+0x24>
 8012aea:	a903      	add	r1, sp, #12
 8012aec:	481e      	ldr	r0, [pc, #120]	@ (8012b68 <rcl_get_secure_root+0xd0>)
 8012aee:	9503      	str	r5, [sp, #12]
 8012af0:	f002 f926 	bl	8014d40 <rcutils_get_env>
 8012af4:	b160      	cbz	r0, 8012b10 <rcl_get_secure_root+0x78>
 8012af6:	2600      	movs	r6, #0
 8012af8:	4630      	mov	r0, r6
 8012afa:	6863      	ldr	r3, [r4, #4]
 8012afc:	6921      	ldr	r1, [r4, #16]
 8012afe:	4798      	blx	r3
 8012b00:	4640      	mov	r0, r8
 8012b02:	6863      	ldr	r3, [r4, #4]
 8012b04:	6921      	ldr	r1, [r4, #16]
 8012b06:	4798      	blx	r3
 8012b08:	4628      	mov	r0, r5
 8012b0a:	b005      	add	sp, #20
 8012b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b10:	9b03      	ldr	r3, [sp, #12]
 8012b12:	781e      	ldrb	r6, [r3, #0]
 8012b14:	b1f6      	cbz	r6, 8012b54 <rcl_get_secure_root+0xbc>
 8012b16:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012b1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012b24:	f002 fa6e 	bl	8015004 <rcutils_strdup>
 8012b28:	4606      	mov	r6, r0
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	d0e3      	beq.n	8012af6 <rcl_get_secure_root+0x5e>
 8012b2e:	4622      	mov	r2, r4
 8012b30:	4641      	mov	r1, r8
 8012b32:	f7ff ff6f 	bl	8012a14 <exact_match_lookup>
 8012b36:	4605      	mov	r5, r0
 8012b38:	2d00      	cmp	r5, #0
 8012b3a:	d0dd      	beq.n	8012af8 <rcl_get_secure_root+0x60>
 8012b3c:	4628      	mov	r0, r5
 8012b3e:	f002 f917 	bl	8014d70 <rcutils_is_directory>
 8012b42:	4603      	mov	r3, r0
 8012b44:	2800      	cmp	r0, #0
 8012b46:	d1d7      	bne.n	8012af8 <rcl_get_secure_root+0x60>
 8012b48:	4628      	mov	r0, r5
 8012b4a:	6921      	ldr	r1, [r4, #16]
 8012b4c:	461d      	mov	r5, r3
 8012b4e:	6863      	ldr	r3, [r4, #4]
 8012b50:	4798      	blx	r3
 8012b52:	e7d1      	b.n	8012af8 <rcl_get_secure_root+0x60>
 8012b54:	4622      	mov	r2, r4
 8012b56:	4638      	mov	r0, r7
 8012b58:	4641      	mov	r1, r8
 8012b5a:	f7ff ff5b 	bl	8012a14 <exact_match_lookup>
 8012b5e:	4605      	mov	r5, r0
 8012b60:	e7ea      	b.n	8012b38 <rcl_get_secure_root+0xa0>
 8012b62:	bf00      	nop
 8012b64:	0801ff58 	.word	0x0801ff58
 8012b68:	0801ff70 	.word	0x0801ff70

08012b6c <rcl_get_security_options_from_environment>:
 8012b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b70:	b082      	sub	sp, #8
 8012b72:	2300      	movs	r3, #0
 8012b74:	4606      	mov	r6, r0
 8012b76:	460f      	mov	r7, r1
 8012b78:	4821      	ldr	r0, [pc, #132]	@ (8012c00 <rcl_get_security_options_from_environment+0x94>)
 8012b7a:	a901      	add	r1, sp, #4
 8012b7c:	4690      	mov	r8, r2
 8012b7e:	9301      	str	r3, [sp, #4]
 8012b80:	f002 f8de 	bl	8014d40 <rcutils_get_env>
 8012b84:	b120      	cbz	r0, 8012b90 <rcl_get_security_options_from_environment+0x24>
 8012b86:	2501      	movs	r5, #1
 8012b88:	4628      	mov	r0, r5
 8012b8a:	b002      	add	sp, #8
 8012b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b90:	4604      	mov	r4, r0
 8012b92:	491c      	ldr	r1, [pc, #112]	@ (8012c04 <rcl_get_security_options_from_environment+0x98>)
 8012b94:	9801      	ldr	r0, [sp, #4]
 8012b96:	f7ed fba3 	bl	80002e0 <strcmp>
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	b9f0      	cbnz	r0, 8012bdc <rcl_get_security_options_from_environment+0x70>
 8012b9e:	9001      	str	r0, [sp, #4]
 8012ba0:	f1b8 0f00 	cmp.w	r8, #0
 8012ba4:	d021      	beq.n	8012bea <rcl_get_security_options_from_environment+0x7e>
 8012ba6:	a901      	add	r1, sp, #4
 8012ba8:	4817      	ldr	r0, [pc, #92]	@ (8012c08 <rcl_get_security_options_from_environment+0x9c>)
 8012baa:	f002 f8c9 	bl	8014d40 <rcutils_get_env>
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d1e9      	bne.n	8012b86 <rcl_get_security_options_from_environment+0x1a>
 8012bb2:	4916      	ldr	r1, [pc, #88]	@ (8012c0c <rcl_get_security_options_from_environment+0xa0>)
 8012bb4:	9801      	ldr	r0, [sp, #4]
 8012bb6:	f7ed fb93 	bl	80002e0 <strcmp>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	4639      	mov	r1, r7
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	fab3 f383 	clz	r3, r3
 8012bc4:	095b      	lsrs	r3, r3, #5
 8012bc6:	f888 3000 	strb.w	r3, [r8]
 8012bca:	f7ff ff65 	bl	8012a98 <rcl_get_secure_root>
 8012bce:	b170      	cbz	r0, 8012bee <rcl_get_security_options_from_environment+0x82>
 8012bd0:	f8c8 0004 	str.w	r0, [r8, #4]
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	b002      	add	sp, #8
 8012bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bdc:	4625      	mov	r5, r4
 8012bde:	f888 4000 	strb.w	r4, [r8]
 8012be2:	4628      	mov	r0, r5
 8012be4:	b002      	add	sp, #8
 8012be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bea:	250b      	movs	r5, #11
 8012bec:	e7cc      	b.n	8012b88 <rcl_get_security_options_from_environment+0x1c>
 8012bee:	f898 5000 	ldrb.w	r5, [r8]
 8012bf2:	f1a5 0501 	sub.w	r5, r5, #1
 8012bf6:	fab5 f585 	clz	r5, r5
 8012bfa:	096d      	lsrs	r5, r5, #5
 8012bfc:	e7c4      	b.n	8012b88 <rcl_get_security_options_from_environment+0x1c>
 8012bfe:	bf00      	nop
 8012c00:	0801ff10 	.word	0x0801ff10
 8012c04:	0801ff24 	.word	0x0801ff24
 8012c08:	0801ff2c 	.word	0x0801ff2c
 8012c0c:	0801ff44 	.word	0x0801ff44

08012c10 <rcl_get_zero_initialized_service>:
 8012c10:	4b01      	ldr	r3, [pc, #4]	@ (8012c18 <rcl_get_zero_initialized_service+0x8>)
 8012c12:	6818      	ldr	r0, [r3, #0]
 8012c14:	4770      	bx	lr
 8012c16:	bf00      	nop
 8012c18:	0801ff90 	.word	0x0801ff90

08012c1c <rcl_service_init>:
 8012c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c20:	b088      	sub	sp, #32
 8012c22:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012c24:	b1ff      	cbz	r7, 8012c66 <rcl_service_init+0x4a>
 8012c26:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8012c2a:	4605      	mov	r5, r0
 8012c2c:	460e      	mov	r6, r1
 8012c2e:	4691      	mov	r9, r2
 8012c30:	4650      	mov	r0, sl
 8012c32:	4698      	mov	r8, r3
 8012c34:	f7fe fa24 	bl	8011080 <rcutils_allocator_is_valid>
 8012c38:	f080 0401 	eor.w	r4, r0, #1
 8012c3c:	b2e4      	uxtb	r4, r4
 8012c3e:	b994      	cbnz	r4, 8012c66 <rcl_service_init+0x4a>
 8012c40:	b18d      	cbz	r5, 8012c66 <rcl_service_init+0x4a>
 8012c42:	4630      	mov	r0, r6
 8012c44:	f7ff fcc8 	bl	80125d8 <rcl_node_is_valid>
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d05d      	beq.n	8012d08 <rcl_service_init+0xec>
 8012c4c:	f1b8 0f00 	cmp.w	r8, #0
 8012c50:	d009      	beq.n	8012c66 <rcl_service_init+0x4a>
 8012c52:	f1b9 0f00 	cmp.w	r9, #0
 8012c56:	d006      	beq.n	8012c66 <rcl_service_init+0x4a>
 8012c58:	682b      	ldr	r3, [r5, #0]
 8012c5a:	b14b      	cbz	r3, 8012c70 <rcl_service_init+0x54>
 8012c5c:	2464      	movs	r4, #100	@ 0x64
 8012c5e:	4620      	mov	r0, r4
 8012c60:	b008      	add	sp, #32
 8012c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c66:	240b      	movs	r4, #11
 8012c68:	4620      	mov	r0, r4
 8012c6a:	b008      	add	sp, #32
 8012c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c70:	aa07      	add	r2, sp, #28
 8012c72:	9304      	str	r3, [sp, #16]
 8012c74:	9307      	str	r3, [sp, #28]
 8012c76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012c7a:	9205      	str	r2, [sp, #20]
 8012c7c:	2201      	movs	r2, #1
 8012c7e:	9203      	str	r2, [sp, #12]
 8012c80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c84:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012c88:	4641      	mov	r1, r8
 8012c8a:	4630      	mov	r0, r6
 8012c8c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012c90:	f7ff fcfa 	bl	8012688 <rcl_node_resolve_name>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d146      	bne.n	8012d26 <rcl_service_init+0x10a>
 8012c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c9a:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8012c9e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012ca0:	4798      	blx	r3
 8012ca2:	6028      	str	r0, [r5, #0]
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d046      	beq.n	8012d36 <rcl_service_init+0x11a>
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ff fcb7 	bl	801261c <rcl_node_get_rmw_handle>
 8012cae:	463b      	mov	r3, r7
 8012cb0:	4649      	mov	r1, r9
 8012cb2:	9a07      	ldr	r2, [sp, #28]
 8012cb4:	682c      	ldr	r4, [r5, #0]
 8012cb6:	f003 fb17 	bl	80162e8 <rmw_create_service>
 8012cba:	682b      	ldr	r3, [r5, #0]
 8012cbc:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 8012cc0:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012cc4:	b338      	cbz	r0, 8012d16 <rcl_service_init+0xfa>
 8012cc6:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8012cca:	f003 fc3f 	bl	801654c <rmw_service_request_subscription_get_actual_qos>
 8012cce:	bb00      	cbnz	r0, 8012d12 <rcl_service_init+0xf6>
 8012cd0:	682b      	ldr	r3, [r5, #0]
 8012cd2:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8012cd6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012cda:	f003 fc23 	bl	8016524 <rmw_service_response_publisher_get_actual_qos>
 8012cde:	4604      	mov	r4, r0
 8012ce0:	b9b8      	cbnz	r0, 8012d12 <rcl_service_init+0xf6>
 8012ce2:	6828      	ldr	r0, [r5, #0]
 8012ce4:	2268      	movs	r2, #104	@ 0x68
 8012ce6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8012cea:	4639      	mov	r1, r7
 8012cec:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8012cf0:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8012cf4:	f00a fc25 	bl	801d542 <memcpy>
 8012cf8:	9807      	ldr	r0, [sp, #28]
 8012cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012cfc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012cfe:	4798      	blx	r3
 8012d00:	4620      	mov	r0, r4
 8012d02:	b008      	add	sp, #32
 8012d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d08:	24c8      	movs	r4, #200	@ 0xc8
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	b008      	add	sp, #32
 8012d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d12:	682b      	ldr	r3, [r5, #0]
 8012d14:	b16b      	cbz	r3, 8012d32 <rcl_service_init+0x116>
 8012d16:	4618      	mov	r0, r3
 8012d18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012d1a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012d1c:	2401      	movs	r4, #1
 8012d1e:	4790      	blx	r2
 8012d20:	2300      	movs	r3, #0
 8012d22:	602b      	str	r3, [r5, #0]
 8012d24:	e7e8      	b.n	8012cf8 <rcl_service_init+0xdc>
 8012d26:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d905      	bls.n	8012d3a <rcl_service_init+0x11e>
 8012d2e:	280a      	cmp	r0, #10
 8012d30:	d001      	beq.n	8012d36 <rcl_service_init+0x11a>
 8012d32:	2401      	movs	r4, #1
 8012d34:	e7e0      	b.n	8012cf8 <rcl_service_init+0xdc>
 8012d36:	240a      	movs	r4, #10
 8012d38:	e7de      	b.n	8012cf8 <rcl_service_init+0xdc>
 8012d3a:	2468      	movs	r4, #104	@ 0x68
 8012d3c:	e7dc      	b.n	8012cf8 <rcl_service_init+0xdc>
 8012d3e:	bf00      	nop

08012d40 <rcl_service_get_default_options>:
 8012d40:	b530      	push	{r4, r5, lr}
 8012d42:	4d0f      	ldr	r5, [pc, #60]	@ (8012d80 <rcl_service_get_default_options+0x40>)
 8012d44:	b087      	sub	sp, #28
 8012d46:	4604      	mov	r4, r0
 8012d48:	2250      	movs	r2, #80	@ 0x50
 8012d4a:	490e      	ldr	r1, [pc, #56]	@ (8012d84 <rcl_service_get_default_options+0x44>)
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	f00a fbf8 	bl	801d542 <memcpy>
 8012d52:	4668      	mov	r0, sp
 8012d54:	f7fe f986 	bl	8011064 <rcutils_get_default_allocator>
 8012d58:	46ec      	mov	ip, sp
 8012d5a:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012d5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d66:	f8dc 3000 	ldr.w	r3, [ip]
 8012d6a:	2268      	movs	r2, #104	@ 0x68
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f8ce 3000 	str.w	r3, [lr]
 8012d74:	f00a fbe5 	bl	801d542 <memcpy>
 8012d78:	4620      	mov	r0, r4
 8012d7a:	b007      	add	sp, #28
 8012d7c:	bd30      	pop	{r4, r5, pc}
 8012d7e:	bf00      	nop
 8012d80:	24064738 	.word	0x24064738
 8012d84:	0801ff98 	.word	0x0801ff98

08012d88 <rcl_service_get_rmw_handle>:
 8012d88:	b118      	cbz	r0, 8012d92 <rcl_service_get_rmw_handle+0xa>
 8012d8a:	6800      	ldr	r0, [r0, #0]
 8012d8c:	b108      	cbz	r0, 8012d92 <rcl_service_get_rmw_handle+0xa>
 8012d8e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012d92:	4770      	bx	lr

08012d94 <rcl_take_request>:
 8012d94:	b570      	push	{r4, r5, r6, lr}
 8012d96:	468e      	mov	lr, r1
 8012d98:	b08c      	sub	sp, #48	@ 0x30
 8012d9a:	460c      	mov	r4, r1
 8012d9c:	4616      	mov	r6, r2
 8012d9e:	f10d 0c18 	add.w	ip, sp, #24
 8012da2:	4605      	mov	r5, r0
 8012da4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012da8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012dac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012db0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012db4:	b30d      	cbz	r5, 8012dfa <rcl_take_request+0x66>
 8012db6:	682b      	ldr	r3, [r5, #0]
 8012db8:	b1fb      	cbz	r3, 8012dfa <rcl_take_request+0x66>
 8012dba:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012dbe:	b1e0      	cbz	r0, 8012dfa <rcl_take_request+0x66>
 8012dc0:	b336      	cbz	r6, 8012e10 <rcl_take_request+0x7c>
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	4632      	mov	r2, r6
 8012dc6:	a902      	add	r1, sp, #8
 8012dc8:	f88d 3007 	strb.w	r3, [sp, #7]
 8012dcc:	f10d 0307 	add.w	r3, sp, #7
 8012dd0:	f003 f988 	bl	80160e4 <rmw_take_request>
 8012dd4:	4605      	mov	r5, r0
 8012dd6:	b198      	cbz	r0, 8012e00 <rcl_take_request+0x6c>
 8012dd8:	280a      	cmp	r0, #10
 8012dda:	bf18      	it	ne
 8012ddc:	2501      	movne	r5, #1
 8012dde:	f10d 0e18 	add.w	lr, sp, #24
 8012de2:	46a4      	mov	ip, r4
 8012de4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012de8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012dec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012df0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012df4:	4628      	mov	r0, r5
 8012df6:	b00c      	add	sp, #48	@ 0x30
 8012df8:	bd70      	pop	{r4, r5, r6, pc}
 8012dfa:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012dfe:	e7ee      	b.n	8012dde <rcl_take_request+0x4a>
 8012e00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012e04:	f240 2359 	movw	r3, #601	@ 0x259
 8012e08:	2a00      	cmp	r2, #0
 8012e0a:	bf08      	it	eq
 8012e0c:	461d      	moveq	r5, r3
 8012e0e:	e7e6      	b.n	8012dde <rcl_take_request+0x4a>
 8012e10:	250b      	movs	r5, #11
 8012e12:	e7e4      	b.n	8012dde <rcl_take_request+0x4a>

08012e14 <rcl_send_response>:
 8012e14:	b170      	cbz	r0, 8012e34 <rcl_send_response+0x20>
 8012e16:	6800      	ldr	r0, [r0, #0]
 8012e18:	b160      	cbz	r0, 8012e34 <rcl_send_response+0x20>
 8012e1a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012e1e:	b148      	cbz	r0, 8012e34 <rcl_send_response+0x20>
 8012e20:	b169      	cbz	r1, 8012e3e <rcl_send_response+0x2a>
 8012e22:	b510      	push	{r4, lr}
 8012e24:	b14a      	cbz	r2, 8012e3a <rcl_send_response+0x26>
 8012e26:	f003 f9bb 	bl	80161a0 <rmw_send_response>
 8012e2a:	b110      	cbz	r0, 8012e32 <rcl_send_response+0x1e>
 8012e2c:	2802      	cmp	r0, #2
 8012e2e:	bf18      	it	ne
 8012e30:	2001      	movne	r0, #1
 8012e32:	bd10      	pop	{r4, pc}
 8012e34:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012e38:	4770      	bx	lr
 8012e3a:	200b      	movs	r0, #11
 8012e3c:	bd10      	pop	{r4, pc}
 8012e3e:	200b      	movs	r0, #11
 8012e40:	4770      	bx	lr
 8012e42:	bf00      	nop

08012e44 <rcl_service_is_valid>:
 8012e44:	b130      	cbz	r0, 8012e54 <rcl_service_is_valid+0x10>
 8012e46:	6800      	ldr	r0, [r0, #0]
 8012e48:	b120      	cbz	r0, 8012e54 <rcl_service_is_valid+0x10>
 8012e4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012e4e:	3800      	subs	r0, #0
 8012e50:	bf18      	it	ne
 8012e52:	2001      	movne	r0, #1
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop

08012e58 <rcl_get_zero_initialized_subscription>:
 8012e58:	4b01      	ldr	r3, [pc, #4]	@ (8012e60 <rcl_get_zero_initialized_subscription+0x8>)
 8012e5a:	6818      	ldr	r0, [r3, #0]
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop
 8012e60:	0801ffe8 	.word	0x0801ffe8

08012e64 <rcl_subscription_init>:
 8012e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e68:	b088      	sub	sp, #32
 8012e6a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012e6c:	b1ff      	cbz	r7, 8012eae <rcl_subscription_init+0x4a>
 8012e6e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 8012e72:	4605      	mov	r5, r0
 8012e74:	460e      	mov	r6, r1
 8012e76:	4691      	mov	r9, r2
 8012e78:	4650      	mov	r0, sl
 8012e7a:	4698      	mov	r8, r3
 8012e7c:	f7fe f900 	bl	8011080 <rcutils_allocator_is_valid>
 8012e80:	f080 0401 	eor.w	r4, r0, #1
 8012e84:	b2e4      	uxtb	r4, r4
 8012e86:	b994      	cbnz	r4, 8012eae <rcl_subscription_init+0x4a>
 8012e88:	b18d      	cbz	r5, 8012eae <rcl_subscription_init+0x4a>
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f7ff fba4 	bl	80125d8 <rcl_node_is_valid>
 8012e90:	2800      	cmp	r0, #0
 8012e92:	d055      	beq.n	8012f40 <rcl_subscription_init+0xdc>
 8012e94:	f1b9 0f00 	cmp.w	r9, #0
 8012e98:	d009      	beq.n	8012eae <rcl_subscription_init+0x4a>
 8012e9a:	f1b8 0f00 	cmp.w	r8, #0
 8012e9e:	d006      	beq.n	8012eae <rcl_subscription_init+0x4a>
 8012ea0:	682b      	ldr	r3, [r5, #0]
 8012ea2:	b14b      	cbz	r3, 8012eb8 <rcl_subscription_init+0x54>
 8012ea4:	2464      	movs	r4, #100	@ 0x64
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	b008      	add	sp, #32
 8012eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eae:	240b      	movs	r4, #11
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	b008      	add	sp, #32
 8012eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012ebc:	aa07      	add	r2, sp, #28
 8012ebe:	9307      	str	r3, [sp, #28]
 8012ec0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012ec4:	9205      	str	r2, [sp, #20]
 8012ec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012eca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012ece:	4641      	mov	r1, r8
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8012ed6:	f7ff fbd7 	bl	8012688 <rcl_node_resolve_name>
 8012eda:	2800      	cmp	r0, #0
 8012edc:	d15f      	bne.n	8012f9e <rcl_subscription_init+0x13a>
 8012ede:	21c8      	movs	r1, #200	@ 0xc8
 8012ee0:	2001      	movs	r0, #1
 8012ee2:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 8012ee6:	4798      	blx	r3
 8012ee8:	6028      	str	r0, [r5, #0]
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d05f      	beq.n	8012fae <rcl_subscription_init+0x14a>
 8012eee:	4630      	mov	r0, r6
 8012ef0:	f7ff fb94 	bl	801261c <rcl_node_get_rmw_handle>
 8012ef4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8012ef8:	4649      	mov	r1, r9
 8012efa:	9a07      	ldr	r2, [sp, #28]
 8012efc:	9300      	str	r3, [sp, #0]
 8012efe:	463b      	mov	r3, r7
 8012f00:	682c      	ldr	r4, [r5, #0]
 8012f02:	f003 fb37 	bl	8016574 <rmw_create_subscription>
 8012f06:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8012f0a:	682c      	ldr	r4, [r5, #0]
 8012f0c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8012f10:	b348      	cbz	r0, 8012f66 <rcl_subscription_init+0x102>
 8012f12:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8012f16:	f003 fc23 	bl	8016760 <rmw_subscription_get_actual_qos>
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	b9a8      	cbnz	r0, 8012f4a <rcl_subscription_init+0xe6>
 8012f1e:	6828      	ldr	r0, [r5, #0]
 8012f20:	2270      	movs	r2, #112	@ 0x70
 8012f22:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8012f26:	4639      	mov	r1, r7
 8012f28:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8012f2c:	f00a fb09 	bl	801d542 <memcpy>
 8012f30:	9807      	ldr	r0, [sp, #28]
 8012f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f34:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012f36:	4798      	blx	r3
 8012f38:	4620      	mov	r0, r4
 8012f3a:	b008      	add	sp, #32
 8012f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f40:	24c8      	movs	r4, #200	@ 0xc8
 8012f42:	4620      	mov	r0, r4
 8012f44:	b008      	add	sp, #32
 8012f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f4a:	682c      	ldr	r4, [r5, #0]
 8012f4c:	b36c      	cbz	r4, 8012faa <rcl_subscription_init+0x146>
 8012f4e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8012f52:	b14b      	cbz	r3, 8012f68 <rcl_subscription_init+0x104>
 8012f54:	4630      	mov	r0, r6
 8012f56:	f7ff fb61 	bl	801261c <rcl_node_get_rmw_handle>
 8012f5a:	682b      	ldr	r3, [r5, #0]
 8012f5c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8012f60:	f003 fc12 	bl	8016788 <rmw_destroy_subscription>
 8012f64:	682c      	ldr	r4, [r5, #0]
 8012f66:	b194      	cbz	r4, 8012f8e <rcl_subscription_init+0x12a>
 8012f68:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	f7fe f887 	bl	8011080 <rcutils_allocator_is_valid>
 8012f72:	b158      	cbz	r0, 8012f8c <rcl_subscription_init+0x128>
 8012f74:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8012f76:	b148      	cbz	r0, 8012f8c <rcl_subscription_init+0x128>
 8012f78:	4631      	mov	r1, r6
 8012f7a:	f002 f9dd 	bl	8015338 <rmw_subscription_content_filter_options_fini>
 8012f7e:	4606      	mov	r6, r0
 8012f80:	b9c8      	cbnz	r0, 8012fb6 <rcl_subscription_init+0x152>
 8012f82:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8012f84:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8012f86:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8012f88:	4798      	blx	r3
 8012f8a:	66e6      	str	r6, [r4, #108]	@ 0x6c
 8012f8c:	682c      	ldr	r4, [r5, #0]
 8012f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f90:	4620      	mov	r0, r4
 8012f92:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012f94:	2401      	movs	r4, #1
 8012f96:	4798      	blx	r3
 8012f98:	2300      	movs	r3, #0
 8012f9a:	602b      	str	r3, [r5, #0]
 8012f9c:	e7c8      	b.n	8012f30 <rcl_subscription_init+0xcc>
 8012f9e:	2867      	cmp	r0, #103	@ 0x67
 8012fa0:	d007      	beq.n	8012fb2 <rcl_subscription_init+0x14e>
 8012fa2:	2869      	cmp	r0, #105	@ 0x69
 8012fa4:	d005      	beq.n	8012fb2 <rcl_subscription_init+0x14e>
 8012fa6:	280a      	cmp	r0, #10
 8012fa8:	d001      	beq.n	8012fae <rcl_subscription_init+0x14a>
 8012faa:	2401      	movs	r4, #1
 8012fac:	e7c0      	b.n	8012f30 <rcl_subscription_init+0xcc>
 8012fae:	240a      	movs	r4, #10
 8012fb0:	e7be      	b.n	8012f30 <rcl_subscription_init+0xcc>
 8012fb2:	2467      	movs	r4, #103	@ 0x67
 8012fb4:	e7bc      	b.n	8012f30 <rcl_subscription_init+0xcc>
 8012fb6:	f008 f979 	bl	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>
 8012fba:	682c      	ldr	r4, [r5, #0]
 8012fbc:	e7e7      	b.n	8012f8e <rcl_subscription_init+0x12a>
 8012fbe:	bf00      	nop

08012fc0 <rcl_subscription_get_default_options>:
 8012fc0:	b570      	push	{r4, r5, r6, lr}
 8012fc2:	4d14      	ldr	r5, [pc, #80]	@ (8013014 <rcl_subscription_get_default_options+0x54>)
 8012fc4:	b08a      	sub	sp, #40	@ 0x28
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	2250      	movs	r2, #80	@ 0x50
 8012fca:	4913      	ldr	r1, [pc, #76]	@ (8013018 <rcl_subscription_get_default_options+0x58>)
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f00a fab8 	bl	801d542 <memcpy>
 8012fd2:	a804      	add	r0, sp, #16
 8012fd4:	f7fe f846 	bl	8011064 <rcutils_get_default_allocator>
 8012fd8:	f10d 0c10 	add.w	ip, sp, #16
 8012fdc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012fe0:	466e      	mov	r6, sp
 8012fe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012fe6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012fea:	f8dc 3000 	ldr.w	r3, [ip]
 8012fee:	4630      	mov	r0, r6
 8012ff0:	f8ce 3000 	str.w	r3, [lr]
 8012ff4:	f002 f9ba 	bl	801536c <rmw_get_default_subscription_options>
 8012ff8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8012ffc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013004:	2270      	movs	r2, #112	@ 0x70
 8013006:	4629      	mov	r1, r5
 8013008:	4620      	mov	r0, r4
 801300a:	f00a fa9a 	bl	801d542 <memcpy>
 801300e:	4620      	mov	r0, r4
 8013010:	b00a      	add	sp, #40	@ 0x28
 8013012:	bd70      	pop	{r4, r5, r6, pc}
 8013014:	240647a0 	.word	0x240647a0
 8013018:	0801fff0 	.word	0x0801fff0

0801301c <rcl_take>:
 801301c:	2800      	cmp	r0, #0
 801301e:	d049      	beq.n	80130b4 <rcl_take+0x98>
 8013020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013024:	4615      	mov	r5, r2
 8013026:	6802      	ldr	r2, [r0, #0]
 8013028:	b0a4      	sub	sp, #144	@ 0x90
 801302a:	4604      	mov	r4, r0
 801302c:	2a00      	cmp	r2, #0
 801302e:	d039      	beq.n	80130a4 <rcl_take+0x88>
 8013030:	461f      	mov	r7, r3
 8013032:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8013036:	b3ab      	cbz	r3, 80130a4 <rcl_take+0x88>
 8013038:	460e      	mov	r6, r1
 801303a:	2900      	cmp	r1, #0
 801303c:	d038      	beq.n	80130b0 <rcl_take+0x94>
 801303e:	2d00      	cmp	r5, #0
 8013040:	d03c      	beq.n	80130bc <rcl_take+0xa0>
 8013042:	a802      	add	r0, sp, #8
 8013044:	f04f 0800 	mov.w	r8, #0
 8013048:	f002 f996 	bl	8015378 <rmw_get_zero_initialized_message_info>
 801304c:	f10d 0c08 	add.w	ip, sp, #8
 8013050:	46ae      	mov	lr, r5
 8013052:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013056:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801305a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801305e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013062:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013066:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801306a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801306e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013072:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8013076:	462b      	mov	r3, r5
 8013078:	6820      	ldr	r0, [r4, #0]
 801307a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801307e:	4631      	mov	r1, r6
 8013080:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013084:	9700      	str	r7, [sp, #0]
 8013086:	f003 fbe1 	bl	801684c <rmw_take_with_info>
 801308a:	4603      	mov	r3, r0
 801308c:	b9c0      	cbnz	r0, 80130c0 <rcl_take+0xa4>
 801308e:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8013092:	f240 1291 	movw	r2, #401	@ 0x191
 8013096:	2900      	cmp	r1, #0
 8013098:	bf08      	it	eq
 801309a:	4613      	moveq	r3, r2
 801309c:	4618      	mov	r0, r3
 801309e:	b024      	add	sp, #144	@ 0x90
 80130a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130a4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80130a8:	4618      	mov	r0, r3
 80130aa:	b024      	add	sp, #144	@ 0x90
 80130ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b0:	230b      	movs	r3, #11
 80130b2:	e7f3      	b.n	801309c <rcl_take+0x80>
 80130b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80130b8:	4618      	mov	r0, r3
 80130ba:	4770      	bx	lr
 80130bc:	ad14      	add	r5, sp, #80	@ 0x50
 80130be:	e7c0      	b.n	8013042 <rcl_take+0x26>
 80130c0:	f008 f8f4 	bl	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>
 80130c4:	4603      	mov	r3, r0
 80130c6:	e7e9      	b.n	801309c <rcl_take+0x80>

080130c8 <rcl_subscription_get_rmw_handle>:
 80130c8:	b118      	cbz	r0, 80130d2 <rcl_subscription_get_rmw_handle+0xa>
 80130ca:	6800      	ldr	r0, [r0, #0]
 80130cc:	b108      	cbz	r0, 80130d2 <rcl_subscription_get_rmw_handle+0xa>
 80130ce:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80130d2:	4770      	bx	lr

080130d4 <rcl_subscription_is_valid>:
 80130d4:	b130      	cbz	r0, 80130e4 <rcl_subscription_is_valid+0x10>
 80130d6:	6800      	ldr	r0, [r0, #0]
 80130d8:	b120      	cbz	r0, 80130e4 <rcl_subscription_is_valid+0x10>
 80130da:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80130de:	3800      	subs	r0, #0
 80130e0:	bf18      	it	ne
 80130e2:	2001      	movne	r0, #1
 80130e4:	4770      	bx	lr
 80130e6:	bf00      	nop

080130e8 <rcl_get_system_time>:
 80130e8:	4608      	mov	r0, r1
 80130ea:	f7fe b809 	b.w	8011100 <rcutils_system_time_now>
 80130ee:	bf00      	nop

080130f0 <rcl_get_steady_time>:
 80130f0:	4608      	mov	r0, r1
 80130f2:	f7fe b82b 	b.w	801114c <rcutils_steady_time_now>
 80130f6:	bf00      	nop

080130f8 <rcl_get_ros_time>:
 80130f8:	7a03      	ldrb	r3, [r0, #8]
 80130fa:	b510      	push	{r4, lr}
 80130fc:	460c      	mov	r4, r1
 80130fe:	b143      	cbz	r3, 8013112 <rcl_get_ros_time+0x1a>
 8013100:	2105      	movs	r1, #5
 8013102:	f001 fd79 	bl	8014bf8 <__atomic_load_8>
 8013106:	4602      	mov	r2, r0
 8013108:	460b      	mov	r3, r1
 801310a:	2000      	movs	r0, #0
 801310c:	e9c4 2300 	strd	r2, r3, [r4]
 8013110:	bd10      	pop	{r4, pc}
 8013112:	4608      	mov	r0, r1
 8013114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013118:	f7fd bff2 	b.w	8011100 <rcutils_system_time_now>

0801311c <rcl_clock_init>:
 801311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801311e:	4605      	mov	r5, r0
 8013120:	4610      	mov	r0, r2
 8013122:	4614      	mov	r4, r2
 8013124:	460e      	mov	r6, r1
 8013126:	f7fd ffab 	bl	8011080 <rcutils_allocator_is_valid>
 801312a:	b128      	cbz	r0, 8013138 <rcl_clock_init+0x1c>
 801312c:	2d03      	cmp	r5, #3
 801312e:	d803      	bhi.n	8013138 <rcl_clock_init+0x1c>
 8013130:	e8df f005 	tbb	[pc, r5]
 8013134:	0659301f 	.word	0x0659301f
 8013138:	f04f 0c0b 	mov.w	ip, #11
 801313c:	4660      	mov	r0, ip
 801313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013140:	2c00      	cmp	r4, #0
 8013142:	d0f9      	beq.n	8013138 <rcl_clock_init+0x1c>
 8013144:	fab6 f386 	clz	r3, r6
 8013148:	095b      	lsrs	r3, r3, #5
 801314a:	2e00      	cmp	r6, #0
 801314c:	d0f4      	beq.n	8013138 <rcl_clock_init+0x1c>
 801314e:	6133      	str	r3, [r6, #16]
 8013150:	469c      	mov	ip, r3
 8013152:	f106 0514 	add.w	r5, r6, #20
 8013156:	4f32      	ldr	r7, [pc, #200]	@ (8013220 <rcl_clock_init+0x104>)
 8013158:	f04f 0e03 	mov.w	lr, #3
 801315c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013164:	6823      	ldr	r3, [r4, #0]
 8013166:	4660      	mov	r0, ip
 8013168:	602b      	str	r3, [r5, #0]
 801316a:	60f7      	str	r7, [r6, #12]
 801316c:	f886 e000 	strb.w	lr, [r6]
 8013170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013172:	2e00      	cmp	r6, #0
 8013174:	d0e0      	beq.n	8013138 <rcl_clock_init+0x1c>
 8013176:	2300      	movs	r3, #0
 8013178:	f106 0514 	add.w	r5, r6, #20
 801317c:	7033      	strb	r3, [r6, #0]
 801317e:	469c      	mov	ip, r3
 8013180:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013184:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801318a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801318c:	6823      	ldr	r3, [r4, #0]
 801318e:	4660      	mov	r0, ip
 8013190:	602b      	str	r3, [r5, #0]
 8013192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013194:	2c00      	cmp	r4, #0
 8013196:	d0cf      	beq.n	8013138 <rcl_clock_init+0x1c>
 8013198:	fab6 f586 	clz	r5, r6
 801319c:	096d      	lsrs	r5, r5, #5
 801319e:	2e00      	cmp	r6, #0
 80131a0:	d0ca      	beq.n	8013138 <rcl_clock_init+0x1c>
 80131a2:	46a6      	mov	lr, r4
 80131a4:	7035      	strb	r5, [r6, #0]
 80131a6:	f106 0c14 	add.w	ip, r6, #20
 80131aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80131ae:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80131b2:	e9c6 5503 	strd	r5, r5, [r6, #12]
 80131b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131ba:	f8de 3000 	ldr.w	r3, [lr]
 80131be:	2010      	movs	r0, #16
 80131c0:	f8cc 3000 	str.w	r3, [ip]
 80131c4:	6823      	ldr	r3, [r4, #0]
 80131c6:	6921      	ldr	r1, [r4, #16]
 80131c8:	4798      	blx	r3
 80131ca:	6130      	str	r0, [r6, #16]
 80131cc:	b320      	cbz	r0, 8013218 <rcl_clock_init+0xfc>
 80131ce:	2200      	movs	r2, #0
 80131d0:	2300      	movs	r3, #0
 80131d2:	46ac      	mov	ip, r5
 80131d4:	7205      	strb	r5, [r0, #8]
 80131d6:	e9c0 2300 	strd	r2, r3, [r0]
 80131da:	4a12      	ldr	r2, [pc, #72]	@ (8013224 <rcl_clock_init+0x108>)
 80131dc:	2301      	movs	r3, #1
 80131de:	4660      	mov	r0, ip
 80131e0:	60f2      	str	r2, [r6, #12]
 80131e2:	7033      	strb	r3, [r6, #0]
 80131e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131e6:	2c00      	cmp	r4, #0
 80131e8:	d0a6      	beq.n	8013138 <rcl_clock_init+0x1c>
 80131ea:	fab6 f386 	clz	r3, r6
 80131ee:	095b      	lsrs	r3, r3, #5
 80131f0:	2e00      	cmp	r6, #0
 80131f2:	d0a1      	beq.n	8013138 <rcl_clock_init+0x1c>
 80131f4:	6133      	str	r3, [r6, #16]
 80131f6:	469c      	mov	ip, r3
 80131f8:	f106 0514 	add.w	r5, r6, #20
 80131fc:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8013228 <rcl_clock_init+0x10c>
 8013200:	2702      	movs	r7, #2
 8013202:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801320a:	6823      	ldr	r3, [r4, #0]
 801320c:	4660      	mov	r0, ip
 801320e:	602b      	str	r3, [r5, #0]
 8013210:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013214:	7037      	strb	r7, [r6, #0]
 8013216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013218:	f04f 0c0a 	mov.w	ip, #10
 801321c:	e78e      	b.n	801313c <rcl_clock_init+0x20>
 801321e:	bf00      	nop
 8013220:	080130f1 	.word	0x080130f1
 8013224:	080130f9 	.word	0x080130f9
 8013228:	080130e9 	.word	0x080130e9

0801322c <rcl_clock_get_now>:
 801322c:	b140      	cbz	r0, 8013240 <rcl_clock_get_now+0x14>
 801322e:	b139      	cbz	r1, 8013240 <rcl_clock_get_now+0x14>
 8013230:	7803      	ldrb	r3, [r0, #0]
 8013232:	b11b      	cbz	r3, 801323c <rcl_clock_get_now+0x10>
 8013234:	68c3      	ldr	r3, [r0, #12]
 8013236:	b10b      	cbz	r3, 801323c <rcl_clock_get_now+0x10>
 8013238:	6900      	ldr	r0, [r0, #16]
 801323a:	4718      	bx	r3
 801323c:	2001      	movs	r0, #1
 801323e:	4770      	bx	lr
 8013240:	200b      	movs	r0, #11
 8013242:	4770      	bx	lr

08013244 <rcl_timer_call>:
 8013244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013248:	b087      	sub	sp, #28
 801324a:	2800      	cmp	r0, #0
 801324c:	d06c      	beq.n	8013328 <rcl_timer_call+0xe4>
 801324e:	6803      	ldr	r3, [r0, #0]
 8013250:	4604      	mov	r4, r0
 8013252:	2b00      	cmp	r3, #0
 8013254:	d062      	beq.n	801331c <rcl_timer_call+0xd8>
 8013256:	f3bf 8f5b 	dmb	ish
 801325a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801325e:	f3bf 8f5b 	dmb	ish
 8013262:	2b00      	cmp	r3, #0
 8013264:	d14f      	bne.n	8013306 <rcl_timer_call+0xc2>
 8013266:	6803      	ldr	r3, [r0, #0]
 8013268:	a904      	add	r1, sp, #16
 801326a:	6818      	ldr	r0, [r3, #0]
 801326c:	f7ff ffde 	bl	801322c <rcl_clock_get_now>
 8013270:	4605      	mov	r5, r0
 8013272:	2800      	cmp	r0, #0
 8013274:	d149      	bne.n	801330a <rcl_timer_call+0xc6>
 8013276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801327a:	2b00      	cmp	r3, #0
 801327c:	db49      	blt.n	8013312 <rcl_timer_call+0xce>
 801327e:	2605      	movs	r6, #5
 8013280:	6820      	ldr	r0, [r4, #0]
 8013282:	9600      	str	r6, [sp, #0]
 8013284:	3020      	adds	r0, #32
 8013286:	f001 fd23 	bl	8014cd0 <__atomic_exchange_8>
 801328a:	6823      	ldr	r3, [r4, #0]
 801328c:	4680      	mov	r8, r0
 801328e:	f3bf 8f5b 	dmb	ish
 8013292:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8013296:	f3bf 8f5b 	dmb	ish
 801329a:	6820      	ldr	r0, [r4, #0]
 801329c:	4689      	mov	r9, r1
 801329e:	4631      	mov	r1, r6
 80132a0:	3028      	adds	r0, #40	@ 0x28
 80132a2:	f001 fca9 	bl	8014bf8 <__atomic_load_8>
 80132a6:	460f      	mov	r7, r1
 80132a8:	4631      	mov	r1, r6
 80132aa:	4606      	mov	r6, r0
 80132ac:	6820      	ldr	r0, [r4, #0]
 80132ae:	3018      	adds	r0, #24
 80132b0:	f001 fca2 	bl	8014bf8 <__atomic_load_8>
 80132b4:	4602      	mov	r2, r0
 80132b6:	9804      	ldr	r0, [sp, #16]
 80132b8:	460b      	mov	r3, r1
 80132ba:	18b6      	adds	r6, r6, r2
 80132bc:	f8dd c014 	ldr.w	ip, [sp, #20]
 80132c0:	4692      	mov	sl, r2
 80132c2:	eb47 0701 	adc.w	r7, r7, r1
 80132c6:	4286      	cmp	r6, r0
 80132c8:	eb77 010c 	sbcs.w	r1, r7, ip
 80132cc:	da04      	bge.n	80132d8 <rcl_timer_call+0x94>
 80132ce:	ea53 0102 	orrs.w	r1, r3, r2
 80132d2:	d12e      	bne.n	8013332 <rcl_timer_call+0xee>
 80132d4:	4606      	mov	r6, r0
 80132d6:	4667      	mov	r7, ip
 80132d8:	6820      	ldr	r0, [r4, #0]
 80132da:	2105      	movs	r1, #5
 80132dc:	4632      	mov	r2, r6
 80132de:	463b      	mov	r3, r7
 80132e0:	3028      	adds	r0, #40	@ 0x28
 80132e2:	9100      	str	r1, [sp, #0]
 80132e4:	f001 fcbe 	bl	8014c64 <__atomic_store_8>
 80132e8:	f1bb 0f00 	cmp.w	fp, #0
 80132ec:	d00d      	beq.n	801330a <rcl_timer_call+0xc6>
 80132ee:	9a04      	ldr	r2, [sp, #16]
 80132f0:	4620      	mov	r0, r4
 80132f2:	9b05      	ldr	r3, [sp, #20]
 80132f4:	ebb2 0208 	subs.w	r2, r2, r8
 80132f8:	eb63 0309 	sbc.w	r3, r3, r9
 80132fc:	47d8      	blx	fp
 80132fe:	4628      	mov	r0, r5
 8013300:	b007      	add	sp, #28
 8013302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013306:	f240 3521 	movw	r5, #801	@ 0x321
 801330a:	4628      	mov	r0, r5
 801330c:	b007      	add	sp, #28
 801330e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013312:	2501      	movs	r5, #1
 8013314:	4628      	mov	r0, r5
 8013316:	b007      	add	sp, #28
 8013318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801331c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013320:	4628      	mov	r0, r5
 8013322:	b007      	add	sp, #28
 8013324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013328:	250b      	movs	r5, #11
 801332a:	4628      	mov	r0, r5
 801332c:	b007      	add	sp, #28
 801332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013332:	1b80      	subs	r0, r0, r6
 8013334:	eb6c 0107 	sbc.w	r1, ip, r7
 8013338:	3801      	subs	r0, #1
 801333a:	f161 0100 	sbc.w	r1, r1, #0
 801333e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013342:	f7ed f835 	bl	80003b0 <__aeabi_ldivmod>
 8013346:	9b02      	ldr	r3, [sp, #8]
 8013348:	3001      	adds	r0, #1
 801334a:	f141 0100 	adc.w	r1, r1, #0
 801334e:	fb00 f303 	mul.w	r3, r0, r3
 8013352:	fb01 330a 	mla	r3, r1, sl, r3
 8013356:	fba0 0a0a 	umull	r0, sl, r0, sl
 801335a:	1986      	adds	r6, r0, r6
 801335c:	4453      	add	r3, sl
 801335e:	eb43 0707 	adc.w	r7, r3, r7
 8013362:	e7b9      	b.n	80132d8 <rcl_timer_call+0x94>

08013364 <rcl_timer_is_ready>:
 8013364:	b570      	push	{r4, r5, r6, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	b380      	cbz	r0, 80133cc <rcl_timer_is_ready+0x68>
 801336a:	6803      	ldr	r3, [r0, #0]
 801336c:	4604      	mov	r4, r0
 801336e:	b38b      	cbz	r3, 80133d4 <rcl_timer_is_ready+0x70>
 8013370:	460d      	mov	r5, r1
 8013372:	b359      	cbz	r1, 80133cc <rcl_timer_is_ready+0x68>
 8013374:	f3bf 8f5b 	dmb	ish
 8013378:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801337c:	f3bf 8f5b 	dmb	ish
 8013380:	b953      	cbnz	r3, 8013398 <rcl_timer_is_ready+0x34>
 8013382:	6803      	ldr	r3, [r0, #0]
 8013384:	4669      	mov	r1, sp
 8013386:	6818      	ldr	r0, [r3, #0]
 8013388:	f7ff ff50 	bl	801322c <rcl_clock_get_now>
 801338c:	4606      	mov	r6, r0
 801338e:	b148      	cbz	r0, 80133a4 <rcl_timer_is_ready+0x40>
 8013390:	f240 3321 	movw	r3, #801	@ 0x321
 8013394:	4298      	cmp	r0, r3
 8013396:	d102      	bne.n	801339e <rcl_timer_is_ready+0x3a>
 8013398:	2300      	movs	r3, #0
 801339a:	461e      	mov	r6, r3
 801339c:	702b      	strb	r3, [r5, #0]
 801339e:	4630      	mov	r0, r6
 80133a0:	b002      	add	sp, #8
 80133a2:	bd70      	pop	{r4, r5, r6, pc}
 80133a4:	6820      	ldr	r0, [r4, #0]
 80133a6:	2105      	movs	r1, #5
 80133a8:	3028      	adds	r0, #40	@ 0x28
 80133aa:	f001 fc25 	bl	8014bf8 <__atomic_load_8>
 80133ae:	9b00      	ldr	r3, [sp, #0]
 80133b0:	1ac0      	subs	r0, r0, r3
 80133b2:	9b01      	ldr	r3, [sp, #4]
 80133b4:	eb61 0103 	sbc.w	r1, r1, r3
 80133b8:	2801      	cmp	r0, #1
 80133ba:	4630      	mov	r0, r6
 80133bc:	f171 0300 	sbcs.w	r3, r1, #0
 80133c0:	bfb4      	ite	lt
 80133c2:	2301      	movlt	r3, #1
 80133c4:	2300      	movge	r3, #0
 80133c6:	702b      	strb	r3, [r5, #0]
 80133c8:	b002      	add	sp, #8
 80133ca:	bd70      	pop	{r4, r5, r6, pc}
 80133cc:	260b      	movs	r6, #11
 80133ce:	4630      	mov	r0, r6
 80133d0:	b002      	add	sp, #8
 80133d2:	bd70      	pop	{r4, r5, r6, pc}
 80133d4:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80133d8:	e7e1      	b.n	801339e <rcl_timer_is_ready+0x3a>
 80133da:	bf00      	nop

080133dc <rcl_timer_get_time_until_next_call>:
 80133dc:	b570      	push	{r4, r5, r6, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	b330      	cbz	r0, 8013430 <rcl_timer_get_time_until_next_call+0x54>
 80133e2:	6803      	ldr	r3, [r0, #0]
 80133e4:	4604      	mov	r4, r0
 80133e6:	b33b      	cbz	r3, 8013438 <rcl_timer_get_time_until_next_call+0x5c>
 80133e8:	460d      	mov	r5, r1
 80133ea:	b309      	cbz	r1, 8013430 <rcl_timer_get_time_until_next_call+0x54>
 80133ec:	f3bf 8f5b 	dmb	ish
 80133f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80133f4:	f3bf 8f5b 	dmb	ish
 80133f8:	b9ab      	cbnz	r3, 8013426 <rcl_timer_get_time_until_next_call+0x4a>
 80133fa:	6803      	ldr	r3, [r0, #0]
 80133fc:	4669      	mov	r1, sp
 80133fe:	6818      	ldr	r0, [r3, #0]
 8013400:	f7ff ff14 	bl	801322c <rcl_clock_get_now>
 8013404:	4606      	mov	r6, r0
 8013406:	b958      	cbnz	r0, 8013420 <rcl_timer_get_time_until_next_call+0x44>
 8013408:	6820      	ldr	r0, [r4, #0]
 801340a:	2105      	movs	r1, #5
 801340c:	3028      	adds	r0, #40	@ 0x28
 801340e:	f001 fbf3 	bl	8014bf8 <__atomic_load_8>
 8013412:	9b00      	ldr	r3, [sp, #0]
 8013414:	1ac0      	subs	r0, r0, r3
 8013416:	9b01      	ldr	r3, [sp, #4]
 8013418:	eb61 0103 	sbc.w	r1, r1, r3
 801341c:	6028      	str	r0, [r5, #0]
 801341e:	6069      	str	r1, [r5, #4]
 8013420:	4630      	mov	r0, r6
 8013422:	b002      	add	sp, #8
 8013424:	bd70      	pop	{r4, r5, r6, pc}
 8013426:	f240 3621 	movw	r6, #801	@ 0x321
 801342a:	4630      	mov	r0, r6
 801342c:	b002      	add	sp, #8
 801342e:	bd70      	pop	{r4, r5, r6, pc}
 8013430:	260b      	movs	r6, #11
 8013432:	4630      	mov	r0, r6
 8013434:	b002      	add	sp, #8
 8013436:	bd70      	pop	{r4, r5, r6, pc}
 8013438:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801343c:	e7f0      	b.n	8013420 <rcl_timer_get_time_until_next_call+0x44>
 801343e:	bf00      	nop

08013440 <rcl_timer_get_guard_condition>:
 8013440:	b130      	cbz	r0, 8013450 <rcl_timer_get_guard_condition+0x10>
 8013442:	6800      	ldr	r0, [r0, #0]
 8013444:	b120      	cbz	r0, 8013450 <rcl_timer_get_guard_condition+0x10>
 8013446:	68c3      	ldr	r3, [r0, #12]
 8013448:	b10b      	cbz	r3, 801344e <rcl_timer_get_guard_condition+0xe>
 801344a:	3008      	adds	r0, #8
 801344c:	4770      	bx	lr
 801344e:	4618      	mov	r0, r3
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop

08013454 <rcl_validate_enclave_name_with_size>:
 8013454:	2800      	cmp	r0, #0
 8013456:	d049      	beq.n	80134ec <rcl_validate_enclave_name_with_size+0x98>
 8013458:	b570      	push	{r4, r5, r6, lr}
 801345a:	4615      	mov	r5, r2
 801345c:	b0c2      	sub	sp, #264	@ 0x108
 801345e:	b19a      	cbz	r2, 8013488 <rcl_validate_enclave_name_with_size+0x34>
 8013460:	461e      	mov	r6, r3
 8013462:	466a      	mov	r2, sp
 8013464:	ab01      	add	r3, sp, #4
 8013466:	460c      	mov	r4, r1
 8013468:	f002 f80a 	bl	8015480 <rmw_validate_namespace_with_size>
 801346c:	4684      	mov	ip, r0
 801346e:	b9b8      	cbnz	r0, 80134a0 <rcl_validate_enclave_name_with_size+0x4c>
 8013470:	9900      	ldr	r1, [sp, #0]
 8013472:	b171      	cbz	r1, 8013492 <rcl_validate_enclave_name_with_size+0x3e>
 8013474:	2907      	cmp	r1, #7
 8013476:	d019      	beq.n	80134ac <rcl_validate_enclave_name_with_size+0x58>
 8013478:	1e4b      	subs	r3, r1, #1
 801347a:	2b05      	cmp	r3, #5
 801347c:	d83a      	bhi.n	80134f4 <rcl_validate_enclave_name_with_size+0xa0>
 801347e:	e8df f003 	tbb	[pc, r3]
 8013482:	2926      	.short	0x2926
 8013484:	1d322f2c 	.word	0x1d322f2c
 8013488:	f04f 0c0b 	mov.w	ip, #11
 801348c:	4660      	mov	r0, ip
 801348e:	b042      	add	sp, #264	@ 0x108
 8013490:	bd70      	pop	{r4, r5, r6, pc}
 8013492:	2907      	cmp	r1, #7
 8013494:	d00a      	beq.n	80134ac <rcl_validate_enclave_name_with_size+0x58>
 8013496:	2300      	movs	r3, #0
 8013498:	4660      	mov	r0, ip
 801349a:	602b      	str	r3, [r5, #0]
 801349c:	b042      	add	sp, #264	@ 0x108
 801349e:	bd70      	pop	{r4, r5, r6, pc}
 80134a0:	f007 ff04 	bl	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>
 80134a4:	4684      	mov	ip, r0
 80134a6:	4660      	mov	r0, ip
 80134a8:	b042      	add	sp, #264	@ 0x108
 80134aa:	bd70      	pop	{r4, r5, r6, pc}
 80134ac:	2cff      	cmp	r4, #255	@ 0xff
 80134ae:	d9f2      	bls.n	8013496 <rcl_validate_enclave_name_with_size+0x42>
 80134b0:	6029      	str	r1, [r5, #0]
 80134b2:	2e00      	cmp	r6, #0
 80134b4:	d0ea      	beq.n	801348c <rcl_validate_enclave_name_with_size+0x38>
 80134b6:	23fe      	movs	r3, #254	@ 0xfe
 80134b8:	6033      	str	r3, [r6, #0]
 80134ba:	e7e7      	b.n	801348c <rcl_validate_enclave_name_with_size+0x38>
 80134bc:	2306      	movs	r3, #6
 80134be:	602b      	str	r3, [r5, #0]
 80134c0:	2e00      	cmp	r6, #0
 80134c2:	d0e3      	beq.n	801348c <rcl_validate_enclave_name_with_size+0x38>
 80134c4:	9b01      	ldr	r3, [sp, #4]
 80134c6:	4660      	mov	r0, ip
 80134c8:	6033      	str	r3, [r6, #0]
 80134ca:	b042      	add	sp, #264	@ 0x108
 80134cc:	bd70      	pop	{r4, r5, r6, pc}
 80134ce:	2301      	movs	r3, #1
 80134d0:	602b      	str	r3, [r5, #0]
 80134d2:	e7f5      	b.n	80134c0 <rcl_validate_enclave_name_with_size+0x6c>
 80134d4:	2302      	movs	r3, #2
 80134d6:	602b      	str	r3, [r5, #0]
 80134d8:	e7f2      	b.n	80134c0 <rcl_validate_enclave_name_with_size+0x6c>
 80134da:	2303      	movs	r3, #3
 80134dc:	602b      	str	r3, [r5, #0]
 80134de:	e7ef      	b.n	80134c0 <rcl_validate_enclave_name_with_size+0x6c>
 80134e0:	2304      	movs	r3, #4
 80134e2:	602b      	str	r3, [r5, #0]
 80134e4:	e7ec      	b.n	80134c0 <rcl_validate_enclave_name_with_size+0x6c>
 80134e6:	2305      	movs	r3, #5
 80134e8:	602b      	str	r3, [r5, #0]
 80134ea:	e7e9      	b.n	80134c0 <rcl_validate_enclave_name_with_size+0x6c>
 80134ec:	f04f 0c0b 	mov.w	ip, #11
 80134f0:	4660      	mov	r0, ip
 80134f2:	4770      	bx	lr
 80134f4:	460b      	mov	r3, r1
 80134f6:	4a04      	ldr	r2, [pc, #16]	@ (8013508 <rcl_validate_enclave_name_with_size+0xb4>)
 80134f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80134fc:	a802      	add	r0, sp, #8
 80134fe:	f001 fd33 	bl	8014f68 <rcutils_snprintf>
 8013502:	f04f 0c01 	mov.w	ip, #1
 8013506:	e7c1      	b.n	801348c <rcl_validate_enclave_name_with_size+0x38>
 8013508:	08020040 	.word	0x08020040

0801350c <rcl_validate_enclave_name>:
 801350c:	b168      	cbz	r0, 801352a <rcl_validate_enclave_name+0x1e>
 801350e:	b570      	push	{r4, r5, r6, lr}
 8013510:	460d      	mov	r5, r1
 8013512:	4616      	mov	r6, r2
 8013514:	4604      	mov	r4, r0
 8013516:	f7ec feed 	bl	80002f4 <strlen>
 801351a:	4633      	mov	r3, r6
 801351c:	4601      	mov	r1, r0
 801351e:	462a      	mov	r2, r5
 8013520:	4620      	mov	r0, r4
 8013522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013526:	f7ff bf95 	b.w	8013454 <rcl_validate_enclave_name_with_size>
 801352a:	200b      	movs	r0, #11
 801352c:	4770      	bx	lr
 801352e:	bf00      	nop

08013530 <rcl_get_zero_initialized_wait_set>:
 8013530:	b510      	push	{r4, lr}
 8013532:	4c08      	ldr	r4, [pc, #32]	@ (8013554 <rcl_get_zero_initialized_wait_set+0x24>)
 8013534:	4686      	mov	lr, r0
 8013536:	4684      	mov	ip, r0
 8013538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801353a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801353e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013540:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013546:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801354a:	6823      	ldr	r3, [r4, #0]
 801354c:	4670      	mov	r0, lr
 801354e:	f8cc 3000 	str.w	r3, [ip]
 8013552:	bd10      	pop	{r4, pc}
 8013554:	080200a0 	.word	0x080200a0

08013558 <rcl_wait_set_is_valid>:
 8013558:	b118      	cbz	r0, 8013562 <rcl_wait_set_is_valid+0xa>
 801355a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801355c:	3800      	subs	r0, #0
 801355e:	bf18      	it	ne
 8013560:	2001      	movne	r0, #1
 8013562:	4770      	bx	lr

08013564 <rcl_wait_set_fini>:
 8013564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013568:	b082      	sub	sp, #8
 801356a:	2800      	cmp	r0, #0
 801356c:	f000 8095 	beq.w	801369a <rcl_wait_set_fini+0x136>
 8013570:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013572:	4604      	mov	r4, r0
 8013574:	2e00      	cmp	r6, #0
 8013576:	f000 808c 	beq.w	8013692 <rcl_wait_set_fini+0x12e>
 801357a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801357c:	f003 fb40 	bl	8016c00 <rmw_destroy_wait_set>
 8013580:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013582:	1e06      	subs	r6, r0, #0
 8013584:	bf18      	it	ne
 8013586:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801358a:	2d00      	cmp	r5, #0
 801358c:	f000 8081 	beq.w	8013692 <rcl_wait_set_fini+0x12e>
 8013590:	2700      	movs	r7, #0
 8013592:	6820      	ldr	r0, [r4, #0]
 8013594:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013598:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801359a:	6067      	str	r7, [r4, #4]
 801359c:	602f      	str	r7, [r5, #0]
 801359e:	b120      	cbz	r0, 80135aa <rcl_wait_set_fini+0x46>
 80135a0:	9101      	str	r1, [sp, #4]
 80135a2:	47c0      	blx	r8
 80135a4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135a6:	9901      	ldr	r1, [sp, #4]
 80135a8:	6027      	str	r7, [r4, #0]
 80135aa:	68a8      	ldr	r0, [r5, #8]
 80135ac:	b120      	cbz	r0, 80135b8 <rcl_wait_set_fini+0x54>
 80135ae:	47c0      	blx	r8
 80135b0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135b2:	2300      	movs	r3, #0
 80135b4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80135b8:	f04f 0800 	mov.w	r8, #0
 80135bc:	68a0      	ldr	r0, [r4, #8]
 80135be:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135c2:	f8c4 800c 	str.w	r8, [r4, #12]
 80135c6:	f8c5 800c 	str.w	r8, [r5, #12]
 80135ca:	b128      	cbz	r0, 80135d8 <rcl_wait_set_fini+0x74>
 80135cc:	47b8      	blx	r7
 80135ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135d0:	f8c4 8008 	str.w	r8, [r4, #8]
 80135d4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135d8:	f04f 0800 	mov.w	r8, #0
 80135dc:	6968      	ldr	r0, [r5, #20]
 80135de:	f8c5 8010 	str.w	r8, [r5, #16]
 80135e2:	b128      	cbz	r0, 80135f0 <rcl_wait_set_fini+0x8c>
 80135e4:	47b8      	blx	r7
 80135e6:	f8c5 8014 	str.w	r8, [r5, #20]
 80135ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135ec:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80135ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80135f0:	f04f 0800 	mov.w	r8, #0
 80135f4:	6920      	ldr	r0, [r4, #16]
 80135f6:	f8c4 8014 	str.w	r8, [r4, #20]
 80135fa:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80135fe:	b128      	cbz	r0, 801360c <rcl_wait_set_fini+0xa8>
 8013600:	47b8      	blx	r7
 8013602:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013604:	f8c4 8010 	str.w	r8, [r4, #16]
 8013608:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801360a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801360c:	f04f 0800 	mov.w	r8, #0
 8013610:	69a0      	ldr	r0, [r4, #24]
 8013612:	f8c4 801c 	str.w	r8, [r4, #28]
 8013616:	f8c5 8018 	str.w	r8, [r5, #24]
 801361a:	b128      	cbz	r0, 8013628 <rcl_wait_set_fini+0xc4>
 801361c:	9101      	str	r1, [sp, #4]
 801361e:	47b8      	blx	r7
 8013620:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013622:	9901      	ldr	r1, [sp, #4]
 8013624:	f8c4 8018 	str.w	r8, [r4, #24]
 8013628:	6a28      	ldr	r0, [r5, #32]
 801362a:	b120      	cbz	r0, 8013636 <rcl_wait_set_fini+0xd2>
 801362c:	47b8      	blx	r7
 801362e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013630:	2300      	movs	r3, #0
 8013632:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8013636:	2700      	movs	r7, #0
 8013638:	6a20      	ldr	r0, [r4, #32]
 801363a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801363e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013640:	6267      	str	r7, [r4, #36]	@ 0x24
 8013642:	626f      	str	r7, [r5, #36]	@ 0x24
 8013644:	b120      	cbz	r0, 8013650 <rcl_wait_set_fini+0xec>
 8013646:	9101      	str	r1, [sp, #4]
 8013648:	47c0      	blx	r8
 801364a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801364c:	9901      	ldr	r1, [sp, #4]
 801364e:	6227      	str	r7, [r4, #32]
 8013650:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8013652:	b120      	cbz	r0, 801365e <rcl_wait_set_fini+0xfa>
 8013654:	47c0      	blx	r8
 8013656:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013658:	2300      	movs	r3, #0
 801365a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801365e:	2700      	movs	r7, #0
 8013660:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013662:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013666:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013668:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801366a:	632f      	str	r7, [r5, #48]	@ 0x30
 801366c:	b120      	cbz	r0, 8013678 <rcl_wait_set_fini+0x114>
 801366e:	9101      	str	r1, [sp, #4]
 8013670:	47c0      	blx	r8
 8013672:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013674:	9901      	ldr	r1, [sp, #4]
 8013676:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013678:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801367a:	b120      	cbz	r0, 8013686 <rcl_wait_set_fini+0x122>
 801367c:	47c0      	blx	r8
 801367e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013680:	2300      	movs	r3, #0
 8013682:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8013686:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013688:	4628      	mov	r0, r5
 801368a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801368c:	4798      	blx	r3
 801368e:	2300      	movs	r3, #0
 8013690:	6323      	str	r3, [r4, #48]	@ 0x30
 8013692:	4630      	mov	r0, r6
 8013694:	b002      	add	sp, #8
 8013696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801369a:	260b      	movs	r6, #11
 801369c:	4630      	mov	r0, r6
 801369e:	b002      	add	sp, #8
 80136a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080136a4 <rcl_wait_set_add_subscription>:
 80136a4:	b318      	cbz	r0, 80136ee <rcl_wait_set_add_subscription+0x4a>
 80136a6:	b538      	push	{r3, r4, r5, lr}
 80136a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80136aa:	4604      	mov	r4, r0
 80136ac:	b30b      	cbz	r3, 80136f2 <rcl_wait_set_add_subscription+0x4e>
 80136ae:	b319      	cbz	r1, 80136f8 <rcl_wait_set_add_subscription+0x54>
 80136b0:	681d      	ldr	r5, [r3, #0]
 80136b2:	6840      	ldr	r0, [r0, #4]
 80136b4:	4285      	cmp	r5, r0
 80136b6:	d217      	bcs.n	80136e8 <rcl_wait_set_add_subscription+0x44>
 80136b8:	1c68      	adds	r0, r5, #1
 80136ba:	6018      	str	r0, [r3, #0]
 80136bc:	6823      	ldr	r3, [r4, #0]
 80136be:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80136c2:	b102      	cbz	r2, 80136c6 <rcl_wait_set_add_subscription+0x22>
 80136c4:	6015      	str	r5, [r2, #0]
 80136c6:	4608      	mov	r0, r1
 80136c8:	f7ff fcfe 	bl	80130c8 <rcl_subscription_get_rmw_handle>
 80136cc:	b150      	cbz	r0, 80136e4 <rcl_wait_set_add_subscription+0x40>
 80136ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80136d0:	6842      	ldr	r2, [r0, #4]
 80136d2:	2000      	movs	r0, #0
 80136d4:	689b      	ldr	r3, [r3, #8]
 80136d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80136dc:	6853      	ldr	r3, [r2, #4]
 80136de:	3301      	adds	r3, #1
 80136e0:	6053      	str	r3, [r2, #4]
 80136e2:	bd38      	pop	{r3, r4, r5, pc}
 80136e4:	2001      	movs	r0, #1
 80136e6:	bd38      	pop	{r3, r4, r5, pc}
 80136e8:	f240 3086 	movw	r0, #902	@ 0x386
 80136ec:	bd38      	pop	{r3, r4, r5, pc}
 80136ee:	200b      	movs	r0, #11
 80136f0:	4770      	bx	lr
 80136f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80136f6:	bd38      	pop	{r3, r4, r5, pc}
 80136f8:	200b      	movs	r0, #11
 80136fa:	bd38      	pop	{r3, r4, r5, pc}

080136fc <rcl_wait_set_clear>:
 80136fc:	2800      	cmp	r0, #0
 80136fe:	d074      	beq.n	80137ea <rcl_wait_set_clear+0xee>
 8013700:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013702:	b510      	push	{r4, lr}
 8013704:	4604      	mov	r4, r0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d071      	beq.n	80137ee <rcl_wait_set_clear+0xf2>
 801370a:	6800      	ldr	r0, [r0, #0]
 801370c:	b138      	cbz	r0, 801371e <rcl_wait_set_clear+0x22>
 801370e:	6862      	ldr	r2, [r4, #4]
 8013710:	2100      	movs	r1, #0
 8013712:	0092      	lsls	r2, r2, #2
 8013714:	f009 fdf6 	bl	801d304 <memset>
 8013718:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801371a:	2200      	movs	r2, #0
 801371c:	601a      	str	r2, [r3, #0]
 801371e:	68a0      	ldr	r0, [r4, #8]
 8013720:	b138      	cbz	r0, 8013732 <rcl_wait_set_clear+0x36>
 8013722:	68e2      	ldr	r2, [r4, #12]
 8013724:	2100      	movs	r1, #0
 8013726:	0092      	lsls	r2, r2, #2
 8013728:	f009 fdec 	bl	801d304 <memset>
 801372c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801372e:	2200      	movs	r2, #0
 8013730:	60da      	str	r2, [r3, #12]
 8013732:	69a0      	ldr	r0, [r4, #24]
 8013734:	b138      	cbz	r0, 8013746 <rcl_wait_set_clear+0x4a>
 8013736:	69e2      	ldr	r2, [r4, #28]
 8013738:	2100      	movs	r1, #0
 801373a:	0092      	lsls	r2, r2, #2
 801373c:	f009 fde2 	bl	801d304 <memset>
 8013740:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013742:	2200      	movs	r2, #0
 8013744:	619a      	str	r2, [r3, #24]
 8013746:	6a20      	ldr	r0, [r4, #32]
 8013748:	b138      	cbz	r0, 801375a <rcl_wait_set_clear+0x5e>
 801374a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801374c:	2100      	movs	r1, #0
 801374e:	0092      	lsls	r2, r2, #2
 8013750:	f009 fdd8 	bl	801d304 <memset>
 8013754:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013756:	2200      	movs	r2, #0
 8013758:	625a      	str	r2, [r3, #36]	@ 0x24
 801375a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801375c:	b138      	cbz	r0, 801376e <rcl_wait_set_clear+0x72>
 801375e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013760:	2100      	movs	r1, #0
 8013762:	0092      	lsls	r2, r2, #2
 8013764:	f009 fdce 	bl	801d304 <memset>
 8013768:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801376a:	2200      	movs	r2, #0
 801376c:	631a      	str	r2, [r3, #48]	@ 0x30
 801376e:	6920      	ldr	r0, [r4, #16]
 8013770:	b138      	cbz	r0, 8013782 <rcl_wait_set_clear+0x86>
 8013772:	6962      	ldr	r2, [r4, #20]
 8013774:	2100      	movs	r1, #0
 8013776:	0092      	lsls	r2, r2, #2
 8013778:	f009 fdc4 	bl	801d304 <memset>
 801377c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801377e:	2200      	movs	r2, #0
 8013780:	641a      	str	r2, [r3, #64]	@ 0x40
 8013782:	6898      	ldr	r0, [r3, #8]
 8013784:	b138      	cbz	r0, 8013796 <rcl_wait_set_clear+0x9a>
 8013786:	685a      	ldr	r2, [r3, #4]
 8013788:	2100      	movs	r1, #0
 801378a:	0092      	lsls	r2, r2, #2
 801378c:	f009 fdba 	bl	801d304 <memset>
 8013790:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013792:	2200      	movs	r2, #0
 8013794:	605a      	str	r2, [r3, #4]
 8013796:	6958      	ldr	r0, [r3, #20]
 8013798:	b138      	cbz	r0, 80137aa <rcl_wait_set_clear+0xae>
 801379a:	691a      	ldr	r2, [r3, #16]
 801379c:	2100      	movs	r1, #0
 801379e:	0092      	lsls	r2, r2, #2
 80137a0:	f009 fdb0 	bl	801d304 <memset>
 80137a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137a6:	2200      	movs	r2, #0
 80137a8:	611a      	str	r2, [r3, #16]
 80137aa:	6a18      	ldr	r0, [r3, #32]
 80137ac:	b138      	cbz	r0, 80137be <rcl_wait_set_clear+0xc2>
 80137ae:	69da      	ldr	r2, [r3, #28]
 80137b0:	2100      	movs	r1, #0
 80137b2:	0092      	lsls	r2, r2, #2
 80137b4:	f009 fda6 	bl	801d304 <memset>
 80137b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137ba:	2200      	movs	r2, #0
 80137bc:	61da      	str	r2, [r3, #28]
 80137be:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80137c0:	b138      	cbz	r0, 80137d2 <rcl_wait_set_clear+0xd6>
 80137c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80137c4:	2100      	movs	r1, #0
 80137c6:	0092      	lsls	r2, r2, #2
 80137c8:	f009 fd9c 	bl	801d304 <memset>
 80137cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137ce:	2200      	movs	r2, #0
 80137d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80137d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80137d4:	b140      	cbz	r0, 80137e8 <rcl_wait_set_clear+0xec>
 80137d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80137d8:	2100      	movs	r1, #0
 80137da:	0092      	lsls	r2, r2, #2
 80137dc:	f009 fd92 	bl	801d304 <memset>
 80137e0:	2300      	movs	r3, #0
 80137e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80137e4:	4618      	mov	r0, r3
 80137e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80137e8:	bd10      	pop	{r4, pc}
 80137ea:	200b      	movs	r0, #11
 80137ec:	4770      	bx	lr
 80137ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80137f2:	bd10      	pop	{r4, pc}

080137f4 <rcl_wait_set_resize>:
 80137f4:	2800      	cmp	r0, #0
 80137f6:	f000 8180 	beq.w	8013afa <rcl_wait_set_resize+0x306>
 80137fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fe:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013800:	b083      	sub	sp, #12
 8013802:	4605      	mov	r5, r0
 8013804:	2c00      	cmp	r4, #0
 8013806:	f000 817a 	beq.w	8013afe <rcl_wait_set_resize+0x30a>
 801380a:	f04f 0900 	mov.w	r9, #0
 801380e:	461f      	mov	r7, r3
 8013810:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8013814:	4688      	mov	r8, r1
 8013816:	4616      	mov	r6, r2
 8013818:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801381c:	f8c0 9004 	str.w	r9, [r0, #4]
 8013820:	f8c4 9000 	str.w	r9, [r4]
 8013824:	2900      	cmp	r1, #0
 8013826:	f000 80bf 	beq.w	80139a8 <rcl_wait_set_resize+0x1b4>
 801382a:	008c      	lsls	r4, r1, #2
 801382c:	4652      	mov	r2, sl
 801382e:	6800      	ldr	r0, [r0, #0]
 8013830:	4621      	mov	r1, r4
 8013832:	9301      	str	r3, [sp, #4]
 8013834:	4798      	blx	r3
 8013836:	9b01      	ldr	r3, [sp, #4]
 8013838:	6028      	str	r0, [r5, #0]
 801383a:	2800      	cmp	r0, #0
 801383c:	f000 80f6 	beq.w	8013a2c <rcl_wait_set_resize+0x238>
 8013840:	4622      	mov	r2, r4
 8013842:	4649      	mov	r1, r9
 8013844:	9301      	str	r3, [sp, #4]
 8013846:	f009 fd5d 	bl	801d304 <memset>
 801384a:	f8c5 8004 	str.w	r8, [r5, #4]
 801384e:	4652      	mov	r2, sl
 8013850:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8013854:	4621      	mov	r1, r4
 8013856:	9b01      	ldr	r3, [sp, #4]
 8013858:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801385c:	f8c8 9004 	str.w	r9, [r8, #4]
 8013860:	4798      	blx	r3
 8013862:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013864:	f8c8 0008 	str.w	r0, [r8, #8]
 8013868:	689b      	ldr	r3, [r3, #8]
 801386a:	2b00      	cmp	r3, #0
 801386c:	f000 814a 	beq.w	8013b04 <rcl_wait_set_resize+0x310>
 8013870:	4622      	mov	r2, r4
 8013872:	4649      	mov	r1, r9
 8013874:	4618      	mov	r0, r3
 8013876:	f009 fd45 	bl	801d304 <memset>
 801387a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801387c:	f04f 0800 	mov.w	r8, #0
 8013880:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013884:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013888:	f8c5 800c 	str.w	r8, [r5, #12]
 801388c:	f8c4 800c 	str.w	r8, [r4, #12]
 8013890:	2e00      	cmp	r6, #0
 8013892:	f040 809b 	bne.w	80139cc <rcl_wait_set_resize+0x1d8>
 8013896:	68a8      	ldr	r0, [r5, #8]
 8013898:	b128      	cbz	r0, 80138a6 <rcl_wait_set_resize+0xb2>
 801389a:	4649      	mov	r1, r9
 801389c:	4790      	blx	r2
 801389e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138a0:	60ae      	str	r6, [r5, #8]
 80138a2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138a6:	f04f 0800 	mov.w	r8, #0
 80138aa:	19f6      	adds	r6, r6, r7
 80138ac:	f8c4 8010 	str.w	r8, [r4, #16]
 80138b0:	f040 80a2 	bne.w	80139f8 <rcl_wait_set_resize+0x204>
 80138b4:	6960      	ldr	r0, [r4, #20]
 80138b6:	b130      	cbz	r0, 80138c6 <rcl_wait_set_resize+0xd2>
 80138b8:	4649      	mov	r1, r9
 80138ba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80138bc:	4798      	blx	r3
 80138be:	6166      	str	r6, [r4, #20]
 80138c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138c6:	2600      	movs	r6, #0
 80138c8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80138cc:	616e      	str	r6, [r5, #20]
 80138ce:	6426      	str	r6, [r4, #64]	@ 0x40
 80138d0:	2f00      	cmp	r7, #0
 80138d2:	f040 80af 	bne.w	8013a34 <rcl_wait_set_resize+0x240>
 80138d6:	6928      	ldr	r0, [r5, #16]
 80138d8:	b138      	cbz	r0, 80138ea <rcl_wait_set_resize+0xf6>
 80138da:	4649      	mov	r1, r9
 80138dc:	47d0      	blx	sl
 80138de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80138e0:	612f      	str	r7, [r5, #16]
 80138e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80138e6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80138ea:	2600      	movs	r6, #0
 80138ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138ee:	61ee      	str	r6, [r5, #28]
 80138f0:	61a6      	str	r6, [r4, #24]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f040 8093 	bne.w	8013a1e <rcl_wait_set_resize+0x22a>
 80138f8:	69a8      	ldr	r0, [r5, #24]
 80138fa:	b120      	cbz	r0, 8013906 <rcl_wait_set_resize+0x112>
 80138fc:	4649      	mov	r1, r9
 80138fe:	47d0      	blx	sl
 8013900:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013902:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013904:	61ab      	str	r3, [r5, #24]
 8013906:	6a20      	ldr	r0, [r4, #32]
 8013908:	b128      	cbz	r0, 8013916 <rcl_wait_set_resize+0x122>
 801390a:	4649      	mov	r1, r9
 801390c:	47d0      	blx	sl
 801390e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013910:	2300      	movs	r3, #0
 8013912:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013916:	2600      	movs	r6, #0
 8013918:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801391a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801391c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013920:	626e      	str	r6, [r5, #36]	@ 0x24
 8013922:	6266      	str	r6, [r4, #36]	@ 0x24
 8013924:	2b00      	cmp	r3, #0
 8013926:	f000 8098 	beq.w	8013a5a <rcl_wait_set_resize+0x266>
 801392a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801392e:	463a      	mov	r2, r7
 8013930:	6a28      	ldr	r0, [r5, #32]
 8013932:	4651      	mov	r1, sl
 8013934:	47c8      	blx	r9
 8013936:	6228      	str	r0, [r5, #32]
 8013938:	2800      	cmp	r0, #0
 801393a:	d077      	beq.n	8013a2c <rcl_wait_set_resize+0x238>
 801393c:	4652      	mov	r2, sl
 801393e:	4631      	mov	r1, r6
 8013940:	f009 fce0 	bl	801d304 <memset>
 8013944:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013948:	463a      	mov	r2, r7
 801394a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801394c:	4651      	mov	r1, sl
 801394e:	626b      	str	r3, [r5, #36]	@ 0x24
 8013950:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013952:	47c8      	blx	r9
 8013954:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013956:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013958:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801395a:	2c00      	cmp	r4, #0
 801395c:	f000 80f2 	beq.w	8013b44 <rcl_wait_set_resize+0x350>
 8013960:	4620      	mov	r0, r4
 8013962:	4652      	mov	r2, sl
 8013964:	4631      	mov	r1, r6
 8013966:	f009 fccd 	bl	801d304 <memset>
 801396a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801396c:	2600      	movs	r6, #0
 801396e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013970:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013972:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013976:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013978:	6326      	str	r6, [r4, #48]	@ 0x30
 801397a:	2b00      	cmp	r3, #0
 801397c:	f040 8097 	bne.w	8013aae <rcl_wait_set_resize+0x2ba>
 8013980:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013982:	b120      	cbz	r0, 801398e <rcl_wait_set_resize+0x19a>
 8013984:	4639      	mov	r1, r7
 8013986:	47c0      	blx	r8
 8013988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801398a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801398c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801398e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013990:	2800      	cmp	r0, #0
 8013992:	d04c      	beq.n	8013a2e <rcl_wait_set_resize+0x23a>
 8013994:	4639      	mov	r1, r7
 8013996:	47c0      	blx	r8
 8013998:	2300      	movs	r3, #0
 801399a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801399c:	4618      	mov	r0, r3
 801399e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 80139a2:	b003      	add	sp, #12
 80139a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139a8:	6800      	ldr	r0, [r0, #0]
 80139aa:	b120      	cbz	r0, 80139b6 <rcl_wait_set_resize+0x1c2>
 80139ac:	4651      	mov	r1, sl
 80139ae:	47d8      	blx	fp
 80139b0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139b2:	f8c5 8000 	str.w	r8, [r5]
 80139b6:	68a0      	ldr	r0, [r4, #8]
 80139b8:	2800      	cmp	r0, #0
 80139ba:	f43f af5f 	beq.w	801387c <rcl_wait_set_resize+0x88>
 80139be:	4651      	mov	r1, sl
 80139c0:	47d8      	blx	fp
 80139c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139c4:	2300      	movs	r3, #0
 80139c6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80139ca:	e757      	b.n	801387c <rcl_wait_set_resize+0x88>
 80139cc:	00b4      	lsls	r4, r6, #2
 80139ce:	464a      	mov	r2, r9
 80139d0:	68a8      	ldr	r0, [r5, #8]
 80139d2:	4621      	mov	r1, r4
 80139d4:	4798      	blx	r3
 80139d6:	60a8      	str	r0, [r5, #8]
 80139d8:	b340      	cbz	r0, 8013a2c <rcl_wait_set_resize+0x238>
 80139da:	4622      	mov	r2, r4
 80139dc:	4641      	mov	r1, r8
 80139de:	f009 fc91 	bl	801d304 <memset>
 80139e2:	f04f 0800 	mov.w	r8, #0
 80139e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139e8:	60ee      	str	r6, [r5, #12]
 80139ea:	19f6      	adds	r6, r6, r7
 80139ec:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80139f0:	f8c4 8010 	str.w	r8, [r4, #16]
 80139f4:	f43f af5e 	beq.w	80138b4 <rcl_wait_set_resize+0xc0>
 80139f8:	00b6      	lsls	r6, r6, #2
 80139fa:	464a      	mov	r2, r9
 80139fc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80139fe:	6960      	ldr	r0, [r4, #20]
 8013a00:	4631      	mov	r1, r6
 8013a02:	4798      	blx	r3
 8013a04:	4681      	mov	r9, r0
 8013a06:	6160      	str	r0, [r4, #20]
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	f000 8084 	beq.w	8013b16 <rcl_wait_set_resize+0x322>
 8013a0e:	4632      	mov	r2, r6
 8013a10:	4641      	mov	r1, r8
 8013a12:	f009 fc77 	bl	801d304 <memset>
 8013a16:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a18:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a1c:	e753      	b.n	80138c6 <rcl_wait_set_resize+0xd2>
 8013a1e:	009c      	lsls	r4, r3, #2
 8013a20:	464a      	mov	r2, r9
 8013a22:	69a8      	ldr	r0, [r5, #24]
 8013a24:	4621      	mov	r1, r4
 8013a26:	47c0      	blx	r8
 8013a28:	61a8      	str	r0, [r5, #24]
 8013a2a:	bb40      	cbnz	r0, 8013a7e <rcl_wait_set_resize+0x28a>
 8013a2c:	200a      	movs	r0, #10
 8013a2e:	b003      	add	sp, #12
 8013a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a34:	00bc      	lsls	r4, r7, #2
 8013a36:	464a      	mov	r2, r9
 8013a38:	6928      	ldr	r0, [r5, #16]
 8013a3a:	4621      	mov	r1, r4
 8013a3c:	47c0      	blx	r8
 8013a3e:	6128      	str	r0, [r5, #16]
 8013a40:	2800      	cmp	r0, #0
 8013a42:	d0f3      	beq.n	8013a2c <rcl_wait_set_resize+0x238>
 8013a44:	4622      	mov	r2, r4
 8013a46:	4631      	mov	r1, r6
 8013a48:	f009 fc5c 	bl	801d304 <memset>
 8013a4c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a4e:	616f      	str	r7, [r5, #20]
 8013a50:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013a54:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013a58:	e747      	b.n	80138ea <rcl_wait_set_resize+0xf6>
 8013a5a:	6a28      	ldr	r0, [r5, #32]
 8013a5c:	b120      	cbz	r0, 8013a68 <rcl_wait_set_resize+0x274>
 8013a5e:	4639      	mov	r1, r7
 8013a60:	47c0      	blx	r8
 8013a62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a64:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a66:	622b      	str	r3, [r5, #32]
 8013a68:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	f43f af7e 	beq.w	801396c <rcl_wait_set_resize+0x178>
 8013a70:	4639      	mov	r1, r7
 8013a72:	47c0      	blx	r8
 8013a74:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a76:	2300      	movs	r3, #0
 8013a78:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013a7c:	e776      	b.n	801396c <rcl_wait_set_resize+0x178>
 8013a7e:	4622      	mov	r2, r4
 8013a80:	4631      	mov	r1, r6
 8013a82:	f009 fc3f 	bl	801d304 <memset>
 8013a86:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013a88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a8a:	464a      	mov	r2, r9
 8013a8c:	6a38      	ldr	r0, [r7, #32]
 8013a8e:	4621      	mov	r1, r4
 8013a90:	61eb      	str	r3, [r5, #28]
 8013a92:	61fe      	str	r6, [r7, #28]
 8013a94:	47c0      	blx	r8
 8013a96:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013a98:	6238      	str	r0, [r7, #32]
 8013a9a:	6a1f      	ldr	r7, [r3, #32]
 8013a9c:	2f00      	cmp	r7, #0
 8013a9e:	d04a      	beq.n	8013b36 <rcl_wait_set_resize+0x342>
 8013aa0:	4622      	mov	r2, r4
 8013aa2:	4631      	mov	r1, r6
 8013aa4:	4638      	mov	r0, r7
 8013aa6:	f009 fc2d 	bl	801d304 <memset>
 8013aaa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013aac:	e733      	b.n	8013916 <rcl_wait_set_resize+0x122>
 8013aae:	009c      	lsls	r4, r3, #2
 8013ab0:	463a      	mov	r2, r7
 8013ab2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013ab4:	4621      	mov	r1, r4
 8013ab6:	47c8      	blx	r9
 8013ab8:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013aba:	2800      	cmp	r0, #0
 8013abc:	d0b6      	beq.n	8013a2c <rcl_wait_set_resize+0x238>
 8013abe:	4622      	mov	r2, r4
 8013ac0:	4631      	mov	r1, r6
 8013ac2:	f009 fc1f 	bl	801d304 <memset>
 8013ac6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013acc:	463a      	mov	r2, r7
 8013ace:	4621      	mov	r1, r4
 8013ad0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013ad4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013ad6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013ada:	47c8      	blx	r9
 8013adc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013ade:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d034      	beq.n	8013b52 <rcl_wait_set_resize+0x35e>
 8013ae8:	4622      	mov	r2, r4
 8013aea:	4631      	mov	r1, r6
 8013aec:	4618      	mov	r0, r3
 8013aee:	f009 fc09 	bl	801d304 <memset>
 8013af2:	4630      	mov	r0, r6
 8013af4:	b003      	add	sp, #12
 8013af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afa:	200b      	movs	r0, #11
 8013afc:	4770      	bx	lr
 8013afe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b02:	e794      	b.n	8013a2e <rcl_wait_set_resize+0x23a>
 8013b04:	6828      	ldr	r0, [r5, #0]
 8013b06:	4651      	mov	r1, sl
 8013b08:	9301      	str	r3, [sp, #4]
 8013b0a:	47d8      	blx	fp
 8013b0c:	9b01      	ldr	r3, [sp, #4]
 8013b0e:	200a      	movs	r0, #10
 8013b10:	e9c5 3300 	strd	r3, r3, [r5]
 8013b14:	e78b      	b.n	8013a2e <rcl_wait_set_resize+0x23a>
 8013b16:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b18:	68a8      	ldr	r0, [r5, #8]
 8013b1a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b1e:	4798      	blx	r3
 8013b20:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b22:	6928      	ldr	r0, [r5, #16]
 8013b24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013b26:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013b28:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8013b2c:	4790      	blx	r2
 8013b2e:	200a      	movs	r0, #10
 8013b30:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013b34:	e77b      	b.n	8013a2e <rcl_wait_set_resize+0x23a>
 8013b36:	69a8      	ldr	r0, [r5, #24]
 8013b38:	4649      	mov	r1, r9
 8013b3a:	47d0      	blx	sl
 8013b3c:	200a      	movs	r0, #10
 8013b3e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013b42:	e774      	b.n	8013a2e <rcl_wait_set_resize+0x23a>
 8013b44:	6a28      	ldr	r0, [r5, #32]
 8013b46:	4639      	mov	r1, r7
 8013b48:	47c0      	blx	r8
 8013b4a:	200a      	movs	r0, #10
 8013b4c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013b50:	e76d      	b.n	8013a2e <rcl_wait_set_resize+0x23a>
 8013b52:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013b54:	4639      	mov	r1, r7
 8013b56:	9301      	str	r3, [sp, #4]
 8013b58:	47c0      	blx	r8
 8013b5a:	9b01      	ldr	r3, [sp, #4]
 8013b5c:	200a      	movs	r0, #10
 8013b5e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013b62:	e764      	b.n	8013a2e <rcl_wait_set_resize+0x23a>

08013b64 <rcl_wait_set_init>:
 8013b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b68:	b085      	sub	sp, #20
 8013b6a:	4605      	mov	r5, r0
 8013b6c:	460e      	mov	r6, r1
 8013b6e:	4617      	mov	r7, r2
 8013b70:	a812      	add	r0, sp, #72	@ 0x48
 8013b72:	4698      	mov	r8, r3
 8013b74:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8013b78:	f7fd fa82 	bl	8011080 <rcutils_allocator_is_valid>
 8013b7c:	2d00      	cmp	r5, #0
 8013b7e:	d072      	beq.n	8013c66 <rcl_wait_set_init+0x102>
 8013b80:	f080 0001 	eor.w	r0, r0, #1
 8013b84:	b2c0      	uxtb	r0, r0
 8013b86:	2800      	cmp	r0, #0
 8013b88:	d16d      	bne.n	8013c66 <rcl_wait_set_init+0x102>
 8013b8a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013b8e:	f1ba 0f00 	cmp.w	sl, #0
 8013b92:	d004      	beq.n	8013b9e <rcl_wait_set_init+0x3a>
 8013b94:	2464      	movs	r4, #100	@ 0x64
 8013b96:	4620      	mov	r0, r4
 8013b98:	b005      	add	sp, #20
 8013b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b9e:	f1b9 0f00 	cmp.w	r9, #0
 8013ba2:	d060      	beq.n	8013c66 <rcl_wait_set_init+0x102>
 8013ba4:	4648      	mov	r0, r9
 8013ba6:	f7fe f937 	bl	8011e18 <rcl_context_is_valid>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d068      	beq.n	8013c80 <rcl_wait_set_init+0x11c>
 8013bae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013bb0:	205c      	movs	r0, #92	@ 0x5c
 8013bb2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8013bb4:	4798      	blx	r3
 8013bb6:	6328      	str	r0, [r5, #48]	@ 0x30
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d063      	beq.n	8013c84 <rcl_wait_set_init+0x120>
 8013bbc:	225c      	movs	r2, #92	@ 0x5c
 8013bbe:	4651      	mov	r1, sl
 8013bc0:	f009 fba0 	bl	801d304 <memset>
 8013bc4:	ac12      	add	r4, sp, #72	@ 0x48
 8013bc6:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8013bca:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013bce:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8013bd2:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 8013bd6:	eb03 0e02 	add.w	lr, r3, r2
 8013bda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bdc:	f8d9 9000 	ldr.w	r9, [r9]
 8013be0:	449e      	add	lr, r3
 8013be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013be4:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8013be8:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8013bec:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8013bf0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 8013bf4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8013bf8:	44be      	add	lr, r7
 8013bfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013bfe:	6823      	ldr	r3, [r4, #0]
 8013c00:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8013c04:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8013c08:	f8cc 3000 	str.w	r3, [ip]
 8013c0c:	f002 ffee 	bl	8016bec <rmw_create_wait_set>
 8013c10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013c12:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 8013c16:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013c18:	b350      	cbz	r0, 8013c70 <rcl_wait_set_init+0x10c>
 8013c1a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8013c1c:	4643      	mov	r3, r8
 8013c1e:	463a      	mov	r2, r7
 8013c20:	4631      	mov	r1, r6
 8013c22:	9402      	str	r4, [sp, #8]
 8013c24:	4628      	mov	r0, r5
 8013c26:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8013c28:	9401      	str	r4, [sp, #4]
 8013c2a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8013c2c:	9400      	str	r4, [sp, #0]
 8013c2e:	f7ff fde1 	bl	80137f4 <rcl_wait_set_resize>
 8013c32:	4604      	mov	r4, r0
 8013c34:	2800      	cmp	r0, #0
 8013c36:	d0ae      	beq.n	8013b96 <rcl_wait_set_init+0x32>
 8013c38:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013c3a:	bb2b      	cbnz	r3, 8013c88 <rcl_wait_set_init+0x124>
 8013c3c:	2600      	movs	r6, #0
 8013c3e:	4628      	mov	r0, r5
 8013c40:	4633      	mov	r3, r6
 8013c42:	4632      	mov	r2, r6
 8013c44:	4631      	mov	r1, r6
 8013c46:	9600      	str	r6, [sp, #0]
 8013c48:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013c4c:	f7ff fdd2 	bl	80137f4 <rcl_wait_set_resize>
 8013c50:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8013c52:	2800      	cmp	r0, #0
 8013c54:	d09f      	beq.n	8013b96 <rcl_wait_set_init+0x32>
 8013c56:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013c58:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013c5a:	4798      	blx	r3
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	632e      	str	r6, [r5, #48]	@ 0x30
 8013c60:	b005      	add	sp, #20
 8013c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c66:	240b      	movs	r4, #11
 8013c68:	4620      	mov	r0, r4
 8013c6a:	b005      	add	sp, #20
 8013c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c70:	2401      	movs	r4, #1
 8013c72:	f002 ffc5 	bl	8016c00 <rmw_destroy_wait_set>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	bf18      	it	ne
 8013c7a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8013c7e:	e7dd      	b.n	8013c3c <rcl_wait_set_init+0xd8>
 8013c80:	2465      	movs	r4, #101	@ 0x65
 8013c82:	e788      	b.n	8013b96 <rcl_wait_set_init+0x32>
 8013c84:	240a      	movs	r4, #10
 8013c86:	e786      	b.n	8013b96 <rcl_wait_set_init+0x32>
 8013c88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013c8a:	e7f2      	b.n	8013c72 <rcl_wait_set_init+0x10e>

08013c8c <rcl_wait_set_add_guard_condition>:
 8013c8c:	b318      	cbz	r0, 8013cd6 <rcl_wait_set_add_guard_condition+0x4a>
 8013c8e:	b538      	push	{r3, r4, r5, lr}
 8013c90:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c92:	4604      	mov	r4, r0
 8013c94:	b30b      	cbz	r3, 8013cda <rcl_wait_set_add_guard_condition+0x4e>
 8013c96:	b319      	cbz	r1, 8013ce0 <rcl_wait_set_add_guard_condition+0x54>
 8013c98:	68dd      	ldr	r5, [r3, #12]
 8013c9a:	68c0      	ldr	r0, [r0, #12]
 8013c9c:	4285      	cmp	r5, r0
 8013c9e:	d217      	bcs.n	8013cd0 <rcl_wait_set_add_guard_condition+0x44>
 8013ca0:	1c68      	adds	r0, r5, #1
 8013ca2:	60d8      	str	r0, [r3, #12]
 8013ca4:	68a3      	ldr	r3, [r4, #8]
 8013ca6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013caa:	b102      	cbz	r2, 8013cae <rcl_wait_set_add_guard_condition+0x22>
 8013cac:	6015      	str	r5, [r2, #0]
 8013cae:	4608      	mov	r0, r1
 8013cb0:	f007 fd52 	bl	801b758 <rcl_guard_condition_get_rmw_handle>
 8013cb4:	b150      	cbz	r0, 8013ccc <rcl_wait_set_add_guard_condition+0x40>
 8013cb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013cb8:	6842      	ldr	r2, [r0, #4]
 8013cba:	2000      	movs	r0, #0
 8013cbc:	695b      	ldr	r3, [r3, #20]
 8013cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013cc2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013cc4:	6913      	ldr	r3, [r2, #16]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	6113      	str	r3, [r2, #16]
 8013cca:	bd38      	pop	{r3, r4, r5, pc}
 8013ccc:	2001      	movs	r0, #1
 8013cce:	bd38      	pop	{r3, r4, r5, pc}
 8013cd0:	f240 3086 	movw	r0, #902	@ 0x386
 8013cd4:	bd38      	pop	{r3, r4, r5, pc}
 8013cd6:	200b      	movs	r0, #11
 8013cd8:	4770      	bx	lr
 8013cda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013cde:	bd38      	pop	{r3, r4, r5, pc}
 8013ce0:	200b      	movs	r0, #11
 8013ce2:	bd38      	pop	{r3, r4, r5, pc}

08013ce4 <rcl_wait_set_add_timer>:
 8013ce4:	b328      	cbz	r0, 8013d32 <rcl_wait_set_add_timer+0x4e>
 8013ce6:	b538      	push	{r3, r4, r5, lr}
 8013ce8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013cea:	4604      	mov	r4, r0
 8013cec:	b31b      	cbz	r3, 8013d36 <rcl_wait_set_add_timer+0x52>
 8013cee:	b329      	cbz	r1, 8013d3c <rcl_wait_set_add_timer+0x58>
 8013cf0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013cf2:	6965      	ldr	r5, [r4, #20]
 8013cf4:	42a8      	cmp	r0, r5
 8013cf6:	d219      	bcs.n	8013d2c <rcl_wait_set_add_timer+0x48>
 8013cf8:	1c45      	adds	r5, r0, #1
 8013cfa:	641d      	str	r5, [r3, #64]	@ 0x40
 8013cfc:	6923      	ldr	r3, [r4, #16]
 8013cfe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8013d02:	b102      	cbz	r2, 8013d06 <rcl_wait_set_add_timer+0x22>
 8013d04:	6010      	str	r0, [r2, #0]
 8013d06:	4608      	mov	r0, r1
 8013d08:	f7ff fb9a 	bl	8013440 <rcl_timer_get_guard_condition>
 8013d0c:	b168      	cbz	r0, 8013d2a <rcl_wait_set_add_timer+0x46>
 8013d0e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d10:	68e3      	ldr	r3, [r4, #12]
 8013d12:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013d14:	3b01      	subs	r3, #1
 8013d16:	441d      	add	r5, r3
 8013d18:	f007 fd1e 	bl	801b758 <rcl_guard_condition_get_rmw_handle>
 8013d1c:	b180      	cbz	r0, 8013d40 <rcl_wait_set_add_timer+0x5c>
 8013d1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d20:	6842      	ldr	r2, [r0, #4]
 8013d22:	2000      	movs	r0, #0
 8013d24:	695b      	ldr	r3, [r3, #20]
 8013d26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d2a:	bd38      	pop	{r3, r4, r5, pc}
 8013d2c:	f240 3086 	movw	r0, #902	@ 0x386
 8013d30:	bd38      	pop	{r3, r4, r5, pc}
 8013d32:	200b      	movs	r0, #11
 8013d34:	4770      	bx	lr
 8013d36:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d3a:	bd38      	pop	{r3, r4, r5, pc}
 8013d3c:	200b      	movs	r0, #11
 8013d3e:	bd38      	pop	{r3, r4, r5, pc}
 8013d40:	2001      	movs	r0, #1
 8013d42:	bd38      	pop	{r3, r4, r5, pc}

08013d44 <rcl_wait_set_add_client>:
 8013d44:	b318      	cbz	r0, 8013d8e <rcl_wait_set_add_client+0x4a>
 8013d46:	b538      	push	{r3, r4, r5, lr}
 8013d48:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013d4a:	4604      	mov	r4, r0
 8013d4c:	b30b      	cbz	r3, 8013d92 <rcl_wait_set_add_client+0x4e>
 8013d4e:	b319      	cbz	r1, 8013d98 <rcl_wait_set_add_client+0x54>
 8013d50:	699d      	ldr	r5, [r3, #24]
 8013d52:	69c0      	ldr	r0, [r0, #28]
 8013d54:	4285      	cmp	r5, r0
 8013d56:	d217      	bcs.n	8013d88 <rcl_wait_set_add_client+0x44>
 8013d58:	1c68      	adds	r0, r5, #1
 8013d5a:	6198      	str	r0, [r3, #24]
 8013d5c:	69a3      	ldr	r3, [r4, #24]
 8013d5e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013d62:	b102      	cbz	r2, 8013d66 <rcl_wait_set_add_client+0x22>
 8013d64:	6015      	str	r5, [r2, #0]
 8013d66:	4608      	mov	r0, r1
 8013d68:	f7fd ffba 	bl	8011ce0 <rcl_client_get_rmw_handle>
 8013d6c:	b150      	cbz	r0, 8013d84 <rcl_wait_set_add_client+0x40>
 8013d6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d70:	6842      	ldr	r2, [r0, #4]
 8013d72:	2000      	movs	r0, #0
 8013d74:	6a1b      	ldr	r3, [r3, #32]
 8013d76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d7a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013d7c:	69d3      	ldr	r3, [r2, #28]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	61d3      	str	r3, [r2, #28]
 8013d82:	bd38      	pop	{r3, r4, r5, pc}
 8013d84:	2001      	movs	r0, #1
 8013d86:	bd38      	pop	{r3, r4, r5, pc}
 8013d88:	f240 3086 	movw	r0, #902	@ 0x386
 8013d8c:	bd38      	pop	{r3, r4, r5, pc}
 8013d8e:	200b      	movs	r0, #11
 8013d90:	4770      	bx	lr
 8013d92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d96:	bd38      	pop	{r3, r4, r5, pc}
 8013d98:	200b      	movs	r0, #11
 8013d9a:	bd38      	pop	{r3, r4, r5, pc}

08013d9c <rcl_wait_set_add_service>:
 8013d9c:	b318      	cbz	r0, 8013de6 <rcl_wait_set_add_service+0x4a>
 8013d9e:	b538      	push	{r3, r4, r5, lr}
 8013da0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013da2:	4604      	mov	r4, r0
 8013da4:	b30b      	cbz	r3, 8013dea <rcl_wait_set_add_service+0x4e>
 8013da6:	b319      	cbz	r1, 8013df0 <rcl_wait_set_add_service+0x54>
 8013da8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013daa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013dac:	4285      	cmp	r5, r0
 8013dae:	d217      	bcs.n	8013de0 <rcl_wait_set_add_service+0x44>
 8013db0:	1c68      	adds	r0, r5, #1
 8013db2:	6258      	str	r0, [r3, #36]	@ 0x24
 8013db4:	6a23      	ldr	r3, [r4, #32]
 8013db6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013dba:	b102      	cbz	r2, 8013dbe <rcl_wait_set_add_service+0x22>
 8013dbc:	6015      	str	r5, [r2, #0]
 8013dbe:	4608      	mov	r0, r1
 8013dc0:	f7fe ffe2 	bl	8012d88 <rcl_service_get_rmw_handle>
 8013dc4:	b150      	cbz	r0, 8013ddc <rcl_wait_set_add_service+0x40>
 8013dc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013dc8:	6842      	ldr	r2, [r0, #4]
 8013dca:	2000      	movs	r0, #0
 8013dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013dd2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013dd4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	6293      	str	r3, [r2, #40]	@ 0x28
 8013dda:	bd38      	pop	{r3, r4, r5, pc}
 8013ddc:	2001      	movs	r0, #1
 8013dde:	bd38      	pop	{r3, r4, r5, pc}
 8013de0:	f240 3086 	movw	r0, #902	@ 0x386
 8013de4:	bd38      	pop	{r3, r4, r5, pc}
 8013de6:	200b      	movs	r0, #11
 8013de8:	4770      	bx	lr
 8013dea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013dee:	bd38      	pop	{r3, r4, r5, pc}
 8013df0:	200b      	movs	r0, #11
 8013df2:	bd38      	pop	{r3, r4, r5, pc}
 8013df4:	0000      	movs	r0, r0
	...

08013df8 <rcl_wait>:
 8013df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dfc:	ed2d 8b02 	vpush	{d8}
 8013e00:	b08d      	sub	sp, #52	@ 0x34
 8013e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013e06:	2800      	cmp	r0, #0
 8013e08:	f000 814f 	beq.w	80140aa <rcl_wait+0x2b2>
 8013e0c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013e0e:	4605      	mov	r5, r0
 8013e10:	2e00      	cmp	r6, #0
 8013e12:	f000 811a 	beq.w	801404a <rcl_wait+0x252>
 8013e16:	6843      	ldr	r3, [r0, #4]
 8013e18:	b983      	cbnz	r3, 8013e3c <rcl_wait+0x44>
 8013e1a:	68eb      	ldr	r3, [r5, #12]
 8013e1c:	b973      	cbnz	r3, 8013e3c <rcl_wait+0x44>
 8013e1e:	696b      	ldr	r3, [r5, #20]
 8013e20:	b963      	cbnz	r3, 8013e3c <rcl_wait+0x44>
 8013e22:	69eb      	ldr	r3, [r5, #28]
 8013e24:	b953      	cbnz	r3, 8013e3c <rcl_wait+0x44>
 8013e26:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013e28:	b943      	cbnz	r3, 8013e3c <rcl_wait+0x44>
 8013e2a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013e2c:	b933      	cbnz	r3, 8013e3c <rcl_wait+0x44>
 8013e2e:	f240 3085 	movw	r0, #901	@ 0x385
 8013e32:	b00d      	add	sp, #52	@ 0x34
 8013e34:	ecbd 8b02 	vpop	{d8}
 8013e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3c:	9b04      	ldr	r3, [sp, #16]
 8013e3e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013e40:	2b01      	cmp	r3, #1
 8013e42:	9b05      	ldr	r3, [sp, #20]
 8013e44:	f173 0300 	sbcs.w	r3, r3, #0
 8013e48:	f2c0 80f8 	blt.w	801403c <rcl_wait+0x244>
 8013e4c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013e50:	2a00      	cmp	r2, #0
 8013e52:	f000 810f 	beq.w	8014074 <rcl_wait+0x27c>
 8013e56:	2400      	movs	r4, #0
 8013e58:	4613      	mov	r3, r2
 8013e5a:	f240 3921 	movw	r9, #801	@ 0x321
 8013e5e:	4632      	mov	r2, r6
 8013e60:	46a2      	mov	sl, r4
 8013e62:	46a3      	mov	fp, r4
 8013e64:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 80140c8 <rcl_wait+0x2d0>
 8013e68:	e014      	b.n	8013e94 <rcl_wait+0x9c>
 8013e6a:	2800      	cmp	r0, #0
 8013e6c:	d1e1      	bne.n	8013e32 <rcl_wait+0x3a>
 8013e6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e72:	4542      	cmp	r2, r8
 8013e74:	eb73 0107 	sbcs.w	r1, r3, r7
 8013e78:	da03      	bge.n	8013e82 <rcl_wait+0x8a>
 8013e7a:	4690      	mov	r8, r2
 8013e7c:	461f      	mov	r7, r3
 8013e7e:	f04f 0b01 	mov.w	fp, #1
 8013e82:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013e84:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013e86:	3401      	adds	r4, #1
 8013e88:	f14a 0a00 	adc.w	sl, sl, #0
 8013e8c:	429c      	cmp	r4, r3
 8013e8e:	f17a 0100 	sbcs.w	r1, sl, #0
 8013e92:	d228      	bcs.n	8013ee6 <rcl_wait+0xee>
 8013e94:	6928      	ldr	r0, [r5, #16]
 8013e96:	a908      	add	r1, sp, #32
 8013e98:	00a6      	lsls	r6, r4, #2
 8013e9a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	d0f1      	beq.n	8013e86 <rcl_wait+0x8e>
 8013ea2:	68eb      	ldr	r3, [r5, #12]
 8013ea4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013ea8:	4423      	add	r3, r4
 8013eaa:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013eae:	f1be 0f00 	cmp.w	lr, #0
 8013eb2:	d006      	beq.n	8013ec2 <rcl_wait+0xca>
 8013eb4:	6913      	ldr	r3, [r2, #16]
 8013eb6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013eba:	3301      	adds	r3, #1
 8013ebc:	6113      	str	r3, [r2, #16]
 8013ebe:	692b      	ldr	r3, [r5, #16]
 8013ec0:	5998      	ldr	r0, [r3, r6]
 8013ec2:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013ec6:	f7ff fa89 	bl	80133dc <rcl_timer_get_time_until_next_call>
 8013eca:	4548      	cmp	r0, r9
 8013ecc:	d1cd      	bne.n	8013e6a <rcl_wait+0x72>
 8013ece:	692b      	ldr	r3, [r5, #16]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	3401      	adds	r4, #1
 8013ed4:	519a      	str	r2, [r3, r6]
 8013ed6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013ed8:	f14a 0a00 	adc.w	sl, sl, #0
 8013edc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013ede:	429c      	cmp	r4, r3
 8013ee0:	f17a 0100 	sbcs.w	r1, sl, #0
 8013ee4:	d3d6      	bcc.n	8013e94 <rcl_wait+0x9c>
 8013ee6:	4659      	mov	r1, fp
 8013ee8:	4616      	mov	r6, r2
 8013eea:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013eee:	4313      	orrs	r3, r2
 8013ef0:	f040 80b4 	bne.w	801405c <rcl_wait+0x264>
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	460c      	mov	r4, r1
 8013efa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013efe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013f02:	ab08      	add	r3, sp, #32
 8013f04:	9302      	str	r3, [sp, #8]
 8013f06:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013f0a:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013f0c:	f106 0110 	add.w	r1, r6, #16
 8013f10:	9300      	str	r3, [sp, #0]
 8013f12:	1d30      	adds	r0, r6, #4
 8013f14:	f106 031c 	add.w	r3, r6, #28
 8013f18:	9201      	str	r2, [sp, #4]
 8013f1a:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013f1e:	f002 fd01 	bl	8016924 <rmw_wait>
 8013f22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013f24:	4680      	mov	r8, r0
 8013f26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013f28:	b1e2      	cbz	r2, 8013f64 <rcl_wait+0x16c>
 8013f2a:	f04f 0900 	mov.w	r9, #0
 8013f2e:	464f      	mov	r7, r9
 8013f30:	692a      	ldr	r2, [r5, #16]
 8013f32:	f10d 011f 	add.w	r1, sp, #31
 8013f36:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8013f3a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8013f3e:	b160      	cbz	r0, 8013f5a <rcl_wait+0x162>
 8013f40:	f88d 701f 	strb.w	r7, [sp, #31]
 8013f44:	f7ff fa0e 	bl	8013364 <rcl_timer_is_ready>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	f47f af72 	bne.w	8013e32 <rcl_wait+0x3a>
 8013f4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013f52:	b90b      	cbnz	r3, 8013f58 <rcl_wait+0x160>
 8013f54:	692a      	ldr	r2, [r5, #16]
 8013f56:	5193      	str	r3, [r2, r6]
 8013f58:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013f5a:	f109 0901 	add.w	r9, r9, #1
 8013f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013f60:	454a      	cmp	r2, r9
 8013f62:	d8e5      	bhi.n	8013f30 <rcl_wait+0x138>
 8013f64:	f038 0002 	bics.w	r0, r8, #2
 8013f68:	d176      	bne.n	8014058 <rcl_wait+0x260>
 8013f6a:	686f      	ldr	r7, [r5, #4]
 8013f6c:	b17f      	cbz	r7, 8013f8e <rcl_wait+0x196>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	e002      	b.n	8013f78 <rcl_wait+0x180>
 8013f72:	3201      	adds	r2, #1
 8013f74:	42ba      	cmp	r2, r7
 8013f76:	d00a      	beq.n	8013f8e <rcl_wait+0x196>
 8013f78:	6899      	ldr	r1, [r3, #8]
 8013f7a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013f7e:	2900      	cmp	r1, #0
 8013f80:	d1f7      	bne.n	8013f72 <rcl_wait+0x17a>
 8013f82:	682e      	ldr	r6, [r5, #0]
 8013f84:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013f88:	3201      	adds	r2, #1
 8013f8a:	42ba      	cmp	r2, r7
 8013f8c:	d1f4      	bne.n	8013f78 <rcl_wait+0x180>
 8013f8e:	68ef      	ldr	r7, [r5, #12]
 8013f90:	b17f      	cbz	r7, 8013fb2 <rcl_wait+0x1ba>
 8013f92:	2200      	movs	r2, #0
 8013f94:	e002      	b.n	8013f9c <rcl_wait+0x1a4>
 8013f96:	3201      	adds	r2, #1
 8013f98:	42ba      	cmp	r2, r7
 8013f9a:	d00a      	beq.n	8013fb2 <rcl_wait+0x1ba>
 8013f9c:	6959      	ldr	r1, [r3, #20]
 8013f9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fa2:	2900      	cmp	r1, #0
 8013fa4:	d1f7      	bne.n	8013f96 <rcl_wait+0x19e>
 8013fa6:	68ae      	ldr	r6, [r5, #8]
 8013fa8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013fac:	3201      	adds	r2, #1
 8013fae:	42ba      	cmp	r2, r7
 8013fb0:	d1f4      	bne.n	8013f9c <rcl_wait+0x1a4>
 8013fb2:	69ef      	ldr	r7, [r5, #28]
 8013fb4:	b17f      	cbz	r7, 8013fd6 <rcl_wait+0x1de>
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	e002      	b.n	8013fc0 <rcl_wait+0x1c8>
 8013fba:	3201      	adds	r2, #1
 8013fbc:	42ba      	cmp	r2, r7
 8013fbe:	d00a      	beq.n	8013fd6 <rcl_wait+0x1de>
 8013fc0:	6a19      	ldr	r1, [r3, #32]
 8013fc2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fc6:	2900      	cmp	r1, #0
 8013fc8:	d1f7      	bne.n	8013fba <rcl_wait+0x1c2>
 8013fca:	69ae      	ldr	r6, [r5, #24]
 8013fcc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013fd0:	3201      	adds	r2, #1
 8013fd2:	42ba      	cmp	r2, r7
 8013fd4:	d1f4      	bne.n	8013fc0 <rcl_wait+0x1c8>
 8013fd6:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8013fd8:	b17f      	cbz	r7, 8013ffa <rcl_wait+0x202>
 8013fda:	2200      	movs	r2, #0
 8013fdc:	e002      	b.n	8013fe4 <rcl_wait+0x1ec>
 8013fde:	3201      	adds	r2, #1
 8013fe0:	42ba      	cmp	r2, r7
 8013fe2:	d00a      	beq.n	8013ffa <rcl_wait+0x202>
 8013fe4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013fe6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013fea:	2900      	cmp	r1, #0
 8013fec:	d1f7      	bne.n	8013fde <rcl_wait+0x1e6>
 8013fee:	6a2e      	ldr	r6, [r5, #32]
 8013ff0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8013ff4:	3201      	adds	r2, #1
 8013ff6:	42ba      	cmp	r2, r7
 8013ff8:	d1f4      	bne.n	8013fe4 <rcl_wait+0x1ec>
 8013ffa:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8013ffc:	b17f      	cbz	r7, 801401e <rcl_wait+0x226>
 8013ffe:	2200      	movs	r2, #0
 8014000:	e002      	b.n	8014008 <rcl_wait+0x210>
 8014002:	3201      	adds	r2, #1
 8014004:	42ba      	cmp	r2, r7
 8014006:	d00a      	beq.n	801401e <rcl_wait+0x226>
 8014008:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801400a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801400e:	2900      	cmp	r1, #0
 8014010:	d1f7      	bne.n	8014002 <rcl_wait+0x20a>
 8014012:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8014014:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8014018:	3201      	adds	r2, #1
 801401a:	42ba      	cmp	r2, r7
 801401c:	d1f4      	bne.n	8014008 <rcl_wait+0x210>
 801401e:	f1b8 0f02 	cmp.w	r8, #2
 8014022:	f47f af06 	bne.w	8013e32 <rcl_wait+0x3a>
 8014026:	f084 0301 	eor.w	r3, r4, #1
 801402a:	b2db      	uxtb	r3, r3
 801402c:	2b00      	cmp	r3, #0
 801402e:	bf18      	it	ne
 8014030:	2002      	movne	r0, #2
 8014032:	b00d      	add	sp, #52	@ 0x34
 8014034:	ecbd 8b02 	vpop	{d8}
 8014038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801403c:	2a00      	cmp	r2, #0
 801403e:	d03a      	beq.n	80140b6 <rcl_wait+0x2be>
 8014040:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014044:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014048:	e705      	b.n	8013e56 <rcl_wait+0x5e>
 801404a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801404e:	b00d      	add	sp, #52	@ 0x34
 8014050:	ecbd 8b02 	vpop	{d8}
 8014054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014058:	2001      	movs	r0, #1
 801405a:	e6ea      	b.n	8013e32 <rcl_wait+0x3a>
 801405c:	9b04      	ldr	r3, [sp, #16]
 801405e:	460c      	mov	r4, r1
 8014060:	2b01      	cmp	r3, #1
 8014062:	9b05      	ldr	r3, [sp, #20]
 8014064:	f173 0300 	sbcs.w	r3, r3, #0
 8014068:	bfa8      	it	ge
 801406a:	f044 0401 	orrge.w	r4, r4, #1
 801406e:	b914      	cbnz	r4, 8014076 <rcl_wait+0x27e>
 8014070:	4623      	mov	r3, r4
 8014072:	e747      	b.n	8013f04 <rcl_wait+0x10c>
 8014074:	4611      	mov	r1, r2
 8014076:	2f00      	cmp	r7, #0
 8014078:	da02      	bge.n	8014080 <rcl_wait+0x288>
 801407a:	f04f 0800 	mov.w	r8, #0
 801407e:	4647      	mov	r7, r8
 8014080:	460c      	mov	r4, r1
 8014082:	4640      	mov	r0, r8
 8014084:	4639      	mov	r1, r7
 8014086:	a312      	add	r3, pc, #72	@ (adr r3, 80140d0 <rcl_wait+0x2d8>)
 8014088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408c:	f7ec f990 	bl	80003b0 <__aeabi_ldivmod>
 8014090:	a30f      	add	r3, pc, #60	@ (adr r3, 80140d0 <rcl_wait+0x2d8>)
 8014092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014096:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801409a:	4640      	mov	r0, r8
 801409c:	4639      	mov	r1, r7
 801409e:	f7ec f987 	bl	80003b0 <__aeabi_ldivmod>
 80140a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80140a6:	ab08      	add	r3, sp, #32
 80140a8:	e72c      	b.n	8013f04 <rcl_wait+0x10c>
 80140aa:	200b      	movs	r0, #11
 80140ac:	b00d      	add	sp, #52	@ 0x34
 80140ae:	ecbd 8b02 	vpop	{d8}
 80140b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b6:	4611      	mov	r1, r2
 80140b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80140bc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80140c0:	e713      	b.n	8013eea <rcl_wait+0xf2>
 80140c2:	bf00      	nop
 80140c4:	f3af 8000 	nop.w
 80140c8:	ffffffff 	.word	0xffffffff
 80140cc:	7fffffff 	.word	0x7fffffff
 80140d0:	3b9aca00 	.word	0x3b9aca00
 80140d4:	00000000 	.word	0x00000000

080140d8 <rcl_action_take_goal_response>:
 80140d8:	2800      	cmp	r0, #0
 80140da:	d039      	beq.n	8014150 <rcl_action_take_goal_response+0x78>
 80140dc:	b570      	push	{r4, r5, r6, lr}
 80140de:	4604      	mov	r4, r0
 80140e0:	6800      	ldr	r0, [r0, #0]
 80140e2:	b380      	cbz	r0, 8014146 <rcl_action_take_goal_response+0x6e>
 80140e4:	460e      	mov	r6, r1
 80140e6:	4615      	mov	r5, r2
 80140e8:	f7fd fe82 	bl	8011df0 <rcl_client_is_valid>
 80140ec:	b330      	cbz	r0, 801413c <rcl_action_take_goal_response+0x64>
 80140ee:	6820      	ldr	r0, [r4, #0]
 80140f0:	3004      	adds	r0, #4
 80140f2:	f7fd fe7d 	bl	8011df0 <rcl_client_is_valid>
 80140f6:	b308      	cbz	r0, 801413c <rcl_action_take_goal_response+0x64>
 80140f8:	6820      	ldr	r0, [r4, #0]
 80140fa:	3008      	adds	r0, #8
 80140fc:	f7fd fe78 	bl	8011df0 <rcl_client_is_valid>
 8014100:	b1e0      	cbz	r0, 801413c <rcl_action_take_goal_response+0x64>
 8014102:	6820      	ldr	r0, [r4, #0]
 8014104:	300c      	adds	r0, #12
 8014106:	f7fe ffe5 	bl	80130d4 <rcl_subscription_is_valid>
 801410a:	b1b8      	cbz	r0, 801413c <rcl_action_take_goal_response+0x64>
 801410c:	6820      	ldr	r0, [r4, #0]
 801410e:	3010      	adds	r0, #16
 8014110:	f7fe ffe0 	bl	80130d4 <rcl_subscription_is_valid>
 8014114:	b190      	cbz	r0, 801413c <rcl_action_take_goal_response+0x64>
 8014116:	b1cd      	cbz	r5, 801414c <rcl_action_take_goal_response+0x74>
 8014118:	b1c6      	cbz	r6, 801414c <rcl_action_take_goal_response+0x74>
 801411a:	462a      	mov	r2, r5
 801411c:	4631      	mov	r1, r6
 801411e:	6820      	ldr	r0, [r4, #0]
 8014120:	f7fd fe1e 	bl	8011d60 <rcl_take_response>
 8014124:	b148      	cbz	r0, 801413a <rcl_action_take_goal_response+0x62>
 8014126:	280a      	cmp	r0, #10
 8014128:	d007      	beq.n	801413a <rcl_action_take_goal_response+0x62>
 801412a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801412e:	f640 0337 	movw	r3, #2103	@ 0x837
 8014132:	4290      	cmp	r0, r2
 8014134:	bf0c      	ite	eq
 8014136:	4618      	moveq	r0, r3
 8014138:	2001      	movne	r0, #1
 801413a:	bd70      	pop	{r4, r5, r6, pc}
 801413c:	f7fc ffc4 	bl	80110c8 <rcutils_reset_error>
 8014140:	f640 0036 	movw	r0, #2102	@ 0x836
 8014144:	bd70      	pop	{r4, r5, r6, pc}
 8014146:	f640 0036 	movw	r0, #2102	@ 0x836
 801414a:	bd70      	pop	{r4, r5, r6, pc}
 801414c:	200b      	movs	r0, #11
 801414e:	bd70      	pop	{r4, r5, r6, pc}
 8014150:	f640 0036 	movw	r0, #2102	@ 0x836
 8014154:	4770      	bx	lr
 8014156:	bf00      	nop

08014158 <rcl_action_send_result_request>:
 8014158:	b390      	cbz	r0, 80141c0 <rcl_action_send_result_request+0x68>
 801415a:	b570      	push	{r4, r5, r6, lr}
 801415c:	4604      	mov	r4, r0
 801415e:	6800      	ldr	r0, [r0, #0]
 8014160:	b348      	cbz	r0, 80141b6 <rcl_action_send_result_request+0x5e>
 8014162:	460e      	mov	r6, r1
 8014164:	4615      	mov	r5, r2
 8014166:	f7fd fe43 	bl	8011df0 <rcl_client_is_valid>
 801416a:	b1f8      	cbz	r0, 80141ac <rcl_action_send_result_request+0x54>
 801416c:	6820      	ldr	r0, [r4, #0]
 801416e:	3004      	adds	r0, #4
 8014170:	f7fd fe3e 	bl	8011df0 <rcl_client_is_valid>
 8014174:	b1d0      	cbz	r0, 80141ac <rcl_action_send_result_request+0x54>
 8014176:	6820      	ldr	r0, [r4, #0]
 8014178:	3008      	adds	r0, #8
 801417a:	f7fd fe39 	bl	8011df0 <rcl_client_is_valid>
 801417e:	b1a8      	cbz	r0, 80141ac <rcl_action_send_result_request+0x54>
 8014180:	6820      	ldr	r0, [r4, #0]
 8014182:	300c      	adds	r0, #12
 8014184:	f7fe ffa6 	bl	80130d4 <rcl_subscription_is_valid>
 8014188:	b180      	cbz	r0, 80141ac <rcl_action_send_result_request+0x54>
 801418a:	6820      	ldr	r0, [r4, #0]
 801418c:	3010      	adds	r0, #16
 801418e:	f7fe ffa1 	bl	80130d4 <rcl_subscription_is_valid>
 8014192:	b158      	cbz	r0, 80141ac <rcl_action_send_result_request+0x54>
 8014194:	b195      	cbz	r5, 80141bc <rcl_action_send_result_request+0x64>
 8014196:	b18e      	cbz	r6, 80141bc <rcl_action_send_result_request+0x64>
 8014198:	6820      	ldr	r0, [r4, #0]
 801419a:	462a      	mov	r2, r5
 801419c:	4631      	mov	r1, r6
 801419e:	3008      	adds	r0, #8
 80141a0:	f7fd fda4 	bl	8011cec <rcl_send_request>
 80141a4:	3800      	subs	r0, #0
 80141a6:	bf18      	it	ne
 80141a8:	2001      	movne	r0, #1
 80141aa:	bd70      	pop	{r4, r5, r6, pc}
 80141ac:	f7fc ff8c 	bl	80110c8 <rcutils_reset_error>
 80141b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80141b4:	bd70      	pop	{r4, r5, r6, pc}
 80141b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80141ba:	bd70      	pop	{r4, r5, r6, pc}
 80141bc:	200b      	movs	r0, #11
 80141be:	bd70      	pop	{r4, r5, r6, pc}
 80141c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop

080141c8 <rcl_action_take_result_response>:
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d03a      	beq.n	8014242 <rcl_action_take_result_response+0x7a>
 80141cc:	b570      	push	{r4, r5, r6, lr}
 80141ce:	4604      	mov	r4, r0
 80141d0:	6800      	ldr	r0, [r0, #0]
 80141d2:	b388      	cbz	r0, 8014238 <rcl_action_take_result_response+0x70>
 80141d4:	460e      	mov	r6, r1
 80141d6:	4615      	mov	r5, r2
 80141d8:	f7fd fe0a 	bl	8011df0 <rcl_client_is_valid>
 80141dc:	b338      	cbz	r0, 801422e <rcl_action_take_result_response+0x66>
 80141de:	6820      	ldr	r0, [r4, #0]
 80141e0:	3004      	adds	r0, #4
 80141e2:	f7fd fe05 	bl	8011df0 <rcl_client_is_valid>
 80141e6:	b310      	cbz	r0, 801422e <rcl_action_take_result_response+0x66>
 80141e8:	6820      	ldr	r0, [r4, #0]
 80141ea:	3008      	adds	r0, #8
 80141ec:	f7fd fe00 	bl	8011df0 <rcl_client_is_valid>
 80141f0:	b1e8      	cbz	r0, 801422e <rcl_action_take_result_response+0x66>
 80141f2:	6820      	ldr	r0, [r4, #0]
 80141f4:	300c      	adds	r0, #12
 80141f6:	f7fe ff6d 	bl	80130d4 <rcl_subscription_is_valid>
 80141fa:	b1c0      	cbz	r0, 801422e <rcl_action_take_result_response+0x66>
 80141fc:	6820      	ldr	r0, [r4, #0]
 80141fe:	3010      	adds	r0, #16
 8014200:	f7fe ff68 	bl	80130d4 <rcl_subscription_is_valid>
 8014204:	b198      	cbz	r0, 801422e <rcl_action_take_result_response+0x66>
 8014206:	b1d5      	cbz	r5, 801423e <rcl_action_take_result_response+0x76>
 8014208:	b1ce      	cbz	r6, 801423e <rcl_action_take_result_response+0x76>
 801420a:	6820      	ldr	r0, [r4, #0]
 801420c:	462a      	mov	r2, r5
 801420e:	4631      	mov	r1, r6
 8014210:	3008      	adds	r0, #8
 8014212:	f7fd fda5 	bl	8011d60 <rcl_take_response>
 8014216:	b148      	cbz	r0, 801422c <rcl_action_take_result_response+0x64>
 8014218:	280a      	cmp	r0, #10
 801421a:	d007      	beq.n	801422c <rcl_action_take_result_response+0x64>
 801421c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014220:	f640 0337 	movw	r3, #2103	@ 0x837
 8014224:	4290      	cmp	r0, r2
 8014226:	bf0c      	ite	eq
 8014228:	4618      	moveq	r0, r3
 801422a:	2001      	movne	r0, #1
 801422c:	bd70      	pop	{r4, r5, r6, pc}
 801422e:	f7fc ff4b 	bl	80110c8 <rcutils_reset_error>
 8014232:	f640 0036 	movw	r0, #2102	@ 0x836
 8014236:	bd70      	pop	{r4, r5, r6, pc}
 8014238:	f640 0036 	movw	r0, #2102	@ 0x836
 801423c:	bd70      	pop	{r4, r5, r6, pc}
 801423e:	200b      	movs	r0, #11
 8014240:	bd70      	pop	{r4, r5, r6, pc}
 8014242:	f640 0036 	movw	r0, #2102	@ 0x836
 8014246:	4770      	bx	lr

08014248 <rcl_action_take_cancel_response>:
 8014248:	2800      	cmp	r0, #0
 801424a:	d03a      	beq.n	80142c2 <rcl_action_take_cancel_response+0x7a>
 801424c:	b570      	push	{r4, r5, r6, lr}
 801424e:	4604      	mov	r4, r0
 8014250:	6800      	ldr	r0, [r0, #0]
 8014252:	b388      	cbz	r0, 80142b8 <rcl_action_take_cancel_response+0x70>
 8014254:	460e      	mov	r6, r1
 8014256:	4615      	mov	r5, r2
 8014258:	f7fd fdca 	bl	8011df0 <rcl_client_is_valid>
 801425c:	b338      	cbz	r0, 80142ae <rcl_action_take_cancel_response+0x66>
 801425e:	6820      	ldr	r0, [r4, #0]
 8014260:	3004      	adds	r0, #4
 8014262:	f7fd fdc5 	bl	8011df0 <rcl_client_is_valid>
 8014266:	b310      	cbz	r0, 80142ae <rcl_action_take_cancel_response+0x66>
 8014268:	6820      	ldr	r0, [r4, #0]
 801426a:	3008      	adds	r0, #8
 801426c:	f7fd fdc0 	bl	8011df0 <rcl_client_is_valid>
 8014270:	b1e8      	cbz	r0, 80142ae <rcl_action_take_cancel_response+0x66>
 8014272:	6820      	ldr	r0, [r4, #0]
 8014274:	300c      	adds	r0, #12
 8014276:	f7fe ff2d 	bl	80130d4 <rcl_subscription_is_valid>
 801427a:	b1c0      	cbz	r0, 80142ae <rcl_action_take_cancel_response+0x66>
 801427c:	6820      	ldr	r0, [r4, #0]
 801427e:	3010      	adds	r0, #16
 8014280:	f7fe ff28 	bl	80130d4 <rcl_subscription_is_valid>
 8014284:	b198      	cbz	r0, 80142ae <rcl_action_take_cancel_response+0x66>
 8014286:	b1d5      	cbz	r5, 80142be <rcl_action_take_cancel_response+0x76>
 8014288:	b1ce      	cbz	r6, 80142be <rcl_action_take_cancel_response+0x76>
 801428a:	6820      	ldr	r0, [r4, #0]
 801428c:	462a      	mov	r2, r5
 801428e:	4631      	mov	r1, r6
 8014290:	3004      	adds	r0, #4
 8014292:	f7fd fd65 	bl	8011d60 <rcl_take_response>
 8014296:	b148      	cbz	r0, 80142ac <rcl_action_take_cancel_response+0x64>
 8014298:	280a      	cmp	r0, #10
 801429a:	d007      	beq.n	80142ac <rcl_action_take_cancel_response+0x64>
 801429c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80142a0:	f640 0337 	movw	r3, #2103	@ 0x837
 80142a4:	4290      	cmp	r0, r2
 80142a6:	bf0c      	ite	eq
 80142a8:	4618      	moveq	r0, r3
 80142aa:	2001      	movne	r0, #1
 80142ac:	bd70      	pop	{r4, r5, r6, pc}
 80142ae:	f7fc ff0b 	bl	80110c8 <rcutils_reset_error>
 80142b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80142b6:	bd70      	pop	{r4, r5, r6, pc}
 80142b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80142bc:	bd70      	pop	{r4, r5, r6, pc}
 80142be:	200b      	movs	r0, #11
 80142c0:	bd70      	pop	{r4, r5, r6, pc}
 80142c2:	f640 0036 	movw	r0, #2102	@ 0x836
 80142c6:	4770      	bx	lr

080142c8 <rcl_action_take_feedback>:
 80142c8:	2800      	cmp	r0, #0
 80142ca:	d038      	beq.n	801433e <rcl_action_take_feedback+0x76>
 80142cc:	b530      	push	{r4, r5, lr}
 80142ce:	4604      	mov	r4, r0
 80142d0:	6800      	ldr	r0, [r0, #0]
 80142d2:	b091      	sub	sp, #68	@ 0x44
 80142d4:	b378      	cbz	r0, 8014336 <rcl_action_take_feedback+0x6e>
 80142d6:	460d      	mov	r5, r1
 80142d8:	f7fd fd8a 	bl	8011df0 <rcl_client_is_valid>
 80142dc:	b328      	cbz	r0, 801432a <rcl_action_take_feedback+0x62>
 80142de:	6820      	ldr	r0, [r4, #0]
 80142e0:	3004      	adds	r0, #4
 80142e2:	f7fd fd85 	bl	8011df0 <rcl_client_is_valid>
 80142e6:	b300      	cbz	r0, 801432a <rcl_action_take_feedback+0x62>
 80142e8:	6820      	ldr	r0, [r4, #0]
 80142ea:	3008      	adds	r0, #8
 80142ec:	f7fd fd80 	bl	8011df0 <rcl_client_is_valid>
 80142f0:	b1d8      	cbz	r0, 801432a <rcl_action_take_feedback+0x62>
 80142f2:	6820      	ldr	r0, [r4, #0]
 80142f4:	300c      	adds	r0, #12
 80142f6:	f7fe feed 	bl	80130d4 <rcl_subscription_is_valid>
 80142fa:	b1b0      	cbz	r0, 801432a <rcl_action_take_feedback+0x62>
 80142fc:	6820      	ldr	r0, [r4, #0]
 80142fe:	3010      	adds	r0, #16
 8014300:	f7fe fee8 	bl	80130d4 <rcl_subscription_is_valid>
 8014304:	b188      	cbz	r0, 801432a <rcl_action_take_feedback+0x62>
 8014306:	b1ed      	cbz	r5, 8014344 <rcl_action_take_feedback+0x7c>
 8014308:	6820      	ldr	r0, [r4, #0]
 801430a:	2300      	movs	r3, #0
 801430c:	466a      	mov	r2, sp
 801430e:	4629      	mov	r1, r5
 8014310:	300c      	adds	r0, #12
 8014312:	f7fe fe83 	bl	801301c <rcl_take>
 8014316:	b160      	cbz	r0, 8014332 <rcl_action_take_feedback+0x6a>
 8014318:	f240 1391 	movw	r3, #401	@ 0x191
 801431c:	4298      	cmp	r0, r3
 801431e:	d014      	beq.n	801434a <rcl_action_take_feedback+0x82>
 8014320:	280a      	cmp	r0, #10
 8014322:	bf18      	it	ne
 8014324:	2001      	movne	r0, #1
 8014326:	b011      	add	sp, #68	@ 0x44
 8014328:	bd30      	pop	{r4, r5, pc}
 801432a:	f7fc fecd 	bl	80110c8 <rcutils_reset_error>
 801432e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014332:	b011      	add	sp, #68	@ 0x44
 8014334:	bd30      	pop	{r4, r5, pc}
 8014336:	f640 0036 	movw	r0, #2102	@ 0x836
 801433a:	b011      	add	sp, #68	@ 0x44
 801433c:	bd30      	pop	{r4, r5, pc}
 801433e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014342:	4770      	bx	lr
 8014344:	200b      	movs	r0, #11
 8014346:	b011      	add	sp, #68	@ 0x44
 8014348:	bd30      	pop	{r4, r5, pc}
 801434a:	f640 0037 	movw	r0, #2103	@ 0x837
 801434e:	e7f0      	b.n	8014332 <rcl_action_take_feedback+0x6a>

08014350 <rcl_action_wait_set_add_action_client>:
 8014350:	2800      	cmp	r0, #0
 8014352:	d048      	beq.n	80143e6 <rcl_action_wait_set_add_action_client+0x96>
 8014354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014356:	460c      	mov	r4, r1
 8014358:	2900      	cmp	r1, #0
 801435a:	d03c      	beq.n	80143d6 <rcl_action_wait_set_add_action_client+0x86>
 801435c:	4605      	mov	r5, r0
 801435e:	6808      	ldr	r0, [r1, #0]
 8014360:	2800      	cmp	r0, #0
 8014362:	d038      	beq.n	80143d6 <rcl_action_wait_set_add_action_client+0x86>
 8014364:	4617      	mov	r7, r2
 8014366:	461e      	mov	r6, r3
 8014368:	f7fd fd42 	bl	8011df0 <rcl_client_is_valid>
 801436c:	b3b0      	cbz	r0, 80143dc <rcl_action_wait_set_add_action_client+0x8c>
 801436e:	6820      	ldr	r0, [r4, #0]
 8014370:	3004      	adds	r0, #4
 8014372:	f7fd fd3d 	bl	8011df0 <rcl_client_is_valid>
 8014376:	b388      	cbz	r0, 80143dc <rcl_action_wait_set_add_action_client+0x8c>
 8014378:	6820      	ldr	r0, [r4, #0]
 801437a:	3008      	adds	r0, #8
 801437c:	f7fd fd38 	bl	8011df0 <rcl_client_is_valid>
 8014380:	b360      	cbz	r0, 80143dc <rcl_action_wait_set_add_action_client+0x8c>
 8014382:	6820      	ldr	r0, [r4, #0]
 8014384:	300c      	adds	r0, #12
 8014386:	f7fe fea5 	bl	80130d4 <rcl_subscription_is_valid>
 801438a:	b338      	cbz	r0, 80143dc <rcl_action_wait_set_add_action_client+0x8c>
 801438c:	6820      	ldr	r0, [r4, #0]
 801438e:	3010      	adds	r0, #16
 8014390:	f7fe fea0 	bl	80130d4 <rcl_subscription_is_valid>
 8014394:	b310      	cbz	r0, 80143dc <rcl_action_wait_set_add_action_client+0x8c>
 8014396:	6821      	ldr	r1, [r4, #0]
 8014398:	4628      	mov	r0, r5
 801439a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801439e:	f7ff fcd1 	bl	8013d44 <rcl_wait_set_add_client>
 80143a2:	b9b8      	cbnz	r0, 80143d4 <rcl_action_wait_set_add_action_client+0x84>
 80143a4:	6821      	ldr	r1, [r4, #0]
 80143a6:	4628      	mov	r0, r5
 80143a8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80143ac:	3104      	adds	r1, #4
 80143ae:	f7ff fcc9 	bl	8013d44 <rcl_wait_set_add_client>
 80143b2:	b978      	cbnz	r0, 80143d4 <rcl_action_wait_set_add_action_client+0x84>
 80143b4:	6821      	ldr	r1, [r4, #0]
 80143b6:	4628      	mov	r0, r5
 80143b8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80143bc:	3108      	adds	r1, #8
 80143be:	f7ff fcc1 	bl	8013d44 <rcl_wait_set_add_client>
 80143c2:	b938      	cbnz	r0, 80143d4 <rcl_action_wait_set_add_action_client+0x84>
 80143c4:	6821      	ldr	r1, [r4, #0]
 80143c6:	4628      	mov	r0, r5
 80143c8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80143cc:	310c      	adds	r1, #12
 80143ce:	f7ff f969 	bl	80136a4 <rcl_wait_set_add_subscription>
 80143d2:	b158      	cbz	r0, 80143ec <rcl_action_wait_set_add_action_client+0x9c>
 80143d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80143da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143dc:	f7fc fe74 	bl	80110c8 <rcutils_reset_error>
 80143e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80143e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143e6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80143ea:	4770      	bx	lr
 80143ec:	6821      	ldr	r1, [r4, #0]
 80143ee:	4628      	mov	r0, r5
 80143f0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80143f4:	3110      	adds	r1, #16
 80143f6:	f7ff f955 	bl	80136a4 <rcl_wait_set_add_subscription>
 80143fa:	2800      	cmp	r0, #0
 80143fc:	d1ea      	bne.n	80143d4 <rcl_action_wait_set_add_action_client+0x84>
 80143fe:	b11f      	cbz	r7, 8014408 <rcl_action_wait_set_add_action_client+0xb8>
 8014400:	6823      	ldr	r3, [r4, #0]
 8014402:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014406:	603b      	str	r3, [r7, #0]
 8014408:	2e00      	cmp	r6, #0
 801440a:	d0e3      	beq.n	80143d4 <rcl_action_wait_set_add_action_client+0x84>
 801440c:	6823      	ldr	r3, [r4, #0]
 801440e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8014412:	6033      	str	r3, [r6, #0]
 8014414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014416:	bf00      	nop

08014418 <rcl_action_client_wait_set_get_entities_ready>:
 8014418:	2800      	cmp	r0, #0
 801441a:	d050      	beq.n	80144be <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801441c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014420:	460c      	mov	r4, r1
 8014422:	2900      	cmp	r1, #0
 8014424:	d03e      	beq.n	80144a4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8014426:	4605      	mov	r5, r0
 8014428:	6808      	ldr	r0, [r1, #0]
 801442a:	2800      	cmp	r0, #0
 801442c:	d03a      	beq.n	80144a4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801442e:	4616      	mov	r6, r2
 8014430:	461f      	mov	r7, r3
 8014432:	f7fd fcdd 	bl	8011df0 <rcl_client_is_valid>
 8014436:	2800      	cmp	r0, #0
 8014438:	d038      	beq.n	80144ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 801443a:	6820      	ldr	r0, [r4, #0]
 801443c:	3004      	adds	r0, #4
 801443e:	f7fd fcd7 	bl	8011df0 <rcl_client_is_valid>
 8014442:	2800      	cmp	r0, #0
 8014444:	d032      	beq.n	80144ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014446:	6820      	ldr	r0, [r4, #0]
 8014448:	3008      	adds	r0, #8
 801444a:	f7fd fcd1 	bl	8011df0 <rcl_client_is_valid>
 801444e:	b368      	cbz	r0, 80144ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014450:	6820      	ldr	r0, [r4, #0]
 8014452:	300c      	adds	r0, #12
 8014454:	f7fe fe3e 	bl	80130d4 <rcl_subscription_is_valid>
 8014458:	b340      	cbz	r0, 80144ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 801445a:	6820      	ldr	r0, [r4, #0]
 801445c:	3010      	adds	r0, #16
 801445e:	f7fe fe39 	bl	80130d4 <rcl_subscription_is_valid>
 8014462:	b318      	cbz	r0, 80144ac <rcl_action_client_wait_set_get_entities_ready+0x94>
 8014464:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8014468:	2a00      	cmp	r2, #0
 801446a:	bf18      	it	ne
 801446c:	2b00      	cmpne	r3, #0
 801446e:	9b08      	ldr	r3, [sp, #32]
 8014470:	bf0c      	ite	eq
 8014472:	2101      	moveq	r1, #1
 8014474:	2100      	movne	r1, #0
 8014476:	2b00      	cmp	r3, #0
 8014478:	bf08      	it	eq
 801447a:	f041 0101 	orreq.w	r1, r1, #1
 801447e:	2f00      	cmp	r7, #0
 8014480:	bf08      	it	eq
 8014482:	f041 0101 	orreq.w	r1, r1, #1
 8014486:	b9b9      	cbnz	r1, 80144b8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8014488:	b1b6      	cbz	r6, 80144b8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	686c      	ldr	r4, [r5, #4]
 801448e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8014492:	428a      	cmp	r2, r1
 8014494:	4610      	mov	r0, r2
 8014496:	bf38      	it	cc
 8014498:	4608      	movcc	r0, r1
 801449a:	4284      	cmp	r4, r0
 801449c:	d812      	bhi.n	80144c4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801449e:	2001      	movs	r0, #1
 80144a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144a4:	f640 0036 	movw	r0, #2102	@ 0x836
 80144a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144ac:	f7fc fe0c 	bl	80110c8 <rcutils_reset_error>
 80144b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80144b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144b8:	200b      	movs	r0, #11
 80144ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80144c2:	4770      	bx	lr
 80144c4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 80144c8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 80144cc:	45f0      	cmp	r8, lr
 80144ce:	4640      	mov	r0, r8
 80144d0:	69ec      	ldr	r4, [r5, #28]
 80144d2:	bf38      	it	cc
 80144d4:	4670      	movcc	r0, lr
 80144d6:	4560      	cmp	r0, ip
 80144d8:	bf38      	it	cc
 80144da:	4660      	movcc	r0, ip
 80144dc:	4284      	cmp	r4, r0
 80144de:	d9de      	bls.n	801449e <rcl_action_client_wait_set_get_entities_ready+0x86>
 80144e0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80144e4:	682d      	ldr	r5, [r5, #0]
 80144e6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80144ea:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80144ee:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80144f2:	1a18      	subs	r0, r3, r0
 80144f4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80144f8:	f103 0c0c 	add.w	ip, r3, #12
 80144fc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8014500:	fab0 f080 	clz	r0, r0
 8014504:	eba5 050c 	sub.w	r5, r5, ip
 8014508:	0940      	lsrs	r0, r0, #5
 801450a:	fab5 f585 	clz	r5, r5
 801450e:	096d      	lsrs	r5, r5, #5
 8014510:	7035      	strb	r5, [r6, #0]
 8014512:	f103 0510 	add.w	r5, r3, #16
 8014516:	1b64      	subs	r4, r4, r5
 8014518:	9d08      	ldr	r5, [sp, #32]
 801451a:	fab4 f484 	clz	r4, r4
 801451e:	0964      	lsrs	r4, r4, #5
 8014520:	703c      	strb	r4, [r7, #0]
 8014522:	1d1c      	adds	r4, r3, #4
 8014524:	3308      	adds	r3, #8
 8014526:	7028      	strb	r0, [r5, #0]
 8014528:	1b09      	subs	r1, r1, r4
 801452a:	2000      	movs	r0, #0
 801452c:	1ad3      	subs	r3, r2, r3
 801452e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014530:	fab1 f181 	clz	r1, r1
 8014534:	fab3 f383 	clz	r3, r3
 8014538:	0949      	lsrs	r1, r1, #5
 801453a:	095b      	lsrs	r3, r3, #5
 801453c:	7011      	strb	r1, [r2, #0]
 801453e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014540:	7013      	strb	r3, [r2, #0]
 8014542:	e7b1      	b.n	80144a8 <rcl_action_client_wait_set_get_entities_ready+0x90>

08014544 <rcl_action_take_goal_request>:
 8014544:	2800      	cmp	r0, #0
 8014546:	d039      	beq.n	80145bc <rcl_action_take_goal_request+0x78>
 8014548:	b570      	push	{r4, r5, r6, lr}
 801454a:	4604      	mov	r4, r0
 801454c:	6800      	ldr	r0, [r0, #0]
 801454e:	b380      	cbz	r0, 80145b2 <rcl_action_take_goal_request+0x6e>
 8014550:	460e      	mov	r6, r1
 8014552:	4615      	mov	r5, r2
 8014554:	f7fe fc76 	bl	8012e44 <rcl_service_is_valid>
 8014558:	b330      	cbz	r0, 80145a8 <rcl_action_take_goal_request+0x64>
 801455a:	6820      	ldr	r0, [r4, #0]
 801455c:	3004      	adds	r0, #4
 801455e:	f7fe fc71 	bl	8012e44 <rcl_service_is_valid>
 8014562:	b308      	cbz	r0, 80145a8 <rcl_action_take_goal_request+0x64>
 8014564:	6820      	ldr	r0, [r4, #0]
 8014566:	3008      	adds	r0, #8
 8014568:	f7fe fc6c 	bl	8012e44 <rcl_service_is_valid>
 801456c:	b1e0      	cbz	r0, 80145a8 <rcl_action_take_goal_request+0x64>
 801456e:	6820      	ldr	r0, [r4, #0]
 8014570:	300c      	adds	r0, #12
 8014572:	f7fe fa2d 	bl	80129d0 <rcl_publisher_is_valid>
 8014576:	b1b8      	cbz	r0, 80145a8 <rcl_action_take_goal_request+0x64>
 8014578:	6820      	ldr	r0, [r4, #0]
 801457a:	3010      	adds	r0, #16
 801457c:	f7fe fa28 	bl	80129d0 <rcl_publisher_is_valid>
 8014580:	b190      	cbz	r0, 80145a8 <rcl_action_take_goal_request+0x64>
 8014582:	b1cd      	cbz	r5, 80145b8 <rcl_action_take_goal_request+0x74>
 8014584:	b1c6      	cbz	r6, 80145b8 <rcl_action_take_goal_request+0x74>
 8014586:	462a      	mov	r2, r5
 8014588:	4631      	mov	r1, r6
 801458a:	6820      	ldr	r0, [r4, #0]
 801458c:	f7fe fc02 	bl	8012d94 <rcl_take_request>
 8014590:	b148      	cbz	r0, 80145a6 <rcl_action_take_goal_request+0x62>
 8014592:	280a      	cmp	r0, #10
 8014594:	d007      	beq.n	80145a6 <rcl_action_take_goal_request+0x62>
 8014596:	f240 2259 	movw	r2, #601	@ 0x259
 801459a:	f640 0399 	movw	r3, #2201	@ 0x899
 801459e:	4290      	cmp	r0, r2
 80145a0:	bf0c      	ite	eq
 80145a2:	4618      	moveq	r0, r3
 80145a4:	2001      	movne	r0, #1
 80145a6:	bd70      	pop	{r4, r5, r6, pc}
 80145a8:	f7fc fd8e 	bl	80110c8 <rcutils_reset_error>
 80145ac:	f640 0098 	movw	r0, #2200	@ 0x898
 80145b0:	bd70      	pop	{r4, r5, r6, pc}
 80145b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80145b6:	bd70      	pop	{r4, r5, r6, pc}
 80145b8:	200b      	movs	r0, #11
 80145ba:	bd70      	pop	{r4, r5, r6, pc}
 80145bc:	f640 0098 	movw	r0, #2200	@ 0x898
 80145c0:	4770      	bx	lr
 80145c2:	bf00      	nop

080145c4 <rcl_action_send_goal_response>:
 80145c4:	b390      	cbz	r0, 801462c <rcl_action_send_goal_response+0x68>
 80145c6:	b570      	push	{r4, r5, r6, lr}
 80145c8:	4604      	mov	r4, r0
 80145ca:	6800      	ldr	r0, [r0, #0]
 80145cc:	b348      	cbz	r0, 8014622 <rcl_action_send_goal_response+0x5e>
 80145ce:	460e      	mov	r6, r1
 80145d0:	4615      	mov	r5, r2
 80145d2:	f7fe fc37 	bl	8012e44 <rcl_service_is_valid>
 80145d6:	b1f8      	cbz	r0, 8014618 <rcl_action_send_goal_response+0x54>
 80145d8:	6820      	ldr	r0, [r4, #0]
 80145da:	3004      	adds	r0, #4
 80145dc:	f7fe fc32 	bl	8012e44 <rcl_service_is_valid>
 80145e0:	b1d0      	cbz	r0, 8014618 <rcl_action_send_goal_response+0x54>
 80145e2:	6820      	ldr	r0, [r4, #0]
 80145e4:	3008      	adds	r0, #8
 80145e6:	f7fe fc2d 	bl	8012e44 <rcl_service_is_valid>
 80145ea:	b1a8      	cbz	r0, 8014618 <rcl_action_send_goal_response+0x54>
 80145ec:	6820      	ldr	r0, [r4, #0]
 80145ee:	300c      	adds	r0, #12
 80145f0:	f7fe f9ee 	bl	80129d0 <rcl_publisher_is_valid>
 80145f4:	b180      	cbz	r0, 8014618 <rcl_action_send_goal_response+0x54>
 80145f6:	6820      	ldr	r0, [r4, #0]
 80145f8:	3010      	adds	r0, #16
 80145fa:	f7fe f9e9 	bl	80129d0 <rcl_publisher_is_valid>
 80145fe:	b158      	cbz	r0, 8014618 <rcl_action_send_goal_response+0x54>
 8014600:	b195      	cbz	r5, 8014628 <rcl_action_send_goal_response+0x64>
 8014602:	b18e      	cbz	r6, 8014628 <rcl_action_send_goal_response+0x64>
 8014604:	462a      	mov	r2, r5
 8014606:	4631      	mov	r1, r6
 8014608:	6820      	ldr	r0, [r4, #0]
 801460a:	f7fe fc03 	bl	8012e14 <rcl_send_response>
 801460e:	b110      	cbz	r0, 8014616 <rcl_action_send_goal_response+0x52>
 8014610:	2802      	cmp	r0, #2
 8014612:	bf18      	it	ne
 8014614:	2001      	movne	r0, #1
 8014616:	bd70      	pop	{r4, r5, r6, pc}
 8014618:	f7fc fd56 	bl	80110c8 <rcutils_reset_error>
 801461c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014620:	bd70      	pop	{r4, r5, r6, pc}
 8014622:	f640 0098 	movw	r0, #2200	@ 0x898
 8014626:	bd70      	pop	{r4, r5, r6, pc}
 8014628:	200b      	movs	r0, #11
 801462a:	bd70      	pop	{r4, r5, r6, pc}
 801462c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014630:	4770      	bx	lr
 8014632:	bf00      	nop

08014634 <rcl_action_take_result_request>:
 8014634:	2800      	cmp	r0, #0
 8014636:	d03a      	beq.n	80146ae <rcl_action_take_result_request+0x7a>
 8014638:	b570      	push	{r4, r5, r6, lr}
 801463a:	4604      	mov	r4, r0
 801463c:	6800      	ldr	r0, [r0, #0]
 801463e:	b388      	cbz	r0, 80146a4 <rcl_action_take_result_request+0x70>
 8014640:	460e      	mov	r6, r1
 8014642:	4615      	mov	r5, r2
 8014644:	f7fe fbfe 	bl	8012e44 <rcl_service_is_valid>
 8014648:	b338      	cbz	r0, 801469a <rcl_action_take_result_request+0x66>
 801464a:	6820      	ldr	r0, [r4, #0]
 801464c:	3004      	adds	r0, #4
 801464e:	f7fe fbf9 	bl	8012e44 <rcl_service_is_valid>
 8014652:	b310      	cbz	r0, 801469a <rcl_action_take_result_request+0x66>
 8014654:	6820      	ldr	r0, [r4, #0]
 8014656:	3008      	adds	r0, #8
 8014658:	f7fe fbf4 	bl	8012e44 <rcl_service_is_valid>
 801465c:	b1e8      	cbz	r0, 801469a <rcl_action_take_result_request+0x66>
 801465e:	6820      	ldr	r0, [r4, #0]
 8014660:	300c      	adds	r0, #12
 8014662:	f7fe f9b5 	bl	80129d0 <rcl_publisher_is_valid>
 8014666:	b1c0      	cbz	r0, 801469a <rcl_action_take_result_request+0x66>
 8014668:	6820      	ldr	r0, [r4, #0]
 801466a:	3010      	adds	r0, #16
 801466c:	f7fe f9b0 	bl	80129d0 <rcl_publisher_is_valid>
 8014670:	b198      	cbz	r0, 801469a <rcl_action_take_result_request+0x66>
 8014672:	b1d5      	cbz	r5, 80146aa <rcl_action_take_result_request+0x76>
 8014674:	b1ce      	cbz	r6, 80146aa <rcl_action_take_result_request+0x76>
 8014676:	6820      	ldr	r0, [r4, #0]
 8014678:	462a      	mov	r2, r5
 801467a:	4631      	mov	r1, r6
 801467c:	3008      	adds	r0, #8
 801467e:	f7fe fb89 	bl	8012d94 <rcl_take_request>
 8014682:	b148      	cbz	r0, 8014698 <rcl_action_take_result_request+0x64>
 8014684:	280a      	cmp	r0, #10
 8014686:	d007      	beq.n	8014698 <rcl_action_take_result_request+0x64>
 8014688:	f240 2259 	movw	r2, #601	@ 0x259
 801468c:	f640 0399 	movw	r3, #2201	@ 0x899
 8014690:	4290      	cmp	r0, r2
 8014692:	bf0c      	ite	eq
 8014694:	4618      	moveq	r0, r3
 8014696:	2001      	movne	r0, #1
 8014698:	bd70      	pop	{r4, r5, r6, pc}
 801469a:	f7fc fd15 	bl	80110c8 <rcutils_reset_error>
 801469e:	f640 0098 	movw	r0, #2200	@ 0x898
 80146a2:	bd70      	pop	{r4, r5, r6, pc}
 80146a4:	f640 0098 	movw	r0, #2200	@ 0x898
 80146a8:	bd70      	pop	{r4, r5, r6, pc}
 80146aa:	200b      	movs	r0, #11
 80146ac:	bd70      	pop	{r4, r5, r6, pc}
 80146ae:	f640 0098 	movw	r0, #2200	@ 0x898
 80146b2:	4770      	bx	lr

080146b4 <rcl_action_take_cancel_request>:
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d03a      	beq.n	801472e <rcl_action_take_cancel_request+0x7a>
 80146b8:	b570      	push	{r4, r5, r6, lr}
 80146ba:	4604      	mov	r4, r0
 80146bc:	6800      	ldr	r0, [r0, #0]
 80146be:	b388      	cbz	r0, 8014724 <rcl_action_take_cancel_request+0x70>
 80146c0:	460e      	mov	r6, r1
 80146c2:	4615      	mov	r5, r2
 80146c4:	f7fe fbbe 	bl	8012e44 <rcl_service_is_valid>
 80146c8:	b338      	cbz	r0, 801471a <rcl_action_take_cancel_request+0x66>
 80146ca:	6820      	ldr	r0, [r4, #0]
 80146cc:	3004      	adds	r0, #4
 80146ce:	f7fe fbb9 	bl	8012e44 <rcl_service_is_valid>
 80146d2:	b310      	cbz	r0, 801471a <rcl_action_take_cancel_request+0x66>
 80146d4:	6820      	ldr	r0, [r4, #0]
 80146d6:	3008      	adds	r0, #8
 80146d8:	f7fe fbb4 	bl	8012e44 <rcl_service_is_valid>
 80146dc:	b1e8      	cbz	r0, 801471a <rcl_action_take_cancel_request+0x66>
 80146de:	6820      	ldr	r0, [r4, #0]
 80146e0:	300c      	adds	r0, #12
 80146e2:	f7fe f975 	bl	80129d0 <rcl_publisher_is_valid>
 80146e6:	b1c0      	cbz	r0, 801471a <rcl_action_take_cancel_request+0x66>
 80146e8:	6820      	ldr	r0, [r4, #0]
 80146ea:	3010      	adds	r0, #16
 80146ec:	f7fe f970 	bl	80129d0 <rcl_publisher_is_valid>
 80146f0:	b198      	cbz	r0, 801471a <rcl_action_take_cancel_request+0x66>
 80146f2:	b1d5      	cbz	r5, 801472a <rcl_action_take_cancel_request+0x76>
 80146f4:	b1ce      	cbz	r6, 801472a <rcl_action_take_cancel_request+0x76>
 80146f6:	6820      	ldr	r0, [r4, #0]
 80146f8:	462a      	mov	r2, r5
 80146fa:	4631      	mov	r1, r6
 80146fc:	3004      	adds	r0, #4
 80146fe:	f7fe fb49 	bl	8012d94 <rcl_take_request>
 8014702:	b148      	cbz	r0, 8014718 <rcl_action_take_cancel_request+0x64>
 8014704:	280a      	cmp	r0, #10
 8014706:	d007      	beq.n	8014718 <rcl_action_take_cancel_request+0x64>
 8014708:	f240 2259 	movw	r2, #601	@ 0x259
 801470c:	f640 0399 	movw	r3, #2201	@ 0x899
 8014710:	4290      	cmp	r0, r2
 8014712:	bf0c      	ite	eq
 8014714:	4618      	moveq	r0, r3
 8014716:	2001      	movne	r0, #1
 8014718:	bd70      	pop	{r4, r5, r6, pc}
 801471a:	f7fc fcd5 	bl	80110c8 <rcutils_reset_error>
 801471e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014722:	bd70      	pop	{r4, r5, r6, pc}
 8014724:	f640 0098 	movw	r0, #2200	@ 0x898
 8014728:	bd70      	pop	{r4, r5, r6, pc}
 801472a:	200b      	movs	r0, #11
 801472c:	bd70      	pop	{r4, r5, r6, pc}
 801472e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014732:	4770      	bx	lr

08014734 <rcl_action_send_cancel_response>:
 8014734:	b398      	cbz	r0, 801479e <rcl_action_send_cancel_response+0x6a>
 8014736:	b570      	push	{r4, r5, r6, lr}
 8014738:	4604      	mov	r4, r0
 801473a:	6800      	ldr	r0, [r0, #0]
 801473c:	b350      	cbz	r0, 8014794 <rcl_action_send_cancel_response+0x60>
 801473e:	460e      	mov	r6, r1
 8014740:	4615      	mov	r5, r2
 8014742:	f7fe fb7f 	bl	8012e44 <rcl_service_is_valid>
 8014746:	b300      	cbz	r0, 801478a <rcl_action_send_cancel_response+0x56>
 8014748:	6820      	ldr	r0, [r4, #0]
 801474a:	3004      	adds	r0, #4
 801474c:	f7fe fb7a 	bl	8012e44 <rcl_service_is_valid>
 8014750:	b1d8      	cbz	r0, 801478a <rcl_action_send_cancel_response+0x56>
 8014752:	6820      	ldr	r0, [r4, #0]
 8014754:	3008      	adds	r0, #8
 8014756:	f7fe fb75 	bl	8012e44 <rcl_service_is_valid>
 801475a:	b1b0      	cbz	r0, 801478a <rcl_action_send_cancel_response+0x56>
 801475c:	6820      	ldr	r0, [r4, #0]
 801475e:	300c      	adds	r0, #12
 8014760:	f7fe f936 	bl	80129d0 <rcl_publisher_is_valid>
 8014764:	b188      	cbz	r0, 801478a <rcl_action_send_cancel_response+0x56>
 8014766:	6820      	ldr	r0, [r4, #0]
 8014768:	3010      	adds	r0, #16
 801476a:	f7fe f931 	bl	80129d0 <rcl_publisher_is_valid>
 801476e:	b160      	cbz	r0, 801478a <rcl_action_send_cancel_response+0x56>
 8014770:	b19d      	cbz	r5, 801479a <rcl_action_send_cancel_response+0x66>
 8014772:	b196      	cbz	r6, 801479a <rcl_action_send_cancel_response+0x66>
 8014774:	6820      	ldr	r0, [r4, #0]
 8014776:	462a      	mov	r2, r5
 8014778:	4631      	mov	r1, r6
 801477a:	3004      	adds	r0, #4
 801477c:	f7fe fb4a 	bl	8012e14 <rcl_send_response>
 8014780:	b110      	cbz	r0, 8014788 <rcl_action_send_cancel_response+0x54>
 8014782:	2802      	cmp	r0, #2
 8014784:	bf18      	it	ne
 8014786:	2001      	movne	r0, #1
 8014788:	bd70      	pop	{r4, r5, r6, pc}
 801478a:	f7fc fc9d 	bl	80110c8 <rcutils_reset_error>
 801478e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014792:	bd70      	pop	{r4, r5, r6, pc}
 8014794:	f640 0098 	movw	r0, #2200	@ 0x898
 8014798:	bd70      	pop	{r4, r5, r6, pc}
 801479a:	200b      	movs	r0, #11
 801479c:	bd70      	pop	{r4, r5, r6, pc}
 801479e:	f640 0098 	movw	r0, #2200	@ 0x898
 80147a2:	4770      	bx	lr

080147a4 <rcl_action_wait_set_add_action_server>:
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d04d      	beq.n	8014844 <rcl_action_wait_set_add_action_server+0xa0>
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	460c      	mov	r4, r1
 80147ac:	b159      	cbz	r1, 80147c6 <rcl_action_wait_set_add_action_server+0x22>
 80147ae:	4605      	mov	r5, r0
 80147b0:	6808      	ldr	r0, [r1, #0]
 80147b2:	b140      	cbz	r0, 80147c6 <rcl_action_wait_set_add_action_server+0x22>
 80147b4:	4616      	mov	r6, r2
 80147b6:	f7fe fb45 	bl	8012e44 <rcl_service_is_valid>
 80147ba:	b120      	cbz	r0, 80147c6 <rcl_action_wait_set_add_action_server+0x22>
 80147bc:	6820      	ldr	r0, [r4, #0]
 80147be:	3004      	adds	r0, #4
 80147c0:	f7fe fb40 	bl	8012e44 <rcl_service_is_valid>
 80147c4:	b910      	cbnz	r0, 80147cc <rcl_action_wait_set_add_action_server+0x28>
 80147c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80147ca:	bd70      	pop	{r4, r5, r6, pc}
 80147cc:	6820      	ldr	r0, [r4, #0]
 80147ce:	3008      	adds	r0, #8
 80147d0:	f7fe fb38 	bl	8012e44 <rcl_service_is_valid>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	d0f6      	beq.n	80147c6 <rcl_action_wait_set_add_action_server+0x22>
 80147d8:	6820      	ldr	r0, [r4, #0]
 80147da:	300c      	adds	r0, #12
 80147dc:	f7fe f910 	bl	8012a00 <rcl_publisher_is_valid_except_context>
 80147e0:	2800      	cmp	r0, #0
 80147e2:	d0f0      	beq.n	80147c6 <rcl_action_wait_set_add_action_server+0x22>
 80147e4:	6820      	ldr	r0, [r4, #0]
 80147e6:	3010      	adds	r0, #16
 80147e8:	f7fe f90a 	bl	8012a00 <rcl_publisher_is_valid_except_context>
 80147ec:	2800      	cmp	r0, #0
 80147ee:	d0ea      	beq.n	80147c6 <rcl_action_wait_set_add_action_server+0x22>
 80147f0:	6821      	ldr	r1, [r4, #0]
 80147f2:	4628      	mov	r0, r5
 80147f4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80147f8:	f7ff fad0 	bl	8013d9c <rcl_wait_set_add_service>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d1e4      	bne.n	80147ca <rcl_action_wait_set_add_action_server+0x26>
 8014800:	6821      	ldr	r1, [r4, #0]
 8014802:	4628      	mov	r0, r5
 8014804:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8014808:	3104      	adds	r1, #4
 801480a:	f7ff fac7 	bl	8013d9c <rcl_wait_set_add_service>
 801480e:	2800      	cmp	r0, #0
 8014810:	d1db      	bne.n	80147ca <rcl_action_wait_set_add_action_server+0x26>
 8014812:	6821      	ldr	r1, [r4, #0]
 8014814:	4628      	mov	r0, r5
 8014816:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801481a:	3108      	adds	r1, #8
 801481c:	f7ff fabe 	bl	8013d9c <rcl_wait_set_add_service>
 8014820:	2800      	cmp	r0, #0
 8014822:	d1d2      	bne.n	80147ca <rcl_action_wait_set_add_action_server+0x26>
 8014824:	6821      	ldr	r1, [r4, #0]
 8014826:	4628      	mov	r0, r5
 8014828:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801482c:	3114      	adds	r1, #20
 801482e:	f7ff fa59 	bl	8013ce4 <rcl_wait_set_add_timer>
 8014832:	2800      	cmp	r0, #0
 8014834:	d1c9      	bne.n	80147ca <rcl_action_wait_set_add_action_server+0x26>
 8014836:	2e00      	cmp	r6, #0
 8014838:	d0c7      	beq.n	80147ca <rcl_action_wait_set_add_action_server+0x26>
 801483a:	6823      	ldr	r3, [r4, #0]
 801483c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8014840:	6033      	str	r3, [r6, #0]
 8014842:	bd70      	pop	{r4, r5, r6, pc}
 8014844:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014848:	4770      	bx	lr
 801484a:	bf00      	nop

0801484c <rcl_action_server_wait_set_get_entities_ready>:
 801484c:	2800      	cmp	r0, #0
 801484e:	d067      	beq.n	8014920 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8014850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014854:	460c      	mov	r4, r1
 8014856:	b161      	cbz	r1, 8014872 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8014858:	4605      	mov	r5, r0
 801485a:	6808      	ldr	r0, [r1, #0]
 801485c:	b148      	cbz	r0, 8014872 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801485e:	4616      	mov	r6, r2
 8014860:	4698      	mov	r8, r3
 8014862:	f7fe faef 	bl	8012e44 <rcl_service_is_valid>
 8014866:	b120      	cbz	r0, 8014872 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8014868:	6820      	ldr	r0, [r4, #0]
 801486a:	3004      	adds	r0, #4
 801486c:	f7fe faea 	bl	8012e44 <rcl_service_is_valid>
 8014870:	b918      	cbnz	r0, 801487a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8014872:	f640 0098 	movw	r0, #2200	@ 0x898
 8014876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801487a:	6820      	ldr	r0, [r4, #0]
 801487c:	3008      	adds	r0, #8
 801487e:	f7fe fae1 	bl	8012e44 <rcl_service_is_valid>
 8014882:	2800      	cmp	r0, #0
 8014884:	d0f5      	beq.n	8014872 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8014886:	6820      	ldr	r0, [r4, #0]
 8014888:	300c      	adds	r0, #12
 801488a:	f7fe f8b9 	bl	8012a00 <rcl_publisher_is_valid_except_context>
 801488e:	2800      	cmp	r0, #0
 8014890:	d0ef      	beq.n	8014872 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8014892:	6820      	ldr	r0, [r4, #0]
 8014894:	3010      	adds	r0, #16
 8014896:	f7fe f8b3 	bl	8012a00 <rcl_publisher_is_valid_except_context>
 801489a:	2800      	cmp	r0, #0
 801489c:	d0e9      	beq.n	8014872 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801489e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80148a2:	2a00      	cmp	r2, #0
 80148a4:	bf18      	it	ne
 80148a6:	2b00      	cmpne	r3, #0
 80148a8:	bf0c      	ite	eq
 80148aa:	2101      	moveq	r1, #1
 80148ac:	2100      	movne	r1, #0
 80148ae:	f1b8 0f00 	cmp.w	r8, #0
 80148b2:	bf08      	it	eq
 80148b4:	f041 0101 	orreq.w	r1, r1, #1
 80148b8:	bba9      	cbnz	r1, 8014926 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80148ba:	b3a6      	cbz	r6, 8014926 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80148bc:	6821      	ldr	r1, [r4, #0]
 80148be:	2000      	movs	r0, #0
 80148c0:	692c      	ldr	r4, [r5, #16]
 80148c2:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 80148c6:	6a2f      	ldr	r7, [r5, #32]
 80148c8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80148cc:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 80148d0:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80148d4:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80148d8:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80148dc:	1a64      	subs	r4, r4, r1
 80148de:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 80148e2:	fab4 f484 	clz	r4, r4
 80148e6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80148ea:	0964      	lsrs	r4, r4, #5
 80148ec:	7034      	strb	r4, [r6, #0]
 80148ee:	1d0c      	adds	r4, r1, #4
 80148f0:	1b2c      	subs	r4, r5, r4
 80148f2:	fab4 f484 	clz	r4, r4
 80148f6:	0964      	lsrs	r4, r4, #5
 80148f8:	f888 4000 	strb.w	r4, [r8]
 80148fc:	f101 0408 	add.w	r4, r1, #8
 8014900:	1b1b      	subs	r3, r3, r4
 8014902:	9c06      	ldr	r4, [sp, #24]
 8014904:	fab3 f383 	clz	r3, r3
 8014908:	095b      	lsrs	r3, r3, #5
 801490a:	7023      	strb	r3, [r4, #0]
 801490c:	f101 0314 	add.w	r3, r1, #20
 8014910:	1ad3      	subs	r3, r2, r3
 8014912:	9a07      	ldr	r2, [sp, #28]
 8014914:	fab3 f383 	clz	r3, r3
 8014918:	095b      	lsrs	r3, r3, #5
 801491a:	7013      	strb	r3, [r2, #0]
 801491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014920:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014924:	4770      	bx	lr
 8014926:	200b      	movs	r0, #11
 8014928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801492c <_execute_event_handler>:
 801492c:	2002      	movs	r0, #2
 801492e:	4770      	bx	lr

08014930 <_cancel_goal_event_handler>:
 8014930:	2003      	movs	r0, #3
 8014932:	4770      	bx	lr

08014934 <_succeed_event_handler>:
 8014934:	2004      	movs	r0, #4
 8014936:	4770      	bx	lr

08014938 <_abort_event_handler>:
 8014938:	2006      	movs	r0, #6
 801493a:	4770      	bx	lr

0801493c <_canceled_event_handler>:
 801493c:	2005      	movs	r0, #5
 801493e:	4770      	bx	lr

08014940 <rcl_action_transition_goal_state>:
 8014940:	b2c2      	uxtb	r2, r0
 8014942:	2a06      	cmp	r2, #6
 8014944:	d810      	bhi.n	8014968 <rcl_action_transition_goal_state+0x28>
 8014946:	2904      	cmp	r1, #4
 8014948:	d80e      	bhi.n	8014968 <rcl_action_transition_goal_state+0x28>
 801494a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801494e:	b410      	push	{r4}
 8014950:	1853      	adds	r3, r2, r1
 8014952:	4c06      	ldr	r4, [pc, #24]	@ (801496c <rcl_action_transition_goal_state+0x2c>)
 8014954:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014958:	b113      	cbz	r3, 8014960 <rcl_action_transition_goal_state+0x20>
 801495a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801495e:	4718      	bx	r3
 8014960:	2000      	movs	r0, #0
 8014962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014966:	4770      	bx	lr
 8014968:	2000      	movs	r0, #0
 801496a:	4770      	bx	lr
 801496c:	080200d4 	.word	0x080200d4

08014970 <rcl_action_get_zero_initialized_cancel_response>:
 8014970:	b510      	push	{r4, lr}
 8014972:	4c07      	ldr	r4, [pc, #28]	@ (8014990 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014974:	4686      	mov	lr, r0
 8014976:	4684      	mov	ip, r0
 8014978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801497a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801497e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014980:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014984:	6823      	ldr	r3, [r4, #0]
 8014986:	4670      	mov	r0, lr
 8014988:	f8cc 3000 	str.w	r3, [ip]
 801498c:	bd10      	pop	{r4, pc}
 801498e:	bf00      	nop
 8014990:	08020160 	.word	0x08020160

08014994 <rclc_action_send_result_request>:
 8014994:	b1d0      	cbz	r0, 80149cc <rclc_action_send_result_request+0x38>
 8014996:	4684      	mov	ip, r0
 8014998:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801499c:	b500      	push	{lr}
 801499e:	b087      	sub	sp, #28
 80149a0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80149a4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80149a8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80149ac:	f10d 0e08 	add.w	lr, sp, #8
 80149b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149b4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80149b8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80149bc:	a902      	add	r1, sp, #8
 80149be:	3010      	adds	r0, #16
 80149c0:	f7ff fbca 	bl	8014158 <rcl_action_send_result_request>
 80149c4:	b920      	cbnz	r0, 80149d0 <rclc_action_send_result_request+0x3c>
 80149c6:	b007      	add	sp, #28
 80149c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80149cc:	200b      	movs	r0, #11
 80149ce:	4770      	bx	lr
 80149d0:	9001      	str	r0, [sp, #4]
 80149d2:	f7fc fb79 	bl	80110c8 <rcutils_reset_error>
 80149d6:	9801      	ldr	r0, [sp, #4]
 80149d8:	b007      	add	sp, #28
 80149da:	f85d fb04 	ldr.w	pc, [sp], #4
 80149de:	bf00      	nop

080149e0 <rclc_action_take_goal_handle>:
 80149e0:	b160      	cbz	r0, 80149fc <rclc_action_take_goal_handle+0x1c>
 80149e2:	6883      	ldr	r3, [r0, #8]
 80149e4:	b143      	cbz	r3, 80149f8 <rclc_action_take_goal_handle+0x18>
 80149e6:	6819      	ldr	r1, [r3, #0]
 80149e8:	2200      	movs	r2, #0
 80149ea:	6081      	str	r1, [r0, #8]
 80149ec:	721a      	strb	r2, [r3, #8]
 80149ee:	68c1      	ldr	r1, [r0, #12]
 80149f0:	621a      	str	r2, [r3, #32]
 80149f2:	849a      	strh	r2, [r3, #36]	@ 0x24
 80149f4:	6019      	str	r1, [r3, #0]
 80149f6:	60c3      	str	r3, [r0, #12]
 80149f8:	4618      	mov	r0, r3
 80149fa:	4770      	bx	lr
 80149fc:	4603      	mov	r3, r0
 80149fe:	e7fb      	b.n	80149f8 <rclc_action_take_goal_handle+0x18>

08014a00 <rclc_action_remove_used_goal_handle>:
 8014a00:	b180      	cbz	r0, 8014a24 <rclc_action_remove_used_goal_handle+0x24>
 8014a02:	b179      	cbz	r1, 8014a24 <rclc_action_remove_used_goal_handle+0x24>
 8014a04:	68c3      	ldr	r3, [r0, #12]
 8014a06:	4299      	cmp	r1, r3
 8014a08:	d00d      	beq.n	8014a26 <rclc_action_remove_used_goal_handle+0x26>
 8014a0a:	b12b      	cbz	r3, 8014a18 <rclc_action_remove_used_goal_handle+0x18>
 8014a0c:	681a      	ldr	r2, [r3, #0]
 8014a0e:	4291      	cmp	r1, r2
 8014a10:	d003      	beq.n	8014a1a <rclc_action_remove_used_goal_handle+0x1a>
 8014a12:	4613      	mov	r3, r2
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d1f9      	bne.n	8014a0c <rclc_action_remove_used_goal_handle+0xc>
 8014a18:	4770      	bx	lr
 8014a1a:	680a      	ldr	r2, [r1, #0]
 8014a1c:	601a      	str	r2, [r3, #0]
 8014a1e:	6883      	ldr	r3, [r0, #8]
 8014a20:	600b      	str	r3, [r1, #0]
 8014a22:	6081      	str	r1, [r0, #8]
 8014a24:	4770      	bx	lr
 8014a26:	680b      	ldr	r3, [r1, #0]
 8014a28:	60c3      	str	r3, [r0, #12]
 8014a2a:	e7f8      	b.n	8014a1e <rclc_action_remove_used_goal_handle+0x1e>

08014a2c <rclc_action_find_goal_handle_by_uuid>:
 8014a2c:	b538      	push	{r3, r4, r5, lr}
 8014a2e:	b181      	cbz	r1, 8014a52 <rclc_action_find_goal_handle_by_uuid+0x26>
 8014a30:	b178      	cbz	r0, 8014a52 <rclc_action_find_goal_handle_by_uuid+0x26>
 8014a32:	68c4      	ldr	r4, [r0, #12]
 8014a34:	460d      	mov	r5, r1
 8014a36:	b914      	cbnz	r4, 8014a3e <rclc_action_find_goal_handle_by_uuid+0x12>
 8014a38:	e009      	b.n	8014a4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a3a:	6824      	ldr	r4, [r4, #0]
 8014a3c:	b13c      	cbz	r4, 8014a4e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014a3e:	f104 0009 	add.w	r0, r4, #9
 8014a42:	2210      	movs	r2, #16
 8014a44:	4629      	mov	r1, r5
 8014a46:	f008 fc33 	bl	801d2b0 <memcmp>
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	d1f5      	bne.n	8014a3a <rclc_action_find_goal_handle_by_uuid+0xe>
 8014a4e:	4620      	mov	r0, r4
 8014a50:	bd38      	pop	{r3, r4, r5, pc}
 8014a52:	2400      	movs	r4, #0
 8014a54:	4620      	mov	r0, r4
 8014a56:	bd38      	pop	{r3, r4, r5, pc}

08014a58 <rclc_action_find_first_handle_by_status>:
 8014a58:	b140      	cbz	r0, 8014a6c <rclc_action_find_first_handle_by_status+0x14>
 8014a5a:	68c0      	ldr	r0, [r0, #12]
 8014a5c:	b910      	cbnz	r0, 8014a64 <rclc_action_find_first_handle_by_status+0xc>
 8014a5e:	e005      	b.n	8014a6c <rclc_action_find_first_handle_by_status+0x14>
 8014a60:	6800      	ldr	r0, [r0, #0]
 8014a62:	b118      	cbz	r0, 8014a6c <rclc_action_find_first_handle_by_status+0x14>
 8014a64:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014a68:	428b      	cmp	r3, r1
 8014a6a:	d1f9      	bne.n	8014a60 <rclc_action_find_first_handle_by_status+0x8>
 8014a6c:	4770      	bx	lr
 8014a6e:	bf00      	nop

08014a70 <rclc_action_find_first_terminated_handle>:
 8014a70:	b140      	cbz	r0, 8014a84 <rclc_action_find_first_terminated_handle+0x14>
 8014a72:	68c0      	ldr	r0, [r0, #12]
 8014a74:	b910      	cbnz	r0, 8014a7c <rclc_action_find_first_terminated_handle+0xc>
 8014a76:	e005      	b.n	8014a84 <rclc_action_find_first_terminated_handle+0x14>
 8014a78:	6800      	ldr	r0, [r0, #0]
 8014a7a:	b118      	cbz	r0, 8014a84 <rclc_action_find_first_terminated_handle+0x14>
 8014a7c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014a80:	2b03      	cmp	r3, #3
 8014a82:	ddf9      	ble.n	8014a78 <rclc_action_find_first_terminated_handle+0x8>
 8014a84:	4770      	bx	lr
 8014a86:	bf00      	nop

08014a88 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014a88:	b170      	cbz	r0, 8014aa8 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014a8a:	68c0      	ldr	r0, [r0, #12]
 8014a8c:	b160      	cbz	r0, 8014aa8 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014a8e:	b410      	push	{r4}
 8014a90:	e001      	b.n	8014a96 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014a92:	6800      	ldr	r0, [r0, #0]
 8014a94:	b128      	cbz	r0, 8014aa2 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014a96:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014a9a:	4299      	cmp	r1, r3
 8014a9c:	bf08      	it	eq
 8014a9e:	4294      	cmpeq	r4, r2
 8014aa0:	d1f7      	bne.n	8014a92 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014aa6:	4770      	bx	lr
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop

08014aac <rclc_action_find_handle_by_result_request_sequence_number>:
 8014aac:	b170      	cbz	r0, 8014acc <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014aae:	68c0      	ldr	r0, [r0, #12]
 8014ab0:	b160      	cbz	r0, 8014acc <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014ab2:	b410      	push	{r4}
 8014ab4:	e001      	b.n	8014aba <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014ab6:	6800      	ldr	r0, [r0, #0]
 8014ab8:	b128      	cbz	r0, 8014ac6 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014aba:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014abe:	4299      	cmp	r1, r3
 8014ac0:	bf08      	it	eq
 8014ac2:	4294      	cmpeq	r4, r2
 8014ac4:	d1f7      	bne.n	8014ab6 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014aca:	4770      	bx	lr
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop

08014ad0 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014ad0:	b170      	cbz	r0, 8014af0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014ad2:	68c0      	ldr	r0, [r0, #12]
 8014ad4:	b160      	cbz	r0, 8014af0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014ad6:	b410      	push	{r4}
 8014ad8:	e001      	b.n	8014ade <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014ada:	6800      	ldr	r0, [r0, #0]
 8014adc:	b128      	cbz	r0, 8014aea <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014ade:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014ae2:	4299      	cmp	r1, r3
 8014ae4:	bf08      	it	eq
 8014ae6:	4294      	cmpeq	r4, r2
 8014ae8:	d1f7      	bne.n	8014ada <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014aee:	4770      	bx	lr
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop

08014af4 <rclc_action_find_first_handle_with_goal_response>:
 8014af4:	b140      	cbz	r0, 8014b08 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014af6:	68c0      	ldr	r0, [r0, #12]
 8014af8:	b910      	cbnz	r0, 8014b00 <rclc_action_find_first_handle_with_goal_response+0xc>
 8014afa:	e005      	b.n	8014b08 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014afc:	6800      	ldr	r0, [r0, #0]
 8014afe:	b118      	cbz	r0, 8014b08 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014b00:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d0f9      	beq.n	8014afc <rclc_action_find_first_handle_with_goal_response+0x8>
 8014b08:	4770      	bx	lr
 8014b0a:	bf00      	nop

08014b0c <rclc_action_find_first_handle_with_result_response>:
 8014b0c:	b140      	cbz	r0, 8014b20 <rclc_action_find_first_handle_with_result_response+0x14>
 8014b0e:	68c0      	ldr	r0, [r0, #12]
 8014b10:	b910      	cbnz	r0, 8014b18 <rclc_action_find_first_handle_with_result_response+0xc>
 8014b12:	e005      	b.n	8014b20 <rclc_action_find_first_handle_with_result_response+0x14>
 8014b14:	6800      	ldr	r0, [r0, #0]
 8014b16:	b118      	cbz	r0, 8014b20 <rclc_action_find_first_handle_with_result_response+0x14>
 8014b18:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d0f9      	beq.n	8014b14 <rclc_action_find_first_handle_with_result_response+0x8>
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop

08014b24 <rclc_action_server_response_goal_request>:
 8014b24:	b198      	cbz	r0, 8014b4e <rclc_action_server_response_goal_request+0x2a>
 8014b26:	2200      	movs	r2, #0
 8014b28:	460b      	mov	r3, r1
 8014b2a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8014b2e:	b510      	push	{r4, lr}
 8014b30:	6844      	ldr	r4, [r0, #4]
 8014b32:	b086      	sub	sp, #24
 8014b34:	f104 0010 	add.w	r0, r4, #16
 8014b38:	9205      	str	r2, [sp, #20]
 8014b3a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8014b3e:	aa03      	add	r2, sp, #12
 8014b40:	f88d 300c 	strb.w	r3, [sp, #12]
 8014b44:	f7ff fd3e 	bl	80145c4 <rcl_action_send_goal_response>
 8014b48:	b918      	cbnz	r0, 8014b52 <rclc_action_server_response_goal_request+0x2e>
 8014b4a:	b006      	add	sp, #24
 8014b4c:	bd10      	pop	{r4, pc}
 8014b4e:	200b      	movs	r0, #11
 8014b50:	4770      	bx	lr
 8014b52:	9001      	str	r0, [sp, #4]
 8014b54:	f7fc fab8 	bl	80110c8 <rcutils_reset_error>
 8014b58:	9801      	ldr	r0, [sp, #4]
 8014b5a:	b006      	add	sp, #24
 8014b5c:	bd10      	pop	{r4, pc}
 8014b5e:	bf00      	nop

08014b60 <rclc_action_server_goal_cancel_accept>:
 8014b60:	b310      	cbz	r0, 8014ba8 <rclc_action_server_goal_cancel_accept+0x48>
 8014b62:	b510      	push	{r4, lr}
 8014b64:	b090      	sub	sp, #64	@ 0x40
 8014b66:	4604      	mov	r4, r0
 8014b68:	a806      	add	r0, sp, #24
 8014b6a:	f7ff ff01 	bl	8014970 <rcl_action_get_zero_initialized_cancel_response>
 8014b6e:	2300      	movs	r3, #0
 8014b70:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8014b74:	46ec      	mov	ip, sp
 8014b76:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014b7a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014b7e:	f88d 3018 	strb.w	r3, [sp, #24]
 8014b82:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014b86:	f8cd d01c 	str.w	sp, [sp, #28]
 8014b8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b8e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014bb0 <rclc_action_server_goal_cancel_accept+0x50>
 8014b92:	6860      	ldr	r0, [r4, #4]
 8014b94:	aa06      	add	r2, sp, #24
 8014b96:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014b9a:	3010      	adds	r0, #16
 8014b9c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014ba0:	f7ff fdc8 	bl	8014734 <rcl_action_send_cancel_response>
 8014ba4:	b010      	add	sp, #64	@ 0x40
 8014ba6:	bd10      	pop	{r4, pc}
 8014ba8:	200b      	movs	r0, #11
 8014baa:	4770      	bx	lr
 8014bac:	f3af 8000 	nop.w
 8014bb0:	00000001 	.word	0x00000001
 8014bb4:	00000001 	.word	0x00000001

08014bb8 <rclc_action_server_goal_cancel_reject>:
 8014bb8:	b082      	sub	sp, #8
 8014bba:	b530      	push	{r4, r5, lr}
 8014bbc:	b08b      	sub	sp, #44	@ 0x2c
 8014bbe:	ac0e      	add	r4, sp, #56	@ 0x38
 8014bc0:	e884 000c 	stmia.w	r4, {r2, r3}
 8014bc4:	b188      	cbz	r0, 8014bea <rclc_action_server_goal_cancel_reject+0x32>
 8014bc6:	4604      	mov	r4, r0
 8014bc8:	a801      	add	r0, sp, #4
 8014bca:	460d      	mov	r5, r1
 8014bcc:	f7ff fed0 	bl	8014970 <rcl_action_get_zero_initialized_cancel_response>
 8014bd0:	aa01      	add	r2, sp, #4
 8014bd2:	a90e      	add	r1, sp, #56	@ 0x38
 8014bd4:	f104 0010 	add.w	r0, r4, #16
 8014bd8:	f88d 5004 	strb.w	r5, [sp, #4]
 8014bdc:	f7ff fdaa 	bl	8014734 <rcl_action_send_cancel_response>
 8014be0:	b00b      	add	sp, #44	@ 0x2c
 8014be2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014be6:	b002      	add	sp, #8
 8014be8:	4770      	bx	lr
 8014bea:	200b      	movs	r0, #11
 8014bec:	b00b      	add	sp, #44	@ 0x2c
 8014bee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bf2:	b002      	add	sp, #8
 8014bf4:	4770      	bx	lr
 8014bf6:	bf00      	nop

08014bf8 <__atomic_load_8>:
 8014bf8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014bfc:	4a16      	ldr	r2, [pc, #88]	@ (8014c58 <__atomic_load_8+0x60>)
 8014bfe:	4b17      	ldr	r3, [pc, #92]	@ (8014c5c <__atomic_load_8+0x64>)
 8014c00:	f04f 0c01 	mov.w	ip, #1
 8014c04:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014c08:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014c0c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014c10:	fb02 f101 	mul.w	r1, r2, r1
 8014c14:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014c18:	fba3 2301 	umull	r2, r3, r3, r1
 8014c1c:	091b      	lsrs	r3, r3, #4
 8014c1e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014c22:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014c26:	b4d0      	push	{r4, r6, r7}
 8014c28:	1ac9      	subs	r1, r1, r3
 8014c2a:	4c0d      	ldr	r4, [pc, #52]	@ (8014c60 <__atomic_load_8+0x68>)
 8014c2c:	1862      	adds	r2, r4, r1
 8014c2e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014c32:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014c36:	2e00      	cmp	r6, #0
 8014c38:	d1f9      	bne.n	8014c2e <__atomic_load_8+0x36>
 8014c3a:	b2db      	uxtb	r3, r3
 8014c3c:	f3bf 8f5b 	dmb	ish
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d1f4      	bne.n	8014c2e <__atomic_load_8+0x36>
 8014c44:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014c48:	f3bf 8f5b 	dmb	ish
 8014c4c:	5463      	strb	r3, [r4, r1]
 8014c4e:	4630      	mov	r0, r6
 8014c50:	4639      	mov	r1, r7
 8014c52:	bcd0      	pop	{r4, r6, r7}
 8014c54:	4770      	bx	lr
 8014c56:	bf00      	nop
 8014c58:	27d4eb2d 	.word	0x27d4eb2d
 8014c5c:	b21642c9 	.word	0xb21642c9
 8014c60:	24064810 	.word	0x24064810

08014c64 <__atomic_store_8>:
 8014c64:	b570      	push	{r4, r5, r6, lr}
 8014c66:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8014c6a:	4916      	ldr	r1, [pc, #88]	@ (8014cc4 <__atomic_store_8+0x60>)
 8014c6c:	4c16      	ldr	r4, [pc, #88]	@ (8014cc8 <__atomic_store_8+0x64>)
 8014c6e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8014c72:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8014c76:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8014c7a:	fb01 fe0e 	mul.w	lr, r1, lr
 8014c7e:	4913      	ldr	r1, [pc, #76]	@ (8014ccc <__atomic_store_8+0x68>)
 8014c80:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8014c84:	fba1 510e 	umull	r5, r1, r1, lr
 8014c88:	f04f 0501 	mov.w	r5, #1
 8014c8c:	0909      	lsrs	r1, r1, #4
 8014c8e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8014c92:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8014c96:	ebae 0e01 	sub.w	lr, lr, r1
 8014c9a:	eb04 0c0e 	add.w	ip, r4, lr
 8014c9e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014ca2:	e8cc 5f46 	strexb	r6, r5, [ip]
 8014ca6:	2e00      	cmp	r6, #0
 8014ca8:	d1f9      	bne.n	8014c9e <__atomic_store_8+0x3a>
 8014caa:	b2c9      	uxtb	r1, r1
 8014cac:	f3bf 8f5b 	dmb	ish
 8014cb0:	2900      	cmp	r1, #0
 8014cb2:	d1f4      	bne.n	8014c9e <__atomic_store_8+0x3a>
 8014cb4:	e9c0 2300 	strd	r2, r3, [r0]
 8014cb8:	f3bf 8f5b 	dmb	ish
 8014cbc:	f804 100e 	strb.w	r1, [r4, lr]
 8014cc0:	bd70      	pop	{r4, r5, r6, pc}
 8014cc2:	bf00      	nop
 8014cc4:	27d4eb2d 	.word	0x27d4eb2d
 8014cc8:	24064810 	.word	0x24064810
 8014ccc:	b21642c9 	.word	0xb21642c9

08014cd0 <__atomic_exchange_8>:
 8014cd0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014cd4:	4917      	ldr	r1, [pc, #92]	@ (8014d34 <__atomic_exchange_8+0x64>)
 8014cd6:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014cda:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014cde:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014ce2:	fb01 fc0c 	mul.w	ip, r1, ip
 8014ce6:	4914      	ldr	r1, [pc, #80]	@ (8014d38 <__atomic_exchange_8+0x68>)
 8014ce8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014cec:	b570      	push	{r4, r5, r6, lr}
 8014cee:	4686      	mov	lr, r0
 8014cf0:	fba1 010c 	umull	r0, r1, r1, ip
 8014cf4:	4d11      	ldr	r5, [pc, #68]	@ (8014d3c <__atomic_exchange_8+0x6c>)
 8014cf6:	f04f 0001 	mov.w	r0, #1
 8014cfa:	0909      	lsrs	r1, r1, #4
 8014cfc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8014d00:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8014d04:	ebac 0c01 	sub.w	ip, ip, r1
 8014d08:	eb05 010c 	add.w	r1, r5, ip
 8014d0c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014d10:	e8c1 0f46 	strexb	r6, r0, [r1]
 8014d14:	2e00      	cmp	r6, #0
 8014d16:	d1f9      	bne.n	8014d0c <__atomic_exchange_8+0x3c>
 8014d18:	b2e4      	uxtb	r4, r4
 8014d1a:	f3bf 8f5b 	dmb	ish
 8014d1e:	2c00      	cmp	r4, #0
 8014d20:	d1f4      	bne.n	8014d0c <__atomic_exchange_8+0x3c>
 8014d22:	e9de 0100 	ldrd	r0, r1, [lr]
 8014d26:	e9ce 2300 	strd	r2, r3, [lr]
 8014d2a:	f3bf 8f5b 	dmb	ish
 8014d2e:	f805 400c 	strb.w	r4, [r5, ip]
 8014d32:	bd70      	pop	{r4, r5, r6, pc}
 8014d34:	27d4eb2d 	.word	0x27d4eb2d
 8014d38:	b21642c9 	.word	0xb21642c9
 8014d3c:	24064810 	.word	0x24064810

08014d40 <rcutils_get_env>:
 8014d40:	b168      	cbz	r0, 8014d5e <rcutils_get_env+0x1e>
 8014d42:	b510      	push	{r4, lr}
 8014d44:	460c      	mov	r4, r1
 8014d46:	b129      	cbz	r1, 8014d54 <rcutils_get_env+0x14>
 8014d48:	f007 fe32 	bl	801c9b0 <getenv>
 8014d4c:	b120      	cbz	r0, 8014d58 <rcutils_get_env+0x18>
 8014d4e:	6020      	str	r0, [r4, #0]
 8014d50:	2000      	movs	r0, #0
 8014d52:	bd10      	pop	{r4, pc}
 8014d54:	4803      	ldr	r0, [pc, #12]	@ (8014d64 <rcutils_get_env+0x24>)
 8014d56:	bd10      	pop	{r4, pc}
 8014d58:	4b03      	ldr	r3, [pc, #12]	@ (8014d68 <rcutils_get_env+0x28>)
 8014d5a:	6023      	str	r3, [r4, #0]
 8014d5c:	bd10      	pop	{r4, pc}
 8014d5e:	4803      	ldr	r0, [pc, #12]	@ (8014d6c <rcutils_get_env+0x2c>)
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop
 8014d64:	080201a0 	.word	0x080201a0
 8014d68:	08020860 	.word	0x08020860
 8014d6c:	08020184 	.word	0x08020184

08014d70 <rcutils_is_directory>:
 8014d70:	2000      	movs	r0, #0
 8014d72:	4770      	bx	lr

08014d74 <rcutils_join_path>:
 8014d74:	b082      	sub	sp, #8
 8014d76:	2000      	movs	r0, #0
 8014d78:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014d7c:	b002      	add	sp, #8
 8014d7e:	4770      	bx	lr

08014d80 <rcutils_to_native_path>:
 8014d80:	b084      	sub	sp, #16
 8014d82:	2000      	movs	r0, #0
 8014d84:	f10d 0c04 	add.w	ip, sp, #4
 8014d88:	b004      	add	sp, #16
 8014d8a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8014d8e:	4770      	bx	lr

08014d90 <rcutils_format_string_limit>:
 8014d90:	b40f      	push	{r0, r1, r2, r3}
 8014d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d94:	b083      	sub	sp, #12
 8014d96:	ac08      	add	r4, sp, #32
 8014d98:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014d9e:	b326      	cbz	r6, 8014dea <rcutils_format_string_limit+0x5a>
 8014da0:	a808      	add	r0, sp, #32
 8014da2:	f7fc f96d 	bl	8011080 <rcutils_allocator_is_valid>
 8014da6:	b300      	cbz	r0, 8014dea <rcutils_format_string_limit+0x5a>
 8014da8:	2100      	movs	r1, #0
 8014daa:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014dac:	4632      	mov	r2, r6
 8014dae:	4608      	mov	r0, r1
 8014db0:	e9cd 3300 	strd	r3, r3, [sp]
 8014db4:	f000 f906 	bl	8014fc4 <rcutils_vsnprintf>
 8014db8:	1c43      	adds	r3, r0, #1
 8014dba:	4605      	mov	r5, r0
 8014dbc:	d015      	beq.n	8014dea <rcutils_format_string_limit+0x5a>
 8014dbe:	1c47      	adds	r7, r0, #1
 8014dc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014dc2:	429f      	cmp	r7, r3
 8014dc4:	d901      	bls.n	8014dca <rcutils_format_string_limit+0x3a>
 8014dc6:	1e5d      	subs	r5, r3, #1
 8014dc8:	461f      	mov	r7, r3
 8014dca:	9b08      	ldr	r3, [sp, #32]
 8014dcc:	4638      	mov	r0, r7
 8014dce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014dd0:	4798      	blx	r3
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	b148      	cbz	r0, 8014dea <rcutils_format_string_limit+0x5a>
 8014dd6:	4632      	mov	r2, r6
 8014dd8:	4639      	mov	r1, r7
 8014dda:	9b01      	ldr	r3, [sp, #4]
 8014ddc:	f000 f8f2 	bl	8014fc4 <rcutils_vsnprintf>
 8014de0:	2800      	cmp	r0, #0
 8014de2:	db09      	blt.n	8014df8 <rcutils_format_string_limit+0x68>
 8014de4:	2300      	movs	r3, #0
 8014de6:	5563      	strb	r3, [r4, r5]
 8014de8:	e000      	b.n	8014dec <rcutils_format_string_limit+0x5c>
 8014dea:	2400      	movs	r4, #0
 8014dec:	4620      	mov	r0, r4
 8014dee:	b003      	add	sp, #12
 8014df0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014df4:	b004      	add	sp, #16
 8014df6:	4770      	bx	lr
 8014df8:	4620      	mov	r0, r4
 8014dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014dfc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014dfe:	2400      	movs	r4, #0
 8014e00:	4798      	blx	r3
 8014e02:	e7f3      	b.n	8014dec <rcutils_format_string_limit+0x5c>

08014e04 <rcutils_repl_str>:
 8014e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e08:	ed2d 8b02 	vpush	{d8}
 8014e0c:	b087      	sub	sp, #28
 8014e0e:	2600      	movs	r6, #0
 8014e10:	4680      	mov	r8, r0
 8014e12:	468a      	mov	sl, r1
 8014e14:	9000      	str	r0, [sp, #0]
 8014e16:	4608      	mov	r0, r1
 8014e18:	ee08 2a10 	vmov	s16, r2
 8014e1c:	4699      	mov	r9, r3
 8014e1e:	2510      	movs	r5, #16
 8014e20:	f7eb fa68 	bl	80002f4 <strlen>
 8014e24:	4637      	mov	r7, r6
 8014e26:	46b3      	mov	fp, r6
 8014e28:	9001      	str	r0, [sp, #4]
 8014e2a:	e01e      	b.n	8014e6a <rcutils_repl_str+0x66>
 8014e2c:	f10b 0b01 	add.w	fp, fp, #1
 8014e30:	9b01      	ldr	r3, [sp, #4]
 8014e32:	455e      	cmp	r6, fp
 8014e34:	eb04 0803 	add.w	r8, r4, r3
 8014e38:	d211      	bcs.n	8014e5e <rcutils_repl_str+0x5a>
 8014e3a:	442e      	add	r6, r5
 8014e3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014e40:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e48:	00b1      	lsls	r1, r6, #2
 8014e4a:	4798      	blx	r3
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	f000 8088 	beq.w	8014f62 <rcutils_repl_str+0x15e>
 8014e52:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014e56:	4607      	mov	r7, r0
 8014e58:	bf28      	it	cs
 8014e5a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014e5e:	9a00      	ldr	r2, [sp, #0]
 8014e60:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8014e64:	1aa4      	subs	r4, r4, r2
 8014e66:	f843 4c04 	str.w	r4, [r3, #-4]
 8014e6a:	4651      	mov	r1, sl
 8014e6c:	4640      	mov	r0, r8
 8014e6e:	f008 fa70 	bl	801d352 <strstr>
 8014e72:	4604      	mov	r4, r0
 8014e74:	4638      	mov	r0, r7
 8014e76:	2c00      	cmp	r4, #0
 8014e78:	d1d8      	bne.n	8014e2c <rcutils_repl_str+0x28>
 8014e7a:	4640      	mov	r0, r8
 8014e7c:	f7eb fa3a 	bl	80002f4 <strlen>
 8014e80:	9b00      	ldr	r3, [sp, #0]
 8014e82:	eba8 0803 	sub.w	r8, r8, r3
 8014e86:	eb08 0400 	add.w	r4, r8, r0
 8014e8a:	9402      	str	r4, [sp, #8]
 8014e8c:	f1bb 0f00 	cmp.w	fp, #0
 8014e90:	d045      	beq.n	8014f1e <rcutils_repl_str+0x11a>
 8014e92:	ee18 0a10 	vmov	r0, s16
 8014e96:	f7eb fa2d 	bl	80002f4 <strlen>
 8014e9a:	9a01      	ldr	r2, [sp, #4]
 8014e9c:	4606      	mov	r6, r0
 8014e9e:	f8d9 3000 	ldr.w	r3, [r9]
 8014ea2:	1a82      	subs	r2, r0, r2
 8014ea4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014ea8:	fb0b 4202 	mla	r2, fp, r2, r4
 8014eac:	1c50      	adds	r0, r2, #1
 8014eae:	9205      	str	r2, [sp, #20]
 8014eb0:	4798      	blx	r3
 8014eb2:	4682      	mov	sl, r0
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d054      	beq.n	8014f62 <rcutils_repl_str+0x15e>
 8014eb8:	683a      	ldr	r2, [r7, #0]
 8014eba:	463d      	mov	r5, r7
 8014ebc:	9900      	ldr	r1, [sp, #0]
 8014ebe:	2401      	movs	r4, #1
 8014ec0:	f008 fb3f 	bl	801d542 <memcpy>
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8014eca:	eb0a 0803 	add.w	r8, sl, r3
 8014ece:	ee18 7a10 	vmov	r7, s16
 8014ed2:	f8dd a000 	ldr.w	sl, [sp]
 8014ed6:	f8cd 9000 	str.w	r9, [sp]
 8014eda:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014ede:	4632      	mov	r2, r6
 8014ee0:	4639      	mov	r1, r7
 8014ee2:	4640      	mov	r0, r8
 8014ee4:	44b0      	add	r8, r6
 8014ee6:	f008 fb2c 	bl	801d542 <memcpy>
 8014eea:	f855 2b04 	ldr.w	r2, [r5], #4
 8014eee:	45a3      	cmp	fp, r4
 8014ef0:	444a      	add	r2, r9
 8014ef2:	eb0a 0102 	add.w	r1, sl, r2
 8014ef6:	d02a      	beq.n	8014f4e <rcutils_repl_str+0x14a>
 8014ef8:	6828      	ldr	r0, [r5, #0]
 8014efa:	1a82      	subs	r2, r0, r2
 8014efc:	4640      	mov	r0, r8
 8014efe:	4490      	add	r8, r2
 8014f00:	f008 fb1f 	bl	801d542 <memcpy>
 8014f04:	1c62      	adds	r2, r4, #1
 8014f06:	45a3      	cmp	fp, r4
 8014f08:	4614      	mov	r4, r2
 8014f0a:	d8e8      	bhi.n	8014ede <rcutils_repl_str+0xda>
 8014f0c:	f8dd 9000 	ldr.w	r9, [sp]
 8014f10:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8014f14:	2300      	movs	r3, #0
 8014f16:	9a05      	ldr	r2, [sp, #20]
 8014f18:	f80a 3002 	strb.w	r3, [sl, r2]
 8014f1c:	e00b      	b.n	8014f36 <rcutils_repl_str+0x132>
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f8d9 3000 	ldr.w	r3, [r9]
 8014f24:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f28:	3001      	adds	r0, #1
 8014f2a:	4798      	blx	r3
 8014f2c:	4682      	mov	sl, r0
 8014f2e:	b110      	cbz	r0, 8014f36 <rcutils_repl_str+0x132>
 8014f30:	9900      	ldr	r1, [sp, #0]
 8014f32:	f008 fafe 	bl	801d532 <strcpy>
 8014f36:	4638      	mov	r0, r7
 8014f38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014f3c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f40:	4798      	blx	r3
 8014f42:	4650      	mov	r0, sl
 8014f44:	b007      	add	sp, #28
 8014f46:	ecbd 8b02 	vpop	{d8}
 8014f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f4e:	9b02      	ldr	r3, [sp, #8]
 8014f50:	4640      	mov	r0, r8
 8014f52:	f8dd 9000 	ldr.w	r9, [sp]
 8014f56:	1a9a      	subs	r2, r3, r2
 8014f58:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8014f5c:	f008 faf1 	bl	801d542 <memcpy>
 8014f60:	e7d8      	b.n	8014f14 <rcutils_repl_str+0x110>
 8014f62:	f04f 0a00 	mov.w	sl, #0
 8014f66:	e7e6      	b.n	8014f36 <rcutils_repl_str+0x132>

08014f68 <rcutils_snprintf>:
 8014f68:	b40c      	push	{r2, r3}
 8014f6a:	b530      	push	{r4, r5, lr}
 8014f6c:	b083      	sub	sp, #12
 8014f6e:	ab06      	add	r3, sp, #24
 8014f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f74:	9301      	str	r3, [sp, #4]
 8014f76:	b1e2      	cbz	r2, 8014fb2 <rcutils_snprintf+0x4a>
 8014f78:	fab0 f480 	clz	r4, r0
 8014f7c:	fab1 f581 	clz	r5, r1
 8014f80:	ea50 0c01 	orrs.w	ip, r0, r1
 8014f84:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014f88:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8014f8c:	d008      	beq.n	8014fa0 <rcutils_snprintf+0x38>
 8014f8e:	b984      	cbnz	r4, 8014fb2 <rcutils_snprintf+0x4a>
 8014f90:	b97d      	cbnz	r5, 8014fb2 <rcutils_snprintf+0x4a>
 8014f92:	f008 f8eb 	bl	801d16c <vsniprintf>
 8014f96:	b003      	add	sp, #12
 8014f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f9c:	b002      	add	sp, #8
 8014f9e:	4770      	bx	lr
 8014fa0:	4661      	mov	r1, ip
 8014fa2:	4660      	mov	r0, ip
 8014fa4:	f008 f8e2 	bl	801d16c <vsniprintf>
 8014fa8:	b003      	add	sp, #12
 8014faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014fae:	b002      	add	sp, #8
 8014fb0:	4770      	bx	lr
 8014fb2:	f008 fa91 	bl	801d4d8 <__errno>
 8014fb6:	2216      	movs	r2, #22
 8014fb8:	4603      	mov	r3, r0
 8014fba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fbe:	601a      	str	r2, [r3, #0]
 8014fc0:	e7e9      	b.n	8014f96 <rcutils_snprintf+0x2e>
 8014fc2:	bf00      	nop

08014fc4 <rcutils_vsnprintf>:
 8014fc4:	b570      	push	{r4, r5, r6, lr}
 8014fc6:	b1b2      	cbz	r2, 8014ff6 <rcutils_vsnprintf+0x32>
 8014fc8:	fab0 f480 	clz	r4, r0
 8014fcc:	fab1 f581 	clz	r5, r1
 8014fd0:	ea50 0c01 	orrs.w	ip, r0, r1
 8014fd4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8014fd8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8014fdc:	d005      	beq.n	8014fea <rcutils_vsnprintf+0x26>
 8014fde:	b954      	cbnz	r4, 8014ff6 <rcutils_vsnprintf+0x32>
 8014fe0:	b94d      	cbnz	r5, 8014ff6 <rcutils_vsnprintf+0x32>
 8014fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fe6:	f008 b8c1 	b.w	801d16c <vsniprintf>
 8014fea:	4661      	mov	r1, ip
 8014fec:	4660      	mov	r0, ip
 8014fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ff2:	f008 b8bb 	b.w	801d16c <vsniprintf>
 8014ff6:	f008 fa6f 	bl	801d4d8 <__errno>
 8014ffa:	2316      	movs	r3, #22
 8014ffc:	6003      	str	r3, [r0, #0]
 8014ffe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015002:	bd70      	pop	{r4, r5, r6, pc}

08015004 <rcutils_strdup>:
 8015004:	b084      	sub	sp, #16
 8015006:	b570      	push	{r4, r5, r6, lr}
 8015008:	b082      	sub	sp, #8
 801500a:	4605      	mov	r5, r0
 801500c:	ac07      	add	r4, sp, #28
 801500e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015012:	b1b0      	cbz	r0, 8015042 <rcutils_strdup+0x3e>
 8015014:	f7eb f96e 	bl	80002f4 <strlen>
 8015018:	1c42      	adds	r2, r0, #1
 801501a:	9b07      	ldr	r3, [sp, #28]
 801501c:	4606      	mov	r6, r0
 801501e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015020:	4610      	mov	r0, r2
 8015022:	9201      	str	r2, [sp, #4]
 8015024:	4798      	blx	r3
 8015026:	4604      	mov	r4, r0
 8015028:	b128      	cbz	r0, 8015036 <rcutils_strdup+0x32>
 801502a:	9a01      	ldr	r2, [sp, #4]
 801502c:	4629      	mov	r1, r5
 801502e:	f008 fa88 	bl	801d542 <memcpy>
 8015032:	2300      	movs	r3, #0
 8015034:	55a3      	strb	r3, [r4, r6]
 8015036:	4620      	mov	r0, r4
 8015038:	b002      	add	sp, #8
 801503a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801503e:	b004      	add	sp, #16
 8015040:	4770      	bx	lr
 8015042:	4604      	mov	r4, r0
 8015044:	e7f7      	b.n	8015036 <rcutils_strdup+0x32>
 8015046:	bf00      	nop

08015048 <rcutils_strndup>:
 8015048:	b082      	sub	sp, #8
 801504a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801504c:	ac06      	add	r4, sp, #24
 801504e:	4605      	mov	r5, r0
 8015050:	e884 000c 	stmia.w	r4, {r2, r3}
 8015054:	b188      	cbz	r0, 801507a <rcutils_strndup+0x32>
 8015056:	1c4f      	adds	r7, r1, #1
 8015058:	460e      	mov	r6, r1
 801505a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801505c:	4638      	mov	r0, r7
 801505e:	4790      	blx	r2
 8015060:	4604      	mov	r4, r0
 8015062:	b128      	cbz	r0, 8015070 <rcutils_strndup+0x28>
 8015064:	463a      	mov	r2, r7
 8015066:	4629      	mov	r1, r5
 8015068:	f008 fa6b 	bl	801d542 <memcpy>
 801506c:	2300      	movs	r3, #0
 801506e:	55a3      	strb	r3, [r4, r6]
 8015070:	4620      	mov	r0, r4
 8015072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015076:	b002      	add	sp, #8
 8015078:	4770      	bx	lr
 801507a:	4604      	mov	r4, r0
 801507c:	e7f8      	b.n	8015070 <rcutils_strndup+0x28>
 801507e:	bf00      	nop

08015080 <rcutils_get_zero_initialized_string_map>:
 8015080:	2000      	movs	r0, #0
 8015082:	4b01      	ldr	r3, [pc, #4]	@ (8015088 <rcutils_get_zero_initialized_string_map+0x8>)
 8015084:	6018      	str	r0, [r3, #0]
 8015086:	4770      	bx	lr
 8015088:	24064828 	.word	0x24064828

0801508c <rcutils_string_map_reserve>:
 801508c:	2800      	cmp	r0, #0
 801508e:	d05e      	beq.n	801514e <rcutils_string_map_reserve+0xc2>
 8015090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015094:	460c      	mov	r4, r1
 8015096:	6801      	ldr	r1, [r0, #0]
 8015098:	b082      	sub	sp, #8
 801509a:	4605      	mov	r5, r0
 801509c:	b129      	cbz	r1, 80150aa <rcutils_string_map_reserve+0x1e>
 801509e:	68cb      	ldr	r3, [r1, #12]
 80150a0:	42a3      	cmp	r3, r4
 80150a2:	d906      	bls.n	80150b2 <rcutils_string_map_reserve+0x26>
 80150a4:	461c      	mov	r4, r3
 80150a6:	2900      	cmp	r1, #0
 80150a8:	d1f9      	bne.n	801509e <rcutils_string_map_reserve+0x12>
 80150aa:	201f      	movs	r0, #31
 80150ac:	b002      	add	sp, #8
 80150ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150b2:	688b      	ldr	r3, [r1, #8]
 80150b4:	42a3      	cmp	r3, r4
 80150b6:	d046      	beq.n	8015146 <rcutils_string_map_reserve+0xba>
 80150b8:	6a0e      	ldr	r6, [r1, #32]
 80150ba:	2c00      	cmp	r4, #0
 80150bc:	d033      	beq.n	8015126 <rcutils_string_map_reserve+0x9a>
 80150be:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80150c2:	d242      	bcs.n	801514a <rcutils_string_map_reserve+0xbe>
 80150c4:	00a7      	lsls	r7, r4, #2
 80150c6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80150ca:	6808      	ldr	r0, [r1, #0]
 80150cc:	4632      	mov	r2, r6
 80150ce:	4639      	mov	r1, r7
 80150d0:	47c0      	blx	r8
 80150d2:	2800      	cmp	r0, #0
 80150d4:	d039      	beq.n	801514a <rcutils_string_map_reserve+0xbe>
 80150d6:	682b      	ldr	r3, [r5, #0]
 80150d8:	4632      	mov	r2, r6
 80150da:	4639      	mov	r1, r7
 80150dc:	6018      	str	r0, [r3, #0]
 80150de:	6858      	ldr	r0, [r3, #4]
 80150e0:	47c0      	blx	r8
 80150e2:	2800      	cmp	r0, #0
 80150e4:	d031      	beq.n	801514a <rcutils_string_map_reserve+0xbe>
 80150e6:	682d      	ldr	r5, [r5, #0]
 80150e8:	68ab      	ldr	r3, [r5, #8]
 80150ea:	6068      	str	r0, [r5, #4]
 80150ec:	42a3      	cmp	r3, r4
 80150ee:	d225      	bcs.n	801513c <rcutils_string_map_reserve+0xb0>
 80150f0:	682a      	ldr	r2, [r5, #0]
 80150f2:	eb00 0c07 	add.w	ip, r0, r7
 80150f6:	0099      	lsls	r1, r3, #2
 80150f8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80150fc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8015100:	45e6      	cmp	lr, ip
 8015102:	d203      	bcs.n	801510c <rcutils_string_map_reserve+0x80>
 8015104:	eb02 0c07 	add.w	ip, r2, r7
 8015108:	4566      	cmp	r6, ip
 801510a:	d322      	bcc.n	8015152 <rcutils_string_map_reserve+0xc6>
 801510c:	1ae3      	subs	r3, r4, r3
 801510e:	4670      	mov	r0, lr
 8015110:	2100      	movs	r1, #0
 8015112:	009a      	lsls	r2, r3, #2
 8015114:	9201      	str	r2, [sp, #4]
 8015116:	f008 f8f5 	bl	801d304 <memset>
 801511a:	9a01      	ldr	r2, [sp, #4]
 801511c:	2100      	movs	r1, #0
 801511e:	4630      	mov	r0, r6
 8015120:	f008 f8f0 	bl	801d304 <memset>
 8015124:	e00a      	b.n	801513c <rcutils_string_map_reserve+0xb0>
 8015126:	694f      	ldr	r7, [r1, #20]
 8015128:	6808      	ldr	r0, [r1, #0]
 801512a:	4631      	mov	r1, r6
 801512c:	47b8      	blx	r7
 801512e:	682b      	ldr	r3, [r5, #0]
 8015130:	4631      	mov	r1, r6
 8015132:	6858      	ldr	r0, [r3, #4]
 8015134:	601c      	str	r4, [r3, #0]
 8015136:	47b8      	blx	r7
 8015138:	682d      	ldr	r5, [r5, #0]
 801513a:	606c      	str	r4, [r5, #4]
 801513c:	2000      	movs	r0, #0
 801513e:	60ac      	str	r4, [r5, #8]
 8015140:	b002      	add	sp, #8
 8015142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015146:	2000      	movs	r0, #0
 8015148:	e7b0      	b.n	80150ac <rcutils_string_map_reserve+0x20>
 801514a:	200a      	movs	r0, #10
 801514c:	e7ae      	b.n	80150ac <rcutils_string_map_reserve+0x20>
 801514e:	200b      	movs	r0, #11
 8015150:	4770      	bx	lr
 8015152:	1f0b      	subs	r3, r1, #4
 8015154:	4418      	add	r0, r3
 8015156:	4413      	add	r3, r2
 8015158:	3a04      	subs	r2, #4
 801515a:	4417      	add	r7, r2
 801515c:	2200      	movs	r2, #0
 801515e:	f843 2f04 	str.w	r2, [r3, #4]!
 8015162:	42bb      	cmp	r3, r7
 8015164:	f840 2f04 	str.w	r2, [r0, #4]!
 8015168:	d1f9      	bne.n	801515e <rcutils_string_map_reserve+0xd2>
 801516a:	e7e7      	b.n	801513c <rcutils_string_map_reserve+0xb0>

0801516c <rcutils_string_map_init>:
 801516c:	b082      	sub	sp, #8
 801516e:	b570      	push	{r4, r5, r6, lr}
 8015170:	ac04      	add	r4, sp, #16
 8015172:	e884 000c 	stmia.w	r4, {r2, r3}
 8015176:	b380      	cbz	r0, 80151da <rcutils_string_map_init+0x6e>
 8015178:	6806      	ldr	r6, [r0, #0]
 801517a:	4604      	mov	r4, r0
 801517c:	b12e      	cbz	r6, 801518a <rcutils_string_map_init+0x1e>
 801517e:	251e      	movs	r5, #30
 8015180:	4628      	mov	r0, r5
 8015182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015186:	b002      	add	sp, #8
 8015188:	4770      	bx	lr
 801518a:	a804      	add	r0, sp, #16
 801518c:	460d      	mov	r5, r1
 801518e:	f7fb ff77 	bl	8011080 <rcutils_allocator_is_valid>
 8015192:	b310      	cbz	r0, 80151da <rcutils_string_map_init+0x6e>
 8015194:	9b04      	ldr	r3, [sp, #16]
 8015196:	2024      	movs	r0, #36	@ 0x24
 8015198:	9908      	ldr	r1, [sp, #32]
 801519a:	4798      	blx	r3
 801519c:	6020      	str	r0, [r4, #0]
 801519e:	b310      	cbz	r0, 80151e6 <rcutils_string_map_init+0x7a>
 80151a0:	f10d 0e10 	add.w	lr, sp, #16
 80151a4:	f100 0c10 	add.w	ip, r0, #16
 80151a8:	e9c0 6600 	strd	r6, r6, [r0]
 80151ac:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80151b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151b8:	f8de 3000 	ldr.w	r3, [lr]
 80151bc:	4629      	mov	r1, r5
 80151be:	4620      	mov	r0, r4
 80151c0:	f8cc 3000 	str.w	r3, [ip]
 80151c4:	f7ff ff62 	bl	801508c <rcutils_string_map_reserve>
 80151c8:	4605      	mov	r5, r0
 80151ca:	2800      	cmp	r0, #0
 80151cc:	d0d8      	beq.n	8015180 <rcutils_string_map_init+0x14>
 80151ce:	9b05      	ldr	r3, [sp, #20]
 80151d0:	9908      	ldr	r1, [sp, #32]
 80151d2:	6820      	ldr	r0, [r4, #0]
 80151d4:	4798      	blx	r3
 80151d6:	6026      	str	r6, [r4, #0]
 80151d8:	e7d2      	b.n	8015180 <rcutils_string_map_init+0x14>
 80151da:	250b      	movs	r5, #11
 80151dc:	4628      	mov	r0, r5
 80151de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151e2:	b002      	add	sp, #8
 80151e4:	4770      	bx	lr
 80151e6:	250a      	movs	r5, #10
 80151e8:	e7ca      	b.n	8015180 <rcutils_string_map_init+0x14>
 80151ea:	bf00      	nop

080151ec <rcutils_string_map_fini>:
 80151ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151f0:	b082      	sub	sp, #8
 80151f2:	2800      	cmp	r0, #0
 80151f4:	d03a      	beq.n	801526c <rcutils_string_map_fini+0x80>
 80151f6:	6804      	ldr	r4, [r0, #0]
 80151f8:	4606      	mov	r6, r0
 80151fa:	2c00      	cmp	r4, #0
 80151fc:	d032      	beq.n	8015264 <rcutils_string_map_fini+0x78>
 80151fe:	68a3      	ldr	r3, [r4, #8]
 8015200:	b32b      	cbz	r3, 801524e <rcutils_string_map_fini+0x62>
 8015202:	2500      	movs	r5, #0
 8015204:	6822      	ldr	r2, [r4, #0]
 8015206:	462f      	mov	r7, r5
 8015208:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801520c:	b1e0      	cbz	r0, 8015248 <rcutils_string_map_fini+0x5c>
 801520e:	6a21      	ldr	r1, [r4, #32]
 8015210:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015214:	9101      	str	r1, [sp, #4]
 8015216:	47c0      	blx	r8
 8015218:	9901      	ldr	r1, [sp, #4]
 801521a:	e9d4 3200 	ldrd	r3, r2, [r4]
 801521e:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8015222:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015226:	47c0      	blx	r8
 8015228:	68e3      	ldr	r3, [r4, #12]
 801522a:	6862      	ldr	r2, [r4, #4]
 801522c:	3b01      	subs	r3, #1
 801522e:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015232:	3501      	adds	r5, #1
 8015234:	60e3      	str	r3, [r4, #12]
 8015236:	6834      	ldr	r4, [r6, #0]
 8015238:	68a3      	ldr	r3, [r4, #8]
 801523a:	429d      	cmp	r5, r3
 801523c:	d207      	bcs.n	801524e <rcutils_string_map_fini+0x62>
 801523e:	6822      	ldr	r2, [r4, #0]
 8015240:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015244:	2800      	cmp	r0, #0
 8015246:	d1e2      	bne.n	801520e <rcutils_string_map_fini+0x22>
 8015248:	3501      	adds	r5, #1
 801524a:	429d      	cmp	r5, r3
 801524c:	d3dc      	bcc.n	8015208 <rcutils_string_map_fini+0x1c>
 801524e:	2100      	movs	r1, #0
 8015250:	4630      	mov	r0, r6
 8015252:	f7ff ff1b 	bl	801508c <rcutils_string_map_reserve>
 8015256:	4604      	mov	r4, r0
 8015258:	b920      	cbnz	r0, 8015264 <rcutils_string_map_fini+0x78>
 801525a:	6830      	ldr	r0, [r6, #0]
 801525c:	6943      	ldr	r3, [r0, #20]
 801525e:	6a01      	ldr	r1, [r0, #32]
 8015260:	4798      	blx	r3
 8015262:	6034      	str	r4, [r6, #0]
 8015264:	4620      	mov	r0, r4
 8015266:	b002      	add	sp, #8
 8015268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801526c:	240b      	movs	r4, #11
 801526e:	4620      	mov	r0, r4
 8015270:	b002      	add	sp, #8
 8015272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015276:	bf00      	nop

08015278 <rcutils_string_map_getn>:
 8015278:	b378      	cbz	r0, 80152da <rcutils_string_map_getn+0x62>
 801527a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801527e:	f8d0 b000 	ldr.w	fp, [r0]
 8015282:	f1bb 0f00 	cmp.w	fp, #0
 8015286:	d01f      	beq.n	80152c8 <rcutils_string_map_getn+0x50>
 8015288:	fab1 f481 	clz	r4, r1
 801528c:	4688      	mov	r8, r1
 801528e:	0964      	lsrs	r4, r4, #5
 8015290:	b1d1      	cbz	r1, 80152c8 <rcutils_string_map_getn+0x50>
 8015292:	f8db 7008 	ldr.w	r7, [fp, #8]
 8015296:	f8db 6000 	ldr.w	r6, [fp]
 801529a:	b1af      	cbz	r7, 80152c8 <rcutils_string_map_getn+0x50>
 801529c:	4691      	mov	r9, r2
 801529e:	3e04      	subs	r6, #4
 80152a0:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80152a4:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80152a8:	3401      	adds	r4, #1
 80152aa:	4628      	mov	r0, r5
 80152ac:	b155      	cbz	r5, 80152c4 <rcutils_string_map_getn+0x4c>
 80152ae:	f7eb f821 	bl	80002f4 <strlen>
 80152b2:	4602      	mov	r2, r0
 80152b4:	4629      	mov	r1, r5
 80152b6:	4640      	mov	r0, r8
 80152b8:	454a      	cmp	r2, r9
 80152ba:	bf38      	it	cc
 80152bc:	464a      	movcc	r2, r9
 80152be:	f008 f836 	bl	801d32e <strncmp>
 80152c2:	b120      	cbz	r0, 80152ce <rcutils_string_map_getn+0x56>
 80152c4:	42a7      	cmp	r7, r4
 80152c6:	d1eb      	bne.n	80152a0 <rcutils_string_map_getn+0x28>
 80152c8:	2000      	movs	r0, #0
 80152ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ce:	f8db 3004 	ldr.w	r3, [fp, #4]
 80152d2:	f853 000a 	ldr.w	r0, [r3, sl]
 80152d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152da:	4770      	bx	lr
 80152dc:	0000      	movs	r0, r0
	...

080152e0 <rmw_get_zero_initialized_context>:
 80152e0:	b510      	push	{r4, lr}
 80152e2:	4604      	mov	r4, r0
 80152e4:	3010      	adds	r0, #16
 80152e6:	f000 f80f 	bl	8015308 <rmw_get_zero_initialized_init_options>
 80152ea:	2300      	movs	r3, #0
 80152ec:	4620      	mov	r0, r4
 80152ee:	60a3      	str	r3, [r4, #8]
 80152f0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80152f2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80152f4:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8015300 <rmw_get_zero_initialized_context+0x20>
 80152f8:	ed84 7b00 	vstr	d7, [r4]
 80152fc:	bd10      	pop	{r4, pc}
 80152fe:	bf00      	nop
	...

08015308 <rmw_get_zero_initialized_init_options>:
 8015308:	b510      	push	{r4, lr}
 801530a:	4604      	mov	r4, r0
 801530c:	2238      	movs	r2, #56	@ 0x38
 801530e:	2100      	movs	r1, #0
 8015310:	f007 fff8 	bl	801d304 <memset>
 8015314:	f104 0010 	add.w	r0, r4, #16
 8015318:	f000 f80a 	bl	8015330 <rmw_get_default_security_options>
 801531c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015320:	4620      	mov	r0, r4
 8015322:	60e3      	str	r3, [r4, #12]
 8015324:	bd10      	pop	{r4, pc}
 8015326:	bf00      	nop

08015328 <rmw_get_default_publisher_options>:
 8015328:	2200      	movs	r2, #0
 801532a:	6002      	str	r2, [r0, #0]
 801532c:	7102      	strb	r2, [r0, #4]
 801532e:	4770      	bx	lr

08015330 <rmw_get_default_security_options>:
 8015330:	2200      	movs	r2, #0
 8015332:	7002      	strb	r2, [r0, #0]
 8015334:	6042      	str	r2, [r0, #4]
 8015336:	4770      	bx	lr

08015338 <rmw_subscription_content_filter_options_fini>:
 8015338:	b1b0      	cbz	r0, 8015368 <rmw_subscription_content_filter_options_fini+0x30>
 801533a:	b538      	push	{r3, r4, r5, lr}
 801533c:	4604      	mov	r4, r0
 801533e:	4608      	mov	r0, r1
 8015340:	460d      	mov	r5, r1
 8015342:	f7fb fe9d 	bl	8011080 <rcutils_allocator_is_valid>
 8015346:	b168      	cbz	r0, 8015364 <rmw_subscription_content_filter_options_fini+0x2c>
 8015348:	6820      	ldr	r0, [r4, #0]
 801534a:	b120      	cbz	r0, 8015356 <rmw_subscription_content_filter_options_fini+0x1e>
 801534c:	686b      	ldr	r3, [r5, #4]
 801534e:	6929      	ldr	r1, [r5, #16]
 8015350:	4798      	blx	r3
 8015352:	2300      	movs	r3, #0
 8015354:	6023      	str	r3, [r4, #0]
 8015356:	1d20      	adds	r0, r4, #4
 8015358:	f006 fac8 	bl	801b8ec <rcutils_string_array_fini>
 801535c:	3800      	subs	r0, #0
 801535e:	bf18      	it	ne
 8015360:	2001      	movne	r0, #1
 8015362:	bd38      	pop	{r3, r4, r5, pc}
 8015364:	200b      	movs	r0, #11
 8015366:	bd38      	pop	{r3, r4, r5, pc}
 8015368:	200b      	movs	r0, #11
 801536a:	4770      	bx	lr

0801536c <rmw_get_default_subscription_options>:
 801536c:	2200      	movs	r2, #0
 801536e:	e9c0 2200 	strd	r2, r2, [r0]
 8015372:	6082      	str	r2, [r0, #8]
 8015374:	4770      	bx	lr
 8015376:	bf00      	nop

08015378 <rmw_get_zero_initialized_message_info>:
 8015378:	b510      	push	{r4, lr}
 801537a:	4604      	mov	r4, r0
 801537c:	2240      	movs	r2, #64	@ 0x40
 801537e:	2100      	movs	r1, #0
 8015380:	f007 ffc0 	bl	801d304 <memset>
 8015384:	4620      	mov	r0, r4
 8015386:	bd10      	pop	{r4, pc}

08015388 <rmw_validate_full_topic_name>:
 8015388:	2800      	cmp	r0, #0
 801538a:	d05d      	beq.n	8015448 <rmw_validate_full_topic_name+0xc0>
 801538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015390:	460d      	mov	r5, r1
 8015392:	2900      	cmp	r1, #0
 8015394:	d05a      	beq.n	801544c <rmw_validate_full_topic_name+0xc4>
 8015396:	4604      	mov	r4, r0
 8015398:	4616      	mov	r6, r2
 801539a:	f7ea ffab 	bl	80002f4 <strlen>
 801539e:	b150      	cbz	r0, 80153b6 <rmw_validate_full_topic_name+0x2e>
 80153a0:	7823      	ldrb	r3, [r4, #0]
 80153a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80153a4:	d00e      	beq.n	80153c4 <rmw_validate_full_topic_name+0x3c>
 80153a6:	2302      	movs	r3, #2
 80153a8:	602b      	str	r3, [r5, #0]
 80153aa:	b146      	cbz	r6, 80153be <rmw_validate_full_topic_name+0x36>
 80153ac:	2300      	movs	r3, #0
 80153ae:	4618      	mov	r0, r3
 80153b0:	6033      	str	r3, [r6, #0]
 80153b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153b6:	2301      	movs	r3, #1
 80153b8:	602b      	str	r3, [r5, #0]
 80153ba:	2e00      	cmp	r6, #0
 80153bc:	d1f6      	bne.n	80153ac <rmw_validate_full_topic_name+0x24>
 80153be:	2000      	movs	r0, #0
 80153c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153c4:	1e43      	subs	r3, r0, #1
 80153c6:	5ce2      	ldrb	r2, [r4, r3]
 80153c8:	2a2f      	cmp	r2, #47	@ 0x2f
 80153ca:	d041      	beq.n	8015450 <rmw_validate_full_topic_name+0xc8>
 80153cc:	1e62      	subs	r2, r4, #1
 80153ce:	f1c4 0e01 	rsb	lr, r4, #1
 80153d2:	eb02 0800 	add.w	r8, r2, r0
 80153d6:	eb0e 0702 	add.w	r7, lr, r2
 80153da:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80153de:	f023 0120 	bic.w	r1, r3, #32
 80153e2:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 80153e6:	3941      	subs	r1, #65	@ 0x41
 80153e8:	2919      	cmp	r1, #25
 80153ea:	d90f      	bls.n	801540c <rmw_validate_full_topic_name+0x84>
 80153ec:	f1bc 0f0a 	cmp.w	ip, #10
 80153f0:	d90c      	bls.n	801540c <rmw_validate_full_topic_name+0x84>
 80153f2:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 80153f6:	fab3 f383 	clz	r3, r3
 80153fa:	095b      	lsrs	r3, r3, #5
 80153fc:	b933      	cbnz	r3, 801540c <rmw_validate_full_topic_name+0x84>
 80153fe:	2204      	movs	r2, #4
 8015400:	602a      	str	r2, [r5, #0]
 8015402:	2e00      	cmp	r6, #0
 8015404:	d0db      	beq.n	80153be <rmw_validate_full_topic_name+0x36>
 8015406:	4618      	mov	r0, r3
 8015408:	6037      	str	r7, [r6, #0]
 801540a:	e7d2      	b.n	80153b2 <rmw_validate_full_topic_name+0x2a>
 801540c:	4542      	cmp	r2, r8
 801540e:	d1e2      	bne.n	80153d6 <rmw_validate_full_topic_name+0x4e>
 8015410:	2301      	movs	r3, #1
 8015412:	4f1a      	ldr	r7, [pc, #104]	@ (801547c <rmw_validate_full_topic_name+0xf4>)
 8015414:	e004      	b.n	8015420 <rmw_validate_full_topic_name+0x98>
 8015416:	4298      	cmp	r0, r3
 8015418:	f104 0401 	add.w	r4, r4, #1
 801541c:	4613      	mov	r3, r2
 801541e:	d91c      	bls.n	801545a <rmw_validate_full_topic_name+0xd2>
 8015420:	4298      	cmp	r0, r3
 8015422:	f103 0201 	add.w	r2, r3, #1
 8015426:	d0f6      	beq.n	8015416 <rmw_validate_full_topic_name+0x8e>
 8015428:	7821      	ldrb	r1, [r4, #0]
 801542a:	292f      	cmp	r1, #47	@ 0x2f
 801542c:	d1f3      	bne.n	8015416 <rmw_validate_full_topic_name+0x8e>
 801542e:	7861      	ldrb	r1, [r4, #1]
 8015430:	292f      	cmp	r1, #47	@ 0x2f
 8015432:	d01e      	beq.n	8015472 <rmw_validate_full_topic_name+0xea>
 8015434:	5dc9      	ldrb	r1, [r1, r7]
 8015436:	0749      	lsls	r1, r1, #29
 8015438:	d5ed      	bpl.n	8015416 <rmw_validate_full_topic_name+0x8e>
 801543a:	2206      	movs	r2, #6
 801543c:	602a      	str	r2, [r5, #0]
 801543e:	2e00      	cmp	r6, #0
 8015440:	d0bd      	beq.n	80153be <rmw_validate_full_topic_name+0x36>
 8015442:	2000      	movs	r0, #0
 8015444:	6033      	str	r3, [r6, #0]
 8015446:	e7b4      	b.n	80153b2 <rmw_validate_full_topic_name+0x2a>
 8015448:	200b      	movs	r0, #11
 801544a:	4770      	bx	lr
 801544c:	200b      	movs	r0, #11
 801544e:	e7b0      	b.n	80153b2 <rmw_validate_full_topic_name+0x2a>
 8015450:	2203      	movs	r2, #3
 8015452:	602a      	str	r2, [r5, #0]
 8015454:	2e00      	cmp	r6, #0
 8015456:	d1f4      	bne.n	8015442 <rmw_validate_full_topic_name+0xba>
 8015458:	e7b1      	b.n	80153be <rmw_validate_full_topic_name+0x36>
 801545a:	28f7      	cmp	r0, #247	@ 0xf7
 801545c:	d803      	bhi.n	8015466 <rmw_validate_full_topic_name+0xde>
 801545e:	2300      	movs	r3, #0
 8015460:	4618      	mov	r0, r3
 8015462:	602b      	str	r3, [r5, #0]
 8015464:	e7a5      	b.n	80153b2 <rmw_validate_full_topic_name+0x2a>
 8015466:	2307      	movs	r3, #7
 8015468:	602b      	str	r3, [r5, #0]
 801546a:	2e00      	cmp	r6, #0
 801546c:	d0a7      	beq.n	80153be <rmw_validate_full_topic_name+0x36>
 801546e:	23f6      	movs	r3, #246	@ 0xf6
 8015470:	e7e7      	b.n	8015442 <rmw_validate_full_topic_name+0xba>
 8015472:	2205      	movs	r2, #5
 8015474:	602a      	str	r2, [r5, #0]
 8015476:	2e00      	cmp	r6, #0
 8015478:	d1e3      	bne.n	8015442 <rmw_validate_full_topic_name+0xba>
 801547a:	e7a0      	b.n	80153be <rmw_validate_full_topic_name+0x36>
 801547c:	08020976 	.word	0x08020976

08015480 <rmw_validate_namespace_with_size>:
 8015480:	2800      	cmp	r0, #0
 8015482:	d043      	beq.n	801550c <rmw_validate_namespace_with_size+0x8c>
 8015484:	b570      	push	{r4, r5, r6, lr}
 8015486:	4614      	mov	r4, r2
 8015488:	b0c2      	sub	sp, #264	@ 0x108
 801548a:	b32a      	cbz	r2, 80154d8 <rmw_validate_namespace_with_size+0x58>
 801548c:	2901      	cmp	r1, #1
 801548e:	460d      	mov	r5, r1
 8015490:	461e      	mov	r6, r3
 8015492:	d102      	bne.n	801549a <rmw_validate_namespace_with_size+0x1a>
 8015494:	7803      	ldrb	r3, [r0, #0]
 8015496:	2b2f      	cmp	r3, #47	@ 0x2f
 8015498:	d012      	beq.n	80154c0 <rmw_validate_namespace_with_size+0x40>
 801549a:	aa01      	add	r2, sp, #4
 801549c:	4669      	mov	r1, sp
 801549e:	f7ff ff73 	bl	8015388 <rmw_validate_full_topic_name>
 80154a2:	b980      	cbnz	r0, 80154c6 <rmw_validate_namespace_with_size+0x46>
 80154a4:	9a00      	ldr	r2, [sp, #0]
 80154a6:	b14a      	cbz	r2, 80154bc <rmw_validate_namespace_with_size+0x3c>
 80154a8:	2a07      	cmp	r2, #7
 80154aa:	d007      	beq.n	80154bc <rmw_validate_namespace_with_size+0x3c>
 80154ac:	1e53      	subs	r3, r2, #1
 80154ae:	2b05      	cmp	r3, #5
 80154b0:	d82e      	bhi.n	8015510 <rmw_validate_namespace_with_size+0x90>
 80154b2:	e8df f003 	tbb	[pc, r3]
 80154b6:	1f1c      	.short	0x1f1c
 80154b8:	14282522 	.word	0x14282522
 80154bc:	2df5      	cmp	r5, #245	@ 0xf5
 80154be:	d804      	bhi.n	80154ca <rmw_validate_namespace_with_size+0x4a>
 80154c0:	2300      	movs	r3, #0
 80154c2:	4618      	mov	r0, r3
 80154c4:	6023      	str	r3, [r4, #0]
 80154c6:	b042      	add	sp, #264	@ 0x108
 80154c8:	bd70      	pop	{r4, r5, r6, pc}
 80154ca:	2307      	movs	r3, #7
 80154cc:	6023      	str	r3, [r4, #0]
 80154ce:	2e00      	cmp	r6, #0
 80154d0:	d0f9      	beq.n	80154c6 <rmw_validate_namespace_with_size+0x46>
 80154d2:	23f4      	movs	r3, #244	@ 0xf4
 80154d4:	6033      	str	r3, [r6, #0]
 80154d6:	e7f6      	b.n	80154c6 <rmw_validate_namespace_with_size+0x46>
 80154d8:	200b      	movs	r0, #11
 80154da:	b042      	add	sp, #264	@ 0x108
 80154dc:	bd70      	pop	{r4, r5, r6, pc}
 80154de:	2306      	movs	r3, #6
 80154e0:	6023      	str	r3, [r4, #0]
 80154e2:	2e00      	cmp	r6, #0
 80154e4:	d0ef      	beq.n	80154c6 <rmw_validate_namespace_with_size+0x46>
 80154e6:	9b01      	ldr	r3, [sp, #4]
 80154e8:	6033      	str	r3, [r6, #0]
 80154ea:	b042      	add	sp, #264	@ 0x108
 80154ec:	bd70      	pop	{r4, r5, r6, pc}
 80154ee:	2301      	movs	r3, #1
 80154f0:	6023      	str	r3, [r4, #0]
 80154f2:	e7f6      	b.n	80154e2 <rmw_validate_namespace_with_size+0x62>
 80154f4:	2302      	movs	r3, #2
 80154f6:	6023      	str	r3, [r4, #0]
 80154f8:	e7f3      	b.n	80154e2 <rmw_validate_namespace_with_size+0x62>
 80154fa:	2303      	movs	r3, #3
 80154fc:	6023      	str	r3, [r4, #0]
 80154fe:	e7f0      	b.n	80154e2 <rmw_validate_namespace_with_size+0x62>
 8015500:	2304      	movs	r3, #4
 8015502:	6023      	str	r3, [r4, #0]
 8015504:	e7ed      	b.n	80154e2 <rmw_validate_namespace_with_size+0x62>
 8015506:	2305      	movs	r3, #5
 8015508:	6023      	str	r3, [r4, #0]
 801550a:	e7ea      	b.n	80154e2 <rmw_validate_namespace_with_size+0x62>
 801550c:	200b      	movs	r0, #11
 801550e:	4770      	bx	lr
 8015510:	4613      	mov	r3, r2
 8015512:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015516:	4a03      	ldr	r2, [pc, #12]	@ (8015524 <rmw_validate_namespace_with_size+0xa4>)
 8015518:	a802      	add	r0, sp, #8
 801551a:	f7ff fd25 	bl	8014f68 <rcutils_snprintf>
 801551e:	2001      	movs	r0, #1
 8015520:	e7d1      	b.n	80154c6 <rmw_validate_namespace_with_size+0x46>
 8015522:	bf00      	nop
 8015524:	080201bc 	.word	0x080201bc

08015528 <rmw_validate_namespace>:
 8015528:	b168      	cbz	r0, 8015546 <rmw_validate_namespace+0x1e>
 801552a:	b570      	push	{r4, r5, r6, lr}
 801552c:	460d      	mov	r5, r1
 801552e:	4616      	mov	r6, r2
 8015530:	4604      	mov	r4, r0
 8015532:	f7ea fedf 	bl	80002f4 <strlen>
 8015536:	4633      	mov	r3, r6
 8015538:	4601      	mov	r1, r0
 801553a:	462a      	mov	r2, r5
 801553c:	4620      	mov	r0, r4
 801553e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015542:	f7ff bf9d 	b.w	8015480 <rmw_validate_namespace_with_size>
 8015546:	200b      	movs	r0, #11
 8015548:	4770      	bx	lr
 801554a:	bf00      	nop

0801554c <rmw_namespace_validation_result_string>:
 801554c:	2807      	cmp	r0, #7
 801554e:	d803      	bhi.n	8015558 <rmw_namespace_validation_result_string+0xc>
 8015550:	4b02      	ldr	r3, [pc, #8]	@ (801555c <rmw_namespace_validation_result_string+0x10>)
 8015552:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015556:	4770      	bx	lr
 8015558:	4801      	ldr	r0, [pc, #4]	@ (8015560 <rmw_namespace_validation_result_string+0x14>)
 801555a:	4770      	bx	lr
 801555c:	080203b4 	.word	0x080203b4
 8015560:	0802020c 	.word	0x0802020c

08015564 <rmw_validate_node_name>:
 8015564:	2800      	cmp	r0, #0
 8015566:	d042      	beq.n	80155ee <rmw_validate_node_name+0x8a>
 8015568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801556c:	460d      	mov	r5, r1
 801556e:	2900      	cmp	r1, #0
 8015570:	d03f      	beq.n	80155f2 <rmw_validate_node_name+0x8e>
 8015572:	4604      	mov	r4, r0
 8015574:	4616      	mov	r6, r2
 8015576:	f7ea febd 	bl	80002f4 <strlen>
 801557a:	b310      	cbz	r0, 80155c2 <rmw_validate_node_name+0x5e>
 801557c:	1e63      	subs	r3, r4, #1
 801557e:	f1c4 0101 	rsb	r1, r4, #1
 8015582:	eb03 0800 	add.w	r8, r3, r0
 8015586:	18cf      	adds	r7, r1, r3
 8015588:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801558c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015590:	f02e 0c20 	bic.w	ip, lr, #32
 8015594:	2a09      	cmp	r2, #9
 8015596:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801559a:	d905      	bls.n	80155a8 <rmw_validate_node_name+0x44>
 801559c:	f1bc 0f19 	cmp.w	ip, #25
 80155a0:	d902      	bls.n	80155a8 <rmw_validate_node_name+0x44>
 80155a2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80155a6:	d114      	bne.n	80155d2 <rmw_validate_node_name+0x6e>
 80155a8:	4598      	cmp	r8, r3
 80155aa:	d1ec      	bne.n	8015586 <rmw_validate_node_name+0x22>
 80155ac:	7822      	ldrb	r2, [r4, #0]
 80155ae:	4b16      	ldr	r3, [pc, #88]	@ (8015608 <rmw_validate_node_name+0xa4>)
 80155b0:	5cd3      	ldrb	r3, [r2, r3]
 80155b2:	f013 0304 	ands.w	r3, r3, #4
 80155b6:	d113      	bne.n	80155e0 <rmw_validate_node_name+0x7c>
 80155b8:	28ff      	cmp	r0, #255	@ 0xff
 80155ba:	d81c      	bhi.n	80155f6 <rmw_validate_node_name+0x92>
 80155bc:	4618      	mov	r0, r3
 80155be:	602b      	str	r3, [r5, #0]
 80155c0:	e00c      	b.n	80155dc <rmw_validate_node_name+0x78>
 80155c2:	2301      	movs	r3, #1
 80155c4:	602b      	str	r3, [r5, #0]
 80155c6:	b17e      	cbz	r6, 80155e8 <rmw_validate_node_name+0x84>
 80155c8:	2300      	movs	r3, #0
 80155ca:	4618      	mov	r0, r3
 80155cc:	6033      	str	r3, [r6, #0]
 80155ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155d2:	2302      	movs	r3, #2
 80155d4:	602b      	str	r3, [r5, #0]
 80155d6:	b13e      	cbz	r6, 80155e8 <rmw_validate_node_name+0x84>
 80155d8:	2000      	movs	r0, #0
 80155da:	6037      	str	r7, [r6, #0]
 80155dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155e0:	2303      	movs	r3, #3
 80155e2:	602b      	str	r3, [r5, #0]
 80155e4:	2e00      	cmp	r6, #0
 80155e6:	d1ef      	bne.n	80155c8 <rmw_validate_node_name+0x64>
 80155e8:	2000      	movs	r0, #0
 80155ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ee:	200b      	movs	r0, #11
 80155f0:	4770      	bx	lr
 80155f2:	200b      	movs	r0, #11
 80155f4:	e7f2      	b.n	80155dc <rmw_validate_node_name+0x78>
 80155f6:	2204      	movs	r2, #4
 80155f8:	602a      	str	r2, [r5, #0]
 80155fa:	2e00      	cmp	r6, #0
 80155fc:	d0f4      	beq.n	80155e8 <rmw_validate_node_name+0x84>
 80155fe:	22fe      	movs	r2, #254	@ 0xfe
 8015600:	4618      	mov	r0, r3
 8015602:	6032      	str	r2, [r6, #0]
 8015604:	e7ea      	b.n	80155dc <rmw_validate_node_name+0x78>
 8015606:	bf00      	nop
 8015608:	08020976 	.word	0x08020976

0801560c <rmw_node_name_validation_result_string>:
 801560c:	2804      	cmp	r0, #4
 801560e:	d803      	bhi.n	8015618 <rmw_node_name_validation_result_string+0xc>
 8015610:	4b02      	ldr	r3, [pc, #8]	@ (801561c <rmw_node_name_validation_result_string+0x10>)
 8015612:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015616:	4770      	bx	lr
 8015618:	4801      	ldr	r0, [pc, #4]	@ (8015620 <rmw_node_name_validation_result_string+0x14>)
 801561a:	4770      	bx	lr
 801561c:	080204c0 	.word	0x080204c0
 8015620:	080203d4 	.word	0x080203d4

08015624 <rmw_destroy_client>:
 8015624:	b570      	push	{r4, r5, r6, lr}
 8015626:	b128      	cbz	r0, 8015634 <rmw_destroy_client+0x10>
 8015628:	4604      	mov	r4, r0
 801562a:	6800      	ldr	r0, [r0, #0]
 801562c:	460d      	mov	r5, r1
 801562e:	f001 feef 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 8015632:	b910      	cbnz	r0, 801563a <rmw_destroy_client+0x16>
 8015634:	2401      	movs	r4, #1
 8015636:	4620      	mov	r0, r4
 8015638:	bd70      	pop	{r4, r5, r6, pc}
 801563a:	6863      	ldr	r3, [r4, #4]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d0f9      	beq.n	8015634 <rmw_destroy_client+0x10>
 8015640:	2d00      	cmp	r5, #0
 8015642:	d0f7      	beq.n	8015634 <rmw_destroy_client+0x10>
 8015644:	6828      	ldr	r0, [r5, #0]
 8015646:	f001 fee3 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 801564a:	2800      	cmp	r0, #0
 801564c:	d0f2      	beq.n	8015634 <rmw_destroy_client+0x10>
 801564e:	686e      	ldr	r6, [r5, #4]
 8015650:	2e00      	cmp	r6, #0
 8015652:	d0ef      	beq.n	8015634 <rmw_destroy_client+0x10>
 8015654:	6864      	ldr	r4, [r4, #4]
 8015656:	6932      	ldr	r2, [r6, #16]
 8015658:	6920      	ldr	r0, [r4, #16]
 801565a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801565e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015662:	6819      	ldr	r1, [r3, #0]
 8015664:	f002 fd70 	bl	8018148 <uxr_buffer_cancel_data>
 8015668:	4602      	mov	r2, r0
 801566a:	6920      	ldr	r0, [r4, #16]
 801566c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015670:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015674:	f001 fdba 	bl	80171ec <run_xrce_session>
 8015678:	6920      	ldr	r0, [r4, #16]
 801567a:	6932      	ldr	r2, [r6, #16]
 801567c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015680:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015684:	6819      	ldr	r1, [r3, #0]
 8015686:	f002 f9fb 	bl	8017a80 <uxr_buffer_delete_entity>
 801568a:	4602      	mov	r2, r0
 801568c:	6920      	ldr	r0, [r4, #16]
 801568e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015692:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015696:	f001 fda9 	bl	80171ec <run_xrce_session>
 801569a:	4603      	mov	r3, r0
 801569c:	4628      	mov	r0, r5
 801569e:	2b00      	cmp	r3, #0
 80156a0:	bf14      	ite	ne
 80156a2:	2400      	movne	r4, #0
 80156a4:	2402      	moveq	r4, #2
 80156a6:	f001 fc7f 	bl	8016fa8 <rmw_uxrce_fini_client_memory>
 80156aa:	e7c4      	b.n	8015636 <rmw_destroy_client+0x12>

080156ac <rmw_get_implementation_identifier>:
 80156ac:	4b01      	ldr	r3, [pc, #4]	@ (80156b4 <rmw_get_implementation_identifier+0x8>)
 80156ae:	6818      	ldr	r0, [r3, #0]
 80156b0:	4770      	bx	lr
 80156b2:	bf00      	nop
 80156b4:	08020810 	.word	0x08020810

080156b8 <rmw_init_options_init>:
 80156b8:	b084      	sub	sp, #16
 80156ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156bc:	b083      	sub	sp, #12
 80156be:	ad09      	add	r5, sp, #36	@ 0x24
 80156c0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80156c4:	b130      	cbz	r0, 80156d4 <rmw_init_options_init+0x1c>
 80156c6:	4604      	mov	r4, r0
 80156c8:	4628      	mov	r0, r5
 80156ca:	f7fb fcd9 	bl	8011080 <rcutils_allocator_is_valid>
 80156ce:	b108      	cbz	r0, 80156d4 <rmw_init_options_init+0x1c>
 80156d0:	68a6      	ldr	r6, [r4, #8]
 80156d2:	b12e      	cbz	r6, 80156e0 <rmw_init_options_init+0x28>
 80156d4:	200b      	movs	r0, #11
 80156d6:	b003      	add	sp, #12
 80156d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156dc:	b004      	add	sp, #16
 80156de:	4770      	bx	lr
 80156e0:	2200      	movs	r2, #0
 80156e2:	2300      	movs	r3, #0
 80156e4:	f104 0c20 	add.w	ip, r4, #32
 80156e8:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8015784 <rmw_init_options_init+0xcc>
 80156ec:	466f      	mov	r7, sp
 80156ee:	e9c4 2300 	strd	r2, r3, [r4]
 80156f2:	4b20      	ldr	r3, [pc, #128]	@ (8015774 <rmw_init_options_init+0xbc>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	60a3      	str	r3, [r4, #8]
 80156f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156fe:	682b      	ldr	r3, [r5, #0]
 8015700:	4638      	mov	r0, r7
 8015702:	f8cc 3000 	str.w	r3, [ip]
 8015706:	f8c4 e01c 	str.w	lr, [r4, #28]
 801570a:	60e6      	str	r6, [r4, #12]
 801570c:	f7ff fe10 	bl	8015330 <rmw_get_default_security_options>
 8015710:	f104 0310 	add.w	r3, r4, #16
 8015714:	2203      	movs	r2, #3
 8015716:	e897 0003 	ldmia.w	r7, {r0, r1}
 801571a:	e883 0003 	stmia.w	r3, {r0, r1}
 801571e:	4816      	ldr	r0, [pc, #88]	@ (8015778 <rmw_init_options_init+0xc0>)
 8015720:	4916      	ldr	r1, [pc, #88]	@ (801577c <rmw_init_options_init+0xc4>)
 8015722:	7626      	strb	r6, [r4, #24]
 8015724:	f001 fb80 	bl	8016e28 <rmw_uxrce_init_init_options_impl_memory>
 8015728:	4813      	ldr	r0, [pc, #76]	@ (8015778 <rmw_init_options_init+0xc0>)
 801572a:	f006 fa79 	bl	801bc20 <get_memory>
 801572e:	b1f0      	cbz	r0, 801576e <rmw_init_options_init+0xb6>
 8015730:	4a13      	ldr	r2, [pc, #76]	@ (8015780 <rmw_init_options_init+0xc8>)
 8015732:	6883      	ldr	r3, [r0, #8]
 8015734:	6851      	ldr	r1, [r2, #4]
 8015736:	6363      	str	r3, [r4, #52]	@ 0x34
 8015738:	7810      	ldrb	r0, [r2, #0]
 801573a:	6159      	str	r1, [r3, #20]
 801573c:	68d1      	ldr	r1, [r2, #12]
 801573e:	7418      	strb	r0, [r3, #16]
 8015740:	61d9      	str	r1, [r3, #28]
 8015742:	6911      	ldr	r1, [r2, #16]
 8015744:	6219      	str	r1, [r3, #32]
 8015746:	6951      	ldr	r1, [r2, #20]
 8015748:	6892      	ldr	r2, [r2, #8]
 801574a:	6259      	str	r1, [r3, #36]	@ 0x24
 801574c:	619a      	str	r2, [r3, #24]
 801574e:	f004 fca5 	bl	801a09c <uxr_nanos>
 8015752:	f007 fa33 	bl	801cbbc <srand>
 8015756:	f007 fa5f 	bl	801cc18 <rand>
 801575a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801575c:	6298      	str	r0, [r3, #40]	@ 0x28
 801575e:	2800      	cmp	r0, #0
 8015760:	d0f9      	beq.n	8015756 <rmw_init_options_init+0x9e>
 8015762:	2000      	movs	r0, #0
 8015764:	b003      	add	sp, #12
 8015766:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801576a:	b004      	add	sp, #16
 801576c:	4770      	bx	lr
 801576e:	2001      	movs	r0, #1
 8015770:	e7b1      	b.n	80156d6 <rmw_init_options_init+0x1e>
 8015772:	bf00      	nop
 8015774:	08020810 	.word	0x08020810
 8015778:	24069264 	.word	0x24069264
 801577c:	24064b00 	.word	0x24064b00
 8015780:	240646a4 	.word	0x240646a4
 8015784:	0801fe98 	.word	0x0801fe98

08015788 <rmw_init_options_copy>:
 8015788:	2800      	cmp	r0, #0
 801578a:	d047      	beq.n	801581c <rmw_init_options_copy+0x94>
 801578c:	b570      	push	{r4, r5, r6, lr}
 801578e:	460d      	mov	r5, r1
 8015790:	b149      	cbz	r1, 80157a6 <rmw_init_options_copy+0x1e>
 8015792:	4604      	mov	r4, r0
 8015794:	6880      	ldr	r0, [r0, #8]
 8015796:	b120      	cbz	r0, 80157a2 <rmw_init_options_copy+0x1a>
 8015798:	4b22      	ldr	r3, [pc, #136]	@ (8015824 <rmw_init_options_copy+0x9c>)
 801579a:	6819      	ldr	r1, [r3, #0]
 801579c:	f7ea fda0 	bl	80002e0 <strcmp>
 80157a0:	bba8      	cbnz	r0, 801580e <rmw_init_options_copy+0x86>
 80157a2:	68ab      	ldr	r3, [r5, #8]
 80157a4:	b11b      	cbz	r3, 80157ae <rmw_init_options_copy+0x26>
 80157a6:	f04f 0c0b 	mov.w	ip, #11
 80157aa:	4660      	mov	r0, ip
 80157ac:	bd70      	pop	{r4, r5, r6, pc}
 80157ae:	4623      	mov	r3, r4
 80157b0:	462a      	mov	r2, r5
 80157b2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80157b6:	f8d3 e000 	ldr.w	lr, [r3]
 80157ba:	3310      	adds	r3, #16
 80157bc:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 80157c0:	3210      	adds	r2, #16
 80157c2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80157c6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80157ca:	42b3      	cmp	r3, r6
 80157cc:	f842 ec10 	str.w	lr, [r2, #-16]
 80157d0:	f842 cc0c 	str.w	ip, [r2, #-12]
 80157d4:	f842 0c08 	str.w	r0, [r2, #-8]
 80157d8:	f842 1c04 	str.w	r1, [r2, #-4]
 80157dc:	d1eb      	bne.n	80157b6 <rmw_init_options_copy+0x2e>
 80157de:	6819      	ldr	r1, [r3, #0]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	4811      	ldr	r0, [pc, #68]	@ (8015828 <rmw_init_options_copy+0xa0>)
 80157e4:	6011      	str	r1, [r2, #0]
 80157e6:	6053      	str	r3, [r2, #4]
 80157e8:	f006 fa1a 	bl	801bc20 <get_memory>
 80157ec:	b198      	cbz	r0, 8015816 <rmw_init_options_copy+0x8e>
 80157ee:	6883      	ldr	r3, [r0, #8]
 80157f0:	f04f 0c00 	mov.w	ip, #0
 80157f4:	636b      	str	r3, [r5, #52]	@ 0x34
 80157f6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80157f8:	f103 0410 	add.w	r4, r3, #16
 80157fc:	3510      	adds	r5, #16
 80157fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801580a:	4660      	mov	r0, ip
 801580c:	bd70      	pop	{r4, r5, r6, pc}
 801580e:	f04f 0c0c 	mov.w	ip, #12
 8015812:	4660      	mov	r0, ip
 8015814:	bd70      	pop	{r4, r5, r6, pc}
 8015816:	f04f 0c01 	mov.w	ip, #1
 801581a:	e7c6      	b.n	80157aa <rmw_init_options_copy+0x22>
 801581c:	f04f 0c0b 	mov.w	ip, #11
 8015820:	4660      	mov	r0, ip
 8015822:	4770      	bx	lr
 8015824:	08020810 	.word	0x08020810
 8015828:	24069264 	.word	0x24069264

0801582c <rmw_init_options_fini>:
 801582c:	b510      	push	{r4, lr}
 801582e:	b08e      	sub	sp, #56	@ 0x38
 8015830:	b388      	cbz	r0, 8015896 <rmw_init_options_fini+0x6a>
 8015832:	4604      	mov	r4, r0
 8015834:	3020      	adds	r0, #32
 8015836:	f7fb fc23 	bl	8011080 <rcutils_allocator_is_valid>
 801583a:	b360      	cbz	r0, 8015896 <rmw_init_options_fini+0x6a>
 801583c:	68a0      	ldr	r0, [r4, #8]
 801583e:	b120      	cbz	r0, 801584a <rmw_init_options_fini+0x1e>
 8015840:	4b1a      	ldr	r3, [pc, #104]	@ (80158ac <rmw_init_options_fini+0x80>)
 8015842:	6819      	ldr	r1, [r3, #0]
 8015844:	f7ea fd4c 	bl	80002e0 <strcmp>
 8015848:	bb68      	cbnz	r0, 80158a6 <rmw_init_options_fini+0x7a>
 801584a:	4b19      	ldr	r3, [pc, #100]	@ (80158b0 <rmw_init_options_fini+0x84>)
 801584c:	6819      	ldr	r1, [r3, #0]
 801584e:	b331      	cbz	r1, 801589e <rmw_init_options_fini+0x72>
 8015850:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8015852:	e001      	b.n	8015858 <rmw_init_options_fini+0x2c>
 8015854:	6849      	ldr	r1, [r1, #4]
 8015856:	b311      	cbz	r1, 801589e <rmw_init_options_fini+0x72>
 8015858:	688b      	ldr	r3, [r1, #8]
 801585a:	429a      	cmp	r2, r3
 801585c:	d1fa      	bne.n	8015854 <rmw_init_options_fini+0x28>
 801585e:	4814      	ldr	r0, [pc, #80]	@ (80158b0 <rmw_init_options_fini+0x84>)
 8015860:	f006 f9ee 	bl	801bc40 <put_memory>
 8015864:	4668      	mov	r0, sp
 8015866:	f7ff fd4f 	bl	8015308 <rmw_get_zero_initialized_init_options>
 801586a:	46ee      	mov	lr, sp
 801586c:	46a4      	mov	ip, r4
 801586e:	2400      	movs	r4, #0
 8015870:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015874:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015878:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801587c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015888:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801588c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015890:	4620      	mov	r0, r4
 8015892:	b00e      	add	sp, #56	@ 0x38
 8015894:	bd10      	pop	{r4, pc}
 8015896:	240b      	movs	r4, #11
 8015898:	4620      	mov	r0, r4
 801589a:	b00e      	add	sp, #56	@ 0x38
 801589c:	bd10      	pop	{r4, pc}
 801589e:	2401      	movs	r4, #1
 80158a0:	4620      	mov	r0, r4
 80158a2:	b00e      	add	sp, #56	@ 0x38
 80158a4:	bd10      	pop	{r4, pc}
 80158a6:	240c      	movs	r4, #12
 80158a8:	e7f2      	b.n	8015890 <rmw_init_options_fini+0x64>
 80158aa:	bf00      	nop
 80158ac:	08020810 	.word	0x08020810
 80158b0:	24069264 	.word	0x24069264

080158b4 <rmw_init>:
 80158b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158b8:	b083      	sub	sp, #12
 80158ba:	2800      	cmp	r0, #0
 80158bc:	f000 80d3 	beq.w	8015a66 <rmw_init+0x1b2>
 80158c0:	460e      	mov	r6, r1
 80158c2:	2900      	cmp	r1, #0
 80158c4:	f000 80cf 	beq.w	8015a66 <rmw_init+0x1b2>
 80158c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80158ca:	4605      	mov	r5, r0
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	f000 80ca 	beq.w	8015a66 <rmw_init+0x1b2>
 80158d2:	4b78      	ldr	r3, [pc, #480]	@ (8015ab4 <rmw_init+0x200>)
 80158d4:	6880      	ldr	r0, [r0, #8]
 80158d6:	681f      	ldr	r7, [r3, #0]
 80158d8:	b128      	cbz	r0, 80158e6 <rmw_init+0x32>
 80158da:	4639      	mov	r1, r7
 80158dc:	f7ea fd00 	bl	80002e0 <strcmp>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	f040 80ca 	bne.w	8015a7a <rmw_init+0x1c6>
 80158e6:	4c74      	ldr	r4, [pc, #464]	@ (8015ab8 <rmw_init+0x204>)
 80158e8:	f04f 0800 	mov.w	r8, #0
 80158ec:	4973      	ldr	r1, [pc, #460]	@ (8015abc <rmw_init+0x208>)
 80158ee:	4874      	ldr	r0, [pc, #464]	@ (8015ac0 <rmw_init+0x20c>)
 80158f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80158f4:	60b7      	str	r7, [r6, #8]
 80158f6:	e9c6 2300 	strd	r2, r3, [r6]
 80158fa:	68eb      	ldr	r3, [r5, #12]
 80158fc:	2201      	movs	r2, #1
 80158fe:	64b3      	str	r3, [r6, #72]	@ 0x48
 8015900:	f001 fa32 	bl	8016d68 <rmw_uxrce_init_session_memory>
 8015904:	4620      	mov	r0, r4
 8015906:	2204      	movs	r2, #4
 8015908:	496e      	ldr	r1, [pc, #440]	@ (8015ac4 <rmw_init+0x210>)
 801590a:	f001 fa6d 	bl	8016de8 <rmw_uxrce_init_static_input_buffer_memory>
 801590e:	486c      	ldr	r0, [pc, #432]	@ (8015ac0 <rmw_init+0x20c>)
 8015910:	f884 800d 	strb.w	r8, [r4, #13]
 8015914:	f006 f984 	bl	801bc20 <get_memory>
 8015918:	2800      	cmp	r0, #0
 801591a:	f000 80a9 	beq.w	8015a70 <rmw_init+0x1bc>
 801591e:	6884      	ldr	r4, [r0, #8]
 8015920:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8015922:	f104 0910 	add.w	r9, r4, #16
 8015926:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8015928:	f890 c010 	ldrb.w	ip, [r0, #16]
 801592c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015930:	9101      	str	r1, [sp, #4]
 8015932:	4661      	mov	r1, ip
 8015934:	6a00      	ldr	r0, [r0, #32]
 8015936:	9000      	str	r0, [sp, #0]
 8015938:	4648      	mov	r0, r9
 801593a:	f002 fb59 	bl	8017ff0 <uxr_set_custom_transport_callbacks>
 801593e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015942:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8015946:	4960      	ldr	r1, [pc, #384]	@ (8015ac8 <rmw_init+0x214>)
 8015948:	4860      	ldr	r0, [pc, #384]	@ (8015acc <rmw_init+0x218>)
 801594a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801594e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8015952:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8015956:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801595a:	2201      	movs	r2, #1
 801595c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8015960:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8015964:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8015968:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801596c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801596e:	f001 f9db 	bl	8016d28 <rmw_uxrce_init_node_memory>
 8015972:	2205      	movs	r2, #5
 8015974:	4956      	ldr	r1, [pc, #344]	@ (8015ad0 <rmw_init+0x21c>)
 8015976:	4857      	ldr	r0, [pc, #348]	@ (8015ad4 <rmw_init+0x220>)
 8015978:	f001 f9b6 	bl	8016ce8 <rmw_uxrce_init_subscription_memory>
 801597c:	220a      	movs	r2, #10
 801597e:	4956      	ldr	r1, [pc, #344]	@ (8015ad8 <rmw_init+0x224>)
 8015980:	4856      	ldr	r0, [pc, #344]	@ (8015adc <rmw_init+0x228>)
 8015982:	f001 f991 	bl	8016ca8 <rmw_uxrce_init_publisher_memory>
 8015986:	2201      	movs	r2, #1
 8015988:	4955      	ldr	r1, [pc, #340]	@ (8015ae0 <rmw_init+0x22c>)
 801598a:	4856      	ldr	r0, [pc, #344]	@ (8015ae4 <rmw_init+0x230>)
 801598c:	f001 f94c 	bl	8016c28 <rmw_uxrce_init_service_memory>
 8015990:	2201      	movs	r2, #1
 8015992:	4955      	ldr	r1, [pc, #340]	@ (8015ae8 <rmw_init+0x234>)
 8015994:	4855      	ldr	r0, [pc, #340]	@ (8015aec <rmw_init+0x238>)
 8015996:	f001 f967 	bl	8016c68 <rmw_uxrce_init_client_memory>
 801599a:	220f      	movs	r2, #15
 801599c:	4954      	ldr	r1, [pc, #336]	@ (8015af0 <rmw_init+0x23c>)
 801599e:	4855      	ldr	r0, [pc, #340]	@ (8015af4 <rmw_init+0x240>)
 80159a0:	f001 fa02 	bl	8016da8 <rmw_uxrce_init_topic_memory>
 80159a4:	2203      	movs	r2, #3
 80159a6:	4954      	ldr	r1, [pc, #336]	@ (8015af8 <rmw_init+0x244>)
 80159a8:	4854      	ldr	r0, [pc, #336]	@ (8015afc <rmw_init+0x248>)
 80159aa:	f001 fa3d 	bl	8016e28 <rmw_uxrce_init_init_options_impl_memory>
 80159ae:	2204      	movs	r2, #4
 80159b0:	4953      	ldr	r1, [pc, #332]	@ (8015b00 <rmw_init+0x24c>)
 80159b2:	4854      	ldr	r0, [pc, #336]	@ (8015b04 <rmw_init+0x250>)
 80159b4:	f001 fa58 	bl	8016e68 <rmw_uxrce_init_wait_set_memory>
 80159b8:	4953      	ldr	r1, [pc, #332]	@ (8015b08 <rmw_init+0x254>)
 80159ba:	4854      	ldr	r0, [pc, #336]	@ (8015b0c <rmw_init+0x258>)
 80159bc:	2204      	movs	r2, #4
 80159be:	f001 fa73 	bl	8016ea8 <rmw_uxrce_init_guard_condition_memory>
 80159c2:	4642      	mov	r2, r8
 80159c4:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80159c6:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80159c8:	f000 ff94 	bl	80168f4 <rmw_uxrce_transport_init>
 80159cc:	4607      	mov	r7, r0
 80159ce:	2800      	cmp	r0, #0
 80159d0:	d158      	bne.n	8015a84 <rmw_init+0x1d0>
 80159d2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80159d4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80159d8:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80159dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80159de:	4628      	mov	r0, r5
 80159e0:	f002 fd36 	bl	8018450 <uxr_init_session>
 80159e4:	4622      	mov	r2, r4
 80159e6:	494a      	ldr	r1, [pc, #296]	@ (8015b10 <rmw_init+0x25c>)
 80159e8:	4628      	mov	r0, r5
 80159ea:	f002 fd55 	bl	8018498 <uxr_set_topic_callback>
 80159ee:	463a      	mov	r2, r7
 80159f0:	4948      	ldr	r1, [pc, #288]	@ (8015b14 <rmw_init+0x260>)
 80159f2:	4628      	mov	r0, r5
 80159f4:	f002 fd4c 	bl	8018490 <uxr_set_status_callback>
 80159f8:	463a      	mov	r2, r7
 80159fa:	4947      	ldr	r1, [pc, #284]	@ (8015b18 <rmw_init+0x264>)
 80159fc:	4628      	mov	r0, r5
 80159fe:	f002 fd4f 	bl	80184a0 <uxr_set_request_callback>
 8015a02:	463a      	mov	r2, r7
 8015a04:	4945      	ldr	r1, [pc, #276]	@ (8015b1c <rmw_init+0x268>)
 8015a06:	4628      	mov	r0, r5
 8015a08:	f002 fd4e 	bl	80184a8 <uxr_set_reply_callback>
 8015a0c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015a10:	2304      	movs	r3, #4
 8015a12:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8015a16:	0092      	lsls	r2, r2, #2
 8015a18:	4628      	mov	r0, r5
 8015a1a:	f002 fd85 	bl	8018528 <uxr_create_input_reliable_stream>
 8015a1e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015a22:	2304      	movs	r3, #4
 8015a24:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8015a28:	0092      	lsls	r2, r2, #2
 8015a2a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8015a2e:	4628      	mov	r0, r5
 8015a30:	f002 fd50 	bl	80184d4 <uxr_create_output_reliable_stream>
 8015a34:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8015a38:	4628      	mov	r0, r5
 8015a3a:	f002 fd6f 	bl	801851c <uxr_create_input_best_effort_stream>
 8015a3e:	f241 3194 	movw	r1, #5012	@ 0x1394
 8015a42:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8015a46:	4628      	mov	r0, r5
 8015a48:	4421      	add	r1, r4
 8015a4a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015a4e:	f002 fd2f 	bl	80184b0 <uxr_create_output_best_effort_stream>
 8015a52:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8015a56:	4628      	mov	r0, r5
 8015a58:	f003 fab8 	bl	8018fcc <uxr_create_session>
 8015a5c:	b1f8      	cbz	r0, 8015a9e <rmw_init+0x1ea>
 8015a5e:	4638      	mov	r0, r7
 8015a60:	b003      	add	sp, #12
 8015a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a66:	270b      	movs	r7, #11
 8015a68:	4638      	mov	r0, r7
 8015a6a:	b003      	add	sp, #12
 8015a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a70:	2701      	movs	r7, #1
 8015a72:	4638      	mov	r0, r7
 8015a74:	b003      	add	sp, #12
 8015a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a7a:	270c      	movs	r7, #12
 8015a7c:	4638      	mov	r0, r7
 8015a7e:	b003      	add	sp, #12
 8015a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a84:	4648      	mov	r0, r9
 8015a86:	f002 faf1 	bl	801806c <uxr_close_custom_transport>
 8015a8a:	4621      	mov	r1, r4
 8015a8c:	480c      	ldr	r0, [pc, #48]	@ (8015ac0 <rmw_init+0x20c>)
 8015a8e:	f006 f8d7 	bl	801bc40 <put_memory>
 8015a92:	4638      	mov	r0, r7
 8015a94:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8015a98:	b003      	add	sp, #12
 8015a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a9e:	4648      	mov	r0, r9
 8015aa0:	f002 fae4 	bl	801806c <uxr_close_custom_transport>
 8015aa4:	4621      	mov	r1, r4
 8015aa6:	4806      	ldr	r0, [pc, #24]	@ (8015ac0 <rmw_init+0x20c>)
 8015aa8:	f006 f8ca 	bl	801bc40 <put_memory>
 8015aac:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8015aae:	2701      	movs	r7, #1
 8015ab0:	e7d5      	b.n	8015a5e <rmw_init+0x1aa>
 8015ab2:	bf00      	nop
 8015ab4:	08020810 	.word	0x08020810
 8015ab8:	240692b4 	.word	0x240692b4
 8015abc:	24065560 	.word	0x24065560
 8015ac0:	240692a4 	.word	0x240692a4
 8015ac4:	24066b08 	.word	0x24066b08
 8015ac8:	24064b84 	.word	0x24064b84
 8015acc:	24069274 	.word	0x24069274
 8015ad0:	24068c08 	.word	0x24068c08
 8015ad4:	240692c4 	.word	0x240692c4
 8015ad8:	24064c28 	.word	0x24064c28
 8015adc:	24069284 	.word	0x24069284
 8015ae0:	24065498 	.word	0x24065498
 8015ae4:	24069294 	.word	0x24069294
 8015ae8:	240649b8 	.word	0x240649b8
 8015aec:	240649a8 	.word	0x240649a8
 8015af0:	24069040 	.word	0x24069040
 8015af4:	240692d4 	.word	0x240692d4
 8015af8:	24064b00 	.word	0x24064b00
 8015afc:	24069264 	.word	0x24069264
 8015b00:	240691e4 	.word	0x240691e4
 8015b04:	240692e4 	.word	0x240692e4
 8015b08:	24064a80 	.word	0x24064a80
 8015b0c:	24069254 	.word	0x24069254
 8015b10:	0801ba59 	.word	0x0801ba59
 8015b14:	0801ba51 	.word	0x0801ba51
 8015b18:	0801baf1 	.word	0x0801baf1
 8015b1c:	0801bb8d 	.word	0x0801bb8d

08015b20 <rmw_context_fini>:
 8015b20:	4b17      	ldr	r3, [pc, #92]	@ (8015b80 <rmw_context_fini+0x60>)
 8015b22:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8015b24:	b570      	push	{r4, r5, r6, lr}
 8015b26:	681c      	ldr	r4, [r3, #0]
 8015b28:	4605      	mov	r5, r0
 8015b2a:	b334      	cbz	r4, 8015b7a <rmw_context_fini+0x5a>
 8015b2c:	2600      	movs	r6, #0
 8015b2e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015b32:	6902      	ldr	r2, [r0, #16]
 8015b34:	428a      	cmp	r2, r1
 8015b36:	d018      	beq.n	8015b6a <rmw_context_fini+0x4a>
 8015b38:	2c00      	cmp	r4, #0
 8015b3a:	d1f8      	bne.n	8015b2e <rmw_context_fini+0xe>
 8015b3c:	b189      	cbz	r1, 8015b62 <rmw_context_fini+0x42>
 8015b3e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8015b42:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8015b46:	789b      	ldrb	r3, [r3, #2]
 8015b48:	2b01      	cmp	r3, #1
 8015b4a:	bf14      	ite	ne
 8015b4c:	210a      	movne	r1, #10
 8015b4e:	2100      	moveq	r1, #0
 8015b50:	f003 fa14 	bl	8018f7c <uxr_delete_session_retries>
 8015b54:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015b56:	f001 f9c7 	bl	8016ee8 <rmw_uxrce_fini_session_memory>
 8015b5a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015b5c:	3010      	adds	r0, #16
 8015b5e:	f002 fa85 	bl	801806c <uxr_close_custom_transport>
 8015b62:	2300      	movs	r3, #0
 8015b64:	4630      	mov	r0, r6
 8015b66:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8015b68:	bd70      	pop	{r4, r5, r6, pc}
 8015b6a:	3018      	adds	r0, #24
 8015b6c:	f000 f89c 	bl	8015ca8 <rmw_destroy_node>
 8015b70:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8015b72:	4606      	mov	r6, r0
 8015b74:	2c00      	cmp	r4, #0
 8015b76:	d1da      	bne.n	8015b2e <rmw_context_fini+0xe>
 8015b78:	e7e0      	b.n	8015b3c <rmw_context_fini+0x1c>
 8015b7a:	4626      	mov	r6, r4
 8015b7c:	e7de      	b.n	8015b3c <rmw_context_fini+0x1c>
 8015b7e:	bf00      	nop
 8015b80:	24069274 	.word	0x24069274

08015b84 <create_node>:
 8015b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b88:	b083      	sub	sp, #12
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d064      	beq.n	8015c58 <create_node+0xd4>
 8015b8e:	4606      	mov	r6, r0
 8015b90:	4838      	ldr	r0, [pc, #224]	@ (8015c74 <create_node+0xf0>)
 8015b92:	460f      	mov	r7, r1
 8015b94:	4690      	mov	r8, r2
 8015b96:	461d      	mov	r5, r3
 8015b98:	f006 f842 	bl	801bc20 <get_memory>
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	d05b      	beq.n	8015c58 <create_node+0xd4>
 8015ba0:	6884      	ldr	r4, [r0, #8]
 8015ba2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015ba4:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8015ba8:	f104 0518 	add.w	r5, r4, #24
 8015bac:	6123      	str	r3, [r4, #16]
 8015bae:	f7ff fd7d 	bl	80156ac <rmw_get_implementation_identifier>
 8015bb2:	f8c4 9020 	str.w	r9, [r4, #32]
 8015bb6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015bba:	4630      	mov	r0, r6
 8015bbc:	f7ea fb9a 	bl	80002f4 <strlen>
 8015bc0:	1c42      	adds	r2, r0, #1
 8015bc2:	2a3c      	cmp	r2, #60	@ 0x3c
 8015bc4:	d840      	bhi.n	8015c48 <create_node+0xc4>
 8015bc6:	4648      	mov	r0, r9
 8015bc8:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8015bcc:	4631      	mov	r1, r6
 8015bce:	f007 fcb8 	bl	801d542 <memcpy>
 8015bd2:	4638      	mov	r0, r7
 8015bd4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8015bd8:	f7ea fb8c 	bl	80002f4 <strlen>
 8015bdc:	1c42      	adds	r2, r0, #1
 8015bde:	2a3c      	cmp	r2, #60	@ 0x3c
 8015be0:	d832      	bhi.n	8015c48 <create_node+0xc4>
 8015be2:	4639      	mov	r1, r7
 8015be4:	4648      	mov	r0, r9
 8015be6:	f007 fcac 	bl	801d542 <memcpy>
 8015bea:	6923      	ldr	r3, [r4, #16]
 8015bec:	2101      	movs	r1, #1
 8015bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015bf2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8015bf6:	1842      	adds	r2, r0, r1
 8015bf8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8015bfc:	f002 fa3a 	bl	8018074 <uxr_object_id>
 8015c00:	6160      	str	r0, [r4, #20]
 8015c02:	783b      	ldrb	r3, [r7, #0]
 8015c04:	2b2f      	cmp	r3, #47	@ 0x2f
 8015c06:	d12c      	bne.n	8015c62 <create_node+0xde>
 8015c08:	787b      	ldrb	r3, [r7, #1]
 8015c0a:	bb53      	cbnz	r3, 8015c62 <create_node+0xde>
 8015c0c:	4633      	mov	r3, r6
 8015c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8015c78 <create_node+0xf4>)
 8015c10:	213c      	movs	r1, #60	@ 0x3c
 8015c12:	481a      	ldr	r0, [pc, #104]	@ (8015c7c <create_node+0xf8>)
 8015c14:	f007 fa08 	bl	801d028 <sniprintf>
 8015c18:	6920      	ldr	r0, [r4, #16]
 8015c1a:	2106      	movs	r1, #6
 8015c1c:	fa1f f388 	uxth.w	r3, r8
 8015c20:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015c24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c28:	9101      	str	r1, [sp, #4]
 8015c2a:	4914      	ldr	r1, [pc, #80]	@ (8015c7c <create_node+0xf8>)
 8015c2c:	9100      	str	r1, [sp, #0]
 8015c2e:	6811      	ldr	r1, [r2, #0]
 8015c30:	6962      	ldr	r2, [r4, #20]
 8015c32:	f001 ff71 	bl	8017b18 <uxr_buffer_create_participant_bin>
 8015c36:	4602      	mov	r2, r0
 8015c38:	6920      	ldr	r0, [r4, #16]
 8015c3a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015c3e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015c42:	f001 fad3 	bl	80171ec <run_xrce_session>
 8015c46:	b918      	cbnz	r0, 8015c50 <create_node+0xcc>
 8015c48:	4628      	mov	r0, r5
 8015c4a:	2500      	movs	r5, #0
 8015c4c:	f001 f952 	bl	8016ef4 <rmw_uxrce_fini_node_memory>
 8015c50:	4628      	mov	r0, r5
 8015c52:	b003      	add	sp, #12
 8015c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c58:	2500      	movs	r5, #0
 8015c5a:	4628      	mov	r0, r5
 8015c5c:	b003      	add	sp, #12
 8015c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c62:	463b      	mov	r3, r7
 8015c64:	4a06      	ldr	r2, [pc, #24]	@ (8015c80 <create_node+0xfc>)
 8015c66:	213c      	movs	r1, #60	@ 0x3c
 8015c68:	9600      	str	r6, [sp, #0]
 8015c6a:	4804      	ldr	r0, [pc, #16]	@ (8015c7c <create_node+0xf8>)
 8015c6c:	f007 f9dc 	bl	801d028 <sniprintf>
 8015c70:	e7d2      	b.n	8015c18 <create_node+0x94>
 8015c72:	bf00      	nop
 8015c74:	24069274 	.word	0x24069274
 8015c78:	080204e4 	.word	0x080204e4
 8015c7c:	2406482c 	.word	0x2406482c
 8015c80:	0801fea8 	.word	0x0801fea8

08015c84 <rmw_create_node>:
 8015c84:	468c      	mov	ip, r1
 8015c86:	4611      	mov	r1, r2
 8015c88:	f1bc 0f00 	cmp.w	ip, #0
 8015c8c:	d00a      	beq.n	8015ca4 <rmw_create_node+0x20>
 8015c8e:	f89c 3000 	ldrb.w	r3, [ip]
 8015c92:	b13b      	cbz	r3, 8015ca4 <rmw_create_node+0x20>
 8015c94:	b132      	cbz	r2, 8015ca4 <rmw_create_node+0x20>
 8015c96:	7813      	ldrb	r3, [r2, #0]
 8015c98:	b123      	cbz	r3, 8015ca4 <rmw_create_node+0x20>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8015c9e:	4660      	mov	r0, ip
 8015ca0:	f7ff bf70 	b.w	8015b84 <create_node>
 8015ca4:	2000      	movs	r0, #0
 8015ca6:	4770      	bx	lr

08015ca8 <rmw_destroy_node>:
 8015ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015caa:	b328      	cbz	r0, 8015cf8 <rmw_destroy_node+0x50>
 8015cac:	4607      	mov	r7, r0
 8015cae:	6800      	ldr	r0, [r0, #0]
 8015cb0:	b120      	cbz	r0, 8015cbc <rmw_destroy_node+0x14>
 8015cb2:	4b37      	ldr	r3, [pc, #220]	@ (8015d90 <rmw_destroy_node+0xe8>)
 8015cb4:	6819      	ldr	r1, [r3, #0]
 8015cb6:	f7ea fb13 	bl	80002e0 <strcmp>
 8015cba:	b9e8      	cbnz	r0, 8015cf8 <rmw_destroy_node+0x50>
 8015cbc:	687d      	ldr	r5, [r7, #4]
 8015cbe:	b1dd      	cbz	r5, 8015cf8 <rmw_destroy_node+0x50>
 8015cc0:	4b34      	ldr	r3, [pc, #208]	@ (8015d94 <rmw_destroy_node+0xec>)
 8015cc2:	681c      	ldr	r4, [r3, #0]
 8015cc4:	2c00      	cmp	r4, #0
 8015cc6:	d060      	beq.n	8015d8a <rmw_destroy_node+0xe2>
 8015cc8:	2600      	movs	r6, #0
 8015cca:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015cce:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8015cd2:	429d      	cmp	r5, r3
 8015cd4:	d013      	beq.n	8015cfe <rmw_destroy_node+0x56>
 8015cd6:	2c00      	cmp	r4, #0
 8015cd8:	d1f7      	bne.n	8015cca <rmw_destroy_node+0x22>
 8015cda:	4b2f      	ldr	r3, [pc, #188]	@ (8015d98 <rmw_destroy_node+0xf0>)
 8015cdc:	681c      	ldr	r4, [r3, #0]
 8015cde:	b1c4      	cbz	r4, 8015d12 <rmw_destroy_node+0x6a>
 8015ce0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015ce4:	6a0b      	ldr	r3, [r1, #32]
 8015ce6:	429d      	cmp	r5, r3
 8015ce8:	d1f9      	bne.n	8015cde <rmw_destroy_node+0x36>
 8015cea:	317c      	adds	r1, #124	@ 0x7c
 8015cec:	4638      	mov	r0, r7
 8015cee:	f000 fd4b 	bl	8016788 <rmw_destroy_subscription>
 8015cf2:	2801      	cmp	r0, #1
 8015cf4:	4606      	mov	r6, r0
 8015cf6:	d1f2      	bne.n	8015cde <rmw_destroy_node+0x36>
 8015cf8:	2601      	movs	r6, #1
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cfe:	3184      	adds	r1, #132	@ 0x84
 8015d00:	4638      	mov	r0, r7
 8015d02:	f000 f94d 	bl	8015fa0 <rmw_destroy_publisher>
 8015d06:	2801      	cmp	r0, #1
 8015d08:	4606      	mov	r6, r0
 8015d0a:	d0f5      	beq.n	8015cf8 <rmw_destroy_node+0x50>
 8015d0c:	2c00      	cmp	r4, #0
 8015d0e:	d1dc      	bne.n	8015cca <rmw_destroy_node+0x22>
 8015d10:	e7e3      	b.n	8015cda <rmw_destroy_node+0x32>
 8015d12:	4b22      	ldr	r3, [pc, #136]	@ (8015d9c <rmw_destroy_node+0xf4>)
 8015d14:	681c      	ldr	r4, [r3, #0]
 8015d16:	b16c      	cbz	r4, 8015d34 <rmw_destroy_node+0x8c>
 8015d18:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d1c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015d1e:	429d      	cmp	r5, r3
 8015d20:	d1f9      	bne.n	8015d16 <rmw_destroy_node+0x6e>
 8015d22:	317c      	adds	r1, #124	@ 0x7c
 8015d24:	4638      	mov	r0, r7
 8015d26:	f000 fbb9 	bl	801649c <rmw_destroy_service>
 8015d2a:	2801      	cmp	r0, #1
 8015d2c:	4606      	mov	r6, r0
 8015d2e:	d0e3      	beq.n	8015cf8 <rmw_destroy_node+0x50>
 8015d30:	2c00      	cmp	r4, #0
 8015d32:	d1f1      	bne.n	8015d18 <rmw_destroy_node+0x70>
 8015d34:	4b1a      	ldr	r3, [pc, #104]	@ (8015da0 <rmw_destroy_node+0xf8>)
 8015d36:	681c      	ldr	r4, [r3, #0]
 8015d38:	b16c      	cbz	r4, 8015d56 <rmw_destroy_node+0xae>
 8015d3a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015d3e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015d40:	429d      	cmp	r5, r3
 8015d42:	d1f9      	bne.n	8015d38 <rmw_destroy_node+0x90>
 8015d44:	317c      	adds	r1, #124	@ 0x7c
 8015d46:	4638      	mov	r0, r7
 8015d48:	f7ff fc6c 	bl	8015624 <rmw_destroy_client>
 8015d4c:	2801      	cmp	r0, #1
 8015d4e:	4606      	mov	r6, r0
 8015d50:	d0d2      	beq.n	8015cf8 <rmw_destroy_node+0x50>
 8015d52:	2c00      	cmp	r4, #0
 8015d54:	d1f1      	bne.n	8015d3a <rmw_destroy_node+0x92>
 8015d56:	6928      	ldr	r0, [r5, #16]
 8015d58:	696a      	ldr	r2, [r5, #20]
 8015d5a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015d5e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d62:	6819      	ldr	r1, [r3, #0]
 8015d64:	f001 fe8c 	bl	8017a80 <uxr_buffer_delete_entity>
 8015d68:	4602      	mov	r2, r0
 8015d6a:	6928      	ldr	r0, [r5, #16]
 8015d6c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015d70:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015d74:	f001 fa3a 	bl	80171ec <run_xrce_session>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	4638      	mov	r0, r7
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	bf08      	it	eq
 8015d80:	2602      	moveq	r6, #2
 8015d82:	f001 f8b7 	bl	8016ef4 <rmw_uxrce_fini_node_memory>
 8015d86:	4630      	mov	r0, r6
 8015d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d8a:	4626      	mov	r6, r4
 8015d8c:	e7a5      	b.n	8015cda <rmw_destroy_node+0x32>
 8015d8e:	bf00      	nop
 8015d90:	08020810 	.word	0x08020810
 8015d94:	24069284 	.word	0x24069284
 8015d98:	240692c4 	.word	0x240692c4
 8015d9c:	24069294 	.word	0x24069294
 8015da0:	240649a8 	.word	0x240649a8

08015da4 <rmw_node_get_graph_guard_condition>:
 8015da4:	6843      	ldr	r3, [r0, #4]
 8015da6:	6918      	ldr	r0, [r3, #16]
 8015da8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8015dac:	4770      	bx	lr
 8015dae:	bf00      	nop

08015db0 <rmw_create_publisher>:
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db4:	b087      	sub	sp, #28
 8015db6:	2800      	cmp	r0, #0
 8015db8:	f000 80d2 	beq.w	8015f60 <rmw_create_publisher+0x1b0>
 8015dbc:	460e      	mov	r6, r1
 8015dbe:	2900      	cmp	r1, #0
 8015dc0:	f000 80ce 	beq.w	8015f60 <rmw_create_publisher+0x1b0>
 8015dc4:	4604      	mov	r4, r0
 8015dc6:	6800      	ldr	r0, [r0, #0]
 8015dc8:	4615      	mov	r5, r2
 8015dca:	461f      	mov	r7, r3
 8015dcc:	f001 fb20 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 8015dd0:	f080 0001 	eor.w	r0, r0, #1
 8015dd4:	b2c0      	uxtb	r0, r0
 8015dd6:	2800      	cmp	r0, #0
 8015dd8:	f040 80c2 	bne.w	8015f60 <rmw_create_publisher+0x1b0>
 8015ddc:	2d00      	cmp	r5, #0
 8015dde:	f000 80bf 	beq.w	8015f60 <rmw_create_publisher+0x1b0>
 8015de2:	782b      	ldrb	r3, [r5, #0]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	f000 80bb 	beq.w	8015f60 <rmw_create_publisher+0x1b0>
 8015dea:	2f00      	cmp	r7, #0
 8015dec:	f000 80b8 	beq.w	8015f60 <rmw_create_publisher+0x1b0>
 8015df0:	485e      	ldr	r0, [pc, #376]	@ (8015f6c <rmw_create_publisher+0x1bc>)
 8015df2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015df6:	f005 ff13 	bl	801bc20 <get_memory>
 8015dfa:	2800      	cmp	r0, #0
 8015dfc:	f000 80b0 	beq.w	8015f60 <rmw_create_publisher+0x1b0>
 8015e00:	6884      	ldr	r4, [r0, #8]
 8015e02:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8015e06:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8015e0a:	f7ff fc4f 	bl	80156ac <rmw_get_implementation_identifier>
 8015e0e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8015e12:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8015e16:	4628      	mov	r0, r5
 8015e18:	f7ea fa6c 	bl	80002f4 <strlen>
 8015e1c:	3001      	adds	r0, #1
 8015e1e:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8015e22:	283c      	cmp	r0, #60	@ 0x3c
 8015e24:	f200 808f 	bhi.w	8015f46 <rmw_create_publisher+0x196>
 8015e28:	462b      	mov	r3, r5
 8015e2a:	4a51      	ldr	r2, [pc, #324]	@ (8015f70 <rmw_create_publisher+0x1c0>)
 8015e2c:	213c      	movs	r1, #60	@ 0x3c
 8015e2e:	4650      	mov	r0, sl
 8015e30:	f007 f8fa 	bl	801d028 <sniprintf>
 8015e34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015e38:	4639      	mov	r1, r7
 8015e3a:	2250      	movs	r2, #80	@ 0x50
 8015e3c:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8015e3e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015e42:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8015e46:	f007 fb7c 	bl	801d542 <memcpy>
 8015e4a:	7a3b      	ldrb	r3, [r7, #8]
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	4949      	ldr	r1, [pc, #292]	@ (8015f74 <rmw_create_publisher+0x1c4>)
 8015e50:	2b02      	cmp	r3, #2
 8015e52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e56:	bf0c      	ite	eq
 8015e58:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8015e5c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8015e60:	67a3      	str	r3, [r4, #120]	@ 0x78
 8015e62:	2300      	movs	r3, #0
 8015e64:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015e68:	f7fb f9ac 	bl	80111c4 <get_message_typesupport_handle>
 8015e6c:	2800      	cmp	r0, #0
 8015e6e:	d06a      	beq.n	8015f46 <rmw_create_publisher+0x196>
 8015e70:	6842      	ldr	r2, [r0, #4]
 8015e72:	61a2      	str	r2, [r4, #24]
 8015e74:	2a00      	cmp	r2, #0
 8015e76:	d066      	beq.n	8015f46 <rmw_create_publisher+0x196>
 8015e78:	4629      	mov	r1, r5
 8015e7a:	463b      	mov	r3, r7
 8015e7c:	4648      	mov	r0, r9
 8015e7e:	f005 ff1d 	bl	801bcbc <create_topic>
 8015e82:	6260      	str	r0, [r4, #36]	@ 0x24
 8015e84:	2800      	cmp	r0, #0
 8015e86:	d062      	beq.n	8015f4e <rmw_create_publisher+0x19e>
 8015e88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e8c:	2103      	movs	r1, #3
 8015e8e:	2506      	movs	r5, #6
 8015e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015e94:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8015e98:	1c42      	adds	r2, r0, #1
 8015e9a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8015e9e:	f002 f8e9 	bl	8018074 <uxr_object_id>
 8015ea2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8015ea6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015eaa:	6120      	str	r0, [r4, #16]
 8015eac:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8015eb0:	6910      	ldr	r0, [r2, #16]
 8015eb2:	9500      	str	r5, [sp, #0]
 8015eb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015eb8:	6819      	ldr	r1, [r3, #0]
 8015eba:	6922      	ldr	r2, [r4, #16]
 8015ebc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015ec0:	f001 fe92 	bl	8017be8 <uxr_buffer_create_publisher_bin>
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015eca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015ece:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015ed2:	f001 f98b 	bl	80171ec <run_xrce_session>
 8015ed6:	b3b0      	cbz	r0, 8015f46 <rmw_create_publisher+0x196>
 8015ed8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015edc:	2105      	movs	r1, #5
 8015ede:	f10d 0a10 	add.w	sl, sp, #16
 8015ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015ee6:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8015eea:	1c42      	adds	r2, r0, #1
 8015eec:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8015ef0:	f002 f8c0 	bl	8018074 <uxr_object_id>
 8015ef4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8015ef8:	4639      	mov	r1, r7
 8015efa:	6160      	str	r0, [r4, #20]
 8015efc:	691e      	ldr	r6, [r3, #16]
 8015efe:	4650      	mov	r0, sl
 8015f00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f04:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8015f08:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8015f0c:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 8015f10:	f001 f988 	bl	8017224 <convert_qos_profile>
 8015f14:	9503      	str	r5, [sp, #12]
 8015f16:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8015f1a:	9001      	str	r0, [sp, #4]
 8015f1c:	4630      	mov	r0, r6
 8015f1e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015f22:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015f26:	9300      	str	r3, [sp, #0]
 8015f28:	6839      	ldr	r1, [r7, #0]
 8015f2a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8015f2e:	f001 febb 	bl	8017ca8 <uxr_buffer_create_datawriter_bin>
 8015f32:	4602      	mov	r2, r0
 8015f34:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015f38:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015f3c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015f40:	f001 f954 	bl	80171ec <run_xrce_session>
 8015f44:	b970      	cbnz	r0, 8015f64 <rmw_create_publisher+0x1b4>
 8015f46:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015f48:	b108      	cbz	r0, 8015f4e <rmw_create_publisher+0x19e>
 8015f4a:	f001 f843 	bl	8016fd4 <rmw_uxrce_fini_topic_memory>
 8015f4e:	4640      	mov	r0, r8
 8015f50:	f04f 0800 	mov.w	r8, #0
 8015f54:	f000 ffe6 	bl	8016f24 <rmw_uxrce_fini_publisher_memory>
 8015f58:	4640      	mov	r0, r8
 8015f5a:	b007      	add	sp, #28
 8015f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f60:	f04f 0800 	mov.w	r8, #0
 8015f64:	4640      	mov	r0, r8
 8015f66:	b007      	add	sp, #28
 8015f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f6c:	24069284 	.word	0x24069284
 8015f70:	080204e4 	.word	0x080204e4
 8015f74:	0801e624 	.word	0x0801e624

08015f78 <rmw_publisher_get_actual_qos>:
 8015f78:	b178      	cbz	r0, 8015f9a <rmw_publisher_get_actual_qos+0x22>
 8015f7a:	b510      	push	{r4, lr}
 8015f7c:	fab1 f481 	clz	r4, r1
 8015f80:	0964      	lsrs	r4, r4, #5
 8015f82:	b141      	cbz	r1, 8015f96 <rmw_publisher_get_actual_qos+0x1e>
 8015f84:	6843      	ldr	r3, [r0, #4]
 8015f86:	2250      	movs	r2, #80	@ 0x50
 8015f88:	4608      	mov	r0, r1
 8015f8a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8015f8e:	f007 fad8 	bl	801d542 <memcpy>
 8015f92:	4620      	mov	r0, r4
 8015f94:	bd10      	pop	{r4, pc}
 8015f96:	200b      	movs	r0, #11
 8015f98:	bd10      	pop	{r4, pc}
 8015f9a:	200b      	movs	r0, #11
 8015f9c:	4770      	bx	lr
 8015f9e:	bf00      	nop

08015fa0 <rmw_destroy_publisher>:
 8015fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fa4:	b128      	cbz	r0, 8015fb2 <rmw_destroy_publisher+0x12>
 8015fa6:	4604      	mov	r4, r0
 8015fa8:	6800      	ldr	r0, [r0, #0]
 8015faa:	460d      	mov	r5, r1
 8015fac:	f001 fa30 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 8015fb0:	b918      	cbnz	r0, 8015fba <rmw_destroy_publisher+0x1a>
 8015fb2:	2401      	movs	r4, #1
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fba:	6863      	ldr	r3, [r4, #4]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d0f8      	beq.n	8015fb2 <rmw_destroy_publisher+0x12>
 8015fc0:	fab5 f485 	clz	r4, r5
 8015fc4:	0964      	lsrs	r4, r4, #5
 8015fc6:	2d00      	cmp	r5, #0
 8015fc8:	d0f3      	beq.n	8015fb2 <rmw_destroy_publisher+0x12>
 8015fca:	6828      	ldr	r0, [r5, #0]
 8015fcc:	f001 fa20 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	d0ee      	beq.n	8015fb2 <rmw_destroy_publisher+0x12>
 8015fd4:	686e      	ldr	r6, [r5, #4]
 8015fd6:	2e00      	cmp	r6, #0
 8015fd8:	d0eb      	beq.n	8015fb2 <rmw_destroy_publisher+0x12>
 8015fda:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8015fdc:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8015fe0:	f005 febc 	bl	801bd5c <destroy_topic>
 8015fe4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015fe8:	6972      	ldr	r2, [r6, #20]
 8015fea:	6918      	ldr	r0, [r3, #16]
 8015fec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015ff0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ff4:	6819      	ldr	r1, [r3, #0]
 8015ff6:	f001 fd43 	bl	8017a80 <uxr_buffer_delete_entity>
 8015ffa:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8015ffe:	4680      	mov	r8, r0
 8016000:	6932      	ldr	r2, [r6, #16]
 8016002:	6918      	ldr	r0, [r3, #16]
 8016004:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016008:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801600c:	6819      	ldr	r1, [r3, #0]
 801600e:	f001 fd37 	bl	8017a80 <uxr_buffer_delete_entity>
 8016012:	4606      	mov	r6, r0
 8016014:	6938      	ldr	r0, [r7, #16]
 8016016:	4642      	mov	r2, r8
 8016018:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801601c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016020:	f001 f8e4 	bl	80171ec <run_xrce_session>
 8016024:	693f      	ldr	r7, [r7, #16]
 8016026:	4632      	mov	r2, r6
 8016028:	4606      	mov	r6, r0
 801602a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801602e:	4638      	mov	r0, r7
 8016030:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8016034:	f001 f8da 	bl	80171ec <run_xrce_session>
 8016038:	b126      	cbz	r6, 8016044 <rmw_destroy_publisher+0xa4>
 801603a:	b118      	cbz	r0, 8016044 <rmw_destroy_publisher+0xa4>
 801603c:	4628      	mov	r0, r5
 801603e:	f000 ff71 	bl	8016f24 <rmw_uxrce_fini_publisher_memory>
 8016042:	e7b7      	b.n	8015fb4 <rmw_destroy_publisher+0x14>
 8016044:	2402      	movs	r4, #2
 8016046:	e7f9      	b.n	801603c <rmw_destroy_publisher+0x9c>

08016048 <rmw_send_request>:
 8016048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801604c:	4604      	mov	r4, r0
 801604e:	6800      	ldr	r0, [r0, #0]
 8016050:	b08b      	sub	sp, #44	@ 0x2c
 8016052:	460e      	mov	r6, r1
 8016054:	4615      	mov	r5, r2
 8016056:	b128      	cbz	r0, 8016064 <rmw_send_request+0x1c>
 8016058:	4b21      	ldr	r3, [pc, #132]	@ (80160e0 <rmw_send_request+0x98>)
 801605a:	6819      	ldr	r1, [r3, #0]
 801605c:	f7ea f940 	bl	80002e0 <strcmp>
 8016060:	2800      	cmp	r0, #0
 8016062:	d139      	bne.n	80160d8 <rmw_send_request+0x90>
 8016064:	6864      	ldr	r4, [r4, #4]
 8016066:	2700      	movs	r7, #0
 8016068:	6963      	ldr	r3, [r4, #20]
 801606a:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801606e:	689b      	ldr	r3, [r3, #8]
 8016070:	4798      	blx	r3
 8016072:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016076:	4630      	mov	r0, r6
 8016078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801607c:	4798      	blx	r3
 801607e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016082:	9000      	str	r0, [sp, #0]
 8016084:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016088:	6922      	ldr	r2, [r4, #16]
 801608a:	ab02      	add	r3, sp, #8
 801608c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801608e:	f004 f81b 	bl	801a0c8 <uxr_prepare_output_stream>
 8016092:	e9c5 0700 	strd	r0, r7, [r5]
 8016096:	b198      	cbz	r0, 80160c0 <rmw_send_request+0x78>
 8016098:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801609c:	a902      	add	r1, sp, #8
 801609e:	4630      	mov	r0, r6
 80160a0:	4798      	blx	r3
 80160a2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80160a6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80160aa:	2b01      	cmp	r3, #1
 80160ac:	d00c      	beq.n	80160c8 <rmw_send_request+0x80>
 80160ae:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80160b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160b4:	f002 fe18 	bl	8018ce8 <uxr_run_session_until_confirm_delivery>
 80160b8:	4638      	mov	r0, r7
 80160ba:	b00b      	add	sp, #44	@ 0x2c
 80160bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160c0:	2001      	movs	r0, #1
 80160c2:	b00b      	add	sp, #44	@ 0x2c
 80160c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160cc:	f002 fa52 	bl	8018574 <uxr_flash_output_streams>
 80160d0:	4638      	mov	r0, r7
 80160d2:	b00b      	add	sp, #44	@ 0x2c
 80160d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160d8:	200c      	movs	r0, #12
 80160da:	b00b      	add	sp, #44	@ 0x2c
 80160dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160e0:	08020810 	.word	0x08020810

080160e4 <rmw_take_request>:
 80160e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160e8:	4605      	mov	r5, r0
 80160ea:	6800      	ldr	r0, [r0, #0]
 80160ec:	b089      	sub	sp, #36	@ 0x24
 80160ee:	460c      	mov	r4, r1
 80160f0:	4690      	mov	r8, r2
 80160f2:	461e      	mov	r6, r3
 80160f4:	b128      	cbz	r0, 8016102 <rmw_take_request+0x1e>
 80160f6:	4b28      	ldr	r3, [pc, #160]	@ (8016198 <rmw_take_request+0xb4>)
 80160f8:	6819      	ldr	r1, [r3, #0]
 80160fa:	f7ea f8f1 	bl	80002e0 <strcmp>
 80160fe:	2800      	cmp	r0, #0
 8016100:	d146      	bne.n	8016190 <rmw_take_request+0xac>
 8016102:	b10e      	cbz	r6, 8016108 <rmw_take_request+0x24>
 8016104:	2300      	movs	r3, #0
 8016106:	7033      	strb	r3, [r6, #0]
 8016108:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801610c:	f000 fff0 	bl	80170f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016110:	4648      	mov	r0, r9
 8016112:	f000 ffc5 	bl	80170a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016116:	4607      	mov	r7, r0
 8016118:	b3b0      	cbz	r0, 8016188 <rmw_take_request+0xa4>
 801611a:	6885      	ldr	r5, [r0, #8]
 801611c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8016120:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8016124:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8016128:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801612c:	7423      	strb	r3, [r4, #16]
 801612e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8016132:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8016136:	f8a4 2011 	strh.w	r2, [r4, #17]
 801613a:	74e3      	strb	r3, [r4, #19]
 801613c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8016140:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8016144:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8016148:	6161      	str	r1, [r4, #20]
 801614a:	61a2      	str	r2, [r4, #24]
 801614c:	61e3      	str	r3, [r4, #28]
 801614e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016152:	689b      	ldr	r3, [r3, #8]
 8016154:	4798      	blx	r3
 8016156:	6844      	ldr	r4, [r0, #4]
 8016158:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801615c:	f105 0110 	add.w	r1, r5, #16
 8016160:	4668      	mov	r0, sp
 8016162:	f7f9 ff27 	bl	800ffb4 <ucdr_init_buffer>
 8016166:	4641      	mov	r1, r8
 8016168:	68e3      	ldr	r3, [r4, #12]
 801616a:	4668      	mov	r0, sp
 801616c:	4798      	blx	r3
 801616e:	4639      	mov	r1, r7
 8016170:	4604      	mov	r4, r0
 8016172:	480a      	ldr	r0, [pc, #40]	@ (801619c <rmw_take_request+0xb8>)
 8016174:	f005 fd64 	bl	801bc40 <put_memory>
 8016178:	b106      	cbz	r6, 801617c <rmw_take_request+0x98>
 801617a:	7034      	strb	r4, [r6, #0]
 801617c:	f084 0001 	eor.w	r0, r4, #1
 8016180:	b2c0      	uxtb	r0, r0
 8016182:	b009      	add	sp, #36	@ 0x24
 8016184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016188:	2001      	movs	r0, #1
 801618a:	b009      	add	sp, #36	@ 0x24
 801618c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016190:	200c      	movs	r0, #12
 8016192:	b009      	add	sp, #36	@ 0x24
 8016194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016198:	08020810 	.word	0x08020810
 801619c:	240692b4 	.word	0x240692b4

080161a0 <rmw_send_response>:
 80161a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161a2:	4605      	mov	r5, r0
 80161a4:	6800      	ldr	r0, [r0, #0]
 80161a6:	b091      	sub	sp, #68	@ 0x44
 80161a8:	460c      	mov	r4, r1
 80161aa:	4616      	mov	r6, r2
 80161ac:	b128      	cbz	r0, 80161ba <rmw_send_response+0x1a>
 80161ae:	4b29      	ldr	r3, [pc, #164]	@ (8016254 <rmw_send_response+0xb4>)
 80161b0:	6819      	ldr	r1, [r3, #0]
 80161b2:	f7ea f895 	bl	80002e0 <strcmp>
 80161b6:	2800      	cmp	r0, #0
 80161b8:	d141      	bne.n	801623e <rmw_send_response+0x9e>
 80161ba:	686d      	ldr	r5, [r5, #4]
 80161bc:	68a1      	ldr	r1, [r4, #8]
 80161be:	6860      	ldr	r0, [r4, #4]
 80161c0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80161c2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80161c6:	9307      	str	r3, [sp, #28]
 80161c8:	4623      	mov	r3, r4
 80161ca:	9206      	str	r2, [sp, #24]
 80161cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161d0:	789b      	ldrb	r3, [r3, #2]
 80161d2:	f88d 2017 	strb.w	r2, [sp, #23]
 80161d6:	f88d 3016 	strb.w	r3, [sp, #22]
 80161da:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80161de:	68e2      	ldr	r2, [r4, #12]
 80161e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80161e4:	ab02      	add	r3, sp, #8
 80161e6:	696c      	ldr	r4, [r5, #20]
 80161e8:	c307      	stmia	r3!, {r0, r1, r2}
 80161ea:	68e3      	ldr	r3, [r4, #12]
 80161ec:	4798      	blx	r3
 80161ee:	6844      	ldr	r4, [r0, #4]
 80161f0:	4630      	mov	r0, r6
 80161f2:	6923      	ldr	r3, [r4, #16]
 80161f4:	4798      	blx	r3
 80161f6:	f100 0318 	add.w	r3, r0, #24
 80161fa:	6938      	ldr	r0, [r7, #16]
 80161fc:	9300      	str	r3, [sp, #0]
 80161fe:	ab08      	add	r3, sp, #32
 8016200:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016204:	692a      	ldr	r2, [r5, #16]
 8016206:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016208:	f003 ff5e 	bl	801a0c8 <uxr_prepare_output_stream>
 801620c:	b910      	cbnz	r0, 8016214 <rmw_send_response+0x74>
 801620e:	2001      	movs	r0, #1
 8016210:	b011      	add	sp, #68	@ 0x44
 8016212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016214:	a902      	add	r1, sp, #8
 8016216:	a808      	add	r0, sp, #32
 8016218:	f004 fff8 	bl	801b20c <uxr_serialize_SampleIdentity>
 801621c:	68a3      	ldr	r3, [r4, #8]
 801621e:	a908      	add	r1, sp, #32
 8016220:	4630      	mov	r0, r6
 8016222:	4798      	blx	r3
 8016224:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016228:	6938      	ldr	r0, [r7, #16]
 801622a:	2b01      	cmp	r3, #1
 801622c:	d00a      	beq.n	8016244 <rmw_send_response+0xa4>
 801622e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016230:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016234:	f002 fd58 	bl	8018ce8 <uxr_run_session_until_confirm_delivery>
 8016238:	2000      	movs	r0, #0
 801623a:	b011      	add	sp, #68	@ 0x44
 801623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801623e:	200c      	movs	r0, #12
 8016240:	b011      	add	sp, #68	@ 0x44
 8016242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016244:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016248:	f002 f994 	bl	8018574 <uxr_flash_output_streams>
 801624c:	2000      	movs	r0, #0
 801624e:	b011      	add	sp, #68	@ 0x44
 8016250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016252:	bf00      	nop
 8016254:	08020810 	.word	0x08020810

08016258 <rmw_take_response>:
 8016258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801625c:	4604      	mov	r4, r0
 801625e:	6800      	ldr	r0, [r0, #0]
 8016260:	b088      	sub	sp, #32
 8016262:	460f      	mov	r7, r1
 8016264:	4690      	mov	r8, r2
 8016266:	461d      	mov	r5, r3
 8016268:	b120      	cbz	r0, 8016274 <rmw_take_response+0x1c>
 801626a:	4b1d      	ldr	r3, [pc, #116]	@ (80162e0 <rmw_take_response+0x88>)
 801626c:	6819      	ldr	r1, [r3, #0]
 801626e:	f7ea f837 	bl	80002e0 <strcmp>
 8016272:	bb68      	cbnz	r0, 80162d0 <rmw_take_response+0x78>
 8016274:	b10d      	cbz	r5, 801627a <rmw_take_response+0x22>
 8016276:	2300      	movs	r3, #0
 8016278:	702b      	strb	r3, [r5, #0]
 801627a:	6864      	ldr	r4, [r4, #4]
 801627c:	f000 ff38 	bl	80170f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016280:	4620      	mov	r0, r4
 8016282:	f000 ff0d 	bl	80170a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016286:	4606      	mov	r6, r0
 8016288:	b330      	cbz	r0, 80162d8 <rmw_take_response+0x80>
 801628a:	6963      	ldr	r3, [r4, #20]
 801628c:	6884      	ldr	r4, [r0, #8]
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016294:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016298:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801629c:	4798      	blx	r3
 801629e:	6847      	ldr	r7, [r0, #4]
 80162a0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80162a4:	f104 0110 	add.w	r1, r4, #16
 80162a8:	4668      	mov	r0, sp
 80162aa:	f7f9 fe83 	bl	800ffb4 <ucdr_init_buffer>
 80162ae:	4641      	mov	r1, r8
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	4668      	mov	r0, sp
 80162b4:	4798      	blx	r3
 80162b6:	4631      	mov	r1, r6
 80162b8:	4604      	mov	r4, r0
 80162ba:	480a      	ldr	r0, [pc, #40]	@ (80162e4 <rmw_take_response+0x8c>)
 80162bc:	f005 fcc0 	bl	801bc40 <put_memory>
 80162c0:	b105      	cbz	r5, 80162c4 <rmw_take_response+0x6c>
 80162c2:	702c      	strb	r4, [r5, #0]
 80162c4:	f084 0001 	eor.w	r0, r4, #1
 80162c8:	b2c0      	uxtb	r0, r0
 80162ca:	b008      	add	sp, #32
 80162cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162d0:	200c      	movs	r0, #12
 80162d2:	b008      	add	sp, #32
 80162d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162d8:	2001      	movs	r0, #1
 80162da:	b008      	add	sp, #32
 80162dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162e0:	08020810 	.word	0x08020810
 80162e4:	240692b4 	.word	0x240692b4

080162e8 <rmw_create_service>:
 80162e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ec:	b091      	sub	sp, #68	@ 0x44
 80162ee:	2900      	cmp	r1, #0
 80162f0:	f000 80bb 	beq.w	801646a <rmw_create_service+0x182>
 80162f4:	4606      	mov	r6, r0
 80162f6:	2800      	cmp	r0, #0
 80162f8:	f000 80b7 	beq.w	801646a <rmw_create_service+0x182>
 80162fc:	4614      	mov	r4, r2
 80162fe:	6800      	ldr	r0, [r0, #0]
 8016300:	4689      	mov	r9, r1
 8016302:	461d      	mov	r5, r3
 8016304:	f001 f884 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 8016308:	2c00      	cmp	r4, #0
 801630a:	f000 80ae 	beq.w	801646a <rmw_create_service+0x182>
 801630e:	f080 0001 	eor.w	r0, r0, #1
 8016312:	b2c0      	uxtb	r0, r0
 8016314:	2800      	cmp	r0, #0
 8016316:	f040 80a8 	bne.w	801646a <rmw_create_service+0x182>
 801631a:	7823      	ldrb	r3, [r4, #0]
 801631c:	2b00      	cmp	r3, #0
 801631e:	f000 80a4 	beq.w	801646a <rmw_create_service+0x182>
 8016322:	2d00      	cmp	r5, #0
 8016324:	f000 80a1 	beq.w	801646a <rmw_create_service+0x182>
 8016328:	4856      	ldr	r0, [pc, #344]	@ (8016484 <rmw_create_service+0x19c>)
 801632a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801632e:	f005 fc77 	bl	801bc20 <get_memory>
 8016332:	4606      	mov	r6, r0
 8016334:	2800      	cmp	r0, #0
 8016336:	f000 8099 	beq.w	801646c <rmw_create_service+0x184>
 801633a:	6887      	ldr	r7, [r0, #8]
 801633c:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 8016340:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8016344:	f7ff f9b2 	bl	80156ac <rmw_get_implementation_identifier>
 8016348:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801634a:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801634e:	4620      	mov	r0, r4
 8016350:	f7e9 ffd0 	bl	80002f4 <strlen>
 8016354:	1c42      	adds	r2, r0, #1
 8016356:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801635a:	2a3c      	cmp	r2, #60	@ 0x3c
 801635c:	f200 808a 	bhi.w	8016474 <rmw_create_service+0x18c>
 8016360:	4621      	mov	r1, r4
 8016362:	4650      	mov	r0, sl
 8016364:	f007 f8ed 	bl	801d542 <memcpy>
 8016368:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801636c:	4629      	mov	r1, r5
 801636e:	2250      	movs	r2, #80	@ 0x50
 8016370:	f107 0020 	add.w	r0, r7, #32
 8016374:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8016378:	677b      	str	r3, [r7, #116]	@ 0x74
 801637a:	f007 f8e2 	bl	801d542 <memcpy>
 801637e:	4648      	mov	r0, r9
 8016380:	4941      	ldr	r1, [pc, #260]	@ (8016488 <rmw_create_service+0x1a0>)
 8016382:	f7fa ff2b 	bl	80111dc <get_service_typesupport_handle>
 8016386:	2800      	cmp	r0, #0
 8016388:	d074      	beq.n	8016474 <rmw_create_service+0x18c>
 801638a:	6843      	ldr	r3, [r0, #4]
 801638c:	617b      	str	r3, [r7, #20]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d070      	beq.n	8016474 <rmw_create_service+0x18c>
 8016392:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016396:	2108      	movs	r1, #8
 8016398:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 8016490 <rmw_create_service+0x1a8>
 801639c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80163a0:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8016494 <rmw_create_service+0x1ac>
 80163a4:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 80163a8:	1c42      	adds	r2, r0, #1
 80163aa:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 80163ae:	f001 fe61 	bl	8018074 <uxr_object_id>
 80163b2:	2364      	movs	r3, #100	@ 0x64
 80163b4:	6138      	str	r0, [r7, #16]
 80163b6:	4652      	mov	r2, sl
 80163b8:	4649      	mov	r1, r9
 80163ba:	6978      	ldr	r0, [r7, #20]
 80163bc:	f000 ff7c 	bl	80172b8 <generate_service_types>
 80163c0:	2800      	cmp	r0, #0
 80163c2:	d057      	beq.n	8016474 <rmw_create_service+0x18c>
 80163c4:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 8016498 <rmw_create_service+0x1b0>
 80163c8:	233c      	movs	r3, #60	@ 0x3c
 80163ca:	4a30      	ldr	r2, [pc, #192]	@ (801648c <rmw_create_service+0x1a4>)
 80163cc:	4620      	mov	r0, r4
 80163ce:	4659      	mov	r1, fp
 80163d0:	f000 ff40 	bl	8017254 <generate_service_topics>
 80163d4:	2800      	cmp	r0, #0
 80163d6:	d04d      	beq.n	8016474 <rmw_create_service+0x18c>
 80163d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80163dc:	a80c      	add	r0, sp, #48	@ 0x30
 80163de:	4629      	mov	r1, r5
 80163e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80163e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80163e8:	f000 ff1c 	bl	8017224 <convert_qos_profile>
 80163ec:	4a27      	ldr	r2, [pc, #156]	@ (801648c <rmw_create_service+0x1a4>)
 80163ee:	a80c      	add	r0, sp, #48	@ 0x30
 80163f0:	9400      	str	r4, [sp, #0]
 80163f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163f4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80163f8:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80163fc:	c803      	ldmia	r0, {r0, r1}
 80163fe:	9a08      	ldr	r2, [sp, #32]
 8016400:	9005      	str	r0, [sp, #20]
 8016402:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016406:	2306      	movs	r3, #6
 8016408:	f8ad 1018 	strh.w	r1, [sp, #24]
 801640c:	9307      	str	r3, [sp, #28]
 801640e:	6811      	ldr	r1, [r2, #0]
 8016410:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016414:	693a      	ldr	r2, [r7, #16]
 8016416:	f001 fd35 	bl	8017e84 <uxr_buffer_create_replier_bin>
 801641a:	4602      	mov	r2, r0
 801641c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016420:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016424:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016428:	f000 fee0 	bl	80171ec <run_xrce_session>
 801642c:	b310      	cbz	r0, 8016474 <rmw_create_service+0x18c>
 801642e:	7a2b      	ldrb	r3, [r5, #8]
 8016430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016434:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016438:	2b02      	cmp	r3, #2
 801643a:	920e      	str	r2, [sp, #56]	@ 0x38
 801643c:	f04f 0200 	mov.w	r2, #0
 8016440:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016442:	bf0c      	ite	eq
 8016444:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8016448:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801644c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016452:	ab0e      	add	r3, sp, #56	@ 0x38
 8016454:	673a      	str	r2, [r7, #112]	@ 0x70
 8016456:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801645a:	9300      	str	r3, [sp, #0]
 801645c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801645e:	6811      	ldr	r1, [r2, #0]
 8016460:	693a      	ldr	r2, [r7, #16]
 8016462:	f001 fe37 	bl	80180d4 <uxr_buffer_request_data>
 8016466:	8338      	strh	r0, [r7, #24]
 8016468:	e000      	b.n	801646c <rmw_create_service+0x184>
 801646a:	2600      	movs	r6, #0
 801646c:	4630      	mov	r0, r6
 801646e:	b011      	add	sp, #68	@ 0x44
 8016470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016474:	4630      	mov	r0, r6
 8016476:	2600      	movs	r6, #0
 8016478:	f000 fd80 	bl	8016f7c <rmw_uxrce_fini_service_memory>
 801647c:	4630      	mov	r0, r6
 801647e:	b011      	add	sp, #68	@ 0x44
 8016480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016484:	24069294 	.word	0x24069294
 8016488:	0801e624 	.word	0x0801e624
 801648c:	24064908 	.word	0x24064908
 8016490:	24064944 	.word	0x24064944
 8016494:	240648a4 	.word	0x240648a4
 8016498:	24064868 	.word	0x24064868

0801649c <rmw_destroy_service>:
 801649c:	b570      	push	{r4, r5, r6, lr}
 801649e:	b128      	cbz	r0, 80164ac <rmw_destroy_service+0x10>
 80164a0:	4604      	mov	r4, r0
 80164a2:	6800      	ldr	r0, [r0, #0]
 80164a4:	460d      	mov	r5, r1
 80164a6:	f000 ffb3 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 80164aa:	b910      	cbnz	r0, 80164b2 <rmw_destroy_service+0x16>
 80164ac:	2401      	movs	r4, #1
 80164ae:	4620      	mov	r0, r4
 80164b0:	bd70      	pop	{r4, r5, r6, pc}
 80164b2:	6863      	ldr	r3, [r4, #4]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d0f9      	beq.n	80164ac <rmw_destroy_service+0x10>
 80164b8:	2d00      	cmp	r5, #0
 80164ba:	d0f7      	beq.n	80164ac <rmw_destroy_service+0x10>
 80164bc:	6828      	ldr	r0, [r5, #0]
 80164be:	f000 ffa7 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 80164c2:	2800      	cmp	r0, #0
 80164c4:	d0f2      	beq.n	80164ac <rmw_destroy_service+0x10>
 80164c6:	686e      	ldr	r6, [r5, #4]
 80164c8:	2e00      	cmp	r6, #0
 80164ca:	d0ef      	beq.n	80164ac <rmw_destroy_service+0x10>
 80164cc:	6864      	ldr	r4, [r4, #4]
 80164ce:	6932      	ldr	r2, [r6, #16]
 80164d0:	6920      	ldr	r0, [r4, #16]
 80164d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80164d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164da:	6819      	ldr	r1, [r3, #0]
 80164dc:	f001 fe34 	bl	8018148 <uxr_buffer_cancel_data>
 80164e0:	4602      	mov	r2, r0
 80164e2:	6920      	ldr	r0, [r4, #16]
 80164e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80164e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80164ec:	f000 fe7e 	bl	80171ec <run_xrce_session>
 80164f0:	6920      	ldr	r0, [r4, #16]
 80164f2:	6932      	ldr	r2, [r6, #16]
 80164f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80164f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164fc:	6819      	ldr	r1, [r3, #0]
 80164fe:	f001 fabf 	bl	8017a80 <uxr_buffer_delete_entity>
 8016502:	4602      	mov	r2, r0
 8016504:	6920      	ldr	r0, [r4, #16]
 8016506:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801650a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801650e:	f000 fe6d 	bl	80171ec <run_xrce_session>
 8016512:	4603      	mov	r3, r0
 8016514:	4628      	mov	r0, r5
 8016516:	2b00      	cmp	r3, #0
 8016518:	bf14      	ite	ne
 801651a:	2400      	movne	r4, #0
 801651c:	2402      	moveq	r4, #2
 801651e:	f000 fd2d 	bl	8016f7c <rmw_uxrce_fini_service_memory>
 8016522:	e7c4      	b.n	80164ae <rmw_destroy_service+0x12>

08016524 <rmw_service_response_publisher_get_actual_qos>:
 8016524:	b181      	cbz	r1, 8016548 <rmw_service_response_publisher_get_actual_qos+0x24>
 8016526:	4603      	mov	r3, r0
 8016528:	b510      	push	{r4, lr}
 801652a:	fab0 f480 	clz	r4, r0
 801652e:	0964      	lsrs	r4, r4, #5
 8016530:	b140      	cbz	r0, 8016544 <rmw_service_response_publisher_get_actual_qos+0x20>
 8016532:	685b      	ldr	r3, [r3, #4]
 8016534:	4608      	mov	r0, r1
 8016536:	2250      	movs	r2, #80	@ 0x50
 8016538:	f103 0120 	add.w	r1, r3, #32
 801653c:	f007 f801 	bl	801d542 <memcpy>
 8016540:	4620      	mov	r0, r4
 8016542:	bd10      	pop	{r4, pc}
 8016544:	200b      	movs	r0, #11
 8016546:	bd10      	pop	{r4, pc}
 8016548:	200b      	movs	r0, #11
 801654a:	4770      	bx	lr

0801654c <rmw_service_request_subscription_get_actual_qos>:
 801654c:	b178      	cbz	r0, 801656e <rmw_service_request_subscription_get_actual_qos+0x22>
 801654e:	b510      	push	{r4, lr}
 8016550:	fab1 f481 	clz	r4, r1
 8016554:	0964      	lsrs	r4, r4, #5
 8016556:	b141      	cbz	r1, 801656a <rmw_service_request_subscription_get_actual_qos+0x1e>
 8016558:	6843      	ldr	r3, [r0, #4]
 801655a:	2250      	movs	r2, #80	@ 0x50
 801655c:	4608      	mov	r0, r1
 801655e:	f103 0120 	add.w	r1, r3, #32
 8016562:	f006 ffee 	bl	801d542 <memcpy>
 8016566:	4620      	mov	r0, r4
 8016568:	bd10      	pop	{r4, pc}
 801656a:	200b      	movs	r0, #11
 801656c:	bd10      	pop	{r4, pc}
 801656e:	200b      	movs	r0, #11
 8016570:	4770      	bx	lr
 8016572:	bf00      	nop

08016574 <rmw_create_subscription>:
 8016574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016578:	b08d      	sub	sp, #52	@ 0x34
 801657a:	2900      	cmp	r1, #0
 801657c:	f000 80d8 	beq.w	8016730 <rmw_create_subscription+0x1bc>
 8016580:	4604      	mov	r4, r0
 8016582:	2800      	cmp	r0, #0
 8016584:	f000 80d4 	beq.w	8016730 <rmw_create_subscription+0x1bc>
 8016588:	6800      	ldr	r0, [r0, #0]
 801658a:	460e      	mov	r6, r1
 801658c:	4615      	mov	r5, r2
 801658e:	461f      	mov	r7, r3
 8016590:	f000 ff3e 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 8016594:	f080 0001 	eor.w	r0, r0, #1
 8016598:	b2c0      	uxtb	r0, r0
 801659a:	2800      	cmp	r0, #0
 801659c:	f040 80c8 	bne.w	8016730 <rmw_create_subscription+0x1bc>
 80165a0:	2d00      	cmp	r5, #0
 80165a2:	f000 80c5 	beq.w	8016730 <rmw_create_subscription+0x1bc>
 80165a6:	782b      	ldrb	r3, [r5, #0]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	f000 80c1 	beq.w	8016730 <rmw_create_subscription+0x1bc>
 80165ae:	2f00      	cmp	r7, #0
 80165b0:	f000 80be 	beq.w	8016730 <rmw_create_subscription+0x1bc>
 80165b4:	4867      	ldr	r0, [pc, #412]	@ (8016754 <rmw_create_subscription+0x1e0>)
 80165b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80165ba:	f005 fb31 	bl	801bc20 <get_memory>
 80165be:	4604      	mov	r4, r0
 80165c0:	2800      	cmp	r0, #0
 80165c2:	f000 80b6 	beq.w	8016732 <rmw_create_subscription+0x1be>
 80165c6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80165ca:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 80165ce:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 80165d2:	f7ff f86b 	bl	80156ac <rmw_get_implementation_identifier>
 80165d6:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 80165da:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 80165de:	4628      	mov	r0, r5
 80165e0:	f7e9 fe88 	bl	80002f4 <strlen>
 80165e4:	3001      	adds	r0, #1
 80165e6:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 80165ea:	283c      	cmp	r0, #60	@ 0x3c
 80165ec:	f200 80a5 	bhi.w	801673a <rmw_create_subscription+0x1c6>
 80165f0:	462b      	mov	r3, r5
 80165f2:	4a59      	ldr	r2, [pc, #356]	@ (8016758 <rmw_create_subscription+0x1e4>)
 80165f4:	213c      	movs	r1, #60	@ 0x3c
 80165f6:	4650      	mov	r0, sl
 80165f8:	f006 fd16 	bl	801d028 <sniprintf>
 80165fc:	4639      	mov	r1, r7
 80165fe:	2250      	movs	r2, #80	@ 0x50
 8016600:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8016604:	f8c8 9020 	str.w	r9, [r8, #32]
 8016608:	f006 ff9b 	bl	801d542 <memcpy>
 801660c:	4630      	mov	r0, r6
 801660e:	4953      	ldr	r1, [pc, #332]	@ (801675c <rmw_create_subscription+0x1e8>)
 8016610:	f7fa fdd8 	bl	80111c4 <get_message_typesupport_handle>
 8016614:	2800      	cmp	r0, #0
 8016616:	f000 8090 	beq.w	801673a <rmw_create_subscription+0x1c6>
 801661a:	6842      	ldr	r2, [r0, #4]
 801661c:	f8c8 2018 	str.w	r2, [r8, #24]
 8016620:	2a00      	cmp	r2, #0
 8016622:	f000 808a 	beq.w	801673a <rmw_create_subscription+0x1c6>
 8016626:	4629      	mov	r1, r5
 8016628:	463b      	mov	r3, r7
 801662a:	4648      	mov	r0, r9
 801662c:	f005 fb46 	bl	801bcbc <create_topic>
 8016630:	f8c8 001c 	str.w	r0, [r8, #28]
 8016634:	2800      	cmp	r0, #0
 8016636:	f000 8085 	beq.w	8016744 <rmw_create_subscription+0x1d0>
 801663a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801663e:	2104      	movs	r1, #4
 8016640:	2506      	movs	r5, #6
 8016642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016646:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801664a:	1c42      	adds	r2, r0, #1
 801664c:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8016650:	f001 fd10 	bl	8018074 <uxr_object_id>
 8016654:	f8c8 0010 	str.w	r0, [r8, #16]
 8016658:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801665c:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8016660:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016664:	9500      	str	r5, [sp, #0]
 8016666:	6819      	ldr	r1, [r3, #0]
 8016668:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801666c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016670:	f001 faea 	bl	8017c48 <uxr_buffer_create_subscriber_bin>
 8016674:	4602      	mov	r2, r0
 8016676:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801667a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801667e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016682:	f000 fdb3 	bl	80171ec <run_xrce_session>
 8016686:	2800      	cmp	r0, #0
 8016688:	d057      	beq.n	801673a <rmw_create_subscription+0x1c6>
 801668a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801668e:	4629      	mov	r1, r5
 8016690:	ae08      	add	r6, sp, #32
 8016692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016696:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801669a:	1c42      	adds	r2, r0, #1
 801669c:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80166a0:	f001 fce8 	bl	8018074 <uxr_object_id>
 80166a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80166a8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80166ac:	4639      	mov	r1, r7
 80166ae:	f8c8 0014 	str.w	r0, [r8, #20]
 80166b2:	4630      	mov	r0, r6
 80166b4:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80166b8:	9305      	str	r3, [sp, #20]
 80166ba:	f000 fdb3 	bl	8017224 <convert_qos_profile>
 80166be:	9503      	str	r5, [sp, #12]
 80166c0:	9b05      	ldr	r3, [sp, #20]
 80166c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80166c6:	9001      	str	r0, [sp, #4]
 80166c8:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80166cc:	f8ad 1008 	strh.w	r1, [sp, #8]
 80166d0:	691b      	ldr	r3, [r3, #16]
 80166d2:	9300      	str	r3, [sp, #0]
 80166d4:	f8db 1000 	ldr.w	r1, [fp]
 80166d8:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 80166dc:	f001 fb5a 	bl	8017d94 <uxr_buffer_create_datareader_bin>
 80166e0:	4602      	mov	r2, r0
 80166e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80166e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80166ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80166ee:	f000 fd7d 	bl	80171ec <run_xrce_session>
 80166f2:	b310      	cbz	r0, 801673a <rmw_create_subscription+0x1c6>
 80166f4:	7a3b      	ldrb	r3, [r7, #8]
 80166f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80166fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80166fe:	2b02      	cmp	r3, #2
 8016700:	920a      	str	r2, [sp, #40]	@ 0x28
 8016702:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016706:	f04f 0200 	mov.w	r2, #0
 801670a:	bf08      	it	eq
 801670c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8016710:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016714:	bf18      	it	ne
 8016716:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801671a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801671c:	9307      	str	r3, [sp, #28]
 801671e:	ab0a      	add	r3, sp, #40	@ 0x28
 8016720:	9300      	str	r3, [sp, #0]
 8016722:	9b07      	ldr	r3, [sp, #28]
 8016724:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016728:	6809      	ldr	r1, [r1, #0]
 801672a:	f001 fcd3 	bl	80180d4 <uxr_buffer_request_data>
 801672e:	e000      	b.n	8016732 <rmw_create_subscription+0x1be>
 8016730:	2400      	movs	r4, #0
 8016732:	4620      	mov	r0, r4
 8016734:	b00d      	add	sp, #52	@ 0x34
 8016736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801673a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801673e:	b108      	cbz	r0, 8016744 <rmw_create_subscription+0x1d0>
 8016740:	f000 fc48 	bl	8016fd4 <rmw_uxrce_fini_topic_memory>
 8016744:	4620      	mov	r0, r4
 8016746:	2400      	movs	r4, #0
 8016748:	f000 fc02 	bl	8016f50 <rmw_uxrce_fini_subscription_memory>
 801674c:	4620      	mov	r0, r4
 801674e:	b00d      	add	sp, #52	@ 0x34
 8016750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016754:	240692c4 	.word	0x240692c4
 8016758:	080204e4 	.word	0x080204e4
 801675c:	0801e624 	.word	0x0801e624

08016760 <rmw_subscription_get_actual_qos>:
 8016760:	b178      	cbz	r0, 8016782 <rmw_subscription_get_actual_qos+0x22>
 8016762:	b510      	push	{r4, lr}
 8016764:	fab1 f481 	clz	r4, r1
 8016768:	0964      	lsrs	r4, r4, #5
 801676a:	b141      	cbz	r1, 801677e <rmw_subscription_get_actual_qos+0x1e>
 801676c:	6843      	ldr	r3, [r0, #4]
 801676e:	2250      	movs	r2, #80	@ 0x50
 8016770:	4608      	mov	r0, r1
 8016772:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8016776:	f006 fee4 	bl	801d542 <memcpy>
 801677a:	4620      	mov	r0, r4
 801677c:	bd10      	pop	{r4, pc}
 801677e:	200b      	movs	r0, #11
 8016780:	bd10      	pop	{r4, pc}
 8016782:	200b      	movs	r0, #11
 8016784:	4770      	bx	lr
 8016786:	bf00      	nop

08016788 <rmw_destroy_subscription>:
 8016788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801678c:	b128      	cbz	r0, 801679a <rmw_destroy_subscription+0x12>
 801678e:	4604      	mov	r4, r0
 8016790:	6800      	ldr	r0, [r0, #0]
 8016792:	460d      	mov	r5, r1
 8016794:	f000 fe3c 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 8016798:	b918      	cbnz	r0, 80167a2 <rmw_destroy_subscription+0x1a>
 801679a:	2401      	movs	r4, #1
 801679c:	4620      	mov	r0, r4
 801679e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a2:	6863      	ldr	r3, [r4, #4]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d0f8      	beq.n	801679a <rmw_destroy_subscription+0x12>
 80167a8:	fab5 f485 	clz	r4, r5
 80167ac:	0964      	lsrs	r4, r4, #5
 80167ae:	2d00      	cmp	r5, #0
 80167b0:	d0f3      	beq.n	801679a <rmw_destroy_subscription+0x12>
 80167b2:	6828      	ldr	r0, [r5, #0]
 80167b4:	f000 fe2c 	bl	8017410 <is_uxrce_rmw_identifier_valid>
 80167b8:	2800      	cmp	r0, #0
 80167ba:	d0ee      	beq.n	801679a <rmw_destroy_subscription+0x12>
 80167bc:	686e      	ldr	r6, [r5, #4]
 80167be:	2e00      	cmp	r6, #0
 80167c0:	d0eb      	beq.n	801679a <rmw_destroy_subscription+0x12>
 80167c2:	6a37      	ldr	r7, [r6, #32]
 80167c4:	6972      	ldr	r2, [r6, #20]
 80167c6:	6938      	ldr	r0, [r7, #16]
 80167c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80167cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80167d0:	6819      	ldr	r1, [r3, #0]
 80167d2:	f001 fcb9 	bl	8018148 <uxr_buffer_cancel_data>
 80167d6:	4602      	mov	r2, r0
 80167d8:	6938      	ldr	r0, [r7, #16]
 80167da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80167de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80167e2:	f000 fd03 	bl	80171ec <run_xrce_session>
 80167e6:	69f0      	ldr	r0, [r6, #28]
 80167e8:	f005 fab8 	bl	801bd5c <destroy_topic>
 80167ec:	6a33      	ldr	r3, [r6, #32]
 80167ee:	6972      	ldr	r2, [r6, #20]
 80167f0:	6918      	ldr	r0, [r3, #16]
 80167f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80167f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80167fa:	6819      	ldr	r1, [r3, #0]
 80167fc:	f001 f940 	bl	8017a80 <uxr_buffer_delete_entity>
 8016800:	6a33      	ldr	r3, [r6, #32]
 8016802:	4680      	mov	r8, r0
 8016804:	6932      	ldr	r2, [r6, #16]
 8016806:	6918      	ldr	r0, [r3, #16]
 8016808:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801680c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016810:	6819      	ldr	r1, [r3, #0]
 8016812:	f001 f935 	bl	8017a80 <uxr_buffer_delete_entity>
 8016816:	4606      	mov	r6, r0
 8016818:	6938      	ldr	r0, [r7, #16]
 801681a:	4642      	mov	r2, r8
 801681c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016820:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016824:	f000 fce2 	bl	80171ec <run_xrce_session>
 8016828:	693f      	ldr	r7, [r7, #16]
 801682a:	4632      	mov	r2, r6
 801682c:	4606      	mov	r6, r0
 801682e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8016832:	4638      	mov	r0, r7
 8016834:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8016838:	f000 fcd8 	bl	80171ec <run_xrce_session>
 801683c:	b126      	cbz	r6, 8016848 <rmw_destroy_subscription+0xc0>
 801683e:	b118      	cbz	r0, 8016848 <rmw_destroy_subscription+0xc0>
 8016840:	4628      	mov	r0, r5
 8016842:	f000 fb85 	bl	8016f50 <rmw_uxrce_fini_subscription_memory>
 8016846:	e7a9      	b.n	801679c <rmw_destroy_subscription+0x14>
 8016848:	2402      	movs	r4, #2
 801684a:	e7f9      	b.n	8016840 <rmw_destroy_subscription+0xb8>

0801684c <rmw_take_with_info>:
 801684c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801684e:	4604      	mov	r4, r0
 8016850:	6800      	ldr	r0, [r0, #0]
 8016852:	b089      	sub	sp, #36	@ 0x24
 8016854:	460f      	mov	r7, r1
 8016856:	4615      	mov	r5, r2
 8016858:	b128      	cbz	r0, 8016866 <rmw_take_with_info+0x1a>
 801685a:	4b24      	ldr	r3, [pc, #144]	@ (80168ec <rmw_take_with_info+0xa0>)
 801685c:	6819      	ldr	r1, [r3, #0]
 801685e:	f7e9 fd3f 	bl	80002e0 <strcmp>
 8016862:	2800      	cmp	r0, #0
 8016864:	d13e      	bne.n	80168e4 <rmw_take_with_info+0x98>
 8016866:	b305      	cbz	r5, 80168aa <rmw_take_with_info+0x5e>
 8016868:	2300      	movs	r3, #0
 801686a:	6864      	ldr	r4, [r4, #4]
 801686c:	702b      	strb	r3, [r5, #0]
 801686e:	f000 fc3f 	bl	80170f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016872:	4620      	mov	r0, r4
 8016874:	f000 fc14 	bl	80170a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016878:	4606      	mov	r6, r0
 801687a:	b1f0      	cbz	r0, 80168ba <rmw_take_with_info+0x6e>
 801687c:	6881      	ldr	r1, [r0, #8]
 801687e:	4668      	mov	r0, sp
 8016880:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016884:	3110      	adds	r1, #16
 8016886:	f7f9 fb95 	bl	800ffb4 <ucdr_init_buffer>
 801688a:	69a3      	ldr	r3, [r4, #24]
 801688c:	4639      	mov	r1, r7
 801688e:	4668      	mov	r0, sp
 8016890:	68db      	ldr	r3, [r3, #12]
 8016892:	4798      	blx	r3
 8016894:	4604      	mov	r4, r0
 8016896:	4631      	mov	r1, r6
 8016898:	4815      	ldr	r0, [pc, #84]	@ (80168f0 <rmw_take_with_info+0xa4>)
 801689a:	f005 f9d1 	bl	801bc40 <put_memory>
 801689e:	702c      	strb	r4, [r5, #0]
 80168a0:	f084 0001 	eor.w	r0, r4, #1
 80168a4:	b2c0      	uxtb	r0, r0
 80168a6:	b009      	add	sp, #36	@ 0x24
 80168a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168aa:	6864      	ldr	r4, [r4, #4]
 80168ac:	f000 fc20 	bl	80170f0 <rmw_uxrce_clean_expired_static_input_buffer>
 80168b0:	4620      	mov	r0, r4
 80168b2:	f000 fbf5 	bl	80170a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80168b6:	4605      	mov	r5, r0
 80168b8:	b910      	cbnz	r0, 80168c0 <rmw_take_with_info+0x74>
 80168ba:	2001      	movs	r0, #1
 80168bc:	b009      	add	sp, #36	@ 0x24
 80168be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168c0:	68a9      	ldr	r1, [r5, #8]
 80168c2:	4668      	mov	r0, sp
 80168c4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80168c8:	3110      	adds	r1, #16
 80168ca:	f7f9 fb73 	bl	800ffb4 <ucdr_init_buffer>
 80168ce:	69a3      	ldr	r3, [r4, #24]
 80168d0:	4639      	mov	r1, r7
 80168d2:	4668      	mov	r0, sp
 80168d4:	68db      	ldr	r3, [r3, #12]
 80168d6:	4798      	blx	r3
 80168d8:	4629      	mov	r1, r5
 80168da:	4604      	mov	r4, r0
 80168dc:	4804      	ldr	r0, [pc, #16]	@ (80168f0 <rmw_take_with_info+0xa4>)
 80168de:	f005 f9af 	bl	801bc40 <put_memory>
 80168e2:	e7dd      	b.n	80168a0 <rmw_take_with_info+0x54>
 80168e4:	200c      	movs	r0, #12
 80168e6:	b009      	add	sp, #36	@ 0x24
 80168e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168ea:	bf00      	nop
 80168ec:	08020810 	.word	0x08020810
 80168f0:	240692b4 	.word	0x240692b4

080168f4 <rmw_uxrce_transport_init>:
 80168f4:	b508      	push	{r3, lr}
 80168f6:	b108      	cbz	r0, 80168fc <rmw_uxrce_transport_init+0x8>
 80168f8:	f100 0210 	add.w	r2, r0, #16
 80168fc:	b139      	cbz	r1, 801690e <rmw_uxrce_transport_init+0x1a>
 80168fe:	6949      	ldr	r1, [r1, #20]
 8016900:	4610      	mov	r0, r2
 8016902:	f001 fb7f 	bl	8018004 <uxr_init_custom_transport>
 8016906:	f080 0001 	eor.w	r0, r0, #1
 801690a:	b2c0      	uxtb	r0, r0
 801690c:	bd08      	pop	{r3, pc}
 801690e:	4b04      	ldr	r3, [pc, #16]	@ (8016920 <rmw_uxrce_transport_init+0x2c>)
 8016910:	4610      	mov	r0, r2
 8016912:	6859      	ldr	r1, [r3, #4]
 8016914:	f001 fb76 	bl	8018004 <uxr_init_custom_transport>
 8016918:	f080 0001 	eor.w	r0, r0, #1
 801691c:	b2c0      	uxtb	r0, r0
 801691e:	bd08      	pop	{r3, pc}
 8016920:	240646a4 	.word	0x240646a4

08016924 <rmw_wait>:
 8016924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016928:	4698      	mov	r8, r3
 801692a:	ea40 0301 	orr.w	r3, r0, r1
 801692e:	b089      	sub	sp, #36	@ 0x24
 8016930:	ea48 0303 	orr.w	r3, r8, r3
 8016934:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016936:	4313      	orrs	r3, r2
 8016938:	f000 8106 	beq.w	8016b48 <rmw_wait+0x224>
 801693c:	4605      	mov	r5, r0
 801693e:	460e      	mov	r6, r1
 8016940:	4691      	mov	r9, r2
 8016942:	b16c      	cbz	r4, 8016960 <rmw_wait+0x3c>
 8016944:	4ba6      	ldr	r3, [pc, #664]	@ (8016be0 <rmw_wait+0x2bc>)
 8016946:	af04      	add	r7, sp, #16
 8016948:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801694a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801694e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016952:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016956:	f004 fff3 	bl	801b940 <rmw_time_equal>
 801695a:	2800      	cmp	r0, #0
 801695c:	f000 810b 	beq.w	8016b76 <rmw_wait+0x252>
 8016960:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016964:	f000 fbc4 	bl	80170f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016968:	4b9e      	ldr	r3, [pc, #632]	@ (8016be4 <rmw_wait+0x2c0>)
 801696a:	681c      	ldr	r4, [r3, #0]
 801696c:	b14c      	cbz	r4, 8016982 <rmw_wait+0x5e>
 801696e:	4623      	mov	r3, r4
 8016970:	2100      	movs	r1, #0
 8016972:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016976:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801697a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801697e:	2b00      	cmp	r3, #0
 8016980:	d1f7      	bne.n	8016972 <rmw_wait+0x4e>
 8016982:	f1b9 0f00 	cmp.w	r9, #0
 8016986:	d011      	beq.n	80169ac <rmw_wait+0x88>
 8016988:	f8d9 1000 	ldr.w	r1, [r9]
 801698c:	b171      	cbz	r1, 80169ac <rmw_wait+0x88>
 801698e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016992:	2300      	movs	r3, #0
 8016994:	2001      	movs	r0, #1
 8016996:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801699a:	3301      	adds	r3, #1
 801699c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801699e:	4299      	cmp	r1, r3
 80169a0:	6912      	ldr	r2, [r2, #16]
 80169a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80169a6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80169aa:	d1f4      	bne.n	8016996 <rmw_wait+0x72>
 80169ac:	f1b8 0f00 	cmp.w	r8, #0
 80169b0:	d011      	beq.n	80169d6 <rmw_wait+0xb2>
 80169b2:	f8d8 1000 	ldr.w	r1, [r8]
 80169b6:	b171      	cbz	r1, 80169d6 <rmw_wait+0xb2>
 80169b8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80169bc:	2300      	movs	r3, #0
 80169be:	2001      	movs	r0, #1
 80169c0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80169c4:	3301      	adds	r3, #1
 80169c6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80169c8:	4299      	cmp	r1, r3
 80169ca:	6912      	ldr	r2, [r2, #16]
 80169cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80169d0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80169d4:	d1f4      	bne.n	80169c0 <rmw_wait+0x9c>
 80169d6:	b185      	cbz	r5, 80169fa <rmw_wait+0xd6>
 80169d8:	6829      	ldr	r1, [r5, #0]
 80169da:	b171      	cbz	r1, 80169fa <rmw_wait+0xd6>
 80169dc:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80169e0:	2300      	movs	r3, #0
 80169e2:	2001      	movs	r0, #1
 80169e4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80169e8:	3301      	adds	r3, #1
 80169ea:	6a12      	ldr	r2, [r2, #32]
 80169ec:	4299      	cmp	r1, r3
 80169ee:	6912      	ldr	r2, [r2, #16]
 80169f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80169f4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80169f8:	d1f4      	bne.n	80169e4 <rmw_wait+0xc0>
 80169fa:	b344      	cbz	r4, 8016a4e <rmw_wait+0x12a>
 80169fc:	4622      	mov	r2, r4
 80169fe:	2300      	movs	r3, #0
 8016a00:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016a04:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016a08:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016a0c:	440b      	add	r3, r1
 8016a0e:	b2db      	uxtb	r3, r3
 8016a10:	2a00      	cmp	r2, #0
 8016a12:	d1f5      	bne.n	8016a00 <rmw_wait+0xdc>
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d05f      	beq.n	8016ad8 <rmw_wait+0x1b4>
 8016a18:	1c7a      	adds	r2, r7, #1
 8016a1a:	d00d      	beq.n	8016a38 <rmw_wait+0x114>
 8016a1c:	ee07 7a90 	vmov	s15, r7
 8016a20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016a24:	ee07 3a90 	vmov	s15, r3
 8016a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016a30:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016a34:	ee17 7a90 	vmov	r7, s15
 8016a38:	68a0      	ldr	r0, [r4, #8]
 8016a3a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016a3e:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	f040 808d 	bne.w	8016b62 <rmw_wait+0x23e>
 8016a48:	6864      	ldr	r4, [r4, #4]
 8016a4a:	2c00      	cmp	r4, #0
 8016a4c:	d1f4      	bne.n	8016a38 <rmw_wait+0x114>
 8016a4e:	f1b9 0f00 	cmp.w	r9, #0
 8016a52:	f000 80a1 	beq.w	8016b98 <rmw_wait+0x274>
 8016a56:	f8d9 7000 	ldr.w	r7, [r9]
 8016a5a:	2f00      	cmp	r7, #0
 8016a5c:	f000 80a4 	beq.w	8016ba8 <rmw_wait+0x284>
 8016a60:	2400      	movs	r4, #0
 8016a62:	4627      	mov	r7, r4
 8016a64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016a68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016a6c:	f000 fb18 	bl	80170a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d03b      	beq.n	8016aec <rmw_wait+0x1c8>
 8016a74:	3401      	adds	r4, #1
 8016a76:	f8d9 3000 	ldr.w	r3, [r9]
 8016a7a:	2701      	movs	r7, #1
 8016a7c:	42a3      	cmp	r3, r4
 8016a7e:	d8f1      	bhi.n	8016a64 <rmw_wait+0x140>
 8016a80:	2701      	movs	r7, #1
 8016a82:	f1b8 0f00 	cmp.w	r8, #0
 8016a86:	d010      	beq.n	8016aaa <rmw_wait+0x186>
 8016a88:	f8d8 3000 	ldr.w	r3, [r8]
 8016a8c:	b16b      	cbz	r3, 8016aaa <rmw_wait+0x186>
 8016a8e:	2400      	movs	r4, #0
 8016a90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016a94:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016a98:	f000 fb02 	bl	80170a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a9c:	b370      	cbz	r0, 8016afc <rmw_wait+0x1d8>
 8016a9e:	3401      	adds	r4, #1
 8016aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8016aa4:	2701      	movs	r7, #1
 8016aa6:	42a3      	cmp	r3, r4
 8016aa8:	d8f2      	bhi.n	8016a90 <rmw_wait+0x16c>
 8016aaa:	2d00      	cmp	r5, #0
 8016aac:	d035      	beq.n	8016b1a <rmw_wait+0x1f6>
 8016aae:	682b      	ldr	r3, [r5, #0]
 8016ab0:	b39b      	cbz	r3, 8016b1a <rmw_wait+0x1f6>
 8016ab2:	2400      	movs	r4, #0
 8016ab4:	686b      	ldr	r3, [r5, #4]
 8016ab6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016aba:	f000 faf1 	bl	80170a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016abe:	b328      	cbz	r0, 8016b0c <rmw_wait+0x1e8>
 8016ac0:	3401      	adds	r4, #1
 8016ac2:	682b      	ldr	r3, [r5, #0]
 8016ac4:	2701      	movs	r7, #1
 8016ac6:	42a3      	cmp	r3, r4
 8016ac8:	d8f4      	bhi.n	8016ab4 <rmw_wait+0x190>
 8016aca:	2e00      	cmp	r6, #0
 8016acc:	d03c      	beq.n	8016b48 <rmw_wait+0x224>
 8016ace:	6834      	ldr	r4, [r6, #0]
 8016ad0:	2c00      	cmp	r4, #0
 8016ad2:	d039      	beq.n	8016b48 <rmw_wait+0x224>
 8016ad4:	2701      	movs	r7, #1
 8016ad6:	e023      	b.n	8016b20 <rmw_wait+0x1fc>
 8016ad8:	68a0      	ldr	r0, [r4, #8]
 8016ada:	2100      	movs	r1, #0
 8016adc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ae0:	f002 f8c8 	bl	8018c74 <uxr_run_session_timeout>
 8016ae4:	6864      	ldr	r4, [r4, #4]
 8016ae6:	2c00      	cmp	r4, #0
 8016ae8:	d1f6      	bne.n	8016ad8 <rmw_wait+0x1b4>
 8016aea:	e7b0      	b.n	8016a4e <rmw_wait+0x12a>
 8016aec:	e9d9 3200 	ldrd	r3, r2, [r9]
 8016af0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016af4:	3401      	adds	r4, #1
 8016af6:	42a3      	cmp	r3, r4
 8016af8:	d8b4      	bhi.n	8016a64 <rmw_wait+0x140>
 8016afa:	e7c2      	b.n	8016a82 <rmw_wait+0x15e>
 8016afc:	e9d8 3200 	ldrd	r3, r2, [r8]
 8016b00:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016b04:	3401      	adds	r4, #1
 8016b06:	429c      	cmp	r4, r3
 8016b08:	d3c2      	bcc.n	8016a90 <rmw_wait+0x16c>
 8016b0a:	e7ce      	b.n	8016aaa <rmw_wait+0x186>
 8016b0c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016b10:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016b14:	3401      	adds	r4, #1
 8016b16:	42a3      	cmp	r3, r4
 8016b18:	d8cc      	bhi.n	8016ab4 <rmw_wait+0x190>
 8016b1a:	b1a6      	cbz	r6, 8016b46 <rmw_wait+0x222>
 8016b1c:	6834      	ldr	r4, [r6, #0]
 8016b1e:	b194      	cbz	r4, 8016b46 <rmw_wait+0x222>
 8016b20:	2300      	movs	r3, #0
 8016b22:	461d      	mov	r5, r3
 8016b24:	e004      	b.n	8016b30 <rmw_wait+0x20c>
 8016b26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016b2a:	3301      	adds	r3, #1
 8016b2c:	42a3      	cmp	r3, r4
 8016b2e:	d00a      	beq.n	8016b46 <rmw_wait+0x222>
 8016b30:	6870      	ldr	r0, [r6, #4]
 8016b32:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016b36:	7c0a      	ldrb	r2, [r1, #16]
 8016b38:	2a00      	cmp	r2, #0
 8016b3a:	d0f4      	beq.n	8016b26 <rmw_wait+0x202>
 8016b3c:	3301      	adds	r3, #1
 8016b3e:	4617      	mov	r7, r2
 8016b40:	740d      	strb	r5, [r1, #16]
 8016b42:	42a3      	cmp	r3, r4
 8016b44:	d1f4      	bne.n	8016b30 <rmw_wait+0x20c>
 8016b46:	b147      	cbz	r7, 8016b5a <rmw_wait+0x236>
 8016b48:	2000      	movs	r0, #0
 8016b4a:	b009      	add	sp, #36	@ 0x24
 8016b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b50:	b11e      	cbz	r6, 8016b5a <rmw_wait+0x236>
 8016b52:	6834      	ldr	r4, [r6, #0]
 8016b54:	462f      	mov	r7, r5
 8016b56:	2c00      	cmp	r4, #0
 8016b58:	d1e2      	bne.n	8016b20 <rmw_wait+0x1fc>
 8016b5a:	2002      	movs	r0, #2
 8016b5c:	b009      	add	sp, #36	@ 0x24
 8016b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b62:	4639      	mov	r1, r7
 8016b64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b68:	f002 f89e 	bl	8018ca8 <uxr_run_session_until_data>
 8016b6c:	6864      	ldr	r4, [r4, #4]
 8016b6e:	2c00      	cmp	r4, #0
 8016b70:	f47f af62 	bne.w	8016a38 <rmw_wait+0x114>
 8016b74:	e76b      	b.n	8016a4e <rmw_wait+0x12a>
 8016b76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016b7a:	f004 ff37 	bl	801b9ec <rmw_time_total_nsec>
 8016b7e:	2300      	movs	r3, #0
 8016b80:	4a19      	ldr	r2, [pc, #100]	@ (8016be8 <rmw_wait+0x2c4>)
 8016b82:	f7e9 fc65 	bl	8000450 <__aeabi_uldivmod>
 8016b86:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016b8a:	4607      	mov	r7, r0
 8016b8c:	f171 0300 	sbcs.w	r3, r1, #0
 8016b90:	bfa8      	it	ge
 8016b92:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8016b96:	e6e5      	b.n	8016964 <rmw_wait+0x40>
 8016b98:	f1b8 0f00 	cmp.w	r8, #0
 8016b9c:	d00f      	beq.n	8016bbe <rmw_wait+0x29a>
 8016b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8016ba2:	b193      	cbz	r3, 8016bca <rmw_wait+0x2a6>
 8016ba4:	464f      	mov	r7, r9
 8016ba6:	e772      	b.n	8016a8e <rmw_wait+0x16a>
 8016ba8:	f1b8 0f00 	cmp.w	r8, #0
 8016bac:	d007      	beq.n	8016bbe <rmw_wait+0x29a>
 8016bae:	f8d8 3000 	ldr.w	r3, [r8]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	f47f af6b 	bne.w	8016a8e <rmw_wait+0x16a>
 8016bb8:	b155      	cbz	r5, 8016bd0 <rmw_wait+0x2ac>
 8016bba:	461f      	mov	r7, r3
 8016bbc:	e777      	b.n	8016aae <rmw_wait+0x18a>
 8016bbe:	2d00      	cmp	r5, #0
 8016bc0:	d0c6      	beq.n	8016b50 <rmw_wait+0x22c>
 8016bc2:	682b      	ldr	r3, [r5, #0]
 8016bc4:	b143      	cbz	r3, 8016bd8 <rmw_wait+0x2b4>
 8016bc6:	4647      	mov	r7, r8
 8016bc8:	e773      	b.n	8016ab2 <rmw_wait+0x18e>
 8016bca:	b10d      	cbz	r5, 8016bd0 <rmw_wait+0x2ac>
 8016bcc:	464f      	mov	r7, r9
 8016bce:	e76e      	b.n	8016aae <rmw_wait+0x18a>
 8016bd0:	462f      	mov	r7, r5
 8016bd2:	2e00      	cmp	r6, #0
 8016bd4:	d1a2      	bne.n	8016b1c <rmw_wait+0x1f8>
 8016bd6:	e7c0      	b.n	8016b5a <rmw_wait+0x236>
 8016bd8:	4647      	mov	r7, r8
 8016bda:	2e00      	cmp	r6, #0
 8016bdc:	d19e      	bne.n	8016b1c <rmw_wait+0x1f8>
 8016bde:	e7bc      	b.n	8016b5a <rmw_wait+0x236>
 8016be0:	0801e450 	.word	0x0801e450
 8016be4:	240692a4 	.word	0x240692a4
 8016be8:	000f4240 	.word	0x000f4240

08016bec <rmw_create_wait_set>:
 8016bec:	b508      	push	{r3, lr}
 8016bee:	4803      	ldr	r0, [pc, #12]	@ (8016bfc <rmw_create_wait_set+0x10>)
 8016bf0:	f005 f816 	bl	801bc20 <get_memory>
 8016bf4:	b108      	cbz	r0, 8016bfa <rmw_create_wait_set+0xe>
 8016bf6:	6880      	ldr	r0, [r0, #8]
 8016bf8:	3010      	adds	r0, #16
 8016bfa:	bd08      	pop	{r3, pc}
 8016bfc:	240692e4 	.word	0x240692e4

08016c00 <rmw_destroy_wait_set>:
 8016c00:	b508      	push	{r3, lr}
 8016c02:	4b08      	ldr	r3, [pc, #32]	@ (8016c24 <rmw_destroy_wait_set+0x24>)
 8016c04:	6819      	ldr	r1, [r3, #0]
 8016c06:	b911      	cbnz	r1, 8016c0e <rmw_destroy_wait_set+0xe>
 8016c08:	e00a      	b.n	8016c20 <rmw_destroy_wait_set+0x20>
 8016c0a:	6849      	ldr	r1, [r1, #4]
 8016c0c:	b141      	cbz	r1, 8016c20 <rmw_destroy_wait_set+0x20>
 8016c0e:	688b      	ldr	r3, [r1, #8]
 8016c10:	3310      	adds	r3, #16
 8016c12:	4298      	cmp	r0, r3
 8016c14:	d1f9      	bne.n	8016c0a <rmw_destroy_wait_set+0xa>
 8016c16:	4803      	ldr	r0, [pc, #12]	@ (8016c24 <rmw_destroy_wait_set+0x24>)
 8016c18:	f005 f812 	bl	801bc40 <put_memory>
 8016c1c:	2000      	movs	r0, #0
 8016c1e:	bd08      	pop	{r3, pc}
 8016c20:	2001      	movs	r0, #1
 8016c22:	bd08      	pop	{r3, pc}
 8016c24:	240692e4 	.word	0x240692e4

08016c28 <rmw_uxrce_init_service_memory>:
 8016c28:	b1e2      	cbz	r2, 8016c64 <rmw_uxrce_init_service_memory+0x3c>
 8016c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c2e:	7b05      	ldrb	r5, [r0, #12]
 8016c30:	4606      	mov	r6, r0
 8016c32:	b9ad      	cbnz	r5, 8016c60 <rmw_uxrce_init_service_memory+0x38>
 8016c34:	23c8      	movs	r3, #200	@ 0xc8
 8016c36:	4617      	mov	r7, r2
 8016c38:	460c      	mov	r4, r1
 8016c3a:	46a8      	mov	r8, r5
 8016c3c:	6083      	str	r3, [r0, #8]
 8016c3e:	f240 1301 	movw	r3, #257	@ 0x101
 8016c42:	e9c0 5500 	strd	r5, r5, [r0]
 8016c46:	8183      	strh	r3, [r0, #12]
 8016c48:	3501      	adds	r5, #1
 8016c4a:	4621      	mov	r1, r4
 8016c4c:	4630      	mov	r0, r6
 8016c4e:	f004 fff7 	bl	801bc40 <put_memory>
 8016c52:	42af      	cmp	r7, r5
 8016c54:	60a4      	str	r4, [r4, #8]
 8016c56:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8016c5a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016c5e:	d1f3      	bne.n	8016c48 <rmw_uxrce_init_service_memory+0x20>
 8016c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c64:	4770      	bx	lr
 8016c66:	bf00      	nop

08016c68 <rmw_uxrce_init_client_memory>:
 8016c68:	b1e2      	cbz	r2, 8016ca4 <rmw_uxrce_init_client_memory+0x3c>
 8016c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c6e:	7b05      	ldrb	r5, [r0, #12]
 8016c70:	4606      	mov	r6, r0
 8016c72:	b9ad      	cbnz	r5, 8016ca0 <rmw_uxrce_init_client_memory+0x38>
 8016c74:	23c8      	movs	r3, #200	@ 0xc8
 8016c76:	4617      	mov	r7, r2
 8016c78:	460c      	mov	r4, r1
 8016c7a:	46a8      	mov	r8, r5
 8016c7c:	6083      	str	r3, [r0, #8]
 8016c7e:	f240 1301 	movw	r3, #257	@ 0x101
 8016c82:	e9c0 5500 	strd	r5, r5, [r0]
 8016c86:	8183      	strh	r3, [r0, #12]
 8016c88:	3501      	adds	r5, #1
 8016c8a:	4621      	mov	r1, r4
 8016c8c:	4630      	mov	r0, r6
 8016c8e:	f004 ffd7 	bl	801bc40 <put_memory>
 8016c92:	42af      	cmp	r7, r5
 8016c94:	60a4      	str	r4, [r4, #8]
 8016c96:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8016c9a:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016c9e:	d1f3      	bne.n	8016c88 <rmw_uxrce_init_client_memory+0x20>
 8016ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ca4:	4770      	bx	lr
 8016ca6:	bf00      	nop

08016ca8 <rmw_uxrce_init_publisher_memory>:
 8016ca8:	b1e2      	cbz	r2, 8016ce4 <rmw_uxrce_init_publisher_memory+0x3c>
 8016caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cae:	7b05      	ldrb	r5, [r0, #12]
 8016cb0:	4606      	mov	r6, r0
 8016cb2:	b9ad      	cbnz	r5, 8016ce0 <rmw_uxrce_init_publisher_memory+0x38>
 8016cb4:	23d8      	movs	r3, #216	@ 0xd8
 8016cb6:	4617      	mov	r7, r2
 8016cb8:	460c      	mov	r4, r1
 8016cba:	46a8      	mov	r8, r5
 8016cbc:	6083      	str	r3, [r0, #8]
 8016cbe:	f240 1301 	movw	r3, #257	@ 0x101
 8016cc2:	e9c0 5500 	strd	r5, r5, [r0]
 8016cc6:	8183      	strh	r3, [r0, #12]
 8016cc8:	3501      	adds	r5, #1
 8016cca:	4621      	mov	r1, r4
 8016ccc:	4630      	mov	r0, r6
 8016cce:	f004 ffb7 	bl	801bc40 <put_memory>
 8016cd2:	42af      	cmp	r7, r5
 8016cd4:	60a4      	str	r4, [r4, #8]
 8016cd6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8016cda:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016cde:	d1f3      	bne.n	8016cc8 <rmw_uxrce_init_publisher_memory+0x20>
 8016ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ce4:	4770      	bx	lr
 8016ce6:	bf00      	nop

08016ce8 <rmw_uxrce_init_subscription_memory>:
 8016ce8:	b1e2      	cbz	r2, 8016d24 <rmw_uxrce_init_subscription_memory+0x3c>
 8016cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cee:	7b05      	ldrb	r5, [r0, #12]
 8016cf0:	4606      	mov	r6, r0
 8016cf2:	b9ad      	cbnz	r5, 8016d20 <rmw_uxrce_init_subscription_memory+0x38>
 8016cf4:	23d8      	movs	r3, #216	@ 0xd8
 8016cf6:	4617      	mov	r7, r2
 8016cf8:	460c      	mov	r4, r1
 8016cfa:	46a8      	mov	r8, r5
 8016cfc:	6083      	str	r3, [r0, #8]
 8016cfe:	f240 1301 	movw	r3, #257	@ 0x101
 8016d02:	e9c0 5500 	strd	r5, r5, [r0]
 8016d06:	8183      	strh	r3, [r0, #12]
 8016d08:	3501      	adds	r5, #1
 8016d0a:	4621      	mov	r1, r4
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	f004 ff97 	bl	801bc40 <put_memory>
 8016d12:	42af      	cmp	r7, r5
 8016d14:	60a4      	str	r4, [r4, #8]
 8016d16:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8016d1a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016d1e:	d1f3      	bne.n	8016d08 <rmw_uxrce_init_subscription_memory+0x20>
 8016d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d24:	4770      	bx	lr
 8016d26:	bf00      	nop

08016d28 <rmw_uxrce_init_node_memory>:
 8016d28:	b1e2      	cbz	r2, 8016d64 <rmw_uxrce_init_node_memory+0x3c>
 8016d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d2e:	7b05      	ldrb	r5, [r0, #12]
 8016d30:	4606      	mov	r6, r0
 8016d32:	b9ad      	cbnz	r5, 8016d60 <rmw_uxrce_init_node_memory+0x38>
 8016d34:	23a4      	movs	r3, #164	@ 0xa4
 8016d36:	4617      	mov	r7, r2
 8016d38:	460c      	mov	r4, r1
 8016d3a:	46a8      	mov	r8, r5
 8016d3c:	6083      	str	r3, [r0, #8]
 8016d3e:	f240 1301 	movw	r3, #257	@ 0x101
 8016d42:	e9c0 5500 	strd	r5, r5, [r0]
 8016d46:	8183      	strh	r3, [r0, #12]
 8016d48:	3501      	adds	r5, #1
 8016d4a:	4621      	mov	r1, r4
 8016d4c:	4630      	mov	r0, r6
 8016d4e:	f004 ff77 	bl	801bc40 <put_memory>
 8016d52:	42af      	cmp	r7, r5
 8016d54:	60a4      	str	r4, [r4, #8]
 8016d56:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8016d5a:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016d5e:	d1f3      	bne.n	8016d48 <rmw_uxrce_init_node_memory+0x20>
 8016d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d64:	4770      	bx	lr
 8016d66:	bf00      	nop

08016d68 <rmw_uxrce_init_session_memory>:
 8016d68:	b1ea      	cbz	r2, 8016da6 <rmw_uxrce_init_session_memory+0x3e>
 8016d6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d6e:	7b05      	ldrb	r5, [r0, #12]
 8016d70:	4606      	mov	r6, r0
 8016d72:	b9b5      	cbnz	r5, 8016da2 <rmw_uxrce_init_session_memory+0x3a>
 8016d74:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8016d78:	f240 1301 	movw	r3, #257	@ 0x101
 8016d7c:	4617      	mov	r7, r2
 8016d7e:	460c      	mov	r4, r1
 8016d80:	46a9      	mov	r9, r5
 8016d82:	f8c0 8008 	str.w	r8, [r0, #8]
 8016d86:	8183      	strh	r3, [r0, #12]
 8016d88:	e9c0 5500 	strd	r5, r5, [r0]
 8016d8c:	3501      	adds	r5, #1
 8016d8e:	4621      	mov	r1, r4
 8016d90:	4630      	mov	r0, r6
 8016d92:	f004 ff55 	bl	801bc40 <put_memory>
 8016d96:	42af      	cmp	r7, r5
 8016d98:	60a4      	str	r4, [r4, #8]
 8016d9a:	f884 900c 	strb.w	r9, [r4, #12]
 8016d9e:	4444      	add	r4, r8
 8016da0:	d1f4      	bne.n	8016d8c <rmw_uxrce_init_session_memory+0x24>
 8016da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016da6:	4770      	bx	lr

08016da8 <rmw_uxrce_init_topic_memory>:
 8016da8:	b1e2      	cbz	r2, 8016de4 <rmw_uxrce_init_topic_memory+0x3c>
 8016daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dae:	7b05      	ldrb	r5, [r0, #12]
 8016db0:	4606      	mov	r6, r0
 8016db2:	b9ad      	cbnz	r5, 8016de0 <rmw_uxrce_init_topic_memory+0x38>
 8016db4:	231c      	movs	r3, #28
 8016db6:	4617      	mov	r7, r2
 8016db8:	460c      	mov	r4, r1
 8016dba:	46a8      	mov	r8, r5
 8016dbc:	6083      	str	r3, [r0, #8]
 8016dbe:	f240 1301 	movw	r3, #257	@ 0x101
 8016dc2:	e9c0 5500 	strd	r5, r5, [r0]
 8016dc6:	8183      	strh	r3, [r0, #12]
 8016dc8:	3501      	adds	r5, #1
 8016dca:	4621      	mov	r1, r4
 8016dcc:	4630      	mov	r0, r6
 8016dce:	f004 ff37 	bl	801bc40 <put_memory>
 8016dd2:	42af      	cmp	r7, r5
 8016dd4:	60a4      	str	r4, [r4, #8]
 8016dd6:	f104 041c 	add.w	r4, r4, #28
 8016dda:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016dde:	d1f3      	bne.n	8016dc8 <rmw_uxrce_init_topic_memory+0x20>
 8016de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016de4:	4770      	bx	lr
 8016de6:	bf00      	nop

08016de8 <rmw_uxrce_init_static_input_buffer_memory>:
 8016de8:	b1ea      	cbz	r2, 8016e26 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dee:	7b05      	ldrb	r5, [r0, #12]
 8016df0:	4606      	mov	r6, r0
 8016df2:	b9b5      	cbnz	r5, 8016e22 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016df4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8016df8:	4617      	mov	r7, r2
 8016dfa:	460c      	mov	r4, r1
 8016dfc:	46a8      	mov	r8, r5
 8016dfe:	6083      	str	r3, [r0, #8]
 8016e00:	f240 1301 	movw	r3, #257	@ 0x101
 8016e04:	e9c0 5500 	strd	r5, r5, [r0]
 8016e08:	8183      	strh	r3, [r0, #12]
 8016e0a:	3501      	adds	r5, #1
 8016e0c:	4621      	mov	r1, r4
 8016e0e:	4630      	mov	r0, r6
 8016e10:	f004 ff16 	bl	801bc40 <put_memory>
 8016e14:	42af      	cmp	r7, r5
 8016e16:	60a4      	str	r4, [r4, #8]
 8016e18:	f884 800c 	strb.w	r8, [r4, #12]
 8016e1c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8016e20:	d1f3      	bne.n	8016e0a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e26:	4770      	bx	lr

08016e28 <rmw_uxrce_init_init_options_impl_memory>:
 8016e28:	b1e2      	cbz	r2, 8016e64 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8016e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e2e:	7b05      	ldrb	r5, [r0, #12]
 8016e30:	4606      	mov	r6, r0
 8016e32:	b9ad      	cbnz	r5, 8016e60 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016e34:	232c      	movs	r3, #44	@ 0x2c
 8016e36:	4617      	mov	r7, r2
 8016e38:	460c      	mov	r4, r1
 8016e3a:	46a8      	mov	r8, r5
 8016e3c:	6083      	str	r3, [r0, #8]
 8016e3e:	f240 1301 	movw	r3, #257	@ 0x101
 8016e42:	e9c0 5500 	strd	r5, r5, [r0]
 8016e46:	8183      	strh	r3, [r0, #12]
 8016e48:	3501      	adds	r5, #1
 8016e4a:	4621      	mov	r1, r4
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	f004 fef7 	bl	801bc40 <put_memory>
 8016e52:	42af      	cmp	r7, r5
 8016e54:	60a4      	str	r4, [r4, #8]
 8016e56:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8016e5a:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016e5e:	d1f3      	bne.n	8016e48 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e64:	4770      	bx	lr
 8016e66:	bf00      	nop

08016e68 <rmw_uxrce_init_wait_set_memory>:
 8016e68:	b1e2      	cbz	r2, 8016ea4 <rmw_uxrce_init_wait_set_memory+0x3c>
 8016e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e6e:	7b05      	ldrb	r5, [r0, #12]
 8016e70:	4606      	mov	r6, r0
 8016e72:	b9ad      	cbnz	r5, 8016ea0 <rmw_uxrce_init_wait_set_memory+0x38>
 8016e74:	231c      	movs	r3, #28
 8016e76:	4617      	mov	r7, r2
 8016e78:	460c      	mov	r4, r1
 8016e7a:	46a8      	mov	r8, r5
 8016e7c:	6083      	str	r3, [r0, #8]
 8016e7e:	f240 1301 	movw	r3, #257	@ 0x101
 8016e82:	e9c0 5500 	strd	r5, r5, [r0]
 8016e86:	8183      	strh	r3, [r0, #12]
 8016e88:	3501      	adds	r5, #1
 8016e8a:	4621      	mov	r1, r4
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	f004 fed7 	bl	801bc40 <put_memory>
 8016e92:	42af      	cmp	r7, r5
 8016e94:	60a4      	str	r4, [r4, #8]
 8016e96:	f104 041c 	add.w	r4, r4, #28
 8016e9a:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016e9e:	d1f3      	bne.n	8016e88 <rmw_uxrce_init_wait_set_memory+0x20>
 8016ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ea4:	4770      	bx	lr
 8016ea6:	bf00      	nop

08016ea8 <rmw_uxrce_init_guard_condition_memory>:
 8016ea8:	b1e2      	cbz	r2, 8016ee4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8016eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eae:	7b05      	ldrb	r5, [r0, #12]
 8016eb0:	4606      	mov	r6, r0
 8016eb2:	b9ad      	cbnz	r5, 8016ee0 <rmw_uxrce_init_guard_condition_memory+0x38>
 8016eb4:	2320      	movs	r3, #32
 8016eb6:	4617      	mov	r7, r2
 8016eb8:	460c      	mov	r4, r1
 8016eba:	46a8      	mov	r8, r5
 8016ebc:	6083      	str	r3, [r0, #8]
 8016ebe:	f240 1301 	movw	r3, #257	@ 0x101
 8016ec2:	e9c0 5500 	strd	r5, r5, [r0]
 8016ec6:	8183      	strh	r3, [r0, #12]
 8016ec8:	3501      	adds	r5, #1
 8016eca:	4621      	mov	r1, r4
 8016ecc:	4630      	mov	r0, r6
 8016ece:	f004 feb7 	bl	801bc40 <put_memory>
 8016ed2:	42af      	cmp	r7, r5
 8016ed4:	60a4      	str	r4, [r4, #8]
 8016ed6:	f104 0420 	add.w	r4, r4, #32
 8016eda:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016ede:	d1f3      	bne.n	8016ec8 <rmw_uxrce_init_guard_condition_memory+0x20>
 8016ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ee4:	4770      	bx	lr
 8016ee6:	bf00      	nop

08016ee8 <rmw_uxrce_fini_session_memory>:
 8016ee8:	4601      	mov	r1, r0
 8016eea:	4801      	ldr	r0, [pc, #4]	@ (8016ef0 <rmw_uxrce_fini_session_memory+0x8>)
 8016eec:	f004 bea8 	b.w	801bc40 <put_memory>
 8016ef0:	240692a4 	.word	0x240692a4

08016ef4 <rmw_uxrce_fini_node_memory>:
 8016ef4:	b538      	push	{r3, r4, r5, lr}
 8016ef6:	4604      	mov	r4, r0
 8016ef8:	6800      	ldr	r0, [r0, #0]
 8016efa:	b128      	cbz	r0, 8016f08 <rmw_uxrce_fini_node_memory+0x14>
 8016efc:	4b07      	ldr	r3, [pc, #28]	@ (8016f1c <rmw_uxrce_fini_node_memory+0x28>)
 8016efe:	6819      	ldr	r1, [r3, #0]
 8016f00:	f7e9 f9ee 	bl	80002e0 <strcmp>
 8016f04:	b940      	cbnz	r0, 8016f18 <rmw_uxrce_fini_node_memory+0x24>
 8016f06:	6020      	str	r0, [r4, #0]
 8016f08:	6861      	ldr	r1, [r4, #4]
 8016f0a:	b129      	cbz	r1, 8016f18 <rmw_uxrce_fini_node_memory+0x24>
 8016f0c:	2500      	movs	r5, #0
 8016f0e:	4804      	ldr	r0, [pc, #16]	@ (8016f20 <rmw_uxrce_fini_node_memory+0x2c>)
 8016f10:	610d      	str	r5, [r1, #16]
 8016f12:	f004 fe95 	bl	801bc40 <put_memory>
 8016f16:	6065      	str	r5, [r4, #4]
 8016f18:	bd38      	pop	{r3, r4, r5, pc}
 8016f1a:	bf00      	nop
 8016f1c:	08020810 	.word	0x08020810
 8016f20:	24069274 	.word	0x24069274

08016f24 <rmw_uxrce_fini_publisher_memory>:
 8016f24:	b510      	push	{r4, lr}
 8016f26:	4604      	mov	r4, r0
 8016f28:	6800      	ldr	r0, [r0, #0]
 8016f2a:	b128      	cbz	r0, 8016f38 <rmw_uxrce_fini_publisher_memory+0x14>
 8016f2c:	4b06      	ldr	r3, [pc, #24]	@ (8016f48 <rmw_uxrce_fini_publisher_memory+0x24>)
 8016f2e:	6819      	ldr	r1, [r3, #0]
 8016f30:	f7e9 f9d6 	bl	80002e0 <strcmp>
 8016f34:	b938      	cbnz	r0, 8016f46 <rmw_uxrce_fini_publisher_memory+0x22>
 8016f36:	6020      	str	r0, [r4, #0]
 8016f38:	6861      	ldr	r1, [r4, #4]
 8016f3a:	b121      	cbz	r1, 8016f46 <rmw_uxrce_fini_publisher_memory+0x22>
 8016f3c:	4803      	ldr	r0, [pc, #12]	@ (8016f4c <rmw_uxrce_fini_publisher_memory+0x28>)
 8016f3e:	f004 fe7f 	bl	801bc40 <put_memory>
 8016f42:	2300      	movs	r3, #0
 8016f44:	6063      	str	r3, [r4, #4]
 8016f46:	bd10      	pop	{r4, pc}
 8016f48:	08020810 	.word	0x08020810
 8016f4c:	24069284 	.word	0x24069284

08016f50 <rmw_uxrce_fini_subscription_memory>:
 8016f50:	b510      	push	{r4, lr}
 8016f52:	4604      	mov	r4, r0
 8016f54:	6800      	ldr	r0, [r0, #0]
 8016f56:	b128      	cbz	r0, 8016f64 <rmw_uxrce_fini_subscription_memory+0x14>
 8016f58:	4b06      	ldr	r3, [pc, #24]	@ (8016f74 <rmw_uxrce_fini_subscription_memory+0x24>)
 8016f5a:	6819      	ldr	r1, [r3, #0]
 8016f5c:	f7e9 f9c0 	bl	80002e0 <strcmp>
 8016f60:	b938      	cbnz	r0, 8016f72 <rmw_uxrce_fini_subscription_memory+0x22>
 8016f62:	6020      	str	r0, [r4, #0]
 8016f64:	6861      	ldr	r1, [r4, #4]
 8016f66:	b121      	cbz	r1, 8016f72 <rmw_uxrce_fini_subscription_memory+0x22>
 8016f68:	4803      	ldr	r0, [pc, #12]	@ (8016f78 <rmw_uxrce_fini_subscription_memory+0x28>)
 8016f6a:	f004 fe69 	bl	801bc40 <put_memory>
 8016f6e:	2300      	movs	r3, #0
 8016f70:	6063      	str	r3, [r4, #4]
 8016f72:	bd10      	pop	{r4, pc}
 8016f74:	08020810 	.word	0x08020810
 8016f78:	240692c4 	.word	0x240692c4

08016f7c <rmw_uxrce_fini_service_memory>:
 8016f7c:	b510      	push	{r4, lr}
 8016f7e:	4604      	mov	r4, r0
 8016f80:	6800      	ldr	r0, [r0, #0]
 8016f82:	b128      	cbz	r0, 8016f90 <rmw_uxrce_fini_service_memory+0x14>
 8016f84:	4b06      	ldr	r3, [pc, #24]	@ (8016fa0 <rmw_uxrce_fini_service_memory+0x24>)
 8016f86:	6819      	ldr	r1, [r3, #0]
 8016f88:	f7e9 f9aa 	bl	80002e0 <strcmp>
 8016f8c:	b938      	cbnz	r0, 8016f9e <rmw_uxrce_fini_service_memory+0x22>
 8016f8e:	6020      	str	r0, [r4, #0]
 8016f90:	6861      	ldr	r1, [r4, #4]
 8016f92:	b121      	cbz	r1, 8016f9e <rmw_uxrce_fini_service_memory+0x22>
 8016f94:	4803      	ldr	r0, [pc, #12]	@ (8016fa4 <rmw_uxrce_fini_service_memory+0x28>)
 8016f96:	f004 fe53 	bl	801bc40 <put_memory>
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	6063      	str	r3, [r4, #4]
 8016f9e:	bd10      	pop	{r4, pc}
 8016fa0:	08020810 	.word	0x08020810
 8016fa4:	24069294 	.word	0x24069294

08016fa8 <rmw_uxrce_fini_client_memory>:
 8016fa8:	b510      	push	{r4, lr}
 8016faa:	4604      	mov	r4, r0
 8016fac:	6800      	ldr	r0, [r0, #0]
 8016fae:	b128      	cbz	r0, 8016fbc <rmw_uxrce_fini_client_memory+0x14>
 8016fb0:	4b06      	ldr	r3, [pc, #24]	@ (8016fcc <rmw_uxrce_fini_client_memory+0x24>)
 8016fb2:	6819      	ldr	r1, [r3, #0]
 8016fb4:	f7e9 f994 	bl	80002e0 <strcmp>
 8016fb8:	b938      	cbnz	r0, 8016fca <rmw_uxrce_fini_client_memory+0x22>
 8016fba:	6020      	str	r0, [r4, #0]
 8016fbc:	6861      	ldr	r1, [r4, #4]
 8016fbe:	b121      	cbz	r1, 8016fca <rmw_uxrce_fini_client_memory+0x22>
 8016fc0:	4803      	ldr	r0, [pc, #12]	@ (8016fd0 <rmw_uxrce_fini_client_memory+0x28>)
 8016fc2:	f004 fe3d 	bl	801bc40 <put_memory>
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	6063      	str	r3, [r4, #4]
 8016fca:	bd10      	pop	{r4, pc}
 8016fcc:	08020810 	.word	0x08020810
 8016fd0:	240649a8 	.word	0x240649a8

08016fd4 <rmw_uxrce_fini_topic_memory>:
 8016fd4:	b510      	push	{r4, lr}
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	4803      	ldr	r0, [pc, #12]	@ (8016fe8 <rmw_uxrce_fini_topic_memory+0x14>)
 8016fda:	4621      	mov	r1, r4
 8016fdc:	f004 fe30 	bl	801bc40 <put_memory>
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	61a3      	str	r3, [r4, #24]
 8016fe4:	bd10      	pop	{r4, pc}
 8016fe6:	bf00      	nop
 8016fe8:	240692d4 	.word	0x240692d4

08016fec <rmw_uxrce_get_static_input_buffer_for_entity>:
 8016fec:	b082      	sub	sp, #8
 8016fee:	492b      	ldr	r1, [pc, #172]	@ (801709c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016ff0:	b530      	push	{r4, r5, lr}
 8016ff2:	680d      	ldr	r5, [r1, #0]
 8016ff4:	ac03      	add	r4, sp, #12
 8016ff6:	e884 000c 	stmia.w	r4, {r2, r3}
 8016ffa:	461c      	mov	r4, r3
 8016ffc:	2d00      	cmp	r5, #0
 8016ffe:	d04b      	beq.n	8017098 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8017000:	462b      	mov	r3, r5
 8017002:	2100      	movs	r1, #0
 8017004:	689a      	ldr	r2, [r3, #8]
 8017006:	685b      	ldr	r3, [r3, #4]
 8017008:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801700c:	4290      	cmp	r0, r2
 801700e:	bf08      	it	eq
 8017010:	3101      	addeq	r1, #1
 8017012:	2b00      	cmp	r3, #0
 8017014:	d1f6      	bne.n	8017004 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8017016:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801701a:	2b02      	cmp	r3, #2
 801701c:	d029      	beq.n	8017072 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801701e:	d820      	bhi.n	8017062 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8017020:	428c      	cmp	r4, r1
 8017022:	d828      	bhi.n	8017076 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8017024:	fab4 f284 	clz	r2, r4
 8017028:	0952      	lsrs	r2, r2, #5
 801702a:	b324      	cbz	r4, 8017076 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801702c:	b1dd      	cbz	r5, 8017066 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801702e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8017032:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8017036:	e001      	b.n	801703c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8017038:	686d      	ldr	r5, [r5, #4]
 801703a:	b1ad      	cbz	r5, 8017068 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801703c:	68ab      	ldr	r3, [r5, #8]
 801703e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8017042:	4288      	cmp	r0, r1
 8017044:	d1f8      	bne.n	8017038 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8017046:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 801704a:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801704e:	4561      	cmp	r1, ip
 8017050:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017054:	eb73 0e04 	sbcs.w	lr, r3, r4
 8017058:	daee      	bge.n	8017038 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801705a:	468c      	mov	ip, r1
 801705c:	461c      	mov	r4, r3
 801705e:	462a      	mov	r2, r5
 8017060:	e7ea      	b.n	8017038 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8017062:	2b03      	cmp	r3, #3
 8017064:	d0dc      	beq.n	8017020 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8017066:	2200      	movs	r2, #0
 8017068:	4610      	mov	r0, r2
 801706a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801706e:	b002      	add	sp, #8
 8017070:	4770      	bx	lr
 8017072:	428c      	cmp	r4, r1
 8017074:	d905      	bls.n	8017082 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8017076:	4809      	ldr	r0, [pc, #36]	@ (801709c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8017078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801707c:	b002      	add	sp, #8
 801707e:	f004 bdcf 	b.w	801bc20 <get_memory>
 8017082:	fab4 f284 	clz	r2, r4
 8017086:	0952      	lsrs	r2, r2, #5
 8017088:	2c00      	cmp	r4, #0
 801708a:	d1ed      	bne.n	8017068 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801708c:	4803      	ldr	r0, [pc, #12]	@ (801709c <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801708e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017092:	b002      	add	sp, #8
 8017094:	f004 bdc4 	b.w	801bc20 <get_memory>
 8017098:	4629      	mov	r1, r5
 801709a:	e7bc      	b.n	8017016 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801709c:	240692b4 	.word	0x240692b4

080170a0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80170a0:	4b12      	ldr	r3, [pc, #72]	@ (80170ec <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	b530      	push	{r4, r5, lr}
 80170a6:	b1f3      	cbz	r3, 80170e6 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80170a8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80170ac:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80170b0:	2400      	movs	r4, #0
 80170b2:	e001      	b.n	80170b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80170b4:	685b      	ldr	r3, [r3, #4]
 80170b6:	b1a3      	cbz	r3, 80170e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80170b8:	689a      	ldr	r2, [r3, #8]
 80170ba:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80170be:	4288      	cmp	r0, r1
 80170c0:	d1f8      	bne.n	80170b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80170c2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80170c6:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 80170ca:	4571      	cmp	r1, lr
 80170cc:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80170d0:	eb72 050c 	sbcs.w	r5, r2, ip
 80170d4:	daee      	bge.n	80170b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80170d6:	461c      	mov	r4, r3
 80170d8:	685b      	ldr	r3, [r3, #4]
 80170da:	468e      	mov	lr, r1
 80170dc:	4694      	mov	ip, r2
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d1ea      	bne.n	80170b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80170e2:	4620      	mov	r0, r4
 80170e4:	bd30      	pop	{r4, r5, pc}
 80170e6:	461c      	mov	r4, r3
 80170e8:	4620      	mov	r0, r4
 80170ea:	bd30      	pop	{r4, r5, pc}
 80170ec:	240692b4 	.word	0x240692b4

080170f0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80170f0:	4b3d      	ldr	r3, [pc, #244]	@ (80171e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80170f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f6:	681f      	ldr	r7, [r3, #0]
 80170f8:	ed2d 8b06 	vpush	{d8-d10}
 80170fc:	b08d      	sub	sp, #52	@ 0x34
 80170fe:	f004 fe4f 	bl	801bda0 <rmw_uros_epoch_nanos>
 8017102:	2f00      	cmp	r7, #0
 8017104:	d05d      	beq.n	80171c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8017106:	46b8      	mov	r8, r7
 8017108:	4681      	mov	r9, r0
 801710a:	468a      	mov	sl, r1
 801710c:	ac04      	add	r4, sp, #16
 801710e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017112:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8017116:	2b04      	cmp	r3, #4
 8017118:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 80171d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801711c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 80171d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8017120:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 80171e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8017124:	d03f      	beq.n	80171a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8017126:	2b05      	cmp	r3, #5
 8017128:	d044      	beq.n	80171b4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801712a:	2b03      	cmp	r3, #3
 801712c:	d03b      	beq.n	80171a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801712e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8017132:	ed8d ab06 	vstr	d10, [sp, #24]
 8017136:	ab08      	add	r3, sp, #32
 8017138:	ed8d 8b08 	vstr	d8, [sp, #32]
 801713c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8017140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017142:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017146:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801714a:	f004 fbf9 	bl	801b940 <rmw_time_equal>
 801714e:	b118      	cbz	r0, 8017158 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8017150:	ed8d 9b04 	vstr	d9, [sp, #16]
 8017154:	ed8d 8b06 	vstr	d8, [sp, #24]
 8017158:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 801715c:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8017160:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8017164:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8017168:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801716c:	f004 fc3e 	bl	801b9ec <rmw_time_total_nsec>
 8017170:	1830      	adds	r0, r6, r0
 8017172:	eb47 0101 	adc.w	r1, r7, r1
 8017176:	4548      	cmp	r0, r9
 8017178:	eb71 030a 	sbcs.w	r3, r1, sl
 801717c:	db05      	blt.n	801718a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801717e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8017182:	4591      	cmp	r9, r2
 8017184:	eb7a 0303 	sbcs.w	r3, sl, r3
 8017188:	da03      	bge.n	8017192 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801718a:	4641      	mov	r1, r8
 801718c:	4816      	ldr	r0, [pc, #88]	@ (80171e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801718e:	f004 fd57 	bl	801bc40 <put_memory>
 8017192:	f1bb 0f00 	cmp.w	fp, #0
 8017196:	d014      	beq.n	80171c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8017198:	46d8      	mov	r8, fp
 801719a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801719e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80171a2:	2b04      	cmp	r3, #4
 80171a4:	d1bf      	bne.n	8017126 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80171a6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80171aa:	3340      	adds	r3, #64	@ 0x40
 80171ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80171ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80171b2:	e7c0      	b.n	8017136 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80171b4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80171b8:	3348      	adds	r3, #72	@ 0x48
 80171ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80171bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80171c0:	e7b9      	b.n	8017136 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80171c2:	b00d      	add	sp, #52	@ 0x34
 80171c4:	ecbd 8b06 	vpop	{d8-d10}
 80171c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171cc:	f3af 8000 	nop.w
	...
 80171d8:	00000001 	.word	0x00000001
 80171dc:	00000000 	.word	0x00000000
 80171e0:	0000001e 	.word	0x0000001e
 80171e4:	00000000 	.word	0x00000000
 80171e8:	240692b4 	.word	0x240692b4

080171ec <run_xrce_session>:
 80171ec:	b510      	push	{r4, lr}
 80171ee:	788c      	ldrb	r4, [r1, #2]
 80171f0:	b086      	sub	sp, #24
 80171f2:	2c01      	cmp	r4, #1
 80171f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80171f8:	d00c      	beq.n	8017214 <run_xrce_session+0x28>
 80171fa:	2401      	movs	r4, #1
 80171fc:	4619      	mov	r1, r3
 80171fe:	f10d 020e 	add.w	r2, sp, #14
 8017202:	f10d 0317 	add.w	r3, sp, #23
 8017206:	9400      	str	r4, [sp, #0]
 8017208:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801720c:	f001 fd90 	bl	8018d30 <uxr_run_session_until_all_status>
 8017210:	b006      	add	sp, #24
 8017212:	bd10      	pop	{r4, pc}
 8017214:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017218:	f001 f9ac 	bl	8018574 <uxr_flash_output_streams>
 801721c:	4620      	mov	r0, r4
 801721e:	b006      	add	sp, #24
 8017220:	bd10      	pop	{r4, pc}
 8017222:	bf00      	nop

08017224 <convert_qos_profile>:
 8017224:	7a4a      	ldrb	r2, [r1, #9]
 8017226:	f891 c008 	ldrb.w	ip, [r1, #8]
 801722a:	2a02      	cmp	r2, #2
 801722c:	bf18      	it	ne
 801722e:	2200      	movne	r2, #0
 8017230:	7002      	strb	r2, [r0, #0]
 8017232:	f1ac 0202 	sub.w	r2, ip, #2
 8017236:	fab2 f282 	clz	r2, r2
 801723a:	0952      	lsrs	r2, r2, #5
 801723c:	7042      	strb	r2, [r0, #1]
 801723e:	780a      	ldrb	r2, [r1, #0]
 8017240:	8889      	ldrh	r1, [r1, #4]
 8017242:	f1a2 0202 	sub.w	r2, r2, #2
 8017246:	8081      	strh	r1, [r0, #4]
 8017248:	fab2 f282 	clz	r2, r2
 801724c:	0952      	lsrs	r2, r2, #5
 801724e:	7082      	strb	r2, [r0, #2]
 8017250:	4770      	bx	lr
 8017252:	bf00      	nop

08017254 <generate_service_topics>:
 8017254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017256:	461d      	mov	r5, r3
 8017258:	b083      	sub	sp, #12
 801725a:	4606      	mov	r6, r0
 801725c:	4c11      	ldr	r4, [pc, #68]	@ (80172a4 <generate_service_topics+0x50>)
 801725e:	4608      	mov	r0, r1
 8017260:	4b11      	ldr	r3, [pc, #68]	@ (80172a8 <generate_service_topics+0x54>)
 8017262:	4617      	mov	r7, r2
 8017264:	4629      	mov	r1, r5
 8017266:	4a11      	ldr	r2, [pc, #68]	@ (80172ac <generate_service_topics+0x58>)
 8017268:	9401      	str	r4, [sp, #4]
 801726a:	9600      	str	r6, [sp, #0]
 801726c:	f005 fedc 	bl	801d028 <sniprintf>
 8017270:	4a0f      	ldr	r2, [pc, #60]	@ (80172b0 <generate_service_topics+0x5c>)
 8017272:	4604      	mov	r4, r0
 8017274:	4b0f      	ldr	r3, [pc, #60]	@ (80172b4 <generate_service_topics+0x60>)
 8017276:	9201      	str	r2, [sp, #4]
 8017278:	4638      	mov	r0, r7
 801727a:	4a0c      	ldr	r2, [pc, #48]	@ (80172ac <generate_service_topics+0x58>)
 801727c:	4629      	mov	r1, r5
 801727e:	9600      	str	r6, [sp, #0]
 8017280:	f005 fed2 	bl	801d028 <sniprintf>
 8017284:	2c00      	cmp	r4, #0
 8017286:	bfa8      	it	ge
 8017288:	42a5      	cmpge	r5, r4
 801728a:	bfcc      	ite	gt
 801728c:	2401      	movgt	r4, #1
 801728e:	2400      	movle	r4, #0
 8017290:	dd05      	ble.n	801729e <generate_service_topics+0x4a>
 8017292:	2800      	cmp	r0, #0
 8017294:	bfa8      	it	ge
 8017296:	4285      	cmpge	r5, r0
 8017298:	bfcc      	ite	gt
 801729a:	2401      	movgt	r4, #1
 801729c:	2400      	movle	r4, #0
 801729e:	4620      	mov	r0, r4
 80172a0:	b003      	add	sp, #12
 80172a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172a4:	08020500 	.word	0x08020500
 80172a8:	080204fc 	.word	0x080204fc
 80172ac:	080204e0 	.word	0x080204e0
 80172b0:	080204f4 	.word	0x080204f4
 80172b4:	080204f0 	.word	0x080204f0

080172b8 <generate_service_types>:
 80172b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172bc:	4606      	mov	r6, r0
 80172be:	b087      	sub	sp, #28
 80172c0:	461c      	mov	r4, r3
 80172c2:	6883      	ldr	r3, [r0, #8]
 80172c4:	460d      	mov	r5, r1
 80172c6:	4617      	mov	r7, r2
 80172c8:	4798      	blx	r3
 80172ca:	68f3      	ldr	r3, [r6, #12]
 80172cc:	4606      	mov	r6, r0
 80172ce:	4798      	blx	r3
 80172d0:	2300      	movs	r3, #0
 80172d2:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80172d6:	6872      	ldr	r2, [r6, #4]
 80172d8:	702b      	strb	r3, [r5, #0]
 80172da:	6813      	ldr	r3, [r2, #0]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d03f      	beq.n	8017360 <generate_service_types+0xa8>
 80172e0:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8017374 <generate_service_types+0xbc>
 80172e4:	4649      	mov	r1, r9
 80172e6:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 801737c <generate_service_types+0xc4>
 80172ea:	4628      	mov	r0, r5
 80172ec:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8017380 <generate_service_types+0xc8>
 80172f0:	f8cd 8014 	str.w	r8, [sp, #20]
 80172f4:	6852      	ldr	r2, [r2, #4]
 80172f6:	9100      	str	r1, [sp, #0]
 80172f8:	4621      	mov	r1, r4
 80172fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80172fe:	f8cd a004 	str.w	sl, [sp, #4]
 8017302:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8017306:	4a1a      	ldr	r2, [pc, #104]	@ (8017370 <generate_service_types+0xb8>)
 8017308:	f005 fe8e 	bl	801d028 <sniprintf>
 801730c:	2300      	movs	r3, #0
 801730e:	42a0      	cmp	r0, r4
 8017310:	ea6f 0600 	mvn.w	r6, r0
 8017314:	703b      	strb	r3, [r7, #0]
 8017316:	f8db 3000 	ldr.w	r3, [fp]
 801731a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801731e:	bfac      	ite	ge
 8017320:	2500      	movge	r5, #0
 8017322:	2501      	movlt	r5, #1
 8017324:	b30b      	cbz	r3, 801736a <generate_service_types+0xb2>
 8017326:	4a13      	ldr	r2, [pc, #76]	@ (8017374 <generate_service_types+0xbc>)
 8017328:	f8cd 8014 	str.w	r8, [sp, #20]
 801732c:	402e      	ands	r6, r5
 801732e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8017332:	4638      	mov	r0, r7
 8017334:	9104      	str	r1, [sp, #16]
 8017336:	4621      	mov	r1, r4
 8017338:	e9cd 2a00 	strd	r2, sl, [sp]
 801733c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017340:	4a0b      	ldr	r2, [pc, #44]	@ (8017370 <generate_service_types+0xb8>)
 8017342:	f005 fe71 	bl	801d028 <sniprintf>
 8017346:	2800      	cmp	r0, #0
 8017348:	bfb4      	ite	lt
 801734a:	2600      	movlt	r6, #0
 801734c:	f006 0601 	andge.w	r6, r6, #1
 8017350:	42a0      	cmp	r0, r4
 8017352:	bfac      	ite	ge
 8017354:	2000      	movge	r0, #0
 8017356:	f006 0001 	andlt.w	r0, r6, #1
 801735a:	b007      	add	sp, #28
 801735c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017360:	4b05      	ldr	r3, [pc, #20]	@ (8017378 <generate_service_types+0xc0>)
 8017362:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 8017374 <generate_service_types+0xbc>
 8017366:	4619      	mov	r1, r3
 8017368:	e7bd      	b.n	80172e6 <generate_service_types+0x2e>
 801736a:	4b03      	ldr	r3, [pc, #12]	@ (8017378 <generate_service_types+0xc0>)
 801736c:	461a      	mov	r2, r3
 801736e:	e7db      	b.n	8017328 <generate_service_types+0x70>
 8017370:	080204d8 	.word	0x080204d8
 8017374:	080204d4 	.word	0x080204d4
 8017378:	08020860 	.word	0x08020860
 801737c:	080204e8 	.word	0x080204e8
 8017380:	080204ec 	.word	0x080204ec

08017384 <generate_type_name>:
 8017384:	2300      	movs	r3, #0
 8017386:	b530      	push	{r4, r5, lr}
 8017388:	700b      	strb	r3, [r1, #0]
 801738a:	b087      	sub	sp, #28
 801738c:	6803      	ldr	r3, [r0, #0]
 801738e:	4614      	mov	r4, r2
 8017390:	b1bb      	cbz	r3, 80173c2 <generate_type_name+0x3e>
 8017392:	4a0e      	ldr	r2, [pc, #56]	@ (80173cc <generate_type_name+0x48>)
 8017394:	4615      	mov	r5, r2
 8017396:	9500      	str	r5, [sp, #0]
 8017398:	9203      	str	r2, [sp, #12]
 801739a:	4d0d      	ldr	r5, [pc, #52]	@ (80173d0 <generate_type_name+0x4c>)
 801739c:	6842      	ldr	r2, [r0, #4]
 801739e:	4608      	mov	r0, r1
 80173a0:	490c      	ldr	r1, [pc, #48]	@ (80173d4 <generate_type_name+0x50>)
 80173a2:	9204      	str	r2, [sp, #16]
 80173a4:	9105      	str	r1, [sp, #20]
 80173a6:	9102      	str	r1, [sp, #8]
 80173a8:	4621      	mov	r1, r4
 80173aa:	4a0b      	ldr	r2, [pc, #44]	@ (80173d8 <generate_type_name+0x54>)
 80173ac:	9501      	str	r5, [sp, #4]
 80173ae:	f005 fe3b 	bl	801d028 <sniprintf>
 80173b2:	2800      	cmp	r0, #0
 80173b4:	bfa8      	it	ge
 80173b6:	4284      	cmpge	r4, r0
 80173b8:	bfcc      	ite	gt
 80173ba:	2001      	movgt	r0, #1
 80173bc:	2000      	movle	r0, #0
 80173be:	b007      	add	sp, #28
 80173c0:	bd30      	pop	{r4, r5, pc}
 80173c2:	4b06      	ldr	r3, [pc, #24]	@ (80173dc <generate_type_name+0x58>)
 80173c4:	4a01      	ldr	r2, [pc, #4]	@ (80173cc <generate_type_name+0x48>)
 80173c6:	461d      	mov	r5, r3
 80173c8:	e7e5      	b.n	8017396 <generate_type_name+0x12>
 80173ca:	bf00      	nop
 80173cc:	080204d4 	.word	0x080204d4
 80173d0:	080204ec 	.word	0x080204ec
 80173d4:	080204e8 	.word	0x080204e8
 80173d8:	080204d8 	.word	0x080204d8
 80173dc:	08020860 	.word	0x08020860

080173e0 <generate_topic_name>:
 80173e0:	b530      	push	{r4, r5, lr}
 80173e2:	4614      	mov	r4, r2
 80173e4:	b083      	sub	sp, #12
 80173e6:	4605      	mov	r5, r0
 80173e8:	4b07      	ldr	r3, [pc, #28]	@ (8017408 <generate_topic_name+0x28>)
 80173ea:	4a08      	ldr	r2, [pc, #32]	@ (801740c <generate_topic_name+0x2c>)
 80173ec:	4608      	mov	r0, r1
 80173ee:	9500      	str	r5, [sp, #0]
 80173f0:	4621      	mov	r1, r4
 80173f2:	f005 fe19 	bl	801d028 <sniprintf>
 80173f6:	2800      	cmp	r0, #0
 80173f8:	bfa8      	it	ge
 80173fa:	4284      	cmpge	r4, r0
 80173fc:	bfcc      	ite	gt
 80173fe:	2001      	movgt	r0, #1
 8017400:	2000      	movle	r0, #0
 8017402:	b003      	add	sp, #12
 8017404:	bd30      	pop	{r4, r5, pc}
 8017406:	bf00      	nop
 8017408:	08020508 	.word	0x08020508
 801740c:	0801fea0 	.word	0x0801fea0

08017410 <is_uxrce_rmw_identifier_valid>:
 8017410:	b510      	push	{r4, lr}
 8017412:	4604      	mov	r4, r0
 8017414:	b140      	cbz	r0, 8017428 <is_uxrce_rmw_identifier_valid+0x18>
 8017416:	f7fe f949 	bl	80156ac <rmw_get_implementation_identifier>
 801741a:	4601      	mov	r1, r0
 801741c:	4620      	mov	r0, r4
 801741e:	f7e8 ff5f 	bl	80002e0 <strcmp>
 8017422:	fab0 f080 	clz	r0, r0
 8017426:	0940      	lsrs	r0, r0, #5
 8017428:	bd10      	pop	{r4, pc}
 801742a:	bf00      	nop

0801742c <std_msgs__msg__Header__init>:
 801742c:	b570      	push	{r4, r5, r6, lr}
 801742e:	4605      	mov	r5, r0
 8017430:	b1a8      	cbz	r0, 801745e <std_msgs__msg__Header__init+0x32>
 8017432:	f7fa fbf7 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8017436:	4604      	mov	r4, r0
 8017438:	b140      	cbz	r0, 801744c <std_msgs__msg__Header__init+0x20>
 801743a:	f105 0608 	add.w	r6, r5, #8
 801743e:	4630      	mov	r0, r6
 8017440:	f004 fcbc 	bl	801bdbc <rosidl_runtime_c__String__init>
 8017444:	4604      	mov	r4, r0
 8017446:	b168      	cbz	r0, 8017464 <std_msgs__msg__Header__init+0x38>
 8017448:	4620      	mov	r0, r4
 801744a:	bd70      	pop	{r4, r5, r6, pc}
 801744c:	4628      	mov	r0, r5
 801744e:	f7fa fbed 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8017452:	f105 0008 	add.w	r0, r5, #8
 8017456:	f004 fcc7 	bl	801bde8 <rosidl_runtime_c__String__fini>
 801745a:	4620      	mov	r0, r4
 801745c:	bd70      	pop	{r4, r5, r6, pc}
 801745e:	4604      	mov	r4, r0
 8017460:	4620      	mov	r0, r4
 8017462:	bd70      	pop	{r4, r5, r6, pc}
 8017464:	4628      	mov	r0, r5
 8017466:	f7fa fbe1 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 801746a:	4630      	mov	r0, r6
 801746c:	f004 fcbc 	bl	801bde8 <rosidl_runtime_c__String__fini>
 8017470:	e7ea      	b.n	8017448 <std_msgs__msg__Header__init+0x1c>
 8017472:	bf00      	nop

08017474 <std_msgs__msg__Header__fini>:
 8017474:	b148      	cbz	r0, 801748a <std_msgs__msg__Header__fini+0x16>
 8017476:	b510      	push	{r4, lr}
 8017478:	4604      	mov	r4, r0
 801747a:	f7fa fbd7 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 801747e:	f104 0008 	add.w	r0, r4, #8
 8017482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017486:	f004 bcaf 	b.w	801bde8 <rosidl_runtime_c__String__fini>
 801748a:	4770      	bx	lr

0801748c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801748c:	b570      	push	{r4, r5, r6, lr}
 801748e:	4605      	mov	r5, r0
 8017490:	b1a8      	cbz	r0, 80174be <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8017492:	f7ff ffcb 	bl	801742c <std_msgs__msg__Header__init>
 8017496:	4604      	mov	r4, r0
 8017498:	b140      	cbz	r0, 80174ac <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801749a:	f105 0618 	add.w	r6, r5, #24
 801749e:	4630      	mov	r0, r6
 80174a0:	f004 fcea 	bl	801be78 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 80174a4:	4604      	mov	r4, r0
 80174a6:	b168      	cbz	r0, 80174c4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 80174a8:	4620      	mov	r0, r4
 80174aa:	bd70      	pop	{r4, r5, r6, pc}
 80174ac:	4628      	mov	r0, r5
 80174ae:	f7ff ffe1 	bl	8017474 <std_msgs__msg__Header__fini>
 80174b2:	f105 0018 	add.w	r0, r5, #24
 80174b6:	f004 fce3 	bl	801be80 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 80174ba:	4620      	mov	r0, r4
 80174bc:	bd70      	pop	{r4, r5, r6, pc}
 80174be:	4604      	mov	r4, r0
 80174c0:	4620      	mov	r0, r4
 80174c2:	bd70      	pop	{r4, r5, r6, pc}
 80174c4:	4628      	mov	r0, r5
 80174c6:	f7ff ffd5 	bl	8017474 <std_msgs__msg__Header__fini>
 80174ca:	4630      	mov	r0, r6
 80174cc:	f004 fcd8 	bl	801be80 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 80174d0:	e7ea      	b.n	80174a8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 80174d2:	bf00      	nop

080174d4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 80174d4:	b148      	cbz	r0, 80174ea <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 80174d6:	b510      	push	{r4, lr}
 80174d8:	4604      	mov	r4, r0
 80174da:	f7ff ffcb 	bl	8017474 <std_msgs__msg__Header__fini>
 80174de:	f104 0018 	add.w	r0, r4, #24
 80174e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174e6:	f004 bccb 	b.w	801be80 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 80174ea:	4770      	bx	lr

080174ec <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 80174ec:	b570      	push	{r4, r5, r6, lr}
 80174ee:	4605      	mov	r5, r0
 80174f0:	b1a8      	cbz	r0, 801751e <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 80174f2:	f7ff ff9b 	bl	801742c <std_msgs__msg__Header__init>
 80174f6:	4604      	mov	r4, r0
 80174f8:	b140      	cbz	r0, 801750c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 80174fa:	f105 0618 	add.w	r6, r5, #24
 80174fe:	4630      	mov	r0, r6
 8017500:	f004 fcc0 	bl	801be84 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8017504:	4604      	mov	r4, r0
 8017506:	b168      	cbz	r0, 8017524 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8017508:	4620      	mov	r0, r4
 801750a:	bd70      	pop	{r4, r5, r6, pc}
 801750c:	4628      	mov	r0, r5
 801750e:	f7ff ffb1 	bl	8017474 <std_msgs__msg__Header__fini>
 8017512:	f105 0018 	add.w	r0, r5, #24
 8017516:	f004 fcb9 	bl	801be8c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801751a:	4620      	mov	r0, r4
 801751c:	bd70      	pop	{r4, r5, r6, pc}
 801751e:	4604      	mov	r4, r0
 8017520:	4620      	mov	r0, r4
 8017522:	bd70      	pop	{r4, r5, r6, pc}
 8017524:	4628      	mov	r0, r5
 8017526:	f7ff ffa5 	bl	8017474 <std_msgs__msg__Header__fini>
 801752a:	4630      	mov	r0, r6
 801752c:	f004 fcae 	bl	801be8c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8017530:	e7ea      	b.n	8017508 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8017532:	bf00      	nop

08017534 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8017534:	b148      	cbz	r0, 801754a <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8017536:	b510      	push	{r4, lr}
 8017538:	4604      	mov	r4, r0
 801753a:	f7ff ff9b 	bl	8017474 <std_msgs__msg__Header__fini>
 801753e:	f104 0018 	add.w	r0, r4, #24
 8017542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017546:	f004 bca1 	b.w	801be8c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801754a:	4770      	bx	lr

0801754c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801754c:	b538      	push	{r3, r4, r5, lr}
 801754e:	4604      	mov	r4, r0
 8017550:	b128      	cbz	r0, 801755e <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8017552:	f7fa fb67 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8017556:	4605      	mov	r5, r0
 8017558:	b120      	cbz	r0, 8017564 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801755a:	4628      	mov	r0, r5
 801755c:	bd38      	pop	{r3, r4, r5, pc}
 801755e:	4605      	mov	r5, r0
 8017560:	4628      	mov	r0, r5
 8017562:	bd38      	pop	{r3, r4, r5, pc}
 8017564:	4620      	mov	r0, r4
 8017566:	f7fa fb61 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 801756a:	4628      	mov	r0, r5
 801756c:	bd38      	pop	{r3, r4, r5, pc}
 801756e:	bf00      	nop

08017570 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8017570:	b108      	cbz	r0, 8017576 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8017572:	f7fa bb5b 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 8017576:	4770      	bx	lr

08017578 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 8017578:	b538      	push	{r3, r4, r5, lr}
 801757a:	4604      	mov	r4, r0
 801757c:	b128      	cbz	r0, 801758a <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801757e:	f7fa fb51 	bl	8011c24 <builtin_interfaces__msg__Time__init>
 8017582:	4605      	mov	r5, r0
 8017584:	b120      	cbz	r0, 8017590 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 8017586:	4628      	mov	r0, r5
 8017588:	bd38      	pop	{r3, r4, r5, pc}
 801758a:	4605      	mov	r5, r0
 801758c:	4628      	mov	r0, r5
 801758e:	bd38      	pop	{r3, r4, r5, pc}
 8017590:	4620      	mov	r0, r4
 8017592:	f7fa fb4b 	bl	8011c2c <builtin_interfaces__msg__Time__fini>
 8017596:	4628      	mov	r0, r5
 8017598:	bd38      	pop	{r3, r4, r5, pc}
 801759a:	bf00      	nop

0801759c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801759c:	b108      	cbz	r0, 80175a2 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801759e:	f7fa bb45 	b.w	8011c2c <builtin_interfaces__msg__Time__fini>
 80175a2:	4770      	bx	lr

080175a4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 80175a4:	f004 bc68 	b.w	801be78 <tier4_vehicle_msgs__msg__ActuationCommand__init>

080175a8 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 80175a8:	f004 bc6a 	b.w	801be80 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

080175ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 80175ac:	4b04      	ldr	r3, [pc, #16]	@ (80175c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 80175ae:	681a      	ldr	r2, [r3, #0]
 80175b0:	b10a      	cbz	r2, 80175b6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 80175b2:	4803      	ldr	r0, [pc, #12]	@ (80175c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 80175b4:	4770      	bx	lr
 80175b6:	4a03      	ldr	r2, [pc, #12]	@ (80175c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 80175b8:	4801      	ldr	r0, [pc, #4]	@ (80175c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 80175ba:	6812      	ldr	r2, [r2, #0]
 80175bc:	601a      	str	r2, [r3, #0]
 80175be:	4770      	bx	lr
 80175c0:	24001278 	.word	0x24001278
 80175c4:	24000e14 	.word	0x24000e14

080175c8 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 80175c8:	f004 bc5c 	b.w	801be84 <tier4_vehicle_msgs__msg__ActuationStatus__init>

080175cc <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 80175cc:	f004 bc5e 	b.w	801be8c <tier4_vehicle_msgs__msg__ActuationStatus__fini>

080175d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 80175d0:	4b04      	ldr	r3, [pc, #16]	@ (80175e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 80175d2:	681a      	ldr	r2, [r3, #0]
 80175d4:	b10a      	cbz	r2, 80175da <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 80175d6:	4803      	ldr	r0, [pc, #12]	@ (80175e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 80175d8:	4770      	bx	lr
 80175da:	4a03      	ldr	r2, [pc, #12]	@ (80175e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 80175dc:	4801      	ldr	r0, [pc, #4]	@ (80175e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 80175de:	6812      	ldr	r2, [r2, #0]
 80175e0:	601a      	str	r2, [r3, #0]
 80175e2:	4770      	bx	lr
 80175e4:	24001338 	.word	0x24001338
 80175e8:	24000e14 	.word	0x24000e14

080175ec <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 80175ec:	b1b8      	cbz	r0, 801761e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 80175ee:	b538      	push	{r3, r4, r5, lr}
 80175f0:	460d      	mov	r5, r1
 80175f2:	2108      	movs	r1, #8
 80175f4:	4628      	mov	r0, r5
 80175f6:	f7f8 fce1 	bl	800ffbc <ucdr_alignment>
 80175fa:	f105 0308 	add.w	r3, r5, #8
 80175fe:	2108      	movs	r1, #8
 8017600:	f1c5 0508 	rsb	r5, r5, #8
 8017604:	181c      	adds	r4, r3, r0
 8017606:	4620      	mov	r0, r4
 8017608:	f7f8 fcd8 	bl	800ffbc <ucdr_alignment>
 801760c:	2108      	movs	r1, #8
 801760e:	4408      	add	r0, r1
 8017610:	4404      	add	r4, r0
 8017612:	4620      	mov	r0, r4
 8017614:	f7f8 fcd2 	bl	800ffbc <ucdr_alignment>
 8017618:	4428      	add	r0, r5
 801761a:	4420      	add	r0, r4
 801761c:	bd38      	pop	{r3, r4, r5, pc}
 801761e:	4770      	bx	lr

08017620 <_ActuationCommand__cdr_deserialize>:
 8017620:	b538      	push	{r3, r4, r5, lr}
 8017622:	460c      	mov	r4, r1
 8017624:	b171      	cbz	r1, 8017644 <_ActuationCommand__cdr_deserialize+0x24>
 8017626:	4605      	mov	r5, r0
 8017628:	f7f8 fbaa 	bl	800fd80 <ucdr_deserialize_double>
 801762c:	f104 0108 	add.w	r1, r4, #8
 8017630:	4628      	mov	r0, r5
 8017632:	f7f8 fba5 	bl	800fd80 <ucdr_deserialize_double>
 8017636:	f104 0110 	add.w	r1, r4, #16
 801763a:	4628      	mov	r0, r5
 801763c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017640:	f7f8 bb9e 	b.w	800fd80 <ucdr_deserialize_double>
 8017644:	4608      	mov	r0, r1
 8017646:	bd38      	pop	{r3, r4, r5, pc}

08017648 <_ActuationCommand__cdr_serialize>:
 8017648:	b198      	cbz	r0, 8017672 <_ActuationCommand__cdr_serialize+0x2a>
 801764a:	b538      	push	{r3, r4, r5, lr}
 801764c:	460d      	mov	r5, r1
 801764e:	4604      	mov	r4, r0
 8017650:	ed90 0b00 	vldr	d0, [r0]
 8017654:	4608      	mov	r0, r1
 8017656:	f7f8 fac3 	bl	800fbe0 <ucdr_serialize_double>
 801765a:	4628      	mov	r0, r5
 801765c:	ed94 0b02 	vldr	d0, [r4, #8]
 8017660:	f7f8 fabe 	bl	800fbe0 <ucdr_serialize_double>
 8017664:	4628      	mov	r0, r5
 8017666:	ed94 0b04 	vldr	d0, [r4, #16]
 801766a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801766e:	f7f8 bab7 	b.w	800fbe0 <ucdr_serialize_double>
 8017672:	4770      	bx	lr

08017674 <_ActuationCommand__get_serialized_size>:
 8017674:	b190      	cbz	r0, 801769c <_ActuationCommand__get_serialized_size+0x28>
 8017676:	2108      	movs	r1, #8
 8017678:	2000      	movs	r0, #0
 801767a:	b510      	push	{r4, lr}
 801767c:	f7f8 fc9e 	bl	800ffbc <ucdr_alignment>
 8017680:	2108      	movs	r1, #8
 8017682:	1844      	adds	r4, r0, r1
 8017684:	4620      	mov	r0, r4
 8017686:	f7f8 fc99 	bl	800ffbc <ucdr_alignment>
 801768a:	2108      	movs	r1, #8
 801768c:	4408      	add	r0, r1
 801768e:	4404      	add	r4, r0
 8017690:	4620      	mov	r0, r4
 8017692:	f7f8 fc93 	bl	800ffbc <ucdr_alignment>
 8017696:	3008      	adds	r0, #8
 8017698:	4420      	add	r0, r4
 801769a:	bd10      	pop	{r4, pc}
 801769c:	4770      	bx	lr
 801769e:	bf00      	nop

080176a0 <_ActuationCommand__max_serialized_size>:
 80176a0:	b538      	push	{r3, r4, r5, lr}
 80176a2:	2108      	movs	r1, #8
 80176a4:	2000      	movs	r0, #0
 80176a6:	f7f8 fc89 	bl	800ffbc <ucdr_alignment>
 80176aa:	2108      	movs	r1, #8
 80176ac:	1845      	adds	r5, r0, r1
 80176ae:	4628      	mov	r0, r5
 80176b0:	f7f8 fc84 	bl	800ffbc <ucdr_alignment>
 80176b4:	2108      	movs	r1, #8
 80176b6:	1844      	adds	r4, r0, r1
 80176b8:	442c      	add	r4, r5
 80176ba:	4620      	mov	r0, r4
 80176bc:	f7f8 fc7e 	bl	800ffbc <ucdr_alignment>
 80176c0:	3008      	adds	r0, #8
 80176c2:	4420      	add	r0, r4
 80176c4:	bd38      	pop	{r3, r4, r5, pc}
 80176c6:	bf00      	nop

080176c8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 80176c8:	b570      	push	{r4, r5, r6, lr}
 80176ca:	460c      	mov	r4, r1
 80176cc:	2301      	movs	r3, #1
 80176ce:	2108      	movs	r1, #8
 80176d0:	f104 0508 	add.w	r5, r4, #8
 80176d4:	7003      	strb	r3, [r0, #0]
 80176d6:	4620      	mov	r0, r4
 80176d8:	f1c4 0408 	rsb	r4, r4, #8
 80176dc:	f7f8 fc6e 	bl	800ffbc <ucdr_alignment>
 80176e0:	1946      	adds	r6, r0, r5
 80176e2:	2108      	movs	r1, #8
 80176e4:	4630      	mov	r0, r6
 80176e6:	f7f8 fc69 	bl	800ffbc <ucdr_alignment>
 80176ea:	2108      	movs	r1, #8
 80176ec:	1845      	adds	r5, r0, r1
 80176ee:	4435      	add	r5, r6
 80176f0:	4628      	mov	r0, r5
 80176f2:	f7f8 fc63 	bl	800ffbc <ucdr_alignment>
 80176f6:	4420      	add	r0, r4
 80176f8:	4428      	add	r0, r5
 80176fa:	bd70      	pop	{r4, r5, r6, pc}

080176fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 80176fc:	4800      	ldr	r0, [pc, #0]	@ (8017700 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 80176fe:	4770      	bx	lr
 8017700:	24001344 	.word	0x24001344

08017704 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8017704:	b1b8      	cbz	r0, 8017736 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8017706:	b538      	push	{r3, r4, r5, lr}
 8017708:	460d      	mov	r5, r1
 801770a:	2108      	movs	r1, #8
 801770c:	4628      	mov	r0, r5
 801770e:	f7f8 fc55 	bl	800ffbc <ucdr_alignment>
 8017712:	f105 0308 	add.w	r3, r5, #8
 8017716:	2108      	movs	r1, #8
 8017718:	f1c5 0508 	rsb	r5, r5, #8
 801771c:	181c      	adds	r4, r3, r0
 801771e:	4620      	mov	r0, r4
 8017720:	f7f8 fc4c 	bl	800ffbc <ucdr_alignment>
 8017724:	2108      	movs	r1, #8
 8017726:	4408      	add	r0, r1
 8017728:	4404      	add	r4, r0
 801772a:	4620      	mov	r0, r4
 801772c:	f7f8 fc46 	bl	800ffbc <ucdr_alignment>
 8017730:	4428      	add	r0, r5
 8017732:	4420      	add	r0, r4
 8017734:	bd38      	pop	{r3, r4, r5, pc}
 8017736:	4770      	bx	lr

08017738 <_ActuationStatus__cdr_deserialize>:
 8017738:	b538      	push	{r3, r4, r5, lr}
 801773a:	460c      	mov	r4, r1
 801773c:	b171      	cbz	r1, 801775c <_ActuationStatus__cdr_deserialize+0x24>
 801773e:	4605      	mov	r5, r0
 8017740:	f7f8 fb1e 	bl	800fd80 <ucdr_deserialize_double>
 8017744:	f104 0108 	add.w	r1, r4, #8
 8017748:	4628      	mov	r0, r5
 801774a:	f7f8 fb19 	bl	800fd80 <ucdr_deserialize_double>
 801774e:	f104 0110 	add.w	r1, r4, #16
 8017752:	4628      	mov	r0, r5
 8017754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017758:	f7f8 bb12 	b.w	800fd80 <ucdr_deserialize_double>
 801775c:	4608      	mov	r0, r1
 801775e:	bd38      	pop	{r3, r4, r5, pc}

08017760 <_ActuationStatus__cdr_serialize>:
 8017760:	b198      	cbz	r0, 801778a <_ActuationStatus__cdr_serialize+0x2a>
 8017762:	b538      	push	{r3, r4, r5, lr}
 8017764:	460d      	mov	r5, r1
 8017766:	4604      	mov	r4, r0
 8017768:	ed90 0b00 	vldr	d0, [r0]
 801776c:	4608      	mov	r0, r1
 801776e:	f7f8 fa37 	bl	800fbe0 <ucdr_serialize_double>
 8017772:	4628      	mov	r0, r5
 8017774:	ed94 0b02 	vldr	d0, [r4, #8]
 8017778:	f7f8 fa32 	bl	800fbe0 <ucdr_serialize_double>
 801777c:	4628      	mov	r0, r5
 801777e:	ed94 0b04 	vldr	d0, [r4, #16]
 8017782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017786:	f7f8 ba2b 	b.w	800fbe0 <ucdr_serialize_double>
 801778a:	4770      	bx	lr

0801778c <_ActuationStatus__get_serialized_size>:
 801778c:	b190      	cbz	r0, 80177b4 <_ActuationStatus__get_serialized_size+0x28>
 801778e:	2108      	movs	r1, #8
 8017790:	2000      	movs	r0, #0
 8017792:	b510      	push	{r4, lr}
 8017794:	f7f8 fc12 	bl	800ffbc <ucdr_alignment>
 8017798:	2108      	movs	r1, #8
 801779a:	1844      	adds	r4, r0, r1
 801779c:	4620      	mov	r0, r4
 801779e:	f7f8 fc0d 	bl	800ffbc <ucdr_alignment>
 80177a2:	2108      	movs	r1, #8
 80177a4:	4408      	add	r0, r1
 80177a6:	4404      	add	r4, r0
 80177a8:	4620      	mov	r0, r4
 80177aa:	f7f8 fc07 	bl	800ffbc <ucdr_alignment>
 80177ae:	3008      	adds	r0, #8
 80177b0:	4420      	add	r0, r4
 80177b2:	bd10      	pop	{r4, pc}
 80177b4:	4770      	bx	lr
 80177b6:	bf00      	nop

080177b8 <_ActuationStatus__max_serialized_size>:
 80177b8:	b538      	push	{r3, r4, r5, lr}
 80177ba:	2108      	movs	r1, #8
 80177bc:	2000      	movs	r0, #0
 80177be:	f7f8 fbfd 	bl	800ffbc <ucdr_alignment>
 80177c2:	2108      	movs	r1, #8
 80177c4:	1845      	adds	r5, r0, r1
 80177c6:	4628      	mov	r0, r5
 80177c8:	f7f8 fbf8 	bl	800ffbc <ucdr_alignment>
 80177cc:	2108      	movs	r1, #8
 80177ce:	1844      	adds	r4, r0, r1
 80177d0:	442c      	add	r4, r5
 80177d2:	4620      	mov	r0, r4
 80177d4:	f7f8 fbf2 	bl	800ffbc <ucdr_alignment>
 80177d8:	3008      	adds	r0, #8
 80177da:	4420      	add	r0, r4
 80177dc:	bd38      	pop	{r3, r4, r5, pc}
 80177de:	bf00      	nop

080177e0 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 80177e0:	b570      	push	{r4, r5, r6, lr}
 80177e2:	460c      	mov	r4, r1
 80177e4:	2301      	movs	r3, #1
 80177e6:	2108      	movs	r1, #8
 80177e8:	f104 0508 	add.w	r5, r4, #8
 80177ec:	7003      	strb	r3, [r0, #0]
 80177ee:	4620      	mov	r0, r4
 80177f0:	f1c4 0408 	rsb	r4, r4, #8
 80177f4:	f7f8 fbe2 	bl	800ffbc <ucdr_alignment>
 80177f8:	1946      	adds	r6, r0, r5
 80177fa:	2108      	movs	r1, #8
 80177fc:	4630      	mov	r0, r6
 80177fe:	f7f8 fbdd 	bl	800ffbc <ucdr_alignment>
 8017802:	2108      	movs	r1, #8
 8017804:	1845      	adds	r5, r0, r1
 8017806:	4435      	add	r5, r6
 8017808:	4628      	mov	r0, r5
 801780a:	f7f8 fbd7 	bl	800ffbc <ucdr_alignment>
 801780e:	4420      	add	r0, r4
 8017810:	4428      	add	r0, r5
 8017812:	bd70      	pop	{r4, r5, r6, pc}

08017814 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8017814:	4800      	ldr	r0, [pc, #0]	@ (8017818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 8017816:	4770      	bx	lr
 8017818:	2400136c 	.word	0x2400136c

0801781c <ucdr_serialize_endian_array_char>:
 801781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017820:	4619      	mov	r1, r3
 8017822:	461f      	mov	r7, r3
 8017824:	4605      	mov	r5, r0
 8017826:	4690      	mov	r8, r2
 8017828:	f7f8 fb70 	bl	800ff0c <ucdr_check_buffer_available_for>
 801782c:	b9e0      	cbnz	r0, 8017868 <ucdr_serialize_endian_array_char+0x4c>
 801782e:	463e      	mov	r6, r7
 8017830:	e00b      	b.n	801784a <ucdr_serialize_endian_array_char+0x2e>
 8017832:	4441      	add	r1, r8
 8017834:	68a8      	ldr	r0, [r5, #8]
 8017836:	4622      	mov	r2, r4
 8017838:	1b36      	subs	r6, r6, r4
 801783a:	f005 fe82 	bl	801d542 <memcpy>
 801783e:	68ab      	ldr	r3, [r5, #8]
 8017840:	6928      	ldr	r0, [r5, #16]
 8017842:	4423      	add	r3, r4
 8017844:	4420      	add	r0, r4
 8017846:	60ab      	str	r3, [r5, #8]
 8017848:	6128      	str	r0, [r5, #16]
 801784a:	4631      	mov	r1, r6
 801784c:	2201      	movs	r2, #1
 801784e:	4628      	mov	r0, r5
 8017850:	f7f8 fbe6 	bl	8010020 <ucdr_check_final_buffer_behavior_array>
 8017854:	1bb9      	subs	r1, r7, r6
 8017856:	4604      	mov	r4, r0
 8017858:	2800      	cmp	r0, #0
 801785a:	d1ea      	bne.n	8017832 <ucdr_serialize_endian_array_char+0x16>
 801785c:	2301      	movs	r3, #1
 801785e:	7da8      	ldrb	r0, [r5, #22]
 8017860:	756b      	strb	r3, [r5, #21]
 8017862:	4058      	eors	r0, r3
 8017864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017868:	463a      	mov	r2, r7
 801786a:	4641      	mov	r1, r8
 801786c:	68a8      	ldr	r0, [r5, #8]
 801786e:	f005 fe68 	bl	801d542 <memcpy>
 8017872:	68aa      	ldr	r2, [r5, #8]
 8017874:	692b      	ldr	r3, [r5, #16]
 8017876:	443a      	add	r2, r7
 8017878:	443b      	add	r3, r7
 801787a:	60aa      	str	r2, [r5, #8]
 801787c:	612b      	str	r3, [r5, #16]
 801787e:	e7ed      	b.n	801785c <ucdr_serialize_endian_array_char+0x40>

08017880 <ucdr_deserialize_endian_array_char>:
 8017880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017884:	4619      	mov	r1, r3
 8017886:	461f      	mov	r7, r3
 8017888:	4605      	mov	r5, r0
 801788a:	4690      	mov	r8, r2
 801788c:	f7f8 fb3e 	bl	800ff0c <ucdr_check_buffer_available_for>
 8017890:	b9e8      	cbnz	r0, 80178ce <ucdr_deserialize_endian_array_char+0x4e>
 8017892:	463e      	mov	r6, r7
 8017894:	e00c      	b.n	80178b0 <ucdr_deserialize_endian_array_char+0x30>
 8017896:	eb08 0003 	add.w	r0, r8, r3
 801789a:	68a9      	ldr	r1, [r5, #8]
 801789c:	4622      	mov	r2, r4
 801789e:	1b36      	subs	r6, r6, r4
 80178a0:	f005 fe4f 	bl	801d542 <memcpy>
 80178a4:	68ab      	ldr	r3, [r5, #8]
 80178a6:	6928      	ldr	r0, [r5, #16]
 80178a8:	4423      	add	r3, r4
 80178aa:	4420      	add	r0, r4
 80178ac:	60ab      	str	r3, [r5, #8]
 80178ae:	6128      	str	r0, [r5, #16]
 80178b0:	4631      	mov	r1, r6
 80178b2:	2201      	movs	r2, #1
 80178b4:	4628      	mov	r0, r5
 80178b6:	f7f8 fbb3 	bl	8010020 <ucdr_check_final_buffer_behavior_array>
 80178ba:	1bbb      	subs	r3, r7, r6
 80178bc:	4604      	mov	r4, r0
 80178be:	2800      	cmp	r0, #0
 80178c0:	d1e9      	bne.n	8017896 <ucdr_deserialize_endian_array_char+0x16>
 80178c2:	2301      	movs	r3, #1
 80178c4:	7da8      	ldrb	r0, [r5, #22]
 80178c6:	756b      	strb	r3, [r5, #21]
 80178c8:	4058      	eors	r0, r3
 80178ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178ce:	463a      	mov	r2, r7
 80178d0:	68a9      	ldr	r1, [r5, #8]
 80178d2:	4640      	mov	r0, r8
 80178d4:	f005 fe35 	bl	801d542 <memcpy>
 80178d8:	68aa      	ldr	r2, [r5, #8]
 80178da:	692b      	ldr	r3, [r5, #16]
 80178dc:	443a      	add	r2, r7
 80178de:	443b      	add	r3, r7
 80178e0:	60aa      	str	r2, [r5, #8]
 80178e2:	612b      	str	r3, [r5, #16]
 80178e4:	e7ed      	b.n	80178c2 <ucdr_deserialize_endian_array_char+0x42>
 80178e6:	bf00      	nop

080178e8 <ucdr_serialize_array_uint8_t>:
 80178e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ec:	4688      	mov	r8, r1
 80178ee:	4611      	mov	r1, r2
 80178f0:	4617      	mov	r7, r2
 80178f2:	4605      	mov	r5, r0
 80178f4:	f7f8 fb0a 	bl	800ff0c <ucdr_check_buffer_available_for>
 80178f8:	b9e0      	cbnz	r0, 8017934 <ucdr_serialize_array_uint8_t+0x4c>
 80178fa:	463e      	mov	r6, r7
 80178fc:	e00b      	b.n	8017916 <ucdr_serialize_array_uint8_t+0x2e>
 80178fe:	4441      	add	r1, r8
 8017900:	68a8      	ldr	r0, [r5, #8]
 8017902:	4622      	mov	r2, r4
 8017904:	1b36      	subs	r6, r6, r4
 8017906:	f005 fe1c 	bl	801d542 <memcpy>
 801790a:	68ab      	ldr	r3, [r5, #8]
 801790c:	6928      	ldr	r0, [r5, #16]
 801790e:	4423      	add	r3, r4
 8017910:	4420      	add	r0, r4
 8017912:	60ab      	str	r3, [r5, #8]
 8017914:	6128      	str	r0, [r5, #16]
 8017916:	4631      	mov	r1, r6
 8017918:	2201      	movs	r2, #1
 801791a:	4628      	mov	r0, r5
 801791c:	f7f8 fb80 	bl	8010020 <ucdr_check_final_buffer_behavior_array>
 8017920:	1bb9      	subs	r1, r7, r6
 8017922:	4604      	mov	r4, r0
 8017924:	2800      	cmp	r0, #0
 8017926:	d1ea      	bne.n	80178fe <ucdr_serialize_array_uint8_t+0x16>
 8017928:	2301      	movs	r3, #1
 801792a:	7da8      	ldrb	r0, [r5, #22]
 801792c:	756b      	strb	r3, [r5, #21]
 801792e:	4058      	eors	r0, r3
 8017930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017934:	463a      	mov	r2, r7
 8017936:	4641      	mov	r1, r8
 8017938:	68a8      	ldr	r0, [r5, #8]
 801793a:	f005 fe02 	bl	801d542 <memcpy>
 801793e:	68aa      	ldr	r2, [r5, #8]
 8017940:	692b      	ldr	r3, [r5, #16]
 8017942:	443a      	add	r2, r7
 8017944:	443b      	add	r3, r7
 8017946:	60aa      	str	r2, [r5, #8]
 8017948:	612b      	str	r3, [r5, #16]
 801794a:	e7ed      	b.n	8017928 <ucdr_serialize_array_uint8_t+0x40>

0801794c <ucdr_serialize_endian_array_uint8_t>:
 801794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017950:	4619      	mov	r1, r3
 8017952:	461f      	mov	r7, r3
 8017954:	4605      	mov	r5, r0
 8017956:	4690      	mov	r8, r2
 8017958:	f7f8 fad8 	bl	800ff0c <ucdr_check_buffer_available_for>
 801795c:	b9e0      	cbnz	r0, 8017998 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801795e:	463e      	mov	r6, r7
 8017960:	e00b      	b.n	801797a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8017962:	4441      	add	r1, r8
 8017964:	68a8      	ldr	r0, [r5, #8]
 8017966:	4622      	mov	r2, r4
 8017968:	1b36      	subs	r6, r6, r4
 801796a:	f005 fdea 	bl	801d542 <memcpy>
 801796e:	68ab      	ldr	r3, [r5, #8]
 8017970:	6928      	ldr	r0, [r5, #16]
 8017972:	4423      	add	r3, r4
 8017974:	4420      	add	r0, r4
 8017976:	60ab      	str	r3, [r5, #8]
 8017978:	6128      	str	r0, [r5, #16]
 801797a:	4631      	mov	r1, r6
 801797c:	2201      	movs	r2, #1
 801797e:	4628      	mov	r0, r5
 8017980:	f7f8 fb4e 	bl	8010020 <ucdr_check_final_buffer_behavior_array>
 8017984:	1bb9      	subs	r1, r7, r6
 8017986:	4604      	mov	r4, r0
 8017988:	2800      	cmp	r0, #0
 801798a:	d1ea      	bne.n	8017962 <ucdr_serialize_endian_array_uint8_t+0x16>
 801798c:	2301      	movs	r3, #1
 801798e:	7da8      	ldrb	r0, [r5, #22]
 8017990:	756b      	strb	r3, [r5, #21]
 8017992:	4058      	eors	r0, r3
 8017994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017998:	463a      	mov	r2, r7
 801799a:	4641      	mov	r1, r8
 801799c:	68a8      	ldr	r0, [r5, #8]
 801799e:	f005 fdd0 	bl	801d542 <memcpy>
 80179a2:	68aa      	ldr	r2, [r5, #8]
 80179a4:	692b      	ldr	r3, [r5, #16]
 80179a6:	443a      	add	r2, r7
 80179a8:	443b      	add	r3, r7
 80179aa:	60aa      	str	r2, [r5, #8]
 80179ac:	612b      	str	r3, [r5, #16]
 80179ae:	e7ed      	b.n	801798c <ucdr_serialize_endian_array_uint8_t+0x40>

080179b0 <ucdr_deserialize_array_uint8_t>:
 80179b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b4:	4688      	mov	r8, r1
 80179b6:	4611      	mov	r1, r2
 80179b8:	4617      	mov	r7, r2
 80179ba:	4605      	mov	r5, r0
 80179bc:	f7f8 faa6 	bl	800ff0c <ucdr_check_buffer_available_for>
 80179c0:	b9e8      	cbnz	r0, 80179fe <ucdr_deserialize_array_uint8_t+0x4e>
 80179c2:	463e      	mov	r6, r7
 80179c4:	e00c      	b.n	80179e0 <ucdr_deserialize_array_uint8_t+0x30>
 80179c6:	eb08 0003 	add.w	r0, r8, r3
 80179ca:	68a9      	ldr	r1, [r5, #8]
 80179cc:	4622      	mov	r2, r4
 80179ce:	1b36      	subs	r6, r6, r4
 80179d0:	f005 fdb7 	bl	801d542 <memcpy>
 80179d4:	68ab      	ldr	r3, [r5, #8]
 80179d6:	6928      	ldr	r0, [r5, #16]
 80179d8:	4423      	add	r3, r4
 80179da:	4420      	add	r0, r4
 80179dc:	60ab      	str	r3, [r5, #8]
 80179de:	6128      	str	r0, [r5, #16]
 80179e0:	4631      	mov	r1, r6
 80179e2:	2201      	movs	r2, #1
 80179e4:	4628      	mov	r0, r5
 80179e6:	f7f8 fb1b 	bl	8010020 <ucdr_check_final_buffer_behavior_array>
 80179ea:	1bbb      	subs	r3, r7, r6
 80179ec:	4604      	mov	r4, r0
 80179ee:	2800      	cmp	r0, #0
 80179f0:	d1e9      	bne.n	80179c6 <ucdr_deserialize_array_uint8_t+0x16>
 80179f2:	2301      	movs	r3, #1
 80179f4:	7da8      	ldrb	r0, [r5, #22]
 80179f6:	756b      	strb	r3, [r5, #21]
 80179f8:	4058      	eors	r0, r3
 80179fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179fe:	463a      	mov	r2, r7
 8017a00:	68a9      	ldr	r1, [r5, #8]
 8017a02:	4640      	mov	r0, r8
 8017a04:	f005 fd9d 	bl	801d542 <memcpy>
 8017a08:	68aa      	ldr	r2, [r5, #8]
 8017a0a:	692b      	ldr	r3, [r5, #16]
 8017a0c:	443a      	add	r2, r7
 8017a0e:	443b      	add	r3, r7
 8017a10:	60aa      	str	r2, [r5, #8]
 8017a12:	612b      	str	r3, [r5, #16]
 8017a14:	e7ed      	b.n	80179f2 <ucdr_deserialize_array_uint8_t+0x42>
 8017a16:	bf00      	nop

08017a18 <ucdr_deserialize_endian_array_uint8_t>:
 8017a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a1c:	4619      	mov	r1, r3
 8017a1e:	461f      	mov	r7, r3
 8017a20:	4605      	mov	r5, r0
 8017a22:	4690      	mov	r8, r2
 8017a24:	f7f8 fa72 	bl	800ff0c <ucdr_check_buffer_available_for>
 8017a28:	b9e8      	cbnz	r0, 8017a66 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8017a2a:	463e      	mov	r6, r7
 8017a2c:	e00c      	b.n	8017a48 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8017a2e:	eb08 0003 	add.w	r0, r8, r3
 8017a32:	68a9      	ldr	r1, [r5, #8]
 8017a34:	4622      	mov	r2, r4
 8017a36:	1b36      	subs	r6, r6, r4
 8017a38:	f005 fd83 	bl	801d542 <memcpy>
 8017a3c:	68ab      	ldr	r3, [r5, #8]
 8017a3e:	6928      	ldr	r0, [r5, #16]
 8017a40:	4423      	add	r3, r4
 8017a42:	4420      	add	r0, r4
 8017a44:	60ab      	str	r3, [r5, #8]
 8017a46:	6128      	str	r0, [r5, #16]
 8017a48:	4631      	mov	r1, r6
 8017a4a:	2201      	movs	r2, #1
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	f7f8 fae7 	bl	8010020 <ucdr_check_final_buffer_behavior_array>
 8017a52:	1bbb      	subs	r3, r7, r6
 8017a54:	4604      	mov	r4, r0
 8017a56:	2800      	cmp	r0, #0
 8017a58:	d1e9      	bne.n	8017a2e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	7da8      	ldrb	r0, [r5, #22]
 8017a5e:	756b      	strb	r3, [r5, #21]
 8017a60:	4058      	eors	r0, r3
 8017a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a66:	463a      	mov	r2, r7
 8017a68:	68a9      	ldr	r1, [r5, #8]
 8017a6a:	4640      	mov	r0, r8
 8017a6c:	f005 fd69 	bl	801d542 <memcpy>
 8017a70:	68aa      	ldr	r2, [r5, #8]
 8017a72:	692b      	ldr	r3, [r5, #16]
 8017a74:	443a      	add	r2, r7
 8017a76:	443b      	add	r3, r7
 8017a78:	60aa      	str	r2, [r5, #8]
 8017a7a:	612b      	str	r3, [r5, #16]
 8017a7c:	e7ed      	b.n	8017a5a <ucdr_deserialize_endian_array_uint8_t+0x42>
 8017a7e:	bf00      	nop

08017a80 <uxr_buffer_delete_entity>:
 8017a80:	b510      	push	{r4, lr}
 8017a82:	2300      	movs	r3, #0
 8017a84:	b08e      	sub	sp, #56	@ 0x38
 8017a86:	4604      	mov	r4, r0
 8017a88:	9103      	str	r1, [sp, #12]
 8017a8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017a8e:	2303      	movs	r3, #3
 8017a90:	2204      	movs	r2, #4
 8017a92:	9300      	str	r3, [sp, #0]
 8017a94:	ab06      	add	r3, sp, #24
 8017a96:	f001 fb77 	bl	8019188 <uxr_prepare_stream_to_write_submessage>
 8017a9a:	b918      	cbnz	r0, 8017aa4 <uxr_buffer_delete_entity+0x24>
 8017a9c:	4604      	mov	r4, r0
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	b00e      	add	sp, #56	@ 0x38
 8017aa2:	bd10      	pop	{r4, pc}
 8017aa4:	9902      	ldr	r1, [sp, #8]
 8017aa6:	aa05      	add	r2, sp, #20
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	f001 fca9 	bl	8019400 <uxr_init_base_object_request>
 8017aae:	4604      	mov	r4, r0
 8017ab0:	a905      	add	r1, sp, #20
 8017ab2:	a806      	add	r0, sp, #24
 8017ab4:	f003 fa5a 	bl	801af6c <uxr_serialize_DELETE_Payload>
 8017ab8:	4620      	mov	r0, r4
 8017aba:	b00e      	add	sp, #56	@ 0x38
 8017abc:	bd10      	pop	{r4, pc}
 8017abe:	bf00      	nop

08017ac0 <uxr_common_create_entity>:
 8017ac0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017ac4:	b510      	push	{r4, lr}
 8017ac6:	f1bc 0f01 	cmp.w	ip, #1
 8017aca:	b08c      	sub	sp, #48	@ 0x30
 8017acc:	4604      	mov	r4, r0
 8017ace:	9202      	str	r2, [sp, #8]
 8017ad0:	bf0c      	ite	eq
 8017ad2:	f003 0201 	andeq.w	r2, r3, #1
 8017ad6:	2200      	movne	r2, #0
 8017ad8:	330e      	adds	r3, #14
 8017ada:	9103      	str	r1, [sp, #12]
 8017adc:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8017ae0:	441a      	add	r2, r3
 8017ae2:	ab04      	add	r3, sp, #16
 8017ae4:	9101      	str	r1, [sp, #4]
 8017ae6:	2101      	movs	r1, #1
 8017ae8:	b292      	uxth	r2, r2
 8017aea:	9100      	str	r1, [sp, #0]
 8017aec:	9903      	ldr	r1, [sp, #12]
 8017aee:	f001 fb4b 	bl	8019188 <uxr_prepare_stream_to_write_submessage>
 8017af2:	b918      	cbnz	r0, 8017afc <uxr_common_create_entity+0x3c>
 8017af4:	4604      	mov	r4, r0
 8017af6:	4620      	mov	r0, r4
 8017af8:	b00c      	add	sp, #48	@ 0x30
 8017afa:	bd10      	pop	{r4, pc}
 8017afc:	9902      	ldr	r1, [sp, #8]
 8017afe:	4620      	mov	r0, r4
 8017b00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017b02:	f001 fc7d 	bl	8019400 <uxr_init_base_object_request>
 8017b06:	4604      	mov	r4, r0
 8017b08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017b0a:	a804      	add	r0, sp, #16
 8017b0c:	f003 f988 	bl	801ae20 <uxr_serialize_CREATE_Payload>
 8017b10:	4620      	mov	r0, r4
 8017b12:	b00c      	add	sp, #48	@ 0x30
 8017b14:	bd10      	pop	{r4, pc}
 8017b16:	bf00      	nop

08017b18 <uxr_buffer_create_participant_bin>:
 8017b18:	b570      	push	{r4, r5, r6, lr}
 8017b1a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8017b1e:	4605      	mov	r5, r0
 8017b20:	ac11      	add	r4, sp, #68	@ 0x44
 8017b22:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8017b26:	2303      	movs	r3, #3
 8017b28:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8017b2c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017b30:	7223      	strb	r3, [r4, #8]
 8017b32:	2300      	movs	r3, #0
 8017b34:	2201      	movs	r2, #1
 8017b36:	f88d 3014 	strb.w	r3, [sp, #20]
 8017b3a:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8017b3c:	7122      	strb	r2, [r4, #4]
 8017b3e:	b1cb      	cbz	r3, 8017b74 <uxr_buffer_create_participant_bin+0x5c>
 8017b40:	f88d 201c 	strb.w	r2, [sp, #28]
 8017b44:	9308      	str	r3, [sp, #32]
 8017b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017b4a:	a915      	add	r1, sp, #84	@ 0x54
 8017b4c:	a809      	add	r0, sp, #36	@ 0x24
 8017b4e:	f7f8 fa31 	bl	800ffb4 <ucdr_init_buffer>
 8017b52:	a905      	add	r1, sp, #20
 8017b54:	a809      	add	r0, sp, #36	@ 0x24
 8017b56:	f002 fd19 	bl	801a58c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8017b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017b5c:	9600      	str	r6, [sp, #0]
 8017b5e:	4628      	mov	r0, r5
 8017b60:	9401      	str	r4, [sp, #4]
 8017b62:	60e3      	str	r3, [r4, #12]
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017b6a:	f7ff ffa9 	bl	8017ac0 <uxr_common_create_entity>
 8017b6e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8017b72:	bd70      	pop	{r4, r5, r6, pc}
 8017b74:	f88d 301c 	strb.w	r3, [sp, #28]
 8017b78:	e7e5      	b.n	8017b46 <uxr_buffer_create_participant_bin+0x2e>
 8017b7a:	bf00      	nop

08017b7c <uxr_buffer_create_topic_bin>:
 8017b7c:	b570      	push	{r4, r5, r6, lr}
 8017b7e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8017b82:	4605      	mov	r5, r0
 8017b84:	4618      	mov	r0, r3
 8017b86:	9105      	str	r1, [sp, #20]
 8017b88:	a997      	add	r1, sp, #604	@ 0x25c
 8017b8a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8017b8e:	ac13      	add	r4, sp, #76	@ 0x4c
 8017b90:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017b94:	2302      	movs	r3, #2
 8017b96:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8017b9a:	f000 fa8d 	bl	80180b8 <uxr_object_id_to_raw>
 8017b9e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8017ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017ba4:	a917      	add	r1, sp, #92	@ 0x5c
 8017ba6:	a80b      	add	r0, sp, #44	@ 0x2c
 8017ba8:	9306      	str	r3, [sp, #24]
 8017baa:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8017bac:	930a      	str	r3, [sp, #40]	@ 0x28
 8017bae:	2303      	movs	r3, #3
 8017bb0:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017bb4:	2301      	movs	r3, #1
 8017bb6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8017bba:	2300      	movs	r3, #0
 8017bbc:	f88d 301c 	strb.w	r3, [sp, #28]
 8017bc0:	f7f8 f9f8 	bl	800ffb4 <ucdr_init_buffer>
 8017bc4:	a906      	add	r1, sp, #24
 8017bc6:	a80b      	add	r0, sp, #44	@ 0x2c
 8017bc8:	f002 fd02 	bl	801a5d0 <uxr_serialize_OBJK_Topic_Binary>
 8017bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017bce:	4628      	mov	r0, r5
 8017bd0:	9600      	str	r6, [sp, #0]
 8017bd2:	9316      	str	r3, [sp, #88]	@ 0x58
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	9401      	str	r4, [sp, #4]
 8017bd8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017bdc:	f7ff ff70 	bl	8017ac0 <uxr_common_create_entity>
 8017be0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8017be4:	bd70      	pop	{r4, r5, r6, pc}
 8017be6:	bf00      	nop

08017be8 <uxr_buffer_create_publisher_bin>:
 8017be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bea:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8017bee:	2603      	movs	r6, #3
 8017bf0:	4605      	mov	r5, r0
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	9105      	str	r1, [sp, #20]
 8017bf6:	a992      	add	r1, sp, #584	@ 0x248
 8017bf8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8017bfc:	ac0e      	add	r4, sp, #56	@ 0x38
 8017bfe:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8017c02:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017c06:	f000 fa57 	bl	80180b8 <uxr_object_id_to_raw>
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c10:	a912      	add	r1, sp, #72	@ 0x48
 8017c12:	a806      	add	r0, sp, #24
 8017c14:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8017c18:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8017c1c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8017c20:	f7f8 f9c8 	bl	800ffb4 <ucdr_init_buffer>
 8017c24:	a993      	add	r1, sp, #588	@ 0x24c
 8017c26:	a806      	add	r0, sp, #24
 8017c28:	f002 fd86 	bl	801a738 <uxr_serialize_OBJK_Publisher_Binary>
 8017c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c2e:	4628      	mov	r0, r5
 8017c30:	9700      	str	r7, [sp, #0]
 8017c32:	9311      	str	r3, [sp, #68]	@ 0x44
 8017c34:	b29b      	uxth	r3, r3
 8017c36:	9401      	str	r4, [sp, #4]
 8017c38:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c3c:	f7ff ff40 	bl	8017ac0 <uxr_common_create_entity>
 8017c40:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8017c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c46:	bf00      	nop

08017c48 <uxr_buffer_create_subscriber_bin>:
 8017c48:	b570      	push	{r4, r5, r6, lr}
 8017c4a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8017c4e:	4605      	mov	r5, r0
 8017c50:	4618      	mov	r0, r3
 8017c52:	9105      	str	r1, [sp, #20]
 8017c54:	a992      	add	r1, sp, #584	@ 0x248
 8017c56:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8017c5a:	ac0e      	add	r4, sp, #56	@ 0x38
 8017c5c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017c60:	2304      	movs	r3, #4
 8017c62:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8017c66:	f000 fa27 	bl	80180b8 <uxr_object_id_to_raw>
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c70:	a912      	add	r1, sp, #72	@ 0x48
 8017c72:	a806      	add	r0, sp, #24
 8017c74:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8017c78:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8017c7c:	2303      	movs	r3, #3
 8017c7e:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8017c82:	f7f8 f997 	bl	800ffb4 <ucdr_init_buffer>
 8017c86:	a993      	add	r1, sp, #588	@ 0x24c
 8017c88:	a806      	add	r0, sp, #24
 8017c8a:	f002 fe05 	bl	801a898 <uxr_serialize_OBJK_Subscriber_Binary>
 8017c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c90:	4628      	mov	r0, r5
 8017c92:	9600      	str	r6, [sp, #0]
 8017c94:	9311      	str	r3, [sp, #68]	@ 0x44
 8017c96:	b29b      	uxth	r3, r3
 8017c98:	9401      	str	r4, [sp, #4]
 8017c9a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017c9e:	f7ff ff0f 	bl	8017ac0 <uxr_common_create_entity>
 8017ca2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8017ca6:	bd70      	pop	{r4, r5, r6, pc}

08017ca8 <uxr_buffer_create_datawriter_bin>:
 8017ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cac:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017cb0:	4606      	mov	r6, r0
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	2703      	movs	r7, #3
 8017cb6:	ac1d      	add	r4, sp, #116	@ 0x74
 8017cb8:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8017cbc:	9105      	str	r1, [sp, #20]
 8017cbe:	a9a1      	add	r1, sp, #644	@ 0x284
 8017cc0:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8017cc4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017cc8:	2305      	movs	r3, #5
 8017cca:	7123      	strb	r3, [r4, #4]
 8017ccc:	f000 f9f4 	bl	80180b8 <uxr_object_id_to_raw>
 8017cd0:	a90e      	add	r1, sp, #56	@ 0x38
 8017cd2:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8017cd4:	7227      	strb	r7, [r4, #8]
 8017cd6:	f000 f9ef 	bl	80180b8 <uxr_object_id_to_raw>
 8017cda:	2300      	movs	r3, #0
 8017cdc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017ce0:	3d00      	subs	r5, #0
 8017ce2:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8017ce6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8017cea:	bf18      	it	ne
 8017cec:	2501      	movne	r5, #1
 8017cee:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017cf2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017cf6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017cfa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017cfe:	2301      	movs	r3, #1
 8017d00:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017d04:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017d08:	bb8a      	cbnz	r2, 8017d6e <uxr_buffer_create_datawriter_bin+0xc6>
 8017d0a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8017d0e:	f04f 0c13 	mov.w	ip, #19
 8017d12:	250b      	movs	r5, #11
 8017d14:	2221      	movs	r2, #33	@ 0x21
 8017d16:	2111      	movs	r1, #17
 8017d18:	2009      	movs	r0, #9
 8017d1a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017d1e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8017d22:	b923      	cbnz	r3, 8017d2e <uxr_buffer_create_datawriter_bin+0x86>
 8017d24:	4672      	mov	r2, lr
 8017d26:	4661      	mov	r1, ip
 8017d28:	4628      	mov	r0, r5
 8017d2a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8017d2e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8017d32:	2b01      	cmp	r3, #1
 8017d34:	d025      	beq.n	8017d82 <uxr_buffer_create_datawriter_bin+0xda>
 8017d36:	2b03      	cmp	r3, #3
 8017d38:	d029      	beq.n	8017d8e <uxr_buffer_create_datawriter_bin+0xe6>
 8017d3a:	b32b      	cbz	r3, 8017d88 <uxr_buffer_create_datawriter_bin+0xe0>
 8017d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017d40:	a921      	add	r1, sp, #132	@ 0x84
 8017d42:	a806      	add	r0, sp, #24
 8017d44:	f7f8 f936 	bl	800ffb4 <ucdr_init_buffer>
 8017d48:	a90e      	add	r1, sp, #56	@ 0x38
 8017d4a:	a806      	add	r0, sp, #24
 8017d4c:	f002 fe56 	bl	801a9fc <uxr_serialize_OBJK_DataWriter_Binary>
 8017d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017d52:	f8cd 8000 	str.w	r8, [sp]
 8017d56:	4630      	mov	r0, r6
 8017d58:	9401      	str	r4, [sp, #4]
 8017d5a:	60e3      	str	r3, [r4, #12]
 8017d5c:	b29b      	uxth	r3, r3
 8017d5e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017d62:	f7ff fead 	bl	8017ac0 <uxr_common_create_entity>
 8017d66:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8017d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d6e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017d72:	f04f 0c12 	mov.w	ip, #18
 8017d76:	250a      	movs	r5, #10
 8017d78:	2220      	movs	r2, #32
 8017d7a:	2110      	movs	r1, #16
 8017d7c:	2008      	movs	r0, #8
 8017d7e:	2702      	movs	r7, #2
 8017d80:	e7cd      	b.n	8017d1e <uxr_buffer_create_datawriter_bin+0x76>
 8017d82:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8017d86:	e7d9      	b.n	8017d3c <uxr_buffer_create_datawriter_bin+0x94>
 8017d88:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8017d8c:	e7d6      	b.n	8017d3c <uxr_buffer_create_datawriter_bin+0x94>
 8017d8e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017d92:	e7d3      	b.n	8017d3c <uxr_buffer_create_datawriter_bin+0x94>

08017d94 <uxr_buffer_create_datareader_bin>:
 8017d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d98:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8017d9c:	4606      	mov	r6, r0
 8017d9e:	4618      	mov	r0, r3
 8017da0:	2703      	movs	r7, #3
 8017da2:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017da4:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8017da8:	9105      	str	r1, [sp, #20]
 8017daa:	a9a3      	add	r1, sp, #652	@ 0x28c
 8017dac:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8017db0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017db4:	2306      	movs	r3, #6
 8017db6:	7123      	strb	r3, [r4, #4]
 8017db8:	f000 f97e 	bl	80180b8 <uxr_object_id_to_raw>
 8017dbc:	a90e      	add	r1, sp, #56	@ 0x38
 8017dbe:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8017dc0:	7227      	strb	r7, [r4, #8]
 8017dc2:	f000 f979 	bl	80180b8 <uxr_object_id_to_raw>
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017dcc:	3d00      	subs	r5, #0
 8017dce:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8017dd2:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8017dd6:	bf18      	it	ne
 8017dd8:	2501      	movne	r5, #1
 8017dda:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8017dde:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017de2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017de6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017dea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017dee:	2301      	movs	r3, #1
 8017df0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017df4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017df8:	bb8a      	cbnz	r2, 8017e5e <uxr_buffer_create_datareader_bin+0xca>
 8017dfa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8017dfe:	f04f 0c13 	mov.w	ip, #19
 8017e02:	250b      	movs	r5, #11
 8017e04:	2221      	movs	r2, #33	@ 0x21
 8017e06:	2111      	movs	r1, #17
 8017e08:	2009      	movs	r0, #9
 8017e0a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8017e0e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8017e12:	b923      	cbnz	r3, 8017e1e <uxr_buffer_create_datareader_bin+0x8a>
 8017e14:	4672      	mov	r2, lr
 8017e16:	4661      	mov	r1, ip
 8017e18:	4628      	mov	r0, r5
 8017e1a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8017e1e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8017e22:	2b01      	cmp	r3, #1
 8017e24:	d025      	beq.n	8017e72 <uxr_buffer_create_datareader_bin+0xde>
 8017e26:	2b03      	cmp	r3, #3
 8017e28:	d029      	beq.n	8017e7e <uxr_buffer_create_datareader_bin+0xea>
 8017e2a:	b32b      	cbz	r3, 8017e78 <uxr_buffer_create_datareader_bin+0xe4>
 8017e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017e30:	a923      	add	r1, sp, #140	@ 0x8c
 8017e32:	a806      	add	r0, sp, #24
 8017e34:	f7f8 f8be 	bl	800ffb4 <ucdr_init_buffer>
 8017e38:	a90e      	add	r1, sp, #56	@ 0x38
 8017e3a:	a806      	add	r0, sp, #24
 8017e3c:	f002 fda2 	bl	801a984 <uxr_serialize_OBJK_DataReader_Binary>
 8017e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e42:	f8cd 8000 	str.w	r8, [sp]
 8017e46:	4630      	mov	r0, r6
 8017e48:	9401      	str	r4, [sp, #4]
 8017e4a:	60e3      	str	r3, [r4, #12]
 8017e4c:	b29b      	uxth	r3, r3
 8017e4e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017e52:	f7ff fe35 	bl	8017ac0 <uxr_common_create_entity>
 8017e56:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8017e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e5e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8017e62:	f04f 0c12 	mov.w	ip, #18
 8017e66:	250a      	movs	r5, #10
 8017e68:	2220      	movs	r2, #32
 8017e6a:	2110      	movs	r1, #16
 8017e6c:	2008      	movs	r0, #8
 8017e6e:	2702      	movs	r7, #2
 8017e70:	e7cd      	b.n	8017e0e <uxr_buffer_create_datareader_bin+0x7a>
 8017e72:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8017e76:	e7d9      	b.n	8017e2c <uxr_buffer_create_datareader_bin+0x98>
 8017e78:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8017e7c:	e7d6      	b.n	8017e2c <uxr_buffer_create_datareader_bin+0x98>
 8017e7e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017e82:	e7d3      	b.n	8017e2c <uxr_buffer_create_datareader_bin+0x98>

08017e84 <uxr_buffer_create_replier_bin>:
 8017e84:	b570      	push	{r4, r5, r6, lr}
 8017e86:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8017e8a:	4605      	mov	r5, r0
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	9105      	str	r1, [sp, #20]
 8017e90:	a999      	add	r1, sp, #612	@ 0x264
 8017e92:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8017e96:	ac15      	add	r4, sp, #84	@ 0x54
 8017e98:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017e9c:	2308      	movs	r3, #8
 8017e9e:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8017ea2:	f000 f909 	bl	80180b8 <uxr_object_id_to_raw>
 8017ea6:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8017ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017eac:	a919      	add	r1, sp, #100	@ 0x64
 8017eae:	a80d      	add	r0, sp, #52	@ 0x34
 8017eb0:	9306      	str	r3, [sp, #24]
 8017eb2:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8017eb4:	9307      	str	r3, [sp, #28]
 8017eb6:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8017eb8:	9308      	str	r3, [sp, #32]
 8017eba:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8017ebc:	930c      	str	r3, [sp, #48]	@ 0x30
 8017ebe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017ec8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8017ecc:	2303      	movs	r3, #3
 8017ece:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8017ed2:	f7f8 f86f 	bl	800ffb4 <ucdr_init_buffer>
 8017ed6:	a906      	add	r1, sp, #24
 8017ed8:	a80d      	add	r0, sp, #52	@ 0x34
 8017eda:	f002 fdbb 	bl	801aa54 <uxr_serialize_OBJK_Replier_Binary>
 8017ede:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017ee0:	4628      	mov	r0, r5
 8017ee2:	9600      	str	r6, [sp, #0]
 8017ee4:	9318      	str	r3, [sp, #96]	@ 0x60
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	9401      	str	r4, [sp, #4]
 8017eea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017eee:	f7ff fde7 	bl	8017ac0 <uxr_common_create_entity>
 8017ef2:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8017ef6:	bd70      	pop	{r4, r5, r6, pc}

08017ef8 <get_custom_error>:
 8017ef8:	4b01      	ldr	r3, [pc, #4]	@ (8017f00 <get_custom_error+0x8>)
 8017efa:	7818      	ldrb	r0, [r3, #0]
 8017efc:	4770      	bx	lr
 8017efe:	bf00      	nop
 8017f00:	240692f4 	.word	0x240692f4

08017f04 <recv_custom_msg>:
 8017f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f08:	4693      	mov	fp, r2
 8017f0a:	b089      	sub	sp, #36	@ 0x24
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	4604      	mov	r4, r0
 8017f10:	468a      	mov	sl, r1
 8017f12:	9305      	str	r3, [sp, #20]
 8017f14:	f88d 201e 	strb.w	r2, [sp, #30]
 8017f18:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8017f1c:	b322      	cbz	r2, 8017f68 <recv_custom_msg+0x64>
 8017f1e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8017f22:	f10d 081f 	add.w	r8, sp, #31
 8017f26:	af05      	add	r7, sp, #20
 8017f28:	f10d 061e 	add.w	r6, sp, #30
 8017f2c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8017f30:	e002      	b.n	8017f38 <recv_custom_msg+0x34>
 8017f32:	9b05      	ldr	r3, [sp, #20]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	dd0f      	ble.n	8017f58 <recv_custom_msg+0x54>
 8017f38:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8017f3c:	4623      	mov	r3, r4
 8017f3e:	4622      	mov	r2, r4
 8017f40:	4648      	mov	r0, r9
 8017f42:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017f46:	e9cd 5600 	strd	r5, r6, [sp]
 8017f4a:	f001 fc6f 	bl	801982c <uxr_read_framed_msg>
 8017f4e:	2800      	cmp	r0, #0
 8017f50:	d0ef      	beq.n	8017f32 <recv_custom_msg+0x2e>
 8017f52:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017f56:	b1b3      	cbz	r3, 8017f86 <recv_custom_msg+0x82>
 8017f58:	4b0f      	ldr	r3, [pc, #60]	@ (8017f98 <recv_custom_msg+0x94>)
 8017f5a:	2000      	movs	r0, #0
 8017f5c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017f60:	701a      	strb	r2, [r3, #0]
 8017f62:	b009      	add	sp, #36	@ 0x24
 8017f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f68:	f10d 021f 	add.w	r2, sp, #31
 8017f6c:	4601      	mov	r1, r0
 8017f6e:	9200      	str	r2, [sp, #0]
 8017f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017f74:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8017f78:	47a8      	blx	r5
 8017f7a:	2800      	cmp	r0, #0
 8017f7c:	d0ec      	beq.n	8017f58 <recv_custom_msg+0x54>
 8017f7e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d1e8      	bne.n	8017f58 <recv_custom_msg+0x54>
 8017f86:	f8cb 0000 	str.w	r0, [fp]
 8017f8a:	2001      	movs	r0, #1
 8017f8c:	f8ca 4000 	str.w	r4, [sl]
 8017f90:	b009      	add	sp, #36	@ 0x24
 8017f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f96:	bf00      	nop
 8017f98:	240692f4 	.word	0x240692f4

08017f9c <send_custom_msg>:
 8017f9c:	b530      	push	{r4, r5, lr}
 8017f9e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017fa2:	b087      	sub	sp, #28
 8017fa4:	4614      	mov	r4, r2
 8017fa6:	b995      	cbnz	r5, 8017fce <send_custom_msg+0x32>
 8017fa8:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8017fac:	f10d 0317 	add.w	r3, sp, #23
 8017fb0:	47a8      	blx	r5
 8017fb2:	1e03      	subs	r3, r0, #0
 8017fb4:	bf18      	it	ne
 8017fb6:	2301      	movne	r3, #1
 8017fb8:	42a0      	cmp	r0, r4
 8017fba:	bf18      	it	ne
 8017fbc:	2300      	movne	r3, #0
 8017fbe:	b91b      	cbnz	r3, 8017fc8 <send_custom_msg+0x2c>
 8017fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8017fec <send_custom_msg+0x50>)
 8017fc2:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017fc6:	7011      	strb	r1, [r2, #0]
 8017fc8:	4618      	mov	r0, r3
 8017fca:	b007      	add	sp, #28
 8017fcc:	bd30      	pop	{r4, r5, pc}
 8017fce:	460b      	mov	r3, r1
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	f10d 0117 	add.w	r1, sp, #23
 8017fd6:	9400      	str	r4, [sp, #0]
 8017fd8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017fdc:	4602      	mov	r2, r0
 8017fde:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017fe2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017fe6:	f001 fa43 	bl	8019470 <uxr_write_framed_msg>
 8017fea:	e7e2      	b.n	8017fb2 <send_custom_msg+0x16>
 8017fec:	240692f4 	.word	0x240692f4

08017ff0 <uxr_set_custom_transport_callbacks>:
 8017ff0:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8017ff4:	9901      	ldr	r1, [sp, #4]
 8017ff6:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8017ffa:	9b00      	ldr	r3, [sp, #0]
 8017ffc:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8018000:	4770      	bx	lr
 8018002:	bf00      	nop

08018004 <uxr_init_custom_transport>:
 8018004:	b538      	push	{r3, r4, r5, lr}
 8018006:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801800a:	b303      	cbz	r3, 801804e <uxr_init_custom_transport+0x4a>
 801800c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8018010:	4604      	mov	r4, r0
 8018012:	b1e2      	cbz	r2, 801804e <uxr_init_custom_transport+0x4a>
 8018014:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8018018:	b1ca      	cbz	r2, 801804e <uxr_init_custom_transport+0x4a>
 801801a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801801e:	b1b2      	cbz	r2, 801804e <uxr_init_custom_transport+0x4a>
 8018020:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8018024:	4798      	blx	r3
 8018026:	4605      	mov	r5, r0
 8018028:	b188      	cbz	r0, 801804e <uxr_init_custom_transport+0x4a>
 801802a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801802e:	b98b      	cbnz	r3, 8018054 <uxr_init_custom_transport+0x50>
 8018030:	4b0b      	ldr	r3, [pc, #44]	@ (8018060 <uxr_init_custom_transport+0x5c>)
 8018032:	4628      	mov	r0, r5
 8018034:	490b      	ldr	r1, [pc, #44]	@ (8018064 <uxr_init_custom_transport+0x60>)
 8018036:	4a0c      	ldr	r2, [pc, #48]	@ (8018068 <uxr_init_custom_transport+0x64>)
 8018038:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801803c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018040:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8018044:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8018048:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801804c:	bd38      	pop	{r3, r4, r5, pc}
 801804e:	2500      	movs	r5, #0
 8018050:	4628      	mov	r0, r5
 8018052:	bd38      	pop	{r3, r4, r5, pc}
 8018054:	2100      	movs	r1, #0
 8018056:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801805a:	f001 fa03 	bl	8019464 <uxr_init_framing_io>
 801805e:	e7e7      	b.n	8018030 <uxr_init_custom_transport+0x2c>
 8018060:	08017f05 	.word	0x08017f05
 8018064:	08017f9d 	.word	0x08017f9d
 8018068:	08017ef9 	.word	0x08017ef9

0801806c <uxr_close_custom_transport>:
 801806c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8018070:	4718      	bx	r3
 8018072:	bf00      	nop

08018074 <uxr_object_id>:
 8018074:	b082      	sub	sp, #8
 8018076:	2300      	movs	r3, #0
 8018078:	f88d 1006 	strb.w	r1, [sp, #6]
 801807c:	f360 030f 	bfi	r3, r0, #0, #16
 8018080:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018084:	f362 431f 	bfi	r3, r2, #16, #16
 8018088:	4618      	mov	r0, r3
 801808a:	b002      	add	sp, #8
 801808c:	4770      	bx	lr
 801808e:	bf00      	nop

08018090 <uxr_object_id_from_raw>:
 8018090:	7843      	ldrb	r3, [r0, #1]
 8018092:	b082      	sub	sp, #8
 8018094:	7801      	ldrb	r1, [r0, #0]
 8018096:	2000      	movs	r0, #0
 8018098:	091a      	lsrs	r2, r3, #4
 801809a:	f003 030f 	and.w	r3, r3, #15
 801809e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80180a2:	f88d 3006 	strb.w	r3, [sp, #6]
 80180a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80180aa:	f362 000f 	bfi	r0, r2, #0, #16
 80180ae:	f363 401f 	bfi	r0, r3, #16, #16
 80180b2:	b002      	add	sp, #8
 80180b4:	4770      	bx	lr
 80180b6:	bf00      	nop

080180b8 <uxr_object_id_to_raw>:
 80180b8:	4602      	mov	r2, r0
 80180ba:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80180be:	b082      	sub	sp, #8
 80180c0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80180c4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80180c8:	f881 c000 	strb.w	ip, [r1]
 80180cc:	7048      	strb	r0, [r1, #1]
 80180ce:	b002      	add	sp, #8
 80180d0:	4770      	bx	lr
 80180d2:	bf00      	nop

080180d4 <uxr_buffer_request_data>:
 80180d4:	b530      	push	{r4, r5, lr}
 80180d6:	b095      	sub	sp, #84	@ 0x54
 80180d8:	4604      	mov	r4, r0
 80180da:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80180dc:	9303      	str	r3, [sp, #12]
 80180de:	2d00      	cmp	r5, #0
 80180e0:	f88d 301c 	strb.w	r3, [sp, #28]
 80180e4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80180e8:	f04f 0200 	mov.w	r2, #0
 80180ec:	bf14      	ite	ne
 80180ee:	2101      	movne	r1, #1
 80180f0:	4611      	moveq	r1, r2
 80180f2:	f88d 201d 	strb.w	r2, [sp, #29]
 80180f6:	f88d 201e 	strb.w	r2, [sp, #30]
 80180fa:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80180fe:	d021      	beq.n	8018144 <uxr_buffer_request_data+0x70>
 8018100:	686b      	ldr	r3, [r5, #4]
 8018102:	2210      	movs	r2, #16
 8018104:	6829      	ldr	r1, [r5, #0]
 8018106:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801810a:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 801810e:	2308      	movs	r3, #8
 8018110:	2100      	movs	r1, #0
 8018112:	4620      	mov	r0, r4
 8018114:	e9cd 3100 	strd	r3, r1, [sp]
 8018118:	ab0c      	add	r3, sp, #48	@ 0x30
 801811a:	9905      	ldr	r1, [sp, #20]
 801811c:	f001 f834 	bl	8019188 <uxr_prepare_stream_to_write_submessage>
 8018120:	b918      	cbnz	r0, 801812a <uxr_buffer_request_data+0x56>
 8018122:	4604      	mov	r4, r0
 8018124:	4620      	mov	r0, r4
 8018126:	b015      	add	sp, #84	@ 0x54
 8018128:	bd30      	pop	{r4, r5, pc}
 801812a:	9904      	ldr	r1, [sp, #16]
 801812c:	aa06      	add	r2, sp, #24
 801812e:	4620      	mov	r0, r4
 8018130:	f001 f966 	bl	8019400 <uxr_init_base_object_request>
 8018134:	4604      	mov	r4, r0
 8018136:	a906      	add	r1, sp, #24
 8018138:	a80c      	add	r0, sp, #48	@ 0x30
 801813a:	f002 ffc1 	bl	801b0c0 <uxr_serialize_READ_DATA_Payload>
 801813e:	4620      	mov	r0, r4
 8018140:	b015      	add	sp, #84	@ 0x54
 8018142:	bd30      	pop	{r4, r5, pc}
 8018144:	2208      	movs	r2, #8
 8018146:	e7e2      	b.n	801810e <uxr_buffer_request_data+0x3a>

08018148 <uxr_buffer_cancel_data>:
 8018148:	b510      	push	{r4, lr}
 801814a:	2300      	movs	r3, #0
 801814c:	b094      	sub	sp, #80	@ 0x50
 801814e:	4604      	mov	r4, r0
 8018150:	9205      	str	r2, [sp, #20]
 8018152:	9301      	str	r3, [sp, #4]
 8018154:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018158:	f88d 301e 	strb.w	r3, [sp, #30]
 801815c:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8018160:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8018164:	2308      	movs	r3, #8
 8018166:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801816a:	2201      	movs	r2, #1
 801816c:	9300      	str	r3, [sp, #0]
 801816e:	ab0c      	add	r3, sp, #48	@ 0x30
 8018170:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8018174:	2210      	movs	r2, #16
 8018176:	f001 f807 	bl	8019188 <uxr_prepare_stream_to_write_submessage>
 801817a:	b918      	cbnz	r0, 8018184 <uxr_buffer_cancel_data+0x3c>
 801817c:	4604      	mov	r4, r0
 801817e:	4620      	mov	r0, r4
 8018180:	b014      	add	sp, #80	@ 0x50
 8018182:	bd10      	pop	{r4, pc}
 8018184:	9905      	ldr	r1, [sp, #20]
 8018186:	aa06      	add	r2, sp, #24
 8018188:	4620      	mov	r0, r4
 801818a:	f001 f939 	bl	8019400 <uxr_init_base_object_request>
 801818e:	4604      	mov	r4, r0
 8018190:	a906      	add	r1, sp, #24
 8018192:	a80c      	add	r0, sp, #48	@ 0x30
 8018194:	f002 ff94 	bl	801b0c0 <uxr_serialize_READ_DATA_Payload>
 8018198:	4620      	mov	r0, r4
 801819a:	b014      	add	sp, #80	@ 0x50
 801819c:	bd10      	pop	{r4, pc}
 801819e:	bf00      	nop

080181a0 <read_submessage_format>:
 80181a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181a4:	b095      	sub	sp, #84	@ 0x54
 80181a6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80181aa:	b113      	cbz	r3, 80181b2 <read_submessage_format+0x12>
 80181ac:	b015      	add	sp, #84	@ 0x54
 80181ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181b2:	4606      	mov	r6, r0
 80181b4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80181b6:	460c      	mov	r4, r1
 80181b8:	4615      	mov	r5, r2
 80181ba:	9004      	str	r0, [sp, #16]
 80181bc:	4699      	mov	r9, r3
 80181be:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80181c0:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80181c4:	9005      	str	r0, [sp, #20]
 80181c6:	a80c      	add	r0, sp, #48	@ 0x30
 80181c8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80181cc:	1a52      	subs	r2, r2, r1
 80181ce:	f7f7 fef1 	bl	800ffb4 <ucdr_init_buffer>
 80181d2:	a80c      	add	r0, sp, #48	@ 0x30
 80181d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80181d8:	f7f7 fec0 	bl	800ff5c <ucdr_set_on_full_buffer_callback>
 80181dc:	69e2      	ldr	r2, [r4, #28]
 80181de:	b19a      	cbz	r2, 8018208 <read_submessage_format+0x68>
 80181e0:	f1b8 0f07 	cmp.w	r8, #7
 80181e4:	f882 9014 	strb.w	r9, [r2, #20]
 80181e8:	d040      	beq.n	801826c <read_submessage_format+0xcc>
 80181ea:	f1b8 0f08 	cmp.w	r8, #8
 80181ee:	d02e      	beq.n	801824e <read_submessage_format+0xae>
 80181f0:	f1b8 0f06 	cmp.w	r8, #6
 80181f4:	d011      	beq.n	801821a <read_submessage_format+0x7a>
 80181f6:	2301      	movs	r3, #1
 80181f8:	7513      	strb	r3, [r2, #20]
 80181fa:	4629      	mov	r1, r5
 80181fc:	4620      	mov	r0, r4
 80181fe:	f7f7 ff2d 	bl	801005c <ucdr_advance_buffer>
 8018202:	b015      	add	sp, #84	@ 0x54
 8018204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018208:	f1b8 0f07 	cmp.w	r8, #7
 801820c:	d02e      	beq.n	801826c <read_submessage_format+0xcc>
 801820e:	f1b8 0f08 	cmp.w	r8, #8
 8018212:	d01c      	beq.n	801824e <read_submessage_format+0xae>
 8018214:	f1b8 0f06 	cmp.w	r8, #6
 8018218:	d1ef      	bne.n	80181fa <read_submessage_format+0x5a>
 801821a:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 801821e:	f1b8 0f00 	cmp.w	r8, #0
 8018222:	d011      	beq.n	8018248 <read_submessage_format+0xa8>
 8018224:	ab0c      	add	r3, sp, #48	@ 0x30
 8018226:	9501      	str	r5, [sp, #4]
 8018228:	463a      	mov	r2, r7
 801822a:	4630      	mov	r0, r6
 801822c:	9300      	str	r3, [sp, #0]
 801822e:	2306      	movs	r3, #6
 8018230:	f88d 3016 	strb.w	r3, [sp, #22]
 8018234:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8018238:	9302      	str	r3, [sp, #8]
 801823a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801823e:	47c0      	blx	r8
 8018240:	2301      	movs	r3, #1
 8018242:	69e2      	ldr	r2, [r4, #28]
 8018244:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8018248:	2a00      	cmp	r2, #0
 801824a:	d1d4      	bne.n	80181f6 <read_submessage_format+0x56>
 801824c:	e7d5      	b.n	80181fa <read_submessage_format+0x5a>
 801824e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8018252:	2b00      	cmp	r3, #0
 8018254:	d0f8      	beq.n	8018248 <read_submessage_format+0xa8>
 8018256:	a80c      	add	r0, sp, #48	@ 0x30
 8018258:	a906      	add	r1, sp, #24
 801825a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801825e:	f002 fffb 	bl	801b258 <uxr_deserialize_SampleIdentity>
 8018262:	b9a0      	cbnz	r0, 801828e <read_submessage_format+0xee>
 8018264:	69e2      	ldr	r2, [r4, #28]
 8018266:	2a00      	cmp	r2, #0
 8018268:	d1c5      	bne.n	80181f6 <read_submessage_format+0x56>
 801826a:	e7c6      	b.n	80181fa <read_submessage_format+0x5a>
 801826c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8018270:	b13b      	cbz	r3, 8018282 <read_submessage_format+0xe2>
 8018272:	a906      	add	r1, sp, #24
 8018274:	a80c      	add	r0, sp, #48	@ 0x30
 8018276:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801827a:	f002 fcc1 	bl	801ac00 <uxr_deserialize_BaseObjectRequest>
 801827e:	bb60      	cbnz	r0, 80182da <read_submessage_format+0x13a>
 8018280:	69e2      	ldr	r2, [r4, #28]
 8018282:	68a3      	ldr	r3, [r4, #8]
 8018284:	442b      	add	r3, r5
 8018286:	60a3      	str	r3, [r4, #8]
 8018288:	2a00      	cmp	r2, #0
 801828a:	d1b4      	bne.n	80181f6 <read_submessage_format+0x56>
 801828c:	e7b5      	b.n	80181fa <read_submessage_format+0x5a>
 801828e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018290:	a80c      	add	r0, sp, #48	@ 0x30
 8018292:	eba8 0803 	sub.w	r8, r8, r3
 8018296:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801829a:	44a8      	add	r8, r5
 801829c:	1a52      	subs	r2, r2, r1
 801829e:	f7f7 fe89 	bl	800ffb4 <ucdr_init_buffer>
 80182a2:	a80c      	add	r0, sp, #48	@ 0x30
 80182a4:	fa1f f888 	uxth.w	r8, r8
 80182a8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80182ac:	f7f7 fe56 	bl	800ff5c <ucdr_set_on_full_buffer_callback>
 80182b0:	ab0c      	add	r3, sp, #48	@ 0x30
 80182b2:	2108      	movs	r1, #8
 80182b4:	f8cd 8004 	str.w	r8, [sp, #4]
 80182b8:	9300      	str	r3, [sp, #0]
 80182ba:	463a      	mov	r2, r7
 80182bc:	f88d 1016 	strb.w	r1, [sp, #22]
 80182c0:	ab06      	add	r3, sp, #24
 80182c2:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 80182c6:	4630      	mov	r0, r6
 80182c8:	9102      	str	r1, [sp, #8]
 80182ca:	9905      	ldr	r1, [sp, #20]
 80182cc:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 80182d0:	47b8      	blx	r7
 80182d2:	2301      	movs	r3, #1
 80182d4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80182d8:	e7c4      	b.n	8018264 <read_submessage_format+0xc4>
 80182da:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80182de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80182e0:	a80c      	add	r0, sp, #48	@ 0x30
 80182e2:	1a52      	subs	r2, r2, r1
 80182e4:	eba8 0803 	sub.w	r8, r8, r3
 80182e8:	f7f7 fe64 	bl	800ffb4 <ucdr_init_buffer>
 80182ec:	a80c      	add	r0, sp, #48	@ 0x30
 80182ee:	44a8      	add	r8, r5
 80182f0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80182f4:	f7f7 fe32 	bl	800ff5c <ucdr_set_on_full_buffer_callback>
 80182f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80182fa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80182fe:	fa1f f888 	uxth.w	r8, r8
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	463a      	mov	r2, r7
 8018306:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801830a:	4630      	mov	r0, r6
 801830c:	f8cd 8004 	str.w	r8, [sp, #4]
 8018310:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018314:	2107      	movs	r1, #7
 8018316:	f88d 1016 	strb.w	r1, [sp, #22]
 801831a:	b29b      	uxth	r3, r3
 801831c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8018320:	9102      	str	r1, [sp, #8]
 8018322:	9905      	ldr	r1, [sp, #20]
 8018324:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8018328:	47b8      	blx	r7
 801832a:	2301      	movs	r3, #1
 801832c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8018330:	e7a6      	b.n	8018280 <read_submessage_format+0xe0>
 8018332:	bf00      	nop

08018334 <on_get_fragmentation_info>:
 8018334:	b500      	push	{lr}
 8018336:	b08b      	sub	sp, #44	@ 0x2c
 8018338:	4601      	mov	r1, r0
 801833a:	2204      	movs	r2, #4
 801833c:	a802      	add	r0, sp, #8
 801833e:	f7f7 fe39 	bl	800ffb4 <ucdr_init_buffer>
 8018342:	f10d 0305 	add.w	r3, sp, #5
 8018346:	f10d 0206 	add.w	r2, sp, #6
 801834a:	a901      	add	r1, sp, #4
 801834c:	a802      	add	r0, sp, #8
 801834e:	f001 fe5d 	bl	801a00c <uxr_read_submessage_header>
 8018352:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018356:	2b0d      	cmp	r3, #13
 8018358:	d003      	beq.n	8018362 <on_get_fragmentation_info+0x2e>
 801835a:	2000      	movs	r0, #0
 801835c:	b00b      	add	sp, #44	@ 0x2c
 801835e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018362:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018366:	f013 0f02 	tst.w	r3, #2
 801836a:	bf14      	ite	ne
 801836c:	2002      	movne	r0, #2
 801836e:	2001      	moveq	r0, #1
 8018370:	b00b      	add	sp, #44	@ 0x2c
 8018372:	f85d fb04 	ldr.w	pc, [sp], #4
 8018376:	bf00      	nop

08018378 <read_submessage_get_info>:
 8018378:	b570      	push	{r4, r5, r6, lr}
 801837a:	2500      	movs	r5, #0
 801837c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8018380:	460e      	mov	r6, r1
 8018382:	4604      	mov	r4, r0
 8018384:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8018388:	4629      	mov	r1, r5
 801838a:	a810      	add	r0, sp, #64	@ 0x40
 801838c:	9503      	str	r5, [sp, #12]
 801838e:	9504      	str	r5, [sp, #16]
 8018390:	f004 ffb8 	bl	801d304 <memset>
 8018394:	a903      	add	r1, sp, #12
 8018396:	4630      	mov	r0, r6
 8018398:	f002 fdd2 	bl	801af40 <uxr_deserialize_GET_INFO_Payload>
 801839c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80183a0:	4620      	mov	r0, r4
 80183a2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80183a6:	f001 f823 	bl	80193f0 <uxr_session_header_offset>
 80183aa:	462b      	mov	r3, r5
 80183ac:	220c      	movs	r2, #12
 80183ae:	a905      	add	r1, sp, #20
 80183b0:	9000      	str	r0, [sp, #0]
 80183b2:	a808      	add	r0, sp, #32
 80183b4:	f7f7 fdec 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 80183b8:	a910      	add	r1, sp, #64	@ 0x40
 80183ba:	a808      	add	r0, sp, #32
 80183bc:	f002 fe34 	bl	801b028 <uxr_serialize_INFO_Payload>
 80183c0:	9b08      	ldr	r3, [sp, #32]
 80183c2:	462a      	mov	r2, r5
 80183c4:	4629      	mov	r1, r5
 80183c6:	4620      	mov	r0, r4
 80183c8:	f000 ffbe 	bl	8019348 <uxr_stamp_session_header>
 80183cc:	a808      	add	r0, sp, #32
 80183ce:	f7f7 fe1f 	bl	8010010 <ucdr_buffer_length>
 80183d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80183d4:	4602      	mov	r2, r0
 80183d6:	a905      	add	r1, sp, #20
 80183d8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80183dc:	47a0      	blx	r4
 80183de:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80183e2:	bd70      	pop	{r4, r5, r6, pc}

080183e4 <write_submessage_acknack.isra.0>:
 80183e4:	b570      	push	{r4, r5, r6, lr}
 80183e6:	b092      	sub	sp, #72	@ 0x48
 80183e8:	4605      	mov	r5, r0
 80183ea:	460e      	mov	r6, r1
 80183ec:	4614      	mov	r4, r2
 80183ee:	f000 ffff 	bl	80193f0 <uxr_session_header_offset>
 80183f2:	a905      	add	r1, sp, #20
 80183f4:	9000      	str	r0, [sp, #0]
 80183f6:	2300      	movs	r3, #0
 80183f8:	a80a      	add	r0, sp, #40	@ 0x28
 80183fa:	2211      	movs	r2, #17
 80183fc:	f7f7 fdc8 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 8018400:	2218      	movs	r2, #24
 8018402:	2300      	movs	r3, #0
 8018404:	210a      	movs	r1, #10
 8018406:	fb02 5404 	mla	r4, r2, r4, r5
 801840a:	a80a      	add	r0, sp, #40	@ 0x28
 801840c:	2205      	movs	r2, #5
 801840e:	3450      	adds	r4, #80	@ 0x50
 8018410:	f001 fde2 	bl	8019fd8 <uxr_buffer_submessage_header>
 8018414:	a903      	add	r1, sp, #12
 8018416:	4620      	mov	r0, r4
 8018418:	f003 feec 	bl	801c1f4 <uxr_compute_acknack>
 801841c:	ba40      	rev16	r0, r0
 801841e:	a903      	add	r1, sp, #12
 8018420:	f88d 6010 	strb.w	r6, [sp, #16]
 8018424:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018428:	a80a      	add	r0, sp, #40	@ 0x28
 801842a:	f002 fe6f 	bl	801b10c <uxr_serialize_ACKNACK_Payload>
 801842e:	2200      	movs	r2, #0
 8018430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018432:	4628      	mov	r0, r5
 8018434:	4611      	mov	r1, r2
 8018436:	f000 ff87 	bl	8019348 <uxr_stamp_session_header>
 801843a:	a80a      	add	r0, sp, #40	@ 0x28
 801843c:	f7f7 fde8 	bl	8010010 <ucdr_buffer_length>
 8018440:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8018442:	4602      	mov	r2, r0
 8018444:	a905      	add	r1, sp, #20
 8018446:	e9d3 0400 	ldrd	r0, r4, [r3]
 801844a:	47a0      	blx	r4
 801844c:	b012      	add	sp, #72	@ 0x48
 801844e:	bd70      	pop	{r4, r5, r6, pc}

08018450 <uxr_init_session>:
 8018450:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8018488 <uxr_init_session+0x38>
 8018454:	2300      	movs	r3, #0
 8018456:	b510      	push	{r4, lr}
 8018458:	4604      	mov	r4, r0
 801845a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801845e:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8018462:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8018466:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801846a:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801846e:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8018472:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8018476:	2181      	movs	r1, #129	@ 0x81
 8018478:	f000 feca 	bl	8019210 <uxr_init_session_info>
 801847c:	f104 0008 	add.w	r0, r4, #8
 8018480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018484:	f001 bcc4 	b.w	8019e10 <uxr_init_stream_storage>
	...

08018490 <uxr_set_status_callback>:
 8018490:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop

08018498 <uxr_set_topic_callback>:
 8018498:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801849c:	4770      	bx	lr
 801849e:	bf00      	nop

080184a0 <uxr_set_request_callback>:
 80184a0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80184a4:	4770      	bx	lr
 80184a6:	bf00      	nop

080184a8 <uxr_set_reply_callback>:
 80184a8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80184ac:	4770      	bx	lr
 80184ae:	bf00      	nop

080184b0 <uxr_create_output_best_effort_stream>:
 80184b0:	b510      	push	{r4, lr}
 80184b2:	4604      	mov	r4, r0
 80184b4:	b084      	sub	sp, #16
 80184b6:	e9cd 2100 	strd	r2, r1, [sp]
 80184ba:	f000 ff99 	bl	80193f0 <uxr_session_header_offset>
 80184be:	4603      	mov	r3, r0
 80184c0:	f104 0008 	add.w	r0, r4, #8
 80184c4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80184c8:	b004      	add	sp, #16
 80184ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184ce:	f001 bce5 	b.w	8019e9c <uxr_add_output_best_effort_buffer>
 80184d2:	bf00      	nop

080184d4 <uxr_create_output_reliable_stream>:
 80184d4:	b530      	push	{r4, r5, lr}
 80184d6:	b089      	sub	sp, #36	@ 0x24
 80184d8:	4604      	mov	r4, r0
 80184da:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80184de:	9303      	str	r3, [sp, #12]
 80184e0:	f000 ff86 	bl	80193f0 <uxr_session_header_offset>
 80184e4:	4605      	mov	r5, r0
 80184e6:	9905      	ldr	r1, [sp, #20]
 80184e8:	f104 0008 	add.w	r0, r4, #8
 80184ec:	9500      	str	r5, [sp, #0]
 80184ee:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80184f2:	f001 fce7 	bl	8019ec4 <uxr_add_output_reliable_buffer>
 80184f6:	2200      	movs	r2, #0
 80184f8:	fa5f fc80 	uxtb.w	ip, r0
 80184fc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018500:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018504:	0e03      	lsrs	r3, r0, #24
 8018506:	f36c 0207 	bfi	r2, ip, #0, #8
 801850a:	f364 220f 	bfi	r2, r4, #8, #8
 801850e:	f361 4217 	bfi	r2, r1, #16, #8
 8018512:	f363 621f 	bfi	r2, r3, #24, #8
 8018516:	4610      	mov	r0, r2
 8018518:	b009      	add	sp, #36	@ 0x24
 801851a:	bd30      	pop	{r4, r5, pc}

0801851c <uxr_create_input_best_effort_stream>:
 801851c:	b082      	sub	sp, #8
 801851e:	3008      	adds	r0, #8
 8018520:	b002      	add	sp, #8
 8018522:	f001 bce9 	b.w	8019ef8 <uxr_add_input_best_effort_buffer>
 8018526:	bf00      	nop

08018528 <uxr_create_input_reliable_stream>:
 8018528:	b510      	push	{r4, lr}
 801852a:	4c0c      	ldr	r4, [pc, #48]	@ (801855c <uxr_create_input_reliable_stream+0x34>)
 801852c:	b084      	sub	sp, #16
 801852e:	3008      	adds	r0, #8
 8018530:	9400      	str	r4, [sp, #0]
 8018532:	f001 fcf7 	bl	8019f24 <uxr_add_input_reliable_buffer>
 8018536:	2200      	movs	r2, #0
 8018538:	fa5f fe80 	uxtb.w	lr, r0
 801853c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8018540:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018544:	0e03      	lsrs	r3, r0, #24
 8018546:	f36e 0207 	bfi	r2, lr, #0, #8
 801854a:	f36c 220f 	bfi	r2, ip, #8, #8
 801854e:	f361 4217 	bfi	r2, r1, #16, #8
 8018552:	f363 621f 	bfi	r2, r3, #24, #8
 8018556:	4610      	mov	r0, r2
 8018558:	b004      	add	sp, #16
 801855a:	bd10      	pop	{r4, pc}
 801855c:	08018335 	.word	0x08018335

08018560 <uxr_epoch_nanos>:
 8018560:	b510      	push	{r4, lr}
 8018562:	4604      	mov	r4, r0
 8018564:	f001 fd9a 	bl	801a09c <uxr_nanos>
 8018568:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801856c:	1ac0      	subs	r0, r0, r3
 801856e:	eb61 0102 	sbc.w	r1, r1, r2
 8018572:	bd10      	pop	{r4, pc}

08018574 <uxr_flash_output_streams>:
 8018574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018578:	7e03      	ldrb	r3, [r0, #24]
 801857a:	b084      	sub	sp, #16
 801857c:	4604      	mov	r4, r0
 801857e:	b1fb      	cbz	r3, 80185c0 <uxr_flash_output_streams+0x4c>
 8018580:	f04f 0900 	mov.w	r9, #0
 8018584:	f10d 0802 	add.w	r8, sp, #2
 8018588:	af03      	add	r7, sp, #12
 801858a:	ae02      	add	r6, sp, #8
 801858c:	4648      	mov	r0, r9
 801858e:	2201      	movs	r2, #1
 8018590:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8018594:	4611      	mov	r1, r2
 8018596:	3508      	adds	r5, #8
 8018598:	f001 fbe0 	bl	8019d5c <uxr_stream_id>
 801859c:	4684      	mov	ip, r0
 801859e:	4643      	mov	r3, r8
 80185a0:	463a      	mov	r2, r7
 80185a2:	4631      	mov	r1, r6
 80185a4:	4628      	mov	r0, r5
 80185a6:	f8cd c004 	str.w	ip, [sp, #4]
 80185aa:	f003 fead 	bl	801c308 <uxr_prepare_best_effort_buffer_to_send>
 80185ae:	2800      	cmp	r0, #0
 80185b0:	d13d      	bne.n	801862e <uxr_flash_output_streams+0xba>
 80185b2:	f109 0901 	add.w	r9, r9, #1
 80185b6:	7e23      	ldrb	r3, [r4, #24]
 80185b8:	fa5f f089 	uxtb.w	r0, r9
 80185bc:	4283      	cmp	r3, r0
 80185be:	d8e6      	bhi.n	801858e <uxr_flash_output_streams+0x1a>
 80185c0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80185c4:	b383      	cbz	r3, 8018628 <uxr_flash_output_streams+0xb4>
 80185c6:	f04f 0900 	mov.w	r9, #0
 80185ca:	f10d 0802 	add.w	r8, sp, #2
 80185ce:	af03      	add	r7, sp, #12
 80185d0:	ae02      	add	r6, sp, #8
 80185d2:	4648      	mov	r0, r9
 80185d4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80185d8:	2201      	movs	r2, #1
 80185da:	2102      	movs	r1, #2
 80185dc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80185e0:	f001 fbbc 	bl	8019d5c <uxr_stream_id>
 80185e4:	9001      	str	r0, [sp, #4]
 80185e6:	3520      	adds	r5, #32
 80185e8:	e00c      	b.n	8018604 <uxr_flash_output_streams+0x90>
 80185ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80185ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80185f2:	9b02      	ldr	r3, [sp, #8]
 80185f4:	f000 fea8 	bl	8019348 <uxr_stamp_session_header>
 80185f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80185fa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80185fe:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8018602:	47d0      	blx	sl
 8018604:	4643      	mov	r3, r8
 8018606:	463a      	mov	r2, r7
 8018608:	4631      	mov	r1, r6
 801860a:	4628      	mov	r0, r5
 801860c:	f004 f8a0 	bl	801c750 <uxr_prepare_next_reliable_buffer_to_send>
 8018610:	4603      	mov	r3, r0
 8018612:	4620      	mov	r0, r4
 8018614:	2b00      	cmp	r3, #0
 8018616:	d1e8      	bne.n	80185ea <uxr_flash_output_streams+0x76>
 8018618:	f109 0901 	add.w	r9, r9, #1
 801861c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8018620:	fa5f f089 	uxtb.w	r0, r9
 8018624:	4283      	cmp	r3, r0
 8018626:	d8d5      	bhi.n	80185d4 <uxr_flash_output_streams+0x60>
 8018628:	b004      	add	sp, #16
 801862a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801862e:	9b02      	ldr	r3, [sp, #8]
 8018630:	4620      	mov	r0, r4
 8018632:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018636:	f109 0901 	add.w	r9, r9, #1
 801863a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801863e:	f000 fe83 	bl	8019348 <uxr_stamp_session_header>
 8018642:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018644:	9a03      	ldr	r2, [sp, #12]
 8018646:	685d      	ldr	r5, [r3, #4]
 8018648:	6818      	ldr	r0, [r3, #0]
 801864a:	9902      	ldr	r1, [sp, #8]
 801864c:	47a8      	blx	r5
 801864e:	7e23      	ldrb	r3, [r4, #24]
 8018650:	fa5f f089 	uxtb.w	r0, r9
 8018654:	4283      	cmp	r3, r0
 8018656:	d89a      	bhi.n	801858e <uxr_flash_output_streams+0x1a>
 8018658:	e7b2      	b.n	80185c0 <uxr_flash_output_streams+0x4c>
 801865a:	bf00      	nop

0801865c <read_submessage_info>:
 801865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018660:	460d      	mov	r5, r1
 8018662:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8018666:	4606      	mov	r6, r0
 8018668:	4669      	mov	r1, sp
 801866a:	4628      	mov	r0, r5
 801866c:	f002 fb7a 	bl	801ad64 <uxr_deserialize_BaseObjectReply>
 8018670:	4604      	mov	r4, r0
 8018672:	a902      	add	r1, sp, #8
 8018674:	4628      	mov	r0, r5
 8018676:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801867a:	f7f6 fa19 	bl	800eab0 <ucdr_deserialize_bool>
 801867e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8018682:	4004      	ands	r4, r0
 8018684:	b2e4      	uxtb	r4, r4
 8018686:	b95b      	cbnz	r3, 80186a0 <read_submessage_info+0x44>
 8018688:	a987      	add	r1, sp, #540	@ 0x21c
 801868a:	4628      	mov	r0, r5
 801868c:	f7f6 fa10 	bl	800eab0 <ucdr_deserialize_bool>
 8018690:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8018694:	4680      	mov	r8, r0
 8018696:	b94b      	cbnz	r3, 80186ac <read_submessage_info+0x50>
 8018698:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186a0:	a903      	add	r1, sp, #12
 80186a2:	4628      	mov	r0, r5
 80186a4:	f002 fa0a 	bl	801aabc <uxr_deserialize_ObjectVariant>
 80186a8:	4004      	ands	r4, r0
 80186aa:	e7ed      	b.n	8018688 <read_submessage_info+0x2c>
 80186ac:	a988      	add	r1, sp, #544	@ 0x220
 80186ae:	4628      	mov	r0, r5
 80186b0:	f7f6 fa2c 	bl	800eb0c <ucdr_deserialize_uint8_t>
 80186b4:	ea14 0f08 	tst.w	r4, r8
 80186b8:	d0ee      	beq.n	8018698 <read_submessage_info+0x3c>
 80186ba:	2800      	cmp	r0, #0
 80186bc:	d0ec      	beq.n	8018698 <read_submessage_info+0x3c>
 80186be:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80186c2:	2b0d      	cmp	r3, #13
 80186c4:	d1e8      	bne.n	8018698 <read_submessage_info+0x3c>
 80186c6:	a98a      	add	r1, sp, #552	@ 0x228
 80186c8:	4628      	mov	r0, r5
 80186ca:	f7f6 ffc5 	bl	800f658 <ucdr_deserialize_int16_t>
 80186ce:	b138      	cbz	r0, 80186e0 <read_submessage_info+0x84>
 80186d0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	dd06      	ble.n	80186e6 <read_submessage_info+0x8a>
 80186d8:	2f00      	cmp	r7, #0
 80186da:	bf14      	ite	ne
 80186dc:	2001      	movne	r0, #1
 80186de:	2002      	moveq	r0, #2
 80186e0:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 80186e4:	e7d8      	b.n	8018698 <read_submessage_info+0x3c>
 80186e6:	2000      	movs	r0, #0
 80186e8:	e7fa      	b.n	80186e0 <read_submessage_info+0x84>
 80186ea:	bf00      	nop

080186ec <read_submessage_list>:
 80186ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186f0:	4604      	mov	r4, r0
 80186f2:	b097      	sub	sp, #92	@ 0x5c
 80186f4:	460d      	mov	r5, r1
 80186f6:	4ec1      	ldr	r6, [pc, #772]	@ (80189fc <read_submessage_list+0x310>)
 80186f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80186fa:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80186fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8018700:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8018704:	4628      	mov	r0, r5
 8018706:	f001 fc81 	bl	801a00c <uxr_read_submessage_header>
 801870a:	2800      	cmp	r0, #0
 801870c:	f000 8142 	beq.w	8018994 <read_submessage_list+0x2a8>
 8018710:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8018714:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8018718:	3b02      	subs	r3, #2
 801871a:	2b0d      	cmp	r3, #13
 801871c:	d8ed      	bhi.n	80186fa <read_submessage_list+0xe>
 801871e:	a101      	add	r1, pc, #4	@ (adr r1, 8018724 <read_submessage_list+0x38>)
 8018720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018724:	0801898b 	.word	0x0801898b
 8018728:	080186fb 	.word	0x080186fb
 801872c:	0801897b 	.word	0x0801897b
 8018730:	08018919 	.word	0x08018919
 8018734:	0801890f 	.word	0x0801890f
 8018738:	080186fb 	.word	0x080186fb
 801873c:	080186fb 	.word	0x080186fb
 8018740:	08018865 	.word	0x08018865
 8018744:	080187f7 	.word	0x080187f7
 8018748:	080187b7 	.word	0x080187b7
 801874c:	080186fb 	.word	0x080186fb
 8018750:	080186fb 	.word	0x080186fb
 8018754:	080186fb 	.word	0x080186fb
 8018758:	0801875d 	.word	0x0801875d
 801875c:	a910      	add	r1, sp, #64	@ 0x40
 801875e:	4628      	mov	r0, r5
 8018760:	f002 fd28 	bl	801b1b4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8018764:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8018768:	f1b8 0f00 	cmp.w	r8, #0
 801876c:	f000 811a 	beq.w	80189a4 <read_submessage_list+0x2b8>
 8018770:	f001 fc94 	bl	801a09c <uxr_nanos>
 8018774:	4602      	mov	r2, r0
 8018776:	460b      	mov	r3, r1
 8018778:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 801877c:	2100      	movs	r1, #0
 801877e:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8018780:	9006      	str	r0, [sp, #24]
 8018782:	468c      	mov	ip, r1
 8018784:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8018786:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801878a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801878c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8018790:	468c      	mov	ip, r1
 8018792:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018794:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018798:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801879c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 80187a0:	fbc7 0106 	smlal	r0, r1, r7, r6
 80187a4:	e9cd 0100 	strd	r0, r1, [sp]
 80187a8:	4620      	mov	r0, r4
 80187aa:	47c0      	blx	r8
 80187ac:	f04f 0301 	mov.w	r3, #1
 80187b0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80187b4:	e7a1      	b.n	80186fa <read_submessage_list+0xe>
 80187b6:	a910      	add	r1, sp, #64	@ 0x40
 80187b8:	4628      	mov	r0, r5
 80187ba:	f002 fce7 	bl	801b18c <uxr_deserialize_HEARTBEAT_Payload>
 80187be:	2100      	movs	r1, #0
 80187c0:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80187c4:	f001 faf8 	bl	8019db8 <uxr_stream_id_from_raw>
 80187c8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80187cc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80187ce:	f104 0008 	add.w	r0, r4, #8
 80187d2:	4641      	mov	r1, r8
 80187d4:	f001 fbde 	bl	8019f94 <uxr_get_input_reliable_stream>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d08e      	beq.n	80186fa <read_submessage_list+0xe>
 80187dc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80187e0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80187e4:	f003 fcfa 	bl	801c1dc <uxr_process_heartbeat>
 80187e8:	4642      	mov	r2, r8
 80187ea:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80187ee:	4620      	mov	r0, r4
 80187f0:	f7ff fdf8 	bl	80183e4 <write_submessage_acknack.isra.0>
 80187f4:	e781      	b.n	80186fa <read_submessage_list+0xe>
 80187f6:	a910      	add	r1, sp, #64	@ 0x40
 80187f8:	4628      	mov	r0, r5
 80187fa:	f002 fc9f 	bl	801b13c <uxr_deserialize_ACKNACK_Payload>
 80187fe:	2100      	movs	r1, #0
 8018800:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8018804:	f001 fad8 	bl	8019db8 <uxr_stream_id_from_raw>
 8018808:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801880c:	900d      	str	r0, [sp, #52]	@ 0x34
 801880e:	f104 0008 	add.w	r0, r4, #8
 8018812:	f001 fba9 	bl	8019f68 <uxr_get_output_reliable_stream>
 8018816:	4680      	mov	r8, r0
 8018818:	2800      	cmp	r0, #0
 801881a:	f43f af6e 	beq.w	80186fa <read_submessage_list+0xe>
 801881e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8018822:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8018826:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801882a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801882e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8018832:	b289      	uxth	r1, r1
 8018834:	f004 f834 	bl	801c8a0 <uxr_process_acknack>
 8018838:	4640      	mov	r0, r8
 801883a:	f003 fff5 	bl	801c828 <uxr_begin_output_nack_buffer_it>
 801883e:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8018842:	e005      	b.n	8018850 <read_submessage_list+0x164>
 8018844:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018846:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 801884a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801884e:	47c8      	blx	r9
 8018850:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8018854:	aa0f      	add	r2, sp, #60	@ 0x3c
 8018856:	4651      	mov	r1, sl
 8018858:	4640      	mov	r0, r8
 801885a:	f003 ffe7 	bl	801c82c <uxr_next_reliable_nack_buffer_to_send>
 801885e:	2800      	cmp	r0, #0
 8018860:	d1f0      	bne.n	8018844 <read_submessage_list+0x158>
 8018862:	e74a      	b.n	80186fa <read_submessage_list+0xe>
 8018864:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8018868:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801886c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8018870:	4628      	mov	r0, r5
 8018872:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8018876:	4651      	mov	r1, sl
 8018878:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801887c:	f1a8 0804 	sub.w	r8, r8, #4
 8018880:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8018884:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8018888:	fa1f f888 	uxth.w	r8, r8
 801888c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018890:	f009 090e 	and.w	r9, r9, #14
 8018894:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8018898:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801889c:	f002 f9b0 	bl	801ac00 <uxr_deserialize_BaseObjectRequest>
 80188a0:	4650      	mov	r0, sl
 80188a2:	a90f      	add	r1, sp, #60	@ 0x3c
 80188a4:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80188a8:	f000 fdca 	bl	8019440 <uxr_parse_base_object_request>
 80188ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80188ae:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80188b2:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80188b6:	9110      	str	r1, [sp, #64]	@ 0x40
 80188b8:	f1bb 0f00 	cmp.w	fp, #0
 80188bc:	d006      	beq.n	80188cc <read_submessage_list+0x1e0>
 80188be:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80188c2:	4652      	mov	r2, sl
 80188c4:	4620      	mov	r0, r4
 80188c6:	9300      	str	r3, [sp, #0]
 80188c8:	2300      	movs	r3, #0
 80188ca:	47d8      	blx	fp
 80188cc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80188ce:	b182      	cbz	r2, 80188f2 <read_submessage_list+0x206>
 80188d0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80188d2:	f04f 0c00 	mov.w	ip, #0
 80188d6:	3902      	subs	r1, #2
 80188d8:	e003      	b.n	80188e2 <read_submessage_list+0x1f6>
 80188da:	f10c 0c01 	add.w	ip, ip, #1
 80188de:	4594      	cmp	ip, r2
 80188e0:	d007      	beq.n	80188f2 <read_submessage_list+0x206>
 80188e2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80188e6:	4553      	cmp	r3, sl
 80188e8:	d1f7      	bne.n	80188da <read_submessage_list+0x1ee>
 80188ea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80188ec:	2200      	movs	r2, #0
 80188ee:	f803 200c 	strb.w	r2, [r3, ip]
 80188f2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80188f6:	464b      	mov	r3, r9
 80188f8:	4642      	mov	r2, r8
 80188fa:	4620      	mov	r0, r4
 80188fc:	9102      	str	r1, [sp, #8]
 80188fe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018900:	9101      	str	r1, [sp, #4]
 8018902:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8018904:	9100      	str	r1, [sp, #0]
 8018906:	4629      	mov	r1, r5
 8018908:	f7ff fc4a 	bl	80181a0 <read_submessage_format>
 801890c:	e6f5      	b.n	80186fa <read_submessage_list+0xe>
 801890e:	4629      	mov	r1, r5
 8018910:	4620      	mov	r0, r4
 8018912:	f7ff fea3 	bl	801865c <read_submessage_info>
 8018916:	e6f0      	b.n	80186fa <read_submessage_list+0xe>
 8018918:	2a00      	cmp	r2, #0
 801891a:	d03e      	beq.n	801899a <read_submessage_list+0x2ae>
 801891c:	a910      	add	r1, sp, #64	@ 0x40
 801891e:	4628      	mov	r0, r5
 8018920:	f002 fb64 	bl	801afec <uxr_deserialize_STATUS_Payload>
 8018924:	a90e      	add	r1, sp, #56	@ 0x38
 8018926:	aa0d      	add	r2, sp, #52	@ 0x34
 8018928:	a810      	add	r0, sp, #64	@ 0x40
 801892a:	f000 fd89 	bl	8019440 <uxr_parse_base_object_request>
 801892e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018930:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8018934:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8018938:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 801893c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801893e:	f1ba 0f00 	cmp.w	sl, #0
 8018942:	d006      	beq.n	8018952 <read_submessage_list+0x266>
 8018944:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8018948:	4642      	mov	r2, r8
 801894a:	4620      	mov	r0, r4
 801894c:	9300      	str	r3, [sp, #0]
 801894e:	464b      	mov	r3, r9
 8018950:	47d0      	blx	sl
 8018952:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8018954:	2a00      	cmp	r2, #0
 8018956:	f43f aed0 	beq.w	80186fa <read_submessage_list+0xe>
 801895a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801895c:	2100      	movs	r1, #0
 801895e:	3802      	subs	r0, #2
 8018960:	e003      	b.n	801896a <read_submessage_list+0x27e>
 8018962:	3101      	adds	r1, #1
 8018964:	4291      	cmp	r1, r2
 8018966:	f43f aec8 	beq.w	80186fa <read_submessage_list+0xe>
 801896a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801896e:	4543      	cmp	r3, r8
 8018970:	d1f7      	bne.n	8018962 <read_submessage_list+0x276>
 8018972:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8018974:	f803 9001 	strb.w	r9, [r3, r1]
 8018978:	e6bf      	b.n	80186fa <read_submessage_list+0xe>
 801897a:	2a00      	cmp	r2, #0
 801897c:	f47f aebd 	bne.w	80186fa <read_submessage_list+0xe>
 8018980:	4629      	mov	r1, r5
 8018982:	4620      	mov	r0, r4
 8018984:	f000 fca0 	bl	80192c8 <uxr_read_create_session_status>
 8018988:	e6b7      	b.n	80186fa <read_submessage_list+0xe>
 801898a:	4629      	mov	r1, r5
 801898c:	4620      	mov	r0, r4
 801898e:	f7ff fcf3 	bl	8018378 <read_submessage_get_info>
 8018992:	e6b2      	b.n	80186fa <read_submessage_list+0xe>
 8018994:	b017      	add	sp, #92	@ 0x5c
 8018996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801899a:	4629      	mov	r1, r5
 801899c:	4620      	mov	r0, r4
 801899e:	f000 fca1 	bl	80192e4 <uxr_read_delete_session_status>
 80189a2:	e6aa      	b.n	80186fa <read_submessage_list+0xe>
 80189a4:	f001 fb7a 	bl	801a09c <uxr_nanos>
 80189a8:	4642      	mov	r2, r8
 80189aa:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80189ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189ae:	fbc7 3206 	smlal	r3, r2, r7, r6
 80189b2:	1818      	adds	r0, r3, r0
 80189b4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80189b6:	eb42 0101 	adc.w	r1, r2, r1
 80189ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80189bc:	4642      	mov	r2, r8
 80189be:	fbc7 3206 	smlal	r3, r2, r7, r6
 80189c2:	469c      	mov	ip, r3
 80189c4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 80189c8:	fbc3 7806 	smlal	r7, r8, r3, r6
 80189cc:	4643      	mov	r3, r8
 80189ce:	eb1c 0c07 	adds.w	ip, ip, r7
 80189d2:	eb42 0203 	adc.w	r2, r2, r3
 80189d6:	ebb0 030c 	subs.w	r3, r0, ip
 80189da:	eb61 0202 	sbc.w	r2, r1, r2
 80189de:	2a00      	cmp	r2, #0
 80189e0:	db08      	blt.n	80189f4 <read_submessage_list+0x308>
 80189e2:	085b      	lsrs	r3, r3, #1
 80189e4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80189e8:	1052      	asrs	r2, r2, #1
 80189ea:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80189ee:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 80189f2:	e6db      	b.n	80187ac <read_submessage_list+0xc0>
 80189f4:	3301      	adds	r3, #1
 80189f6:	f142 0200 	adc.w	r2, r2, #0
 80189fa:	e7f2      	b.n	80189e2 <read_submessage_list+0x2f6>
 80189fc:	3b9aca00 	.word	0x3b9aca00

08018a00 <listen_message_reliably>:
 8018a00:	1e0b      	subs	r3, r1, #0
 8018a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a06:	bfb8      	it	lt
 8018a08:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8018a0c:	b09d      	sub	sp, #116	@ 0x74
 8018a0e:	4680      	mov	r8, r0
 8018a10:	9305      	str	r3, [sp, #20]
 8018a12:	f001 fb27 	bl	801a064 <uxr_millis>
 8018a16:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8018a1a:	4681      	mov	r9, r0
 8018a1c:	2a00      	cmp	r2, #0
 8018a1e:	f000 809a 	beq.w	8018b56 <listen_message_reliably+0x156>
 8018a22:	2600      	movs	r6, #0
 8018a24:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018a28:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8018a2c:	460f      	mov	r7, r1
 8018a2e:	4630      	mov	r0, r6
 8018a30:	9303      	str	r3, [sp, #12]
 8018a32:	e00e      	b.n	8018a52 <listen_message_reliably+0x52>
 8018a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018a36:	3601      	adds	r6, #1
 8018a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018a3a:	455a      	cmp	r2, fp
 8018a3c:	9903      	ldr	r1, [sp, #12]
 8018a3e:	b2f0      	uxtb	r0, r6
 8018a40:	eb73 0101 	sbcs.w	r1, r3, r1
 8018a44:	da01      	bge.n	8018a4a <listen_message_reliably+0x4a>
 8018a46:	4693      	mov	fp, r2
 8018a48:	9303      	str	r3, [sp, #12]
 8018a4a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8018a4e:	4283      	cmp	r3, r0
 8018a50:	d95f      	bls.n	8018b12 <listen_message_reliably+0x112>
 8018a52:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8018a56:	2102      	movs	r1, #2
 8018a58:	2201      	movs	r2, #1
 8018a5a:	00e4      	lsls	r4, r4, #3
 8018a5c:	f001 f97e 	bl	8019d5c <uxr_stream_id>
 8018a60:	4601      	mov	r1, r0
 8018a62:	f104 0520 	add.w	r5, r4, #32
 8018a66:	463b      	mov	r3, r7
 8018a68:	464a      	mov	r2, r9
 8018a6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8018a6c:	4445      	add	r5, r8
 8018a6e:	4628      	mov	r0, r5
 8018a70:	f003 feae 	bl	801c7d0 <uxr_update_output_stream_heartbeat_timestamp>
 8018a74:	eb08 0304 	add.w	r3, r8, r4
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	d0db      	beq.n	8018a34 <listen_message_reliably+0x34>
 8018a7c:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8018a80:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8018a84:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8018a88:	4640      	mov	r0, r8
 8018a8a:	3501      	adds	r5, #1
 8018a8c:	4444      	add	r4, r8
 8018a8e:	9304      	str	r3, [sp, #16]
 8018a90:	f000 fcae 	bl	80193f0 <uxr_session_header_offset>
 8018a94:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8018a98:	2300      	movs	r3, #0
 8018a9a:	2211      	movs	r2, #17
 8018a9c:	a90c      	add	r1, sp, #48	@ 0x30
 8018a9e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8018aa2:	9000      	str	r0, [sp, #0]
 8018aa4:	4650      	mov	r0, sl
 8018aa6:	3601      	adds	r6, #1
 8018aa8:	f7f7 fa72 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 8018aac:	2300      	movs	r3, #0
 8018aae:	2205      	movs	r2, #5
 8018ab0:	210b      	movs	r1, #11
 8018ab2:	4650      	mov	r0, sl
 8018ab4:	f001 fa90 	bl	8019fd8 <uxr_buffer_submessage_header>
 8018ab8:	2101      	movs	r1, #1
 8018aba:	8968      	ldrh	r0, [r5, #10]
 8018abc:	f003 ff2a 	bl	801c914 <uxr_seq_num_add>
 8018ac0:	892b      	ldrh	r3, [r5, #8]
 8018ac2:	4602      	mov	r2, r0
 8018ac4:	a90a      	add	r1, sp, #40	@ 0x28
 8018ac6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8018aca:	4650      	mov	r0, sl
 8018acc:	9b04      	ldr	r3, [sp, #16]
 8018ace:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018ad2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8018ad6:	f002 fb45 	bl	801b164 <uxr_serialize_HEARTBEAT_Payload>
 8018ada:	2200      	movs	r2, #0
 8018adc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018ade:	4640      	mov	r0, r8
 8018ae0:	4611      	mov	r1, r2
 8018ae2:	f000 fc31 	bl	8019348 <uxr_stamp_session_header>
 8018ae6:	4650      	mov	r0, sl
 8018ae8:	f7f7 fa92 	bl	8010010 <ucdr_buffer_length>
 8018aec:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8018af0:	4602      	mov	r2, r0
 8018af2:	a90c      	add	r1, sp, #48	@ 0x30
 8018af4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018af8:	47a8      	blx	r5
 8018afa:	9903      	ldr	r1, [sp, #12]
 8018afc:	b2f0      	uxtb	r0, r6
 8018afe:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8018b02:	455a      	cmp	r2, fp
 8018b04:	eb73 0101 	sbcs.w	r1, r3, r1
 8018b08:	db9d      	blt.n	8018a46 <listen_message_reliably+0x46>
 8018b0a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8018b0e:	4283      	cmp	r3, r0
 8018b10:	d89f      	bhi.n	8018a52 <listen_message_reliably+0x52>
 8018b12:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018b16:	9a03      	ldr	r2, [sp, #12]
 8018b18:	429a      	cmp	r2, r3
 8018b1a:	bf08      	it	eq
 8018b1c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8018b20:	d019      	beq.n	8018b56 <listen_message_reliably+0x156>
 8018b22:	ebab 0309 	sub.w	r3, fp, r9
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	9d05      	ldr	r5, [sp, #20]
 8018b2a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8018b2e:	aa08      	add	r2, sp, #32
 8018b30:	bf08      	it	eq
 8018b32:	2301      	moveq	r3, #1
 8018b34:	a907      	add	r1, sp, #28
 8018b36:	6884      	ldr	r4, [r0, #8]
 8018b38:	429d      	cmp	r5, r3
 8018b3a:	6800      	ldr	r0, [r0, #0]
 8018b3c:	bfa8      	it	ge
 8018b3e:	461d      	movge	r5, r3
 8018b40:	462b      	mov	r3, r5
 8018b42:	47a0      	blx	r4
 8018b44:	b948      	cbnz	r0, 8018b5a <listen_message_reliably+0x15a>
 8018b46:	9b05      	ldr	r3, [sp, #20]
 8018b48:	1b5b      	subs	r3, r3, r5
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	9305      	str	r3, [sp, #20]
 8018b4e:	f73f af60 	bgt.w	8018a12 <listen_message_reliably+0x12>
 8018b52:	4604      	mov	r4, r0
 8018b54:	e012      	b.n	8018b7c <listen_message_reliably+0x17c>
 8018b56:	9b05      	ldr	r3, [sp, #20]
 8018b58:	e7e5      	b.n	8018b26 <listen_message_reliably+0x126>
 8018b5a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018b5e:	4604      	mov	r4, r0
 8018b60:	2500      	movs	r5, #0
 8018b62:	a80c      	add	r0, sp, #48	@ 0x30
 8018b64:	f7f7 fa26 	bl	800ffb4 <ucdr_init_buffer>
 8018b68:	f10d 031a 	add.w	r3, sp, #26
 8018b6c:	aa06      	add	r2, sp, #24
 8018b6e:	a90c      	add	r1, sp, #48	@ 0x30
 8018b70:	4640      	mov	r0, r8
 8018b72:	f88d 5018 	strb.w	r5, [sp, #24]
 8018b76:	f000 fbfb 	bl	8019370 <uxr_read_session_header>
 8018b7a:	b918      	cbnz	r0, 8018b84 <listen_message_reliably+0x184>
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	b01d      	add	sp, #116	@ 0x74
 8018b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b84:	4629      	mov	r1, r5
 8018b86:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018b8a:	f001 f915 	bl	8019db8 <uxr_stream_id_from_raw>
 8018b8e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8018b92:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8018b96:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8018b9a:	2e01      	cmp	r6, #1
 8018b9c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8018ba0:	d04b      	beq.n	8018c3a <listen_message_reliably+0x23a>
 8018ba2:	2e02      	cmp	r6, #2
 8018ba4:	d00f      	beq.n	8018bc6 <listen_message_reliably+0x1c6>
 8018ba6:	2e00      	cmp	r6, #0
 8018ba8:	d1e8      	bne.n	8018b7c <listen_message_reliably+0x17c>
 8018baa:	4631      	mov	r1, r6
 8018bac:	4630      	mov	r0, r6
 8018bae:	f001 f903 	bl	8019db8 <uxr_stream_id_from_raw>
 8018bb2:	4602      	mov	r2, r0
 8018bb4:	a90c      	add	r1, sp, #48	@ 0x30
 8018bb6:	4640      	mov	r0, r8
 8018bb8:	920a      	str	r2, [sp, #40]	@ 0x28
 8018bba:	f7ff fd97 	bl	80186ec <read_submessage_list>
 8018bbe:	4620      	mov	r0, r4
 8018bc0:	b01d      	add	sp, #116	@ 0x74
 8018bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bc6:	4629      	mov	r1, r5
 8018bc8:	f108 0008 	add.w	r0, r8, #8
 8018bcc:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8018bd0:	f001 f9e0 	bl	8019f94 <uxr_get_input_reliable_stream>
 8018bd4:	4607      	mov	r7, r0
 8018bd6:	b338      	cbz	r0, 8018c28 <listen_message_reliably+0x228>
 8018bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018bda:	a80c      	add	r0, sp, #48	@ 0x30
 8018bdc:	9203      	str	r2, [sp, #12]
 8018bde:	f7f7 fa1b 	bl	8010018 <ucdr_buffer_remaining>
 8018be2:	4603      	mov	r3, r0
 8018be4:	f10d 0019 	add.w	r0, sp, #25
 8018be8:	9a03      	ldr	r2, [sp, #12]
 8018bea:	4651      	mov	r1, sl
 8018bec:	9000      	str	r0, [sp, #0]
 8018bee:	4638      	mov	r0, r7
 8018bf0:	f003 f9f8 	bl	801bfe4 <uxr_receive_reliable_message>
 8018bf4:	b1c0      	cbz	r0, 8018c28 <listen_message_reliably+0x228>
 8018bf6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018bfa:	b393      	cbz	r3, 8018c62 <listen_message_reliably+0x262>
 8018bfc:	ae14      	add	r6, sp, #80	@ 0x50
 8018bfe:	f04f 0a02 	mov.w	sl, #2
 8018c02:	e00a      	b.n	8018c1a <listen_message_reliably+0x21a>
 8018c04:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8018c08:	4631      	mov	r1, r6
 8018c0a:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8018c0e:	4640      	mov	r0, r8
 8018c10:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8018c14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018c16:	f7ff fd69 	bl	80186ec <read_submessage_list>
 8018c1a:	2204      	movs	r2, #4
 8018c1c:	4631      	mov	r1, r6
 8018c1e:	4638      	mov	r0, r7
 8018c20:	f003 fa62 	bl	801c0e8 <uxr_next_input_reliable_buffer_available>
 8018c24:	2800      	cmp	r0, #0
 8018c26:	d1ed      	bne.n	8018c04 <listen_message_reliably+0x204>
 8018c28:	4640      	mov	r0, r8
 8018c2a:	462a      	mov	r2, r5
 8018c2c:	4649      	mov	r1, r9
 8018c2e:	f7ff fbd9 	bl	80183e4 <write_submessage_acknack.isra.0>
 8018c32:	4620      	mov	r0, r4
 8018c34:	b01d      	add	sp, #116	@ 0x74
 8018c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c3a:	4629      	mov	r1, r5
 8018c3c:	f108 0008 	add.w	r0, r8, #8
 8018c40:	f001 f99e 	bl	8019f80 <uxr_get_input_best_effort_stream>
 8018c44:	2800      	cmp	r0, #0
 8018c46:	d099      	beq.n	8018b7c <listen_message_reliably+0x17c>
 8018c48:	4651      	mov	r1, sl
 8018c4a:	f003 f941 	bl	801bed0 <uxr_receive_best_effort_message>
 8018c4e:	2800      	cmp	r0, #0
 8018c50:	d094      	beq.n	8018b7c <listen_message_reliably+0x17c>
 8018c52:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8018c56:	a90c      	add	r1, sp, #48	@ 0x30
 8018c58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018c5a:	4640      	mov	r0, r8
 8018c5c:	f7ff fd46 	bl	80186ec <read_submessage_list>
 8018c60:	e78c      	b.n	8018b7c <listen_message_reliably+0x17c>
 8018c62:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8018c66:	a90c      	add	r1, sp, #48	@ 0x30
 8018c68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018c6a:	4640      	mov	r0, r8
 8018c6c:	f7ff fd3e 	bl	80186ec <read_submessage_list>
 8018c70:	e7c4      	b.n	8018bfc <listen_message_reliably+0x1fc>
 8018c72:	bf00      	nop

08018c74 <uxr_run_session_timeout>:
 8018c74:	b570      	push	{r4, r5, r6, lr}
 8018c76:	4604      	mov	r4, r0
 8018c78:	460d      	mov	r5, r1
 8018c7a:	f001 f9f3 	bl	801a064 <uxr_millis>
 8018c7e:	4606      	mov	r6, r0
 8018c80:	4620      	mov	r0, r4
 8018c82:	f7ff fc77 	bl	8018574 <uxr_flash_output_streams>
 8018c86:	4629      	mov	r1, r5
 8018c88:	4620      	mov	r0, r4
 8018c8a:	f7ff feb9 	bl	8018a00 <listen_message_reliably>
 8018c8e:	f001 f9e9 	bl	801a064 <uxr_millis>
 8018c92:	1b83      	subs	r3, r0, r6
 8018c94:	1ae9      	subs	r1, r5, r3
 8018c96:	2900      	cmp	r1, #0
 8018c98:	dcf6      	bgt.n	8018c88 <uxr_run_session_timeout+0x14>
 8018c9a:	f104 0008 	add.w	r0, r4, #8
 8018c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ca2:	f001 b983 	b.w	8019fac <uxr_output_streams_confirmed>
 8018ca6:	bf00      	nop

08018ca8 <uxr_run_session_until_data>:
 8018ca8:	b570      	push	{r4, r5, r6, lr}
 8018caa:	4604      	mov	r4, r0
 8018cac:	460d      	mov	r5, r1
 8018cae:	f001 f9d9 	bl	801a064 <uxr_millis>
 8018cb2:	4606      	mov	r6, r0
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f7ff fc5d 	bl	8018574 <uxr_flash_output_streams>
 8018cba:	2300      	movs	r3, #0
 8018cbc:	4629      	mov	r1, r5
 8018cbe:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8018cc2:	e005      	b.n	8018cd0 <uxr_run_session_until_data+0x28>
 8018cc4:	f001 f9ce 	bl	801a064 <uxr_millis>
 8018cc8:	1b83      	subs	r3, r0, r6
 8018cca:	1ae9      	subs	r1, r5, r3
 8018ccc:	2900      	cmp	r1, #0
 8018cce:	dd07      	ble.n	8018ce0 <uxr_run_session_until_data+0x38>
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	f7ff fe95 	bl	8018a00 <listen_message_reliably>
 8018cd6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8018cda:	2800      	cmp	r0, #0
 8018cdc:	d0f2      	beq.n	8018cc4 <uxr_run_session_until_data+0x1c>
 8018cde:	bd70      	pop	{r4, r5, r6, pc}
 8018ce0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8018ce4:	bd70      	pop	{r4, r5, r6, pc}
 8018ce6:	bf00      	nop

08018ce8 <uxr_run_session_until_confirm_delivery>:
 8018ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cec:	4606      	mov	r6, r0
 8018cee:	460d      	mov	r5, r1
 8018cf0:	f001 f9b8 	bl	801a064 <uxr_millis>
 8018cf4:	4607      	mov	r7, r0
 8018cf6:	4630      	mov	r0, r6
 8018cf8:	f106 0808 	add.w	r8, r6, #8
 8018cfc:	f7ff fc3a 	bl	8018574 <uxr_flash_output_streams>
 8018d00:	2d00      	cmp	r5, #0
 8018d02:	db10      	blt.n	8018d26 <uxr_run_session_until_confirm_delivery+0x3e>
 8018d04:	462c      	mov	r4, r5
 8018d06:	e006      	b.n	8018d16 <uxr_run_session_until_confirm_delivery+0x2e>
 8018d08:	f7ff fe7a 	bl	8018a00 <listen_message_reliably>
 8018d0c:	f001 f9aa 	bl	801a064 <uxr_millis>
 8018d10:	1bc3      	subs	r3, r0, r7
 8018d12:	1aec      	subs	r4, r5, r3
 8018d14:	d407      	bmi.n	8018d26 <uxr_run_session_until_confirm_delivery+0x3e>
 8018d16:	4640      	mov	r0, r8
 8018d18:	f001 f948 	bl	8019fac <uxr_output_streams_confirmed>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	4621      	mov	r1, r4
 8018d20:	4630      	mov	r0, r6
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d0f0      	beq.n	8018d08 <uxr_run_session_until_confirm_delivery+0x20>
 8018d26:	4640      	mov	r0, r8
 8018d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d2c:	f001 b93e 	b.w	8019fac <uxr_output_streams_confirmed>

08018d30 <uxr_run_session_until_all_status>:
 8018d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d34:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8018d38:	4606      	mov	r6, r0
 8018d3a:	4688      	mov	r8, r1
 8018d3c:	4692      	mov	sl, r2
 8018d3e:	461f      	mov	r7, r3
 8018d40:	f7ff fc18 	bl	8018574 <uxr_flash_output_streams>
 8018d44:	f1bb 0f00 	cmp.w	fp, #0
 8018d48:	d004      	beq.n	8018d54 <uxr_run_session_until_all_status+0x24>
 8018d4a:	465a      	mov	r2, fp
 8018d4c:	21ff      	movs	r1, #255	@ 0xff
 8018d4e:	4638      	mov	r0, r7
 8018d50:	f004 fad8 	bl	801d304 <memset>
 8018d54:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018d58:	1e7d      	subs	r5, r7, #1
 8018d5a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8018d5e:	f001 f981 	bl	801a064 <uxr_millis>
 8018d62:	4641      	mov	r1, r8
 8018d64:	4681      	mov	r9, r0
 8018d66:	4630      	mov	r0, r6
 8018d68:	f7ff fe4a 	bl	8018a00 <listen_message_reliably>
 8018d6c:	f001 f97a 	bl	801a064 <uxr_millis>
 8018d70:	eba0 0009 	sub.w	r0, r0, r9
 8018d74:	eba8 0100 	sub.w	r1, r8, r0
 8018d78:	f1bb 0f00 	cmp.w	fp, #0
 8018d7c:	d029      	beq.n	8018dd2 <uxr_run_session_until_all_status+0xa2>
 8018d7e:	46ae      	mov	lr, r5
 8018d80:	f04f 0c00 	mov.w	ip, #0
 8018d84:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018d88:	2cff      	cmp	r4, #255	@ 0xff
 8018d8a:	d015      	beq.n	8018db8 <uxr_run_session_until_all_status+0x88>
 8018d8c:	f10c 0c01 	add.w	ip, ip, #1
 8018d90:	45e3      	cmp	fp, ip
 8018d92:	d8f7      	bhi.n	8018d84 <uxr_run_session_until_all_status+0x54>
 8018d94:	2300      	movs	r3, #0
 8018d96:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8018d98:	e000      	b.n	8018d9c <uxr_run_session_until_all_status+0x6c>
 8018d9a:	b158      	cbz	r0, 8018db4 <uxr_run_session_until_all_status+0x84>
 8018d9c:	462b      	mov	r3, r5
 8018d9e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018da2:	3302      	adds	r3, #2
 8018da4:	2801      	cmp	r0, #1
 8018da6:	eba3 0307 	sub.w	r3, r3, r7
 8018daa:	bf8c      	ite	hi
 8018dac:	2000      	movhi	r0, #0
 8018dae:	2001      	movls	r0, #1
 8018db0:	459b      	cmp	fp, r3
 8018db2:	d8f2      	bhi.n	8018d9a <uxr_run_session_until_all_status+0x6a>
 8018db4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018db8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018dbc:	f10c 0c01 	add.w	ip, ip, #1
 8018dc0:	45dc      	cmp	ip, fp
 8018dc2:	d201      	bcs.n	8018dc8 <uxr_run_session_until_all_status+0x98>
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d0dd      	beq.n	8018d84 <uxr_run_session_until_all_status+0x54>
 8018dc8:	2900      	cmp	r1, #0
 8018dca:	dde3      	ble.n	8018d94 <uxr_run_session_until_all_status+0x64>
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d1ca      	bne.n	8018d66 <uxr_run_session_until_all_status+0x36>
 8018dd0:	e7e0      	b.n	8018d94 <uxr_run_session_until_all_status+0x64>
 8018dd2:	2001      	movs	r0, #1
 8018dd4:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ddc <wait_session_status>:
 8018ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018de0:	4604      	mov	r4, r0
 8018de2:	b09d      	sub	sp, #116	@ 0x74
 8018de4:	20ff      	movs	r0, #255	@ 0xff
 8018de6:	9303      	str	r3, [sp, #12]
 8018de8:	7160      	strb	r0, [r4, #5]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	f000 80b6 	beq.w	8018f5c <wait_session_status+0x180>
 8018df0:	4689      	mov	r9, r1
 8018df2:	4692      	mov	sl, r2
 8018df4:	f04f 0b00 	mov.w	fp, #0
 8018df8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018dfa:	4652      	mov	r2, sl
 8018dfc:	4649      	mov	r1, r9
 8018dfe:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018e02:	47a8      	blx	r5
 8018e04:	f001 f92e 	bl	801a064 <uxr_millis>
 8018e08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018e0c:	4605      	mov	r5, r0
 8018e0e:	e009      	b.n	8018e24 <wait_session_status+0x48>
 8018e10:	f001 f928 	bl	801a064 <uxr_millis>
 8018e14:	1b40      	subs	r0, r0, r5
 8018e16:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	dd40      	ble.n	8018ea0 <wait_session_status+0xc4>
 8018e1e:	7960      	ldrb	r0, [r4, #5]
 8018e20:	28ff      	cmp	r0, #255	@ 0xff
 8018e22:	d145      	bne.n	8018eb0 <wait_session_status+0xd4>
 8018e24:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8018e26:	a908      	add	r1, sp, #32
 8018e28:	6896      	ldr	r6, [r2, #8]
 8018e2a:	6810      	ldr	r0, [r2, #0]
 8018e2c:	aa09      	add	r2, sp, #36	@ 0x24
 8018e2e:	47b0      	blx	r6
 8018e30:	2800      	cmp	r0, #0
 8018e32:	d0ed      	beq.n	8018e10 <wait_session_status+0x34>
 8018e34:	a80c      	add	r0, sp, #48	@ 0x30
 8018e36:	2600      	movs	r6, #0
 8018e38:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018e3c:	f7f7 f8ba 	bl	800ffb4 <ucdr_init_buffer>
 8018e40:	f10d 031e 	add.w	r3, sp, #30
 8018e44:	aa07      	add	r2, sp, #28
 8018e46:	a90c      	add	r1, sp, #48	@ 0x30
 8018e48:	4620      	mov	r0, r4
 8018e4a:	f88d 601c 	strb.w	r6, [sp, #28]
 8018e4e:	f000 fa8f 	bl	8019370 <uxr_read_session_header>
 8018e52:	2800      	cmp	r0, #0
 8018e54:	d0dc      	beq.n	8018e10 <wait_session_status+0x34>
 8018e56:	4631      	mov	r1, r6
 8018e58:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018e5c:	f000 ffac 	bl	8019db8 <uxr_stream_id_from_raw>
 8018e60:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018e64:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018e68:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018e6c:	2f01      	cmp	r7, #1
 8018e6e:	9302      	str	r3, [sp, #8]
 8018e70:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8018e74:	d05c      	beq.n	8018f30 <wait_session_status+0x154>
 8018e76:	2f02      	cmp	r7, #2
 8018e78:	d020      	beq.n	8018ebc <wait_session_status+0xe0>
 8018e7a:	2f00      	cmp	r7, #0
 8018e7c:	d1c8      	bne.n	8018e10 <wait_session_status+0x34>
 8018e7e:	4639      	mov	r1, r7
 8018e80:	4638      	mov	r0, r7
 8018e82:	f000 ff99 	bl	8019db8 <uxr_stream_id_from_raw>
 8018e86:	a90c      	add	r1, sp, #48	@ 0x30
 8018e88:	4602      	mov	r2, r0
 8018e8a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018e8c:	4620      	mov	r0, r4
 8018e8e:	f7ff fc2d 	bl	80186ec <read_submessage_list>
 8018e92:	f001 f8e7 	bl	801a064 <uxr_millis>
 8018e96:	1b40      	subs	r0, r0, r5
 8018e98:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	dcbe      	bgt.n	8018e1e <wait_session_status+0x42>
 8018ea0:	f10b 0b01 	add.w	fp, fp, #1
 8018ea4:	9b03      	ldr	r3, [sp, #12]
 8018ea6:	7960      	ldrb	r0, [r4, #5]
 8018ea8:	455b      	cmp	r3, fp
 8018eaa:	d001      	beq.n	8018eb0 <wait_session_status+0xd4>
 8018eac:	28ff      	cmp	r0, #255	@ 0xff
 8018eae:	d0a3      	beq.n	8018df8 <wait_session_status+0x1c>
 8018eb0:	38ff      	subs	r0, #255	@ 0xff
 8018eb2:	bf18      	it	ne
 8018eb4:	2001      	movne	r0, #1
 8018eb6:	b01d      	add	sp, #116	@ 0x74
 8018eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ebc:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8018ec0:	4631      	mov	r1, r6
 8018ec2:	f104 0008 	add.w	r0, r4, #8
 8018ec6:	9304      	str	r3, [sp, #16]
 8018ec8:	f001 f864 	bl	8019f94 <uxr_get_input_reliable_stream>
 8018ecc:	4680      	mov	r8, r0
 8018ece:	b348      	cbz	r0, 8018f24 <wait_session_status+0x148>
 8018ed0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ed2:	a80c      	add	r0, sp, #48	@ 0x30
 8018ed4:	9205      	str	r2, [sp, #20]
 8018ed6:	f7f7 f89f 	bl	8010018 <ucdr_buffer_remaining>
 8018eda:	4603      	mov	r3, r0
 8018edc:	f10d 001d 	add.w	r0, sp, #29
 8018ee0:	9a05      	ldr	r2, [sp, #20]
 8018ee2:	9000      	str	r0, [sp, #0]
 8018ee4:	4640      	mov	r0, r8
 8018ee6:	9902      	ldr	r1, [sp, #8]
 8018ee8:	f003 f87c 	bl	801bfe4 <uxr_receive_reliable_message>
 8018eec:	b1d0      	cbz	r0, 8018f24 <wait_session_status+0x148>
 8018eee:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d03a      	beq.n	8018f6c <wait_session_status+0x190>
 8018ef6:	9f04      	ldr	r7, [sp, #16]
 8018ef8:	e00a      	b.n	8018f10 <wait_session_status+0x134>
 8018efa:	f04f 0302 	mov.w	r3, #2
 8018efe:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8018f02:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8018f06:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8018f0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f0c:	f7ff fbee 	bl	80186ec <read_submessage_list>
 8018f10:	a914      	add	r1, sp, #80	@ 0x50
 8018f12:	2204      	movs	r2, #4
 8018f14:	4640      	mov	r0, r8
 8018f16:	f003 f8e7 	bl	801c0e8 <uxr_next_input_reliable_buffer_available>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	a914      	add	r1, sp, #80	@ 0x50
 8018f1e:	4620      	mov	r0, r4
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d1ea      	bne.n	8018efa <wait_session_status+0x11e>
 8018f24:	4632      	mov	r2, r6
 8018f26:	9904      	ldr	r1, [sp, #16]
 8018f28:	4620      	mov	r0, r4
 8018f2a:	f7ff fa5b 	bl	80183e4 <write_submessage_acknack.isra.0>
 8018f2e:	e76f      	b.n	8018e10 <wait_session_status+0x34>
 8018f30:	4631      	mov	r1, r6
 8018f32:	f104 0008 	add.w	r0, r4, #8
 8018f36:	f001 f823 	bl	8019f80 <uxr_get_input_best_effort_stream>
 8018f3a:	2800      	cmp	r0, #0
 8018f3c:	f43f af68 	beq.w	8018e10 <wait_session_status+0x34>
 8018f40:	9902      	ldr	r1, [sp, #8]
 8018f42:	f002 ffc5 	bl	801bed0 <uxr_receive_best_effort_message>
 8018f46:	2800      	cmp	r0, #0
 8018f48:	f43f af62 	beq.w	8018e10 <wait_session_status+0x34>
 8018f4c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018f50:	a90c      	add	r1, sp, #48	@ 0x30
 8018f52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f54:	4620      	mov	r0, r4
 8018f56:	f7ff fbc9 	bl	80186ec <read_submessage_list>
 8018f5a:	e759      	b.n	8018e10 <wait_session_status+0x34>
 8018f5c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018f5e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018f62:	47a0      	blx	r4
 8018f64:	2001      	movs	r0, #1
 8018f66:	b01d      	add	sp, #116	@ 0x74
 8018f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018f70:	a90c      	add	r1, sp, #48	@ 0x30
 8018f72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f74:	4620      	mov	r0, r4
 8018f76:	f7ff fbb9 	bl	80186ec <read_submessage_list>
 8018f7a:	e7bc      	b.n	8018ef6 <wait_session_status+0x11a>

08018f7c <uxr_delete_session_retries>:
 8018f7c:	b530      	push	{r4, r5, lr}
 8018f7e:	b08f      	sub	sp, #60	@ 0x3c
 8018f80:	4604      	mov	r4, r0
 8018f82:	460d      	mov	r5, r1
 8018f84:	f000 fa34 	bl	80193f0 <uxr_session_header_offset>
 8018f88:	2300      	movs	r3, #0
 8018f8a:	2210      	movs	r2, #16
 8018f8c:	a902      	add	r1, sp, #8
 8018f8e:	9000      	str	r0, [sp, #0]
 8018f90:	a806      	add	r0, sp, #24
 8018f92:	f7f6 fffd 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 8018f96:	a906      	add	r1, sp, #24
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f000 f979 	bl	8019290 <uxr_buffer_delete_session>
 8018f9e:	2200      	movs	r2, #0
 8018fa0:	9b06      	ldr	r3, [sp, #24]
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	4611      	mov	r1, r2
 8018fa6:	f000 f9cf 	bl	8019348 <uxr_stamp_session_header>
 8018faa:	a806      	add	r0, sp, #24
 8018fac:	f7f7 f830 	bl	8010010 <ucdr_buffer_length>
 8018fb0:	462b      	mov	r3, r5
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	a902      	add	r1, sp, #8
 8018fb6:	4620      	mov	r0, r4
 8018fb8:	f7ff ff10 	bl	8018ddc <wait_session_status>
 8018fbc:	b118      	cbz	r0, 8018fc6 <uxr_delete_session_retries+0x4a>
 8018fbe:	7960      	ldrb	r0, [r4, #5]
 8018fc0:	fab0 f080 	clz	r0, r0
 8018fc4:	0940      	lsrs	r0, r0, #5
 8018fc6:	b00f      	add	sp, #60	@ 0x3c
 8018fc8:	bd30      	pop	{r4, r5, pc}
 8018fca:	bf00      	nop

08018fcc <uxr_create_session>:
 8018fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd0:	f100 0b08 	add.w	fp, r0, #8
 8018fd4:	4604      	mov	r4, r0
 8018fd6:	b0ab      	sub	sp, #172	@ 0xac
 8018fd8:	4658      	mov	r0, fp
 8018fda:	465e      	mov	r6, fp
 8018fdc:	f000 ff22 	bl	8019e24 <uxr_reset_stream_storage>
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	f000 fa05 	bl	80193f0 <uxr_session_header_offset>
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	221c      	movs	r2, #28
 8018fea:	a90b      	add	r1, sp, #44	@ 0x2c
 8018fec:	9000      	str	r0, [sp, #0]
 8018fee:	a812      	add	r0, sp, #72	@ 0x48
 8018ff0:	f7f6 ffce 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 8018ff4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018ff6:	a912      	add	r1, sp, #72	@ 0x48
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	8a1a      	ldrh	r2, [r3, #16]
 8018ffc:	3a04      	subs	r2, #4
 8018ffe:	b292      	uxth	r2, r2
 8019000:	f000 f91c 	bl	801923c <uxr_buffer_create_session>
 8019004:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019006:	4620      	mov	r0, r4
 8019008:	f000 f98a 	bl	8019320 <uxr_stamp_create_session_header>
 801900c:	a812      	add	r0, sp, #72	@ 0x48
 801900e:	f7f6 ffff 	bl	8010010 <ucdr_buffer_length>
 8019012:	23ff      	movs	r3, #255	@ 0xff
 8019014:	4681      	mov	r9, r0
 8019016:	7163      	strb	r3, [r4, #5]
 8019018:	230a      	movs	r3, #10
 801901a:	9303      	str	r3, [sp, #12]
 801901c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801901e:	464a      	mov	r2, r9
 8019020:	a90b      	add	r1, sp, #44	@ 0x2c
 8019022:	e9d3 0500 	ldrd	r0, r5, [r3]
 8019026:	47a8      	blx	r5
 8019028:	f001 f81c 	bl	801a064 <uxr_millis>
 801902c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019030:	4605      	mov	r5, r0
 8019032:	e009      	b.n	8019048 <uxr_create_session+0x7c>
 8019034:	f001 f816 	bl	801a064 <uxr_millis>
 8019038:	1b40      	subs	r0, r0, r5
 801903a:	7962      	ldrb	r2, [r4, #5]
 801903c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8019040:	2b00      	cmp	r3, #0
 8019042:	dd38      	ble.n	80190b6 <uxr_create_session+0xea>
 8019044:	2aff      	cmp	r2, #255	@ 0xff
 8019046:	d13c      	bne.n	80190c2 <uxr_create_session+0xf6>
 8019048:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801904a:	a907      	add	r1, sp, #28
 801904c:	6897      	ldr	r7, [r2, #8]
 801904e:	6810      	ldr	r0, [r2, #0]
 8019050:	aa08      	add	r2, sp, #32
 8019052:	47b8      	blx	r7
 8019054:	2800      	cmp	r0, #0
 8019056:	d0ed      	beq.n	8019034 <uxr_create_session+0x68>
 8019058:	a81a      	add	r0, sp, #104	@ 0x68
 801905a:	2700      	movs	r7, #0
 801905c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8019060:	f7f6 ffa8 	bl	800ffb4 <ucdr_init_buffer>
 8019064:	f10d 031a 	add.w	r3, sp, #26
 8019068:	aa06      	add	r2, sp, #24
 801906a:	a91a      	add	r1, sp, #104	@ 0x68
 801906c:	4620      	mov	r0, r4
 801906e:	f88d 7018 	strb.w	r7, [sp, #24]
 8019072:	f000 f97d 	bl	8019370 <uxr_read_session_header>
 8019076:	2800      	cmp	r0, #0
 8019078:	d0dc      	beq.n	8019034 <uxr_create_session+0x68>
 801907a:	4639      	mov	r1, r7
 801907c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8019080:	f000 fe9a 	bl	8019db8 <uxr_stream_id_from_raw>
 8019084:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019088:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801908c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8019090:	2f01      	cmp	r7, #1
 8019092:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8019096:	d053      	beq.n	8019140 <uxr_create_session+0x174>
 8019098:	2f02      	cmp	r7, #2
 801909a:	d018      	beq.n	80190ce <uxr_create_session+0x102>
 801909c:	2f00      	cmp	r7, #0
 801909e:	d1c9      	bne.n	8019034 <uxr_create_session+0x68>
 80190a0:	4639      	mov	r1, r7
 80190a2:	4638      	mov	r0, r7
 80190a4:	f000 fe88 	bl	8019db8 <uxr_stream_id_from_raw>
 80190a8:	a91a      	add	r1, sp, #104	@ 0x68
 80190aa:	4602      	mov	r2, r0
 80190ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80190ae:	4620      	mov	r0, r4
 80190b0:	f7ff fb1c 	bl	80186ec <read_submessage_list>
 80190b4:	e7be      	b.n	8019034 <uxr_create_session+0x68>
 80190b6:	9b03      	ldr	r3, [sp, #12]
 80190b8:	3b01      	subs	r3, #1
 80190ba:	9303      	str	r3, [sp, #12]
 80190bc:	d001      	beq.n	80190c2 <uxr_create_session+0xf6>
 80190be:	2aff      	cmp	r2, #255	@ 0xff
 80190c0:	d0ac      	beq.n	801901c <uxr_create_session+0x50>
 80190c2:	2a00      	cmp	r2, #0
 80190c4:	d051      	beq.n	801916a <uxr_create_session+0x19e>
 80190c6:	2000      	movs	r0, #0
 80190c8:	b02b      	add	sp, #172	@ 0xac
 80190ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ce:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80190d2:	4641      	mov	r1, r8
 80190d4:	4630      	mov	r0, r6
 80190d6:	9304      	str	r3, [sp, #16]
 80190d8:	f000 ff5c 	bl	8019f94 <uxr_get_input_reliable_stream>
 80190dc:	4682      	mov	sl, r0
 80190de:	b348      	cbz	r0, 8019134 <uxr_create_session+0x168>
 80190e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80190e2:	a81a      	add	r0, sp, #104	@ 0x68
 80190e4:	9205      	str	r2, [sp, #20]
 80190e6:	f7f6 ff97 	bl	8010018 <ucdr_buffer_remaining>
 80190ea:	4603      	mov	r3, r0
 80190ec:	f10d 0019 	add.w	r0, sp, #25
 80190f0:	9a05      	ldr	r2, [sp, #20]
 80190f2:	4659      	mov	r1, fp
 80190f4:	9000      	str	r0, [sp, #0]
 80190f6:	4650      	mov	r0, sl
 80190f8:	f002 ff74 	bl	801bfe4 <uxr_receive_reliable_message>
 80190fc:	b1d0      	cbz	r0, 8019134 <uxr_create_session+0x168>
 80190fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d038      	beq.n	8019178 <uxr_create_session+0x1ac>
 8019106:	9f04      	ldr	r7, [sp, #16]
 8019108:	e00a      	b.n	8019120 <uxr_create_session+0x154>
 801910a:	f04f 0302 	mov.w	r3, #2
 801910e:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8019112:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8019116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801911a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801911c:	f7ff fae6 	bl	80186ec <read_submessage_list>
 8019120:	a922      	add	r1, sp, #136	@ 0x88
 8019122:	2204      	movs	r2, #4
 8019124:	4650      	mov	r0, sl
 8019126:	f002 ffdf 	bl	801c0e8 <uxr_next_input_reliable_buffer_available>
 801912a:	4603      	mov	r3, r0
 801912c:	a922      	add	r1, sp, #136	@ 0x88
 801912e:	4620      	mov	r0, r4
 8019130:	2b00      	cmp	r3, #0
 8019132:	d1ea      	bne.n	801910a <uxr_create_session+0x13e>
 8019134:	4642      	mov	r2, r8
 8019136:	9904      	ldr	r1, [sp, #16]
 8019138:	4620      	mov	r0, r4
 801913a:	f7ff f953 	bl	80183e4 <write_submessage_acknack.isra.0>
 801913e:	e779      	b.n	8019034 <uxr_create_session+0x68>
 8019140:	4641      	mov	r1, r8
 8019142:	4630      	mov	r0, r6
 8019144:	f000 ff1c 	bl	8019f80 <uxr_get_input_best_effort_stream>
 8019148:	2800      	cmp	r0, #0
 801914a:	f43f af73 	beq.w	8019034 <uxr_create_session+0x68>
 801914e:	4659      	mov	r1, fp
 8019150:	f002 febe 	bl	801bed0 <uxr_receive_best_effort_message>
 8019154:	2800      	cmp	r0, #0
 8019156:	f43f af6d 	beq.w	8019034 <uxr_create_session+0x68>
 801915a:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801915e:	a91a      	add	r1, sp, #104	@ 0x68
 8019160:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019162:	4620      	mov	r0, r4
 8019164:	f7ff fac2 	bl	80186ec <read_submessage_list>
 8019168:	e764      	b.n	8019034 <uxr_create_session+0x68>
 801916a:	4630      	mov	r0, r6
 801916c:	f000 fe5a 	bl	8019e24 <uxr_reset_stream_storage>
 8019170:	2001      	movs	r0, #1
 8019172:	b02b      	add	sp, #172	@ 0xac
 8019174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019178:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 801917c:	a91a      	add	r1, sp, #104	@ 0x68
 801917e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019180:	4620      	mov	r0, r4
 8019182:	f7ff fab3 	bl	80186ec <read_submessage_list>
 8019186:	e7be      	b.n	8019106 <uxr_create_session+0x13a>

08019188 <uxr_prepare_stream_to_write_submessage>:
 8019188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801918c:	b082      	sub	sp, #8
 801918e:	4604      	mov	r4, r0
 8019190:	4610      	mov	r0, r2
 8019192:	4615      	mov	r5, r2
 8019194:	461e      	mov	r6, r3
 8019196:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801919a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801919e:	f105 0904 	add.w	r9, r5, #4
 80191a2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80191a6:	9101      	str	r1, [sp, #4]
 80191a8:	f000 ff56 	bl	801a058 <uxr_submessage_padding>
 80191ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80191b0:	4481      	add	r9, r0
 80191b2:	2b01      	cmp	r3, #1
 80191b4:	d01d      	beq.n	80191f2 <uxr_prepare_stream_to_write_submessage+0x6a>
 80191b6:	2b02      	cmp	r3, #2
 80191b8:	d116      	bne.n	80191e8 <uxr_prepare_stream_to_write_submessage+0x60>
 80191ba:	f104 0008 	add.w	r0, r4, #8
 80191be:	4651      	mov	r1, sl
 80191c0:	f000 fed2 	bl	8019f68 <uxr_get_output_reliable_stream>
 80191c4:	4604      	mov	r4, r0
 80191c6:	b158      	cbz	r0, 80191e0 <uxr_prepare_stream_to_write_submessage+0x58>
 80191c8:	4649      	mov	r1, r9
 80191ca:	4632      	mov	r2, r6
 80191cc:	f003 f952 	bl	801c474 <uxr_prepare_reliable_buffer_to_write>
 80191d0:	4604      	mov	r4, r0
 80191d2:	b12c      	cbz	r4, 80191e0 <uxr_prepare_stream_to_write_submessage+0x58>
 80191d4:	4643      	mov	r3, r8
 80191d6:	b2aa      	uxth	r2, r5
 80191d8:	4639      	mov	r1, r7
 80191da:	4630      	mov	r0, r6
 80191dc:	f000 fefc 	bl	8019fd8 <uxr_buffer_submessage_header>
 80191e0:	4620      	mov	r0, r4
 80191e2:	b002      	add	sp, #8
 80191e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191e8:	2400      	movs	r4, #0
 80191ea:	4620      	mov	r0, r4
 80191ec:	b002      	add	sp, #8
 80191ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191f2:	f104 0008 	add.w	r0, r4, #8
 80191f6:	4651      	mov	r1, sl
 80191f8:	f000 feae 	bl	8019f58 <uxr_get_output_best_effort_stream>
 80191fc:	4604      	mov	r4, r0
 80191fe:	2800      	cmp	r0, #0
 8019200:	d0ee      	beq.n	80191e0 <uxr_prepare_stream_to_write_submessage+0x58>
 8019202:	4649      	mov	r1, r9
 8019204:	4632      	mov	r2, r6
 8019206:	f003 f85f 	bl	801c2c8 <uxr_prepare_best_effort_buffer_to_write>
 801920a:	4604      	mov	r4, r0
 801920c:	e7e1      	b.n	80191d2 <uxr_prepare_stream_to_write_submessage+0x4a>
 801920e:	bf00      	nop

08019210 <uxr_init_session_info>:
 8019210:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8019214:	23ff      	movs	r3, #255	@ 0xff
 8019216:	7102      	strb	r2, [r0, #4]
 8019218:	f880 c001 	strb.w	ip, [r0, #1]
 801921c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8019220:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019224:	7001      	strb	r1, [r0, #0]
 8019226:	f880 c002 	strb.w	ip, [r0, #2]
 801922a:	7143      	strb	r3, [r0, #5]
 801922c:	70c2      	strb	r2, [r0, #3]
 801922e:	b500      	push	{lr}
 8019230:	f04f 0e09 	mov.w	lr, #9
 8019234:	f8a0 e006 	strh.w	lr, [r0, #6]
 8019238:	f85d fb04 	ldr.w	pc, [sp], #4

0801923c <uxr_buffer_create_session>:
 801923c:	b530      	push	{r4, r5, lr}
 801923e:	2300      	movs	r3, #0
 8019240:	b089      	sub	sp, #36	@ 0x24
 8019242:	4d12      	ldr	r5, [pc, #72]	@ (801928c <uxr_buffer_create_session+0x50>)
 8019244:	460c      	mov	r4, r1
 8019246:	9307      	str	r3, [sp, #28]
 8019248:	4619      	mov	r1, r3
 801924a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801924e:	2201      	movs	r2, #1
 8019250:	9301      	str	r3, [sp, #4]
 8019252:	80c2      	strh	r2, [r0, #6]
 8019254:	f88d 2004 	strb.w	r2, [sp, #4]
 8019258:	682a      	ldr	r2, [r5, #0]
 801925a:	9303      	str	r3, [sp, #12]
 801925c:	9200      	str	r2, [sp, #0]
 801925e:	88aa      	ldrh	r2, [r5, #4]
 8019260:	9306      	str	r3, [sp, #24]
 8019262:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019266:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801926a:	9202      	str	r2, [sp, #8]
 801926c:	7802      	ldrb	r2, [r0, #0]
 801926e:	4620      	mov	r0, r4
 8019270:	f88d 200c 	strb.w	r2, [sp, #12]
 8019274:	2210      	movs	r2, #16
 8019276:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801927a:	f000 fead 	bl	8019fd8 <uxr_buffer_submessage_header>
 801927e:	4669      	mov	r1, sp
 8019280:	4620      	mov	r0, r4
 8019282:	f001 fdcb 	bl	801ae1c <uxr_serialize_CREATE_CLIENT_Payload>
 8019286:	b009      	add	sp, #36	@ 0x24
 8019288:	bd30      	pop	{r4, r5, pc}
 801928a:	bf00      	nop
 801928c:	0801e460 	.word	0x0801e460

08019290 <uxr_buffer_delete_session>:
 8019290:	4a0c      	ldr	r2, [pc, #48]	@ (80192c4 <uxr_buffer_delete_session+0x34>)
 8019292:	2302      	movs	r3, #2
 8019294:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8019298:	b510      	push	{r4, lr}
 801929a:	460c      	mov	r4, r1
 801929c:	b082      	sub	sp, #8
 801929e:	8911      	ldrh	r1, [r2, #8]
 80192a0:	2204      	movs	r2, #4
 80192a2:	80c3      	strh	r3, [r0, #6]
 80192a4:	2300      	movs	r3, #0
 80192a6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80192aa:	4620      	mov	r0, r4
 80192ac:	2103      	movs	r1, #3
 80192ae:	f8ad c004 	strh.w	ip, [sp, #4]
 80192b2:	f000 fe91 	bl	8019fd8 <uxr_buffer_submessage_header>
 80192b6:	a901      	add	r1, sp, #4
 80192b8:	4620      	mov	r0, r4
 80192ba:	f001 fe57 	bl	801af6c <uxr_serialize_DELETE_Payload>
 80192be:	b002      	add	sp, #8
 80192c0:	bd10      	pop	{r4, pc}
 80192c2:	bf00      	nop
 80192c4:	0801e460 	.word	0x0801e460

080192c8 <uxr_read_create_session_status>:
 80192c8:	b510      	push	{r4, lr}
 80192ca:	460b      	mov	r3, r1
 80192cc:	b088      	sub	sp, #32
 80192ce:	4604      	mov	r4, r0
 80192d0:	a901      	add	r1, sp, #4
 80192d2:	4618      	mov	r0, r3
 80192d4:	f001 fe5a 	bl	801af8c <uxr_deserialize_STATUS_AGENT_Payload>
 80192d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80192dc:	7163      	strb	r3, [r4, #5]
 80192de:	b008      	add	sp, #32
 80192e0:	bd10      	pop	{r4, pc}
 80192e2:	bf00      	nop

080192e4 <uxr_read_delete_session_status>:
 80192e4:	b510      	push	{r4, lr}
 80192e6:	b084      	sub	sp, #16
 80192e8:	4604      	mov	r4, r0
 80192ea:	4608      	mov	r0, r1
 80192ec:	a902      	add	r1, sp, #8
 80192ee:	f001 fe7d 	bl	801afec <uxr_deserialize_STATUS_Payload>
 80192f2:	88e3      	ldrh	r3, [r4, #6]
 80192f4:	2b02      	cmp	r3, #2
 80192f6:	d001      	beq.n	80192fc <uxr_read_delete_session_status+0x18>
 80192f8:	b004      	add	sp, #16
 80192fa:	bd10      	pop	{r4, pc}
 80192fc:	f10d 000a 	add.w	r0, sp, #10
 8019300:	f7fe fec6 	bl	8018090 <uxr_object_id_from_raw>
 8019304:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8019308:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801930c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019310:	b29b      	uxth	r3, r3
 8019312:	2b02      	cmp	r3, #2
 8019314:	d1f0      	bne.n	80192f8 <uxr_read_delete_session_status+0x14>
 8019316:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801931a:	7163      	strb	r3, [r4, #5]
 801931c:	e7ec      	b.n	80192f8 <uxr_read_delete_session_status+0x14>
 801931e:	bf00      	nop

08019320 <uxr_stamp_create_session_header>:
 8019320:	b510      	push	{r4, lr}
 8019322:	2208      	movs	r2, #8
 8019324:	b08a      	sub	sp, #40	@ 0x28
 8019326:	4604      	mov	r4, r0
 8019328:	eb0d 0002 	add.w	r0, sp, r2
 801932c:	f7f6 fe42 	bl	800ffb4 <ucdr_init_buffer>
 8019330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019334:	2300      	movs	r3, #0
 8019336:	a802      	add	r0, sp, #8
 8019338:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801933c:	9400      	str	r4, [sp, #0]
 801933e:	461a      	mov	r2, r3
 8019340:	f000 fef2 	bl	801a128 <uxr_serialize_message_header>
 8019344:	b00a      	add	sp, #40	@ 0x28
 8019346:	bd10      	pop	{r4, pc}

08019348 <uxr_stamp_session_header>:
 8019348:	b530      	push	{r4, r5, lr}
 801934a:	b08d      	sub	sp, #52	@ 0x34
 801934c:	4604      	mov	r4, r0
 801934e:	460d      	mov	r5, r1
 8019350:	4619      	mov	r1, r3
 8019352:	a804      	add	r0, sp, #16
 8019354:	9203      	str	r2, [sp, #12]
 8019356:	2208      	movs	r2, #8
 8019358:	f7f6 fe2c 	bl	800ffb4 <ucdr_init_buffer>
 801935c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019360:	9b03      	ldr	r3, [sp, #12]
 8019362:	462a      	mov	r2, r5
 8019364:	a804      	add	r0, sp, #16
 8019366:	9400      	str	r4, [sp, #0]
 8019368:	f000 fede 	bl	801a128 <uxr_serialize_message_header>
 801936c:	b00d      	add	sp, #52	@ 0x34
 801936e:	bd30      	pop	{r4, r5, pc}

08019370 <uxr_read_session_header>:
 8019370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019374:	4607      	mov	r7, r0
 8019376:	b084      	sub	sp, #16
 8019378:	4608      	mov	r0, r1
 801937a:	460c      	mov	r4, r1
 801937c:	4615      	mov	r5, r2
 801937e:	461e      	mov	r6, r3
 8019380:	f7f6 fe4a 	bl	8010018 <ucdr_buffer_remaining>
 8019384:	2808      	cmp	r0, #8
 8019386:	d803      	bhi.n	8019390 <uxr_read_session_header+0x20>
 8019388:	2000      	movs	r0, #0
 801938a:	b004      	add	sp, #16
 801938c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019390:	f10d 080c 	add.w	r8, sp, #12
 8019394:	4633      	mov	r3, r6
 8019396:	462a      	mov	r2, r5
 8019398:	4620      	mov	r0, r4
 801939a:	f10d 010b 	add.w	r1, sp, #11
 801939e:	f8cd 8000 	str.w	r8, [sp]
 80193a2:	f000 fedf 	bl	801a164 <uxr_deserialize_message_header>
 80193a6:	783a      	ldrb	r2, [r7, #0]
 80193a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80193ac:	4293      	cmp	r3, r2
 80193ae:	d1eb      	bne.n	8019388 <uxr_read_session_header+0x18>
 80193b0:	061b      	lsls	r3, r3, #24
 80193b2:	d41b      	bmi.n	80193ec <uxr_read_session_header+0x7c>
 80193b4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80193b8:	787b      	ldrb	r3, [r7, #1]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d003      	beq.n	80193c6 <uxr_read_session_header+0x56>
 80193be:	2001      	movs	r0, #1
 80193c0:	f080 0001 	eor.w	r0, r0, #1
 80193c4:	e7e1      	b.n	801938a <uxr_read_session_header+0x1a>
 80193c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80193ca:	1cb8      	adds	r0, r7, #2
 80193cc:	78bb      	ldrb	r3, [r7, #2]
 80193ce:	429a      	cmp	r2, r3
 80193d0:	d1f5      	bne.n	80193be <uxr_read_session_header+0x4e>
 80193d2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80193d6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80193da:	429a      	cmp	r2, r3
 80193dc:	d1ef      	bne.n	80193be <uxr_read_session_header+0x4e>
 80193de:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80193e2:	7843      	ldrb	r3, [r0, #1]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d1ea      	bne.n	80193be <uxr_read_session_header+0x4e>
 80193e8:	2000      	movs	r0, #0
 80193ea:	e7e9      	b.n	80193c0 <uxr_read_session_header+0x50>
 80193ec:	2001      	movs	r0, #1
 80193ee:	e7cc      	b.n	801938a <uxr_read_session_header+0x1a>

080193f0 <uxr_session_header_offset>:
 80193f0:	f990 3000 	ldrsb.w	r3, [r0]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	bfac      	ite	ge
 80193f8:	2008      	movge	r0, #8
 80193fa:	2004      	movlt	r0, #4
 80193fc:	4770      	bx	lr
 80193fe:	bf00      	nop

08019400 <uxr_init_base_object_request>:
 8019400:	b510      	push	{r4, lr}
 8019402:	b082      	sub	sp, #8
 8019404:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8019408:	9101      	str	r1, [sp, #4]
 801940a:	88c3      	ldrh	r3, [r0, #6]
 801940c:	f1a3 010a 	sub.w	r1, r3, #10
 8019410:	b289      	uxth	r1, r1
 8019412:	42a1      	cmp	r1, r4
 8019414:	d80f      	bhi.n	8019436 <uxr_init_base_object_request+0x36>
 8019416:	3301      	adds	r3, #1
 8019418:	b29c      	uxth	r4, r3
 801941a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801941e:	b2db      	uxtb	r3, r3
 8019420:	80c4      	strh	r4, [r0, #6]
 8019422:	1c91      	adds	r1, r2, #2
 8019424:	9801      	ldr	r0, [sp, #4]
 8019426:	f882 c000 	strb.w	ip, [r2]
 801942a:	7053      	strb	r3, [r2, #1]
 801942c:	f7fe fe44 	bl	80180b8 <uxr_object_id_to_raw>
 8019430:	4620      	mov	r0, r4
 8019432:	b002      	add	sp, #8
 8019434:	bd10      	pop	{r4, pc}
 8019436:	230a      	movs	r3, #10
 8019438:	f04f 0c00 	mov.w	ip, #0
 801943c:	461c      	mov	r4, r3
 801943e:	e7ef      	b.n	8019420 <uxr_init_base_object_request+0x20>

08019440 <uxr_parse_base_object_request>:
 8019440:	b570      	push	{r4, r5, r6, lr}
 8019442:	4604      	mov	r4, r0
 8019444:	3002      	adds	r0, #2
 8019446:	460d      	mov	r5, r1
 8019448:	4616      	mov	r6, r2
 801944a:	f7fe fe21 	bl	8018090 <uxr_object_id_from_raw>
 801944e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8019452:	8028      	strh	r0, [r5, #0]
 8019454:	806b      	strh	r3, [r5, #2]
 8019456:	7822      	ldrb	r2, [r4, #0]
 8019458:	7863      	ldrb	r3, [r4, #1]
 801945a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801945e:	8033      	strh	r3, [r6, #0]
 8019460:	bd70      	pop	{r4, r5, r6, pc}
 8019462:	bf00      	nop

08019464 <uxr_init_framing_io>:
 8019464:	2300      	movs	r3, #0
 8019466:	7041      	strb	r1, [r0, #1]
 8019468:	7003      	strb	r3, [r0, #0]
 801946a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801946c:	4770      	bx	lr
 801946e:	bf00      	nop

08019470 <uxr_write_framed_msg>:
 8019470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019474:	4617      	mov	r7, r2
 8019476:	7842      	ldrb	r2, [r0, #1]
 8019478:	460e      	mov	r6, r1
 801947a:	b083      	sub	sp, #12
 801947c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8019480:	469b      	mov	fp, r3
 8019482:	237e      	movs	r3, #126	@ 0x7e
 8019484:	4604      	mov	r4, r0
 8019486:	2901      	cmp	r1, #1
 8019488:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801948c:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8019490:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8019494:	f240 8115 	bls.w	80196c2 <uxr_write_framed_msg+0x252>
 8019498:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801949c:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80194a0:	2202      	movs	r2, #2
 80194a2:	2901      	cmp	r1, #1
 80194a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80194a8:	d952      	bls.n	8019550 <uxr_write_framed_msg+0xe0>
 80194aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80194ac:	2103      	movs	r1, #3
 80194ae:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80194b2:	b2dd      	uxtb	r5, r3
 80194b4:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80194b8:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80194bc:	2a01      	cmp	r2, #1
 80194be:	d95c      	bls.n	801957a <uxr_write_framed_msg+0x10a>
 80194c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80194c2:	1862      	adds	r2, r4, r1
 80194c4:	3101      	adds	r1, #1
 80194c6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80194ca:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80194ce:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80194d2:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80194d6:	2a01      	cmp	r2, #1
 80194d8:	d961      	bls.n	801959e <uxr_write_framed_msg+0x12e>
 80194da:	1c4a      	adds	r2, r1, #1
 80194dc:	4421      	add	r1, r4
 80194de:	b2d2      	uxtb	r2, r2
 80194e0:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80194e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d06a      	beq.n	80195c2 <uxr_write_framed_msg+0x152>
 80194ec:	f04f 0800 	mov.w	r8, #0
 80194f0:	46c1      	mov	r9, r8
 80194f2:	e016      	b.n	8019522 <uxr_write_framed_msg+0xb2>
 80194f4:	2a29      	cmp	r2, #41	@ 0x29
 80194f6:	d868      	bhi.n	80195ca <uxr_write_framed_msg+0x15a>
 80194f8:	18a0      	adds	r0, r4, r2
 80194fa:	3201      	adds	r2, #1
 80194fc:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8019500:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019504:	ea88 0101 	eor.w	r1, r8, r1
 8019508:	4b7d      	ldr	r3, [pc, #500]	@ (8019700 <uxr_write_framed_msg+0x290>)
 801950a:	f109 0901 	add.w	r9, r9, #1
 801950e:	b2c9      	uxtb	r1, r1
 8019510:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8019514:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019518:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801951a:	454b      	cmp	r3, r9
 801951c:	d969      	bls.n	80195f2 <uxr_write_framed_msg+0x182>
 801951e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019522:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8019526:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801952a:	2801      	cmp	r0, #1
 801952c:	d8e2      	bhi.n	80194f4 <uxr_write_framed_msg+0x84>
 801952e:	1c50      	adds	r0, r2, #1
 8019530:	b2c0      	uxtb	r0, r0
 8019532:	2829      	cmp	r0, #41	@ 0x29
 8019534:	d849      	bhi.n	80195ca <uxr_write_framed_msg+0x15a>
 8019536:	18a0      	adds	r0, r4, r2
 8019538:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801953c:	3202      	adds	r2, #2
 801953e:	f081 0520 	eor.w	r5, r1, #32
 8019542:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8019546:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801954a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801954e:	e7d9      	b.n	8019504 <uxr_write_framed_msg+0x94>
 8019550:	2104      	movs	r1, #4
 8019552:	f04f 0c03 	mov.w	ip, #3
 8019556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019558:	4422      	add	r2, r4
 801955a:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801955e:	44a4      	add	ip, r4
 8019560:	b2dd      	uxtb	r5, r3
 8019562:	f080 0020 	eor.w	r0, r0, #32
 8019566:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801956a:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801956e:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8019572:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019576:	2a01      	cmp	r2, #1
 8019578:	d8a2      	bhi.n	80194c0 <uxr_write_framed_msg+0x50>
 801957a:	1862      	adds	r2, r4, r1
 801957c:	207d      	movs	r0, #125	@ 0x7d
 801957e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019580:	f085 0520 	eor.w	r5, r5, #32
 8019584:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8019588:	3102      	adds	r1, #2
 801958a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801958e:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8019592:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8019596:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801959a:	2a01      	cmp	r2, #1
 801959c:	d89d      	bhi.n	80194da <uxr_write_framed_msg+0x6a>
 801959e:	1c4d      	adds	r5, r1, #1
 80195a0:	1c8a      	adds	r2, r1, #2
 80195a2:	f080 0020 	eor.w	r0, r0, #32
 80195a6:	4421      	add	r1, r4
 80195a8:	fa54 f585 	uxtab	r5, r4, r5
 80195ac:	b2d2      	uxtb	r2, r2
 80195ae:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80195b2:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80195b6:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80195ba:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d194      	bne.n	80194ec <uxr_write_framed_msg+0x7c>
 80195c2:	4619      	mov	r1, r3
 80195c4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80195c8:	e019      	b.n	80195fe <uxr_write_framed_msg+0x18e>
 80195ca:	2500      	movs	r5, #0
 80195cc:	e000      	b.n	80195d0 <uxr_write_framed_msg+0x160>
 80195ce:	b160      	cbz	r0, 80195ea <uxr_write_framed_msg+0x17a>
 80195d0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80195d4:	1b52      	subs	r2, r2, r5
 80195d6:	4653      	mov	r3, sl
 80195d8:	4638      	mov	r0, r7
 80195da:	4421      	add	r1, r4
 80195dc:	47b0      	blx	r6
 80195de:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80195e2:	4405      	add	r5, r0
 80195e4:	4295      	cmp	r5, r2
 80195e6:	d3f2      	bcc.n	80195ce <uxr_write_framed_msg+0x15e>
 80195e8:	d066      	beq.n	80196b8 <uxr_write_framed_msg+0x248>
 80195ea:	2000      	movs	r0, #0
 80195ec:	b003      	add	sp, #12
 80195ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195f2:	fa5f f188 	uxtb.w	r1, r8
 80195f6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80195fa:	f8ad 8004 	strh.w	r8, [sp, #4]
 80195fe:	f04f 0900 	mov.w	r9, #0
 8019602:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8019606:	46c8      	mov	r8, r9
 8019608:	e013      	b.n	8019632 <uxr_write_framed_msg+0x1c2>
 801960a:	2a29      	cmp	r2, #41	@ 0x29
 801960c:	d824      	bhi.n	8019658 <uxr_write_framed_msg+0x1e8>
 801960e:	18a3      	adds	r3, r4, r2
 8019610:	3201      	adds	r2, #1
 8019612:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8019616:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801961a:	f109 0901 	add.w	r9, r9, #1
 801961e:	f1b9 0f02 	cmp.w	r9, #2
 8019622:	d02d      	beq.n	8019680 <uxr_write_framed_msg+0x210>
 8019624:	f109 0308 	add.w	r3, r9, #8
 8019628:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801962c:	446b      	add	r3, sp
 801962e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019632:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8019636:	2b01      	cmp	r3, #1
 8019638:	d8e7      	bhi.n	801960a <uxr_write_framed_msg+0x19a>
 801963a:	1c53      	adds	r3, r2, #1
 801963c:	b2db      	uxtb	r3, r3
 801963e:	2b29      	cmp	r3, #41	@ 0x29
 8019640:	d80a      	bhi.n	8019658 <uxr_write_framed_msg+0x1e8>
 8019642:	18a3      	adds	r3, r4, r2
 8019644:	f081 0120 	eor.w	r1, r1, #32
 8019648:	3202      	adds	r2, #2
 801964a:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801964e:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8019652:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019656:	e7e0      	b.n	801961a <uxr_write_framed_msg+0x1aa>
 8019658:	2500      	movs	r5, #0
 801965a:	e001      	b.n	8019660 <uxr_write_framed_msg+0x1f0>
 801965c:	2800      	cmp	r0, #0
 801965e:	d0c4      	beq.n	80195ea <uxr_write_framed_msg+0x17a>
 8019660:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019664:	1b52      	subs	r2, r2, r5
 8019666:	4653      	mov	r3, sl
 8019668:	4638      	mov	r0, r7
 801966a:	4421      	add	r1, r4
 801966c:	47b0      	blx	r6
 801966e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019672:	4405      	add	r5, r0
 8019674:	4295      	cmp	r5, r2
 8019676:	d3f1      	bcc.n	801965c <uxr_write_framed_msg+0x1ec>
 8019678:	d1b7      	bne.n	80195ea <uxr_write_framed_msg+0x17a>
 801967a:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 801967e:	e7d1      	b.n	8019624 <uxr_write_framed_msg+0x1b4>
 8019680:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8019684:	b19a      	cbz	r2, 80196ae <uxr_write_framed_msg+0x23e>
 8019686:	2500      	movs	r5, #0
 8019688:	e001      	b.n	801968e <uxr_write_framed_msg+0x21e>
 801968a:	2800      	cmp	r0, #0
 801968c:	d0ad      	beq.n	80195ea <uxr_write_framed_msg+0x17a>
 801968e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019692:	1b52      	subs	r2, r2, r5
 8019694:	4653      	mov	r3, sl
 8019696:	4638      	mov	r0, r7
 8019698:	4421      	add	r1, r4
 801969a:	47b0      	blx	r6
 801969c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80196a0:	4405      	add	r5, r0
 80196a2:	4295      	cmp	r5, r2
 80196a4:	d3f1      	bcc.n	801968a <uxr_write_framed_msg+0x21a>
 80196a6:	d1a0      	bne.n	80195ea <uxr_write_framed_msg+0x17a>
 80196a8:	2300      	movs	r3, #0
 80196aa:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80196ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80196b0:	b298      	uxth	r0, r3
 80196b2:	b003      	add	sp, #12
 80196b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196b8:	f04f 0300 	mov.w	r3, #0
 80196bc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80196c0:	e72a      	b.n	8019518 <uxr_write_framed_msg+0xa8>
 80196c2:	217d      	movs	r1, #125	@ 0x7d
 80196c4:	f082 0220 	eor.w	r2, r2, #32
 80196c8:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80196cc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80196d0:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80196d4:	2203      	movs	r2, #3
 80196d6:	2901      	cmp	r1, #1
 80196d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80196dc:	d803      	bhi.n	80196e6 <uxr_write_framed_msg+0x276>
 80196de:	2105      	movs	r1, #5
 80196e0:	f04f 0c04 	mov.w	ip, #4
 80196e4:	e737      	b.n	8019556 <uxr_write_framed_msg+0xe6>
 80196e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80196e8:	2104      	movs	r1, #4
 80196ea:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80196ee:	b2dd      	uxtb	r5, r3
 80196f0:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80196f4:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80196f8:	2a01      	cmp	r2, #1
 80196fa:	f63f aee1 	bhi.w	80194c0 <uxr_write_framed_msg+0x50>
 80196fe:	e73c      	b.n	801957a <uxr_write_framed_msg+0x10a>
 8019700:	080205bc 	.word	0x080205bc

08019704 <uxr_framing_read_transport>:
 8019704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019708:	4604      	mov	r4, r0
 801970a:	b085      	sub	sp, #20
 801970c:	4692      	mov	sl, r2
 801970e:	4689      	mov	r9, r1
 8019710:	461d      	mov	r5, r3
 8019712:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019714:	f000 fca6 	bl	801a064 <uxr_millis>
 8019718:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801971c:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8019720:	4680      	mov	r8, r0
 8019722:	42ba      	cmp	r2, r7
 8019724:	d05f      	beq.n	80197e6 <uxr_framing_read_transport+0xe2>
 8019726:	d817      	bhi.n	8019758 <uxr_framing_read_transport+0x54>
 8019728:	3f01      	subs	r7, #1
 801972a:	1aba      	subs	r2, r7, r2
 801972c:	2700      	movs	r7, #0
 801972e:	b2d2      	uxtb	r2, r2
 8019730:	42b2      	cmp	r2, r6
 8019732:	d81a      	bhi.n	801976a <uxr_framing_read_transport+0x66>
 8019734:	19d3      	adds	r3, r2, r7
 8019736:	42b3      	cmp	r3, r6
 8019738:	d852      	bhi.n	80197e0 <uxr_framing_read_transport+0xdc>
 801973a:	b9d2      	cbnz	r2, 8019772 <uxr_framing_read_transport+0x6e>
 801973c:	2600      	movs	r6, #0
 801973e:	f000 fc91 	bl	801a064 <uxr_millis>
 8019742:	682b      	ldr	r3, [r5, #0]
 8019744:	eba0 0008 	sub.w	r0, r0, r8
 8019748:	1a1b      	subs	r3, r3, r0
 801974a:	4630      	mov	r0, r6
 801974c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019750:	602b      	str	r3, [r5, #0]
 8019752:	b005      	add	sp, #20
 8019754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019758:	2f00      	cmp	r7, #0
 801975a:	d060      	beq.n	801981e <uxr_framing_read_transport+0x11a>
 801975c:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8019760:	3f01      	subs	r7, #1
 8019762:	b2d2      	uxtb	r2, r2
 8019764:	b2ff      	uxtb	r7, r7
 8019766:	42b2      	cmp	r2, r6
 8019768:	d9e4      	bls.n	8019734 <uxr_framing_read_transport+0x30>
 801976a:	b2f2      	uxtb	r2, r6
 801976c:	2700      	movs	r7, #0
 801976e:	2a00      	cmp	r2, #0
 8019770:	d0e4      	beq.n	801973c <uxr_framing_read_transport+0x38>
 8019772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019774:	4650      	mov	r0, sl
 8019776:	9203      	str	r2, [sp, #12]
 8019778:	9300      	str	r3, [sp, #0]
 801977a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801977e:	682b      	ldr	r3, [r5, #0]
 8019780:	3102      	adds	r1, #2
 8019782:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8019828 <uxr_framing_read_transport+0x124>
 8019786:	4421      	add	r1, r4
 8019788:	47c8      	blx	r9
 801978a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801978e:	4606      	mov	r6, r0
 8019790:	4403      	add	r3, r0
 8019792:	0859      	lsrs	r1, r3, #1
 8019794:	fbab 2101 	umull	r2, r1, fp, r1
 8019798:	222a      	movs	r2, #42	@ 0x2a
 801979a:	0889      	lsrs	r1, r1, #2
 801979c:	fb02 3111 	mls	r1, r2, r1, r3
 80197a0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80197a4:	2800      	cmp	r0, #0
 80197a6:	d0c9      	beq.n	801973c <uxr_framing_read_transport+0x38>
 80197a8:	9a03      	ldr	r2, [sp, #12]
 80197aa:	4290      	cmp	r0, r2
 80197ac:	d1c7      	bne.n	801973e <uxr_framing_read_transport+0x3a>
 80197ae:	2f00      	cmp	r7, #0
 80197b0:	d0c5      	beq.n	801973e <uxr_framing_read_transport+0x3a>
 80197b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197b4:	3102      	adds	r1, #2
 80197b6:	463a      	mov	r2, r7
 80197b8:	4650      	mov	r0, sl
 80197ba:	4421      	add	r1, r4
 80197bc:	9300      	str	r3, [sp, #0]
 80197be:	2300      	movs	r3, #0
 80197c0:	47c8      	blx	r9
 80197c2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80197c6:	4406      	add	r6, r0
 80197c8:	1813      	adds	r3, r2, r0
 80197ca:	085a      	lsrs	r2, r3, #1
 80197cc:	fbab 1b02 	umull	r1, fp, fp, r2
 80197d0:	222a      	movs	r2, #42	@ 0x2a
 80197d2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80197d6:	fb02 331b 	mls	r3, r2, fp, r3
 80197da:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80197de:	e7ae      	b.n	801973e <uxr_framing_read_transport+0x3a>
 80197e0:	1ab6      	subs	r6, r6, r2
 80197e2:	b2f7      	uxtb	r7, r6
 80197e4:	e7a9      	b.n	801973a <uxr_framing_read_transport+0x36>
 80197e6:	2300      	movs	r3, #0
 80197e8:	2e28      	cmp	r6, #40	@ 0x28
 80197ea:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80197ec:	d9bd      	bls.n	801976a <uxr_framing_read_transport+0x66>
 80197ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197f0:	2229      	movs	r2, #41	@ 0x29
 80197f2:	1ca1      	adds	r1, r4, #2
 80197f4:	4650      	mov	r0, sl
 80197f6:	9300      	str	r3, [sp, #0]
 80197f8:	682b      	ldr	r3, [r5, #0]
 80197fa:	47c8      	blx	r9
 80197fc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019800:	4606      	mov	r6, r0
 8019802:	212a      	movs	r1, #42	@ 0x2a
 8019804:	4403      	add	r3, r0
 8019806:	4808      	ldr	r0, [pc, #32]	@ (8019828 <uxr_framing_read_transport+0x124>)
 8019808:	085a      	lsrs	r2, r3, #1
 801980a:	fba0 0202 	umull	r0, r2, r0, r2
 801980e:	0892      	lsrs	r2, r2, #2
 8019810:	fb01 3312 	mls	r3, r1, r2, r3
 8019814:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8019818:	2e00      	cmp	r6, #0
 801981a:	d08f      	beq.n	801973c <uxr_framing_read_transport+0x38>
 801981c:	e78f      	b.n	801973e <uxr_framing_read_transport+0x3a>
 801981e:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8019822:	b2d2      	uxtb	r2, r2
 8019824:	e784      	b.n	8019730 <uxr_framing_read_transport+0x2c>
 8019826:	bf00      	nop
 8019828:	30c30c31 	.word	0x30c30c31

0801982c <uxr_read_framed_msg>:
 801982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019830:	461e      	mov	r6, r3
 8019832:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8019836:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801983a:	b083      	sub	sp, #12
 801983c:	4604      	mov	r4, r0
 801983e:	4688      	mov	r8, r1
 8019840:	429d      	cmp	r5, r3
 8019842:	4691      	mov	r9, r2
 8019844:	f000 818c 	beq.w	8019b60 <uxr_read_framed_msg+0x334>
 8019848:	7823      	ldrb	r3, [r4, #0]
 801984a:	4dc3      	ldr	r5, [pc, #780]	@ (8019b58 <uxr_read_framed_msg+0x32c>)
 801984c:	4fc3      	ldr	r7, [pc, #780]	@ (8019b5c <uxr_read_framed_msg+0x330>)
 801984e:	2b07      	cmp	r3, #7
 8019850:	d8fd      	bhi.n	801984e <uxr_read_framed_msg+0x22>
 8019852:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019856:	011c      	.short	0x011c
 8019858:	00d900fb 	.word	0x00d900fb
 801985c:	008f00ba 	.word	0x008f00ba
 8019860:	00320051 	.word	0x00320051
 8019864:	0008      	.short	0x0008
 8019866:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801986a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801986e:	4299      	cmp	r1, r3
 8019870:	f000 814d 	beq.w	8019b0e <uxr_read_framed_msg+0x2e2>
 8019874:	18e2      	adds	r2, r4, r3
 8019876:	7892      	ldrb	r2, [r2, #2]
 8019878:	2a7d      	cmp	r2, #125	@ 0x7d
 801987a:	f000 81b8 	beq.w	8019bee <uxr_read_framed_msg+0x3c2>
 801987e:	3301      	adds	r3, #1
 8019880:	212a      	movs	r1, #42	@ 0x2a
 8019882:	2a7e      	cmp	r2, #126	@ 0x7e
 8019884:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8019888:	fba5 c000 	umull	ip, r0, r5, r0
 801988c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019890:	fb01 3310 	mls	r3, r1, r0, r3
 8019894:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019898:	f000 8257 	beq.w	8019d4a <uxr_read_framed_msg+0x51e>
 801989c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801989e:	2000      	movs	r0, #0
 80198a0:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80198a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80198a6:	7020      	strb	r0, [r4, #0]
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	4299      	cmp	r1, r3
 80198ac:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80198ae:	f000 8178 	beq.w	8019ba2 <uxr_read_framed_msg+0x376>
 80198b2:	2000      	movs	r0, #0
 80198b4:	b003      	add	sp, #12
 80198b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ba:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80198be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80198c2:	4298      	cmp	r0, r3
 80198c4:	f000 8132 	beq.w	8019b2c <uxr_read_framed_msg+0x300>
 80198c8:	18e2      	adds	r2, r4, r3
 80198ca:	7891      	ldrb	r1, [r2, #2]
 80198cc:	297d      	cmp	r1, #125	@ 0x7d
 80198ce:	f000 8170 	beq.w	8019bb2 <uxr_read_framed_msg+0x386>
 80198d2:	3301      	adds	r3, #1
 80198d4:	202a      	movs	r0, #42	@ 0x2a
 80198d6:	297e      	cmp	r1, #126	@ 0x7e
 80198d8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80198dc:	fba5 c202 	umull	ip, r2, r5, r2
 80198e0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80198e4:	fb00 3312 	mls	r3, r0, r2, r3
 80198e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80198ec:	f000 821d 	beq.w	8019d2a <uxr_read_framed_msg+0x4fe>
 80198f0:	2307      	movs	r3, #7
 80198f2:	86a1      	strh	r1, [r4, #52]	@ 0x34
 80198f4:	7023      	strb	r3, [r4, #0]
 80198f6:	e7aa      	b.n	801984e <uxr_read_framed_msg+0x22>
 80198f8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80198fa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80198fe:	459e      	cmp	lr, r3
 8019900:	d827      	bhi.n	8019952 <uxr_read_framed_msg+0x126>
 8019902:	e032      	b.n	801996a <uxr_read_framed_msg+0x13e>
 8019904:	fba5 b101 	umull	fp, r1, r5, r1
 8019908:	f89c c002 	ldrb.w	ip, [ip, #2]
 801990c:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8019910:	0889      	lsrs	r1, r1, #2
 8019912:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8019916:	fb0b 0111 	mls	r1, fp, r1, r0
 801991a:	f000 80d4 	beq.w	8019ac6 <uxr_read_framed_msg+0x29a>
 801991e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019922:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8019926:	f000 80cb 	beq.w	8019ac0 <uxr_read_framed_msg+0x294>
 801992a:	f806 c003 	strb.w	ip, [r6, r3]
 801992e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8019930:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019932:	ea80 010c 	eor.w	r1, r0, ip
 8019936:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801993a:	3301      	adds	r3, #1
 801993c:	b2c9      	uxtb	r1, r1
 801993e:	b29b      	uxth	r3, r3
 8019940:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8019944:	4573      	cmp	r3, lr
 8019946:	8663      	strh	r3, [r4, #50]	@ 0x32
 8019948:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801994c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801994e:	f080 811d 	bcs.w	8019b8c <uxr_read_framed_msg+0x360>
 8019952:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019956:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801995a:	1c50      	adds	r0, r2, #1
 801995c:	eb04 0c02 	add.w	ip, r4, r2
 8019960:	4592      	cmp	sl, r2
 8019962:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019966:	d1cd      	bne.n	8019904 <uxr_read_framed_msg+0xd8>
 8019968:	459e      	cmp	lr, r3
 801996a:	f040 8114 	bne.w	8019b96 <uxr_read_framed_msg+0x36a>
 801996e:	2306      	movs	r3, #6
 8019970:	7023      	strb	r3, [r4, #0]
 8019972:	e76c      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019974:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019978:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801997c:	4298      	cmp	r0, r3
 801997e:	f000 80c6 	beq.w	8019b0e <uxr_read_framed_msg+0x2e2>
 8019982:	18e2      	adds	r2, r4, r3
 8019984:	7891      	ldrb	r1, [r2, #2]
 8019986:	297d      	cmp	r1, #125	@ 0x7d
 8019988:	f000 8193 	beq.w	8019cb2 <uxr_read_framed_msg+0x486>
 801998c:	3301      	adds	r3, #1
 801998e:	202a      	movs	r0, #42	@ 0x2a
 8019990:	297e      	cmp	r1, #126	@ 0x7e
 8019992:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019996:	fba5 c202 	umull	ip, r2, r5, r2
 801999a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801999e:	fb00 3312 	mls	r3, r0, r2, r3
 80199a2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80199a6:	f000 81d0 	beq.w	8019d4a <uxr_read_framed_msg+0x51e>
 80199aa:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80199ac:	2000      	movs	r0, #0
 80199ae:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80199b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80199b4:	8660      	strh	r0, [r4, #50]	@ 0x32
 80199b6:	b29b      	uxth	r3, r3
 80199b8:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80199ba:	428b      	cmp	r3, r1
 80199bc:	8623      	strh	r3, [r4, #48]	@ 0x30
 80199be:	f240 80e2 	bls.w	8019b86 <uxr_read_framed_msg+0x35a>
 80199c2:	7020      	strb	r0, [r4, #0]
 80199c4:	b003      	add	sp, #12
 80199c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ca:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80199ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80199d2:	4298      	cmp	r0, r3
 80199d4:	f000 80aa 	beq.w	8019b2c <uxr_read_framed_msg+0x300>
 80199d8:	18e2      	adds	r2, r4, r3
 80199da:	7891      	ldrb	r1, [r2, #2]
 80199dc:	297d      	cmp	r1, #125	@ 0x7d
 80199de:	f000 8186 	beq.w	8019cee <uxr_read_framed_msg+0x4c2>
 80199e2:	3301      	adds	r3, #1
 80199e4:	202a      	movs	r0, #42	@ 0x2a
 80199e6:	297e      	cmp	r1, #126	@ 0x7e
 80199e8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80199ec:	fba5 c202 	umull	ip, r2, r5, r2
 80199f0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80199f4:	fb00 3312 	mls	r3, r0, r2, r3
 80199f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80199fc:	f000 8195 	beq.w	8019d2a <uxr_read_framed_msg+0x4fe>
 8019a00:	2304      	movs	r3, #4
 8019a02:	8621      	strh	r1, [r4, #48]	@ 0x30
 8019a04:	7023      	strb	r3, [r4, #0]
 8019a06:	e722      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019a08:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019a0c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019a10:	4290      	cmp	r0, r2
 8019a12:	f000 80b4 	beq.w	8019b7e <uxr_read_framed_msg+0x352>
 8019a16:	18a3      	adds	r3, r4, r2
 8019a18:	7899      	ldrb	r1, [r3, #2]
 8019a1a:	297d      	cmp	r1, #125	@ 0x7d
 8019a1c:	f000 8107 	beq.w	8019c2e <uxr_read_framed_msg+0x402>
 8019a20:	3201      	adds	r2, #1
 8019a22:	232a      	movs	r3, #42	@ 0x2a
 8019a24:	297e      	cmp	r1, #126	@ 0x7e
 8019a26:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019a2a:	fba5 c000 	umull	ip, r0, r5, r0
 8019a2e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019a32:	fb03 2210 	mls	r2, r3, r0, r2
 8019a36:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019a3a:	f000 818a 	beq.w	8019d52 <uxr_read_framed_msg+0x526>
 8019a3e:	7863      	ldrb	r3, [r4, #1]
 8019a40:	428b      	cmp	r3, r1
 8019a42:	bf0c      	ite	eq
 8019a44:	2303      	moveq	r3, #3
 8019a46:	2300      	movne	r3, #0
 8019a48:	7023      	strb	r3, [r4, #0]
 8019a4a:	e700      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019a52:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8019a56:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019a5a:	4299      	cmp	r1, r3
 8019a5c:	d06a      	beq.n	8019b34 <uxr_read_framed_msg+0x308>
 8019a5e:	18e2      	adds	r2, r4, r3
 8019a60:	7890      	ldrb	r0, [r2, #2]
 8019a62:	287d      	cmp	r0, #125	@ 0x7d
 8019a64:	f000 8100 	beq.w	8019c68 <uxr_read_framed_msg+0x43c>
 8019a68:	3301      	adds	r3, #1
 8019a6a:	212a      	movs	r1, #42	@ 0x2a
 8019a6c:	287e      	cmp	r0, #126	@ 0x7e
 8019a6e:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8019a72:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019a76:	fba5 c202 	umull	ip, r2, r5, r2
 8019a7a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a7e:	fb01 3312 	mls	r3, r1, r2, r3
 8019a82:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019a86:	d055      	beq.n	8019b34 <uxr_read_framed_msg+0x308>
 8019a88:	2302      	movs	r3, #2
 8019a8a:	7023      	strb	r3, [r4, #0]
 8019a8c:	e6df      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019a8e:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8019a92:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8019a96:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019a9a:	1c5a      	adds	r2, r3, #1
 8019a9c:	459c      	cmp	ip, r3
 8019a9e:	eb04 0103 	add.w	r1, r4, r3
 8019aa2:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019aa6:	f43f af04 	beq.w	80198b2 <uxr_read_framed_msg+0x86>
 8019aaa:	fba5 0303 	umull	r0, r3, r5, r3
 8019aae:	7889      	ldrb	r1, [r1, #2]
 8019ab0:	089b      	lsrs	r3, r3, #2
 8019ab2:	297e      	cmp	r1, #126	@ 0x7e
 8019ab4:	fb0e 2313 	mls	r3, lr, r3, r2
 8019ab8:	b2db      	uxtb	r3, r3
 8019aba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019abe:	d1ec      	bne.n	8019a9a <uxr_read_framed_msg+0x26e>
 8019ac0:	2301      	movs	r3, #1
 8019ac2:	7023      	strb	r3, [r4, #0]
 8019ac4:	e6c3      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019ac6:	1c50      	adds	r0, r2, #1
 8019ac8:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8019acc:	3202      	adds	r2, #2
 8019ace:	0841      	lsrs	r1, r0, #1
 8019ad0:	fba5 c101 	umull	ip, r1, r5, r1
 8019ad4:	0889      	lsrs	r1, r1, #2
 8019ad6:	fb0b 0111 	mls	r1, fp, r1, r0
 8019ada:	1860      	adds	r0, r4, r1
 8019adc:	b2c9      	uxtb	r1, r1
 8019ade:	458a      	cmp	sl, r1
 8019ae0:	f43f af42 	beq.w	8019968 <uxr_read_framed_msg+0x13c>
 8019ae4:	0851      	lsrs	r1, r2, #1
 8019ae6:	7880      	ldrb	r0, [r0, #2]
 8019ae8:	fba5 a101 	umull	sl, r1, r5, r1
 8019aec:	287e      	cmp	r0, #126	@ 0x7e
 8019aee:	f080 0c20 	eor.w	ip, r0, #32
 8019af2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019af6:	fb0b 2211 	mls	r2, fp, r1, r2
 8019afa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019afe:	f47f af14 	bne.w	801992a <uxr_read_framed_msg+0xfe>
 8019b02:	459e      	cmp	lr, r3
 8019b04:	f43f af33 	beq.w	801996e <uxr_read_framed_msg+0x142>
 8019b08:	2301      	movs	r3, #1
 8019b0a:	7023      	strb	r3, [r4, #0]
 8019b0c:	e69f      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019b0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b10:	9300      	str	r3, [sp, #0]
 8019b12:	2301      	movs	r3, #1
 8019b14:	9301      	str	r3, [sp, #4]
 8019b16:	464a      	mov	r2, r9
 8019b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b1a:	4641      	mov	r1, r8
 8019b1c:	4620      	mov	r0, r4
 8019b1e:	f7ff fdf1 	bl	8019704 <uxr_framing_read_transport>
 8019b22:	2800      	cmp	r0, #0
 8019b24:	f43f aec5 	beq.w	80198b2 <uxr_read_framed_msg+0x86>
 8019b28:	7823      	ldrb	r3, [r4, #0]
 8019b2a:	e690      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019b2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b2e:	9300      	str	r3, [sp, #0]
 8019b30:	2302      	movs	r3, #2
 8019b32:	e7ef      	b.n	8019b14 <uxr_read_framed_msg+0x2e8>
 8019b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b36:	464a      	mov	r2, r9
 8019b38:	4641      	mov	r1, r8
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	9300      	str	r3, [sp, #0]
 8019b3e:	2304      	movs	r3, #4
 8019b40:	9301      	str	r3, [sp, #4]
 8019b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b44:	f7ff fdde 	bl	8019704 <uxr_framing_read_transport>
 8019b48:	2800      	cmp	r0, #0
 8019b4a:	d1ed      	bne.n	8019b28 <uxr_read_framed_msg+0x2fc>
 8019b4c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019b50:	2b7e      	cmp	r3, #126	@ 0x7e
 8019b52:	d0e9      	beq.n	8019b28 <uxr_read_framed_msg+0x2fc>
 8019b54:	e6ad      	b.n	80198b2 <uxr_read_framed_msg+0x86>
 8019b56:	bf00      	nop
 8019b58:	30c30c31 	.word	0x30c30c31
 8019b5c:	080205bc 	.word	0x080205bc
 8019b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b62:	9300      	str	r3, [sp, #0]
 8019b64:	2305      	movs	r3, #5
 8019b66:	9301      	str	r3, [sp, #4]
 8019b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019b6a:	f7ff fdcb 	bl	8019704 <uxr_framing_read_transport>
 8019b6e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019b72:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019b76:	429a      	cmp	r2, r3
 8019b78:	f43f ae9b 	beq.w	80198b2 <uxr_read_framed_msg+0x86>
 8019b7c:	e664      	b.n	8019848 <uxr_read_framed_msg+0x1c>
 8019b7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b80:	9300      	str	r3, [sp, #0]
 8019b82:	2303      	movs	r3, #3
 8019b84:	e7c6      	b.n	8019b14 <uxr_read_framed_msg+0x2e8>
 8019b86:	2305      	movs	r3, #5
 8019b88:	7023      	strb	r3, [r4, #0]
 8019b8a:	e660      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019b8c:	f43f aeef 	beq.w	801996e <uxr_read_framed_msg+0x142>
 8019b90:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019b94:	d094      	beq.n	8019ac0 <uxr_read_framed_msg+0x294>
 8019b96:	ebae 0303 	sub.w	r3, lr, r3
 8019b9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019b9c:	3302      	adds	r3, #2
 8019b9e:	9200      	str	r2, [sp, #0]
 8019ba0:	e7b8      	b.n	8019b14 <uxr_read_framed_msg+0x2e8>
 8019ba2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8019ba6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019ba8:	7013      	strb	r3, [r2, #0]
 8019baa:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8019bac:	b003      	add	sp, #12
 8019bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb2:	1c59      	adds	r1, r3, #1
 8019bb4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019bb8:	084a      	lsrs	r2, r1, #1
 8019bba:	fba5 e202 	umull	lr, r2, r5, r2
 8019bbe:	0892      	lsrs	r2, r2, #2
 8019bc0:	fb0c 1212 	mls	r2, ip, r2, r1
 8019bc4:	b2d1      	uxtb	r1, r2
 8019bc6:	4288      	cmp	r0, r1
 8019bc8:	d0b0      	beq.n	8019b2c <uxr_read_framed_msg+0x300>
 8019bca:	3302      	adds	r3, #2
 8019bcc:	4422      	add	r2, r4
 8019bce:	7891      	ldrb	r1, [r2, #2]
 8019bd0:	085a      	lsrs	r2, r3, #1
 8019bd2:	fba5 0202 	umull	r0, r2, r5, r2
 8019bd6:	297e      	cmp	r1, #126	@ 0x7e
 8019bd8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019bdc:	fb0c 3312 	mls	r3, ip, r2, r3
 8019be0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019be4:	f000 80a1 	beq.w	8019d2a <uxr_read_framed_msg+0x4fe>
 8019be8:	f081 0120 	eor.w	r1, r1, #32
 8019bec:	e680      	b.n	80198f0 <uxr_read_framed_msg+0xc4>
 8019bee:	f103 0c01 	add.w	ip, r3, #1
 8019bf2:	202a      	movs	r0, #42	@ 0x2a
 8019bf4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019bf8:	fba5 e202 	umull	lr, r2, r5, r2
 8019bfc:	0892      	lsrs	r2, r2, #2
 8019bfe:	fb00 c212 	mls	r2, r0, r2, ip
 8019c02:	fa5f fc82 	uxtb.w	ip, r2
 8019c06:	4561      	cmp	r1, ip
 8019c08:	d081      	beq.n	8019b0e <uxr_read_framed_msg+0x2e2>
 8019c0a:	3302      	adds	r3, #2
 8019c0c:	4422      	add	r2, r4
 8019c0e:	0859      	lsrs	r1, r3, #1
 8019c10:	7892      	ldrb	r2, [r2, #2]
 8019c12:	fba5 c101 	umull	ip, r1, r5, r1
 8019c16:	2a7e      	cmp	r2, #126	@ 0x7e
 8019c18:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019c1c:	fb00 3311 	mls	r3, r0, r1, r3
 8019c20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019c24:	f000 8091 	beq.w	8019d4a <uxr_read_framed_msg+0x51e>
 8019c28:	f082 0220 	eor.w	r2, r2, #32
 8019c2c:	e636      	b.n	801989c <uxr_read_framed_msg+0x70>
 8019c2e:	1c51      	adds	r1, r2, #1
 8019c30:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019c34:	084b      	lsrs	r3, r1, #1
 8019c36:	fba5 e303 	umull	lr, r3, r5, r3
 8019c3a:	089b      	lsrs	r3, r3, #2
 8019c3c:	fb0c 1313 	mls	r3, ip, r3, r1
 8019c40:	b2d9      	uxtb	r1, r3
 8019c42:	4288      	cmp	r0, r1
 8019c44:	d09b      	beq.n	8019b7e <uxr_read_framed_msg+0x352>
 8019c46:	3202      	adds	r2, #2
 8019c48:	4423      	add	r3, r4
 8019c4a:	0850      	lsrs	r0, r2, #1
 8019c4c:	789b      	ldrb	r3, [r3, #2]
 8019c4e:	fba5 1000 	umull	r1, r0, r5, r0
 8019c52:	2b7e      	cmp	r3, #126	@ 0x7e
 8019c54:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019c58:	fb0c 2210 	mls	r2, ip, r0, r2
 8019c5c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019c60:	d077      	beq.n	8019d52 <uxr_read_framed_msg+0x526>
 8019c62:	f083 0120 	eor.w	r1, r3, #32
 8019c66:	e6ea      	b.n	8019a3e <uxr_read_framed_msg+0x212>
 8019c68:	f103 0c01 	add.w	ip, r3, #1
 8019c6c:	202a      	movs	r0, #42	@ 0x2a
 8019c6e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019c72:	fba5 e202 	umull	lr, r2, r5, r2
 8019c76:	0892      	lsrs	r2, r2, #2
 8019c78:	fb00 c212 	mls	r2, r0, r2, ip
 8019c7c:	fa5f fc82 	uxtb.w	ip, r2
 8019c80:	4561      	cmp	r1, ip
 8019c82:	f43f af57 	beq.w	8019b34 <uxr_read_framed_msg+0x308>
 8019c86:	3302      	adds	r3, #2
 8019c88:	4422      	add	r2, r4
 8019c8a:	7891      	ldrb	r1, [r2, #2]
 8019c8c:	085a      	lsrs	r2, r3, #1
 8019c8e:	fba5 c202 	umull	ip, r2, r5, r2
 8019c92:	297e      	cmp	r1, #126	@ 0x7e
 8019c94:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019c98:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019c9c:	fb00 3312 	mls	r3, r0, r2, r3
 8019ca0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019ca4:	f43f af46 	beq.w	8019b34 <uxr_read_framed_msg+0x308>
 8019ca8:	f081 0120 	eor.w	r1, r1, #32
 8019cac:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019cb0:	e6ea      	b.n	8019a88 <uxr_read_framed_msg+0x25c>
 8019cb2:	1c59      	adds	r1, r3, #1
 8019cb4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019cb8:	084a      	lsrs	r2, r1, #1
 8019cba:	fba5 e202 	umull	lr, r2, r5, r2
 8019cbe:	0892      	lsrs	r2, r2, #2
 8019cc0:	fb0c 1212 	mls	r2, ip, r2, r1
 8019cc4:	b2d1      	uxtb	r1, r2
 8019cc6:	4288      	cmp	r0, r1
 8019cc8:	f43f af21 	beq.w	8019b0e <uxr_read_framed_msg+0x2e2>
 8019ccc:	3302      	adds	r3, #2
 8019cce:	4422      	add	r2, r4
 8019cd0:	7891      	ldrb	r1, [r2, #2]
 8019cd2:	085a      	lsrs	r2, r3, #1
 8019cd4:	fba5 0202 	umull	r0, r2, r5, r2
 8019cd8:	297e      	cmp	r1, #126	@ 0x7e
 8019cda:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019cde:	fb0c 3312 	mls	r3, ip, r2, r3
 8019ce2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019ce6:	d030      	beq.n	8019d4a <uxr_read_framed_msg+0x51e>
 8019ce8:	f081 0120 	eor.w	r1, r1, #32
 8019cec:	e65d      	b.n	80199aa <uxr_read_framed_msg+0x17e>
 8019cee:	1c59      	adds	r1, r3, #1
 8019cf0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019cf4:	084a      	lsrs	r2, r1, #1
 8019cf6:	fba5 e202 	umull	lr, r2, r5, r2
 8019cfa:	0892      	lsrs	r2, r2, #2
 8019cfc:	fb0c 1212 	mls	r2, ip, r2, r1
 8019d00:	b2d1      	uxtb	r1, r2
 8019d02:	4288      	cmp	r0, r1
 8019d04:	f43f af12 	beq.w	8019b2c <uxr_read_framed_msg+0x300>
 8019d08:	3302      	adds	r3, #2
 8019d0a:	4422      	add	r2, r4
 8019d0c:	7891      	ldrb	r1, [r2, #2]
 8019d0e:	085a      	lsrs	r2, r3, #1
 8019d10:	fba5 0202 	umull	r0, r2, r5, r2
 8019d14:	297e      	cmp	r1, #126	@ 0x7e
 8019d16:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019d1a:	fb0c 3312 	mls	r3, ip, r2, r3
 8019d1e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019d22:	d002      	beq.n	8019d2a <uxr_read_framed_msg+0x4fe>
 8019d24:	f081 0120 	eor.w	r1, r1, #32
 8019d28:	e66a      	b.n	8019a00 <uxr_read_framed_msg+0x1d4>
 8019d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d2c:	9300      	str	r3, [sp, #0]
 8019d2e:	2302      	movs	r3, #2
 8019d30:	9301      	str	r3, [sp, #4]
 8019d32:	464a      	mov	r2, r9
 8019d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019d36:	4641      	mov	r1, r8
 8019d38:	4620      	mov	r0, r4
 8019d3a:	f7ff fce3 	bl	8019704 <uxr_framing_read_transport>
 8019d3e:	2800      	cmp	r0, #0
 8019d40:	f47f aef2 	bne.w	8019b28 <uxr_read_framed_msg+0x2fc>
 8019d44:	2301      	movs	r3, #1
 8019d46:	7023      	strb	r3, [r4, #0]
 8019d48:	e581      	b.n	801984e <uxr_read_framed_msg+0x22>
 8019d4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d4c:	9300      	str	r3, [sp, #0]
 8019d4e:	2301      	movs	r3, #1
 8019d50:	e7ee      	b.n	8019d30 <uxr_read_framed_msg+0x504>
 8019d52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d54:	9300      	str	r3, [sp, #0]
 8019d56:	2303      	movs	r3, #3
 8019d58:	e7ea      	b.n	8019d30 <uxr_read_framed_msg+0x504>
 8019d5a:	bf00      	nop

08019d5c <uxr_stream_id>:
 8019d5c:	2901      	cmp	r1, #1
 8019d5e:	4684      	mov	ip, r0
 8019d60:	b500      	push	{lr}
 8019d62:	b083      	sub	sp, #12
 8019d64:	d01f      	beq.n	8019da6 <uxr_stream_id+0x4a>
 8019d66:	2902      	cmp	r1, #2
 8019d68:	f04f 0e00 	mov.w	lr, #0
 8019d6c:	d020      	beq.n	8019db0 <uxr_stream_id+0x54>
 8019d6e:	2300      	movs	r3, #0
 8019d70:	2000      	movs	r0, #0
 8019d72:	f36e 0307 	bfi	r3, lr, #0, #8
 8019d76:	f36c 230f 	bfi	r3, ip, #8, #8
 8019d7a:	f361 4317 	bfi	r3, r1, #16, #8
 8019d7e:	f362 631f 	bfi	r3, r2, #24, #8
 8019d82:	fa5f fc83 	uxtb.w	ip, r3
 8019d86:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019d8a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019d8e:	0e1b      	lsrs	r3, r3, #24
 8019d90:	f36c 0007 	bfi	r0, ip, #0, #8
 8019d94:	f361 200f 	bfi	r0, r1, #8, #8
 8019d98:	f362 4017 	bfi	r0, r2, #16, #8
 8019d9c:	f363 601f 	bfi	r0, r3, #24, #8
 8019da0:	b003      	add	sp, #12
 8019da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8019da6:	f100 0e01 	add.w	lr, r0, #1
 8019daa:	fa5f fe8e 	uxtb.w	lr, lr
 8019dae:	e7de      	b.n	8019d6e <uxr_stream_id+0x12>
 8019db0:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8019db4:	e7db      	b.n	8019d6e <uxr_stream_id+0x12>
 8019db6:	bf00      	nop

08019db8 <uxr_stream_id_from_raw>:
 8019db8:	b082      	sub	sp, #8
 8019dba:	b130      	cbz	r0, 8019dca <uxr_stream_id_from_raw+0x12>
 8019dbc:	0603      	lsls	r3, r0, #24
 8019dbe:	d421      	bmi.n	8019e04 <uxr_stream_id_from_raw+0x4c>
 8019dc0:	1e42      	subs	r2, r0, #1
 8019dc2:	f04f 0c01 	mov.w	ip, #1
 8019dc6:	b2d2      	uxtb	r2, r2
 8019dc8:	e001      	b.n	8019dce <uxr_stream_id_from_raw+0x16>
 8019dca:	4684      	mov	ip, r0
 8019dcc:	4602      	mov	r2, r0
 8019dce:	2300      	movs	r3, #0
 8019dd0:	f360 0307 	bfi	r3, r0, #0, #8
 8019dd4:	2000      	movs	r0, #0
 8019dd6:	f362 230f 	bfi	r3, r2, #8, #8
 8019dda:	f36c 4317 	bfi	r3, ip, #16, #8
 8019dde:	f361 631f 	bfi	r3, r1, #24, #8
 8019de2:	fa5f fc83 	uxtb.w	ip, r3
 8019de6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019dea:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019dee:	0e1b      	lsrs	r3, r3, #24
 8019df0:	f36c 0007 	bfi	r0, ip, #0, #8
 8019df4:	f361 200f 	bfi	r0, r1, #8, #8
 8019df8:	f362 4017 	bfi	r0, r2, #16, #8
 8019dfc:	f363 601f 	bfi	r0, r3, #24, #8
 8019e00:	b002      	add	sp, #8
 8019e02:	4770      	bx	lr
 8019e04:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8019e08:	f04f 0c02 	mov.w	ip, #2
 8019e0c:	e7df      	b.n	8019dce <uxr_stream_id_from_raw+0x16>
 8019e0e:	bf00      	nop

08019e10 <uxr_init_stream_storage>:
 8019e10:	2300      	movs	r3, #0
 8019e12:	7403      	strb	r3, [r0, #16]
 8019e14:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8019e18:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8019e1c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8019e20:	4770      	bx	lr
 8019e22:	bf00      	nop

08019e24 <uxr_reset_stream_storage>:
 8019e24:	b570      	push	{r4, r5, r6, lr}
 8019e26:	7c03      	ldrb	r3, [r0, #16]
 8019e28:	4604      	mov	r4, r0
 8019e2a:	b14b      	cbz	r3, 8019e40 <uxr_reset_stream_storage+0x1c>
 8019e2c:	4606      	mov	r6, r0
 8019e2e:	2500      	movs	r5, #0
 8019e30:	4630      	mov	r0, r6
 8019e32:	3501      	adds	r5, #1
 8019e34:	f002 fa42 	bl	801c2bc <uxr_reset_output_best_effort_stream>
 8019e38:	7c23      	ldrb	r3, [r4, #16]
 8019e3a:	3610      	adds	r6, #16
 8019e3c:	42ab      	cmp	r3, r5
 8019e3e:	d8f7      	bhi.n	8019e30 <uxr_reset_stream_storage+0xc>
 8019e40:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019e44:	b15b      	cbz	r3, 8019e5e <uxr_reset_stream_storage+0x3a>
 8019e46:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019e4a:	2500      	movs	r5, #0
 8019e4c:	4630      	mov	r0, r6
 8019e4e:	3501      	adds	r5, #1
 8019e50:	f002 f83a 	bl	801bec8 <uxr_reset_input_best_effort_stream>
 8019e54:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019e58:	3602      	adds	r6, #2
 8019e5a:	42ab      	cmp	r3, r5
 8019e5c:	d8f6      	bhi.n	8019e4c <uxr_reset_stream_storage+0x28>
 8019e5e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8019e62:	b15b      	cbz	r3, 8019e7c <uxr_reset_stream_storage+0x58>
 8019e64:	f104 0618 	add.w	r6, r4, #24
 8019e68:	2500      	movs	r5, #0
 8019e6a:	4630      	mov	r0, r6
 8019e6c:	3501      	adds	r5, #1
 8019e6e:	f002 fad3 	bl	801c418 <uxr_reset_output_reliable_stream>
 8019e72:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8019e76:	3628      	adds	r6, #40	@ 0x28
 8019e78:	42ab      	cmp	r3, r5
 8019e7a:	d8f6      	bhi.n	8019e6a <uxr_reset_stream_storage+0x46>
 8019e7c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8019e80:	b15b      	cbz	r3, 8019e9a <uxr_reset_stream_storage+0x76>
 8019e82:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8019e86:	2500      	movs	r5, #0
 8019e88:	4630      	mov	r0, r6
 8019e8a:	3501      	adds	r5, #1
 8019e8c:	f002 f888 	bl	801bfa0 <uxr_reset_input_reliable_stream>
 8019e90:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8019e94:	3618      	adds	r6, #24
 8019e96:	42ab      	cmp	r3, r5
 8019e98:	d8f6      	bhi.n	8019e88 <uxr_reset_stream_storage+0x64>
 8019e9a:	bd70      	pop	{r4, r5, r6, pc}

08019e9c <uxr_add_output_best_effort_buffer>:
 8019e9c:	b510      	push	{r4, lr}
 8019e9e:	7c04      	ldrb	r4, [r0, #16]
 8019ea0:	b082      	sub	sp, #8
 8019ea2:	f104 0c01 	add.w	ip, r4, #1
 8019ea6:	f880 c010 	strb.w	ip, [r0, #16]
 8019eaa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019eae:	f002 f9fb 	bl	801c2a8 <uxr_init_output_best_effort_stream>
 8019eb2:	2201      	movs	r2, #1
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	4611      	mov	r1, r2
 8019eb8:	b002      	add	sp, #8
 8019eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ebe:	f7ff bf4d 	b.w	8019d5c <uxr_stream_id>
 8019ec2:	bf00      	nop

08019ec4 <uxr_add_output_reliable_buffer>:
 8019ec4:	b510      	push	{r4, lr}
 8019ec6:	b084      	sub	sp, #16
 8019ec8:	4684      	mov	ip, r0
 8019eca:	2028      	movs	r0, #40	@ 0x28
 8019ecc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019ed0:	9400      	str	r4, [sp, #0]
 8019ed2:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8019ed6:	fb00 c004 	mla	r0, r0, r4, ip
 8019eda:	f104 0e01 	add.w	lr, r4, #1
 8019ede:	3018      	adds	r0, #24
 8019ee0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8019ee4:	f002 fa60 	bl	801c3a8 <uxr_init_output_reliable_stream>
 8019ee8:	2201      	movs	r2, #1
 8019eea:	2102      	movs	r1, #2
 8019eec:	4620      	mov	r0, r4
 8019eee:	b004      	add	sp, #16
 8019ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ef4:	f7ff bf32 	b.w	8019d5c <uxr_stream_id>

08019ef8 <uxr_add_input_best_effort_buffer>:
 8019ef8:	b510      	push	{r4, lr}
 8019efa:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8019efe:	b082      	sub	sp, #8
 8019f00:	1c62      	adds	r2, r4, #1
 8019f02:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8019f06:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8019f0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019f0e:	f001 ffd7 	bl	801bec0 <uxr_init_input_best_effort_stream>
 8019f12:	2200      	movs	r2, #0
 8019f14:	2101      	movs	r1, #1
 8019f16:	4620      	mov	r0, r4
 8019f18:	b002      	add	sp, #8
 8019f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f1e:	f7ff bf1d 	b.w	8019d5c <uxr_stream_id>
 8019f22:	bf00      	nop

08019f24 <uxr_add_input_reliable_buffer>:
 8019f24:	b510      	push	{r4, lr}
 8019f26:	b084      	sub	sp, #16
 8019f28:	4684      	mov	ip, r0
 8019f2a:	2018      	movs	r0, #24
 8019f2c:	9c06      	ldr	r4, [sp, #24]
 8019f2e:	9400      	str	r4, [sp, #0]
 8019f30:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8019f34:	fb00 c004 	mla	r0, r0, r4, ip
 8019f38:	f104 0e01 	add.w	lr, r4, #1
 8019f3c:	3048      	adds	r0, #72	@ 0x48
 8019f3e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8019f42:	f002 f807 	bl	801bf54 <uxr_init_input_reliable_stream>
 8019f46:	2200      	movs	r2, #0
 8019f48:	2102      	movs	r1, #2
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	b004      	add	sp, #16
 8019f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f52:	f7ff bf03 	b.w	8019d5c <uxr_stream_id>
 8019f56:	bf00      	nop

08019f58 <uxr_get_output_best_effort_stream>:
 8019f58:	7c03      	ldrb	r3, [r0, #16]
 8019f5a:	428b      	cmp	r3, r1
 8019f5c:	bf8c      	ite	hi
 8019f5e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8019f62:	2000      	movls	r0, #0
 8019f64:	4770      	bx	lr
 8019f66:	bf00      	nop

08019f68 <uxr_get_output_reliable_stream>:
 8019f68:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019f6c:	428b      	cmp	r3, r1
 8019f6e:	d904      	bls.n	8019f7a <uxr_get_output_reliable_stream+0x12>
 8019f70:	2328      	movs	r3, #40	@ 0x28
 8019f72:	fb03 0001 	mla	r0, r3, r1, r0
 8019f76:	3018      	adds	r0, #24
 8019f78:	4770      	bx	lr
 8019f7a:	2000      	movs	r0, #0
 8019f7c:	4770      	bx	lr
 8019f7e:	bf00      	nop

08019f80 <uxr_get_input_best_effort_stream>:
 8019f80:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8019f84:	428b      	cmp	r3, r1
 8019f86:	d903      	bls.n	8019f90 <uxr_get_input_best_effort_stream+0x10>
 8019f88:	3121      	adds	r1, #33	@ 0x21
 8019f8a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019f8e:	4770      	bx	lr
 8019f90:	2000      	movs	r0, #0
 8019f92:	4770      	bx	lr

08019f94 <uxr_get_input_reliable_stream>:
 8019f94:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8019f98:	428b      	cmp	r3, r1
 8019f9a:	d904      	bls.n	8019fa6 <uxr_get_input_reliable_stream+0x12>
 8019f9c:	2318      	movs	r3, #24
 8019f9e:	fb03 0001 	mla	r0, r3, r1, r0
 8019fa2:	3048      	adds	r0, #72	@ 0x48
 8019fa4:	4770      	bx	lr
 8019fa6:	2000      	movs	r0, #0
 8019fa8:	4770      	bx	lr
 8019faa:	bf00      	nop

08019fac <uxr_output_streams_confirmed>:
 8019fac:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019fb0:	b183      	cbz	r3, 8019fd4 <uxr_output_streams_confirmed+0x28>
 8019fb2:	b570      	push	{r4, r5, r6, lr}
 8019fb4:	4606      	mov	r6, r0
 8019fb6:	f100 0518 	add.w	r5, r0, #24
 8019fba:	2400      	movs	r4, #0
 8019fbc:	e000      	b.n	8019fc0 <uxr_output_streams_confirmed+0x14>
 8019fbe:	b140      	cbz	r0, 8019fd2 <uxr_output_streams_confirmed+0x26>
 8019fc0:	4628      	mov	r0, r5
 8019fc2:	3401      	adds	r4, #1
 8019fc4:	f002 fc9c 	bl	801c900 <uxr_is_output_up_to_date>
 8019fc8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8019fcc:	3528      	adds	r5, #40	@ 0x28
 8019fce:	42a3      	cmp	r3, r4
 8019fd0:	d8f5      	bhi.n	8019fbe <uxr_output_streams_confirmed+0x12>
 8019fd2:	bd70      	pop	{r4, r5, r6, pc}
 8019fd4:	2001      	movs	r0, #1
 8019fd6:	4770      	bx	lr

08019fd8 <uxr_buffer_submessage_header>:
 8019fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fda:	460e      	mov	r6, r1
 8019fdc:	2104      	movs	r1, #4
 8019fde:	4604      	mov	r4, r0
 8019fe0:	4615      	mov	r5, r2
 8019fe2:	461f      	mov	r7, r3
 8019fe4:	f7f6 f802 	bl	800ffec <ucdr_align_to>
 8019fe8:	2301      	movs	r3, #1
 8019fea:	4631      	mov	r1, r6
 8019fec:	4620      	mov	r0, r4
 8019fee:	ea47 0203 	orr.w	r2, r7, r3
 8019ff2:	7523      	strb	r3, [r4, #20]
 8019ff4:	462b      	mov	r3, r5
 8019ff6:	f000 f8d5 	bl	801a1a4 <uxr_serialize_submessage_header>
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	f7f6 f80c 	bl	8010018 <ucdr_buffer_remaining>
 801a000:	42a8      	cmp	r0, r5
 801a002:	bf34      	ite	cc
 801a004:	2000      	movcc	r0, #0
 801a006:	2001      	movcs	r0, #1
 801a008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a00a:	bf00      	nop

0801a00c <uxr_read_submessage_header>:
 801a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a010:	4604      	mov	r4, r0
 801a012:	460d      	mov	r5, r1
 801a014:	2104      	movs	r1, #4
 801a016:	4616      	mov	r6, r2
 801a018:	4698      	mov	r8, r3
 801a01a:	f7f5 ffe7 	bl	800ffec <ucdr_align_to>
 801a01e:	4620      	mov	r0, r4
 801a020:	f7f5 fffa 	bl	8010018 <ucdr_buffer_remaining>
 801a024:	2803      	cmp	r0, #3
 801a026:	bf8c      	ite	hi
 801a028:	2701      	movhi	r7, #1
 801a02a:	2700      	movls	r7, #0
 801a02c:	d802      	bhi.n	801a034 <uxr_read_submessage_header+0x28>
 801a02e:	4638      	mov	r0, r7
 801a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a034:	4633      	mov	r3, r6
 801a036:	4642      	mov	r2, r8
 801a038:	4620      	mov	r0, r4
 801a03a:	4629      	mov	r1, r5
 801a03c:	f000 f8c6 	bl	801a1cc <uxr_deserialize_submessage_header>
 801a040:	f898 3000 	ldrb.w	r3, [r8]
 801a044:	4638      	mov	r0, r7
 801a046:	f003 0201 	and.w	r2, r3, #1
 801a04a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801a04e:	f888 3000 	strb.w	r3, [r8]
 801a052:	7522      	strb	r2, [r4, #20]
 801a054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a058 <uxr_submessage_padding>:
 801a058:	f010 0003 	ands.w	r0, r0, #3
 801a05c:	bf18      	it	ne
 801a05e:	f1c0 0004 	rsbne	r0, r0, #4
 801a062:	4770      	bx	lr

0801a064 <uxr_millis>:
 801a064:	b510      	push	{r4, lr}
 801a066:	b084      	sub	sp, #16
 801a068:	2001      	movs	r0, #1
 801a06a:	4669      	mov	r1, sp
 801a06c:	f7e7 fc98 	bl	80019a0 <clock_gettime>
 801a070:	4908      	ldr	r1, [pc, #32]	@ (801a094 <uxr_millis+0x30>)
 801a072:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801a076:	fba0 0301 	umull	r0, r3, r0, r1
 801a07a:	1900      	adds	r0, r0, r4
 801a07c:	fb01 3102 	mla	r1, r1, r2, r3
 801a080:	4a05      	ldr	r2, [pc, #20]	@ (801a098 <uxr_millis+0x34>)
 801a082:	f04f 0300 	mov.w	r3, #0
 801a086:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801a08a:	f7e6 f991 	bl	80003b0 <__aeabi_ldivmod>
 801a08e:	b004      	add	sp, #16
 801a090:	bd10      	pop	{r4, pc}
 801a092:	bf00      	nop
 801a094:	3b9aca00 	.word	0x3b9aca00
 801a098:	000f4240 	.word	0x000f4240

0801a09c <uxr_nanos>:
 801a09c:	b510      	push	{r4, lr}
 801a09e:	b084      	sub	sp, #16
 801a0a0:	2001      	movs	r0, #1
 801a0a2:	4669      	mov	r1, sp
 801a0a4:	f7e7 fc7c 	bl	80019a0 <clock_gettime>
 801a0a8:	4a06      	ldr	r2, [pc, #24]	@ (801a0c4 <uxr_nanos+0x28>)
 801a0aa:	9800      	ldr	r0, [sp, #0]
 801a0ac:	9902      	ldr	r1, [sp, #8]
 801a0ae:	fba0 0302 	umull	r0, r3, r0, r2
 801a0b2:	9c01      	ldr	r4, [sp, #4]
 801a0b4:	1840      	adds	r0, r0, r1
 801a0b6:	fb02 3304 	mla	r3, r2, r4, r3
 801a0ba:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801a0be:	b004      	add	sp, #16
 801a0c0:	bd10      	pop	{r4, pc}
 801a0c2:	bf00      	nop
 801a0c4:	3b9aca00 	.word	0x3b9aca00

0801a0c8 <uxr_prepare_output_stream>:
 801a0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0ca:	b087      	sub	sp, #28
 801a0cc:	2707      	movs	r7, #7
 801a0ce:	2500      	movs	r5, #0
 801a0d0:	461c      	mov	r4, r3
 801a0d2:	4606      	mov	r6, r0
 801a0d4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a0d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a0da:	e9cd 7500 	strd	r7, r5, [sp]
 801a0de:	3204      	adds	r2, #4
 801a0e0:	f7ff f852 	bl	8019188 <uxr_prepare_stream_to_write_submessage>
 801a0e4:	f080 0201 	eor.w	r2, r0, #1
 801a0e8:	b2d2      	uxtb	r2, r2
 801a0ea:	75a2      	strb	r2, [r4, #22]
 801a0ec:	b112      	cbz	r2, 801a0f4 <uxr_prepare_output_stream+0x2c>
 801a0ee:	4628      	mov	r0, r5
 801a0f0:	b007      	add	sp, #28
 801a0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0f4:	aa05      	add	r2, sp, #20
 801a0f6:	9902      	ldr	r1, [sp, #8]
 801a0f8:	4630      	mov	r0, r6
 801a0fa:	f7ff f981 	bl	8019400 <uxr_init_base_object_request>
 801a0fe:	a905      	add	r1, sp, #20
 801a100:	4605      	mov	r5, r0
 801a102:	4620      	mov	r0, r4
 801a104:	f000 fff2 	bl	801b0ec <uxr_serialize_WRITE_DATA_Payload_Data>
 801a108:	69a6      	ldr	r6, [r4, #24]
 801a10a:	69e7      	ldr	r7, [r4, #28]
 801a10c:	4620      	mov	r0, r4
 801a10e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801a112:	1a52      	subs	r2, r2, r1
 801a114:	f7f5 ff4e 	bl	800ffb4 <ucdr_init_buffer>
 801a118:	4620      	mov	r0, r4
 801a11a:	463a      	mov	r2, r7
 801a11c:	4631      	mov	r1, r6
 801a11e:	f7f5 ff1d 	bl	800ff5c <ucdr_set_on_full_buffer_callback>
 801a122:	4628      	mov	r0, r5
 801a124:	b007      	add	sp, #28
 801a126:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a128 <uxr_serialize_message_header>:
 801a128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a12a:	4616      	mov	r6, r2
 801a12c:	b083      	sub	sp, #12
 801a12e:	4604      	mov	r4, r0
 801a130:	460d      	mov	r5, r1
 801a132:	9301      	str	r3, [sp, #4]
 801a134:	9f08      	ldr	r7, [sp, #32]
 801a136:	f7f4 fcd3 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a13a:	4631      	mov	r1, r6
 801a13c:	4620      	mov	r0, r4
 801a13e:	f7f4 fccf 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a142:	9a01      	ldr	r2, [sp, #4]
 801a144:	2101      	movs	r1, #1
 801a146:	4620      	mov	r0, r4
 801a148:	f7f4 fd76 	bl	800ec38 <ucdr_serialize_endian_uint16_t>
 801a14c:	062b      	lsls	r3, r5, #24
 801a14e:	d501      	bpl.n	801a154 <uxr_serialize_message_header+0x2c>
 801a150:	b003      	add	sp, #12
 801a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a154:	2204      	movs	r2, #4
 801a156:	4639      	mov	r1, r7
 801a158:	4620      	mov	r0, r4
 801a15a:	b003      	add	sp, #12
 801a15c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a160:	f7fd bbc2 	b.w	80178e8 <ucdr_serialize_array_uint8_t>

0801a164 <uxr_deserialize_message_header>:
 801a164:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a166:	4616      	mov	r6, r2
 801a168:	b083      	sub	sp, #12
 801a16a:	4604      	mov	r4, r0
 801a16c:	460d      	mov	r5, r1
 801a16e:	9301      	str	r3, [sp, #4]
 801a170:	9f08      	ldr	r7, [sp, #32]
 801a172:	f7f4 fccb 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801a176:	4631      	mov	r1, r6
 801a178:	4620      	mov	r0, r4
 801a17a:	f7f4 fcc7 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801a17e:	9a01      	ldr	r2, [sp, #4]
 801a180:	2101      	movs	r1, #1
 801a182:	4620      	mov	r0, r4
 801a184:	f7f4 fe4c 	bl	800ee20 <ucdr_deserialize_endian_uint16_t>
 801a188:	f995 3000 	ldrsb.w	r3, [r5]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	da01      	bge.n	801a194 <uxr_deserialize_message_header+0x30>
 801a190:	b003      	add	sp, #12
 801a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a194:	2204      	movs	r2, #4
 801a196:	4639      	mov	r1, r7
 801a198:	4620      	mov	r0, r4
 801a19a:	b003      	add	sp, #12
 801a19c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a1a0:	f7fd bc06 	b.w	80179b0 <ucdr_deserialize_array_uint8_t>

0801a1a4 <uxr_serialize_submessage_header>:
 801a1a4:	b530      	push	{r4, r5, lr}
 801a1a6:	4615      	mov	r5, r2
 801a1a8:	b083      	sub	sp, #12
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	9301      	str	r3, [sp, #4]
 801a1ae:	f7f4 fc97 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a1b2:	4629      	mov	r1, r5
 801a1b4:	4620      	mov	r0, r4
 801a1b6:	f7f4 fc93 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a1ba:	9a01      	ldr	r2, [sp, #4]
 801a1bc:	2101      	movs	r1, #1
 801a1be:	4620      	mov	r0, r4
 801a1c0:	b003      	add	sp, #12
 801a1c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1c6:	f7f4 bd37 	b.w	800ec38 <ucdr_serialize_endian_uint16_t>
 801a1ca:	bf00      	nop

0801a1cc <uxr_deserialize_submessage_header>:
 801a1cc:	b530      	push	{r4, r5, lr}
 801a1ce:	4615      	mov	r5, r2
 801a1d0:	b083      	sub	sp, #12
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	9301      	str	r3, [sp, #4]
 801a1d6:	f7f4 fc99 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801a1da:	4629      	mov	r1, r5
 801a1dc:	4620      	mov	r0, r4
 801a1de:	f7f4 fc95 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801a1e2:	9a01      	ldr	r2, [sp, #4]
 801a1e4:	2101      	movs	r1, #1
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	b003      	add	sp, #12
 801a1ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1ee:	f7f4 be17 	b.w	800ee20 <ucdr_deserialize_endian_uint16_t>
 801a1f2:	bf00      	nop

0801a1f4 <uxr_serialize_CLIENT_Representation>:
 801a1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1f8:	2204      	movs	r2, #4
 801a1fa:	460e      	mov	r6, r1
 801a1fc:	4605      	mov	r5, r0
 801a1fe:	f7fd fb73 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a202:	4607      	mov	r7, r0
 801a204:	2202      	movs	r2, #2
 801a206:	1d31      	adds	r1, r6, #4
 801a208:	4628      	mov	r0, r5
 801a20a:	f7fd fb6d 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a20e:	4038      	ands	r0, r7
 801a210:	2202      	movs	r2, #2
 801a212:	1db1      	adds	r1, r6, #6
 801a214:	b2c7      	uxtb	r7, r0
 801a216:	4628      	mov	r0, r5
 801a218:	f7fd fb66 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a21c:	2204      	movs	r2, #4
 801a21e:	4007      	ands	r7, r0
 801a220:	f106 0108 	add.w	r1, r6, #8
 801a224:	4628      	mov	r0, r5
 801a226:	f7fd fb5f 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a22a:	4007      	ands	r7, r0
 801a22c:	7b31      	ldrb	r1, [r6, #12]
 801a22e:	4628      	mov	r0, r5
 801a230:	f7f4 fc56 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a234:	7b71      	ldrb	r1, [r6, #13]
 801a236:	4007      	ands	r7, r0
 801a238:	4628      	mov	r0, r5
 801a23a:	f7f4 fc23 	bl	800ea84 <ucdr_serialize_bool>
 801a23e:	7b73      	ldrb	r3, [r6, #13]
 801a240:	ea07 0800 	and.w	r8, r7, r0
 801a244:	b93b      	cbnz	r3, 801a256 <uxr_serialize_CLIENT_Representation+0x62>
 801a246:	8bb1      	ldrh	r1, [r6, #28]
 801a248:	4628      	mov	r0, r5
 801a24a:	f7f4 fc75 	bl	800eb38 <ucdr_serialize_uint16_t>
 801a24e:	ea08 0000 	and.w	r0, r8, r0
 801a252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a256:	6931      	ldr	r1, [r6, #16]
 801a258:	4628      	mov	r0, r5
 801a25a:	f7f4 fe57 	bl	800ef0c <ucdr_serialize_uint32_t>
 801a25e:	6933      	ldr	r3, [r6, #16]
 801a260:	b1e3      	cbz	r3, 801a29c <uxr_serialize_CLIENT_Representation+0xa8>
 801a262:	b1c0      	cbz	r0, 801a296 <uxr_serialize_CLIENT_Representation+0xa2>
 801a264:	4637      	mov	r7, r6
 801a266:	f04f 0900 	mov.w	r9, #0
 801a26a:	e000      	b.n	801a26e <uxr_serialize_CLIENT_Representation+0x7a>
 801a26c:	b19c      	cbz	r4, 801a296 <uxr_serialize_CLIENT_Representation+0xa2>
 801a26e:	6979      	ldr	r1, [r7, #20]
 801a270:	4628      	mov	r0, r5
 801a272:	f001 fe0d 	bl	801be90 <ucdr_serialize_string>
 801a276:	69b9      	ldr	r1, [r7, #24]
 801a278:	4604      	mov	r4, r0
 801a27a:	4628      	mov	r0, r5
 801a27c:	f001 fe08 	bl	801be90 <ucdr_serialize_string>
 801a280:	f109 0901 	add.w	r9, r9, #1
 801a284:	6933      	ldr	r3, [r6, #16]
 801a286:	4004      	ands	r4, r0
 801a288:	3708      	adds	r7, #8
 801a28a:	4599      	cmp	r9, r3
 801a28c:	b2e4      	uxtb	r4, r4
 801a28e:	d3ed      	bcc.n	801a26c <uxr_serialize_CLIENT_Representation+0x78>
 801a290:	ea08 0804 	and.w	r8, r8, r4
 801a294:	e7d7      	b.n	801a246 <uxr_serialize_CLIENT_Representation+0x52>
 801a296:	f04f 0800 	mov.w	r8, #0
 801a29a:	e7d4      	b.n	801a246 <uxr_serialize_CLIENT_Representation+0x52>
 801a29c:	ea08 0800 	and.w	r8, r8, r0
 801a2a0:	e7d1      	b.n	801a246 <uxr_serialize_CLIENT_Representation+0x52>
 801a2a2:	bf00      	nop

0801a2a4 <uxr_deserialize_CLIENT_Representation>:
 801a2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2a8:	2204      	movs	r2, #4
 801a2aa:	460c      	mov	r4, r1
 801a2ac:	4605      	mov	r5, r0
 801a2ae:	f7fd fb7f 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801a2b2:	4607      	mov	r7, r0
 801a2b4:	2202      	movs	r2, #2
 801a2b6:	1d21      	adds	r1, r4, #4
 801a2b8:	4628      	mov	r0, r5
 801a2ba:	f7fd fb79 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801a2be:	4038      	ands	r0, r7
 801a2c0:	2202      	movs	r2, #2
 801a2c2:	1da1      	adds	r1, r4, #6
 801a2c4:	b2c6      	uxtb	r6, r0
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	f7fd fb72 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801a2cc:	2204      	movs	r2, #4
 801a2ce:	4006      	ands	r6, r0
 801a2d0:	f104 0108 	add.w	r1, r4, #8
 801a2d4:	4628      	mov	r0, r5
 801a2d6:	f7fd fb6b 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801a2da:	4006      	ands	r6, r0
 801a2dc:	f104 010c 	add.w	r1, r4, #12
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	f7f4 fc13 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801a2e6:	f104 010d 	add.w	r1, r4, #13
 801a2ea:	ea06 0700 	and.w	r7, r6, r0
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	f7f4 fbde 	bl	800eab0 <ucdr_deserialize_bool>
 801a2f4:	7b63      	ldrb	r3, [r4, #13]
 801a2f6:	4007      	ands	r7, r0
 801a2f8:	b93b      	cbnz	r3, 801a30a <uxr_deserialize_CLIENT_Representation+0x66>
 801a2fa:	f104 011c 	add.w	r1, r4, #28
 801a2fe:	4628      	mov	r0, r5
 801a300:	f7f4 fd1a 	bl	800ed38 <ucdr_deserialize_uint16_t>
 801a304:	4038      	ands	r0, r7
 801a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a30a:	f104 0110 	add.w	r1, r4, #16
 801a30e:	4628      	mov	r0, r5
 801a310:	f7f4 ff2c 	bl	800f16c <ucdr_deserialize_uint32_t>
 801a314:	6923      	ldr	r3, [r4, #16]
 801a316:	2b01      	cmp	r3, #1
 801a318:	d903      	bls.n	801a322 <uxr_deserialize_CLIENT_Representation+0x7e>
 801a31a:	2301      	movs	r3, #1
 801a31c:	2700      	movs	r7, #0
 801a31e:	75ab      	strb	r3, [r5, #22]
 801a320:	e7eb      	b.n	801a2fa <uxr_deserialize_CLIENT_Representation+0x56>
 801a322:	b30b      	cbz	r3, 801a368 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a324:	b1f0      	cbz	r0, 801a364 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a326:	46a0      	mov	r8, r4
 801a328:	f04f 0900 	mov.w	r9, #0
 801a32c:	e000      	b.n	801a330 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a32e:	b1ce      	cbz	r6, 801a364 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a330:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a334:	f108 0808 	add.w	r8, r8, #8
 801a338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a33c:	4628      	mov	r0, r5
 801a33e:	f001 fdb7 	bl	801beb0 <ucdr_deserialize_string>
 801a342:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a346:	4606      	mov	r6, r0
 801a348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a34c:	4628      	mov	r0, r5
 801a34e:	f109 0901 	add.w	r9, r9, #1
 801a352:	f001 fdad 	bl	801beb0 <ucdr_deserialize_string>
 801a356:	6923      	ldr	r3, [r4, #16]
 801a358:	4006      	ands	r6, r0
 801a35a:	4599      	cmp	r9, r3
 801a35c:	b2f6      	uxtb	r6, r6
 801a35e:	d3e6      	bcc.n	801a32e <uxr_deserialize_CLIENT_Representation+0x8a>
 801a360:	4037      	ands	r7, r6
 801a362:	e7ca      	b.n	801a2fa <uxr_deserialize_CLIENT_Representation+0x56>
 801a364:	2700      	movs	r7, #0
 801a366:	e7c8      	b.n	801a2fa <uxr_deserialize_CLIENT_Representation+0x56>
 801a368:	4007      	ands	r7, r0
 801a36a:	e7c6      	b.n	801a2fa <uxr_deserialize_CLIENT_Representation+0x56>

0801a36c <uxr_serialize_AGENT_Representation>:
 801a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a370:	2204      	movs	r2, #4
 801a372:	460f      	mov	r7, r1
 801a374:	4605      	mov	r5, r0
 801a376:	f7fd fab7 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a37a:	4604      	mov	r4, r0
 801a37c:	2202      	movs	r2, #2
 801a37e:	1d39      	adds	r1, r7, #4
 801a380:	4628      	mov	r0, r5
 801a382:	f7fd fab1 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a386:	4020      	ands	r0, r4
 801a388:	2202      	movs	r2, #2
 801a38a:	1db9      	adds	r1, r7, #6
 801a38c:	b2c4      	uxtb	r4, r0
 801a38e:	4628      	mov	r0, r5
 801a390:	f7fd faaa 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a394:	7a39      	ldrb	r1, [r7, #8]
 801a396:	4004      	ands	r4, r0
 801a398:	4628      	mov	r0, r5
 801a39a:	f7f4 fb73 	bl	800ea84 <ucdr_serialize_bool>
 801a39e:	7a3b      	ldrb	r3, [r7, #8]
 801a3a0:	ea00 0804 	and.w	r8, r0, r4
 801a3a4:	b913      	cbnz	r3, 801a3ac <uxr_serialize_AGENT_Representation+0x40>
 801a3a6:	4640      	mov	r0, r8
 801a3a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3ac:	68f9      	ldr	r1, [r7, #12]
 801a3ae:	4628      	mov	r0, r5
 801a3b0:	f7f4 fdac 	bl	800ef0c <ucdr_serialize_uint32_t>
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	b303      	cbz	r3, 801a3fa <uxr_serialize_AGENT_Representation+0x8e>
 801a3b8:	b1d0      	cbz	r0, 801a3f0 <uxr_serialize_AGENT_Representation+0x84>
 801a3ba:	463e      	mov	r6, r7
 801a3bc:	f04f 0900 	mov.w	r9, #0
 801a3c0:	e000      	b.n	801a3c4 <uxr_serialize_AGENT_Representation+0x58>
 801a3c2:	b1ac      	cbz	r4, 801a3f0 <uxr_serialize_AGENT_Representation+0x84>
 801a3c4:	6931      	ldr	r1, [r6, #16]
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	f001 fd62 	bl	801be90 <ucdr_serialize_string>
 801a3cc:	6971      	ldr	r1, [r6, #20]
 801a3ce:	4604      	mov	r4, r0
 801a3d0:	4628      	mov	r0, r5
 801a3d2:	f001 fd5d 	bl	801be90 <ucdr_serialize_string>
 801a3d6:	f109 0901 	add.w	r9, r9, #1
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	4004      	ands	r4, r0
 801a3de:	3608      	adds	r6, #8
 801a3e0:	4599      	cmp	r9, r3
 801a3e2:	b2e4      	uxtb	r4, r4
 801a3e4:	d3ed      	bcc.n	801a3c2 <uxr_serialize_AGENT_Representation+0x56>
 801a3e6:	ea08 0804 	and.w	r8, r8, r4
 801a3ea:	4640      	mov	r0, r8
 801a3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3f0:	f04f 0800 	mov.w	r8, #0
 801a3f4:	4640      	mov	r0, r8
 801a3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3fa:	ea08 0800 	and.w	r8, r8, r0
 801a3fe:	e7d2      	b.n	801a3a6 <uxr_serialize_AGENT_Representation+0x3a>

0801a400 <uxr_serialize_DATAWRITER_Representation>:
 801a400:	b570      	push	{r4, r5, r6, lr}
 801a402:	460d      	mov	r5, r1
 801a404:	7809      	ldrb	r1, [r1, #0]
 801a406:	4606      	mov	r6, r0
 801a408:	f7f4 fb6a 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a40c:	4604      	mov	r4, r0
 801a40e:	b130      	cbz	r0, 801a41e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a410:	782b      	ldrb	r3, [r5, #0]
 801a412:	2b02      	cmp	r3, #2
 801a414:	d00c      	beq.n	801a430 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a416:	2b03      	cmp	r3, #3
 801a418:	d010      	beq.n	801a43c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a41a:	2b01      	cmp	r3, #1
 801a41c:	d008      	beq.n	801a430 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a41e:	2202      	movs	r2, #2
 801a420:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801a424:	4630      	mov	r0, r6
 801a426:	f7fd fa5f 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a42a:	4020      	ands	r0, r4
 801a42c:	b2c0      	uxtb	r0, r0
 801a42e:	bd70      	pop	{r4, r5, r6, pc}
 801a430:	6869      	ldr	r1, [r5, #4]
 801a432:	4630      	mov	r0, r6
 801a434:	f001 fd2c 	bl	801be90 <ucdr_serialize_string>
 801a438:	4604      	mov	r4, r0
 801a43a:	e7f0      	b.n	801a41e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a43c:	4629      	mov	r1, r5
 801a43e:	4630      	mov	r0, r6
 801a440:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a444:	3104      	adds	r1, #4
 801a446:	f7f7 fc1f 	bl	8011c88 <ucdr_serialize_sequence_uint8_t>
 801a44a:	4604      	mov	r4, r0
 801a44c:	e7e7      	b.n	801a41e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a44e:	bf00      	nop

0801a450 <uxr_serialize_ObjectVariant.part.0>:
 801a450:	b570      	push	{r4, r5, r6, lr}
 801a452:	780b      	ldrb	r3, [r1, #0]
 801a454:	460c      	mov	r4, r1
 801a456:	4605      	mov	r5, r0
 801a458:	3b01      	subs	r3, #1
 801a45a:	2b0d      	cmp	r3, #13
 801a45c:	d854      	bhi.n	801a508 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a45e:	e8df f003 	tbb	[pc, r3]
 801a462:	0730      	.short	0x0730
 801a464:	07071b1b 	.word	0x07071b1b
 801a468:	0c530707 	.word	0x0c530707
 801a46c:	494e0c0c 	.word	0x494e0c0c
 801a470:	3104      	adds	r1, #4
 801a472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a476:	f7ff bfc3 	b.w	801a400 <uxr_serialize_DATAWRITER_Representation>
 801a47a:	7909      	ldrb	r1, [r1, #4]
 801a47c:	f7f4 fb30 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a480:	b1e8      	cbz	r0, 801a4be <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a482:	7923      	ldrb	r3, [r4, #4]
 801a484:	2b01      	cmp	r3, #1
 801a486:	d001      	beq.n	801a48c <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a488:	2b02      	cmp	r3, #2
 801a48a:	d13d      	bne.n	801a508 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a48c:	68a1      	ldr	r1, [r4, #8]
 801a48e:	4628      	mov	r0, r5
 801a490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a494:	f001 bcfc 	b.w	801be90 <ucdr_serialize_string>
 801a498:	7909      	ldrb	r1, [r1, #4]
 801a49a:	f7f4 fb21 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a49e:	4606      	mov	r6, r0
 801a4a0:	b120      	cbz	r0, 801a4ac <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a4a2:	7923      	ldrb	r3, [r4, #4]
 801a4a4:	2b02      	cmp	r3, #2
 801a4a6:	d039      	beq.n	801a51c <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a4a8:	2b03      	cmp	r3, #3
 801a4aa:	d02f      	beq.n	801a50c <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a4ac:	2202      	movs	r2, #2
 801a4ae:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801a4b2:	4628      	mov	r0, r5
 801a4b4:	f7fd fa18 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a4b8:	4030      	ands	r0, r6
 801a4ba:	b2c0      	uxtb	r0, r0
 801a4bc:	bd70      	pop	{r4, r5, r6, pc}
 801a4be:	2000      	movs	r0, #0
 801a4c0:	bd70      	pop	{r4, r5, r6, pc}
 801a4c2:	7909      	ldrb	r1, [r1, #4]
 801a4c4:	f7f4 fb0c 	bl	800eae0 <ucdr_serialize_uint8_t>
 801a4c8:	4606      	mov	r6, r0
 801a4ca:	b158      	cbz	r0, 801a4e4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a4cc:	7923      	ldrb	r3, [r4, #4]
 801a4ce:	2b02      	cmp	r3, #2
 801a4d0:	d003      	beq.n	801a4da <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a4d2:	2b03      	cmp	r3, #3
 801a4d4:	d028      	beq.n	801a528 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a4d6:	2b01      	cmp	r3, #1
 801a4d8:	d104      	bne.n	801a4e4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a4da:	68a1      	ldr	r1, [r4, #8]
 801a4dc:	4628      	mov	r0, r5
 801a4de:	f001 fcd7 	bl	801be90 <ucdr_serialize_string>
 801a4e2:	4606      	mov	r6, r0
 801a4e4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801a4e8:	4628      	mov	r0, r5
 801a4ea:	f7f5 f835 	bl	800f558 <ucdr_serialize_int16_t>
 801a4ee:	4030      	ands	r0, r6
 801a4f0:	b2c0      	uxtb	r0, r0
 801a4f2:	bd70      	pop	{r4, r5, r6, pc}
 801a4f4:	3104      	adds	r1, #4
 801a4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4fa:	f7ff be7b 	b.w	801a1f4 <uxr_serialize_CLIENT_Representation>
 801a4fe:	3104      	adds	r1, #4
 801a500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a504:	f7ff bf32 	b.w	801a36c <uxr_serialize_AGENT_Representation>
 801a508:	2001      	movs	r0, #1
 801a50a:	bd70      	pop	{r4, r5, r6, pc}
 801a50c:	68a2      	ldr	r2, [r4, #8]
 801a50e:	f104 010c 	add.w	r1, r4, #12
 801a512:	4628      	mov	r0, r5
 801a514:	f7f7 fbb8 	bl	8011c88 <ucdr_serialize_sequence_uint8_t>
 801a518:	4606      	mov	r6, r0
 801a51a:	e7c7      	b.n	801a4ac <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a51c:	68a1      	ldr	r1, [r4, #8]
 801a51e:	4628      	mov	r0, r5
 801a520:	f001 fcb6 	bl	801be90 <ucdr_serialize_string>
 801a524:	4606      	mov	r6, r0
 801a526:	e7c1      	b.n	801a4ac <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a528:	68a2      	ldr	r2, [r4, #8]
 801a52a:	f104 010c 	add.w	r1, r4, #12
 801a52e:	4628      	mov	r0, r5
 801a530:	f7f7 fbaa 	bl	8011c88 <ucdr_serialize_sequence_uint8_t>
 801a534:	4606      	mov	r6, r0
 801a536:	e7d5      	b.n	801a4e4 <uxr_serialize_ObjectVariant.part.0+0x94>

0801a538 <uxr_deserialize_DATAWRITER_Representation>:
 801a538:	b570      	push	{r4, r5, r6, lr}
 801a53a:	4606      	mov	r6, r0
 801a53c:	460d      	mov	r5, r1
 801a53e:	f7f4 fae5 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801a542:	4604      	mov	r4, r0
 801a544:	b130      	cbz	r0, 801a554 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a546:	782b      	ldrb	r3, [r5, #0]
 801a548:	2b02      	cmp	r3, #2
 801a54a:	d00c      	beq.n	801a566 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a54c:	2b03      	cmp	r3, #3
 801a54e:	d012      	beq.n	801a576 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a550:	2b01      	cmp	r3, #1
 801a552:	d008      	beq.n	801a566 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a554:	2202      	movs	r2, #2
 801a556:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801a55a:	4630      	mov	r0, r6
 801a55c:	f7fd fa28 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801a560:	4020      	ands	r0, r4
 801a562:	b2c0      	uxtb	r0, r0
 801a564:	bd70      	pop	{r4, r5, r6, pc}
 801a566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a56a:	6869      	ldr	r1, [r5, #4]
 801a56c:	4630      	mov	r0, r6
 801a56e:	f001 fc9f 	bl	801beb0 <ucdr_deserialize_string>
 801a572:	4604      	mov	r4, r0
 801a574:	e7ee      	b.n	801a554 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a576:	1d2b      	adds	r3, r5, #4
 801a578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a57c:	f105 0108 	add.w	r1, r5, #8
 801a580:	4630      	mov	r0, r6
 801a582:	f7f7 fb93 	bl	8011cac <ucdr_deserialize_sequence_uint8_t>
 801a586:	4604      	mov	r4, r0
 801a588:	e7e4      	b.n	801a554 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a58a:	bf00      	nop

0801a58c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a58c:	b570      	push	{r4, r5, r6, lr}
 801a58e:	460d      	mov	r5, r1
 801a590:	7809      	ldrb	r1, [r1, #0]
 801a592:	4606      	mov	r6, r0
 801a594:	f7f4 fa76 	bl	800ea84 <ucdr_serialize_bool>
 801a598:	782b      	ldrb	r3, [r5, #0]
 801a59a:	4604      	mov	r4, r0
 801a59c:	b94b      	cbnz	r3, 801a5b2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a59e:	7a29      	ldrb	r1, [r5, #8]
 801a5a0:	4630      	mov	r0, r6
 801a5a2:	f7f4 fa6f 	bl	800ea84 <ucdr_serialize_bool>
 801a5a6:	7a2b      	ldrb	r3, [r5, #8]
 801a5a8:	4004      	ands	r4, r0
 801a5aa:	b2e4      	uxtb	r4, r4
 801a5ac:	b943      	cbnz	r3, 801a5c0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a5ae:	4620      	mov	r0, r4
 801a5b0:	bd70      	pop	{r4, r5, r6, pc}
 801a5b2:	6869      	ldr	r1, [r5, #4]
 801a5b4:	4630      	mov	r0, r6
 801a5b6:	f001 fc6b 	bl	801be90 <ucdr_serialize_string>
 801a5ba:	4004      	ands	r4, r0
 801a5bc:	b2e4      	uxtb	r4, r4
 801a5be:	e7ee      	b.n	801a59e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a5c0:	68e9      	ldr	r1, [r5, #12]
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	f001 fc64 	bl	801be90 <ucdr_serialize_string>
 801a5c8:	4004      	ands	r4, r0
 801a5ca:	4620      	mov	r0, r4
 801a5cc:	bd70      	pop	{r4, r5, r6, pc}
 801a5ce:	bf00      	nop

0801a5d0 <uxr_serialize_OBJK_Topic_Binary>:
 801a5d0:	b570      	push	{r4, r5, r6, lr}
 801a5d2:	460d      	mov	r5, r1
 801a5d4:	4606      	mov	r6, r0
 801a5d6:	6809      	ldr	r1, [r1, #0]
 801a5d8:	f001 fc5a 	bl	801be90 <ucdr_serialize_string>
 801a5dc:	4604      	mov	r4, r0
 801a5de:	7929      	ldrb	r1, [r5, #4]
 801a5e0:	4630      	mov	r0, r6
 801a5e2:	f7f4 fa4f 	bl	800ea84 <ucdr_serialize_bool>
 801a5e6:	792b      	ldrb	r3, [r5, #4]
 801a5e8:	4004      	ands	r4, r0
 801a5ea:	b2e4      	uxtb	r4, r4
 801a5ec:	b943      	cbnz	r3, 801a600 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a5ee:	7b29      	ldrb	r1, [r5, #12]
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f7f4 fa47 	bl	800ea84 <ucdr_serialize_bool>
 801a5f6:	7b2b      	ldrb	r3, [r5, #12]
 801a5f8:	4004      	ands	r4, r0
 801a5fa:	b93b      	cbnz	r3, 801a60c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a5fc:	4620      	mov	r0, r4
 801a5fe:	bd70      	pop	{r4, r5, r6, pc}
 801a600:	68a9      	ldr	r1, [r5, #8]
 801a602:	4630      	mov	r0, r6
 801a604:	f001 fc44 	bl	801be90 <ucdr_serialize_string>
 801a608:	4004      	ands	r4, r0
 801a60a:	e7f0      	b.n	801a5ee <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801a60c:	6929      	ldr	r1, [r5, #16]
 801a60e:	4630      	mov	r0, r6
 801a610:	f001 fc3e 	bl	801be90 <ucdr_serialize_string>
 801a614:	4004      	ands	r4, r0
 801a616:	b2e4      	uxtb	r4, r4
 801a618:	4620      	mov	r0, r4
 801a61a:	bd70      	pop	{r4, r5, r6, pc}

0801a61c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801a61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a620:	460c      	mov	r4, r1
 801a622:	7809      	ldrb	r1, [r1, #0]
 801a624:	4606      	mov	r6, r0
 801a626:	f7f4 fa2d 	bl	800ea84 <ucdr_serialize_bool>
 801a62a:	7823      	ldrb	r3, [r4, #0]
 801a62c:	4605      	mov	r5, r0
 801a62e:	b96b      	cbnz	r3, 801a64c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801a630:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801a634:	4630      	mov	r0, r6
 801a636:	f7f4 fa25 	bl	800ea84 <ucdr_serialize_bool>
 801a63a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a63e:	4005      	ands	r5, r0
 801a640:	b2ed      	uxtb	r5, r5
 801a642:	2b00      	cmp	r3, #0
 801a644:	d169      	bne.n	801a71a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801a646:	4628      	mov	r0, r5
 801a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a64c:	6861      	ldr	r1, [r4, #4]
 801a64e:	4630      	mov	r0, r6
 801a650:	f7f4 fc5c 	bl	800ef0c <ucdr_serialize_uint32_t>
 801a654:	6863      	ldr	r3, [r4, #4]
 801a656:	2b00      	cmp	r3, #0
 801a658:	d06b      	beq.n	801a732 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801a65a:	2800      	cmp	r0, #0
 801a65c:	d067      	beq.n	801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a65e:	68a1      	ldr	r1, [r4, #8]
 801a660:	4630      	mov	r0, r6
 801a662:	f001 fc15 	bl	801be90 <ucdr_serialize_string>
 801a666:	6863      	ldr	r3, [r4, #4]
 801a668:	2b01      	cmp	r3, #1
 801a66a:	d953      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a66c:	2800      	cmp	r0, #0
 801a66e:	d05e      	beq.n	801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a670:	68e1      	ldr	r1, [r4, #12]
 801a672:	4630      	mov	r0, r6
 801a674:	f001 fc0c 	bl	801be90 <ucdr_serialize_string>
 801a678:	6863      	ldr	r3, [r4, #4]
 801a67a:	2b02      	cmp	r3, #2
 801a67c:	d94a      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a67e:	2800      	cmp	r0, #0
 801a680:	d055      	beq.n	801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a682:	6921      	ldr	r1, [r4, #16]
 801a684:	4630      	mov	r0, r6
 801a686:	f001 fc03 	bl	801be90 <ucdr_serialize_string>
 801a68a:	6863      	ldr	r3, [r4, #4]
 801a68c:	2b03      	cmp	r3, #3
 801a68e:	d941      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a690:	2800      	cmp	r0, #0
 801a692:	d04c      	beq.n	801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a694:	6961      	ldr	r1, [r4, #20]
 801a696:	4630      	mov	r0, r6
 801a698:	f001 fbfa 	bl	801be90 <ucdr_serialize_string>
 801a69c:	6863      	ldr	r3, [r4, #4]
 801a69e:	2b04      	cmp	r3, #4
 801a6a0:	d938      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6a2:	2800      	cmp	r0, #0
 801a6a4:	d043      	beq.n	801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6a6:	69a1      	ldr	r1, [r4, #24]
 801a6a8:	4630      	mov	r0, r6
 801a6aa:	f001 fbf1 	bl	801be90 <ucdr_serialize_string>
 801a6ae:	6863      	ldr	r3, [r4, #4]
 801a6b0:	2b05      	cmp	r3, #5
 801a6b2:	d92f      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6b4:	2800      	cmp	r0, #0
 801a6b6:	d03a      	beq.n	801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6b8:	69e1      	ldr	r1, [r4, #28]
 801a6ba:	4630      	mov	r0, r6
 801a6bc:	f001 fbe8 	bl	801be90 <ucdr_serialize_string>
 801a6c0:	6863      	ldr	r3, [r4, #4]
 801a6c2:	2b06      	cmp	r3, #6
 801a6c4:	d926      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6c6:	b390      	cbz	r0, 801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6c8:	6a21      	ldr	r1, [r4, #32]
 801a6ca:	4630      	mov	r0, r6
 801a6cc:	f001 fbe0 	bl	801be90 <ucdr_serialize_string>
 801a6d0:	6863      	ldr	r3, [r4, #4]
 801a6d2:	2b07      	cmp	r3, #7
 801a6d4:	d91e      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6d6:	b350      	cbz	r0, 801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801a6da:	4630      	mov	r0, r6
 801a6dc:	f001 fbd8 	bl	801be90 <ucdr_serialize_string>
 801a6e0:	6863      	ldr	r3, [r4, #4]
 801a6e2:	2b08      	cmp	r3, #8
 801a6e4:	d916      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6e6:	b310      	cbz	r0, 801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6e8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801a6ea:	4630      	mov	r0, r6
 801a6ec:	f001 fbd0 	bl	801be90 <ucdr_serialize_string>
 801a6f0:	6863      	ldr	r3, [r4, #4]
 801a6f2:	2b09      	cmp	r3, #9
 801a6f4:	d90e      	bls.n	801a714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a6f6:	b1d0      	cbz	r0, 801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a6f8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801a6fc:	2709      	movs	r7, #9
 801a6fe:	e000      	b.n	801a702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a700:	b1a8      	cbz	r0, 801a72e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a702:	f858 1b04 	ldr.w	r1, [r8], #4
 801a706:	4630      	mov	r0, r6
 801a708:	f001 fbc2 	bl	801be90 <ucdr_serialize_string>
 801a70c:	3701      	adds	r7, #1
 801a70e:	6862      	ldr	r2, [r4, #4]
 801a710:	4297      	cmp	r7, r2
 801a712:	d3f5      	bcc.n	801a700 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a714:	4005      	ands	r5, r0
 801a716:	b2ed      	uxtb	r5, r5
 801a718:	e78a      	b.n	801a630 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a71a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a71c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a720:	4630      	mov	r0, r6
 801a722:	f7f7 fab1 	bl	8011c88 <ucdr_serialize_sequence_uint8_t>
 801a726:	4005      	ands	r5, r0
 801a728:	4628      	mov	r0, r5
 801a72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a72e:	2500      	movs	r5, #0
 801a730:	e77e      	b.n	801a630 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a732:	4028      	ands	r0, r5
 801a734:	b2c5      	uxtb	r5, r0
 801a736:	e77b      	b.n	801a630 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a738 <uxr_serialize_OBJK_Publisher_Binary>:
 801a738:	b570      	push	{r4, r5, r6, lr}
 801a73a:	460d      	mov	r5, r1
 801a73c:	7809      	ldrb	r1, [r1, #0]
 801a73e:	4606      	mov	r6, r0
 801a740:	f7f4 f9a0 	bl	800ea84 <ucdr_serialize_bool>
 801a744:	782b      	ldrb	r3, [r5, #0]
 801a746:	4604      	mov	r4, r0
 801a748:	b94b      	cbnz	r3, 801a75e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a74a:	7a29      	ldrb	r1, [r5, #8]
 801a74c:	4630      	mov	r0, r6
 801a74e:	f7f4 f999 	bl	800ea84 <ucdr_serialize_bool>
 801a752:	7a2b      	ldrb	r3, [r5, #8]
 801a754:	4004      	ands	r4, r0
 801a756:	b2e4      	uxtb	r4, r4
 801a758:	b943      	cbnz	r3, 801a76c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a75a:	4620      	mov	r0, r4
 801a75c:	bd70      	pop	{r4, r5, r6, pc}
 801a75e:	6869      	ldr	r1, [r5, #4]
 801a760:	4630      	mov	r0, r6
 801a762:	f001 fb95 	bl	801be90 <ucdr_serialize_string>
 801a766:	4004      	ands	r4, r0
 801a768:	b2e4      	uxtb	r4, r4
 801a76a:	e7ee      	b.n	801a74a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a76c:	f105 010c 	add.w	r1, r5, #12
 801a770:	4630      	mov	r0, r6
 801a772:	f7ff ff53 	bl	801a61c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801a776:	4004      	ands	r4, r0
 801a778:	4620      	mov	r0, r4
 801a77a:	bd70      	pop	{r4, r5, r6, pc}

0801a77c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801a77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a780:	460c      	mov	r4, r1
 801a782:	7809      	ldrb	r1, [r1, #0]
 801a784:	4606      	mov	r6, r0
 801a786:	f7f4 f97d 	bl	800ea84 <ucdr_serialize_bool>
 801a78a:	7823      	ldrb	r3, [r4, #0]
 801a78c:	4605      	mov	r5, r0
 801a78e:	b96b      	cbnz	r3, 801a7ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801a790:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801a794:	4630      	mov	r0, r6
 801a796:	f7f4 f975 	bl	800ea84 <ucdr_serialize_bool>
 801a79a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801a79e:	4005      	ands	r5, r0
 801a7a0:	b2ed      	uxtb	r5, r5
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d169      	bne.n	801a87a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801a7a6:	4628      	mov	r0, r5
 801a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7ac:	6861      	ldr	r1, [r4, #4]
 801a7ae:	4630      	mov	r0, r6
 801a7b0:	f7f4 fbac 	bl	800ef0c <ucdr_serialize_uint32_t>
 801a7b4:	6863      	ldr	r3, [r4, #4]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d06b      	beq.n	801a892 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801a7ba:	2800      	cmp	r0, #0
 801a7bc:	d067      	beq.n	801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7be:	68a1      	ldr	r1, [r4, #8]
 801a7c0:	4630      	mov	r0, r6
 801a7c2:	f001 fb65 	bl	801be90 <ucdr_serialize_string>
 801a7c6:	6863      	ldr	r3, [r4, #4]
 801a7c8:	2b01      	cmp	r3, #1
 801a7ca:	d953      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7cc:	2800      	cmp	r0, #0
 801a7ce:	d05e      	beq.n	801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7d0:	68e1      	ldr	r1, [r4, #12]
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f001 fb5c 	bl	801be90 <ucdr_serialize_string>
 801a7d8:	6863      	ldr	r3, [r4, #4]
 801a7da:	2b02      	cmp	r3, #2
 801a7dc:	d94a      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d055      	beq.n	801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7e2:	6921      	ldr	r1, [r4, #16]
 801a7e4:	4630      	mov	r0, r6
 801a7e6:	f001 fb53 	bl	801be90 <ucdr_serialize_string>
 801a7ea:	6863      	ldr	r3, [r4, #4]
 801a7ec:	2b03      	cmp	r3, #3
 801a7ee:	d941      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7f0:	2800      	cmp	r0, #0
 801a7f2:	d04c      	beq.n	801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7f4:	6961      	ldr	r1, [r4, #20]
 801a7f6:	4630      	mov	r0, r6
 801a7f8:	f001 fb4a 	bl	801be90 <ucdr_serialize_string>
 801a7fc:	6863      	ldr	r3, [r4, #4]
 801a7fe:	2b04      	cmp	r3, #4
 801a800:	d938      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a802:	2800      	cmp	r0, #0
 801a804:	d043      	beq.n	801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a806:	69a1      	ldr	r1, [r4, #24]
 801a808:	4630      	mov	r0, r6
 801a80a:	f001 fb41 	bl	801be90 <ucdr_serialize_string>
 801a80e:	6863      	ldr	r3, [r4, #4]
 801a810:	2b05      	cmp	r3, #5
 801a812:	d92f      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a814:	2800      	cmp	r0, #0
 801a816:	d03a      	beq.n	801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a818:	69e1      	ldr	r1, [r4, #28]
 801a81a:	4630      	mov	r0, r6
 801a81c:	f001 fb38 	bl	801be90 <ucdr_serialize_string>
 801a820:	6863      	ldr	r3, [r4, #4]
 801a822:	2b06      	cmp	r3, #6
 801a824:	d926      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a826:	b390      	cbz	r0, 801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a828:	6a21      	ldr	r1, [r4, #32]
 801a82a:	4630      	mov	r0, r6
 801a82c:	f001 fb30 	bl	801be90 <ucdr_serialize_string>
 801a830:	6863      	ldr	r3, [r4, #4]
 801a832:	2b07      	cmp	r3, #7
 801a834:	d91e      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a836:	b350      	cbz	r0, 801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a838:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801a83a:	4630      	mov	r0, r6
 801a83c:	f001 fb28 	bl	801be90 <ucdr_serialize_string>
 801a840:	6863      	ldr	r3, [r4, #4]
 801a842:	2b08      	cmp	r3, #8
 801a844:	d916      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a846:	b310      	cbz	r0, 801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a848:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801a84a:	4630      	mov	r0, r6
 801a84c:	f001 fb20 	bl	801be90 <ucdr_serialize_string>
 801a850:	6863      	ldr	r3, [r4, #4]
 801a852:	2b09      	cmp	r3, #9
 801a854:	d90e      	bls.n	801a874 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a856:	b1d0      	cbz	r0, 801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a858:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801a85c:	2709      	movs	r7, #9
 801a85e:	e000      	b.n	801a862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a860:	b1a8      	cbz	r0, 801a88e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a862:	f858 1b04 	ldr.w	r1, [r8], #4
 801a866:	4630      	mov	r0, r6
 801a868:	f001 fb12 	bl	801be90 <ucdr_serialize_string>
 801a86c:	3701      	adds	r7, #1
 801a86e:	6862      	ldr	r2, [r4, #4]
 801a870:	4297      	cmp	r7, r2
 801a872:	d3f5      	bcc.n	801a860 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a874:	4005      	ands	r5, r0
 801a876:	b2ed      	uxtb	r5, r5
 801a878:	e78a      	b.n	801a790 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a87a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a87c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a880:	4630      	mov	r0, r6
 801a882:	f7f7 fa01 	bl	8011c88 <ucdr_serialize_sequence_uint8_t>
 801a886:	4005      	ands	r5, r0
 801a888:	4628      	mov	r0, r5
 801a88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a88e:	2500      	movs	r5, #0
 801a890:	e77e      	b.n	801a790 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a892:	4028      	ands	r0, r5
 801a894:	b2c5      	uxtb	r5, r0
 801a896:	e77b      	b.n	801a790 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a898 <uxr_serialize_OBJK_Subscriber_Binary>:
 801a898:	b570      	push	{r4, r5, r6, lr}
 801a89a:	460d      	mov	r5, r1
 801a89c:	7809      	ldrb	r1, [r1, #0]
 801a89e:	4606      	mov	r6, r0
 801a8a0:	f7f4 f8f0 	bl	800ea84 <ucdr_serialize_bool>
 801a8a4:	782b      	ldrb	r3, [r5, #0]
 801a8a6:	4604      	mov	r4, r0
 801a8a8:	b94b      	cbnz	r3, 801a8be <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a8aa:	7a29      	ldrb	r1, [r5, #8]
 801a8ac:	4630      	mov	r0, r6
 801a8ae:	f7f4 f8e9 	bl	800ea84 <ucdr_serialize_bool>
 801a8b2:	7a2b      	ldrb	r3, [r5, #8]
 801a8b4:	4004      	ands	r4, r0
 801a8b6:	b2e4      	uxtb	r4, r4
 801a8b8:	b943      	cbnz	r3, 801a8cc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a8ba:	4620      	mov	r0, r4
 801a8bc:	bd70      	pop	{r4, r5, r6, pc}
 801a8be:	6869      	ldr	r1, [r5, #4]
 801a8c0:	4630      	mov	r0, r6
 801a8c2:	f001 fae5 	bl	801be90 <ucdr_serialize_string>
 801a8c6:	4004      	ands	r4, r0
 801a8c8:	b2e4      	uxtb	r4, r4
 801a8ca:	e7ee      	b.n	801a8aa <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a8cc:	f105 010c 	add.w	r1, r5, #12
 801a8d0:	4630      	mov	r0, r6
 801a8d2:	f7ff ff53 	bl	801a77c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a8d6:	4004      	ands	r4, r0
 801a8d8:	4620      	mov	r0, r4
 801a8da:	bd70      	pop	{r4, r5, r6, pc}

0801a8dc <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a8dc:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a8e0:	4688      	mov	r8, r1
 801a8e2:	4681      	mov	r9, r0
 801a8e4:	8809      	ldrh	r1, [r1, #0]
 801a8e6:	f7f4 f927 	bl	800eb38 <ucdr_serialize_uint16_t>
 801a8ea:	4606      	mov	r6, r0
 801a8ec:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a8f0:	4648      	mov	r0, r9
 801a8f2:	f7f4 f8c7 	bl	800ea84 <ucdr_serialize_bool>
 801a8f6:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a8fa:	4006      	ands	r6, r0
 801a8fc:	b2f5      	uxtb	r5, r6
 801a8fe:	b9eb      	cbnz	r3, 801a93c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a900:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a904:	4648      	mov	r0, r9
 801a906:	f7f4 f8bd 	bl	800ea84 <ucdr_serialize_bool>
 801a90a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a90e:	4005      	ands	r5, r0
 801a910:	bb7b      	cbnz	r3, 801a972 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a912:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a916:	4648      	mov	r0, r9
 801a918:	f7f4 f8b4 	bl	800ea84 <ucdr_serialize_bool>
 801a91c:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a920:	4005      	ands	r5, r0
 801a922:	b9f3      	cbnz	r3, 801a962 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a924:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a928:	4648      	mov	r0, r9
 801a92a:	f7f4 f8ab 	bl	800ea84 <ucdr_serialize_bool>
 801a92e:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a932:	4005      	ands	r5, r0
 801a934:	b94b      	cbnz	r3, 801a94a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a936:	4628      	mov	r0, r5
 801a938:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a93c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a940:	4648      	mov	r0, r9
 801a942:	f7f4 f8f9 	bl	800eb38 <ucdr_serialize_uint16_t>
 801a946:	4005      	ands	r5, r0
 801a948:	e7da      	b.n	801a900 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a94a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a94e:	f108 011c 	add.w	r1, r8, #28
 801a952:	4648      	mov	r0, r9
 801a954:	f7f7 f998 	bl	8011c88 <ucdr_serialize_sequence_uint8_t>
 801a958:	4028      	ands	r0, r5
 801a95a:	b2c5      	uxtb	r5, r0
 801a95c:	4628      	mov	r0, r5
 801a95e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a962:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a966:	4648      	mov	r0, r9
 801a968:	f7f4 fad0 	bl	800ef0c <ucdr_serialize_uint32_t>
 801a96c:	4028      	ands	r0, r5
 801a96e:	b2c5      	uxtb	r5, r0
 801a970:	e7d8      	b.n	801a924 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a972:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a976:	4648      	mov	r0, r9
 801a978:	f7f4 fac8 	bl	800ef0c <ucdr_serialize_uint32_t>
 801a97c:	4028      	ands	r0, r5
 801a97e:	b2c5      	uxtb	r5, r0
 801a980:	e7c7      	b.n	801a912 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a982:	bf00      	nop

0801a984 <uxr_serialize_OBJK_DataReader_Binary>:
 801a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a986:	2202      	movs	r2, #2
 801a988:	460c      	mov	r4, r1
 801a98a:	4606      	mov	r6, r0
 801a98c:	f7fc ffac 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801a990:	4605      	mov	r5, r0
 801a992:	78a1      	ldrb	r1, [r4, #2]
 801a994:	4630      	mov	r0, r6
 801a996:	f7f4 f875 	bl	800ea84 <ucdr_serialize_bool>
 801a99a:	78a3      	ldrb	r3, [r4, #2]
 801a99c:	4005      	ands	r5, r0
 801a99e:	b2ed      	uxtb	r5, r5
 801a9a0:	b90b      	cbnz	r3, 801a9a6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a9a2:	4628      	mov	r0, r5
 801a9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9a6:	f104 0108 	add.w	r1, r4, #8
 801a9aa:	4630      	mov	r0, r6
 801a9ac:	f7ff ff96 	bl	801a8dc <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a9b0:	4607      	mov	r7, r0
 801a9b2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a9b6:	4630      	mov	r0, r6
 801a9b8:	f7f4 f864 	bl	800ea84 <ucdr_serialize_bool>
 801a9bc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a9c0:	4038      	ands	r0, r7
 801a9c2:	b2c7      	uxtb	r7, r0
 801a9c4:	b95b      	cbnz	r3, 801a9de <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a9c6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801a9ca:	4630      	mov	r0, r6
 801a9cc:	f7f4 f85a 	bl	800ea84 <ucdr_serialize_bool>
 801a9d0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a9d4:	4007      	ands	r7, r0
 801a9d6:	b94b      	cbnz	r3, 801a9ec <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a9d8:	403d      	ands	r5, r7
 801a9da:	4628      	mov	r0, r5
 801a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9de:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801a9e2:	4630      	mov	r0, r6
 801a9e4:	f7f4 fce8 	bl	800f3b8 <ucdr_serialize_uint64_t>
 801a9e8:	4007      	ands	r7, r0
 801a9ea:	e7ec      	b.n	801a9c6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a9ec:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a9ee:	4630      	mov	r0, r6
 801a9f0:	f001 fa4e 	bl	801be90 <ucdr_serialize_string>
 801a9f4:	4007      	ands	r7, r0
 801a9f6:	b2ff      	uxtb	r7, r7
 801a9f8:	e7ee      	b.n	801a9d8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a9fa:	bf00      	nop

0801a9fc <uxr_serialize_OBJK_DataWriter_Binary>:
 801a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9fe:	2202      	movs	r2, #2
 801aa00:	460d      	mov	r5, r1
 801aa02:	4606      	mov	r6, r0
 801aa04:	f7fc ff70 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801aa08:	4604      	mov	r4, r0
 801aa0a:	78a9      	ldrb	r1, [r5, #2]
 801aa0c:	4630      	mov	r0, r6
 801aa0e:	f7f4 f839 	bl	800ea84 <ucdr_serialize_bool>
 801aa12:	78ab      	ldrb	r3, [r5, #2]
 801aa14:	4004      	ands	r4, r0
 801aa16:	b2e4      	uxtb	r4, r4
 801aa18:	b90b      	cbnz	r3, 801aa1e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801aa1a:	4620      	mov	r0, r4
 801aa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa1e:	f105 0108 	add.w	r1, r5, #8
 801aa22:	4630      	mov	r0, r6
 801aa24:	f7ff ff5a 	bl	801a8dc <uxr_serialize_OBJK_Endpoint_QosBinary>
 801aa28:	4607      	mov	r7, r0
 801aa2a:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801aa2e:	4630      	mov	r0, r6
 801aa30:	f7f4 f828 	bl	800ea84 <ucdr_serialize_bool>
 801aa34:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801aa38:	4038      	ands	r0, r7
 801aa3a:	b2c7      	uxtb	r7, r0
 801aa3c:	b913      	cbnz	r3, 801aa44 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801aa3e:	403c      	ands	r4, r7
 801aa40:	4620      	mov	r0, r4
 801aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa44:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801aa48:	4630      	mov	r0, r6
 801aa4a:	f7f4 fcb5 	bl	800f3b8 <ucdr_serialize_uint64_t>
 801aa4e:	4007      	ands	r7, r0
 801aa50:	e7f5      	b.n	801aa3e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801aa52:	bf00      	nop

0801aa54 <uxr_serialize_OBJK_Replier_Binary>:
 801aa54:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801aa58:	460f      	mov	r7, r1
 801aa5a:	4680      	mov	r8, r0
 801aa5c:	6809      	ldr	r1, [r1, #0]
 801aa5e:	f001 fa17 	bl	801be90 <ucdr_serialize_string>
 801aa62:	4605      	mov	r5, r0
 801aa64:	6879      	ldr	r1, [r7, #4]
 801aa66:	4640      	mov	r0, r8
 801aa68:	f001 fa12 	bl	801be90 <ucdr_serialize_string>
 801aa6c:	4005      	ands	r5, r0
 801aa6e:	68b9      	ldr	r1, [r7, #8]
 801aa70:	4640      	mov	r0, r8
 801aa72:	b2ec      	uxtb	r4, r5
 801aa74:	f001 fa0c 	bl	801be90 <ucdr_serialize_string>
 801aa78:	7b39      	ldrb	r1, [r7, #12]
 801aa7a:	4004      	ands	r4, r0
 801aa7c:	4640      	mov	r0, r8
 801aa7e:	f7f4 f801 	bl	800ea84 <ucdr_serialize_bool>
 801aa82:	7b3b      	ldrb	r3, [r7, #12]
 801aa84:	4004      	ands	r4, r0
 801aa86:	b94b      	cbnz	r3, 801aa9c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801aa88:	7d39      	ldrb	r1, [r7, #20]
 801aa8a:	4640      	mov	r0, r8
 801aa8c:	f7f3 fffa 	bl	800ea84 <ucdr_serialize_bool>
 801aa90:	7d3b      	ldrb	r3, [r7, #20]
 801aa92:	4004      	ands	r4, r0
 801aa94:	b943      	cbnz	r3, 801aaa8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801aa96:	4620      	mov	r0, r4
 801aa98:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801aa9c:	6939      	ldr	r1, [r7, #16]
 801aa9e:	4640      	mov	r0, r8
 801aaa0:	f001 f9f6 	bl	801be90 <ucdr_serialize_string>
 801aaa4:	4004      	ands	r4, r0
 801aaa6:	e7ef      	b.n	801aa88 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801aaa8:	69b9      	ldr	r1, [r7, #24]
 801aaaa:	4640      	mov	r0, r8
 801aaac:	f001 f9f0 	bl	801be90 <ucdr_serialize_string>
 801aab0:	4004      	ands	r4, r0
 801aab2:	b2e4      	uxtb	r4, r4
 801aab4:	4620      	mov	r0, r4
 801aab6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801aaba:	bf00      	nop

0801aabc <uxr_deserialize_ObjectVariant>:
 801aabc:	b570      	push	{r4, r5, r6, lr}
 801aabe:	4605      	mov	r5, r0
 801aac0:	460e      	mov	r6, r1
 801aac2:	f7f4 f823 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801aac6:	b168      	cbz	r0, 801aae4 <uxr_deserialize_ObjectVariant+0x28>
 801aac8:	7833      	ldrb	r3, [r6, #0]
 801aaca:	4604      	mov	r4, r0
 801aacc:	3b01      	subs	r3, #1
 801aace:	2b0d      	cmp	r3, #13
 801aad0:	d809      	bhi.n	801aae6 <uxr_deserialize_ObjectVariant+0x2a>
 801aad2:	e8df f003 	tbb	[pc, r3]
 801aad6:	0a41      	.short	0x0a41
 801aad8:	0a0a2323 	.word	0x0a0a2323
 801aadc:	10080a0a 	.word	0x10080a0a
 801aae0:	565c1010 	.word	0x565c1010
 801aae4:	2400      	movs	r4, #0
 801aae6:	4620      	mov	r0, r4
 801aae8:	bd70      	pop	{r4, r5, r6, pc}
 801aaea:	1d31      	adds	r1, r6, #4
 801aaec:	4628      	mov	r0, r5
 801aaee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aaf2:	f7ff bd21 	b.w	801a538 <uxr_deserialize_DATAWRITER_Representation>
 801aaf6:	1d31      	adds	r1, r6, #4
 801aaf8:	4628      	mov	r0, r5
 801aafa:	f7f4 f807 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801aafe:	2800      	cmp	r0, #0
 801ab00:	d0f0      	beq.n	801aae4 <uxr_deserialize_ObjectVariant+0x28>
 801ab02:	7933      	ldrb	r3, [r6, #4]
 801ab04:	2b01      	cmp	r3, #1
 801ab06:	d001      	beq.n	801ab0c <uxr_deserialize_ObjectVariant+0x50>
 801ab08:	2b02      	cmp	r3, #2
 801ab0a:	d1ec      	bne.n	801aae6 <uxr_deserialize_ObjectVariant+0x2a>
 801ab0c:	68b1      	ldr	r1, [r6, #8]
 801ab0e:	4628      	mov	r0, r5
 801ab10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ab14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab18:	f001 b9ca 	b.w	801beb0 <ucdr_deserialize_string>
 801ab1c:	1d31      	adds	r1, r6, #4
 801ab1e:	4628      	mov	r0, r5
 801ab20:	f7f3 fff4 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801ab24:	4604      	mov	r4, r0
 801ab26:	b170      	cbz	r0, 801ab46 <uxr_deserialize_ObjectVariant+0x8a>
 801ab28:	7933      	ldrb	r3, [r6, #4]
 801ab2a:	2b02      	cmp	r3, #2
 801ab2c:	d04c      	beq.n	801abc8 <uxr_deserialize_ObjectVariant+0x10c>
 801ab2e:	2b03      	cmp	r3, #3
 801ab30:	d109      	bne.n	801ab46 <uxr_deserialize_ObjectVariant+0x8a>
 801ab32:	f106 0308 	add.w	r3, r6, #8
 801ab36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ab3a:	f106 010c 	add.w	r1, r6, #12
 801ab3e:	4628      	mov	r0, r5
 801ab40:	f7f7 f8b4 	bl	8011cac <ucdr_deserialize_sequence_uint8_t>
 801ab44:	4604      	mov	r4, r0
 801ab46:	2202      	movs	r2, #2
 801ab48:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801ab4c:	4628      	mov	r0, r5
 801ab4e:	f7fc ff2f 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801ab52:	4020      	ands	r0, r4
 801ab54:	b2c4      	uxtb	r4, r0
 801ab56:	e7c6      	b.n	801aae6 <uxr_deserialize_ObjectVariant+0x2a>
 801ab58:	1d31      	adds	r1, r6, #4
 801ab5a:	4628      	mov	r0, r5
 801ab5c:	f7f3 ffd6 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801ab60:	4604      	mov	r4, r0
 801ab62:	b130      	cbz	r0, 801ab72 <uxr_deserialize_ObjectVariant+0xb6>
 801ab64:	7933      	ldrb	r3, [r6, #4]
 801ab66:	2b02      	cmp	r3, #2
 801ab68:	d036      	beq.n	801abd8 <uxr_deserialize_ObjectVariant+0x11c>
 801ab6a:	2b03      	cmp	r3, #3
 801ab6c:	d03c      	beq.n	801abe8 <uxr_deserialize_ObjectVariant+0x12c>
 801ab6e:	2b01      	cmp	r3, #1
 801ab70:	d032      	beq.n	801abd8 <uxr_deserialize_ObjectVariant+0x11c>
 801ab72:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801ab76:	4628      	mov	r0, r5
 801ab78:	f7f4 fd6e 	bl	800f658 <ucdr_deserialize_int16_t>
 801ab7c:	4020      	ands	r0, r4
 801ab7e:	b2c4      	uxtb	r4, r0
 801ab80:	e7b1      	b.n	801aae6 <uxr_deserialize_ObjectVariant+0x2a>
 801ab82:	1d31      	adds	r1, r6, #4
 801ab84:	4628      	mov	r0, r5
 801ab86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab8a:	f7ff bb8b 	b.w	801a2a4 <uxr_deserialize_CLIENT_Representation>
 801ab8e:	2204      	movs	r2, #4
 801ab90:	4628      	mov	r0, r5
 801ab92:	18b1      	adds	r1, r6, r2
 801ab94:	f7fc ff0c 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801ab98:	4604      	mov	r4, r0
 801ab9a:	2202      	movs	r2, #2
 801ab9c:	f106 0108 	add.w	r1, r6, #8
 801aba0:	4628      	mov	r0, r5
 801aba2:	f7fc ff05 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801aba6:	4004      	ands	r4, r0
 801aba8:	2202      	movs	r2, #2
 801abaa:	f106 010a 	add.w	r1, r6, #10
 801abae:	4628      	mov	r0, r5
 801abb0:	b2e4      	uxtb	r4, r4
 801abb2:	f7fc fefd 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801abb6:	4603      	mov	r3, r0
 801abb8:	f106 010c 	add.w	r1, r6, #12
 801abbc:	4628      	mov	r0, r5
 801abbe:	401c      	ands	r4, r3
 801abc0:	f7f3 ff76 	bl	800eab0 <ucdr_deserialize_bool>
 801abc4:	4004      	ands	r4, r0
 801abc6:	e78e      	b.n	801aae6 <uxr_deserialize_ObjectVariant+0x2a>
 801abc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801abcc:	68b1      	ldr	r1, [r6, #8]
 801abce:	4628      	mov	r0, r5
 801abd0:	f001 f96e 	bl	801beb0 <ucdr_deserialize_string>
 801abd4:	4604      	mov	r4, r0
 801abd6:	e7b6      	b.n	801ab46 <uxr_deserialize_ObjectVariant+0x8a>
 801abd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801abdc:	68b1      	ldr	r1, [r6, #8]
 801abde:	4628      	mov	r0, r5
 801abe0:	f001 f966 	bl	801beb0 <ucdr_deserialize_string>
 801abe4:	4604      	mov	r4, r0
 801abe6:	e7c4      	b.n	801ab72 <uxr_deserialize_ObjectVariant+0xb6>
 801abe8:	f106 0308 	add.w	r3, r6, #8
 801abec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801abf0:	f106 010c 	add.w	r1, r6, #12
 801abf4:	4628      	mov	r0, r5
 801abf6:	f7f7 f859 	bl	8011cac <ucdr_deserialize_sequence_uint8_t>
 801abfa:	4604      	mov	r4, r0
 801abfc:	e7b9      	b.n	801ab72 <uxr_deserialize_ObjectVariant+0xb6>
 801abfe:	bf00      	nop

0801ac00 <uxr_deserialize_BaseObjectRequest>:
 801ac00:	b570      	push	{r4, r5, r6, lr}
 801ac02:	2202      	movs	r2, #2
 801ac04:	4605      	mov	r5, r0
 801ac06:	460e      	mov	r6, r1
 801ac08:	f7fc fed2 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801ac0c:	2202      	movs	r2, #2
 801ac0e:	4604      	mov	r4, r0
 801ac10:	4628      	mov	r0, r5
 801ac12:	18b1      	adds	r1, r6, r2
 801ac14:	f7fc fecc 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801ac18:	4020      	ands	r0, r4
 801ac1a:	b2c0      	uxtb	r0, r0
 801ac1c:	bd70      	pop	{r4, r5, r6, pc}
 801ac1e:	bf00      	nop

0801ac20 <uxr_serialize_ActivityInfoVariant>:
 801ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac24:	460e      	mov	r6, r1
 801ac26:	7809      	ldrb	r1, [r1, #0]
 801ac28:	4680      	mov	r8, r0
 801ac2a:	f7f3 ff59 	bl	800eae0 <ucdr_serialize_uint8_t>
 801ac2e:	4607      	mov	r7, r0
 801ac30:	b138      	cbz	r0, 801ac42 <uxr_serialize_ActivityInfoVariant+0x22>
 801ac32:	7833      	ldrb	r3, [r6, #0]
 801ac34:	2b06      	cmp	r3, #6
 801ac36:	f000 8081 	beq.w	801ad3c <uxr_serialize_ActivityInfoVariant+0x11c>
 801ac3a:	2b0d      	cmp	r3, #13
 801ac3c:	d014      	beq.n	801ac68 <uxr_serialize_ActivityInfoVariant+0x48>
 801ac3e:	2b05      	cmp	r3, #5
 801ac40:	d002      	beq.n	801ac48 <uxr_serialize_ActivityInfoVariant+0x28>
 801ac42:	4638      	mov	r0, r7
 801ac44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac48:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ac4c:	4640      	mov	r0, r8
 801ac4e:	f7f4 fc83 	bl	800f558 <ucdr_serialize_int16_t>
 801ac52:	4607      	mov	r7, r0
 801ac54:	4640      	mov	r0, r8
 801ac56:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801ac5a:	f7f4 fbad 	bl	800f3b8 <ucdr_serialize_uint64_t>
 801ac5e:	4038      	ands	r0, r7
 801ac60:	b2c7      	uxtb	r7, r0
 801ac62:	4638      	mov	r0, r7
 801ac64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac68:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ac6c:	4640      	mov	r0, r8
 801ac6e:	f7f4 fc73 	bl	800f558 <ucdr_serialize_int16_t>
 801ac72:	68f1      	ldr	r1, [r6, #12]
 801ac74:	4607      	mov	r7, r0
 801ac76:	4640      	mov	r0, r8
 801ac78:	f7f4 f948 	bl	800ef0c <ucdr_serialize_uint32_t>
 801ac7c:	68f3      	ldr	r3, [r6, #12]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d0ed      	beq.n	801ac5e <uxr_serialize_ActivityInfoVariant+0x3e>
 801ac82:	b318      	cbz	r0, 801accc <uxr_serialize_ActivityInfoVariant+0xac>
 801ac84:	f106 090c 	add.w	r9, r6, #12
 801ac88:	2400      	movs	r4, #0
 801ac8a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801ac8e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801ac92:	7c29      	ldrb	r1, [r5, #16]
 801ac94:	4640      	mov	r0, r8
 801ac96:	f7f3 ff23 	bl	800eae0 <ucdr_serialize_uint8_t>
 801ac9a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801ac9e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801aca2:	2800      	cmp	r0, #0
 801aca4:	d051      	beq.n	801ad4a <uxr_serialize_ActivityInfoVariant+0x12a>
 801aca6:	7c2b      	ldrb	r3, [r5, #16]
 801aca8:	00c9      	lsls	r1, r1, #3
 801acaa:	2b03      	cmp	r3, #3
 801acac:	d854      	bhi.n	801ad58 <uxr_serialize_ActivityInfoVariant+0x138>
 801acae:	e8df f003 	tbb	[pc, r3]
 801acb2:	2133      	.short	0x2133
 801acb4:	020f      	.short	0x020f
 801acb6:	4449      	add	r1, r9
 801acb8:	4640      	mov	r0, r8
 801acba:	6889      	ldr	r1, [r1, #8]
 801acbc:	f001 f8e8 	bl	801be90 <ucdr_serialize_string>
 801acc0:	3401      	adds	r4, #1
 801acc2:	68f2      	ldr	r2, [r6, #12]
 801acc4:	4294      	cmp	r4, r2
 801acc6:	d244      	bcs.n	801ad52 <uxr_serialize_ActivityInfoVariant+0x132>
 801acc8:	2800      	cmp	r0, #0
 801acca:	d1de      	bne.n	801ac8a <uxr_serialize_ActivityInfoVariant+0x6a>
 801accc:	2700      	movs	r7, #0
 801acce:	e7b8      	b.n	801ac42 <uxr_serialize_ActivityInfoVariant+0x22>
 801acd0:	3108      	adds	r1, #8
 801acd2:	44a2      	add	sl, r4
 801acd4:	2210      	movs	r2, #16
 801acd6:	4640      	mov	r0, r8
 801acd8:	4449      	add	r1, r9
 801acda:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801acde:	f7fc fe03 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801ace2:	4605      	mov	r5, r0
 801ace4:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801ace8:	4640      	mov	r0, r8
 801acea:	f7f4 f90f 	bl	800ef0c <ucdr_serialize_uint32_t>
 801acee:	4028      	ands	r0, r5
 801acf0:	b2c0      	uxtb	r0, r0
 801acf2:	e7e5      	b.n	801acc0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801acf4:	3108      	adds	r1, #8
 801acf6:	44a2      	add	sl, r4
 801acf8:	2204      	movs	r2, #4
 801acfa:	4640      	mov	r0, r8
 801acfc:	4449      	add	r1, r9
 801acfe:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ad02:	f7fc fdf1 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801ad06:	4605      	mov	r5, r0
 801ad08:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801ad0c:	4640      	mov	r0, r8
 801ad0e:	f7f3 ff13 	bl	800eb38 <ucdr_serialize_uint16_t>
 801ad12:	4028      	ands	r0, r5
 801ad14:	b2c0      	uxtb	r0, r0
 801ad16:	e7d3      	b.n	801acc0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ad18:	3108      	adds	r1, #8
 801ad1a:	44a2      	add	sl, r4
 801ad1c:	2202      	movs	r2, #2
 801ad1e:	4640      	mov	r0, r8
 801ad20:	4449      	add	r1, r9
 801ad22:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ad26:	f7fc fddf 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801ad2a:	4605      	mov	r5, r0
 801ad2c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801ad30:	4640      	mov	r0, r8
 801ad32:	f7f3 fed5 	bl	800eae0 <ucdr_serialize_uint8_t>
 801ad36:	4028      	ands	r0, r5
 801ad38:	b2c0      	uxtb	r0, r0
 801ad3a:	e7c1      	b.n	801acc0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ad3c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ad40:	4640      	mov	r0, r8
 801ad42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad46:	f7f4 bc07 	b.w	800f558 <ucdr_serialize_int16_t>
 801ad4a:	3401      	adds	r4, #1
 801ad4c:	68f2      	ldr	r2, [r6, #12]
 801ad4e:	42a2      	cmp	r2, r4
 801ad50:	d8bc      	bhi.n	801accc <uxr_serialize_ActivityInfoVariant+0xac>
 801ad52:	4007      	ands	r7, r0
 801ad54:	b2ff      	uxtb	r7, r7
 801ad56:	e774      	b.n	801ac42 <uxr_serialize_ActivityInfoVariant+0x22>
 801ad58:	3401      	adds	r4, #1
 801ad5a:	68f3      	ldr	r3, [r6, #12]
 801ad5c:	3518      	adds	r5, #24
 801ad5e:	429c      	cmp	r4, r3
 801ad60:	d397      	bcc.n	801ac92 <uxr_serialize_ActivityInfoVariant+0x72>
 801ad62:	e76e      	b.n	801ac42 <uxr_serialize_ActivityInfoVariant+0x22>

0801ad64 <uxr_deserialize_BaseObjectReply>:
 801ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad68:	2202      	movs	r2, #2
 801ad6a:	4606      	mov	r6, r0
 801ad6c:	460f      	mov	r7, r1
 801ad6e:	f7fc fe1f 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801ad72:	2202      	movs	r2, #2
 801ad74:	4605      	mov	r5, r0
 801ad76:	4630      	mov	r0, r6
 801ad78:	18b9      	adds	r1, r7, r2
 801ad7a:	f7fc fe19 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801ad7e:	4680      	mov	r8, r0
 801ad80:	1d39      	adds	r1, r7, #4
 801ad82:	4630      	mov	r0, r6
 801ad84:	f7f3 fec2 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801ad88:	ea05 0508 	and.w	r5, r5, r8
 801ad8c:	4604      	mov	r4, r0
 801ad8e:	1d79      	adds	r1, r7, #5
 801ad90:	4630      	mov	r0, r6
 801ad92:	402c      	ands	r4, r5
 801ad94:	f7f3 feba 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801ad98:	4020      	ands	r0, r4
 801ad9a:	b2c0      	uxtb	r0, r0
 801ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ada0 <uxr_serialize_ReadSpecification>:
 801ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ada2:	460e      	mov	r6, r1
 801ada4:	4607      	mov	r7, r0
 801ada6:	7809      	ldrb	r1, [r1, #0]
 801ada8:	f7f3 fe9a 	bl	800eae0 <ucdr_serialize_uint8_t>
 801adac:	4604      	mov	r4, r0
 801adae:	7871      	ldrb	r1, [r6, #1]
 801adb0:	4638      	mov	r0, r7
 801adb2:	f7f3 fe95 	bl	800eae0 <ucdr_serialize_uint8_t>
 801adb6:	4004      	ands	r4, r0
 801adb8:	78b1      	ldrb	r1, [r6, #2]
 801adba:	4638      	mov	r0, r7
 801adbc:	f7f3 fe62 	bl	800ea84 <ucdr_serialize_bool>
 801adc0:	78b3      	ldrb	r3, [r6, #2]
 801adc2:	b2e4      	uxtb	r4, r4
 801adc4:	4004      	ands	r4, r0
 801adc6:	b943      	cbnz	r3, 801adda <uxr_serialize_ReadSpecification+0x3a>
 801adc8:	7a31      	ldrb	r1, [r6, #8]
 801adca:	4638      	mov	r0, r7
 801adcc:	f7f3 fe5a 	bl	800ea84 <ucdr_serialize_bool>
 801add0:	7a33      	ldrb	r3, [r6, #8]
 801add2:	4004      	ands	r4, r0
 801add4:	b93b      	cbnz	r3, 801ade6 <uxr_serialize_ReadSpecification+0x46>
 801add6:	4620      	mov	r0, r4
 801add8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adda:	6871      	ldr	r1, [r6, #4]
 801addc:	4638      	mov	r0, r7
 801adde:	f001 f857 	bl	801be90 <ucdr_serialize_string>
 801ade2:	4004      	ands	r4, r0
 801ade4:	e7f0      	b.n	801adc8 <uxr_serialize_ReadSpecification+0x28>
 801ade6:	8971      	ldrh	r1, [r6, #10]
 801ade8:	4638      	mov	r0, r7
 801adea:	f7f3 fea5 	bl	800eb38 <ucdr_serialize_uint16_t>
 801adee:	4605      	mov	r5, r0
 801adf0:	89b1      	ldrh	r1, [r6, #12]
 801adf2:	4638      	mov	r0, r7
 801adf4:	f7f3 fea0 	bl	800eb38 <ucdr_serialize_uint16_t>
 801adf8:	4005      	ands	r5, r0
 801adfa:	89f1      	ldrh	r1, [r6, #14]
 801adfc:	4638      	mov	r0, r7
 801adfe:	b2ed      	uxtb	r5, r5
 801ae00:	f7f3 fe9a 	bl	800eb38 <ucdr_serialize_uint16_t>
 801ae04:	8a31      	ldrh	r1, [r6, #16]
 801ae06:	4025      	ands	r5, r4
 801ae08:	4604      	mov	r4, r0
 801ae0a:	4638      	mov	r0, r7
 801ae0c:	4025      	ands	r5, r4
 801ae0e:	f7f3 fe93 	bl	800eb38 <ucdr_serialize_uint16_t>
 801ae12:	ea00 0405 	and.w	r4, r0, r5
 801ae16:	4620      	mov	r0, r4
 801ae18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae1a:	bf00      	nop

0801ae1c <uxr_serialize_CREATE_CLIENT_Payload>:
 801ae1c:	f7ff b9ea 	b.w	801a1f4 <uxr_serialize_CLIENT_Representation>

0801ae20 <uxr_serialize_CREATE_Payload>:
 801ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae22:	2202      	movs	r2, #2
 801ae24:	4607      	mov	r7, r0
 801ae26:	460e      	mov	r6, r1
 801ae28:	f7fc fd5e 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801ae2c:	2202      	movs	r2, #2
 801ae2e:	4605      	mov	r5, r0
 801ae30:	4638      	mov	r0, r7
 801ae32:	18b1      	adds	r1, r6, r2
 801ae34:	f7fc fd58 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801ae38:	7931      	ldrb	r1, [r6, #4]
 801ae3a:	4604      	mov	r4, r0
 801ae3c:	4638      	mov	r0, r7
 801ae3e:	f7f3 fe4f 	bl	800eae0 <ucdr_serialize_uint8_t>
 801ae42:	b170      	cbz	r0, 801ae62 <uxr_serialize_CREATE_Payload+0x42>
 801ae44:	7933      	ldrb	r3, [r6, #4]
 801ae46:	402c      	ands	r4, r5
 801ae48:	3b01      	subs	r3, #1
 801ae4a:	b2e4      	uxtb	r4, r4
 801ae4c:	2b0d      	cmp	r3, #13
 801ae4e:	d809      	bhi.n	801ae64 <uxr_serialize_CREATE_Payload+0x44>
 801ae50:	e8df f003 	tbb	[pc, r3]
 801ae54:	23230a4c 	.word	0x23230a4c
 801ae58:	0a0a0a0a 	.word	0x0a0a0a0a
 801ae5c:	12121208 	.word	0x12121208
 801ae60:	3e45      	.short	0x3e45
 801ae62:	2400      	movs	r4, #0
 801ae64:	4620      	mov	r0, r4
 801ae66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae68:	f106 0108 	add.w	r1, r6, #8
 801ae6c:	4638      	mov	r0, r7
 801ae6e:	f7ff fac7 	bl	801a400 <uxr_serialize_DATAWRITER_Representation>
 801ae72:	4004      	ands	r4, r0
 801ae74:	4620      	mov	r0, r4
 801ae76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae78:	7a31      	ldrb	r1, [r6, #8]
 801ae7a:	4638      	mov	r0, r7
 801ae7c:	f7f3 fe30 	bl	800eae0 <ucdr_serialize_uint8_t>
 801ae80:	2800      	cmp	r0, #0
 801ae82:	d0ee      	beq.n	801ae62 <uxr_serialize_CREATE_Payload+0x42>
 801ae84:	7a33      	ldrb	r3, [r6, #8]
 801ae86:	2b01      	cmp	r3, #1
 801ae88:	d001      	beq.n	801ae8e <uxr_serialize_CREATE_Payload+0x6e>
 801ae8a:	2b02      	cmp	r3, #2
 801ae8c:	d1ea      	bne.n	801ae64 <uxr_serialize_CREATE_Payload+0x44>
 801ae8e:	68f1      	ldr	r1, [r6, #12]
 801ae90:	4638      	mov	r0, r7
 801ae92:	f000 fffd 	bl	801be90 <ucdr_serialize_string>
 801ae96:	4004      	ands	r4, r0
 801ae98:	e7e4      	b.n	801ae64 <uxr_serialize_CREATE_Payload+0x44>
 801ae9a:	7a31      	ldrb	r1, [r6, #8]
 801ae9c:	4638      	mov	r0, r7
 801ae9e:	f7f3 fe1f 	bl	800eae0 <ucdr_serialize_uint8_t>
 801aea2:	4605      	mov	r5, r0
 801aea4:	b158      	cbz	r0, 801aebe <uxr_serialize_CREATE_Payload+0x9e>
 801aea6:	7a33      	ldrb	r3, [r6, #8]
 801aea8:	2b02      	cmp	r3, #2
 801aeaa:	d034      	beq.n	801af16 <uxr_serialize_CREATE_Payload+0xf6>
 801aeac:	2b03      	cmp	r3, #3
 801aeae:	d106      	bne.n	801aebe <uxr_serialize_CREATE_Payload+0x9e>
 801aeb0:	68f2      	ldr	r2, [r6, #12]
 801aeb2:	f106 0110 	add.w	r1, r6, #16
 801aeb6:	4638      	mov	r0, r7
 801aeb8:	f7f6 fee6 	bl	8011c88 <ucdr_serialize_sequence_uint8_t>
 801aebc:	4605      	mov	r5, r0
 801aebe:	2202      	movs	r2, #2
 801aec0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801aec4:	4638      	mov	r0, r7
 801aec6:	f7fc fd0f 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801aeca:	4028      	ands	r0, r5
 801aecc:	4004      	ands	r4, r0
 801aece:	e7c9      	b.n	801ae64 <uxr_serialize_CREATE_Payload+0x44>
 801aed0:	f106 0108 	add.w	r1, r6, #8
 801aed4:	4638      	mov	r0, r7
 801aed6:	f7ff f98d 	bl	801a1f4 <uxr_serialize_CLIENT_Representation>
 801aeda:	4004      	ands	r4, r0
 801aedc:	e7c2      	b.n	801ae64 <uxr_serialize_CREATE_Payload+0x44>
 801aede:	f106 0108 	add.w	r1, r6, #8
 801aee2:	4638      	mov	r0, r7
 801aee4:	f7ff fa42 	bl	801a36c <uxr_serialize_AGENT_Representation>
 801aee8:	4004      	ands	r4, r0
 801aeea:	e7bb      	b.n	801ae64 <uxr_serialize_CREATE_Payload+0x44>
 801aeec:	7a31      	ldrb	r1, [r6, #8]
 801aeee:	4638      	mov	r0, r7
 801aef0:	f7f3 fdf6 	bl	800eae0 <ucdr_serialize_uint8_t>
 801aef4:	4605      	mov	r5, r0
 801aef6:	b130      	cbz	r0, 801af06 <uxr_serialize_CREATE_Payload+0xe6>
 801aef8:	7a33      	ldrb	r3, [r6, #8]
 801aefa:	2b02      	cmp	r3, #2
 801aefc:	d011      	beq.n	801af22 <uxr_serialize_CREATE_Payload+0x102>
 801aefe:	2b03      	cmp	r3, #3
 801af00:	d015      	beq.n	801af2e <uxr_serialize_CREATE_Payload+0x10e>
 801af02:	2b01      	cmp	r3, #1
 801af04:	d00d      	beq.n	801af22 <uxr_serialize_CREATE_Payload+0x102>
 801af06:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801af0a:	4638      	mov	r0, r7
 801af0c:	f7f4 fb24 	bl	800f558 <ucdr_serialize_int16_t>
 801af10:	4028      	ands	r0, r5
 801af12:	4004      	ands	r4, r0
 801af14:	e7a6      	b.n	801ae64 <uxr_serialize_CREATE_Payload+0x44>
 801af16:	68f1      	ldr	r1, [r6, #12]
 801af18:	4638      	mov	r0, r7
 801af1a:	f000 ffb9 	bl	801be90 <ucdr_serialize_string>
 801af1e:	4605      	mov	r5, r0
 801af20:	e7cd      	b.n	801aebe <uxr_serialize_CREATE_Payload+0x9e>
 801af22:	68f1      	ldr	r1, [r6, #12]
 801af24:	4638      	mov	r0, r7
 801af26:	f000 ffb3 	bl	801be90 <ucdr_serialize_string>
 801af2a:	4605      	mov	r5, r0
 801af2c:	e7eb      	b.n	801af06 <uxr_serialize_CREATE_Payload+0xe6>
 801af2e:	68f2      	ldr	r2, [r6, #12]
 801af30:	f106 0110 	add.w	r1, r6, #16
 801af34:	4638      	mov	r0, r7
 801af36:	f7f6 fea7 	bl	8011c88 <ucdr_serialize_sequence_uint8_t>
 801af3a:	4605      	mov	r5, r0
 801af3c:	e7e3      	b.n	801af06 <uxr_serialize_CREATE_Payload+0xe6>
 801af3e:	bf00      	nop

0801af40 <uxr_deserialize_GET_INFO_Payload>:
 801af40:	b570      	push	{r4, r5, r6, lr}
 801af42:	2202      	movs	r2, #2
 801af44:	4605      	mov	r5, r0
 801af46:	460e      	mov	r6, r1
 801af48:	f7fc fd32 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801af4c:	2202      	movs	r2, #2
 801af4e:	4604      	mov	r4, r0
 801af50:	4628      	mov	r0, r5
 801af52:	18b1      	adds	r1, r6, r2
 801af54:	f7fc fd2c 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801af58:	4603      	mov	r3, r0
 801af5a:	1d31      	adds	r1, r6, #4
 801af5c:	4628      	mov	r0, r5
 801af5e:	401c      	ands	r4, r3
 801af60:	f7f4 f904 	bl	800f16c <ucdr_deserialize_uint32_t>
 801af64:	b2e4      	uxtb	r4, r4
 801af66:	4020      	ands	r0, r4
 801af68:	bd70      	pop	{r4, r5, r6, pc}
 801af6a:	bf00      	nop

0801af6c <uxr_serialize_DELETE_Payload>:
 801af6c:	b570      	push	{r4, r5, r6, lr}
 801af6e:	2202      	movs	r2, #2
 801af70:	4605      	mov	r5, r0
 801af72:	460e      	mov	r6, r1
 801af74:	f7fc fcb8 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801af78:	2202      	movs	r2, #2
 801af7a:	4604      	mov	r4, r0
 801af7c:	4628      	mov	r0, r5
 801af7e:	18b1      	adds	r1, r6, r2
 801af80:	f7fc fcb2 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801af84:	4020      	ands	r0, r4
 801af86:	b2c0      	uxtb	r0, r0
 801af88:	bd70      	pop	{r4, r5, r6, pc}
 801af8a:	bf00      	nop

0801af8c <uxr_deserialize_STATUS_AGENT_Payload>:
 801af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af90:	460e      	mov	r6, r1
 801af92:	4605      	mov	r5, r0
 801af94:	f7f3 fdba 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801af98:	4604      	mov	r4, r0
 801af9a:	1c71      	adds	r1, r6, #1
 801af9c:	4628      	mov	r0, r5
 801af9e:	f7f3 fdb5 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801afa2:	2204      	movs	r2, #4
 801afa4:	4681      	mov	r9, r0
 801afa6:	4628      	mov	r0, r5
 801afa8:	18b1      	adds	r1, r6, r2
 801afaa:	f7fc fd01 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801afae:	f106 0108 	add.w	r1, r6, #8
 801afb2:	4680      	mov	r8, r0
 801afb4:	2202      	movs	r2, #2
 801afb6:	4628      	mov	r0, r5
 801afb8:	f7fc fcfa 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801afbc:	ea04 0309 	and.w	r3, r4, r9
 801afc0:	4607      	mov	r7, r0
 801afc2:	2202      	movs	r2, #2
 801afc4:	b2db      	uxtb	r3, r3
 801afc6:	f106 010a 	add.w	r1, r6, #10
 801afca:	4628      	mov	r0, r5
 801afcc:	ea03 0408 	and.w	r4, r3, r8
 801afd0:	f7fc fcee 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801afd4:	4603      	mov	r3, r0
 801afd6:	4628      	mov	r0, r5
 801afd8:	403c      	ands	r4, r7
 801afda:	f106 010c 	add.w	r1, r6, #12
 801afde:	461d      	mov	r5, r3
 801afe0:	f7f3 fd66 	bl	800eab0 <ucdr_deserialize_bool>
 801afe4:	4025      	ands	r5, r4
 801afe6:	4028      	ands	r0, r5
 801afe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801afec <uxr_deserialize_STATUS_Payload>:
 801afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aff0:	2202      	movs	r2, #2
 801aff2:	4606      	mov	r6, r0
 801aff4:	460f      	mov	r7, r1
 801aff6:	f7fc fcdb 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801affa:	2202      	movs	r2, #2
 801affc:	4605      	mov	r5, r0
 801affe:	4630      	mov	r0, r6
 801b000:	18b9      	adds	r1, r7, r2
 801b002:	f7fc fcd5 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801b006:	4680      	mov	r8, r0
 801b008:	1d39      	adds	r1, r7, #4
 801b00a:	4630      	mov	r0, r6
 801b00c:	f7f3 fd7e 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801b010:	ea05 0508 	and.w	r5, r5, r8
 801b014:	4604      	mov	r4, r0
 801b016:	1d79      	adds	r1, r7, #5
 801b018:	4630      	mov	r0, r6
 801b01a:	402c      	ands	r4, r5
 801b01c:	f7f3 fd76 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801b020:	4020      	ands	r0, r4
 801b022:	b2c0      	uxtb	r0, r0
 801b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b028 <uxr_serialize_INFO_Payload>:
 801b028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b02c:	2202      	movs	r2, #2
 801b02e:	460c      	mov	r4, r1
 801b030:	4605      	mov	r5, r0
 801b032:	f7fc fc59 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b036:	2202      	movs	r2, #2
 801b038:	4680      	mov	r8, r0
 801b03a:	4628      	mov	r0, r5
 801b03c:	18a1      	adds	r1, r4, r2
 801b03e:	f7fc fc53 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b042:	4607      	mov	r7, r0
 801b044:	7921      	ldrb	r1, [r4, #4]
 801b046:	4628      	mov	r0, r5
 801b048:	f7f3 fd4a 	bl	800eae0 <ucdr_serialize_uint8_t>
 801b04c:	ea08 0807 	and.w	r8, r8, r7
 801b050:	4606      	mov	r6, r0
 801b052:	7961      	ldrb	r1, [r4, #5]
 801b054:	4628      	mov	r0, r5
 801b056:	ea06 0608 	and.w	r6, r6, r8
 801b05a:	f7f3 fd41 	bl	800eae0 <ucdr_serialize_uint8_t>
 801b05e:	7a21      	ldrb	r1, [r4, #8]
 801b060:	4030      	ands	r0, r6
 801b062:	b2c7      	uxtb	r7, r0
 801b064:	4628      	mov	r0, r5
 801b066:	f7f3 fd0d 	bl	800ea84 <ucdr_serialize_bool>
 801b06a:	7a23      	ldrb	r3, [r4, #8]
 801b06c:	4606      	mov	r6, r0
 801b06e:	b96b      	cbnz	r3, 801b08c <uxr_serialize_INFO_Payload+0x64>
 801b070:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801b074:	4628      	mov	r0, r5
 801b076:	f7f3 fd05 	bl	800ea84 <ucdr_serialize_bool>
 801b07a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801b07e:	4030      	ands	r0, r6
 801b080:	b2c6      	uxtb	r6, r0
 801b082:	b983      	cbnz	r3, 801b0a6 <uxr_serialize_INFO_Payload+0x7e>
 801b084:	ea06 0007 	and.w	r0, r6, r7
 801b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b08c:	7b21      	ldrb	r1, [r4, #12]
 801b08e:	4628      	mov	r0, r5
 801b090:	f7f3 fd26 	bl	800eae0 <ucdr_serialize_uint8_t>
 801b094:	b188      	cbz	r0, 801b0ba <uxr_serialize_INFO_Payload+0x92>
 801b096:	f104 010c 	add.w	r1, r4, #12
 801b09a:	4628      	mov	r0, r5
 801b09c:	f7ff f9d8 	bl	801a450 <uxr_serialize_ObjectVariant.part.0>
 801b0a0:	4030      	ands	r0, r6
 801b0a2:	b2c6      	uxtb	r6, r0
 801b0a4:	e7e4      	b.n	801b070 <uxr_serialize_INFO_Payload+0x48>
 801b0a6:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801b0aa:	4628      	mov	r0, r5
 801b0ac:	f7ff fdb8 	bl	801ac20 <uxr_serialize_ActivityInfoVariant>
 801b0b0:	4006      	ands	r6, r0
 801b0b2:	ea06 0007 	and.w	r0, r6, r7
 801b0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	e7d8      	b.n	801b070 <uxr_serialize_INFO_Payload+0x48>
 801b0be:	bf00      	nop

0801b0c0 <uxr_serialize_READ_DATA_Payload>:
 801b0c0:	b570      	push	{r4, r5, r6, lr}
 801b0c2:	2202      	movs	r2, #2
 801b0c4:	4605      	mov	r5, r0
 801b0c6:	460e      	mov	r6, r1
 801b0c8:	f7fc fc0e 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b0cc:	2202      	movs	r2, #2
 801b0ce:	4604      	mov	r4, r0
 801b0d0:	4628      	mov	r0, r5
 801b0d2:	18b1      	adds	r1, r6, r2
 801b0d4:	f7fc fc08 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b0d8:	4603      	mov	r3, r0
 801b0da:	1d31      	adds	r1, r6, #4
 801b0dc:	4628      	mov	r0, r5
 801b0de:	401c      	ands	r4, r3
 801b0e0:	f7ff fe5e 	bl	801ada0 <uxr_serialize_ReadSpecification>
 801b0e4:	b2e4      	uxtb	r4, r4
 801b0e6:	4020      	ands	r0, r4
 801b0e8:	bd70      	pop	{r4, r5, r6, pc}
 801b0ea:	bf00      	nop

0801b0ec <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b0ec:	b570      	push	{r4, r5, r6, lr}
 801b0ee:	2202      	movs	r2, #2
 801b0f0:	4605      	mov	r5, r0
 801b0f2:	460e      	mov	r6, r1
 801b0f4:	f7fc fbf8 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b0f8:	2202      	movs	r2, #2
 801b0fa:	4604      	mov	r4, r0
 801b0fc:	4628      	mov	r0, r5
 801b0fe:	18b1      	adds	r1, r6, r2
 801b100:	f7fc fbf2 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b104:	4020      	ands	r0, r4
 801b106:	b2c0      	uxtb	r0, r0
 801b108:	bd70      	pop	{r4, r5, r6, pc}
 801b10a:	bf00      	nop

0801b10c <uxr_serialize_ACKNACK_Payload>:
 801b10c:	b570      	push	{r4, r5, r6, lr}
 801b10e:	460c      	mov	r4, r1
 801b110:	4605      	mov	r5, r0
 801b112:	460e      	mov	r6, r1
 801b114:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b118:	f7f3 fd0e 	bl	800eb38 <ucdr_serialize_uint16_t>
 801b11c:	2202      	movs	r2, #2
 801b11e:	4621      	mov	r1, r4
 801b120:	4604      	mov	r4, r0
 801b122:	4628      	mov	r0, r5
 801b124:	f7fc fbe0 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b128:	4603      	mov	r3, r0
 801b12a:	7931      	ldrb	r1, [r6, #4]
 801b12c:	4628      	mov	r0, r5
 801b12e:	401c      	ands	r4, r3
 801b130:	f7f3 fcd6 	bl	800eae0 <ucdr_serialize_uint8_t>
 801b134:	b2e4      	uxtb	r4, r4
 801b136:	4020      	ands	r0, r4
 801b138:	bd70      	pop	{r4, r5, r6, pc}
 801b13a:	bf00      	nop

0801b13c <uxr_deserialize_ACKNACK_Payload>:
 801b13c:	b570      	push	{r4, r5, r6, lr}
 801b13e:	460e      	mov	r6, r1
 801b140:	4605      	mov	r5, r0
 801b142:	f7f3 fdf9 	bl	800ed38 <ucdr_deserialize_uint16_t>
 801b146:	2202      	movs	r2, #2
 801b148:	4604      	mov	r4, r0
 801b14a:	4628      	mov	r0, r5
 801b14c:	18b1      	adds	r1, r6, r2
 801b14e:	f7fc fc2f 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801b152:	4603      	mov	r3, r0
 801b154:	1d31      	adds	r1, r6, #4
 801b156:	4628      	mov	r0, r5
 801b158:	401c      	ands	r4, r3
 801b15a:	f7f3 fcd7 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801b15e:	b2e4      	uxtb	r4, r4
 801b160:	4020      	ands	r0, r4
 801b162:	bd70      	pop	{r4, r5, r6, pc}

0801b164 <uxr_serialize_HEARTBEAT_Payload>:
 801b164:	b570      	push	{r4, r5, r6, lr}
 801b166:	460d      	mov	r5, r1
 801b168:	4606      	mov	r6, r0
 801b16a:	8809      	ldrh	r1, [r1, #0]
 801b16c:	f7f3 fce4 	bl	800eb38 <ucdr_serialize_uint16_t>
 801b170:	8869      	ldrh	r1, [r5, #2]
 801b172:	4604      	mov	r4, r0
 801b174:	4630      	mov	r0, r6
 801b176:	f7f3 fcdf 	bl	800eb38 <ucdr_serialize_uint16_t>
 801b17a:	4603      	mov	r3, r0
 801b17c:	7929      	ldrb	r1, [r5, #4]
 801b17e:	4630      	mov	r0, r6
 801b180:	401c      	ands	r4, r3
 801b182:	f7f3 fcad 	bl	800eae0 <ucdr_serialize_uint8_t>
 801b186:	b2e4      	uxtb	r4, r4
 801b188:	4020      	ands	r0, r4
 801b18a:	bd70      	pop	{r4, r5, r6, pc}

0801b18c <uxr_deserialize_HEARTBEAT_Payload>:
 801b18c:	b570      	push	{r4, r5, r6, lr}
 801b18e:	460e      	mov	r6, r1
 801b190:	4605      	mov	r5, r0
 801b192:	f7f3 fdd1 	bl	800ed38 <ucdr_deserialize_uint16_t>
 801b196:	4604      	mov	r4, r0
 801b198:	1cb1      	adds	r1, r6, #2
 801b19a:	4628      	mov	r0, r5
 801b19c:	f7f3 fdcc 	bl	800ed38 <ucdr_deserialize_uint16_t>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	1d31      	adds	r1, r6, #4
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	401c      	ands	r4, r3
 801b1a8:	f7f3 fcb0 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801b1ac:	b2e4      	uxtb	r4, r4
 801b1ae:	4020      	ands	r0, r4
 801b1b0:	bd70      	pop	{r4, r5, r6, pc}
 801b1b2:	bf00      	nop

0801b1b4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1b8:	460e      	mov	r6, r1
 801b1ba:	4605      	mov	r5, r0
 801b1bc:	f7f4 fb58 	bl	800f870 <ucdr_deserialize_int32_t>
 801b1c0:	4607      	mov	r7, r0
 801b1c2:	1d31      	adds	r1, r6, #4
 801b1c4:	4628      	mov	r0, r5
 801b1c6:	f7f3 ffd1 	bl	800f16c <ucdr_deserialize_uint32_t>
 801b1ca:	4680      	mov	r8, r0
 801b1cc:	f106 0108 	add.w	r1, r6, #8
 801b1d0:	4628      	mov	r0, r5
 801b1d2:	f7f4 fb4d 	bl	800f870 <ucdr_deserialize_int32_t>
 801b1d6:	ea07 0708 	and.w	r7, r7, r8
 801b1da:	4604      	mov	r4, r0
 801b1dc:	f106 010c 	add.w	r1, r6, #12
 801b1e0:	4628      	mov	r0, r5
 801b1e2:	403c      	ands	r4, r7
 801b1e4:	f7f3 ffc2 	bl	800f16c <ucdr_deserialize_uint32_t>
 801b1e8:	f106 0110 	add.w	r1, r6, #16
 801b1ec:	4004      	ands	r4, r0
 801b1ee:	4628      	mov	r0, r5
 801b1f0:	f7f4 fb3e 	bl	800f870 <ucdr_deserialize_int32_t>
 801b1f4:	4603      	mov	r3, r0
 801b1f6:	b2e4      	uxtb	r4, r4
 801b1f8:	4628      	mov	r0, r5
 801b1fa:	461d      	mov	r5, r3
 801b1fc:	f106 0114 	add.w	r1, r6, #20
 801b200:	f7f3 ffb4 	bl	800f16c <ucdr_deserialize_uint32_t>
 801b204:	402c      	ands	r4, r5
 801b206:	4020      	ands	r0, r4
 801b208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b20c <uxr_serialize_SampleIdentity>:
 801b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b210:	4604      	mov	r4, r0
 801b212:	460d      	mov	r5, r1
 801b214:	220c      	movs	r2, #12
 801b216:	f7fc fb67 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b21a:	2203      	movs	r2, #3
 801b21c:	f105 010c 	add.w	r1, r5, #12
 801b220:	4607      	mov	r7, r0
 801b222:	4620      	mov	r0, r4
 801b224:	f7fc fb60 	bl	80178e8 <ucdr_serialize_array_uint8_t>
 801b228:	7be9      	ldrb	r1, [r5, #15]
 801b22a:	4680      	mov	r8, r0
 801b22c:	4620      	mov	r0, r4
 801b22e:	f7f3 fc57 	bl	800eae0 <ucdr_serialize_uint8_t>
 801b232:	6929      	ldr	r1, [r5, #16]
 801b234:	4606      	mov	r6, r0
 801b236:	4620      	mov	r0, r4
 801b238:	f7f4 fa82 	bl	800f740 <ucdr_serialize_int32_t>
 801b23c:	ea07 0708 	and.w	r7, r7, r8
 801b240:	4603      	mov	r3, r0
 801b242:	4620      	mov	r0, r4
 801b244:	403e      	ands	r6, r7
 801b246:	6969      	ldr	r1, [r5, #20]
 801b248:	461c      	mov	r4, r3
 801b24a:	f7f3 fe5f 	bl	800ef0c <ucdr_serialize_uint32_t>
 801b24e:	4034      	ands	r4, r6
 801b250:	4020      	ands	r0, r4
 801b252:	b2c0      	uxtb	r0, r0
 801b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b258 <uxr_deserialize_SampleIdentity>:
 801b258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b25c:	4604      	mov	r4, r0
 801b25e:	460d      	mov	r5, r1
 801b260:	220c      	movs	r2, #12
 801b262:	f7fc fba5 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801b266:	2203      	movs	r2, #3
 801b268:	f105 010c 	add.w	r1, r5, #12
 801b26c:	4607      	mov	r7, r0
 801b26e:	4620      	mov	r0, r4
 801b270:	f7fc fb9e 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801b274:	f105 010f 	add.w	r1, r5, #15
 801b278:	4680      	mov	r8, r0
 801b27a:	4620      	mov	r0, r4
 801b27c:	f7f3 fc46 	bl	800eb0c <ucdr_deserialize_uint8_t>
 801b280:	f105 0110 	add.w	r1, r5, #16
 801b284:	4606      	mov	r6, r0
 801b286:	4620      	mov	r0, r4
 801b288:	f7f4 faf2 	bl	800f870 <ucdr_deserialize_int32_t>
 801b28c:	ea07 0708 	and.w	r7, r7, r8
 801b290:	4603      	mov	r3, r0
 801b292:	4620      	mov	r0, r4
 801b294:	403e      	ands	r6, r7
 801b296:	f105 0114 	add.w	r1, r5, #20
 801b29a:	461c      	mov	r4, r3
 801b29c:	f7f3 ff66 	bl	800f16c <ucdr_deserialize_uint32_t>
 801b2a0:	4034      	ands	r4, r6
 801b2a2:	4020      	ands	r0, r4
 801b2a4:	b2c0      	uxtb	r0, r0
 801b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2aa:	bf00      	nop

0801b2ac <rcl_convert_rmw_ret_to_rcl_ret>:
 801b2ac:	280b      	cmp	r0, #11
 801b2ae:	dc0d      	bgt.n	801b2cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b2b0:	2800      	cmp	r0, #0
 801b2b2:	db09      	blt.n	801b2c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b2b4:	280b      	cmp	r0, #11
 801b2b6:	d807      	bhi.n	801b2c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b2b8:	e8df f000 	tbb	[pc, r0]
 801b2bc:	07060607 	.word	0x07060607
 801b2c0:	06060606 	.word	0x06060606
 801b2c4:	07070606 	.word	0x07070606
 801b2c8:	2001      	movs	r0, #1
 801b2ca:	4770      	bx	lr
 801b2cc:	28cb      	cmp	r0, #203	@ 0xcb
 801b2ce:	bf18      	it	ne
 801b2d0:	2001      	movne	r0, #1
 801b2d2:	4770      	bx	lr

0801b2d4 <rcl_get_default_domain_id>:
 801b2d4:	b530      	push	{r4, r5, lr}
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	b083      	sub	sp, #12
 801b2da:	9300      	str	r3, [sp, #0]
 801b2dc:	b1d0      	cbz	r0, 801b314 <rcl_get_default_domain_id+0x40>
 801b2de:	4604      	mov	r4, r0
 801b2e0:	4669      	mov	r1, sp
 801b2e2:	4815      	ldr	r0, [pc, #84]	@ (801b338 <rcl_get_default_domain_id+0x64>)
 801b2e4:	f7f9 fd2c 	bl	8014d40 <rcutils_get_env>
 801b2e8:	4602      	mov	r2, r0
 801b2ea:	b110      	cbz	r0, 801b2f2 <rcl_get_default_domain_id+0x1e>
 801b2ec:	2001      	movs	r0, #1
 801b2ee:	b003      	add	sp, #12
 801b2f0:	bd30      	pop	{r4, r5, pc}
 801b2f2:	9b00      	ldr	r3, [sp, #0]
 801b2f4:	b18b      	cbz	r3, 801b31a <rcl_get_default_domain_id+0x46>
 801b2f6:	7818      	ldrb	r0, [r3, #0]
 801b2f8:	2800      	cmp	r0, #0
 801b2fa:	d0f8      	beq.n	801b2ee <rcl_get_default_domain_id+0x1a>
 801b2fc:	a901      	add	r1, sp, #4
 801b2fe:	4618      	mov	r0, r3
 801b300:	9201      	str	r2, [sp, #4]
 801b302:	f001 fd6b 	bl	801cddc <strtoul>
 801b306:	4605      	mov	r5, r0
 801b308:	b150      	cbz	r0, 801b320 <rcl_get_default_domain_id+0x4c>
 801b30a:	1c43      	adds	r3, r0, #1
 801b30c:	d00d      	beq.n	801b32a <rcl_get_default_domain_id+0x56>
 801b30e:	2000      	movs	r0, #0
 801b310:	6025      	str	r5, [r4, #0]
 801b312:	e7ec      	b.n	801b2ee <rcl_get_default_domain_id+0x1a>
 801b314:	200b      	movs	r0, #11
 801b316:	b003      	add	sp, #12
 801b318:	bd30      	pop	{r4, r5, pc}
 801b31a:	4618      	mov	r0, r3
 801b31c:	b003      	add	sp, #12
 801b31e:	bd30      	pop	{r4, r5, pc}
 801b320:	9b01      	ldr	r3, [sp, #4]
 801b322:	781b      	ldrb	r3, [r3, #0]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d0f2      	beq.n	801b30e <rcl_get_default_domain_id+0x3a>
 801b328:	e7e0      	b.n	801b2ec <rcl_get_default_domain_id+0x18>
 801b32a:	f002 f8d5 	bl	801d4d8 <__errno>
 801b32e:	6803      	ldr	r3, [r0, #0]
 801b330:	2b22      	cmp	r3, #34	@ 0x22
 801b332:	d1ec      	bne.n	801b30e <rcl_get_default_domain_id+0x3a>
 801b334:	e7da      	b.n	801b2ec <rcl_get_default_domain_id+0x18>
 801b336:	bf00      	nop
 801b338:	080207bc 	.word	0x080207bc

0801b33c <rcl_expand_topic_name>:
 801b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b340:	b08d      	sub	sp, #52	@ 0x34
 801b342:	4698      	mov	r8, r3
 801b344:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b346:	9207      	str	r2, [sp, #28]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	bf18      	it	ne
 801b34c:	f1b8 0f00 	cmpne.w	r8, #0
 801b350:	bf0c      	ite	eq
 801b352:	2301      	moveq	r3, #1
 801b354:	2300      	movne	r3, #0
 801b356:	2a00      	cmp	r2, #0
 801b358:	bf08      	it	eq
 801b35a:	f043 0301 	orreq.w	r3, r3, #1
 801b35e:	2900      	cmp	r1, #0
 801b360:	bf08      	it	eq
 801b362:	f043 0301 	orreq.w	r3, r3, #1
 801b366:	2b00      	cmp	r3, #0
 801b368:	d13d      	bne.n	801b3e6 <rcl_expand_topic_name+0xaa>
 801b36a:	fab0 f280 	clz	r2, r0
 801b36e:	4604      	mov	r4, r0
 801b370:	0952      	lsrs	r2, r2, #5
 801b372:	2800      	cmp	r0, #0
 801b374:	d037      	beq.n	801b3e6 <rcl_expand_topic_name+0xaa>
 801b376:	460f      	mov	r7, r1
 801b378:	a90b      	add	r1, sp, #44	@ 0x2c
 801b37a:	f000 f9f3 	bl	801b764 <rcl_validate_topic_name>
 801b37e:	4605      	mov	r5, r0
 801b380:	bb68      	cbnz	r0, 801b3de <rcl_expand_topic_name+0xa2>
 801b382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b384:	2b00      	cmp	r3, #0
 801b386:	d137      	bne.n	801b3f8 <rcl_expand_topic_name+0xbc>
 801b388:	4602      	mov	r2, r0
 801b38a:	a90b      	add	r1, sp, #44	@ 0x2c
 801b38c:	4638      	mov	r0, r7
 801b38e:	f7fa f8e9 	bl	8015564 <rmw_validate_node_name>
 801b392:	bb68      	cbnz	r0, 801b3f0 <rcl_expand_topic_name+0xb4>
 801b394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b396:	2b00      	cmp	r3, #0
 801b398:	d133      	bne.n	801b402 <rcl_expand_topic_name+0xc6>
 801b39a:	462a      	mov	r2, r5
 801b39c:	a90b      	add	r1, sp, #44	@ 0x2c
 801b39e:	9807      	ldr	r0, [sp, #28]
 801b3a0:	f7fa f8c2 	bl	8015528 <rmw_validate_namespace>
 801b3a4:	bb20      	cbnz	r0, 801b3f0 <rcl_expand_topic_name+0xb4>
 801b3a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801b3a8:	2d00      	cmp	r5, #0
 801b3aa:	f040 80a2 	bne.w	801b4f2 <rcl_expand_topic_name+0x1b6>
 801b3ae:	217b      	movs	r1, #123	@ 0x7b
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f001 ffaf 	bl	801d314 <strchr>
 801b3b6:	7823      	ldrb	r3, [r4, #0]
 801b3b8:	4681      	mov	r9, r0
 801b3ba:	bb20      	cbnz	r0, 801b406 <rcl_expand_topic_name+0xca>
 801b3bc:	2b2f      	cmp	r3, #47	@ 0x2f
 801b3be:	d122      	bne.n	801b406 <rcl_expand_topic_name+0xca>
 801b3c0:	ab19      	add	r3, sp, #100	@ 0x64
 801b3c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3c6:	ab16      	add	r3, sp, #88	@ 0x58
 801b3c8:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b3cc:	4620      	mov	r0, r4
 801b3ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b3d0:	f7f9 fe18 	bl	8015004 <rcutils_strdup>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b3d8:	bf08      	it	eq
 801b3da:	250a      	moveq	r5, #10
 801b3dc:	6018      	str	r0, [r3, #0]
 801b3de:	4628      	mov	r0, r5
 801b3e0:	b00d      	add	sp, #52	@ 0x34
 801b3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3e6:	250b      	movs	r5, #11
 801b3e8:	4628      	mov	r0, r5
 801b3ea:	b00d      	add	sp, #52	@ 0x34
 801b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3f0:	f7ff ff5c 	bl	801b2ac <rcl_convert_rmw_ret_to_rcl_ret>
 801b3f4:	4605      	mov	r5, r0
 801b3f6:	e7f2      	b.n	801b3de <rcl_expand_topic_name+0xa2>
 801b3f8:	2567      	movs	r5, #103	@ 0x67
 801b3fa:	4628      	mov	r0, r5
 801b3fc:	b00d      	add	sp, #52	@ 0x34
 801b3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b402:	25c9      	movs	r5, #201	@ 0xc9
 801b404:	e7eb      	b.n	801b3de <rcl_expand_topic_name+0xa2>
 801b406:	2b7e      	cmp	r3, #126	@ 0x7e
 801b408:	d075      	beq.n	801b4f6 <rcl_expand_topic_name+0x1ba>
 801b40a:	f1b9 0f00 	cmp.w	r9, #0
 801b40e:	f000 80c2 	beq.w	801b596 <rcl_expand_topic_name+0x25a>
 801b412:	2300      	movs	r3, #0
 801b414:	46a2      	mov	sl, r4
 801b416:	461e      	mov	r6, r3
 801b418:	9508      	str	r5, [sp, #32]
 801b41a:	4655      	mov	r5, sl
 801b41c:	9409      	str	r4, [sp, #36]	@ 0x24
 801b41e:	46b2      	mov	sl, r6
 801b420:	464c      	mov	r4, r9
 801b422:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b426:	2c00      	cmp	r4, #0
 801b428:	f000 80ae 	beq.w	801b588 <rcl_expand_topic_name+0x24c>
 801b42c:	217d      	movs	r1, #125	@ 0x7d
 801b42e:	4628      	mov	r0, r5
 801b430:	f001 ff70 	bl	801d314 <strchr>
 801b434:	eba0 0904 	sub.w	r9, r0, r4
 801b438:	4621      	mov	r1, r4
 801b43a:	4869      	ldr	r0, [pc, #420]	@ (801b5e0 <rcl_expand_topic_name+0x2a4>)
 801b43c:	f109 0601 	add.w	r6, r9, #1
 801b440:	4632      	mov	r2, r6
 801b442:	f001 ff74 	bl	801d32e <strncmp>
 801b446:	2800      	cmp	r0, #0
 801b448:	d051      	beq.n	801b4ee <rcl_expand_topic_name+0x1b2>
 801b44a:	4632      	mov	r2, r6
 801b44c:	4621      	mov	r1, r4
 801b44e:	4865      	ldr	r0, [pc, #404]	@ (801b5e4 <rcl_expand_topic_name+0x2a8>)
 801b450:	f001 ff6d 	bl	801d32e <strncmp>
 801b454:	b128      	cbz	r0, 801b462 <rcl_expand_topic_name+0x126>
 801b456:	4632      	mov	r2, r6
 801b458:	4621      	mov	r1, r4
 801b45a:	4863      	ldr	r0, [pc, #396]	@ (801b5e8 <rcl_expand_topic_name+0x2ac>)
 801b45c:	f001 ff67 	bl	801d32e <strncmp>
 801b460:	bb38      	cbnz	r0, 801b4b2 <rcl_expand_topic_name+0x176>
 801b462:	46d9      	mov	r9, fp
 801b464:	ab18      	add	r3, sp, #96	@ 0x60
 801b466:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b46a:	ab16      	add	r3, sp, #88	@ 0x58
 801b46c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b470:	4620      	mov	r0, r4
 801b472:	4631      	mov	r1, r6
 801b474:	cb0c      	ldmia	r3, {r2, r3}
 801b476:	f7f9 fde7 	bl	8015048 <rcutils_strndup>
 801b47a:	4604      	mov	r4, r0
 801b47c:	2800      	cmp	r0, #0
 801b47e:	f000 80a3 	beq.w	801b5c8 <rcl_expand_topic_name+0x28c>
 801b482:	464a      	mov	r2, r9
 801b484:	4628      	mov	r0, r5
 801b486:	ab16      	add	r3, sp, #88	@ 0x58
 801b488:	4621      	mov	r1, r4
 801b48a:	f7f9 fcbb 	bl	8014e04 <rcutils_repl_str>
 801b48e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b490:	4605      	mov	r5, r0
 801b492:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b494:	4620      	mov	r0, r4
 801b496:	4798      	blx	r3
 801b498:	4650      	mov	r0, sl
 801b49a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b49c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b49e:	4798      	blx	r3
 801b4a0:	2d00      	cmp	r5, #0
 801b4a2:	d06c      	beq.n	801b57e <rcl_expand_topic_name+0x242>
 801b4a4:	217b      	movs	r1, #123	@ 0x7b
 801b4a6:	4628      	mov	r0, r5
 801b4a8:	f001 ff34 	bl	801d314 <strchr>
 801b4ac:	46aa      	mov	sl, r5
 801b4ae:	4604      	mov	r4, r0
 801b4b0:	e7b9      	b.n	801b426 <rcl_expand_topic_name+0xea>
 801b4b2:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801b4b6:	1c61      	adds	r1, r4, #1
 801b4b8:	4640      	mov	r0, r8
 801b4ba:	f7f9 fedd 	bl	8015278 <rcutils_string_map_getn>
 801b4be:	4681      	mov	r9, r0
 801b4c0:	2800      	cmp	r0, #0
 801b4c2:	d1cf      	bne.n	801b464 <rcl_expand_topic_name+0x128>
 801b4c4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b4c6:	aa18      	add	r2, sp, #96	@ 0x60
 801b4c8:	2569      	movs	r5, #105	@ 0x69
 801b4ca:	6018      	str	r0, [r3, #0]
 801b4cc:	ab16      	add	r3, sp, #88	@ 0x58
 801b4ce:	ca07      	ldmia	r2, {r0, r1, r2}
 801b4d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b4d4:	4631      	mov	r1, r6
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	cb0c      	ldmia	r3, {r2, r3}
 801b4da:	f7f9 fdb5 	bl	8015048 <rcutils_strndup>
 801b4de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b4e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b4e2:	4798      	blx	r3
 801b4e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b4e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b4e8:	4650      	mov	r0, sl
 801b4ea:	4798      	blx	r3
 801b4ec:	e777      	b.n	801b3de <rcl_expand_topic_name+0xa2>
 801b4ee:	46b9      	mov	r9, r7
 801b4f0:	e7b8      	b.n	801b464 <rcl_expand_topic_name+0x128>
 801b4f2:	25ca      	movs	r5, #202	@ 0xca
 801b4f4:	e773      	b.n	801b3de <rcl_expand_topic_name+0xa2>
 801b4f6:	9e07      	ldr	r6, [sp, #28]
 801b4f8:	4630      	mov	r0, r6
 801b4fa:	f7e4 fefb 	bl	80002f4 <strlen>
 801b4fe:	4a3b      	ldr	r2, [pc, #236]	@ (801b5ec <rcl_expand_topic_name+0x2b0>)
 801b500:	4b3b      	ldr	r3, [pc, #236]	@ (801b5f0 <rcl_expand_topic_name+0x2b4>)
 801b502:	9603      	str	r6, [sp, #12]
 801b504:	2801      	cmp	r0, #1
 801b506:	bf18      	it	ne
 801b508:	4613      	movne	r3, r2
 801b50a:	9704      	str	r7, [sp, #16]
 801b50c:	9302      	str	r3, [sp, #8]
 801b50e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b510:	9300      	str	r3, [sp, #0]
 801b512:	1c63      	adds	r3, r4, #1
 801b514:	9305      	str	r3, [sp, #20]
 801b516:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b51a:	9301      	str	r3, [sp, #4]
 801b51c:	ab16      	add	r3, sp, #88	@ 0x58
 801b51e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b520:	f7f9 fc36 	bl	8014d90 <rcutils_format_string_limit>
 801b524:	4606      	mov	r6, r0
 801b526:	b350      	cbz	r0, 801b57e <rcl_expand_topic_name+0x242>
 801b528:	f1b9 0f00 	cmp.w	r9, #0
 801b52c:	d005      	beq.n	801b53a <rcl_expand_topic_name+0x1fe>
 801b52e:	217b      	movs	r1, #123	@ 0x7b
 801b530:	46b2      	mov	sl, r6
 801b532:	f001 feef 	bl	801d314 <strchr>
 801b536:	4681      	mov	r9, r0
 801b538:	e76e      	b.n	801b418 <rcl_expand_topic_name+0xdc>
 801b53a:	7833      	ldrb	r3, [r6, #0]
 801b53c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b53e:	d01b      	beq.n	801b578 <rcl_expand_topic_name+0x23c>
 801b540:	9c07      	ldr	r4, [sp, #28]
 801b542:	4620      	mov	r0, r4
 801b544:	f7e4 fed6 	bl	80002f4 <strlen>
 801b548:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b54c:	4a29      	ldr	r2, [pc, #164]	@ (801b5f4 <rcl_expand_topic_name+0x2b8>)
 801b54e:	9301      	str	r3, [sp, #4]
 801b550:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b552:	9604      	str	r6, [sp, #16]
 801b554:	9300      	str	r3, [sp, #0]
 801b556:	4b28      	ldr	r3, [pc, #160]	@ (801b5f8 <rcl_expand_topic_name+0x2bc>)
 801b558:	9403      	str	r4, [sp, #12]
 801b55a:	2801      	cmp	r0, #1
 801b55c:	bf18      	it	ne
 801b55e:	4613      	movne	r3, r2
 801b560:	9302      	str	r3, [sp, #8]
 801b562:	ab16      	add	r3, sp, #88	@ 0x58
 801b564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b566:	f7f9 fc13 	bl	8014d90 <rcutils_format_string_limit>
 801b56a:	4603      	mov	r3, r0
 801b56c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801b56e:	4630      	mov	r0, r6
 801b570:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b572:	461e      	mov	r6, r3
 801b574:	4790      	blx	r2
 801b576:	b116      	cbz	r6, 801b57e <rcl_expand_topic_name+0x242>
 801b578:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b57a:	601e      	str	r6, [r3, #0]
 801b57c:	e72f      	b.n	801b3de <rcl_expand_topic_name+0xa2>
 801b57e:	2300      	movs	r3, #0
 801b580:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b582:	250a      	movs	r5, #10
 801b584:	6013      	str	r3, [r2, #0]
 801b586:	e72a      	b.n	801b3de <rcl_expand_topic_name+0xa2>
 801b588:	4653      	mov	r3, sl
 801b58a:	4656      	mov	r6, sl
 801b58c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d1d2      	bne.n	801b53a <rcl_expand_topic_name+0x1fe>
 801b594:	7823      	ldrb	r3, [r4, #0]
 801b596:	2b2f      	cmp	r3, #47	@ 0x2f
 801b598:	d01e      	beq.n	801b5d8 <rcl_expand_topic_name+0x29c>
 801b59a:	9e07      	ldr	r6, [sp, #28]
 801b59c:	4630      	mov	r0, r6
 801b59e:	f7e4 fea9 	bl	80002f4 <strlen>
 801b5a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b5a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b5a8:	9603      	str	r6, [sp, #12]
 801b5aa:	9404      	str	r4, [sp, #16]
 801b5ac:	e9cd 2300 	strd	r2, r3, [sp]
 801b5b0:	4a10      	ldr	r2, [pc, #64]	@ (801b5f4 <rcl_expand_topic_name+0x2b8>)
 801b5b2:	4b11      	ldr	r3, [pc, #68]	@ (801b5f8 <rcl_expand_topic_name+0x2bc>)
 801b5b4:	2801      	cmp	r0, #1
 801b5b6:	bf18      	it	ne
 801b5b8:	4613      	movne	r3, r2
 801b5ba:	9302      	str	r3, [sp, #8]
 801b5bc:	ab16      	add	r3, sp, #88	@ 0x58
 801b5be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b5c0:	f7f9 fbe6 	bl	8014d90 <rcutils_format_string_limit>
 801b5c4:	4606      	mov	r6, r0
 801b5c6:	e7d6      	b.n	801b576 <rcl_expand_topic_name+0x23a>
 801b5c8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801b5cc:	4650      	mov	r0, sl
 801b5ce:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b5d0:	6014      	str	r4, [r2, #0]
 801b5d2:	250a      	movs	r5, #10
 801b5d4:	4798      	blx	r3
 801b5d6:	e702      	b.n	801b3de <rcl_expand_topic_name+0xa2>
 801b5d8:	2300      	movs	r3, #0
 801b5da:	461e      	mov	r6, r3
 801b5dc:	e7cc      	b.n	801b578 <rcl_expand_topic_name+0x23c>
 801b5de:	bf00      	nop
 801b5e0:	080207d4 	.word	0x080207d4
 801b5e4:	080207dc 	.word	0x080207dc
 801b5e8:	080207e4 	.word	0x080207e4
 801b5ec:	080207cc 	.word	0x080207cc
 801b5f0:	080204e0 	.word	0x080204e0
 801b5f4:	0801fea8 	.word	0x0801fea8
 801b5f8:	0801fea0 	.word	0x0801fea0

0801b5fc <rcl_get_default_topic_name_substitutions>:
 801b5fc:	2800      	cmp	r0, #0
 801b5fe:	bf0c      	ite	eq
 801b600:	200b      	moveq	r0, #11
 801b602:	2000      	movne	r0, #0
 801b604:	4770      	bx	lr
 801b606:	bf00      	nop

0801b608 <rcl_get_zero_initialized_guard_condition>:
 801b608:	4a03      	ldr	r2, [pc, #12]	@ (801b618 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b60a:	4603      	mov	r3, r0
 801b60c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b610:	e883 0003 	stmia.w	r3, {r0, r1}
 801b614:	4618      	mov	r0, r3
 801b616:	4770      	bx	lr
 801b618:	080207f0 	.word	0x080207f0

0801b61c <rcl_guard_condition_init_from_rmw>:
 801b61c:	b082      	sub	sp, #8
 801b61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b622:	b086      	sub	sp, #24
 801b624:	4604      	mov	r4, r0
 801b626:	460e      	mov	r6, r1
 801b628:	4615      	mov	r5, r2
 801b62a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b62e:	f10d 0e04 	add.w	lr, sp, #4
 801b632:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b636:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b63a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b63e:	f8dc 3000 	ldr.w	r3, [ip]
 801b642:	a801      	add	r0, sp, #4
 801b644:	f8ce 3000 	str.w	r3, [lr]
 801b648:	f7f5 fd1a 	bl	8011080 <rcutils_allocator_is_valid>
 801b64c:	f080 0301 	eor.w	r3, r0, #1
 801b650:	b2db      	uxtb	r3, r3
 801b652:	bb3b      	cbnz	r3, 801b6a4 <rcl_guard_condition_init_from_rmw+0x88>
 801b654:	b334      	cbz	r4, 801b6a4 <rcl_guard_condition_init_from_rmw+0x88>
 801b656:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b65a:	f1b8 0f00 	cmp.w	r8, #0
 801b65e:	d11a      	bne.n	801b696 <rcl_guard_condition_init_from_rmw+0x7a>
 801b660:	b305      	cbz	r5, 801b6a4 <rcl_guard_condition_init_from_rmw+0x88>
 801b662:	4628      	mov	r0, r5
 801b664:	f7f6 fbd8 	bl	8011e18 <rcl_context_is_valid>
 801b668:	b1f0      	cbz	r0, 801b6a8 <rcl_guard_condition_init_from_rmw+0x8c>
 801b66a:	9b01      	ldr	r3, [sp, #4]
 801b66c:	201c      	movs	r0, #28
 801b66e:	9905      	ldr	r1, [sp, #20]
 801b670:	4798      	blx	r3
 801b672:	4607      	mov	r7, r0
 801b674:	6060      	str	r0, [r4, #4]
 801b676:	b320      	cbz	r0, 801b6c2 <rcl_guard_condition_init_from_rmw+0xa6>
 801b678:	b1c6      	cbz	r6, 801b6ac <rcl_guard_condition_init_from_rmw+0x90>
 801b67a:	6006      	str	r6, [r0, #0]
 801b67c:	f880 8004 	strb.w	r8, [r0, #4]
 801b680:	ac01      	add	r4, sp, #4
 801b682:	f107 0c08 	add.w	ip, r7, #8
 801b686:	2500      	movs	r5, #0
 801b688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b68a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b68e:	6823      	ldr	r3, [r4, #0]
 801b690:	f8cc 3000 	str.w	r3, [ip]
 801b694:	e000      	b.n	801b698 <rcl_guard_condition_init_from_rmw+0x7c>
 801b696:	2564      	movs	r5, #100	@ 0x64
 801b698:	4628      	mov	r0, r5
 801b69a:	b006      	add	sp, #24
 801b69c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6a0:	b002      	add	sp, #8
 801b6a2:	4770      	bx	lr
 801b6a4:	250b      	movs	r5, #11
 801b6a6:	e7f7      	b.n	801b698 <rcl_guard_condition_init_from_rmw+0x7c>
 801b6a8:	2565      	movs	r5, #101	@ 0x65
 801b6aa:	e7f5      	b.n	801b698 <rcl_guard_condition_init_from_rmw+0x7c>
 801b6ac:	6828      	ldr	r0, [r5, #0]
 801b6ae:	3028      	adds	r0, #40	@ 0x28
 801b6b0:	f000 fada 	bl	801bc68 <rmw_create_guard_condition>
 801b6b4:	6038      	str	r0, [r7, #0]
 801b6b6:	6867      	ldr	r7, [r4, #4]
 801b6b8:	683e      	ldr	r6, [r7, #0]
 801b6ba:	b126      	cbz	r6, 801b6c6 <rcl_guard_condition_init_from_rmw+0xaa>
 801b6bc:	2301      	movs	r3, #1
 801b6be:	713b      	strb	r3, [r7, #4]
 801b6c0:	e7de      	b.n	801b680 <rcl_guard_condition_init_from_rmw+0x64>
 801b6c2:	250a      	movs	r5, #10
 801b6c4:	e7e8      	b.n	801b698 <rcl_guard_condition_init_from_rmw+0x7c>
 801b6c6:	9b02      	ldr	r3, [sp, #8]
 801b6c8:	4638      	mov	r0, r7
 801b6ca:	9905      	ldr	r1, [sp, #20]
 801b6cc:	2501      	movs	r5, #1
 801b6ce:	4798      	blx	r3
 801b6d0:	6066      	str	r6, [r4, #4]
 801b6d2:	e7e1      	b.n	801b698 <rcl_guard_condition_init_from_rmw+0x7c>

0801b6d4 <rcl_guard_condition_fini>:
 801b6d4:	b570      	push	{r4, r5, r6, lr}
 801b6d6:	b082      	sub	sp, #8
 801b6d8:	b1f0      	cbz	r0, 801b718 <rcl_guard_condition_fini+0x44>
 801b6da:	6843      	ldr	r3, [r0, #4]
 801b6dc:	4604      	mov	r4, r0
 801b6de:	b163      	cbz	r3, 801b6fa <rcl_guard_condition_fini+0x26>
 801b6e0:	6818      	ldr	r0, [r3, #0]
 801b6e2:	68de      	ldr	r6, [r3, #12]
 801b6e4:	6999      	ldr	r1, [r3, #24]
 801b6e6:	b160      	cbz	r0, 801b702 <rcl_guard_condition_fini+0x2e>
 801b6e8:	791d      	ldrb	r5, [r3, #4]
 801b6ea:	b965      	cbnz	r5, 801b706 <rcl_guard_condition_fini+0x32>
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	47b0      	blx	r6
 801b6f0:	2300      	movs	r3, #0
 801b6f2:	4628      	mov	r0, r5
 801b6f4:	6063      	str	r3, [r4, #4]
 801b6f6:	b002      	add	sp, #8
 801b6f8:	bd70      	pop	{r4, r5, r6, pc}
 801b6fa:	461d      	mov	r5, r3
 801b6fc:	4628      	mov	r0, r5
 801b6fe:	b002      	add	sp, #8
 801b700:	bd70      	pop	{r4, r5, r6, pc}
 801b702:	4605      	mov	r5, r0
 801b704:	e7f2      	b.n	801b6ec <rcl_guard_condition_fini+0x18>
 801b706:	9101      	str	r1, [sp, #4]
 801b708:	f000 fac4 	bl	801bc94 <rmw_destroy_guard_condition>
 801b70c:	1e05      	subs	r5, r0, #0
 801b70e:	6863      	ldr	r3, [r4, #4]
 801b710:	9901      	ldr	r1, [sp, #4]
 801b712:	bf18      	it	ne
 801b714:	2501      	movne	r5, #1
 801b716:	e7e9      	b.n	801b6ec <rcl_guard_condition_fini+0x18>
 801b718:	250b      	movs	r5, #11
 801b71a:	4628      	mov	r0, r5
 801b71c:	b002      	add	sp, #8
 801b71e:	bd70      	pop	{r4, r5, r6, pc}

0801b720 <rcl_guard_condition_get_default_options>:
 801b720:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b722:	b087      	sub	sp, #28
 801b724:	4606      	mov	r6, r0
 801b726:	4c0b      	ldr	r4, [pc, #44]	@ (801b754 <rcl_guard_condition_get_default_options+0x34>)
 801b728:	4668      	mov	r0, sp
 801b72a:	f7f5 fc9b 	bl	8011064 <rcutils_get_default_allocator>
 801b72e:	46ee      	mov	lr, sp
 801b730:	46a4      	mov	ip, r4
 801b732:	4625      	mov	r5, r4
 801b734:	4634      	mov	r4, r6
 801b736:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b73a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b73e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b740:	f8de 7000 	ldr.w	r7, [lr]
 801b744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b746:	4630      	mov	r0, r6
 801b748:	f8cc 7000 	str.w	r7, [ip]
 801b74c:	6027      	str	r7, [r4, #0]
 801b74e:	b007      	add	sp, #28
 801b750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b752:	bf00      	nop
 801b754:	240692f8 	.word	0x240692f8

0801b758 <rcl_guard_condition_get_rmw_handle>:
 801b758:	b110      	cbz	r0, 801b760 <rcl_guard_condition_get_rmw_handle+0x8>
 801b75a:	6840      	ldr	r0, [r0, #4]
 801b75c:	b100      	cbz	r0, 801b760 <rcl_guard_condition_get_rmw_handle+0x8>
 801b75e:	6800      	ldr	r0, [r0, #0]
 801b760:	4770      	bx	lr
 801b762:	bf00      	nop

0801b764 <rcl_validate_topic_name>:
 801b764:	2800      	cmp	r0, #0
 801b766:	f000 8089 	beq.w	801b87c <rcl_validate_topic_name+0x118>
 801b76a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b76e:	460e      	mov	r6, r1
 801b770:	2900      	cmp	r1, #0
 801b772:	f000 8085 	beq.w	801b880 <rcl_validate_topic_name+0x11c>
 801b776:	4604      	mov	r4, r0
 801b778:	4617      	mov	r7, r2
 801b77a:	f7e4 fdbb 	bl	80002f4 <strlen>
 801b77e:	b1b0      	cbz	r0, 801b7ae <rcl_validate_topic_name+0x4a>
 801b780:	f894 e000 	ldrb.w	lr, [r4]
 801b784:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801b8e8 <rcl_validate_topic_name+0x184>
 801b788:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801b78c:	f013 0304 	ands.w	r3, r3, #4
 801b790:	d139      	bne.n	801b806 <rcl_validate_topic_name+0xa2>
 801b792:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801b796:	f814 2008 	ldrb.w	r2, [r4, r8]
 801b79a:	2a2f      	cmp	r2, #47	@ 0x2f
 801b79c:	d10f      	bne.n	801b7be <rcl_validate_topic_name+0x5a>
 801b79e:	2202      	movs	r2, #2
 801b7a0:	6032      	str	r2, [r6, #0]
 801b7a2:	b3a7      	cbz	r7, 801b80e <rcl_validate_topic_name+0xaa>
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f8c7 8000 	str.w	r8, [r7]
 801b7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7ae:	2301      	movs	r3, #1
 801b7b0:	6033      	str	r3, [r6, #0]
 801b7b2:	b367      	cbz	r7, 801b80e <rcl_validate_topic_name+0xaa>
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	603b      	str	r3, [r7, #0]
 801b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7be:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801b7c2:	461d      	mov	r5, r3
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b7ca:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801b7ce:	f1b9 0f09 	cmp.w	r9, #9
 801b7d2:	d91f      	bls.n	801b814 <rcl_validate_topic_name+0xb0>
 801b7d4:	f022 0920 	bic.w	r9, r2, #32
 801b7d8:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801b7dc:	f1b9 0f19 	cmp.w	r9, #25
 801b7e0:	d918      	bls.n	801b814 <rcl_validate_topic_name+0xb0>
 801b7e2:	2a5f      	cmp	r2, #95	@ 0x5f
 801b7e4:	d024      	beq.n	801b830 <rcl_validate_topic_name+0xcc>
 801b7e6:	2a2f      	cmp	r2, #47	@ 0x2f
 801b7e8:	d058      	beq.n	801b89c <rcl_validate_topic_name+0x138>
 801b7ea:	2a7e      	cmp	r2, #126	@ 0x7e
 801b7ec:	d04a      	beq.n	801b884 <rcl_validate_topic_name+0x120>
 801b7ee:	2a7b      	cmp	r2, #123	@ 0x7b
 801b7f0:	d05b      	beq.n	801b8aa <rcl_validate_topic_name+0x146>
 801b7f2:	2a7d      	cmp	r2, #125	@ 0x7d
 801b7f4:	d169      	bne.n	801b8ca <rcl_validate_topic_name+0x166>
 801b7f6:	2d00      	cmp	r5, #0
 801b7f8:	d15c      	bne.n	801b8b4 <rcl_validate_topic_name+0x150>
 801b7fa:	2305      	movs	r3, #5
 801b7fc:	6033      	str	r3, [r6, #0]
 801b7fe:	b137      	cbz	r7, 801b80e <rcl_validate_topic_name+0xaa>
 801b800:	2000      	movs	r0, #0
 801b802:	6039      	str	r1, [r7, #0]
 801b804:	e7d9      	b.n	801b7ba <rcl_validate_topic_name+0x56>
 801b806:	2304      	movs	r3, #4
 801b808:	6033      	str	r3, [r6, #0]
 801b80a:	2f00      	cmp	r7, #0
 801b80c:	d1d2      	bne.n	801b7b4 <rcl_validate_topic_name+0x50>
 801b80e:	2000      	movs	r0, #0
 801b810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b814:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b818:	0752      	lsls	r2, r2, #29
 801b81a:	d509      	bpl.n	801b830 <rcl_validate_topic_name+0xcc>
 801b81c:	2900      	cmp	r1, #0
 801b81e:	bf0c      	ite	eq
 801b820:	2200      	moveq	r2, #0
 801b822:	f005 0201 	andne.w	r2, r5, #1
 801b826:	b11a      	cbz	r2, 801b830 <rcl_validate_topic_name+0xcc>
 801b828:	1e4d      	subs	r5, r1, #1
 801b82a:	429d      	cmp	r5, r3
 801b82c:	d031      	beq.n	801b892 <rcl_validate_topic_name+0x12e>
 801b82e:	4615      	mov	r5, r2
 801b830:	3101      	adds	r1, #1
 801b832:	4288      	cmp	r0, r1
 801b834:	d1c7      	bne.n	801b7c6 <rcl_validate_topic_name+0x62>
 801b836:	2d00      	cmp	r5, #0
 801b838:	d142      	bne.n	801b8c0 <rcl_validate_topic_name+0x15c>
 801b83a:	4628      	mov	r0, r5
 801b83c:	2301      	movs	r3, #1
 801b83e:	e00c      	b.n	801b85a <rcl_validate_topic_name+0xf6>
 801b840:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b844:	d101      	bne.n	801b84a <rcl_validate_topic_name+0xe6>
 801b846:	2801      	cmp	r0, #1
 801b848:	d047      	beq.n	801b8da <rcl_validate_topic_name+0x176>
 801b84a:	1c5a      	adds	r2, r3, #1
 801b84c:	428b      	cmp	r3, r1
 801b84e:	f100 0001 	add.w	r0, r0, #1
 801b852:	f104 0401 	add.w	r4, r4, #1
 801b856:	4613      	mov	r3, r2
 801b858:	d22e      	bcs.n	801b8b8 <rcl_validate_topic_name+0x154>
 801b85a:	4580      	cmp	r8, r0
 801b85c:	d0f5      	beq.n	801b84a <rcl_validate_topic_name+0xe6>
 801b85e:	7822      	ldrb	r2, [r4, #0]
 801b860:	2a2f      	cmp	r2, #47	@ 0x2f
 801b862:	d1ed      	bne.n	801b840 <rcl_validate_topic_name+0xdc>
 801b864:	7862      	ldrb	r2, [r4, #1]
 801b866:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b86a:	0752      	lsls	r2, r2, #29
 801b86c:	d5ed      	bpl.n	801b84a <rcl_validate_topic_name+0xe6>
 801b86e:	2204      	movs	r2, #4
 801b870:	6032      	str	r2, [r6, #0]
 801b872:	2f00      	cmp	r7, #0
 801b874:	d0cb      	beq.n	801b80e <rcl_validate_topic_name+0xaa>
 801b876:	2000      	movs	r0, #0
 801b878:	603b      	str	r3, [r7, #0]
 801b87a:	e79e      	b.n	801b7ba <rcl_validate_topic_name+0x56>
 801b87c:	200b      	movs	r0, #11
 801b87e:	4770      	bx	lr
 801b880:	200b      	movs	r0, #11
 801b882:	e79a      	b.n	801b7ba <rcl_validate_topic_name+0x56>
 801b884:	2900      	cmp	r1, #0
 801b886:	d0d3      	beq.n	801b830 <rcl_validate_topic_name+0xcc>
 801b888:	2306      	movs	r3, #6
 801b88a:	6033      	str	r3, [r6, #0]
 801b88c:	2f00      	cmp	r7, #0
 801b88e:	d1b7      	bne.n	801b800 <rcl_validate_topic_name+0x9c>
 801b890:	e7bd      	b.n	801b80e <rcl_validate_topic_name+0xaa>
 801b892:	2309      	movs	r3, #9
 801b894:	6033      	str	r3, [r6, #0]
 801b896:	2f00      	cmp	r7, #0
 801b898:	d1b2      	bne.n	801b800 <rcl_validate_topic_name+0x9c>
 801b89a:	e7b8      	b.n	801b80e <rcl_validate_topic_name+0xaa>
 801b89c:	2d00      	cmp	r5, #0
 801b89e:	d0c7      	beq.n	801b830 <rcl_validate_topic_name+0xcc>
 801b8a0:	2308      	movs	r3, #8
 801b8a2:	6033      	str	r3, [r6, #0]
 801b8a4:	2f00      	cmp	r7, #0
 801b8a6:	d1ab      	bne.n	801b800 <rcl_validate_topic_name+0x9c>
 801b8a8:	e7b1      	b.n	801b80e <rcl_validate_topic_name+0xaa>
 801b8aa:	2d00      	cmp	r5, #0
 801b8ac:	d1f8      	bne.n	801b8a0 <rcl_validate_topic_name+0x13c>
 801b8ae:	460b      	mov	r3, r1
 801b8b0:	2501      	movs	r5, #1
 801b8b2:	e7bd      	b.n	801b830 <rcl_validate_topic_name+0xcc>
 801b8b4:	2500      	movs	r5, #0
 801b8b6:	e7bb      	b.n	801b830 <rcl_validate_topic_name+0xcc>
 801b8b8:	2300      	movs	r3, #0
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	6033      	str	r3, [r6, #0]
 801b8be:	e77c      	b.n	801b7ba <rcl_validate_topic_name+0x56>
 801b8c0:	2205      	movs	r2, #5
 801b8c2:	6032      	str	r2, [r6, #0]
 801b8c4:	2f00      	cmp	r7, #0
 801b8c6:	d1d6      	bne.n	801b876 <rcl_validate_topic_name+0x112>
 801b8c8:	e7a1      	b.n	801b80e <rcl_validate_topic_name+0xaa>
 801b8ca:	2d00      	cmp	r5, #0
 801b8cc:	bf14      	ite	ne
 801b8ce:	2308      	movne	r3, #8
 801b8d0:	2303      	moveq	r3, #3
 801b8d2:	6033      	str	r3, [r6, #0]
 801b8d4:	2f00      	cmp	r7, #0
 801b8d6:	d193      	bne.n	801b800 <rcl_validate_topic_name+0x9c>
 801b8d8:	e799      	b.n	801b80e <rcl_validate_topic_name+0xaa>
 801b8da:	2307      	movs	r3, #7
 801b8dc:	6033      	str	r3, [r6, #0]
 801b8de:	2f00      	cmp	r7, #0
 801b8e0:	d095      	beq.n	801b80e <rcl_validate_topic_name+0xaa>
 801b8e2:	2301      	movs	r3, #1
 801b8e4:	e7c7      	b.n	801b876 <rcl_validate_topic_name+0x112>
 801b8e6:	bf00      	nop
 801b8e8:	08020976 	.word	0x08020976

0801b8ec <rcutils_string_array_fini>:
 801b8ec:	b328      	cbz	r0, 801b93a <rcutils_string_array_fini+0x4e>
 801b8ee:	b570      	push	{r4, r5, r6, lr}
 801b8f0:	4604      	mov	r4, r0
 801b8f2:	6840      	ldr	r0, [r0, #4]
 801b8f4:	b1e0      	cbz	r0, 801b930 <rcutils_string_array_fini+0x44>
 801b8f6:	f104 0008 	add.w	r0, r4, #8
 801b8fa:	f7f5 fbc1 	bl	8011080 <rcutils_allocator_is_valid>
 801b8fe:	b1c0      	cbz	r0, 801b932 <rcutils_string_array_fini+0x46>
 801b900:	6823      	ldr	r3, [r4, #0]
 801b902:	b1c3      	cbz	r3, 801b936 <rcutils_string_array_fini+0x4a>
 801b904:	2500      	movs	r5, #0
 801b906:	6860      	ldr	r0, [r4, #4]
 801b908:	462e      	mov	r6, r5
 801b90a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b90e:	68e3      	ldr	r3, [r4, #12]
 801b910:	69a1      	ldr	r1, [r4, #24]
 801b912:	4798      	blx	r3
 801b914:	e9d4 3000 	ldrd	r3, r0, [r4]
 801b918:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801b91c:	3501      	adds	r5, #1
 801b91e:	429d      	cmp	r5, r3
 801b920:	d3f3      	bcc.n	801b90a <rcutils_string_array_fini+0x1e>
 801b922:	68e3      	ldr	r3, [r4, #12]
 801b924:	69a1      	ldr	r1, [r4, #24]
 801b926:	4798      	blx	r3
 801b928:	2300      	movs	r3, #0
 801b92a:	4618      	mov	r0, r3
 801b92c:	e9c4 3300 	strd	r3, r3, [r4]
 801b930:	bd70      	pop	{r4, r5, r6, pc}
 801b932:	200b      	movs	r0, #11
 801b934:	bd70      	pop	{r4, r5, r6, pc}
 801b936:	6860      	ldr	r0, [r4, #4]
 801b938:	e7f3      	b.n	801b922 <rcutils_string_array_fini+0x36>
 801b93a:	200b      	movs	r0, #11
 801b93c:	4770      	bx	lr
 801b93e:	bf00      	nop

0801b940 <rmw_time_equal>:
 801b940:	b4f0      	push	{r4, r5, r6, r7}
 801b942:	b084      	sub	sp, #16
 801b944:	ac04      	add	r4, sp, #16
 801b946:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b94a:	4603      	mov	r3, r0
 801b94c:	4925      	ldr	r1, [pc, #148]	@ (801b9e4 <rmw_time_equal+0xa4>)
 801b94e:	9d01      	ldr	r5, [sp, #4]
 801b950:	4610      	mov	r0, r2
 801b952:	4299      	cmp	r1, r3
 801b954:	f04f 0202 	mov.w	r2, #2
 801b958:	9e03      	ldr	r6, [sp, #12]
 801b95a:	41aa      	sbcs	r2, r5
 801b95c:	d330      	bcc.n	801b9c0 <rmw_time_equal+0x80>
 801b95e:	4c22      	ldr	r4, [pc, #136]	@ (801b9e8 <rmw_time_equal+0xa8>)
 801b960:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b964:	fba3 3204 	umull	r3, r2, r3, r4
 801b968:	fb04 2205 	mla	r2, r4, r5, r2
 801b96c:	43dd      	mvns	r5, r3
 801b96e:	1a8c      	subs	r4, r1, r2
 801b970:	4285      	cmp	r5, r0
 801b972:	41b4      	sbcs	r4, r6
 801b974:	d332      	bcc.n	801b9dc <rmw_time_equal+0x9c>
 801b976:	eb10 0c03 	adds.w	ip, r0, r3
 801b97a:	eb42 0106 	adc.w	r1, r2, r6
 801b97e:	4819      	ldr	r0, [pc, #100]	@ (801b9e4 <rmw_time_equal+0xa4>)
 801b980:	2202      	movs	r2, #2
 801b982:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b984:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801b986:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801b98a:	4298      	cmp	r0, r3
 801b98c:	41b2      	sbcs	r2, r6
 801b98e:	d31c      	bcc.n	801b9ca <rmw_time_equal+0x8a>
 801b990:	4c15      	ldr	r4, [pc, #84]	@ (801b9e8 <rmw_time_equal+0xa8>)
 801b992:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b996:	fba3 3204 	umull	r3, r2, r3, r4
 801b99a:	fb04 2206 	mla	r2, r4, r6, r2
 801b99e:	43de      	mvns	r6, r3
 801b9a0:	1a84      	subs	r4, r0, r2
 801b9a2:	42ae      	cmp	r6, r5
 801b9a4:	41bc      	sbcs	r4, r7
 801b9a6:	d315      	bcc.n	801b9d4 <rmw_time_equal+0x94>
 801b9a8:	195b      	adds	r3, r3, r5
 801b9aa:	eb42 0207 	adc.w	r2, r2, r7
 801b9ae:	428a      	cmp	r2, r1
 801b9b0:	bf08      	it	eq
 801b9b2:	4563      	cmpeq	r3, ip
 801b9b4:	bf0c      	ite	eq
 801b9b6:	2001      	moveq	r0, #1
 801b9b8:	2000      	movne	r0, #0
 801b9ba:	b004      	add	sp, #16
 801b9bc:	bcf0      	pop	{r4, r5, r6, r7}
 801b9be:	4770      	bx	lr
 801b9c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801b9c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b9c8:	e7d9      	b.n	801b97e <rmw_time_equal+0x3e>
 801b9ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b9ce:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801b9d2:	e7ec      	b.n	801b9ae <rmw_time_equal+0x6e>
 801b9d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b9d8:	4602      	mov	r2, r0
 801b9da:	e7e8      	b.n	801b9ae <rmw_time_equal+0x6e>
 801b9dc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801b9e0:	e7cd      	b.n	801b97e <rmw_time_equal+0x3e>
 801b9e2:	bf00      	nop
 801b9e4:	25c17d04 	.word	0x25c17d04
 801b9e8:	3b9aca00 	.word	0x3b9aca00

0801b9ec <rmw_time_total_nsec>:
 801b9ec:	b470      	push	{r4, r5, r6}
 801b9ee:	b085      	sub	sp, #20
 801b9f0:	ac04      	add	r4, sp, #16
 801b9f2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	4913      	ldr	r1, [pc, #76]	@ (801ba48 <rmw_time_total_nsec+0x5c>)
 801b9fa:	9d01      	ldr	r5, [sp, #4]
 801b9fc:	4610      	mov	r0, r2
 801b9fe:	4299      	cmp	r1, r3
 801ba00:	f04f 0202 	mov.w	r2, #2
 801ba04:	9e03      	ldr	r6, [sp, #12]
 801ba06:	41aa      	sbcs	r2, r5
 801ba08:	d311      	bcc.n	801ba2e <rmw_time_total_nsec+0x42>
 801ba0a:	4c10      	ldr	r4, [pc, #64]	@ (801ba4c <rmw_time_total_nsec+0x60>)
 801ba0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ba10:	fba3 3204 	umull	r3, r2, r3, r4
 801ba14:	fb04 2205 	mla	r2, r4, r5, r2
 801ba18:	43dd      	mvns	r5, r3
 801ba1a:	1a8c      	subs	r4, r1, r2
 801ba1c:	4285      	cmp	r5, r0
 801ba1e:	41b4      	sbcs	r4, r6
 801ba20:	d30c      	bcc.n	801ba3c <rmw_time_total_nsec+0x50>
 801ba22:	1818      	adds	r0, r3, r0
 801ba24:	eb42 0106 	adc.w	r1, r2, r6
 801ba28:	b005      	add	sp, #20
 801ba2a:	bc70      	pop	{r4, r5, r6}
 801ba2c:	4770      	bx	lr
 801ba2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba32:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ba36:	b005      	add	sp, #20
 801ba38:	bc70      	pop	{r4, r5, r6}
 801ba3a:	4770      	bx	lr
 801ba3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba40:	b005      	add	sp, #20
 801ba42:	bc70      	pop	{r4, r5, r6}
 801ba44:	4770      	bx	lr
 801ba46:	bf00      	nop
 801ba48:	25c17d04 	.word	0x25c17d04
 801ba4c:	3b9aca00 	.word	0x3b9aca00

0801ba50 <on_status>:
 801ba50:	b082      	sub	sp, #8
 801ba52:	b002      	add	sp, #8
 801ba54:	4770      	bx	lr
 801ba56:	bf00      	nop

0801ba58 <on_topic>:
 801ba58:	4a23      	ldr	r2, [pc, #140]	@ (801bae8 <on_topic+0x90>)
 801ba5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba5e:	6812      	ldr	r2, [r2, #0]
 801ba60:	b094      	sub	sp, #80	@ 0x50
 801ba62:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801ba64:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801ba68:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ba6a:	9312      	str	r3, [sp, #72]	@ 0x48
 801ba6c:	b3c2      	cbz	r2, 801bae0 <on_topic+0x88>
 801ba6e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801ba72:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801ba76:	e001      	b.n	801ba7c <on_topic+0x24>
 801ba78:	6852      	ldr	r2, [r2, #4]
 801ba7a:	b38a      	cbz	r2, 801bae0 <on_topic+0x88>
 801ba7c:	6894      	ldr	r4, [r2, #8]
 801ba7e:	8aa3      	ldrh	r3, [r4, #20]
 801ba80:	428b      	cmp	r3, r1
 801ba82:	d1f9      	bne.n	801ba78 <on_topic+0x20>
 801ba84:	7da3      	ldrb	r3, [r4, #22]
 801ba86:	4283      	cmp	r3, r0
 801ba88:	d1f6      	bne.n	801ba78 <on_topic+0x20>
 801ba8a:	2248      	movs	r2, #72	@ 0x48
 801ba8c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801ba90:	4668      	mov	r0, sp
 801ba92:	f001 fd56 	bl	801d542 <memcpy>
 801ba96:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801ba9a:	4620      	mov	r0, r4
 801ba9c:	cb0c      	ldmia	r3, {r2, r3}
 801ba9e:	f7fb faa5 	bl	8016fec <rmw_uxrce_get_static_input_buffer_for_entity>
 801baa2:	4607      	mov	r7, r0
 801baa4:	b1e0      	cbz	r0, 801bae0 <on_topic+0x88>
 801baa6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801baaa:	462a      	mov	r2, r5
 801baac:	4630      	mov	r0, r6
 801baae:	f108 0110 	add.w	r1, r8, #16
 801bab2:	f7fb ff7d 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801bab6:	b930      	cbnz	r0, 801bac6 <on_topic+0x6e>
 801bab8:	4639      	mov	r1, r7
 801baba:	480c      	ldr	r0, [pc, #48]	@ (801baec <on_topic+0x94>)
 801babc:	b014      	add	sp, #80	@ 0x50
 801babe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bac2:	f000 b8bd 	b.w	801bc40 <put_memory>
 801bac6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801baca:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801bace:	f000 f967 	bl	801bda0 <rmw_uros_epoch_nanos>
 801bad2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801bad6:	2305      	movs	r3, #5
 801bad8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801badc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801bae0:	b014      	add	sp, #80	@ 0x50
 801bae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bae6:	bf00      	nop
 801bae8:	240692c4 	.word	0x240692c4
 801baec:	240692b4 	.word	0x240692b4

0801baf0 <on_request>:
 801baf0:	4824      	ldr	r0, [pc, #144]	@ (801bb84 <on_request+0x94>)
 801baf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801baf6:	6800      	ldr	r0, [r0, #0]
 801baf8:	b094      	sub	sp, #80	@ 0x50
 801bafa:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801bafc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801bb00:	9113      	str	r1, [sp, #76]	@ 0x4c
 801bb02:	2800      	cmp	r0, #0
 801bb04:	d03b      	beq.n	801bb7e <on_request+0x8e>
 801bb06:	461d      	mov	r5, r3
 801bb08:	e001      	b.n	801bb0e <on_request+0x1e>
 801bb0a:	6840      	ldr	r0, [r0, #4]
 801bb0c:	b3b8      	cbz	r0, 801bb7e <on_request+0x8e>
 801bb0e:	6884      	ldr	r4, [r0, #8]
 801bb10:	8b21      	ldrh	r1, [r4, #24]
 801bb12:	4291      	cmp	r1, r2
 801bb14:	d1f9      	bne.n	801bb0a <on_request+0x1a>
 801bb16:	2248      	movs	r2, #72	@ 0x48
 801bb18:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801bb1c:	4668      	mov	r0, sp
 801bb1e:	f001 fd10 	bl	801d542 <memcpy>
 801bb22:	f104 0320 	add.w	r3, r4, #32
 801bb26:	4620      	mov	r0, r4
 801bb28:	cb0c      	ldmia	r3, {r2, r3}
 801bb2a:	f7fb fa5f 	bl	8016fec <rmw_uxrce_get_static_input_buffer_for_entity>
 801bb2e:	4680      	mov	r8, r0
 801bb30:	b328      	cbz	r0, 801bb7e <on_request+0x8e>
 801bb32:	4630      	mov	r0, r6
 801bb34:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801bb38:	463a      	mov	r2, r7
 801bb3a:	f106 0110 	add.w	r1, r6, #16
 801bb3e:	f7fb ff37 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801bb42:	b930      	cbnz	r0, 801bb52 <on_request+0x62>
 801bb44:	4641      	mov	r1, r8
 801bb46:	4810      	ldr	r0, [pc, #64]	@ (801bb88 <on_request+0x98>)
 801bb48:	b014      	add	sp, #80	@ 0x50
 801bb4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb4e:	f000 b877 	b.w	801bc40 <put_memory>
 801bb52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bb54:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801bb58:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801bb5c:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801bb60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb64:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bb68:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bb6c:	f000 f918 	bl	801bda0 <rmw_uros_epoch_nanos>
 801bb70:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801bb74:	2303      	movs	r3, #3
 801bb76:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bb7a:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801bb7e:	b014      	add	sp, #80	@ 0x50
 801bb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb84:	24069294 	.word	0x24069294
 801bb88:	240692b4 	.word	0x240692b4

0801bb8c <on_reply>:
 801bb8c:	4822      	ldr	r0, [pc, #136]	@ (801bc18 <on_reply+0x8c>)
 801bb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb92:	6800      	ldr	r0, [r0, #0]
 801bb94:	b094      	sub	sp, #80	@ 0x50
 801bb96:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801bb98:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801bb9c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801bb9e:	b3b8      	cbz	r0, 801bc10 <on_reply+0x84>
 801bba0:	461d      	mov	r5, r3
 801bba2:	e001      	b.n	801bba8 <on_reply+0x1c>
 801bba4:	6840      	ldr	r0, [r0, #4]
 801bba6:	b398      	cbz	r0, 801bc10 <on_reply+0x84>
 801bba8:	6884      	ldr	r4, [r0, #8]
 801bbaa:	8b21      	ldrh	r1, [r4, #24]
 801bbac:	4291      	cmp	r1, r2
 801bbae:	d1f9      	bne.n	801bba4 <on_reply+0x18>
 801bbb0:	2248      	movs	r2, #72	@ 0x48
 801bbb2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801bbb6:	4668      	mov	r0, sp
 801bbb8:	f001 fcc3 	bl	801d542 <memcpy>
 801bbbc:	f104 0320 	add.w	r3, r4, #32
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	cb0c      	ldmia	r3, {r2, r3}
 801bbc4:	f7fb fa12 	bl	8016fec <rmw_uxrce_get_static_input_buffer_for_entity>
 801bbc8:	4680      	mov	r8, r0
 801bbca:	b308      	cbz	r0, 801bc10 <on_reply+0x84>
 801bbcc:	4630      	mov	r0, r6
 801bbce:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801bbd2:	463a      	mov	r2, r7
 801bbd4:	f106 0110 	add.w	r1, r6, #16
 801bbd8:	f7fb feea 	bl	80179b0 <ucdr_deserialize_array_uint8_t>
 801bbdc:	b930      	cbnz	r0, 801bbec <on_reply+0x60>
 801bbde:	4641      	mov	r1, r8
 801bbe0:	480e      	ldr	r0, [pc, #56]	@ (801bc1c <on_reply+0x90>)
 801bbe2:	b014      	add	sp, #80	@ 0x50
 801bbe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bbe8:	f000 b82a 	b.w	801bc40 <put_memory>
 801bbec:	2200      	movs	r2, #0
 801bbee:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801bbf2:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801bbf6:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801bbfa:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801bbfe:	f000 f8cf 	bl	801bda0 <rmw_uros_epoch_nanos>
 801bc02:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801bc06:	2304      	movs	r3, #4
 801bc08:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bc0c:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801bc10:	b014      	add	sp, #80	@ 0x50
 801bc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc16:	bf00      	nop
 801bc18:	240649a8 	.word	0x240649a8
 801bc1c:	240692b4 	.word	0x240692b4

0801bc20 <get_memory>:
 801bc20:	4603      	mov	r3, r0
 801bc22:	6840      	ldr	r0, [r0, #4]
 801bc24:	b158      	cbz	r0, 801bc3e <get_memory+0x1e>
 801bc26:	6842      	ldr	r2, [r0, #4]
 801bc28:	605a      	str	r2, [r3, #4]
 801bc2a:	b10a      	cbz	r2, 801bc30 <get_memory+0x10>
 801bc2c:	2100      	movs	r1, #0
 801bc2e:	6011      	str	r1, [r2, #0]
 801bc30:	681a      	ldr	r2, [r3, #0]
 801bc32:	6042      	str	r2, [r0, #4]
 801bc34:	b102      	cbz	r2, 801bc38 <get_memory+0x18>
 801bc36:	6010      	str	r0, [r2, #0]
 801bc38:	2200      	movs	r2, #0
 801bc3a:	6002      	str	r2, [r0, #0]
 801bc3c:	6018      	str	r0, [r3, #0]
 801bc3e:	4770      	bx	lr

0801bc40 <put_memory>:
 801bc40:	680b      	ldr	r3, [r1, #0]
 801bc42:	b10b      	cbz	r3, 801bc48 <put_memory+0x8>
 801bc44:	684a      	ldr	r2, [r1, #4]
 801bc46:	605a      	str	r2, [r3, #4]
 801bc48:	684a      	ldr	r2, [r1, #4]
 801bc4a:	b102      	cbz	r2, 801bc4e <put_memory+0xe>
 801bc4c:	6013      	str	r3, [r2, #0]
 801bc4e:	6803      	ldr	r3, [r0, #0]
 801bc50:	428b      	cmp	r3, r1
 801bc52:	6843      	ldr	r3, [r0, #4]
 801bc54:	bf08      	it	eq
 801bc56:	6002      	streq	r2, [r0, #0]
 801bc58:	604b      	str	r3, [r1, #4]
 801bc5a:	b103      	cbz	r3, 801bc5e <put_memory+0x1e>
 801bc5c:	6019      	str	r1, [r3, #0]
 801bc5e:	2300      	movs	r3, #0
 801bc60:	600b      	str	r3, [r1, #0]
 801bc62:	6041      	str	r1, [r0, #4]
 801bc64:	4770      	bx	lr
 801bc66:	bf00      	nop

0801bc68 <rmw_create_guard_condition>:
 801bc68:	b538      	push	{r3, r4, r5, lr}
 801bc6a:	4605      	mov	r5, r0
 801bc6c:	4808      	ldr	r0, [pc, #32]	@ (801bc90 <rmw_create_guard_condition+0x28>)
 801bc6e:	f7ff ffd7 	bl	801bc20 <get_memory>
 801bc72:	4603      	mov	r3, r0
 801bc74:	b148      	cbz	r0, 801bc8a <rmw_create_guard_condition+0x22>
 801bc76:	6884      	ldr	r4, [r0, #8]
 801bc78:	2300      	movs	r3, #0
 801bc7a:	61e5      	str	r5, [r4, #28]
 801bc7c:	7423      	strb	r3, [r4, #16]
 801bc7e:	f7f9 fd15 	bl	80156ac <rmw_get_implementation_identifier>
 801bc82:	f104 0314 	add.w	r3, r4, #20
 801bc86:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	bd38      	pop	{r3, r4, r5, pc}
 801bc8e:	bf00      	nop
 801bc90:	24069254 	.word	0x24069254

0801bc94 <rmw_destroy_guard_condition>:
 801bc94:	b508      	push	{r3, lr}
 801bc96:	4b08      	ldr	r3, [pc, #32]	@ (801bcb8 <rmw_destroy_guard_condition+0x24>)
 801bc98:	6819      	ldr	r1, [r3, #0]
 801bc9a:	b911      	cbnz	r1, 801bca2 <rmw_destroy_guard_condition+0xe>
 801bc9c:	e00a      	b.n	801bcb4 <rmw_destroy_guard_condition+0x20>
 801bc9e:	6849      	ldr	r1, [r1, #4]
 801bca0:	b141      	cbz	r1, 801bcb4 <rmw_destroy_guard_condition+0x20>
 801bca2:	688b      	ldr	r3, [r1, #8]
 801bca4:	3314      	adds	r3, #20
 801bca6:	4298      	cmp	r0, r3
 801bca8:	d1f9      	bne.n	801bc9e <rmw_destroy_guard_condition+0xa>
 801bcaa:	4803      	ldr	r0, [pc, #12]	@ (801bcb8 <rmw_destroy_guard_condition+0x24>)
 801bcac:	f7ff ffc8 	bl	801bc40 <put_memory>
 801bcb0:	2000      	movs	r0, #0
 801bcb2:	bd08      	pop	{r3, pc}
 801bcb4:	2001      	movs	r0, #1
 801bcb6:	bd08      	pop	{r3, pc}
 801bcb8:	24069254 	.word	0x24069254

0801bcbc <create_topic>:
 801bcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcc0:	4605      	mov	r5, r0
 801bcc2:	b084      	sub	sp, #16
 801bcc4:	4822      	ldr	r0, [pc, #136]	@ (801bd50 <create_topic+0x94>)
 801bcc6:	460f      	mov	r7, r1
 801bcc8:	4616      	mov	r6, r2
 801bcca:	f7ff ffa9 	bl	801bc20 <get_memory>
 801bcce:	4604      	mov	r4, r0
 801bcd0:	2800      	cmp	r0, #0
 801bcd2:	d039      	beq.n	801bd48 <create_topic+0x8c>
 801bcd4:	692b      	ldr	r3, [r5, #16]
 801bcd6:	2102      	movs	r1, #2
 801bcd8:	6884      	ldr	r4, [r0, #8]
 801bcda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801bcde:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801bd58 <create_topic+0x9c>
 801bce2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801bce6:	1c42      	adds	r2, r0, #1
 801bce8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801bcec:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801bcf0:	f7fc f9c0 	bl	8018074 <uxr_object_id>
 801bcf4:	223c      	movs	r2, #60	@ 0x3c
 801bcf6:	6120      	str	r0, [r4, #16]
 801bcf8:	4641      	mov	r1, r8
 801bcfa:	4638      	mov	r0, r7
 801bcfc:	f7fb fb70 	bl	80173e0 <generate_topic_name>
 801bd00:	b1f0      	cbz	r0, 801bd40 <create_topic+0x84>
 801bd02:	4f14      	ldr	r7, [pc, #80]	@ (801bd54 <create_topic+0x98>)
 801bd04:	4630      	mov	r0, r6
 801bd06:	2264      	movs	r2, #100	@ 0x64
 801bd08:	4639      	mov	r1, r7
 801bd0a:	f7fb fb3b 	bl	8017384 <generate_type_name>
 801bd0e:	b1b8      	cbz	r0, 801bd40 <create_topic+0x84>
 801bd10:	6928      	ldr	r0, [r5, #16]
 801bd12:	2106      	movs	r1, #6
 801bd14:	696b      	ldr	r3, [r5, #20]
 801bd16:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801bd1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bd1e:	f8cd 8000 	str.w	r8, [sp]
 801bd22:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801bd26:	6811      	ldr	r1, [r2, #0]
 801bd28:	6922      	ldr	r2, [r4, #16]
 801bd2a:	f7fb ff27 	bl	8017b7c <uxr_buffer_create_topic_bin>
 801bd2e:	4602      	mov	r2, r0
 801bd30:	6928      	ldr	r0, [r5, #16]
 801bd32:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801bd36:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801bd3a:	f7fb fa57 	bl	80171ec <run_xrce_session>
 801bd3e:	b918      	cbnz	r0, 801bd48 <create_topic+0x8c>
 801bd40:	4620      	mov	r0, r4
 801bd42:	2400      	movs	r4, #0
 801bd44:	f7fb f946 	bl	8016fd4 <rmw_uxrce_fini_topic_memory>
 801bd48:	4620      	mov	r0, r4
 801bd4a:	b004      	add	sp, #16
 801bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd50:	240692d4 	.word	0x240692d4
 801bd54:	24069348 	.word	0x24069348
 801bd58:	2406930c 	.word	0x2406930c

0801bd5c <destroy_topic>:
 801bd5c:	b538      	push	{r3, r4, r5, lr}
 801bd5e:	6985      	ldr	r5, [r0, #24]
 801bd60:	b1dd      	cbz	r5, 801bd9a <destroy_topic+0x3e>
 801bd62:	4604      	mov	r4, r0
 801bd64:	6928      	ldr	r0, [r5, #16]
 801bd66:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801bd6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bd6e:	6922      	ldr	r2, [r4, #16]
 801bd70:	6819      	ldr	r1, [r3, #0]
 801bd72:	f7fb fe85 	bl	8017a80 <uxr_buffer_delete_entity>
 801bd76:	4602      	mov	r2, r0
 801bd78:	6928      	ldr	r0, [r5, #16]
 801bd7a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801bd7e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801bd82:	f7fb fa33 	bl	80171ec <run_xrce_session>
 801bd86:	4603      	mov	r3, r0
 801bd88:	4620      	mov	r0, r4
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	bf14      	ite	ne
 801bd8e:	2400      	movne	r4, #0
 801bd90:	2402      	moveq	r4, #2
 801bd92:	f7fb f91f 	bl	8016fd4 <rmw_uxrce_fini_topic_memory>
 801bd96:	4620      	mov	r0, r4
 801bd98:	bd38      	pop	{r3, r4, r5, pc}
 801bd9a:	2401      	movs	r4, #1
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	bd38      	pop	{r3, r4, r5, pc}

0801bda0 <rmw_uros_epoch_nanos>:
 801bda0:	4b05      	ldr	r3, [pc, #20]	@ (801bdb8 <rmw_uros_epoch_nanos+0x18>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	b123      	cbz	r3, 801bdb0 <rmw_uros_epoch_nanos+0x10>
 801bda6:	6898      	ldr	r0, [r3, #8]
 801bda8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bdac:	f7fc bbd8 	b.w	8018560 <uxr_epoch_nanos>
 801bdb0:	2000      	movs	r0, #0
 801bdb2:	2100      	movs	r1, #0
 801bdb4:	4770      	bx	lr
 801bdb6:	bf00      	nop
 801bdb8:	240692a4 	.word	0x240692a4

0801bdbc <rosidl_runtime_c__String__init>:
 801bdbc:	b510      	push	{r4, lr}
 801bdbe:	4604      	mov	r4, r0
 801bdc0:	b086      	sub	sp, #24
 801bdc2:	b170      	cbz	r0, 801bde2 <rosidl_runtime_c__String__init+0x26>
 801bdc4:	a801      	add	r0, sp, #4
 801bdc6:	f7f5 f94d 	bl	8011064 <rcutils_get_default_allocator>
 801bdca:	9b01      	ldr	r3, [sp, #4]
 801bdcc:	9905      	ldr	r1, [sp, #20]
 801bdce:	2001      	movs	r0, #1
 801bdd0:	4798      	blx	r3
 801bdd2:	6020      	str	r0, [r4, #0]
 801bdd4:	b128      	cbz	r0, 801bde2 <rosidl_runtime_c__String__init+0x26>
 801bdd6:	2100      	movs	r1, #0
 801bdd8:	2201      	movs	r2, #1
 801bdda:	7001      	strb	r1, [r0, #0]
 801bddc:	4610      	mov	r0, r2
 801bdde:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801bde2:	b006      	add	sp, #24
 801bde4:	bd10      	pop	{r4, pc}
 801bde6:	bf00      	nop

0801bde8 <rosidl_runtime_c__String__fini>:
 801bde8:	b320      	cbz	r0, 801be34 <rosidl_runtime_c__String__fini+0x4c>
 801bdea:	6803      	ldr	r3, [r0, #0]
 801bdec:	b510      	push	{r4, lr}
 801bdee:	4604      	mov	r4, r0
 801bdf0:	b086      	sub	sp, #24
 801bdf2:	b173      	cbz	r3, 801be12 <rosidl_runtime_c__String__fini+0x2a>
 801bdf4:	6883      	ldr	r3, [r0, #8]
 801bdf6:	b1f3      	cbz	r3, 801be36 <rosidl_runtime_c__String__fini+0x4e>
 801bdf8:	a801      	add	r0, sp, #4
 801bdfa:	f7f5 f933 	bl	8011064 <rcutils_get_default_allocator>
 801bdfe:	9b02      	ldr	r3, [sp, #8]
 801be00:	9905      	ldr	r1, [sp, #20]
 801be02:	6820      	ldr	r0, [r4, #0]
 801be04:	4798      	blx	r3
 801be06:	2300      	movs	r3, #0
 801be08:	e9c4 3300 	strd	r3, r3, [r4]
 801be0c:	60a3      	str	r3, [r4, #8]
 801be0e:	b006      	add	sp, #24
 801be10:	bd10      	pop	{r4, pc}
 801be12:	6843      	ldr	r3, [r0, #4]
 801be14:	b9db      	cbnz	r3, 801be4e <rosidl_runtime_c__String__fini+0x66>
 801be16:	6883      	ldr	r3, [r0, #8]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d0f8      	beq.n	801be0e <rosidl_runtime_c__String__fini+0x26>
 801be1c:	4b12      	ldr	r3, [pc, #72]	@ (801be68 <rosidl_runtime_c__String__fini+0x80>)
 801be1e:	2251      	movs	r2, #81	@ 0x51
 801be20:	2101      	movs	r1, #1
 801be22:	4812      	ldr	r0, [pc, #72]	@ (801be6c <rosidl_runtime_c__String__fini+0x84>)
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	68db      	ldr	r3, [r3, #12]
 801be28:	f001 f8f0 	bl	801d00c <fwrite>
 801be2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801be30:	f000 fdac 	bl	801c98c <exit>
 801be34:	4770      	bx	lr
 801be36:	4b0c      	ldr	r3, [pc, #48]	@ (801be68 <rosidl_runtime_c__String__fini+0x80>)
 801be38:	224c      	movs	r2, #76	@ 0x4c
 801be3a:	2101      	movs	r1, #1
 801be3c:	480c      	ldr	r0, [pc, #48]	@ (801be70 <rosidl_runtime_c__String__fini+0x88>)
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	68db      	ldr	r3, [r3, #12]
 801be42:	f001 f8e3 	bl	801d00c <fwrite>
 801be46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801be4a:	f000 fd9f 	bl	801c98c <exit>
 801be4e:	4b06      	ldr	r3, [pc, #24]	@ (801be68 <rosidl_runtime_c__String__fini+0x80>)
 801be50:	224e      	movs	r2, #78	@ 0x4e
 801be52:	2101      	movs	r1, #1
 801be54:	4807      	ldr	r0, [pc, #28]	@ (801be74 <rosidl_runtime_c__String__fini+0x8c>)
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	68db      	ldr	r3, [r3, #12]
 801be5a:	f001 f8d7 	bl	801d00c <fwrite>
 801be5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801be62:	f000 fd93 	bl	801c98c <exit>
 801be66:	bf00      	nop
 801be68:	240013a0 	.word	0x240013a0
 801be6c:	080208b4 	.word	0x080208b4
 801be70:	08020814 	.word	0x08020814
 801be74:	08020864 	.word	0x08020864

0801be78 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 801be78:	3800      	subs	r0, #0
 801be7a:	bf18      	it	ne
 801be7c:	2001      	movne	r0, #1
 801be7e:	4770      	bx	lr

0801be80 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 801be80:	4770      	bx	lr
 801be82:	bf00      	nop

0801be84 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 801be84:	3800      	subs	r0, #0
 801be86:	bf18      	it	ne
 801be88:	2001      	movne	r0, #1
 801be8a:	4770      	bx	lr

0801be8c <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 801be8c:	4770      	bx	lr
 801be8e:	bf00      	nop

0801be90 <ucdr_serialize_string>:
 801be90:	b510      	push	{r4, lr}
 801be92:	b082      	sub	sp, #8
 801be94:	4604      	mov	r4, r0
 801be96:	4608      	mov	r0, r1
 801be98:	9101      	str	r1, [sp, #4]
 801be9a:	f7e4 fa2b 	bl	80002f4 <strlen>
 801be9e:	4602      	mov	r2, r0
 801bea0:	9901      	ldr	r1, [sp, #4]
 801bea2:	4620      	mov	r0, r4
 801bea4:	3201      	adds	r2, #1
 801bea6:	b002      	add	sp, #8
 801bea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801beac:	f7f5 bec0 	b.w	8011c30 <ucdr_serialize_sequence_char>

0801beb0 <ucdr_deserialize_string>:
 801beb0:	b500      	push	{lr}
 801beb2:	b083      	sub	sp, #12
 801beb4:	ab01      	add	r3, sp, #4
 801beb6:	f7f5 fecd 	bl	8011c54 <ucdr_deserialize_sequence_char>
 801beba:	b003      	add	sp, #12
 801bebc:	f85d fb04 	ldr.w	pc, [sp], #4

0801bec0 <uxr_init_input_best_effort_stream>:
 801bec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bec4:	8003      	strh	r3, [r0, #0]
 801bec6:	4770      	bx	lr

0801bec8 <uxr_reset_input_best_effort_stream>:
 801bec8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801becc:	8003      	strh	r3, [r0, #0]
 801bece:	4770      	bx	lr

0801bed0 <uxr_receive_best_effort_message>:
 801bed0:	b538      	push	{r3, r4, r5, lr}
 801bed2:	4604      	mov	r4, r0
 801bed4:	8800      	ldrh	r0, [r0, #0]
 801bed6:	460d      	mov	r5, r1
 801bed8:	f000 fd24 	bl	801c924 <uxr_seq_num_cmp>
 801bedc:	4603      	mov	r3, r0
 801bede:	0fc0      	lsrs	r0, r0, #31
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	bfb8      	it	lt
 801bee4:	8025      	strhlt	r5, [r4, #0]
 801bee6:	bd38      	pop	{r3, r4, r5, pc}

0801bee8 <on_full_input_buffer>:
 801bee8:	b570      	push	{r4, r5, r6, lr}
 801beea:	460c      	mov	r4, r1
 801beec:	4605      	mov	r5, r0
 801beee:	8908      	ldrh	r0, [r1, #8]
 801bef0:	682b      	ldr	r3, [r5, #0]
 801bef2:	7d26      	ldrb	r6, [r4, #20]
 801bef4:	e9d1 1200 	ldrd	r1, r2, [r1]
 801bef8:	fbb2 f2f0 	udiv	r2, r2, r0
 801befc:	eba3 0c01 	sub.w	ip, r3, r1
 801bf00:	fbbc fcf2 	udiv	ip, ip, r2
 801bf04:	f10c 0c01 	add.w	ip, ip, #1
 801bf08:	fa1f f38c 	uxth.w	r3, ip
 801bf0c:	fbb3 fcf0 	udiv	ip, r3, r0
 801bf10:	fb00 331c 	mls	r3, r0, ip, r3
 801bf14:	b29b      	uxth	r3, r3
 801bf16:	fb02 f303 	mul.w	r3, r2, r3
 801bf1a:	1d18      	adds	r0, r3, #4
 801bf1c:	4408      	add	r0, r1
 801bf1e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801bf22:	b116      	cbz	r6, 801bf2a <on_full_input_buffer+0x42>
 801bf24:	2600      	movs	r6, #0
 801bf26:	f840 6c04 	str.w	r6, [r0, #-4]
 801bf2a:	2a03      	cmp	r2, #3
 801bf2c:	d801      	bhi.n	801bf32 <on_full_input_buffer+0x4a>
 801bf2e:	2001      	movs	r0, #1
 801bf30:	bd70      	pop	{r4, r5, r6, pc}
 801bf32:	3308      	adds	r3, #8
 801bf34:	4628      	mov	r0, r5
 801bf36:	3a04      	subs	r2, #4
 801bf38:	4419      	add	r1, r3
 801bf3a:	692b      	ldr	r3, [r5, #16]
 801bf3c:	f7f4 f832 	bl	800ffa4 <ucdr_init_buffer_origin>
 801bf40:	4628      	mov	r0, r5
 801bf42:	4622      	mov	r2, r4
 801bf44:	4902      	ldr	r1, [pc, #8]	@ (801bf50 <on_full_input_buffer+0x68>)
 801bf46:	f7f4 f809 	bl	800ff5c <ucdr_set_on_full_buffer_callback>
 801bf4a:	2000      	movs	r0, #0
 801bf4c:	bd70      	pop	{r4, r5, r6, pc}
 801bf4e:	bf00      	nop
 801bf50:	0801bee9 	.word	0x0801bee9

0801bf54 <uxr_init_input_reliable_stream>:
 801bf54:	b510      	push	{r4, lr}
 801bf56:	e9c0 1200 	strd	r1, r2, [r0]
 801bf5a:	2400      	movs	r4, #0
 801bf5c:	9a02      	ldr	r2, [sp, #8]
 801bf5e:	8103      	strh	r3, [r0, #8]
 801bf60:	6102      	str	r2, [r0, #16]
 801bf62:	7504      	strb	r4, [r0, #20]
 801bf64:	b1c3      	cbz	r3, 801bf98 <uxr_init_input_reliable_stream+0x44>
 801bf66:	600c      	str	r4, [r1, #0]
 801bf68:	8901      	ldrh	r1, [r0, #8]
 801bf6a:	2901      	cmp	r1, #1
 801bf6c:	d914      	bls.n	801bf98 <uxr_init_input_reliable_stream+0x44>
 801bf6e:	f04f 0c01 	mov.w	ip, #1
 801bf72:	6843      	ldr	r3, [r0, #4]
 801bf74:	f10c 0e01 	add.w	lr, ip, #1
 801bf78:	fbbc f2f1 	udiv	r2, ip, r1
 801bf7c:	fbb3 f3f1 	udiv	r3, r3, r1
 801bf80:	fb01 c212 	mls	r2, r1, r2, ip
 801bf84:	fa1f fc8e 	uxth.w	ip, lr
 801bf88:	b292      	uxth	r2, r2
 801bf8a:	fb02 f303 	mul.w	r3, r2, r3
 801bf8e:	6802      	ldr	r2, [r0, #0]
 801bf90:	50d4      	str	r4, [r2, r3]
 801bf92:	8901      	ldrh	r1, [r0, #8]
 801bf94:	4561      	cmp	r1, ip
 801bf96:	d8ec      	bhi.n	801bf72 <uxr_init_input_reliable_stream+0x1e>
 801bf98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf9c:	60c3      	str	r3, [r0, #12]
 801bf9e:	bd10      	pop	{r4, pc}

0801bfa0 <uxr_reset_input_reliable_stream>:
 801bfa0:	8901      	ldrh	r1, [r0, #8]
 801bfa2:	b1d9      	cbz	r1, 801bfdc <uxr_reset_input_reliable_stream+0x3c>
 801bfa4:	b510      	push	{r4, lr}
 801bfa6:	f04f 0e00 	mov.w	lr, #0
 801bfaa:	46f4      	mov	ip, lr
 801bfac:	4674      	mov	r4, lr
 801bfae:	6843      	ldr	r3, [r0, #4]
 801bfb0:	f10e 0e01 	add.w	lr, lr, #1
 801bfb4:	fbbc f2f1 	udiv	r2, ip, r1
 801bfb8:	fbb3 f3f1 	udiv	r3, r3, r1
 801bfbc:	fb01 c212 	mls	r2, r1, r2, ip
 801bfc0:	fa1f fc8e 	uxth.w	ip, lr
 801bfc4:	b292      	uxth	r2, r2
 801bfc6:	fb02 f303 	mul.w	r3, r2, r3
 801bfca:	6802      	ldr	r2, [r0, #0]
 801bfcc:	50d4      	str	r4, [r2, r3]
 801bfce:	8901      	ldrh	r1, [r0, #8]
 801bfd0:	4561      	cmp	r1, ip
 801bfd2:	d8ec      	bhi.n	801bfae <uxr_reset_input_reliable_stream+0xe>
 801bfd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bfd8:	60c3      	str	r3, [r0, #12]
 801bfda:	bd10      	pop	{r4, pc}
 801bfdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bfe0:	60c3      	str	r3, [r0, #12]
 801bfe2:	4770      	bx	lr

0801bfe4 <uxr_receive_reliable_message>:
 801bfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bfe8:	4604      	mov	r4, r0
 801bfea:	460d      	mov	r5, r1
 801bfec:	8901      	ldrh	r1, [r0, #8]
 801bfee:	4617      	mov	r7, r2
 801bff0:	8980      	ldrh	r0, [r0, #12]
 801bff2:	4698      	mov	r8, r3
 801bff4:	f000 fc8e 	bl	801c914 <uxr_seq_num_add>
 801bff8:	4629      	mov	r1, r5
 801bffa:	4606      	mov	r6, r0
 801bffc:	89a0      	ldrh	r0, [r4, #12]
 801bffe:	f000 fc91 	bl	801c924 <uxr_seq_num_cmp>
 801c002:	2800      	cmp	r0, #0
 801c004:	db0a      	blt.n	801c01c <uxr_receive_reliable_message+0x38>
 801c006:	2600      	movs	r6, #0
 801c008:	4629      	mov	r1, r5
 801c00a:	89e0      	ldrh	r0, [r4, #14]
 801c00c:	f000 fc8a 	bl	801c924 <uxr_seq_num_cmp>
 801c010:	2800      	cmp	r0, #0
 801c012:	da00      	bge.n	801c016 <uxr_receive_reliable_message+0x32>
 801c014:	81e5      	strh	r5, [r4, #14]
 801c016:	4630      	mov	r0, r6
 801c018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c01c:	4630      	mov	r0, r6
 801c01e:	4629      	mov	r1, r5
 801c020:	f000 fc80 	bl	801c924 <uxr_seq_num_cmp>
 801c024:	2800      	cmp	r0, #0
 801c026:	dbee      	blt.n	801c006 <uxr_receive_reliable_message+0x22>
 801c028:	6923      	ldr	r3, [r4, #16]
 801c02a:	4638      	mov	r0, r7
 801c02c:	4798      	blx	r3
 801c02e:	4681      	mov	r9, r0
 801c030:	2101      	movs	r1, #1
 801c032:	89a0      	ldrh	r0, [r4, #12]
 801c034:	f000 fc6e 	bl	801c914 <uxr_seq_num_add>
 801c038:	f1b9 0f00 	cmp.w	r9, #0
 801c03c:	bf08      	it	eq
 801c03e:	4285      	cmpeq	r5, r0
 801c040:	bf0c      	ite	eq
 801c042:	2601      	moveq	r6, #1
 801c044:	2600      	movne	r6, #0
 801c046:	d104      	bne.n	801c052 <uxr_receive_reliable_message+0x6e>
 801c048:	2300      	movs	r3, #0
 801c04a:	9a08      	ldr	r2, [sp, #32]
 801c04c:	81a0      	strh	r0, [r4, #12]
 801c04e:	7013      	strb	r3, [r2, #0]
 801c050:	e7da      	b.n	801c008 <uxr_receive_reliable_message+0x24>
 801c052:	8922      	ldrh	r2, [r4, #8]
 801c054:	6863      	ldr	r3, [r4, #4]
 801c056:	fbb5 f0f2 	udiv	r0, r5, r2
 801c05a:	fbb3 f3f2 	udiv	r3, r3, r2
 801c05e:	fb02 5010 	mls	r0, r2, r0, r5
 801c062:	b280      	uxth	r0, r0
 801c064:	fb03 f000 	mul.w	r0, r3, r0
 801c068:	6823      	ldr	r3, [r4, #0]
 801c06a:	3004      	adds	r0, #4
 801c06c:	4418      	add	r0, r3
 801c06e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d1c7      	bne.n	801c006 <uxr_receive_reliable_message+0x22>
 801c076:	4639      	mov	r1, r7
 801c078:	4642      	mov	r2, r8
 801c07a:	f001 fa62 	bl	801d542 <memcpy>
 801c07e:	8921      	ldrh	r1, [r4, #8]
 801c080:	6863      	ldr	r3, [r4, #4]
 801c082:	fbb5 f2f1 	udiv	r2, r5, r1
 801c086:	fbb3 f3f1 	udiv	r3, r3, r1
 801c08a:	fb01 5212 	mls	r2, r1, r2, r5
 801c08e:	b292      	uxth	r2, r2
 801c090:	fb02 f303 	mul.w	r3, r2, r3
 801c094:	6822      	ldr	r2, [r4, #0]
 801c096:	f842 8003 	str.w	r8, [r2, r3]
 801c09a:	2301      	movs	r3, #1
 801c09c:	9a08      	ldr	r2, [sp, #32]
 801c09e:	7013      	strb	r3, [r2, #0]
 801c0a0:	f1b9 0f00 	cmp.w	r9, #0
 801c0a4:	d0af      	beq.n	801c006 <uxr_receive_reliable_message+0x22>
 801c0a6:	89a6      	ldrh	r6, [r4, #12]
 801c0a8:	2101      	movs	r1, #1
 801c0aa:	4630      	mov	r0, r6
 801c0ac:	f000 fc32 	bl	801c914 <uxr_seq_num_add>
 801c0b0:	8921      	ldrh	r1, [r4, #8]
 801c0b2:	6863      	ldr	r3, [r4, #4]
 801c0b4:	4606      	mov	r6, r0
 801c0b6:	fbb0 f2f1 	udiv	r2, r0, r1
 801c0ba:	fbb3 f3f1 	udiv	r3, r3, r1
 801c0be:	fb01 0212 	mls	r2, r1, r2, r0
 801c0c2:	6820      	ldr	r0, [r4, #0]
 801c0c4:	b292      	uxth	r2, r2
 801c0c6:	fb02 f303 	mul.w	r3, r2, r3
 801c0ca:	3304      	adds	r3, #4
 801c0cc:	4418      	add	r0, r3
 801c0ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d097      	beq.n	801c006 <uxr_receive_reliable_message+0x22>
 801c0d6:	6923      	ldr	r3, [r4, #16]
 801c0d8:	4798      	blx	r3
 801c0da:	2802      	cmp	r0, #2
 801c0dc:	d002      	beq.n	801c0e4 <uxr_receive_reliable_message+0x100>
 801c0de:	2801      	cmp	r0, #1
 801c0e0:	d0e2      	beq.n	801c0a8 <uxr_receive_reliable_message+0xc4>
 801c0e2:	e790      	b.n	801c006 <uxr_receive_reliable_message+0x22>
 801c0e4:	2601      	movs	r6, #1
 801c0e6:	e78f      	b.n	801c008 <uxr_receive_reliable_message+0x24>

0801c0e8 <uxr_next_input_reliable_buffer_available>:
 801c0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0ec:	4604      	mov	r4, r0
 801c0ee:	460f      	mov	r7, r1
 801c0f0:	8980      	ldrh	r0, [r0, #12]
 801c0f2:	2101      	movs	r1, #1
 801c0f4:	4690      	mov	r8, r2
 801c0f6:	f000 fc0d 	bl	801c914 <uxr_seq_num_add>
 801c0fa:	8922      	ldrh	r2, [r4, #8]
 801c0fc:	6866      	ldr	r6, [r4, #4]
 801c0fe:	fbb0 f3f2 	udiv	r3, r0, r2
 801c102:	fbb6 f6f2 	udiv	r6, r6, r2
 801c106:	fb02 0313 	mls	r3, r2, r3, r0
 801c10a:	b29b      	uxth	r3, r3
 801c10c:	fb03 f606 	mul.w	r6, r3, r6
 801c110:	6823      	ldr	r3, [r4, #0]
 801c112:	3604      	adds	r6, #4
 801c114:	441e      	add	r6, r3
 801c116:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801c11a:	f1b9 0f00 	cmp.w	r9, #0
 801c11e:	d023      	beq.n	801c168 <uxr_next_input_reliable_buffer_available+0x80>
 801c120:	4605      	mov	r5, r0
 801c122:	6923      	ldr	r3, [r4, #16]
 801c124:	4630      	mov	r0, r6
 801c126:	4798      	blx	r3
 801c128:	4682      	mov	sl, r0
 801c12a:	b300      	cbz	r0, 801c16e <uxr_next_input_reliable_buffer_available+0x86>
 801c12c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801c130:	2101      	movs	r1, #1
 801c132:	4650      	mov	r0, sl
 801c134:	f000 fbee 	bl	801c914 <uxr_seq_num_add>
 801c138:	8921      	ldrh	r1, [r4, #8]
 801c13a:	4682      	mov	sl, r0
 801c13c:	6863      	ldr	r3, [r4, #4]
 801c13e:	6820      	ldr	r0, [r4, #0]
 801c140:	fbba f2f1 	udiv	r2, sl, r1
 801c144:	fbb3 f3f1 	udiv	r3, r3, r1
 801c148:	fb01 a212 	mls	r2, r1, r2, sl
 801c14c:	b292      	uxth	r2, r2
 801c14e:	fb02 f303 	mul.w	r3, r2, r3
 801c152:	3304      	adds	r3, #4
 801c154:	4418      	add	r0, r3
 801c156:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c15a:	b12b      	cbz	r3, 801c168 <uxr_next_input_reliable_buffer_available+0x80>
 801c15c:	6923      	ldr	r3, [r4, #16]
 801c15e:	4798      	blx	r3
 801c160:	2802      	cmp	r0, #2
 801c162:	d01b      	beq.n	801c19c <uxr_next_input_reliable_buffer_available+0xb4>
 801c164:	2801      	cmp	r0, #1
 801c166:	d0e3      	beq.n	801c130 <uxr_next_input_reliable_buffer_available+0x48>
 801c168:	2000      	movs	r0, #0
 801c16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c16e:	464a      	mov	r2, r9
 801c170:	4631      	mov	r1, r6
 801c172:	4638      	mov	r0, r7
 801c174:	f7f3 ff1e 	bl	800ffb4 <ucdr_init_buffer>
 801c178:	8921      	ldrh	r1, [r4, #8]
 801c17a:	6863      	ldr	r3, [r4, #4]
 801c17c:	2001      	movs	r0, #1
 801c17e:	fbb5 f2f1 	udiv	r2, r5, r1
 801c182:	fbb3 f3f1 	udiv	r3, r3, r1
 801c186:	fb01 5212 	mls	r2, r1, r2, r5
 801c18a:	b292      	uxth	r2, r2
 801c18c:	fb02 f303 	mul.w	r3, r2, r3
 801c190:	6822      	ldr	r2, [r4, #0]
 801c192:	f842 a003 	str.w	sl, [r2, r3]
 801c196:	81a5      	strh	r5, [r4, #12]
 801c198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c19c:	8920      	ldrh	r0, [r4, #8]
 801c19e:	eb06 0108 	add.w	r1, r6, r8
 801c1a2:	6863      	ldr	r3, [r4, #4]
 801c1a4:	eba9 0208 	sub.w	r2, r9, r8
 801c1a8:	fbb5 f6f0 	udiv	r6, r5, r0
 801c1ac:	fbb3 f3f0 	udiv	r3, r3, r0
 801c1b0:	fb00 5516 	mls	r5, r0, r6, r5
 801c1b4:	2000      	movs	r0, #0
 801c1b6:	b2ad      	uxth	r5, r5
 801c1b8:	fb03 f505 	mul.w	r5, r3, r5
 801c1bc:	6823      	ldr	r3, [r4, #0]
 801c1be:	5158      	str	r0, [r3, r5]
 801c1c0:	4638      	mov	r0, r7
 801c1c2:	f7f3 fef7 	bl	800ffb4 <ucdr_init_buffer>
 801c1c6:	4638      	mov	r0, r7
 801c1c8:	4622      	mov	r2, r4
 801c1ca:	4903      	ldr	r1, [pc, #12]	@ (801c1d8 <uxr_next_input_reliable_buffer_available+0xf0>)
 801c1cc:	f7f3 fec6 	bl	800ff5c <ucdr_set_on_full_buffer_callback>
 801c1d0:	2001      	movs	r0, #1
 801c1d2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801c1d6:	e7c8      	b.n	801c16a <uxr_next_input_reliable_buffer_available+0x82>
 801c1d8:	0801bee9 	.word	0x0801bee9

0801c1dc <uxr_process_heartbeat>:
 801c1dc:	b538      	push	{r3, r4, r5, lr}
 801c1de:	4611      	mov	r1, r2
 801c1e0:	4604      	mov	r4, r0
 801c1e2:	89c0      	ldrh	r0, [r0, #14]
 801c1e4:	4615      	mov	r5, r2
 801c1e6:	f000 fb9d 	bl	801c924 <uxr_seq_num_cmp>
 801c1ea:	2800      	cmp	r0, #0
 801c1ec:	bfb8      	it	lt
 801c1ee:	81e5      	strhlt	r5, [r4, #14]
 801c1f0:	bd38      	pop	{r3, r4, r5, pc}
 801c1f2:	bf00      	nop

0801c1f4 <uxr_compute_acknack>:
 801c1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1f8:	8903      	ldrh	r3, [r0, #8]
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	460f      	mov	r7, r1
 801c1fe:	8985      	ldrh	r5, [r0, #12]
 801c200:	b1db      	cbz	r3, 801c23a <uxr_compute_acknack+0x46>
 801c202:	4628      	mov	r0, r5
 801c204:	2601      	movs	r6, #1
 801c206:	e004      	b.n	801c212 <uxr_compute_acknack+0x1e>
 801c208:	4566      	cmp	r6, ip
 801c20a:	f106 0601 	add.w	r6, r6, #1
 801c20e:	d214      	bcs.n	801c23a <uxr_compute_acknack+0x46>
 801c210:	89a0      	ldrh	r0, [r4, #12]
 801c212:	b2b1      	uxth	r1, r6
 801c214:	f000 fb7e 	bl	801c914 <uxr_seq_num_add>
 801c218:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c21c:	fbb0 f2fc 	udiv	r2, r0, ip
 801c220:	e9d4 1300 	ldrd	r1, r3, [r4]
 801c224:	fb0c 0212 	mls	r2, ip, r2, r0
 801c228:	fbb3 f3fc 	udiv	r3, r3, ip
 801c22c:	b292      	uxth	r2, r2
 801c22e:	fb02 f303 	mul.w	r3, r2, r3
 801c232:	58cb      	ldr	r3, [r1, r3]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d1e7      	bne.n	801c208 <uxr_compute_acknack+0x14>
 801c238:	4605      	mov	r5, r0
 801c23a:	803d      	strh	r5, [r7, #0]
 801c23c:	2101      	movs	r1, #1
 801c23e:	89e6      	ldrh	r6, [r4, #14]
 801c240:	4628      	mov	r0, r5
 801c242:	f000 fb6b 	bl	801c91c <uxr_seq_num_sub>
 801c246:	4601      	mov	r1, r0
 801c248:	4630      	mov	r0, r6
 801c24a:	f000 fb67 	bl	801c91c <uxr_seq_num_sub>
 801c24e:	4606      	mov	r6, r0
 801c250:	b328      	cbz	r0, 801c29e <uxr_compute_acknack+0xaa>
 801c252:	f04f 0900 	mov.w	r9, #0
 801c256:	f04f 0801 	mov.w	r8, #1
 801c25a:	464d      	mov	r5, r9
 801c25c:	fa1f f189 	uxth.w	r1, r9
 801c260:	8838      	ldrh	r0, [r7, #0]
 801c262:	f000 fb57 	bl	801c914 <uxr_seq_num_add>
 801c266:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c26a:	6861      	ldr	r1, [r4, #4]
 801c26c:	fa08 fe09 	lsl.w	lr, r8, r9
 801c270:	6822      	ldr	r2, [r4, #0]
 801c272:	f109 0901 	add.w	r9, r9, #1
 801c276:	ea4e 0e05 	orr.w	lr, lr, r5
 801c27a:	fbb0 f3fc 	udiv	r3, r0, ip
 801c27e:	fbb1 f1fc 	udiv	r1, r1, ip
 801c282:	fb03 001c 	mls	r0, r3, ip, r0
 801c286:	b283      	uxth	r3, r0
 801c288:	fb01 f303 	mul.w	r3, r1, r3
 801c28c:	58d3      	ldr	r3, [r2, r3]
 801c28e:	b90b      	cbnz	r3, 801c294 <uxr_compute_acknack+0xa0>
 801c290:	fa1f f58e 	uxth.w	r5, lr
 801c294:	454e      	cmp	r6, r9
 801c296:	d1e1      	bne.n	801c25c <uxr_compute_acknack+0x68>
 801c298:	4628      	mov	r0, r5
 801c29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c29e:	4605      	mov	r5, r0
 801c2a0:	4628      	mov	r0, r5
 801c2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c2a6:	bf00      	nop

0801c2a8 <uxr_init_output_best_effort_stream>:
 801c2a8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801c2ac:	6001      	str	r1, [r0, #0]
 801c2ae:	7303      	strb	r3, [r0, #12]
 801c2b0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c2b4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801c2b8:	4770      	bx	lr
 801c2ba:	bf00      	nop

0801c2bc <uxr_reset_output_best_effort_stream>:
 801c2bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2c0:	7b03      	ldrb	r3, [r0, #12]
 801c2c2:	81c2      	strh	r2, [r0, #14]
 801c2c4:	6043      	str	r3, [r0, #4]
 801c2c6:	4770      	bx	lr

0801c2c8 <uxr_prepare_best_effort_buffer_to_write>:
 801c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2ca:	4604      	mov	r4, r0
 801c2cc:	b083      	sub	sp, #12
 801c2ce:	6840      	ldr	r0, [r0, #4]
 801c2d0:	460d      	mov	r5, r1
 801c2d2:	4616      	mov	r6, r2
 801c2d4:	f7fd fec0 	bl	801a058 <uxr_submessage_padding>
 801c2d8:	6863      	ldr	r3, [r4, #4]
 801c2da:	4418      	add	r0, r3
 801c2dc:	68a3      	ldr	r3, [r4, #8]
 801c2de:	1942      	adds	r2, r0, r5
 801c2e0:	4293      	cmp	r3, r2
 801c2e2:	bf2c      	ite	cs
 801c2e4:	2701      	movcs	r7, #1
 801c2e6:	2700      	movcc	r7, #0
 801c2e8:	d202      	bcs.n	801c2f0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801c2ea:	4638      	mov	r0, r7
 801c2ec:	b003      	add	sp, #12
 801c2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2f0:	9000      	str	r0, [sp, #0]
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	4630      	mov	r0, r6
 801c2f6:	6821      	ldr	r1, [r4, #0]
 801c2f8:	f7f3 fe4a 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 801c2fc:	6861      	ldr	r1, [r4, #4]
 801c2fe:	4638      	mov	r0, r7
 801c300:	4429      	add	r1, r5
 801c302:	6061      	str	r1, [r4, #4]
 801c304:	b003      	add	sp, #12
 801c306:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c308 <uxr_prepare_best_effort_buffer_to_send>:
 801c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c30c:	4604      	mov	r4, r0
 801c30e:	461d      	mov	r5, r3
 801c310:	6840      	ldr	r0, [r0, #4]
 801c312:	7b23      	ldrb	r3, [r4, #12]
 801c314:	4298      	cmp	r0, r3
 801c316:	bf8c      	ite	hi
 801c318:	2601      	movhi	r6, #1
 801c31a:	2600      	movls	r6, #0
 801c31c:	d802      	bhi.n	801c324 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801c31e:	4630      	mov	r0, r6
 801c320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c324:	4688      	mov	r8, r1
 801c326:	89e0      	ldrh	r0, [r4, #14]
 801c328:	2101      	movs	r1, #1
 801c32a:	4617      	mov	r7, r2
 801c32c:	f000 faf2 	bl	801c914 <uxr_seq_num_add>
 801c330:	6823      	ldr	r3, [r4, #0]
 801c332:	81e0      	strh	r0, [r4, #14]
 801c334:	8028      	strh	r0, [r5, #0]
 801c336:	4630      	mov	r0, r6
 801c338:	f8c8 3000 	str.w	r3, [r8]
 801c33c:	6863      	ldr	r3, [r4, #4]
 801c33e:	603b      	str	r3, [r7, #0]
 801c340:	7b23      	ldrb	r3, [r4, #12]
 801c342:	6063      	str	r3, [r4, #4]
 801c344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c348 <on_full_output_buffer>:
 801c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c34a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801c34e:	460c      	mov	r4, r1
 801c350:	6803      	ldr	r3, [r0, #0]
 801c352:	4605      	mov	r5, r0
 801c354:	7b26      	ldrb	r6, [r4, #12]
 801c356:	e9d1 1200 	ldrd	r1, r2, [r1]
 801c35a:	fbb2 f2fc 	udiv	r2, r2, ip
 801c35e:	eba3 0e01 	sub.w	lr, r3, r1
 801c362:	6903      	ldr	r3, [r0, #16]
 801c364:	fbbe fef2 	udiv	lr, lr, r2
 801c368:	f10e 0e01 	add.w	lr, lr, #1
 801c36c:	fa1f fe8e 	uxth.w	lr, lr
 801c370:	fbbe f7fc 	udiv	r7, lr, ip
 801c374:	fb0c ec17 	mls	ip, ip, r7, lr
 801c378:	fa1f fc8c 	uxth.w	ip, ip
 801c37c:	fb02 fc0c 	mul.w	ip, r2, ip
 801c380:	f851 200c 	ldr.w	r2, [r1, ip]
 801c384:	44b4      	add	ip, r6
 801c386:	1b92      	subs	r2, r2, r6
 801c388:	f10c 0c08 	add.w	ip, ip, #8
 801c38c:	3a04      	subs	r2, #4
 801c38e:	4461      	add	r1, ip
 801c390:	f7f3 fe08 	bl	800ffa4 <ucdr_init_buffer_origin>
 801c394:	4628      	mov	r0, r5
 801c396:	4622      	mov	r2, r4
 801c398:	4902      	ldr	r1, [pc, #8]	@ (801c3a4 <on_full_output_buffer+0x5c>)
 801c39a:	f7f3 fddf 	bl	800ff5c <ucdr_set_on_full_buffer_callback>
 801c39e:	2000      	movs	r0, #0
 801c3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3a2:	bf00      	nop
 801c3a4:	0801c349 	.word	0x0801c349

0801c3a8 <uxr_init_output_reliable_stream>:
 801c3a8:	b530      	push	{r4, r5, lr}
 801c3aa:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801c3ae:	8103      	strh	r3, [r0, #8]
 801c3b0:	7304      	strb	r4, [r0, #12]
 801c3b2:	e9c0 1200 	strd	r1, r2, [r0]
 801c3b6:	b1e3      	cbz	r3, 801c3f2 <uxr_init_output_reliable_stream+0x4a>
 801c3b8:	600c      	str	r4, [r1, #0]
 801c3ba:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c3be:	f1bc 0f01 	cmp.w	ip, #1
 801c3c2:	d916      	bls.n	801c3f2 <uxr_init_output_reliable_stream+0x4a>
 801c3c4:	f04f 0e01 	mov.w	lr, #1
 801c3c8:	6843      	ldr	r3, [r0, #4]
 801c3ca:	f10e 0501 	add.w	r5, lr, #1
 801c3ce:	7b04      	ldrb	r4, [r0, #12]
 801c3d0:	6801      	ldr	r1, [r0, #0]
 801c3d2:	fbbe f2fc 	udiv	r2, lr, ip
 801c3d6:	fbb3 f3fc 	udiv	r3, r3, ip
 801c3da:	fb0c e212 	mls	r2, ip, r2, lr
 801c3de:	fa1f fe85 	uxth.w	lr, r5
 801c3e2:	b292      	uxth	r2, r2
 801c3e4:	fb02 f303 	mul.w	r3, r2, r3
 801c3e8:	50cc      	str	r4, [r1, r3]
 801c3ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c3ee:	45f4      	cmp	ip, lr
 801c3f0:	d8ea      	bhi.n	801c3c8 <uxr_init_output_reliable_stream+0x20>
 801c3f2:	4b07      	ldr	r3, [pc, #28]	@ (801c410 <uxr_init_output_reliable_stream+0x68>)
 801c3f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c3f8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c3fc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801c400:	f8c0 300e 	str.w	r3, [r0, #14]
 801c404:	2300      	movs	r3, #0
 801c406:	8242      	strh	r2, [r0, #18]
 801c408:	8403      	strh	r3, [r0, #32]
 801c40a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801c40e:	bd30      	pop	{r4, r5, pc}
 801c410:	ffff0000 	.word	0xffff0000
 801c414:	00000000 	.word	0x00000000

0801c418 <uxr_reset_output_reliable_stream>:
 801c418:	8901      	ldrh	r1, [r0, #8]
 801c41a:	b510      	push	{r4, lr}
 801c41c:	b1b1      	cbz	r1, 801c44c <uxr_reset_output_reliable_stream+0x34>
 801c41e:	f04f 0e00 	mov.w	lr, #0
 801c422:	46f4      	mov	ip, lr
 801c424:	6843      	ldr	r3, [r0, #4]
 801c426:	f10e 0e01 	add.w	lr, lr, #1
 801c42a:	7b04      	ldrb	r4, [r0, #12]
 801c42c:	fbbc f2f1 	udiv	r2, ip, r1
 801c430:	fbb3 f3f1 	udiv	r3, r3, r1
 801c434:	fb01 c212 	mls	r2, r1, r2, ip
 801c438:	fa1f fc8e 	uxth.w	ip, lr
 801c43c:	b292      	uxth	r2, r2
 801c43e:	fb02 f303 	mul.w	r3, r2, r3
 801c442:	6802      	ldr	r2, [r0, #0]
 801c444:	50d4      	str	r4, [r2, r3]
 801c446:	8901      	ldrh	r1, [r0, #8]
 801c448:	4561      	cmp	r1, ip
 801c44a:	d8eb      	bhi.n	801c424 <uxr_reset_output_reliable_stream+0xc>
 801c44c:	4b08      	ldr	r3, [pc, #32]	@ (801c470 <uxr_reset_output_reliable_stream+0x58>)
 801c44e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c452:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801c468 <uxr_reset_output_reliable_stream+0x50>
 801c456:	f8c0 300e 	str.w	r3, [r0, #14]
 801c45a:	2300      	movs	r3, #0
 801c45c:	8242      	strh	r2, [r0, #18]
 801c45e:	8403      	strh	r3, [r0, #32]
 801c460:	ed80 7b06 	vstr	d7, [r0, #24]
 801c464:	bd10      	pop	{r4, pc}
 801c466:	bf00      	nop
 801c468:	ffffffff 	.word	0xffffffff
 801c46c:	7fffffff 	.word	0x7fffffff
 801c470:	ffff0000 	.word	0xffff0000

0801c474 <uxr_prepare_reliable_buffer_to_write>:
 801c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c478:	4604      	mov	r4, r0
 801c47a:	b091      	sub	sp, #68	@ 0x44
 801c47c:	8900      	ldrh	r0, [r0, #8]
 801c47e:	468b      	mov	fp, r1
 801c480:	89e6      	ldrh	r6, [r4, #14]
 801c482:	9204      	str	r2, [sp, #16]
 801c484:	6865      	ldr	r5, [r4, #4]
 801c486:	6823      	ldr	r3, [r4, #0]
 801c488:	f894 900c 	ldrb.w	r9, [r4, #12]
 801c48c:	fbb6 f2f0 	udiv	r2, r6, r0
 801c490:	fbb5 f5f0 	udiv	r5, r5, r0
 801c494:	fb00 6212 	mls	r2, r0, r2, r6
 801c498:	1f2f      	subs	r7, r5, #4
 801c49a:	b292      	uxth	r2, r2
 801c49c:	fb05 3202 	mla	r2, r5, r2, r3
 801c4a0:	1d11      	adds	r1, r2, #4
 801c4a2:	f8d2 8000 	ldr.w	r8, [r2]
 801c4a6:	9103      	str	r1, [sp, #12]
 801c4a8:	2800      	cmp	r0, #0
 801c4aa:	f000 814a 	beq.w	801c742 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801c4ae:	f04f 0c00 	mov.w	ip, #0
 801c4b2:	46e2      	mov	sl, ip
 801c4b4:	4661      	mov	r1, ip
 801c4b6:	f10c 0c01 	add.w	ip, ip, #1
 801c4ba:	fbb1 f2f0 	udiv	r2, r1, r0
 801c4be:	fb00 1212 	mls	r2, r0, r2, r1
 801c4c2:	fa1f f18c 	uxth.w	r1, ip
 801c4c6:	b292      	uxth	r2, r2
 801c4c8:	fb05 f202 	mul.w	r2, r5, r2
 801c4cc:	589a      	ldr	r2, [r3, r2]
 801c4ce:	454a      	cmp	r2, r9
 801c4d0:	d103      	bne.n	801c4da <uxr_prepare_reliable_buffer_to_write+0x66>
 801c4d2:	f10a 0a01 	add.w	sl, sl, #1
 801c4d6:	fa1f fa8a 	uxth.w	sl, sl
 801c4da:	4281      	cmp	r1, r0
 801c4dc:	d3eb      	bcc.n	801c4b6 <uxr_prepare_reliable_buffer_to_write+0x42>
 801c4de:	4640      	mov	r0, r8
 801c4e0:	2104      	movs	r1, #4
 801c4e2:	f8cd a014 	str.w	sl, [sp, #20]
 801c4e6:	f7f3 fd69 	bl	800ffbc <ucdr_alignment>
 801c4ea:	4480      	add	r8, r0
 801c4ec:	eb08 020b 	add.w	r2, r8, fp
 801c4f0:	42ba      	cmp	r2, r7
 801c4f2:	f240 80ca 	bls.w	801c68a <uxr_prepare_reliable_buffer_to_write+0x216>
 801c4f6:	7b22      	ldrb	r2, [r4, #12]
 801c4f8:	445a      	add	r2, fp
 801c4fa:	42ba      	cmp	r2, r7
 801c4fc:	f240 80b2 	bls.w	801c664 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801c500:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801c504:	b2bb      	uxth	r3, r7
 801c506:	eba2 0209 	sub.w	r2, r2, r9
 801c50a:	441a      	add	r2, r3
 801c50c:	b292      	uxth	r2, r2
 801c50e:	fb0a f902 	mul.w	r9, sl, r2
 801c512:	9205      	str	r2, [sp, #20]
 801c514:	45d9      	cmp	r9, fp
 801c516:	9206      	str	r2, [sp, #24]
 801c518:	f0c0 80b3 	bcc.w	801c682 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801c51c:	f108 0204 	add.w	r2, r8, #4
 801c520:	42ba      	cmp	r2, r7
 801c522:	f080 80da 	bcs.w	801c6da <uxr_prepare_reliable_buffer_to_write+0x266>
 801c526:	f1a3 0904 	sub.w	r9, r3, #4
 801c52a:	9b05      	ldr	r3, [sp, #20]
 801c52c:	eba9 0908 	sub.w	r9, r9, r8
 801c530:	fa1f f989 	uxth.w	r9, r9
 801c534:	ebab 0b09 	sub.w	fp, fp, r9
 801c538:	fbbb f2f3 	udiv	r2, fp, r3
 801c53c:	fb03 b312 	mls	r3, r3, r2, fp
 801c540:	2b00      	cmp	r3, #0
 801c542:	f040 80c4 	bne.w	801c6ce <uxr_prepare_reliable_buffer_to_write+0x25a>
 801c546:	b293      	uxth	r3, r2
 801c548:	4553      	cmp	r3, sl
 801c54a:	f200 809a 	bhi.w	801c682 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801c54e:	2b00      	cmp	r3, #0
 801c550:	f000 80f9 	beq.w	801c746 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801c554:	f8cd 801c 	str.w	r8, [sp, #28]
 801c558:	f04f 0a00 	mov.w	sl, #0
 801c55c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c560:	f10d 0b20 	add.w	fp, sp, #32
 801c564:	9505      	str	r5, [sp, #20]
 801c566:	461d      	mov	r5, r3
 801c568:	e000      	b.n	801c56c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801c56a:	46c1      	mov	r9, r8
 801c56c:	8922      	ldrh	r2, [r4, #8]
 801c56e:	4658      	mov	r0, fp
 801c570:	6863      	ldr	r3, [r4, #4]
 801c572:	f10a 0a01 	add.w	sl, sl, #1
 801c576:	fbb6 f1f2 	udiv	r1, r6, r2
 801c57a:	fbb3 f3f2 	udiv	r3, r3, r2
 801c57e:	fb02 6111 	mls	r1, r2, r1, r6
 801c582:	463a      	mov	r2, r7
 801c584:	b289      	uxth	r1, r1
 801c586:	fb03 f101 	mul.w	r1, r3, r1
 801c58a:	6823      	ldr	r3, [r4, #0]
 801c58c:	3104      	adds	r1, #4
 801c58e:	4419      	add	r1, r3
 801c590:	2300      	movs	r3, #0
 801c592:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801c596:	f8cd c000 	str.w	ip, [sp]
 801c59a:	f7f3 fcf9 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 801c59e:	464a      	mov	r2, r9
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	210d      	movs	r1, #13
 801c5a4:	4658      	mov	r0, fp
 801c5a6:	f7fd fd17 	bl	8019fd8 <uxr_buffer_submessage_header>
 801c5aa:	8921      	ldrh	r1, [r4, #8]
 801c5ac:	6863      	ldr	r3, [r4, #4]
 801c5ae:	4630      	mov	r0, r6
 801c5b0:	fbb6 f2f1 	udiv	r2, r6, r1
 801c5b4:	fbb3 f3f1 	udiv	r3, r3, r1
 801c5b8:	fb01 6212 	mls	r2, r1, r2, r6
 801c5bc:	2101      	movs	r1, #1
 801c5be:	b292      	uxth	r2, r2
 801c5c0:	fb02 f303 	mul.w	r3, r2, r3
 801c5c4:	6822      	ldr	r2, [r4, #0]
 801c5c6:	50d7      	str	r7, [r2, r3]
 801c5c8:	f000 f9a4 	bl	801c914 <uxr_seq_num_add>
 801c5cc:	4606      	mov	r6, r0
 801c5ce:	fa1f f38a 	uxth.w	r3, sl
 801c5d2:	429d      	cmp	r5, r3
 801c5d4:	d8c9      	bhi.n	801c56a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801c5d6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c5da:	9d05      	ldr	r5, [sp, #20]
 801c5dc:	8920      	ldrh	r0, [r4, #8]
 801c5de:	463a      	mov	r2, r7
 801c5e0:	6863      	ldr	r3, [r4, #4]
 801c5e2:	fbb6 f1f0 	udiv	r1, r6, r0
 801c5e6:	fbb3 f3f0 	udiv	r3, r3, r0
 801c5ea:	fb00 6111 	mls	r1, r0, r1, r6
 801c5ee:	4658      	mov	r0, fp
 801c5f0:	b289      	uxth	r1, r1
 801c5f2:	fb01 f303 	mul.w	r3, r1, r3
 801c5f6:	6821      	ldr	r1, [r4, #0]
 801c5f8:	3304      	adds	r3, #4
 801c5fa:	4419      	add	r1, r3
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801c602:	9700      	str	r7, [sp, #0]
 801c604:	f7f3 fcc4 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 801c608:	9f06      	ldr	r7, [sp, #24]
 801c60a:	4658      	mov	r0, fp
 801c60c:	2302      	movs	r3, #2
 801c60e:	b2ba      	uxth	r2, r7
 801c610:	210d      	movs	r1, #13
 801c612:	f7fd fce1 	bl	8019fd8 <uxr_buffer_submessage_header>
 801c616:	f108 0104 	add.w	r1, r8, #4
 801c61a:	9b03      	ldr	r3, [sp, #12]
 801c61c:	f1a5 0208 	sub.w	r2, r5, #8
 801c620:	8925      	ldrh	r5, [r4, #8]
 801c622:	440b      	add	r3, r1
 801c624:	eba2 0208 	sub.w	r2, r2, r8
 801c628:	fbb6 f0f5 	udiv	r0, r6, r5
 801c62c:	4619      	mov	r1, r3
 801c62e:	6863      	ldr	r3, [r4, #4]
 801c630:	fb05 6010 	mls	r0, r5, r0, r6
 801c634:	fbb3 f3f5 	udiv	r3, r3, r5
 801c638:	b280      	uxth	r0, r0
 801c63a:	6825      	ldr	r5, [r4, #0]
 801c63c:	fb00 f303 	mul.w	r3, r0, r3
 801c640:	7b20      	ldrb	r0, [r4, #12]
 801c642:	3004      	adds	r0, #4
 801c644:	4438      	add	r0, r7
 801c646:	50e8      	str	r0, [r5, r3]
 801c648:	9d04      	ldr	r5, [sp, #16]
 801c64a:	4628      	mov	r0, r5
 801c64c:	f7f3 fcb2 	bl	800ffb4 <ucdr_init_buffer>
 801c650:	4628      	mov	r0, r5
 801c652:	4622      	mov	r2, r4
 801c654:	493d      	ldr	r1, [pc, #244]	@ (801c74c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801c656:	f7f3 fc81 	bl	800ff5c <ucdr_set_on_full_buffer_callback>
 801c65a:	2001      	movs	r0, #1
 801c65c:	81e6      	strh	r6, [r4, #14]
 801c65e:	b011      	add	sp, #68	@ 0x44
 801c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c664:	2101      	movs	r1, #1
 801c666:	89e0      	ldrh	r0, [r4, #14]
 801c668:	f000 f954 	bl	801c914 <uxr_seq_num_add>
 801c66c:	4605      	mov	r5, r0
 801c66e:	8921      	ldrh	r1, [r4, #8]
 801c670:	8a60      	ldrh	r0, [r4, #18]
 801c672:	f000 f94f 	bl	801c914 <uxr_seq_num_add>
 801c676:	4601      	mov	r1, r0
 801c678:	4628      	mov	r0, r5
 801c67a:	f000 f953 	bl	801c924 <uxr_seq_num_cmp>
 801c67e:	2800      	cmp	r0, #0
 801c680:	dd44      	ble.n	801c70c <uxr_prepare_reliable_buffer_to_write+0x298>
 801c682:	2000      	movs	r0, #0
 801c684:	b011      	add	sp, #68	@ 0x44
 801c686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c68a:	8921      	ldrh	r1, [r4, #8]
 801c68c:	8a60      	ldrh	r0, [r4, #18]
 801c68e:	9205      	str	r2, [sp, #20]
 801c690:	f000 f940 	bl	801c914 <uxr_seq_num_add>
 801c694:	4601      	mov	r1, r0
 801c696:	4630      	mov	r0, r6
 801c698:	f000 f944 	bl	801c924 <uxr_seq_num_cmp>
 801c69c:	2800      	cmp	r0, #0
 801c69e:	9a05      	ldr	r2, [sp, #20]
 801c6a0:	dcef      	bgt.n	801c682 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801c6a2:	8925      	ldrh	r5, [r4, #8]
 801c6a4:	e9d4 7300 	ldrd	r7, r3, [r4]
 801c6a8:	fbb6 f4f5 	udiv	r4, r6, r5
 801c6ac:	fbb3 f3f5 	udiv	r3, r3, r5
 801c6b0:	fb05 6414 	mls	r4, r5, r4, r6
 801c6b4:	b2a4      	uxth	r4, r4
 801c6b6:	fb04 f303 	mul.w	r3, r4, r3
 801c6ba:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801c6be:	50fa      	str	r2, [r7, r3]
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	f8cd 8000 	str.w	r8, [sp]
 801c6c6:	f7f3 fc63 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 801c6ca:	2001      	movs	r0, #1
 801c6cc:	e7da      	b.n	801c684 <uxr_prepare_reliable_buffer_to_write+0x210>
 801c6ce:	3201      	adds	r2, #1
 801c6d0:	9306      	str	r3, [sp, #24]
 801c6d2:	b293      	uxth	r3, r2
 801c6d4:	4553      	cmp	r3, sl
 801c6d6:	d8d4      	bhi.n	801c682 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801c6d8:	e739      	b.n	801c54e <uxr_prepare_reliable_buffer_to_write+0xda>
 801c6da:	4630      	mov	r0, r6
 801c6dc:	2101      	movs	r1, #1
 801c6de:	9307      	str	r3, [sp, #28]
 801c6e0:	f000 f918 	bl	801c914 <uxr_seq_num_add>
 801c6e4:	4606      	mov	r6, r0
 801c6e6:	8920      	ldrh	r0, [r4, #8]
 801c6e8:	6862      	ldr	r2, [r4, #4]
 801c6ea:	fbb6 f1f0 	udiv	r1, r6, r0
 801c6ee:	fbb2 f2f0 	udiv	r2, r2, r0
 801c6f2:	fb00 6111 	mls	r1, r0, r1, r6
 801c6f6:	b289      	uxth	r1, r1
 801c6f8:	fb01 f202 	mul.w	r2, r1, r2
 801c6fc:	6821      	ldr	r1, [r4, #0]
 801c6fe:	3204      	adds	r2, #4
 801c700:	188b      	adds	r3, r1, r2
 801c702:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801c706:	9303      	str	r3, [sp, #12]
 801c708:	9b07      	ldr	r3, [sp, #28]
 801c70a:	e70c      	b.n	801c526 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801c70c:	8921      	ldrh	r1, [r4, #8]
 801c70e:	6863      	ldr	r3, [r4, #4]
 801c710:	9804      	ldr	r0, [sp, #16]
 801c712:	fbb5 f2f1 	udiv	r2, r5, r1
 801c716:	fbb3 f3f1 	udiv	r3, r3, r1
 801c71a:	fb01 5212 	mls	r2, r1, r2, r5
 801c71e:	6821      	ldr	r1, [r4, #0]
 801c720:	b292      	uxth	r2, r2
 801c722:	fb02 f303 	mul.w	r3, r2, r3
 801c726:	7b22      	ldrb	r2, [r4, #12]
 801c728:	3304      	adds	r3, #4
 801c72a:	445a      	add	r2, fp
 801c72c:	4419      	add	r1, r3
 801c72e:	f841 2c04 	str.w	r2, [r1, #-4]
 801c732:	7b23      	ldrb	r3, [r4, #12]
 801c734:	9300      	str	r3, [sp, #0]
 801c736:	2300      	movs	r3, #0
 801c738:	f7f3 fc2a 	bl	800ff90 <ucdr_init_buffer_origin_offset>
 801c73c:	2001      	movs	r0, #1
 801c73e:	81e5      	strh	r5, [r4, #14]
 801c740:	e7a0      	b.n	801c684 <uxr_prepare_reliable_buffer_to_write+0x210>
 801c742:	4682      	mov	sl, r0
 801c744:	e6cb      	b.n	801c4de <uxr_prepare_reliable_buffer_to_write+0x6a>
 801c746:	f10d 0b20 	add.w	fp, sp, #32
 801c74a:	e747      	b.n	801c5dc <uxr_prepare_reliable_buffer_to_write+0x168>
 801c74c:	0801c349 	.word	0x0801c349

0801c750 <uxr_prepare_next_reliable_buffer_to_send>:
 801c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c752:	4604      	mov	r4, r0
 801c754:	461d      	mov	r5, r3
 801c756:	460f      	mov	r7, r1
 801c758:	8a00      	ldrh	r0, [r0, #16]
 801c75a:	2101      	movs	r1, #1
 801c75c:	4616      	mov	r6, r2
 801c75e:	f000 f8d9 	bl	801c914 <uxr_seq_num_add>
 801c762:	8028      	strh	r0, [r5, #0]
 801c764:	8922      	ldrh	r2, [r4, #8]
 801c766:	6863      	ldr	r3, [r4, #4]
 801c768:	fbb0 f1f2 	udiv	r1, r0, r2
 801c76c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c770:	fb02 0c11 	mls	ip, r2, r1, r0
 801c774:	89e1      	ldrh	r1, [r4, #14]
 801c776:	fa1f fc8c 	uxth.w	ip, ip
 801c77a:	fb0c fc03 	mul.w	ip, ip, r3
 801c77e:	6823      	ldr	r3, [r4, #0]
 801c780:	f10c 0c04 	add.w	ip, ip, #4
 801c784:	4463      	add	r3, ip
 801c786:	603b      	str	r3, [r7, #0]
 801c788:	6823      	ldr	r3, [r4, #0]
 801c78a:	449c      	add	ip, r3
 801c78c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801c790:	6033      	str	r3, [r6, #0]
 801c792:	f000 f8c7 	bl	801c924 <uxr_seq_num_cmp>
 801c796:	2800      	cmp	r0, #0
 801c798:	dd01      	ble.n	801c79e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801c79a:	2000      	movs	r0, #0
 801c79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c79e:	7b23      	ldrb	r3, [r4, #12]
 801c7a0:	6832      	ldr	r2, [r6, #0]
 801c7a2:	429a      	cmp	r2, r3
 801c7a4:	d9f9      	bls.n	801c79a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801c7a6:	8a61      	ldrh	r1, [r4, #18]
 801c7a8:	8a20      	ldrh	r0, [r4, #16]
 801c7aa:	f000 f8b7 	bl	801c91c <uxr_seq_num_sub>
 801c7ae:	8923      	ldrh	r3, [r4, #8]
 801c7b0:	4283      	cmp	r3, r0
 801c7b2:	d0f2      	beq.n	801c79a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801c7b4:	8828      	ldrh	r0, [r5, #0]
 801c7b6:	89e3      	ldrh	r3, [r4, #14]
 801c7b8:	8220      	strh	r0, [r4, #16]
 801c7ba:	4298      	cmp	r0, r3
 801c7bc:	d001      	beq.n	801c7c2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801c7be:	2001      	movs	r0, #1
 801c7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7c2:	2101      	movs	r1, #1
 801c7c4:	f000 f8a6 	bl	801c914 <uxr_seq_num_add>
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	2001      	movs	r0, #1
 801c7cc:	81e3      	strh	r3, [r4, #14]
 801c7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c7d0 <uxr_update_output_stream_heartbeat_timestamp>:
 801c7d0:	b570      	push	{r4, r5, r6, lr}
 801c7d2:	8a01      	ldrh	r1, [r0, #16]
 801c7d4:	4604      	mov	r4, r0
 801c7d6:	8a40      	ldrh	r0, [r0, #18]
 801c7d8:	4615      	mov	r5, r2
 801c7da:	461e      	mov	r6, r3
 801c7dc:	f000 f8a2 	bl	801c924 <uxr_seq_num_cmp>
 801c7e0:	2800      	cmp	r0, #0
 801c7e2:	db07      	blt.n	801c7f4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801c7e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c7e8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c7ec:	2000      	movs	r0, #0
 801c7ee:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801c7f2:	bd70      	pop	{r4, r5, r6, pc}
 801c7f4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801c7f8:	b940      	cbnz	r0, 801c80c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801c7fa:	2301      	movs	r3, #1
 801c7fc:	f884 3020 	strb.w	r3, [r4, #32]
 801c800:	3564      	adds	r5, #100	@ 0x64
 801c802:	f146 0600 	adc.w	r6, r6, #0
 801c806:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801c80a:	bd70      	pop	{r4, r5, r6, pc}
 801c80c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801c810:	4295      	cmp	r5, r2
 801c812:	eb76 0303 	sbcs.w	r3, r6, r3
 801c816:	db04      	blt.n	801c822 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801c818:	1c43      	adds	r3, r0, #1
 801c81a:	2001      	movs	r0, #1
 801c81c:	f884 3020 	strb.w	r3, [r4, #32]
 801c820:	e7ee      	b.n	801c800 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801c822:	2000      	movs	r0, #0
 801c824:	e7ec      	b.n	801c800 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801c826:	bf00      	nop

0801c828 <uxr_begin_output_nack_buffer_it>:
 801c828:	8a40      	ldrh	r0, [r0, #18]
 801c82a:	4770      	bx	lr

0801c82c <uxr_next_reliable_nack_buffer_to_send>:
 801c82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c830:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801c834:	b197      	cbz	r7, 801c85c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801c836:	4680      	mov	r8, r0
 801c838:	460d      	mov	r5, r1
 801c83a:	4616      	mov	r6, r2
 801c83c:	461c      	mov	r4, r3
 801c83e:	8818      	ldrh	r0, [r3, #0]
 801c840:	2101      	movs	r1, #1
 801c842:	f000 f867 	bl	801c914 <uxr_seq_num_add>
 801c846:	8020      	strh	r0, [r4, #0]
 801c848:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801c84c:	f000 f86a 	bl	801c924 <uxr_seq_num_cmp>
 801c850:	2800      	cmp	r0, #0
 801c852:	dd06      	ble.n	801c862 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801c854:	2300      	movs	r3, #0
 801c856:	461f      	mov	r7, r3
 801c858:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801c85c:	4638      	mov	r0, r7
 801c85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c862:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801c866:	8820      	ldrh	r0, [r4, #0]
 801c868:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c86c:	fbb0 f3f2 	udiv	r3, r0, r2
 801c870:	fbb1 fcf2 	udiv	ip, r1, r2
 801c874:	fb02 0313 	mls	r3, r2, r3, r0
 801c878:	b29b      	uxth	r3, r3
 801c87a:	fb03 fc0c 	mul.w	ip, r3, ip
 801c87e:	f8d8 3000 	ldr.w	r3, [r8]
 801c882:	f10c 0c04 	add.w	ip, ip, #4
 801c886:	4463      	add	r3, ip
 801c888:	602b      	str	r3, [r5, #0]
 801c88a:	f8d8 3000 	ldr.w	r3, [r8]
 801c88e:	4463      	add	r3, ip
 801c890:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801c894:	6033      	str	r3, [r6, #0]
 801c896:	f898 200c 	ldrb.w	r2, [r8, #12]
 801c89a:	429a      	cmp	r2, r3
 801c89c:	d0d0      	beq.n	801c840 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801c89e:	e7dd      	b.n	801c85c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801c8a0 <uxr_process_acknack>:
 801c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8a2:	4604      	mov	r4, r0
 801c8a4:	460e      	mov	r6, r1
 801c8a6:	4610      	mov	r0, r2
 801c8a8:	2101      	movs	r1, #1
 801c8aa:	f000 f837 	bl	801c91c <uxr_seq_num_sub>
 801c8ae:	8a61      	ldrh	r1, [r4, #18]
 801c8b0:	f000 f834 	bl	801c91c <uxr_seq_num_sub>
 801c8b4:	b1c8      	cbz	r0, 801c8ea <uxr_process_acknack+0x4a>
 801c8b6:	4605      	mov	r5, r0
 801c8b8:	2700      	movs	r7, #0
 801c8ba:	2101      	movs	r1, #1
 801c8bc:	8a60      	ldrh	r0, [r4, #18]
 801c8be:	f000 f829 	bl	801c914 <uxr_seq_num_add>
 801c8c2:	8923      	ldrh	r3, [r4, #8]
 801c8c4:	6862      	ldr	r2, [r4, #4]
 801c8c6:	3701      	adds	r7, #1
 801c8c8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801c8cc:	6821      	ldr	r1, [r4, #0]
 801c8ce:	42bd      	cmp	r5, r7
 801c8d0:	8260      	strh	r0, [r4, #18]
 801c8d2:	fbb0 fef3 	udiv	lr, r0, r3
 801c8d6:	fbb2 f2f3 	udiv	r2, r2, r3
 801c8da:	fb03 031e 	mls	r3, r3, lr, r0
 801c8de:	b29b      	uxth	r3, r3
 801c8e0:	fb02 f303 	mul.w	r3, r2, r3
 801c8e4:	f841 c003 	str.w	ip, [r1, r3]
 801c8e8:	d1e7      	bne.n	801c8ba <uxr_process_acknack+0x1a>
 801c8ea:	3e00      	subs	r6, #0
 801c8ec:	f04f 0300 	mov.w	r3, #0
 801c8f0:	bf18      	it	ne
 801c8f2:	2601      	movne	r6, #1
 801c8f4:	f884 3020 	strb.w	r3, [r4, #32]
 801c8f8:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801c8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8fe:	bf00      	nop

0801c900 <uxr_is_output_up_to_date>:
 801c900:	8a01      	ldrh	r1, [r0, #16]
 801c902:	8a40      	ldrh	r0, [r0, #18]
 801c904:	b508      	push	{r3, lr}
 801c906:	f000 f80d 	bl	801c924 <uxr_seq_num_cmp>
 801c90a:	fab0 f080 	clz	r0, r0
 801c90e:	0940      	lsrs	r0, r0, #5
 801c910:	bd08      	pop	{r3, pc}
 801c912:	bf00      	nop

0801c914 <uxr_seq_num_add>:
 801c914:	4408      	add	r0, r1
 801c916:	b280      	uxth	r0, r0
 801c918:	4770      	bx	lr
 801c91a:	bf00      	nop

0801c91c <uxr_seq_num_sub>:
 801c91c:	1a40      	subs	r0, r0, r1
 801c91e:	b280      	uxth	r0, r0
 801c920:	4770      	bx	lr
 801c922:	bf00      	nop

0801c924 <uxr_seq_num_cmp>:
 801c924:	4288      	cmp	r0, r1
 801c926:	d011      	beq.n	801c94c <uxr_seq_num_cmp+0x28>
 801c928:	d309      	bcc.n	801c93e <uxr_seq_num_cmp+0x1a>
 801c92a:	4288      	cmp	r0, r1
 801c92c:	d910      	bls.n	801c950 <uxr_seq_num_cmp+0x2c>
 801c92e:	1a40      	subs	r0, r0, r1
 801c930:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801c934:	bfd4      	ite	le
 801c936:	2001      	movle	r0, #1
 801c938:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801c93c:	4770      	bx	lr
 801c93e:	1a0b      	subs	r3, r1, r0
 801c940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801c944:	daf1      	bge.n	801c92a <uxr_seq_num_cmp+0x6>
 801c946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c94a:	4770      	bx	lr
 801c94c:	2000      	movs	r0, #0
 801c94e:	4770      	bx	lr
 801c950:	2001      	movs	r0, #1
 801c952:	4770      	bx	lr

0801c954 <calloc>:
 801c954:	4b02      	ldr	r3, [pc, #8]	@ (801c960 <calloc+0xc>)
 801c956:	460a      	mov	r2, r1
 801c958:	4601      	mov	r1, r0
 801c95a:	6818      	ldr	r0, [r3, #0]
 801c95c:	f000 b802 	b.w	801c964 <_calloc_r>
 801c960:	240013a0 	.word	0x240013a0

0801c964 <_calloc_r>:
 801c964:	b570      	push	{r4, r5, r6, lr}
 801c966:	fba1 5402 	umull	r5, r4, r1, r2
 801c96a:	b93c      	cbnz	r4, 801c97c <_calloc_r+0x18>
 801c96c:	4629      	mov	r1, r5
 801c96e:	f000 f899 	bl	801caa4 <_malloc_r>
 801c972:	4606      	mov	r6, r0
 801c974:	b928      	cbnz	r0, 801c982 <_calloc_r+0x1e>
 801c976:	2600      	movs	r6, #0
 801c978:	4630      	mov	r0, r6
 801c97a:	bd70      	pop	{r4, r5, r6, pc}
 801c97c:	220c      	movs	r2, #12
 801c97e:	6002      	str	r2, [r0, #0]
 801c980:	e7f9      	b.n	801c976 <_calloc_r+0x12>
 801c982:	462a      	mov	r2, r5
 801c984:	4621      	mov	r1, r4
 801c986:	f000 fcbd 	bl	801d304 <memset>
 801c98a:	e7f5      	b.n	801c978 <_calloc_r+0x14>

0801c98c <exit>:
 801c98c:	b508      	push	{r3, lr}
 801c98e:	4b06      	ldr	r3, [pc, #24]	@ (801c9a8 <exit+0x1c>)
 801c990:	4604      	mov	r4, r0
 801c992:	b113      	cbz	r3, 801c99a <exit+0xe>
 801c994:	2100      	movs	r1, #0
 801c996:	f3af 8000 	nop.w
 801c99a:	4b04      	ldr	r3, [pc, #16]	@ (801c9ac <exit+0x20>)
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	b103      	cbz	r3, 801c9a2 <exit+0x16>
 801c9a0:	4798      	blx	r3
 801c9a2:	4620      	mov	r0, r4
 801c9a4:	f7e5 f962 	bl	8001c6c <_exit>
 801c9a8:	00000000 	.word	0x00000000
 801c9ac:	240694ec 	.word	0x240694ec

0801c9b0 <getenv>:
 801c9b0:	b507      	push	{r0, r1, r2, lr}
 801c9b2:	4b04      	ldr	r3, [pc, #16]	@ (801c9c4 <getenv+0x14>)
 801c9b4:	4601      	mov	r1, r0
 801c9b6:	aa01      	add	r2, sp, #4
 801c9b8:	6818      	ldr	r0, [r3, #0]
 801c9ba:	f000 f805 	bl	801c9c8 <_findenv_r>
 801c9be:	b003      	add	sp, #12
 801c9c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801c9c4:	240013a0 	.word	0x240013a0

0801c9c8 <_findenv_r>:
 801c9c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9cc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801ca3c <_findenv_r+0x74>
 801c9d0:	4606      	mov	r6, r0
 801c9d2:	4689      	mov	r9, r1
 801c9d4:	4617      	mov	r7, r2
 801c9d6:	f000 fde1 	bl	801d59c <__env_lock>
 801c9da:	f8da 4000 	ldr.w	r4, [sl]
 801c9de:	b134      	cbz	r4, 801c9ee <_findenv_r+0x26>
 801c9e0:	464b      	mov	r3, r9
 801c9e2:	4698      	mov	r8, r3
 801c9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9e8:	b13a      	cbz	r2, 801c9fa <_findenv_r+0x32>
 801c9ea:	2a3d      	cmp	r2, #61	@ 0x3d
 801c9ec:	d1f9      	bne.n	801c9e2 <_findenv_r+0x1a>
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	f000 fdda 	bl	801d5a8 <__env_unlock>
 801c9f4:	2000      	movs	r0, #0
 801c9f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9fa:	eba8 0809 	sub.w	r8, r8, r9
 801c9fe:	46a3      	mov	fp, r4
 801ca00:	f854 0b04 	ldr.w	r0, [r4], #4
 801ca04:	2800      	cmp	r0, #0
 801ca06:	d0f2      	beq.n	801c9ee <_findenv_r+0x26>
 801ca08:	4642      	mov	r2, r8
 801ca0a:	4649      	mov	r1, r9
 801ca0c:	f000 fc8f 	bl	801d32e <strncmp>
 801ca10:	2800      	cmp	r0, #0
 801ca12:	d1f4      	bne.n	801c9fe <_findenv_r+0x36>
 801ca14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ca18:	eb03 0508 	add.w	r5, r3, r8
 801ca1c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801ca20:	2b3d      	cmp	r3, #61	@ 0x3d
 801ca22:	d1ec      	bne.n	801c9fe <_findenv_r+0x36>
 801ca24:	f8da 3000 	ldr.w	r3, [sl]
 801ca28:	ebab 0303 	sub.w	r3, fp, r3
 801ca2c:	109b      	asrs	r3, r3, #2
 801ca2e:	4630      	mov	r0, r6
 801ca30:	603b      	str	r3, [r7, #0]
 801ca32:	f000 fdb9 	bl	801d5a8 <__env_unlock>
 801ca36:	1c68      	adds	r0, r5, #1
 801ca38:	e7dd      	b.n	801c9f6 <_findenv_r+0x2e>
 801ca3a:	bf00      	nop
 801ca3c:	24000000 	.word	0x24000000

0801ca40 <malloc>:
 801ca40:	4b02      	ldr	r3, [pc, #8]	@ (801ca4c <malloc+0xc>)
 801ca42:	4601      	mov	r1, r0
 801ca44:	6818      	ldr	r0, [r3, #0]
 801ca46:	f000 b82d 	b.w	801caa4 <_malloc_r>
 801ca4a:	bf00      	nop
 801ca4c:	240013a0 	.word	0x240013a0

0801ca50 <free>:
 801ca50:	4b02      	ldr	r3, [pc, #8]	@ (801ca5c <free+0xc>)
 801ca52:	4601      	mov	r1, r0
 801ca54:	6818      	ldr	r0, [r3, #0]
 801ca56:	f000 bdad 	b.w	801d5b4 <_free_r>
 801ca5a:	bf00      	nop
 801ca5c:	240013a0 	.word	0x240013a0

0801ca60 <sbrk_aligned>:
 801ca60:	b570      	push	{r4, r5, r6, lr}
 801ca62:	4e0f      	ldr	r6, [pc, #60]	@ (801caa0 <sbrk_aligned+0x40>)
 801ca64:	460c      	mov	r4, r1
 801ca66:	6831      	ldr	r1, [r6, #0]
 801ca68:	4605      	mov	r5, r0
 801ca6a:	b911      	cbnz	r1, 801ca72 <sbrk_aligned+0x12>
 801ca6c:	f000 fd12 	bl	801d494 <_sbrk_r>
 801ca70:	6030      	str	r0, [r6, #0]
 801ca72:	4621      	mov	r1, r4
 801ca74:	4628      	mov	r0, r5
 801ca76:	f000 fd0d 	bl	801d494 <_sbrk_r>
 801ca7a:	1c43      	adds	r3, r0, #1
 801ca7c:	d103      	bne.n	801ca86 <sbrk_aligned+0x26>
 801ca7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ca82:	4620      	mov	r0, r4
 801ca84:	bd70      	pop	{r4, r5, r6, pc}
 801ca86:	1cc4      	adds	r4, r0, #3
 801ca88:	f024 0403 	bic.w	r4, r4, #3
 801ca8c:	42a0      	cmp	r0, r4
 801ca8e:	d0f8      	beq.n	801ca82 <sbrk_aligned+0x22>
 801ca90:	1a21      	subs	r1, r4, r0
 801ca92:	4628      	mov	r0, r5
 801ca94:	f000 fcfe 	bl	801d494 <_sbrk_r>
 801ca98:	3001      	adds	r0, #1
 801ca9a:	d1f2      	bne.n	801ca82 <sbrk_aligned+0x22>
 801ca9c:	e7ef      	b.n	801ca7e <sbrk_aligned+0x1e>
 801ca9e:	bf00      	nop
 801caa0:	240693ac 	.word	0x240693ac

0801caa4 <_malloc_r>:
 801caa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801caa8:	1ccd      	adds	r5, r1, #3
 801caaa:	f025 0503 	bic.w	r5, r5, #3
 801caae:	3508      	adds	r5, #8
 801cab0:	2d0c      	cmp	r5, #12
 801cab2:	bf38      	it	cc
 801cab4:	250c      	movcc	r5, #12
 801cab6:	2d00      	cmp	r5, #0
 801cab8:	4606      	mov	r6, r0
 801caba:	db01      	blt.n	801cac0 <_malloc_r+0x1c>
 801cabc:	42a9      	cmp	r1, r5
 801cabe:	d904      	bls.n	801caca <_malloc_r+0x26>
 801cac0:	230c      	movs	r3, #12
 801cac2:	6033      	str	r3, [r6, #0]
 801cac4:	2000      	movs	r0, #0
 801cac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801caca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801cba0 <_malloc_r+0xfc>
 801cace:	f000 f869 	bl	801cba4 <__malloc_lock>
 801cad2:	f8d8 3000 	ldr.w	r3, [r8]
 801cad6:	461c      	mov	r4, r3
 801cad8:	bb44      	cbnz	r4, 801cb2c <_malloc_r+0x88>
 801cada:	4629      	mov	r1, r5
 801cadc:	4630      	mov	r0, r6
 801cade:	f7ff ffbf 	bl	801ca60 <sbrk_aligned>
 801cae2:	1c43      	adds	r3, r0, #1
 801cae4:	4604      	mov	r4, r0
 801cae6:	d158      	bne.n	801cb9a <_malloc_r+0xf6>
 801cae8:	f8d8 4000 	ldr.w	r4, [r8]
 801caec:	4627      	mov	r7, r4
 801caee:	2f00      	cmp	r7, #0
 801caf0:	d143      	bne.n	801cb7a <_malloc_r+0xd6>
 801caf2:	2c00      	cmp	r4, #0
 801caf4:	d04b      	beq.n	801cb8e <_malloc_r+0xea>
 801caf6:	6823      	ldr	r3, [r4, #0]
 801caf8:	4639      	mov	r1, r7
 801cafa:	4630      	mov	r0, r6
 801cafc:	eb04 0903 	add.w	r9, r4, r3
 801cb00:	f000 fcc8 	bl	801d494 <_sbrk_r>
 801cb04:	4581      	cmp	r9, r0
 801cb06:	d142      	bne.n	801cb8e <_malloc_r+0xea>
 801cb08:	6821      	ldr	r1, [r4, #0]
 801cb0a:	1a6d      	subs	r5, r5, r1
 801cb0c:	4629      	mov	r1, r5
 801cb0e:	4630      	mov	r0, r6
 801cb10:	f7ff ffa6 	bl	801ca60 <sbrk_aligned>
 801cb14:	3001      	adds	r0, #1
 801cb16:	d03a      	beq.n	801cb8e <_malloc_r+0xea>
 801cb18:	6823      	ldr	r3, [r4, #0]
 801cb1a:	442b      	add	r3, r5
 801cb1c:	6023      	str	r3, [r4, #0]
 801cb1e:	f8d8 3000 	ldr.w	r3, [r8]
 801cb22:	685a      	ldr	r2, [r3, #4]
 801cb24:	bb62      	cbnz	r2, 801cb80 <_malloc_r+0xdc>
 801cb26:	f8c8 7000 	str.w	r7, [r8]
 801cb2a:	e00f      	b.n	801cb4c <_malloc_r+0xa8>
 801cb2c:	6822      	ldr	r2, [r4, #0]
 801cb2e:	1b52      	subs	r2, r2, r5
 801cb30:	d420      	bmi.n	801cb74 <_malloc_r+0xd0>
 801cb32:	2a0b      	cmp	r2, #11
 801cb34:	d917      	bls.n	801cb66 <_malloc_r+0xc2>
 801cb36:	1961      	adds	r1, r4, r5
 801cb38:	42a3      	cmp	r3, r4
 801cb3a:	6025      	str	r5, [r4, #0]
 801cb3c:	bf18      	it	ne
 801cb3e:	6059      	strne	r1, [r3, #4]
 801cb40:	6863      	ldr	r3, [r4, #4]
 801cb42:	bf08      	it	eq
 801cb44:	f8c8 1000 	streq.w	r1, [r8]
 801cb48:	5162      	str	r2, [r4, r5]
 801cb4a:	604b      	str	r3, [r1, #4]
 801cb4c:	4630      	mov	r0, r6
 801cb4e:	f000 f82f 	bl	801cbb0 <__malloc_unlock>
 801cb52:	f104 000b 	add.w	r0, r4, #11
 801cb56:	1d23      	adds	r3, r4, #4
 801cb58:	f020 0007 	bic.w	r0, r0, #7
 801cb5c:	1ac2      	subs	r2, r0, r3
 801cb5e:	bf1c      	itt	ne
 801cb60:	1a1b      	subne	r3, r3, r0
 801cb62:	50a3      	strne	r3, [r4, r2]
 801cb64:	e7af      	b.n	801cac6 <_malloc_r+0x22>
 801cb66:	6862      	ldr	r2, [r4, #4]
 801cb68:	42a3      	cmp	r3, r4
 801cb6a:	bf0c      	ite	eq
 801cb6c:	f8c8 2000 	streq.w	r2, [r8]
 801cb70:	605a      	strne	r2, [r3, #4]
 801cb72:	e7eb      	b.n	801cb4c <_malloc_r+0xa8>
 801cb74:	4623      	mov	r3, r4
 801cb76:	6864      	ldr	r4, [r4, #4]
 801cb78:	e7ae      	b.n	801cad8 <_malloc_r+0x34>
 801cb7a:	463c      	mov	r4, r7
 801cb7c:	687f      	ldr	r7, [r7, #4]
 801cb7e:	e7b6      	b.n	801caee <_malloc_r+0x4a>
 801cb80:	461a      	mov	r2, r3
 801cb82:	685b      	ldr	r3, [r3, #4]
 801cb84:	42a3      	cmp	r3, r4
 801cb86:	d1fb      	bne.n	801cb80 <_malloc_r+0xdc>
 801cb88:	2300      	movs	r3, #0
 801cb8a:	6053      	str	r3, [r2, #4]
 801cb8c:	e7de      	b.n	801cb4c <_malloc_r+0xa8>
 801cb8e:	230c      	movs	r3, #12
 801cb90:	6033      	str	r3, [r6, #0]
 801cb92:	4630      	mov	r0, r6
 801cb94:	f000 f80c 	bl	801cbb0 <__malloc_unlock>
 801cb98:	e794      	b.n	801cac4 <_malloc_r+0x20>
 801cb9a:	6005      	str	r5, [r0, #0]
 801cb9c:	e7d6      	b.n	801cb4c <_malloc_r+0xa8>
 801cb9e:	bf00      	nop
 801cba0:	240693b0 	.word	0x240693b0

0801cba4 <__malloc_lock>:
 801cba4:	4801      	ldr	r0, [pc, #4]	@ (801cbac <__malloc_lock+0x8>)
 801cba6:	f000 bcc2 	b.w	801d52e <__retarget_lock_acquire_recursive>
 801cbaa:	bf00      	nop
 801cbac:	240694f5 	.word	0x240694f5

0801cbb0 <__malloc_unlock>:
 801cbb0:	4801      	ldr	r0, [pc, #4]	@ (801cbb8 <__malloc_unlock+0x8>)
 801cbb2:	f000 bcbd 	b.w	801d530 <__retarget_lock_release_recursive>
 801cbb6:	bf00      	nop
 801cbb8:	240694f5 	.word	0x240694f5

0801cbbc <srand>:
 801cbbc:	b538      	push	{r3, r4, r5, lr}
 801cbbe:	4b10      	ldr	r3, [pc, #64]	@ (801cc00 <srand+0x44>)
 801cbc0:	681d      	ldr	r5, [r3, #0]
 801cbc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cbc4:	4604      	mov	r4, r0
 801cbc6:	b9b3      	cbnz	r3, 801cbf6 <srand+0x3a>
 801cbc8:	2018      	movs	r0, #24
 801cbca:	f7ff ff39 	bl	801ca40 <malloc>
 801cbce:	4602      	mov	r2, r0
 801cbd0:	6328      	str	r0, [r5, #48]	@ 0x30
 801cbd2:	b920      	cbnz	r0, 801cbde <srand+0x22>
 801cbd4:	4b0b      	ldr	r3, [pc, #44]	@ (801cc04 <srand+0x48>)
 801cbd6:	480c      	ldr	r0, [pc, #48]	@ (801cc08 <srand+0x4c>)
 801cbd8:	2146      	movs	r1, #70	@ 0x46
 801cbda:	f000 fcc1 	bl	801d560 <__assert_func>
 801cbde:	490b      	ldr	r1, [pc, #44]	@ (801cc0c <srand+0x50>)
 801cbe0:	4b0b      	ldr	r3, [pc, #44]	@ (801cc10 <srand+0x54>)
 801cbe2:	e9c0 1300 	strd	r1, r3, [r0]
 801cbe6:	4b0b      	ldr	r3, [pc, #44]	@ (801cc14 <srand+0x58>)
 801cbe8:	6083      	str	r3, [r0, #8]
 801cbea:	230b      	movs	r3, #11
 801cbec:	8183      	strh	r3, [r0, #12]
 801cbee:	2100      	movs	r1, #0
 801cbf0:	2001      	movs	r0, #1
 801cbf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cbf6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	611c      	str	r4, [r3, #16]
 801cbfc:	615a      	str	r2, [r3, #20]
 801cbfe:	bd38      	pop	{r3, r4, r5, pc}
 801cc00:	240013a0 	.word	0x240013a0
 801cc04:	08020906 	.word	0x08020906
 801cc08:	0802091d 	.word	0x0802091d
 801cc0c:	abcd330e 	.word	0xabcd330e
 801cc10:	e66d1234 	.word	0xe66d1234
 801cc14:	0005deec 	.word	0x0005deec

0801cc18 <rand>:
 801cc18:	4b16      	ldr	r3, [pc, #88]	@ (801cc74 <rand+0x5c>)
 801cc1a:	b510      	push	{r4, lr}
 801cc1c:	681c      	ldr	r4, [r3, #0]
 801cc1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc20:	b9b3      	cbnz	r3, 801cc50 <rand+0x38>
 801cc22:	2018      	movs	r0, #24
 801cc24:	f7ff ff0c 	bl	801ca40 <malloc>
 801cc28:	4602      	mov	r2, r0
 801cc2a:	6320      	str	r0, [r4, #48]	@ 0x30
 801cc2c:	b920      	cbnz	r0, 801cc38 <rand+0x20>
 801cc2e:	4b12      	ldr	r3, [pc, #72]	@ (801cc78 <rand+0x60>)
 801cc30:	4812      	ldr	r0, [pc, #72]	@ (801cc7c <rand+0x64>)
 801cc32:	2152      	movs	r1, #82	@ 0x52
 801cc34:	f000 fc94 	bl	801d560 <__assert_func>
 801cc38:	4911      	ldr	r1, [pc, #68]	@ (801cc80 <rand+0x68>)
 801cc3a:	4b12      	ldr	r3, [pc, #72]	@ (801cc84 <rand+0x6c>)
 801cc3c:	e9c0 1300 	strd	r1, r3, [r0]
 801cc40:	4b11      	ldr	r3, [pc, #68]	@ (801cc88 <rand+0x70>)
 801cc42:	6083      	str	r3, [r0, #8]
 801cc44:	230b      	movs	r3, #11
 801cc46:	8183      	strh	r3, [r0, #12]
 801cc48:	2100      	movs	r1, #0
 801cc4a:	2001      	movs	r0, #1
 801cc4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cc50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cc52:	480e      	ldr	r0, [pc, #56]	@ (801cc8c <rand+0x74>)
 801cc54:	690b      	ldr	r3, [r1, #16]
 801cc56:	694c      	ldr	r4, [r1, #20]
 801cc58:	4a0d      	ldr	r2, [pc, #52]	@ (801cc90 <rand+0x78>)
 801cc5a:	4358      	muls	r0, r3
 801cc5c:	fb02 0004 	mla	r0, r2, r4, r0
 801cc60:	fba3 3202 	umull	r3, r2, r3, r2
 801cc64:	3301      	adds	r3, #1
 801cc66:	eb40 0002 	adc.w	r0, r0, r2
 801cc6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801cc6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801cc72:	bd10      	pop	{r4, pc}
 801cc74:	240013a0 	.word	0x240013a0
 801cc78:	08020906 	.word	0x08020906
 801cc7c:	0802091d 	.word	0x0802091d
 801cc80:	abcd330e 	.word	0xabcd330e
 801cc84:	e66d1234 	.word	0xe66d1234
 801cc88:	0005deec 	.word	0x0005deec
 801cc8c:	5851f42d 	.word	0x5851f42d
 801cc90:	4c957f2d 	.word	0x4c957f2d

0801cc94 <realloc>:
 801cc94:	4b02      	ldr	r3, [pc, #8]	@ (801cca0 <realloc+0xc>)
 801cc96:	460a      	mov	r2, r1
 801cc98:	4601      	mov	r1, r0
 801cc9a:	6818      	ldr	r0, [r3, #0]
 801cc9c:	f000 b802 	b.w	801cca4 <_realloc_r>
 801cca0:	240013a0 	.word	0x240013a0

0801cca4 <_realloc_r>:
 801cca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cca8:	4680      	mov	r8, r0
 801ccaa:	4615      	mov	r5, r2
 801ccac:	460c      	mov	r4, r1
 801ccae:	b921      	cbnz	r1, 801ccba <_realloc_r+0x16>
 801ccb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ccb4:	4611      	mov	r1, r2
 801ccb6:	f7ff bef5 	b.w	801caa4 <_malloc_r>
 801ccba:	b92a      	cbnz	r2, 801ccc8 <_realloc_r+0x24>
 801ccbc:	f000 fc7a 	bl	801d5b4 <_free_r>
 801ccc0:	2400      	movs	r4, #0
 801ccc2:	4620      	mov	r0, r4
 801ccc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccc8:	f000 fcbe 	bl	801d648 <_malloc_usable_size_r>
 801cccc:	4285      	cmp	r5, r0
 801ccce:	4606      	mov	r6, r0
 801ccd0:	d802      	bhi.n	801ccd8 <_realloc_r+0x34>
 801ccd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801ccd6:	d8f4      	bhi.n	801ccc2 <_realloc_r+0x1e>
 801ccd8:	4629      	mov	r1, r5
 801ccda:	4640      	mov	r0, r8
 801ccdc:	f7ff fee2 	bl	801caa4 <_malloc_r>
 801cce0:	4607      	mov	r7, r0
 801cce2:	2800      	cmp	r0, #0
 801cce4:	d0ec      	beq.n	801ccc0 <_realloc_r+0x1c>
 801cce6:	42b5      	cmp	r5, r6
 801cce8:	462a      	mov	r2, r5
 801ccea:	4621      	mov	r1, r4
 801ccec:	bf28      	it	cs
 801ccee:	4632      	movcs	r2, r6
 801ccf0:	f000 fc27 	bl	801d542 <memcpy>
 801ccf4:	4621      	mov	r1, r4
 801ccf6:	4640      	mov	r0, r8
 801ccf8:	f000 fc5c 	bl	801d5b4 <_free_r>
 801ccfc:	463c      	mov	r4, r7
 801ccfe:	e7e0      	b.n	801ccc2 <_realloc_r+0x1e>

0801cd00 <_strtoul_l.constprop.0>:
 801cd00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd04:	4e34      	ldr	r6, [pc, #208]	@ (801cdd8 <_strtoul_l.constprop.0+0xd8>)
 801cd06:	4686      	mov	lr, r0
 801cd08:	460d      	mov	r5, r1
 801cd0a:	4628      	mov	r0, r5
 801cd0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cd10:	5d37      	ldrb	r7, [r6, r4]
 801cd12:	f017 0708 	ands.w	r7, r7, #8
 801cd16:	d1f8      	bne.n	801cd0a <_strtoul_l.constprop.0+0xa>
 801cd18:	2c2d      	cmp	r4, #45	@ 0x2d
 801cd1a:	d12f      	bne.n	801cd7c <_strtoul_l.constprop.0+0x7c>
 801cd1c:	782c      	ldrb	r4, [r5, #0]
 801cd1e:	2701      	movs	r7, #1
 801cd20:	1c85      	adds	r5, r0, #2
 801cd22:	f033 0010 	bics.w	r0, r3, #16
 801cd26:	d109      	bne.n	801cd3c <_strtoul_l.constprop.0+0x3c>
 801cd28:	2c30      	cmp	r4, #48	@ 0x30
 801cd2a:	d12c      	bne.n	801cd86 <_strtoul_l.constprop.0+0x86>
 801cd2c:	7828      	ldrb	r0, [r5, #0]
 801cd2e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801cd32:	2858      	cmp	r0, #88	@ 0x58
 801cd34:	d127      	bne.n	801cd86 <_strtoul_l.constprop.0+0x86>
 801cd36:	786c      	ldrb	r4, [r5, #1]
 801cd38:	2310      	movs	r3, #16
 801cd3a:	3502      	adds	r5, #2
 801cd3c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801cd40:	2600      	movs	r6, #0
 801cd42:	fbb8 f8f3 	udiv	r8, r8, r3
 801cd46:	fb03 f908 	mul.w	r9, r3, r8
 801cd4a:	ea6f 0909 	mvn.w	r9, r9
 801cd4e:	4630      	mov	r0, r6
 801cd50:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801cd54:	f1bc 0f09 	cmp.w	ip, #9
 801cd58:	d81c      	bhi.n	801cd94 <_strtoul_l.constprop.0+0x94>
 801cd5a:	4664      	mov	r4, ip
 801cd5c:	42a3      	cmp	r3, r4
 801cd5e:	dd2a      	ble.n	801cdb6 <_strtoul_l.constprop.0+0xb6>
 801cd60:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801cd64:	d007      	beq.n	801cd76 <_strtoul_l.constprop.0+0x76>
 801cd66:	4580      	cmp	r8, r0
 801cd68:	d322      	bcc.n	801cdb0 <_strtoul_l.constprop.0+0xb0>
 801cd6a:	d101      	bne.n	801cd70 <_strtoul_l.constprop.0+0x70>
 801cd6c:	45a1      	cmp	r9, r4
 801cd6e:	db1f      	blt.n	801cdb0 <_strtoul_l.constprop.0+0xb0>
 801cd70:	fb00 4003 	mla	r0, r0, r3, r4
 801cd74:	2601      	movs	r6, #1
 801cd76:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cd7a:	e7e9      	b.n	801cd50 <_strtoul_l.constprop.0+0x50>
 801cd7c:	2c2b      	cmp	r4, #43	@ 0x2b
 801cd7e:	bf04      	itt	eq
 801cd80:	782c      	ldrbeq	r4, [r5, #0]
 801cd82:	1c85      	addeq	r5, r0, #2
 801cd84:	e7cd      	b.n	801cd22 <_strtoul_l.constprop.0+0x22>
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d1d8      	bne.n	801cd3c <_strtoul_l.constprop.0+0x3c>
 801cd8a:	2c30      	cmp	r4, #48	@ 0x30
 801cd8c:	bf0c      	ite	eq
 801cd8e:	2308      	moveq	r3, #8
 801cd90:	230a      	movne	r3, #10
 801cd92:	e7d3      	b.n	801cd3c <_strtoul_l.constprop.0+0x3c>
 801cd94:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801cd98:	f1bc 0f19 	cmp.w	ip, #25
 801cd9c:	d801      	bhi.n	801cda2 <_strtoul_l.constprop.0+0xa2>
 801cd9e:	3c37      	subs	r4, #55	@ 0x37
 801cda0:	e7dc      	b.n	801cd5c <_strtoul_l.constprop.0+0x5c>
 801cda2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801cda6:	f1bc 0f19 	cmp.w	ip, #25
 801cdaa:	d804      	bhi.n	801cdb6 <_strtoul_l.constprop.0+0xb6>
 801cdac:	3c57      	subs	r4, #87	@ 0x57
 801cdae:	e7d5      	b.n	801cd5c <_strtoul_l.constprop.0+0x5c>
 801cdb0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801cdb4:	e7df      	b.n	801cd76 <_strtoul_l.constprop.0+0x76>
 801cdb6:	1c73      	adds	r3, r6, #1
 801cdb8:	d106      	bne.n	801cdc8 <_strtoul_l.constprop.0+0xc8>
 801cdba:	2322      	movs	r3, #34	@ 0x22
 801cdbc:	f8ce 3000 	str.w	r3, [lr]
 801cdc0:	4630      	mov	r0, r6
 801cdc2:	b932      	cbnz	r2, 801cdd2 <_strtoul_l.constprop.0+0xd2>
 801cdc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdc8:	b107      	cbz	r7, 801cdcc <_strtoul_l.constprop.0+0xcc>
 801cdca:	4240      	negs	r0, r0
 801cdcc:	2a00      	cmp	r2, #0
 801cdce:	d0f9      	beq.n	801cdc4 <_strtoul_l.constprop.0+0xc4>
 801cdd0:	b106      	cbz	r6, 801cdd4 <_strtoul_l.constprop.0+0xd4>
 801cdd2:	1e69      	subs	r1, r5, #1
 801cdd4:	6011      	str	r1, [r2, #0]
 801cdd6:	e7f5      	b.n	801cdc4 <_strtoul_l.constprop.0+0xc4>
 801cdd8:	08020976 	.word	0x08020976

0801cddc <strtoul>:
 801cddc:	4613      	mov	r3, r2
 801cdde:	460a      	mov	r2, r1
 801cde0:	4601      	mov	r1, r0
 801cde2:	4802      	ldr	r0, [pc, #8]	@ (801cdec <strtoul+0x10>)
 801cde4:	6800      	ldr	r0, [r0, #0]
 801cde6:	f7ff bf8b 	b.w	801cd00 <_strtoul_l.constprop.0>
 801cdea:	bf00      	nop
 801cdec:	240013a0 	.word	0x240013a0

0801cdf0 <std>:
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	b510      	push	{r4, lr}
 801cdf4:	4604      	mov	r4, r0
 801cdf6:	e9c0 3300 	strd	r3, r3, [r0]
 801cdfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cdfe:	6083      	str	r3, [r0, #8]
 801ce00:	8181      	strh	r1, [r0, #12]
 801ce02:	6643      	str	r3, [r0, #100]	@ 0x64
 801ce04:	81c2      	strh	r2, [r0, #14]
 801ce06:	6183      	str	r3, [r0, #24]
 801ce08:	4619      	mov	r1, r3
 801ce0a:	2208      	movs	r2, #8
 801ce0c:	305c      	adds	r0, #92	@ 0x5c
 801ce0e:	f000 fa79 	bl	801d304 <memset>
 801ce12:	4b0d      	ldr	r3, [pc, #52]	@ (801ce48 <std+0x58>)
 801ce14:	6263      	str	r3, [r4, #36]	@ 0x24
 801ce16:	4b0d      	ldr	r3, [pc, #52]	@ (801ce4c <std+0x5c>)
 801ce18:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ce1a:	4b0d      	ldr	r3, [pc, #52]	@ (801ce50 <std+0x60>)
 801ce1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ce1e:	4b0d      	ldr	r3, [pc, #52]	@ (801ce54 <std+0x64>)
 801ce20:	6323      	str	r3, [r4, #48]	@ 0x30
 801ce22:	4b0d      	ldr	r3, [pc, #52]	@ (801ce58 <std+0x68>)
 801ce24:	6224      	str	r4, [r4, #32]
 801ce26:	429c      	cmp	r4, r3
 801ce28:	d006      	beq.n	801ce38 <std+0x48>
 801ce2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ce2e:	4294      	cmp	r4, r2
 801ce30:	d002      	beq.n	801ce38 <std+0x48>
 801ce32:	33d0      	adds	r3, #208	@ 0xd0
 801ce34:	429c      	cmp	r4, r3
 801ce36:	d105      	bne.n	801ce44 <std+0x54>
 801ce38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ce3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce40:	f000 bb74 	b.w	801d52c <__retarget_lock_init_recursive>
 801ce44:	bd10      	pop	{r4, pc}
 801ce46:	bf00      	nop
 801ce48:	0801d091 	.word	0x0801d091
 801ce4c:	0801d0b3 	.word	0x0801d0b3
 801ce50:	0801d0eb 	.word	0x0801d0eb
 801ce54:	0801d10f 	.word	0x0801d10f
 801ce58:	240693b4 	.word	0x240693b4

0801ce5c <stdio_exit_handler>:
 801ce5c:	4a02      	ldr	r2, [pc, #8]	@ (801ce68 <stdio_exit_handler+0xc>)
 801ce5e:	4903      	ldr	r1, [pc, #12]	@ (801ce6c <stdio_exit_handler+0x10>)
 801ce60:	4803      	ldr	r0, [pc, #12]	@ (801ce70 <stdio_exit_handler+0x14>)
 801ce62:	f000 b869 	b.w	801cf38 <_fwalk_sglue>
 801ce66:	bf00      	nop
 801ce68:	24001394 	.word	0x24001394
 801ce6c:	0801dd2d 	.word	0x0801dd2d
 801ce70:	240013a4 	.word	0x240013a4

0801ce74 <cleanup_stdio>:
 801ce74:	6841      	ldr	r1, [r0, #4]
 801ce76:	4b0c      	ldr	r3, [pc, #48]	@ (801cea8 <cleanup_stdio+0x34>)
 801ce78:	4299      	cmp	r1, r3
 801ce7a:	b510      	push	{r4, lr}
 801ce7c:	4604      	mov	r4, r0
 801ce7e:	d001      	beq.n	801ce84 <cleanup_stdio+0x10>
 801ce80:	f000 ff54 	bl	801dd2c <_fflush_r>
 801ce84:	68a1      	ldr	r1, [r4, #8]
 801ce86:	4b09      	ldr	r3, [pc, #36]	@ (801ceac <cleanup_stdio+0x38>)
 801ce88:	4299      	cmp	r1, r3
 801ce8a:	d002      	beq.n	801ce92 <cleanup_stdio+0x1e>
 801ce8c:	4620      	mov	r0, r4
 801ce8e:	f000 ff4d 	bl	801dd2c <_fflush_r>
 801ce92:	68e1      	ldr	r1, [r4, #12]
 801ce94:	4b06      	ldr	r3, [pc, #24]	@ (801ceb0 <cleanup_stdio+0x3c>)
 801ce96:	4299      	cmp	r1, r3
 801ce98:	d004      	beq.n	801cea4 <cleanup_stdio+0x30>
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cea0:	f000 bf44 	b.w	801dd2c <_fflush_r>
 801cea4:	bd10      	pop	{r4, pc}
 801cea6:	bf00      	nop
 801cea8:	240693b4 	.word	0x240693b4
 801ceac:	2406941c 	.word	0x2406941c
 801ceb0:	24069484 	.word	0x24069484

0801ceb4 <global_stdio_init.part.0>:
 801ceb4:	b510      	push	{r4, lr}
 801ceb6:	4b0b      	ldr	r3, [pc, #44]	@ (801cee4 <global_stdio_init.part.0+0x30>)
 801ceb8:	4c0b      	ldr	r4, [pc, #44]	@ (801cee8 <global_stdio_init.part.0+0x34>)
 801ceba:	4a0c      	ldr	r2, [pc, #48]	@ (801ceec <global_stdio_init.part.0+0x38>)
 801cebc:	601a      	str	r2, [r3, #0]
 801cebe:	4620      	mov	r0, r4
 801cec0:	2200      	movs	r2, #0
 801cec2:	2104      	movs	r1, #4
 801cec4:	f7ff ff94 	bl	801cdf0 <std>
 801cec8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cecc:	2201      	movs	r2, #1
 801cece:	2109      	movs	r1, #9
 801ced0:	f7ff ff8e 	bl	801cdf0 <std>
 801ced4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ced8:	2202      	movs	r2, #2
 801ceda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cede:	2112      	movs	r1, #18
 801cee0:	f7ff bf86 	b.w	801cdf0 <std>
 801cee4:	240694ec 	.word	0x240694ec
 801cee8:	240693b4 	.word	0x240693b4
 801ceec:	0801ce5d 	.word	0x0801ce5d

0801cef0 <__sfp_lock_acquire>:
 801cef0:	4801      	ldr	r0, [pc, #4]	@ (801cef8 <__sfp_lock_acquire+0x8>)
 801cef2:	f000 bb1c 	b.w	801d52e <__retarget_lock_acquire_recursive>
 801cef6:	bf00      	nop
 801cef8:	240694f6 	.word	0x240694f6

0801cefc <__sfp_lock_release>:
 801cefc:	4801      	ldr	r0, [pc, #4]	@ (801cf04 <__sfp_lock_release+0x8>)
 801cefe:	f000 bb17 	b.w	801d530 <__retarget_lock_release_recursive>
 801cf02:	bf00      	nop
 801cf04:	240694f6 	.word	0x240694f6

0801cf08 <__sinit>:
 801cf08:	b510      	push	{r4, lr}
 801cf0a:	4604      	mov	r4, r0
 801cf0c:	f7ff fff0 	bl	801cef0 <__sfp_lock_acquire>
 801cf10:	6a23      	ldr	r3, [r4, #32]
 801cf12:	b11b      	cbz	r3, 801cf1c <__sinit+0x14>
 801cf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf18:	f7ff bff0 	b.w	801cefc <__sfp_lock_release>
 801cf1c:	4b04      	ldr	r3, [pc, #16]	@ (801cf30 <__sinit+0x28>)
 801cf1e:	6223      	str	r3, [r4, #32]
 801cf20:	4b04      	ldr	r3, [pc, #16]	@ (801cf34 <__sinit+0x2c>)
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d1f5      	bne.n	801cf14 <__sinit+0xc>
 801cf28:	f7ff ffc4 	bl	801ceb4 <global_stdio_init.part.0>
 801cf2c:	e7f2      	b.n	801cf14 <__sinit+0xc>
 801cf2e:	bf00      	nop
 801cf30:	0801ce75 	.word	0x0801ce75
 801cf34:	240694ec 	.word	0x240694ec

0801cf38 <_fwalk_sglue>:
 801cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf3c:	4607      	mov	r7, r0
 801cf3e:	4688      	mov	r8, r1
 801cf40:	4614      	mov	r4, r2
 801cf42:	2600      	movs	r6, #0
 801cf44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cf48:	f1b9 0901 	subs.w	r9, r9, #1
 801cf4c:	d505      	bpl.n	801cf5a <_fwalk_sglue+0x22>
 801cf4e:	6824      	ldr	r4, [r4, #0]
 801cf50:	2c00      	cmp	r4, #0
 801cf52:	d1f7      	bne.n	801cf44 <_fwalk_sglue+0xc>
 801cf54:	4630      	mov	r0, r6
 801cf56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf5a:	89ab      	ldrh	r3, [r5, #12]
 801cf5c:	2b01      	cmp	r3, #1
 801cf5e:	d907      	bls.n	801cf70 <_fwalk_sglue+0x38>
 801cf60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cf64:	3301      	adds	r3, #1
 801cf66:	d003      	beq.n	801cf70 <_fwalk_sglue+0x38>
 801cf68:	4629      	mov	r1, r5
 801cf6a:	4638      	mov	r0, r7
 801cf6c:	47c0      	blx	r8
 801cf6e:	4306      	orrs	r6, r0
 801cf70:	3568      	adds	r5, #104	@ 0x68
 801cf72:	e7e9      	b.n	801cf48 <_fwalk_sglue+0x10>

0801cf74 <_fwrite_r>:
 801cf74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf78:	9c08      	ldr	r4, [sp, #32]
 801cf7a:	468a      	mov	sl, r1
 801cf7c:	4690      	mov	r8, r2
 801cf7e:	fb02 f903 	mul.w	r9, r2, r3
 801cf82:	4606      	mov	r6, r0
 801cf84:	b118      	cbz	r0, 801cf8e <_fwrite_r+0x1a>
 801cf86:	6a03      	ldr	r3, [r0, #32]
 801cf88:	b90b      	cbnz	r3, 801cf8e <_fwrite_r+0x1a>
 801cf8a:	f7ff ffbd 	bl	801cf08 <__sinit>
 801cf8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cf90:	07dd      	lsls	r5, r3, #31
 801cf92:	d405      	bmi.n	801cfa0 <_fwrite_r+0x2c>
 801cf94:	89a3      	ldrh	r3, [r4, #12]
 801cf96:	0598      	lsls	r0, r3, #22
 801cf98:	d402      	bmi.n	801cfa0 <_fwrite_r+0x2c>
 801cf9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cf9c:	f000 fac7 	bl	801d52e <__retarget_lock_acquire_recursive>
 801cfa0:	89a3      	ldrh	r3, [r4, #12]
 801cfa2:	0719      	lsls	r1, r3, #28
 801cfa4:	d516      	bpl.n	801cfd4 <_fwrite_r+0x60>
 801cfa6:	6923      	ldr	r3, [r4, #16]
 801cfa8:	b1a3      	cbz	r3, 801cfd4 <_fwrite_r+0x60>
 801cfaa:	2500      	movs	r5, #0
 801cfac:	454d      	cmp	r5, r9
 801cfae:	d01f      	beq.n	801cff0 <_fwrite_r+0x7c>
 801cfb0:	68a7      	ldr	r7, [r4, #8]
 801cfb2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801cfb6:	3f01      	subs	r7, #1
 801cfb8:	2f00      	cmp	r7, #0
 801cfba:	60a7      	str	r7, [r4, #8]
 801cfbc:	da04      	bge.n	801cfc8 <_fwrite_r+0x54>
 801cfbe:	69a3      	ldr	r3, [r4, #24]
 801cfc0:	429f      	cmp	r7, r3
 801cfc2:	db0f      	blt.n	801cfe4 <_fwrite_r+0x70>
 801cfc4:	290a      	cmp	r1, #10
 801cfc6:	d00d      	beq.n	801cfe4 <_fwrite_r+0x70>
 801cfc8:	6823      	ldr	r3, [r4, #0]
 801cfca:	1c5a      	adds	r2, r3, #1
 801cfcc:	6022      	str	r2, [r4, #0]
 801cfce:	7019      	strb	r1, [r3, #0]
 801cfd0:	3501      	adds	r5, #1
 801cfd2:	e7eb      	b.n	801cfac <_fwrite_r+0x38>
 801cfd4:	4621      	mov	r1, r4
 801cfd6:	4630      	mov	r0, r6
 801cfd8:	f000 f914 	bl	801d204 <__swsetup_r>
 801cfdc:	2800      	cmp	r0, #0
 801cfde:	d0e4      	beq.n	801cfaa <_fwrite_r+0x36>
 801cfe0:	2500      	movs	r5, #0
 801cfe2:	e005      	b.n	801cff0 <_fwrite_r+0x7c>
 801cfe4:	4622      	mov	r2, r4
 801cfe6:	4630      	mov	r0, r6
 801cfe8:	f000 f8ce 	bl	801d188 <__swbuf_r>
 801cfec:	3001      	adds	r0, #1
 801cfee:	d1ef      	bne.n	801cfd0 <_fwrite_r+0x5c>
 801cff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cff2:	07da      	lsls	r2, r3, #31
 801cff4:	d405      	bmi.n	801d002 <_fwrite_r+0x8e>
 801cff6:	89a3      	ldrh	r3, [r4, #12]
 801cff8:	059b      	lsls	r3, r3, #22
 801cffa:	d402      	bmi.n	801d002 <_fwrite_r+0x8e>
 801cffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cffe:	f000 fa97 	bl	801d530 <__retarget_lock_release_recursive>
 801d002:	fbb5 f0f8 	udiv	r0, r5, r8
 801d006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d00c <fwrite>:
 801d00c:	b507      	push	{r0, r1, r2, lr}
 801d00e:	9300      	str	r3, [sp, #0]
 801d010:	4613      	mov	r3, r2
 801d012:	460a      	mov	r2, r1
 801d014:	4601      	mov	r1, r0
 801d016:	4803      	ldr	r0, [pc, #12]	@ (801d024 <fwrite+0x18>)
 801d018:	6800      	ldr	r0, [r0, #0]
 801d01a:	f7ff ffab 	bl	801cf74 <_fwrite_r>
 801d01e:	b003      	add	sp, #12
 801d020:	f85d fb04 	ldr.w	pc, [sp], #4
 801d024:	240013a0 	.word	0x240013a0

0801d028 <sniprintf>:
 801d028:	b40c      	push	{r2, r3}
 801d02a:	b530      	push	{r4, r5, lr}
 801d02c:	4b17      	ldr	r3, [pc, #92]	@ (801d08c <sniprintf+0x64>)
 801d02e:	1e0c      	subs	r4, r1, #0
 801d030:	681d      	ldr	r5, [r3, #0]
 801d032:	b09d      	sub	sp, #116	@ 0x74
 801d034:	da08      	bge.n	801d048 <sniprintf+0x20>
 801d036:	238b      	movs	r3, #139	@ 0x8b
 801d038:	602b      	str	r3, [r5, #0]
 801d03a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d03e:	b01d      	add	sp, #116	@ 0x74
 801d040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d044:	b002      	add	sp, #8
 801d046:	4770      	bx	lr
 801d048:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d04c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d050:	bf14      	ite	ne
 801d052:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d056:	4623      	moveq	r3, r4
 801d058:	9304      	str	r3, [sp, #16]
 801d05a:	9307      	str	r3, [sp, #28]
 801d05c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d060:	9002      	str	r0, [sp, #8]
 801d062:	9006      	str	r0, [sp, #24]
 801d064:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d068:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d06a:	ab21      	add	r3, sp, #132	@ 0x84
 801d06c:	a902      	add	r1, sp, #8
 801d06e:	4628      	mov	r0, r5
 801d070:	9301      	str	r3, [sp, #4]
 801d072:	f000 fb4d 	bl	801d710 <_svfiprintf_r>
 801d076:	1c43      	adds	r3, r0, #1
 801d078:	bfbc      	itt	lt
 801d07a:	238b      	movlt	r3, #139	@ 0x8b
 801d07c:	602b      	strlt	r3, [r5, #0]
 801d07e:	2c00      	cmp	r4, #0
 801d080:	d0dd      	beq.n	801d03e <sniprintf+0x16>
 801d082:	9b02      	ldr	r3, [sp, #8]
 801d084:	2200      	movs	r2, #0
 801d086:	701a      	strb	r2, [r3, #0]
 801d088:	e7d9      	b.n	801d03e <sniprintf+0x16>
 801d08a:	bf00      	nop
 801d08c:	240013a0 	.word	0x240013a0

0801d090 <__sread>:
 801d090:	b510      	push	{r4, lr}
 801d092:	460c      	mov	r4, r1
 801d094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d098:	f000 f9ea 	bl	801d470 <_read_r>
 801d09c:	2800      	cmp	r0, #0
 801d09e:	bfab      	itete	ge
 801d0a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d0a2:	89a3      	ldrhlt	r3, [r4, #12]
 801d0a4:	181b      	addge	r3, r3, r0
 801d0a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d0aa:	bfac      	ite	ge
 801d0ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d0ae:	81a3      	strhlt	r3, [r4, #12]
 801d0b0:	bd10      	pop	{r4, pc}

0801d0b2 <__swrite>:
 801d0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0b6:	461f      	mov	r7, r3
 801d0b8:	898b      	ldrh	r3, [r1, #12]
 801d0ba:	05db      	lsls	r3, r3, #23
 801d0bc:	4605      	mov	r5, r0
 801d0be:	460c      	mov	r4, r1
 801d0c0:	4616      	mov	r6, r2
 801d0c2:	d505      	bpl.n	801d0d0 <__swrite+0x1e>
 801d0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0c8:	2302      	movs	r3, #2
 801d0ca:	2200      	movs	r2, #0
 801d0cc:	f000 f9be 	bl	801d44c <_lseek_r>
 801d0d0:	89a3      	ldrh	r3, [r4, #12]
 801d0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d0d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d0da:	81a3      	strh	r3, [r4, #12]
 801d0dc:	4632      	mov	r2, r6
 801d0de:	463b      	mov	r3, r7
 801d0e0:	4628      	mov	r0, r5
 801d0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d0e6:	f000 b9e5 	b.w	801d4b4 <_write_r>

0801d0ea <__sseek>:
 801d0ea:	b510      	push	{r4, lr}
 801d0ec:	460c      	mov	r4, r1
 801d0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d0f2:	f000 f9ab 	bl	801d44c <_lseek_r>
 801d0f6:	1c43      	adds	r3, r0, #1
 801d0f8:	89a3      	ldrh	r3, [r4, #12]
 801d0fa:	bf15      	itete	ne
 801d0fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d0fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d106:	81a3      	strheq	r3, [r4, #12]
 801d108:	bf18      	it	ne
 801d10a:	81a3      	strhne	r3, [r4, #12]
 801d10c:	bd10      	pop	{r4, pc}

0801d10e <__sclose>:
 801d10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d112:	f000 b935 	b.w	801d380 <_close_r>

0801d116 <_vsniprintf_r>:
 801d116:	b530      	push	{r4, r5, lr}
 801d118:	4614      	mov	r4, r2
 801d11a:	2c00      	cmp	r4, #0
 801d11c:	b09b      	sub	sp, #108	@ 0x6c
 801d11e:	4605      	mov	r5, r0
 801d120:	461a      	mov	r2, r3
 801d122:	da05      	bge.n	801d130 <_vsniprintf_r+0x1a>
 801d124:	238b      	movs	r3, #139	@ 0x8b
 801d126:	6003      	str	r3, [r0, #0]
 801d128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d12c:	b01b      	add	sp, #108	@ 0x6c
 801d12e:	bd30      	pop	{r4, r5, pc}
 801d130:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d134:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d138:	bf14      	ite	ne
 801d13a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801d13e:	4623      	moveq	r3, r4
 801d140:	9302      	str	r3, [sp, #8]
 801d142:	9305      	str	r3, [sp, #20]
 801d144:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d148:	9100      	str	r1, [sp, #0]
 801d14a:	9104      	str	r1, [sp, #16]
 801d14c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d150:	4669      	mov	r1, sp
 801d152:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d154:	f000 fadc 	bl	801d710 <_svfiprintf_r>
 801d158:	1c43      	adds	r3, r0, #1
 801d15a:	bfbc      	itt	lt
 801d15c:	238b      	movlt	r3, #139	@ 0x8b
 801d15e:	602b      	strlt	r3, [r5, #0]
 801d160:	2c00      	cmp	r4, #0
 801d162:	d0e3      	beq.n	801d12c <_vsniprintf_r+0x16>
 801d164:	9b00      	ldr	r3, [sp, #0]
 801d166:	2200      	movs	r2, #0
 801d168:	701a      	strb	r2, [r3, #0]
 801d16a:	e7df      	b.n	801d12c <_vsniprintf_r+0x16>

0801d16c <vsniprintf>:
 801d16c:	b507      	push	{r0, r1, r2, lr}
 801d16e:	9300      	str	r3, [sp, #0]
 801d170:	4613      	mov	r3, r2
 801d172:	460a      	mov	r2, r1
 801d174:	4601      	mov	r1, r0
 801d176:	4803      	ldr	r0, [pc, #12]	@ (801d184 <vsniprintf+0x18>)
 801d178:	6800      	ldr	r0, [r0, #0]
 801d17a:	f7ff ffcc 	bl	801d116 <_vsniprintf_r>
 801d17e:	b003      	add	sp, #12
 801d180:	f85d fb04 	ldr.w	pc, [sp], #4
 801d184:	240013a0 	.word	0x240013a0

0801d188 <__swbuf_r>:
 801d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d18a:	460e      	mov	r6, r1
 801d18c:	4614      	mov	r4, r2
 801d18e:	4605      	mov	r5, r0
 801d190:	b118      	cbz	r0, 801d19a <__swbuf_r+0x12>
 801d192:	6a03      	ldr	r3, [r0, #32]
 801d194:	b90b      	cbnz	r3, 801d19a <__swbuf_r+0x12>
 801d196:	f7ff feb7 	bl	801cf08 <__sinit>
 801d19a:	69a3      	ldr	r3, [r4, #24]
 801d19c:	60a3      	str	r3, [r4, #8]
 801d19e:	89a3      	ldrh	r3, [r4, #12]
 801d1a0:	071a      	lsls	r2, r3, #28
 801d1a2:	d501      	bpl.n	801d1a8 <__swbuf_r+0x20>
 801d1a4:	6923      	ldr	r3, [r4, #16]
 801d1a6:	b943      	cbnz	r3, 801d1ba <__swbuf_r+0x32>
 801d1a8:	4621      	mov	r1, r4
 801d1aa:	4628      	mov	r0, r5
 801d1ac:	f000 f82a 	bl	801d204 <__swsetup_r>
 801d1b0:	b118      	cbz	r0, 801d1ba <__swbuf_r+0x32>
 801d1b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d1b6:	4638      	mov	r0, r7
 801d1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ba:	6823      	ldr	r3, [r4, #0]
 801d1bc:	6922      	ldr	r2, [r4, #16]
 801d1be:	1a98      	subs	r0, r3, r2
 801d1c0:	6963      	ldr	r3, [r4, #20]
 801d1c2:	b2f6      	uxtb	r6, r6
 801d1c4:	4283      	cmp	r3, r0
 801d1c6:	4637      	mov	r7, r6
 801d1c8:	dc05      	bgt.n	801d1d6 <__swbuf_r+0x4e>
 801d1ca:	4621      	mov	r1, r4
 801d1cc:	4628      	mov	r0, r5
 801d1ce:	f000 fdad 	bl	801dd2c <_fflush_r>
 801d1d2:	2800      	cmp	r0, #0
 801d1d4:	d1ed      	bne.n	801d1b2 <__swbuf_r+0x2a>
 801d1d6:	68a3      	ldr	r3, [r4, #8]
 801d1d8:	3b01      	subs	r3, #1
 801d1da:	60a3      	str	r3, [r4, #8]
 801d1dc:	6823      	ldr	r3, [r4, #0]
 801d1de:	1c5a      	adds	r2, r3, #1
 801d1e0:	6022      	str	r2, [r4, #0]
 801d1e2:	701e      	strb	r6, [r3, #0]
 801d1e4:	6962      	ldr	r2, [r4, #20]
 801d1e6:	1c43      	adds	r3, r0, #1
 801d1e8:	429a      	cmp	r2, r3
 801d1ea:	d004      	beq.n	801d1f6 <__swbuf_r+0x6e>
 801d1ec:	89a3      	ldrh	r3, [r4, #12]
 801d1ee:	07db      	lsls	r3, r3, #31
 801d1f0:	d5e1      	bpl.n	801d1b6 <__swbuf_r+0x2e>
 801d1f2:	2e0a      	cmp	r6, #10
 801d1f4:	d1df      	bne.n	801d1b6 <__swbuf_r+0x2e>
 801d1f6:	4621      	mov	r1, r4
 801d1f8:	4628      	mov	r0, r5
 801d1fa:	f000 fd97 	bl	801dd2c <_fflush_r>
 801d1fe:	2800      	cmp	r0, #0
 801d200:	d0d9      	beq.n	801d1b6 <__swbuf_r+0x2e>
 801d202:	e7d6      	b.n	801d1b2 <__swbuf_r+0x2a>

0801d204 <__swsetup_r>:
 801d204:	b538      	push	{r3, r4, r5, lr}
 801d206:	4b29      	ldr	r3, [pc, #164]	@ (801d2ac <__swsetup_r+0xa8>)
 801d208:	4605      	mov	r5, r0
 801d20a:	6818      	ldr	r0, [r3, #0]
 801d20c:	460c      	mov	r4, r1
 801d20e:	b118      	cbz	r0, 801d218 <__swsetup_r+0x14>
 801d210:	6a03      	ldr	r3, [r0, #32]
 801d212:	b90b      	cbnz	r3, 801d218 <__swsetup_r+0x14>
 801d214:	f7ff fe78 	bl	801cf08 <__sinit>
 801d218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d21c:	0719      	lsls	r1, r3, #28
 801d21e:	d422      	bmi.n	801d266 <__swsetup_r+0x62>
 801d220:	06da      	lsls	r2, r3, #27
 801d222:	d407      	bmi.n	801d234 <__swsetup_r+0x30>
 801d224:	2209      	movs	r2, #9
 801d226:	602a      	str	r2, [r5, #0]
 801d228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d22c:	81a3      	strh	r3, [r4, #12]
 801d22e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d232:	e033      	b.n	801d29c <__swsetup_r+0x98>
 801d234:	0758      	lsls	r0, r3, #29
 801d236:	d512      	bpl.n	801d25e <__swsetup_r+0x5a>
 801d238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d23a:	b141      	cbz	r1, 801d24e <__swsetup_r+0x4a>
 801d23c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d240:	4299      	cmp	r1, r3
 801d242:	d002      	beq.n	801d24a <__swsetup_r+0x46>
 801d244:	4628      	mov	r0, r5
 801d246:	f000 f9b5 	bl	801d5b4 <_free_r>
 801d24a:	2300      	movs	r3, #0
 801d24c:	6363      	str	r3, [r4, #52]	@ 0x34
 801d24e:	89a3      	ldrh	r3, [r4, #12]
 801d250:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d254:	81a3      	strh	r3, [r4, #12]
 801d256:	2300      	movs	r3, #0
 801d258:	6063      	str	r3, [r4, #4]
 801d25a:	6923      	ldr	r3, [r4, #16]
 801d25c:	6023      	str	r3, [r4, #0]
 801d25e:	89a3      	ldrh	r3, [r4, #12]
 801d260:	f043 0308 	orr.w	r3, r3, #8
 801d264:	81a3      	strh	r3, [r4, #12]
 801d266:	6923      	ldr	r3, [r4, #16]
 801d268:	b94b      	cbnz	r3, 801d27e <__swsetup_r+0x7a>
 801d26a:	89a3      	ldrh	r3, [r4, #12]
 801d26c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d274:	d003      	beq.n	801d27e <__swsetup_r+0x7a>
 801d276:	4621      	mov	r1, r4
 801d278:	4628      	mov	r0, r5
 801d27a:	f000 fdb7 	bl	801ddec <__smakebuf_r>
 801d27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d282:	f013 0201 	ands.w	r2, r3, #1
 801d286:	d00a      	beq.n	801d29e <__swsetup_r+0x9a>
 801d288:	2200      	movs	r2, #0
 801d28a:	60a2      	str	r2, [r4, #8]
 801d28c:	6962      	ldr	r2, [r4, #20]
 801d28e:	4252      	negs	r2, r2
 801d290:	61a2      	str	r2, [r4, #24]
 801d292:	6922      	ldr	r2, [r4, #16]
 801d294:	b942      	cbnz	r2, 801d2a8 <__swsetup_r+0xa4>
 801d296:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d29a:	d1c5      	bne.n	801d228 <__swsetup_r+0x24>
 801d29c:	bd38      	pop	{r3, r4, r5, pc}
 801d29e:	0799      	lsls	r1, r3, #30
 801d2a0:	bf58      	it	pl
 801d2a2:	6962      	ldrpl	r2, [r4, #20]
 801d2a4:	60a2      	str	r2, [r4, #8]
 801d2a6:	e7f4      	b.n	801d292 <__swsetup_r+0x8e>
 801d2a8:	2000      	movs	r0, #0
 801d2aa:	e7f7      	b.n	801d29c <__swsetup_r+0x98>
 801d2ac:	240013a0 	.word	0x240013a0

0801d2b0 <memcmp>:
 801d2b0:	b510      	push	{r4, lr}
 801d2b2:	3901      	subs	r1, #1
 801d2b4:	4402      	add	r2, r0
 801d2b6:	4290      	cmp	r0, r2
 801d2b8:	d101      	bne.n	801d2be <memcmp+0xe>
 801d2ba:	2000      	movs	r0, #0
 801d2bc:	e005      	b.n	801d2ca <memcmp+0x1a>
 801d2be:	7803      	ldrb	r3, [r0, #0]
 801d2c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d2c4:	42a3      	cmp	r3, r4
 801d2c6:	d001      	beq.n	801d2cc <memcmp+0x1c>
 801d2c8:	1b18      	subs	r0, r3, r4
 801d2ca:	bd10      	pop	{r4, pc}
 801d2cc:	3001      	adds	r0, #1
 801d2ce:	e7f2      	b.n	801d2b6 <memcmp+0x6>

0801d2d0 <memmove>:
 801d2d0:	4288      	cmp	r0, r1
 801d2d2:	b510      	push	{r4, lr}
 801d2d4:	eb01 0402 	add.w	r4, r1, r2
 801d2d8:	d902      	bls.n	801d2e0 <memmove+0x10>
 801d2da:	4284      	cmp	r4, r0
 801d2dc:	4623      	mov	r3, r4
 801d2de:	d807      	bhi.n	801d2f0 <memmove+0x20>
 801d2e0:	1e43      	subs	r3, r0, #1
 801d2e2:	42a1      	cmp	r1, r4
 801d2e4:	d008      	beq.n	801d2f8 <memmove+0x28>
 801d2e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d2ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d2ee:	e7f8      	b.n	801d2e2 <memmove+0x12>
 801d2f0:	4402      	add	r2, r0
 801d2f2:	4601      	mov	r1, r0
 801d2f4:	428a      	cmp	r2, r1
 801d2f6:	d100      	bne.n	801d2fa <memmove+0x2a>
 801d2f8:	bd10      	pop	{r4, pc}
 801d2fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d2fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d302:	e7f7      	b.n	801d2f4 <memmove+0x24>

0801d304 <memset>:
 801d304:	4402      	add	r2, r0
 801d306:	4603      	mov	r3, r0
 801d308:	4293      	cmp	r3, r2
 801d30a:	d100      	bne.n	801d30e <memset+0xa>
 801d30c:	4770      	bx	lr
 801d30e:	f803 1b01 	strb.w	r1, [r3], #1
 801d312:	e7f9      	b.n	801d308 <memset+0x4>

0801d314 <strchr>:
 801d314:	b2c9      	uxtb	r1, r1
 801d316:	4603      	mov	r3, r0
 801d318:	4618      	mov	r0, r3
 801d31a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d31e:	b112      	cbz	r2, 801d326 <strchr+0x12>
 801d320:	428a      	cmp	r2, r1
 801d322:	d1f9      	bne.n	801d318 <strchr+0x4>
 801d324:	4770      	bx	lr
 801d326:	2900      	cmp	r1, #0
 801d328:	bf18      	it	ne
 801d32a:	2000      	movne	r0, #0
 801d32c:	4770      	bx	lr

0801d32e <strncmp>:
 801d32e:	b510      	push	{r4, lr}
 801d330:	b16a      	cbz	r2, 801d34e <strncmp+0x20>
 801d332:	3901      	subs	r1, #1
 801d334:	1884      	adds	r4, r0, r2
 801d336:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d33a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d33e:	429a      	cmp	r2, r3
 801d340:	d103      	bne.n	801d34a <strncmp+0x1c>
 801d342:	42a0      	cmp	r0, r4
 801d344:	d001      	beq.n	801d34a <strncmp+0x1c>
 801d346:	2a00      	cmp	r2, #0
 801d348:	d1f5      	bne.n	801d336 <strncmp+0x8>
 801d34a:	1ad0      	subs	r0, r2, r3
 801d34c:	bd10      	pop	{r4, pc}
 801d34e:	4610      	mov	r0, r2
 801d350:	e7fc      	b.n	801d34c <strncmp+0x1e>

0801d352 <strstr>:
 801d352:	780a      	ldrb	r2, [r1, #0]
 801d354:	b570      	push	{r4, r5, r6, lr}
 801d356:	b96a      	cbnz	r2, 801d374 <strstr+0x22>
 801d358:	bd70      	pop	{r4, r5, r6, pc}
 801d35a:	429a      	cmp	r2, r3
 801d35c:	d109      	bne.n	801d372 <strstr+0x20>
 801d35e:	460c      	mov	r4, r1
 801d360:	4605      	mov	r5, r0
 801d362:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801d366:	2b00      	cmp	r3, #0
 801d368:	d0f6      	beq.n	801d358 <strstr+0x6>
 801d36a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801d36e:	429e      	cmp	r6, r3
 801d370:	d0f7      	beq.n	801d362 <strstr+0x10>
 801d372:	3001      	adds	r0, #1
 801d374:	7803      	ldrb	r3, [r0, #0]
 801d376:	2b00      	cmp	r3, #0
 801d378:	d1ef      	bne.n	801d35a <strstr+0x8>
 801d37a:	4618      	mov	r0, r3
 801d37c:	e7ec      	b.n	801d358 <strstr+0x6>
	...

0801d380 <_close_r>:
 801d380:	b538      	push	{r3, r4, r5, lr}
 801d382:	4d06      	ldr	r5, [pc, #24]	@ (801d39c <_close_r+0x1c>)
 801d384:	2300      	movs	r3, #0
 801d386:	4604      	mov	r4, r0
 801d388:	4608      	mov	r0, r1
 801d38a:	602b      	str	r3, [r5, #0]
 801d38c:	f7e4 fcb2 	bl	8001cf4 <_close>
 801d390:	1c43      	adds	r3, r0, #1
 801d392:	d102      	bne.n	801d39a <_close_r+0x1a>
 801d394:	682b      	ldr	r3, [r5, #0]
 801d396:	b103      	cbz	r3, 801d39a <_close_r+0x1a>
 801d398:	6023      	str	r3, [r4, #0]
 801d39a:	bd38      	pop	{r3, r4, r5, pc}
 801d39c:	240694f0 	.word	0x240694f0

0801d3a0 <_reclaim_reent>:
 801d3a0:	4b29      	ldr	r3, [pc, #164]	@ (801d448 <_reclaim_reent+0xa8>)
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	4283      	cmp	r3, r0
 801d3a6:	b570      	push	{r4, r5, r6, lr}
 801d3a8:	4604      	mov	r4, r0
 801d3aa:	d04b      	beq.n	801d444 <_reclaim_reent+0xa4>
 801d3ac:	69c3      	ldr	r3, [r0, #28]
 801d3ae:	b1ab      	cbz	r3, 801d3dc <_reclaim_reent+0x3c>
 801d3b0:	68db      	ldr	r3, [r3, #12]
 801d3b2:	b16b      	cbz	r3, 801d3d0 <_reclaim_reent+0x30>
 801d3b4:	2500      	movs	r5, #0
 801d3b6:	69e3      	ldr	r3, [r4, #28]
 801d3b8:	68db      	ldr	r3, [r3, #12]
 801d3ba:	5959      	ldr	r1, [r3, r5]
 801d3bc:	2900      	cmp	r1, #0
 801d3be:	d13b      	bne.n	801d438 <_reclaim_reent+0x98>
 801d3c0:	3504      	adds	r5, #4
 801d3c2:	2d80      	cmp	r5, #128	@ 0x80
 801d3c4:	d1f7      	bne.n	801d3b6 <_reclaim_reent+0x16>
 801d3c6:	69e3      	ldr	r3, [r4, #28]
 801d3c8:	4620      	mov	r0, r4
 801d3ca:	68d9      	ldr	r1, [r3, #12]
 801d3cc:	f000 f8f2 	bl	801d5b4 <_free_r>
 801d3d0:	69e3      	ldr	r3, [r4, #28]
 801d3d2:	6819      	ldr	r1, [r3, #0]
 801d3d4:	b111      	cbz	r1, 801d3dc <_reclaim_reent+0x3c>
 801d3d6:	4620      	mov	r0, r4
 801d3d8:	f000 f8ec 	bl	801d5b4 <_free_r>
 801d3dc:	6961      	ldr	r1, [r4, #20]
 801d3de:	b111      	cbz	r1, 801d3e6 <_reclaim_reent+0x46>
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	f000 f8e7 	bl	801d5b4 <_free_r>
 801d3e6:	69e1      	ldr	r1, [r4, #28]
 801d3e8:	b111      	cbz	r1, 801d3f0 <_reclaim_reent+0x50>
 801d3ea:	4620      	mov	r0, r4
 801d3ec:	f000 f8e2 	bl	801d5b4 <_free_r>
 801d3f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d3f2:	b111      	cbz	r1, 801d3fa <_reclaim_reent+0x5a>
 801d3f4:	4620      	mov	r0, r4
 801d3f6:	f000 f8dd 	bl	801d5b4 <_free_r>
 801d3fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d3fc:	b111      	cbz	r1, 801d404 <_reclaim_reent+0x64>
 801d3fe:	4620      	mov	r0, r4
 801d400:	f000 f8d8 	bl	801d5b4 <_free_r>
 801d404:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d406:	b111      	cbz	r1, 801d40e <_reclaim_reent+0x6e>
 801d408:	4620      	mov	r0, r4
 801d40a:	f000 f8d3 	bl	801d5b4 <_free_r>
 801d40e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d410:	b111      	cbz	r1, 801d418 <_reclaim_reent+0x78>
 801d412:	4620      	mov	r0, r4
 801d414:	f000 f8ce 	bl	801d5b4 <_free_r>
 801d418:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d41a:	b111      	cbz	r1, 801d422 <_reclaim_reent+0x82>
 801d41c:	4620      	mov	r0, r4
 801d41e:	f000 f8c9 	bl	801d5b4 <_free_r>
 801d422:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d424:	b111      	cbz	r1, 801d42c <_reclaim_reent+0x8c>
 801d426:	4620      	mov	r0, r4
 801d428:	f000 f8c4 	bl	801d5b4 <_free_r>
 801d42c:	6a23      	ldr	r3, [r4, #32]
 801d42e:	b14b      	cbz	r3, 801d444 <_reclaim_reent+0xa4>
 801d430:	4620      	mov	r0, r4
 801d432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d436:	4718      	bx	r3
 801d438:	680e      	ldr	r6, [r1, #0]
 801d43a:	4620      	mov	r0, r4
 801d43c:	f000 f8ba 	bl	801d5b4 <_free_r>
 801d440:	4631      	mov	r1, r6
 801d442:	e7bb      	b.n	801d3bc <_reclaim_reent+0x1c>
 801d444:	bd70      	pop	{r4, r5, r6, pc}
 801d446:	bf00      	nop
 801d448:	240013a0 	.word	0x240013a0

0801d44c <_lseek_r>:
 801d44c:	b538      	push	{r3, r4, r5, lr}
 801d44e:	4d07      	ldr	r5, [pc, #28]	@ (801d46c <_lseek_r+0x20>)
 801d450:	4604      	mov	r4, r0
 801d452:	4608      	mov	r0, r1
 801d454:	4611      	mov	r1, r2
 801d456:	2200      	movs	r2, #0
 801d458:	602a      	str	r2, [r5, #0]
 801d45a:	461a      	mov	r2, r3
 801d45c:	f7e4 fc71 	bl	8001d42 <_lseek>
 801d460:	1c43      	adds	r3, r0, #1
 801d462:	d102      	bne.n	801d46a <_lseek_r+0x1e>
 801d464:	682b      	ldr	r3, [r5, #0]
 801d466:	b103      	cbz	r3, 801d46a <_lseek_r+0x1e>
 801d468:	6023      	str	r3, [r4, #0]
 801d46a:	bd38      	pop	{r3, r4, r5, pc}
 801d46c:	240694f0 	.word	0x240694f0

0801d470 <_read_r>:
 801d470:	b538      	push	{r3, r4, r5, lr}
 801d472:	4d07      	ldr	r5, [pc, #28]	@ (801d490 <_read_r+0x20>)
 801d474:	4604      	mov	r4, r0
 801d476:	4608      	mov	r0, r1
 801d478:	4611      	mov	r1, r2
 801d47a:	2200      	movs	r2, #0
 801d47c:	602a      	str	r2, [r5, #0]
 801d47e:	461a      	mov	r2, r3
 801d480:	f7e4 fbff 	bl	8001c82 <_read>
 801d484:	1c43      	adds	r3, r0, #1
 801d486:	d102      	bne.n	801d48e <_read_r+0x1e>
 801d488:	682b      	ldr	r3, [r5, #0]
 801d48a:	b103      	cbz	r3, 801d48e <_read_r+0x1e>
 801d48c:	6023      	str	r3, [r4, #0]
 801d48e:	bd38      	pop	{r3, r4, r5, pc}
 801d490:	240694f0 	.word	0x240694f0

0801d494 <_sbrk_r>:
 801d494:	b538      	push	{r3, r4, r5, lr}
 801d496:	4d06      	ldr	r5, [pc, #24]	@ (801d4b0 <_sbrk_r+0x1c>)
 801d498:	2300      	movs	r3, #0
 801d49a:	4604      	mov	r4, r0
 801d49c:	4608      	mov	r0, r1
 801d49e:	602b      	str	r3, [r5, #0]
 801d4a0:	f7e4 fc5c 	bl	8001d5c <_sbrk>
 801d4a4:	1c43      	adds	r3, r0, #1
 801d4a6:	d102      	bne.n	801d4ae <_sbrk_r+0x1a>
 801d4a8:	682b      	ldr	r3, [r5, #0]
 801d4aa:	b103      	cbz	r3, 801d4ae <_sbrk_r+0x1a>
 801d4ac:	6023      	str	r3, [r4, #0]
 801d4ae:	bd38      	pop	{r3, r4, r5, pc}
 801d4b0:	240694f0 	.word	0x240694f0

0801d4b4 <_write_r>:
 801d4b4:	b538      	push	{r3, r4, r5, lr}
 801d4b6:	4d07      	ldr	r5, [pc, #28]	@ (801d4d4 <_write_r+0x20>)
 801d4b8:	4604      	mov	r4, r0
 801d4ba:	4608      	mov	r0, r1
 801d4bc:	4611      	mov	r1, r2
 801d4be:	2200      	movs	r2, #0
 801d4c0:	602a      	str	r2, [r5, #0]
 801d4c2:	461a      	mov	r2, r3
 801d4c4:	f7e4 fbfa 	bl	8001cbc <_write>
 801d4c8:	1c43      	adds	r3, r0, #1
 801d4ca:	d102      	bne.n	801d4d2 <_write_r+0x1e>
 801d4cc:	682b      	ldr	r3, [r5, #0]
 801d4ce:	b103      	cbz	r3, 801d4d2 <_write_r+0x1e>
 801d4d0:	6023      	str	r3, [r4, #0]
 801d4d2:	bd38      	pop	{r3, r4, r5, pc}
 801d4d4:	240694f0 	.word	0x240694f0

0801d4d8 <__errno>:
 801d4d8:	4b01      	ldr	r3, [pc, #4]	@ (801d4e0 <__errno+0x8>)
 801d4da:	6818      	ldr	r0, [r3, #0]
 801d4dc:	4770      	bx	lr
 801d4de:	bf00      	nop
 801d4e0:	240013a0 	.word	0x240013a0

0801d4e4 <__libc_init_array>:
 801d4e4:	b570      	push	{r4, r5, r6, lr}
 801d4e6:	4d0d      	ldr	r5, [pc, #52]	@ (801d51c <__libc_init_array+0x38>)
 801d4e8:	4c0d      	ldr	r4, [pc, #52]	@ (801d520 <__libc_init_array+0x3c>)
 801d4ea:	1b64      	subs	r4, r4, r5
 801d4ec:	10a4      	asrs	r4, r4, #2
 801d4ee:	2600      	movs	r6, #0
 801d4f0:	42a6      	cmp	r6, r4
 801d4f2:	d109      	bne.n	801d508 <__libc_init_array+0x24>
 801d4f4:	4d0b      	ldr	r5, [pc, #44]	@ (801d524 <__libc_init_array+0x40>)
 801d4f6:	4c0c      	ldr	r4, [pc, #48]	@ (801d528 <__libc_init_array+0x44>)
 801d4f8:	f000 fe62 	bl	801e1c0 <_init>
 801d4fc:	1b64      	subs	r4, r4, r5
 801d4fe:	10a4      	asrs	r4, r4, #2
 801d500:	2600      	movs	r6, #0
 801d502:	42a6      	cmp	r6, r4
 801d504:	d105      	bne.n	801d512 <__libc_init_array+0x2e>
 801d506:	bd70      	pop	{r4, r5, r6, pc}
 801d508:	f855 3b04 	ldr.w	r3, [r5], #4
 801d50c:	4798      	blx	r3
 801d50e:	3601      	adds	r6, #1
 801d510:	e7ee      	b.n	801d4f0 <__libc_init_array+0xc>
 801d512:	f855 3b04 	ldr.w	r3, [r5], #4
 801d516:	4798      	blx	r3
 801d518:	3601      	adds	r6, #1
 801d51a:	e7f2      	b.n	801d502 <__libc_init_array+0x1e>
 801d51c:	08020af0 	.word	0x08020af0
 801d520:	08020af0 	.word	0x08020af0
 801d524:	08020af0 	.word	0x08020af0
 801d528:	08020b30 	.word	0x08020b30

0801d52c <__retarget_lock_init_recursive>:
 801d52c:	4770      	bx	lr

0801d52e <__retarget_lock_acquire_recursive>:
 801d52e:	4770      	bx	lr

0801d530 <__retarget_lock_release_recursive>:
 801d530:	4770      	bx	lr

0801d532 <strcpy>:
 801d532:	4603      	mov	r3, r0
 801d534:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d538:	f803 2b01 	strb.w	r2, [r3], #1
 801d53c:	2a00      	cmp	r2, #0
 801d53e:	d1f9      	bne.n	801d534 <strcpy+0x2>
 801d540:	4770      	bx	lr

0801d542 <memcpy>:
 801d542:	440a      	add	r2, r1
 801d544:	4291      	cmp	r1, r2
 801d546:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d54a:	d100      	bne.n	801d54e <memcpy+0xc>
 801d54c:	4770      	bx	lr
 801d54e:	b510      	push	{r4, lr}
 801d550:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d554:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d558:	4291      	cmp	r1, r2
 801d55a:	d1f9      	bne.n	801d550 <memcpy+0xe>
 801d55c:	bd10      	pop	{r4, pc}
	...

0801d560 <__assert_func>:
 801d560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d562:	4614      	mov	r4, r2
 801d564:	461a      	mov	r2, r3
 801d566:	4b09      	ldr	r3, [pc, #36]	@ (801d58c <__assert_func+0x2c>)
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	4605      	mov	r5, r0
 801d56c:	68d8      	ldr	r0, [r3, #12]
 801d56e:	b954      	cbnz	r4, 801d586 <__assert_func+0x26>
 801d570:	4b07      	ldr	r3, [pc, #28]	@ (801d590 <__assert_func+0x30>)
 801d572:	461c      	mov	r4, r3
 801d574:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d578:	9100      	str	r1, [sp, #0]
 801d57a:	462b      	mov	r3, r5
 801d57c:	4905      	ldr	r1, [pc, #20]	@ (801d594 <__assert_func+0x34>)
 801d57e:	f000 fbfd 	bl	801dd7c <fiprintf>
 801d582:	f000 fc91 	bl	801dea8 <abort>
 801d586:	4b04      	ldr	r3, [pc, #16]	@ (801d598 <__assert_func+0x38>)
 801d588:	e7f4      	b.n	801d574 <__assert_func+0x14>
 801d58a:	bf00      	nop
 801d58c:	240013a0 	.word	0x240013a0
 801d590:	08020ab1 	.word	0x08020ab1
 801d594:	08020a83 	.word	0x08020a83
 801d598:	08020a76 	.word	0x08020a76

0801d59c <__env_lock>:
 801d59c:	4801      	ldr	r0, [pc, #4]	@ (801d5a4 <__env_lock+0x8>)
 801d59e:	f7ff bfc6 	b.w	801d52e <__retarget_lock_acquire_recursive>
 801d5a2:	bf00      	nop
 801d5a4:	240694f4 	.word	0x240694f4

0801d5a8 <__env_unlock>:
 801d5a8:	4801      	ldr	r0, [pc, #4]	@ (801d5b0 <__env_unlock+0x8>)
 801d5aa:	f7ff bfc1 	b.w	801d530 <__retarget_lock_release_recursive>
 801d5ae:	bf00      	nop
 801d5b0:	240694f4 	.word	0x240694f4

0801d5b4 <_free_r>:
 801d5b4:	b538      	push	{r3, r4, r5, lr}
 801d5b6:	4605      	mov	r5, r0
 801d5b8:	2900      	cmp	r1, #0
 801d5ba:	d041      	beq.n	801d640 <_free_r+0x8c>
 801d5bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d5c0:	1f0c      	subs	r4, r1, #4
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	bfb8      	it	lt
 801d5c6:	18e4      	addlt	r4, r4, r3
 801d5c8:	f7ff faec 	bl	801cba4 <__malloc_lock>
 801d5cc:	4a1d      	ldr	r2, [pc, #116]	@ (801d644 <_free_r+0x90>)
 801d5ce:	6813      	ldr	r3, [r2, #0]
 801d5d0:	b933      	cbnz	r3, 801d5e0 <_free_r+0x2c>
 801d5d2:	6063      	str	r3, [r4, #4]
 801d5d4:	6014      	str	r4, [r2, #0]
 801d5d6:	4628      	mov	r0, r5
 801d5d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d5dc:	f7ff bae8 	b.w	801cbb0 <__malloc_unlock>
 801d5e0:	42a3      	cmp	r3, r4
 801d5e2:	d908      	bls.n	801d5f6 <_free_r+0x42>
 801d5e4:	6820      	ldr	r0, [r4, #0]
 801d5e6:	1821      	adds	r1, r4, r0
 801d5e8:	428b      	cmp	r3, r1
 801d5ea:	bf01      	itttt	eq
 801d5ec:	6819      	ldreq	r1, [r3, #0]
 801d5ee:	685b      	ldreq	r3, [r3, #4]
 801d5f0:	1809      	addeq	r1, r1, r0
 801d5f2:	6021      	streq	r1, [r4, #0]
 801d5f4:	e7ed      	b.n	801d5d2 <_free_r+0x1e>
 801d5f6:	461a      	mov	r2, r3
 801d5f8:	685b      	ldr	r3, [r3, #4]
 801d5fa:	b10b      	cbz	r3, 801d600 <_free_r+0x4c>
 801d5fc:	42a3      	cmp	r3, r4
 801d5fe:	d9fa      	bls.n	801d5f6 <_free_r+0x42>
 801d600:	6811      	ldr	r1, [r2, #0]
 801d602:	1850      	adds	r0, r2, r1
 801d604:	42a0      	cmp	r0, r4
 801d606:	d10b      	bne.n	801d620 <_free_r+0x6c>
 801d608:	6820      	ldr	r0, [r4, #0]
 801d60a:	4401      	add	r1, r0
 801d60c:	1850      	adds	r0, r2, r1
 801d60e:	4283      	cmp	r3, r0
 801d610:	6011      	str	r1, [r2, #0]
 801d612:	d1e0      	bne.n	801d5d6 <_free_r+0x22>
 801d614:	6818      	ldr	r0, [r3, #0]
 801d616:	685b      	ldr	r3, [r3, #4]
 801d618:	6053      	str	r3, [r2, #4]
 801d61a:	4408      	add	r0, r1
 801d61c:	6010      	str	r0, [r2, #0]
 801d61e:	e7da      	b.n	801d5d6 <_free_r+0x22>
 801d620:	d902      	bls.n	801d628 <_free_r+0x74>
 801d622:	230c      	movs	r3, #12
 801d624:	602b      	str	r3, [r5, #0]
 801d626:	e7d6      	b.n	801d5d6 <_free_r+0x22>
 801d628:	6820      	ldr	r0, [r4, #0]
 801d62a:	1821      	adds	r1, r4, r0
 801d62c:	428b      	cmp	r3, r1
 801d62e:	bf04      	itt	eq
 801d630:	6819      	ldreq	r1, [r3, #0]
 801d632:	685b      	ldreq	r3, [r3, #4]
 801d634:	6063      	str	r3, [r4, #4]
 801d636:	bf04      	itt	eq
 801d638:	1809      	addeq	r1, r1, r0
 801d63a:	6021      	streq	r1, [r4, #0]
 801d63c:	6054      	str	r4, [r2, #4]
 801d63e:	e7ca      	b.n	801d5d6 <_free_r+0x22>
 801d640:	bd38      	pop	{r3, r4, r5, pc}
 801d642:	bf00      	nop
 801d644:	240693b0 	.word	0x240693b0

0801d648 <_malloc_usable_size_r>:
 801d648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d64c:	1f18      	subs	r0, r3, #4
 801d64e:	2b00      	cmp	r3, #0
 801d650:	bfbc      	itt	lt
 801d652:	580b      	ldrlt	r3, [r1, r0]
 801d654:	18c0      	addlt	r0, r0, r3
 801d656:	4770      	bx	lr

0801d658 <__ssputs_r>:
 801d658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d65c:	688e      	ldr	r6, [r1, #8]
 801d65e:	461f      	mov	r7, r3
 801d660:	42be      	cmp	r6, r7
 801d662:	680b      	ldr	r3, [r1, #0]
 801d664:	4682      	mov	sl, r0
 801d666:	460c      	mov	r4, r1
 801d668:	4690      	mov	r8, r2
 801d66a:	d82d      	bhi.n	801d6c8 <__ssputs_r+0x70>
 801d66c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d670:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d674:	d026      	beq.n	801d6c4 <__ssputs_r+0x6c>
 801d676:	6965      	ldr	r5, [r4, #20]
 801d678:	6909      	ldr	r1, [r1, #16]
 801d67a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d67e:	eba3 0901 	sub.w	r9, r3, r1
 801d682:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d686:	1c7b      	adds	r3, r7, #1
 801d688:	444b      	add	r3, r9
 801d68a:	106d      	asrs	r5, r5, #1
 801d68c:	429d      	cmp	r5, r3
 801d68e:	bf38      	it	cc
 801d690:	461d      	movcc	r5, r3
 801d692:	0553      	lsls	r3, r2, #21
 801d694:	d527      	bpl.n	801d6e6 <__ssputs_r+0x8e>
 801d696:	4629      	mov	r1, r5
 801d698:	f7ff fa04 	bl	801caa4 <_malloc_r>
 801d69c:	4606      	mov	r6, r0
 801d69e:	b360      	cbz	r0, 801d6fa <__ssputs_r+0xa2>
 801d6a0:	6921      	ldr	r1, [r4, #16]
 801d6a2:	464a      	mov	r2, r9
 801d6a4:	f7ff ff4d 	bl	801d542 <memcpy>
 801d6a8:	89a3      	ldrh	r3, [r4, #12]
 801d6aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d6b2:	81a3      	strh	r3, [r4, #12]
 801d6b4:	6126      	str	r6, [r4, #16]
 801d6b6:	6165      	str	r5, [r4, #20]
 801d6b8:	444e      	add	r6, r9
 801d6ba:	eba5 0509 	sub.w	r5, r5, r9
 801d6be:	6026      	str	r6, [r4, #0]
 801d6c0:	60a5      	str	r5, [r4, #8]
 801d6c2:	463e      	mov	r6, r7
 801d6c4:	42be      	cmp	r6, r7
 801d6c6:	d900      	bls.n	801d6ca <__ssputs_r+0x72>
 801d6c8:	463e      	mov	r6, r7
 801d6ca:	6820      	ldr	r0, [r4, #0]
 801d6cc:	4632      	mov	r2, r6
 801d6ce:	4641      	mov	r1, r8
 801d6d0:	f7ff fdfe 	bl	801d2d0 <memmove>
 801d6d4:	68a3      	ldr	r3, [r4, #8]
 801d6d6:	1b9b      	subs	r3, r3, r6
 801d6d8:	60a3      	str	r3, [r4, #8]
 801d6da:	6823      	ldr	r3, [r4, #0]
 801d6dc:	4433      	add	r3, r6
 801d6de:	6023      	str	r3, [r4, #0]
 801d6e0:	2000      	movs	r0, #0
 801d6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6e6:	462a      	mov	r2, r5
 801d6e8:	f7ff fadc 	bl	801cca4 <_realloc_r>
 801d6ec:	4606      	mov	r6, r0
 801d6ee:	2800      	cmp	r0, #0
 801d6f0:	d1e0      	bne.n	801d6b4 <__ssputs_r+0x5c>
 801d6f2:	6921      	ldr	r1, [r4, #16]
 801d6f4:	4650      	mov	r0, sl
 801d6f6:	f7ff ff5d 	bl	801d5b4 <_free_r>
 801d6fa:	230c      	movs	r3, #12
 801d6fc:	f8ca 3000 	str.w	r3, [sl]
 801d700:	89a3      	ldrh	r3, [r4, #12]
 801d702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d706:	81a3      	strh	r3, [r4, #12]
 801d708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d70c:	e7e9      	b.n	801d6e2 <__ssputs_r+0x8a>
	...

0801d710 <_svfiprintf_r>:
 801d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d714:	4698      	mov	r8, r3
 801d716:	898b      	ldrh	r3, [r1, #12]
 801d718:	061b      	lsls	r3, r3, #24
 801d71a:	b09d      	sub	sp, #116	@ 0x74
 801d71c:	4607      	mov	r7, r0
 801d71e:	460d      	mov	r5, r1
 801d720:	4614      	mov	r4, r2
 801d722:	d510      	bpl.n	801d746 <_svfiprintf_r+0x36>
 801d724:	690b      	ldr	r3, [r1, #16]
 801d726:	b973      	cbnz	r3, 801d746 <_svfiprintf_r+0x36>
 801d728:	2140      	movs	r1, #64	@ 0x40
 801d72a:	f7ff f9bb 	bl	801caa4 <_malloc_r>
 801d72e:	6028      	str	r0, [r5, #0]
 801d730:	6128      	str	r0, [r5, #16]
 801d732:	b930      	cbnz	r0, 801d742 <_svfiprintf_r+0x32>
 801d734:	230c      	movs	r3, #12
 801d736:	603b      	str	r3, [r7, #0]
 801d738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d73c:	b01d      	add	sp, #116	@ 0x74
 801d73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d742:	2340      	movs	r3, #64	@ 0x40
 801d744:	616b      	str	r3, [r5, #20]
 801d746:	2300      	movs	r3, #0
 801d748:	9309      	str	r3, [sp, #36]	@ 0x24
 801d74a:	2320      	movs	r3, #32
 801d74c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d750:	f8cd 800c 	str.w	r8, [sp, #12]
 801d754:	2330      	movs	r3, #48	@ 0x30
 801d756:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d8f4 <_svfiprintf_r+0x1e4>
 801d75a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d75e:	f04f 0901 	mov.w	r9, #1
 801d762:	4623      	mov	r3, r4
 801d764:	469a      	mov	sl, r3
 801d766:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d76a:	b10a      	cbz	r2, 801d770 <_svfiprintf_r+0x60>
 801d76c:	2a25      	cmp	r2, #37	@ 0x25
 801d76e:	d1f9      	bne.n	801d764 <_svfiprintf_r+0x54>
 801d770:	ebba 0b04 	subs.w	fp, sl, r4
 801d774:	d00b      	beq.n	801d78e <_svfiprintf_r+0x7e>
 801d776:	465b      	mov	r3, fp
 801d778:	4622      	mov	r2, r4
 801d77a:	4629      	mov	r1, r5
 801d77c:	4638      	mov	r0, r7
 801d77e:	f7ff ff6b 	bl	801d658 <__ssputs_r>
 801d782:	3001      	adds	r0, #1
 801d784:	f000 80a7 	beq.w	801d8d6 <_svfiprintf_r+0x1c6>
 801d788:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d78a:	445a      	add	r2, fp
 801d78c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d78e:	f89a 3000 	ldrb.w	r3, [sl]
 801d792:	2b00      	cmp	r3, #0
 801d794:	f000 809f 	beq.w	801d8d6 <_svfiprintf_r+0x1c6>
 801d798:	2300      	movs	r3, #0
 801d79a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d79e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d7a2:	f10a 0a01 	add.w	sl, sl, #1
 801d7a6:	9304      	str	r3, [sp, #16]
 801d7a8:	9307      	str	r3, [sp, #28]
 801d7aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d7ae:	931a      	str	r3, [sp, #104]	@ 0x68
 801d7b0:	4654      	mov	r4, sl
 801d7b2:	2205      	movs	r2, #5
 801d7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7b8:	484e      	ldr	r0, [pc, #312]	@ (801d8f4 <_svfiprintf_r+0x1e4>)
 801d7ba:	f7e2 fda9 	bl	8000310 <memchr>
 801d7be:	9a04      	ldr	r2, [sp, #16]
 801d7c0:	b9d8      	cbnz	r0, 801d7fa <_svfiprintf_r+0xea>
 801d7c2:	06d0      	lsls	r0, r2, #27
 801d7c4:	bf44      	itt	mi
 801d7c6:	2320      	movmi	r3, #32
 801d7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d7cc:	0711      	lsls	r1, r2, #28
 801d7ce:	bf44      	itt	mi
 801d7d0:	232b      	movmi	r3, #43	@ 0x2b
 801d7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d7d6:	f89a 3000 	ldrb.w	r3, [sl]
 801d7da:	2b2a      	cmp	r3, #42	@ 0x2a
 801d7dc:	d015      	beq.n	801d80a <_svfiprintf_r+0xfa>
 801d7de:	9a07      	ldr	r2, [sp, #28]
 801d7e0:	4654      	mov	r4, sl
 801d7e2:	2000      	movs	r0, #0
 801d7e4:	f04f 0c0a 	mov.w	ip, #10
 801d7e8:	4621      	mov	r1, r4
 801d7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d7ee:	3b30      	subs	r3, #48	@ 0x30
 801d7f0:	2b09      	cmp	r3, #9
 801d7f2:	d94b      	bls.n	801d88c <_svfiprintf_r+0x17c>
 801d7f4:	b1b0      	cbz	r0, 801d824 <_svfiprintf_r+0x114>
 801d7f6:	9207      	str	r2, [sp, #28]
 801d7f8:	e014      	b.n	801d824 <_svfiprintf_r+0x114>
 801d7fa:	eba0 0308 	sub.w	r3, r0, r8
 801d7fe:	fa09 f303 	lsl.w	r3, r9, r3
 801d802:	4313      	orrs	r3, r2
 801d804:	9304      	str	r3, [sp, #16]
 801d806:	46a2      	mov	sl, r4
 801d808:	e7d2      	b.n	801d7b0 <_svfiprintf_r+0xa0>
 801d80a:	9b03      	ldr	r3, [sp, #12]
 801d80c:	1d19      	adds	r1, r3, #4
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	9103      	str	r1, [sp, #12]
 801d812:	2b00      	cmp	r3, #0
 801d814:	bfbb      	ittet	lt
 801d816:	425b      	neglt	r3, r3
 801d818:	f042 0202 	orrlt.w	r2, r2, #2
 801d81c:	9307      	strge	r3, [sp, #28]
 801d81e:	9307      	strlt	r3, [sp, #28]
 801d820:	bfb8      	it	lt
 801d822:	9204      	strlt	r2, [sp, #16]
 801d824:	7823      	ldrb	r3, [r4, #0]
 801d826:	2b2e      	cmp	r3, #46	@ 0x2e
 801d828:	d10a      	bne.n	801d840 <_svfiprintf_r+0x130>
 801d82a:	7863      	ldrb	r3, [r4, #1]
 801d82c:	2b2a      	cmp	r3, #42	@ 0x2a
 801d82e:	d132      	bne.n	801d896 <_svfiprintf_r+0x186>
 801d830:	9b03      	ldr	r3, [sp, #12]
 801d832:	1d1a      	adds	r2, r3, #4
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	9203      	str	r2, [sp, #12]
 801d838:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d83c:	3402      	adds	r4, #2
 801d83e:	9305      	str	r3, [sp, #20]
 801d840:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d904 <_svfiprintf_r+0x1f4>
 801d844:	7821      	ldrb	r1, [r4, #0]
 801d846:	2203      	movs	r2, #3
 801d848:	4650      	mov	r0, sl
 801d84a:	f7e2 fd61 	bl	8000310 <memchr>
 801d84e:	b138      	cbz	r0, 801d860 <_svfiprintf_r+0x150>
 801d850:	9b04      	ldr	r3, [sp, #16]
 801d852:	eba0 000a 	sub.w	r0, r0, sl
 801d856:	2240      	movs	r2, #64	@ 0x40
 801d858:	4082      	lsls	r2, r0
 801d85a:	4313      	orrs	r3, r2
 801d85c:	3401      	adds	r4, #1
 801d85e:	9304      	str	r3, [sp, #16]
 801d860:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d864:	4824      	ldr	r0, [pc, #144]	@ (801d8f8 <_svfiprintf_r+0x1e8>)
 801d866:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d86a:	2206      	movs	r2, #6
 801d86c:	f7e2 fd50 	bl	8000310 <memchr>
 801d870:	2800      	cmp	r0, #0
 801d872:	d036      	beq.n	801d8e2 <_svfiprintf_r+0x1d2>
 801d874:	4b21      	ldr	r3, [pc, #132]	@ (801d8fc <_svfiprintf_r+0x1ec>)
 801d876:	bb1b      	cbnz	r3, 801d8c0 <_svfiprintf_r+0x1b0>
 801d878:	9b03      	ldr	r3, [sp, #12]
 801d87a:	3307      	adds	r3, #7
 801d87c:	f023 0307 	bic.w	r3, r3, #7
 801d880:	3308      	adds	r3, #8
 801d882:	9303      	str	r3, [sp, #12]
 801d884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d886:	4433      	add	r3, r6
 801d888:	9309      	str	r3, [sp, #36]	@ 0x24
 801d88a:	e76a      	b.n	801d762 <_svfiprintf_r+0x52>
 801d88c:	fb0c 3202 	mla	r2, ip, r2, r3
 801d890:	460c      	mov	r4, r1
 801d892:	2001      	movs	r0, #1
 801d894:	e7a8      	b.n	801d7e8 <_svfiprintf_r+0xd8>
 801d896:	2300      	movs	r3, #0
 801d898:	3401      	adds	r4, #1
 801d89a:	9305      	str	r3, [sp, #20]
 801d89c:	4619      	mov	r1, r3
 801d89e:	f04f 0c0a 	mov.w	ip, #10
 801d8a2:	4620      	mov	r0, r4
 801d8a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d8a8:	3a30      	subs	r2, #48	@ 0x30
 801d8aa:	2a09      	cmp	r2, #9
 801d8ac:	d903      	bls.n	801d8b6 <_svfiprintf_r+0x1a6>
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d0c6      	beq.n	801d840 <_svfiprintf_r+0x130>
 801d8b2:	9105      	str	r1, [sp, #20]
 801d8b4:	e7c4      	b.n	801d840 <_svfiprintf_r+0x130>
 801d8b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801d8ba:	4604      	mov	r4, r0
 801d8bc:	2301      	movs	r3, #1
 801d8be:	e7f0      	b.n	801d8a2 <_svfiprintf_r+0x192>
 801d8c0:	ab03      	add	r3, sp, #12
 801d8c2:	9300      	str	r3, [sp, #0]
 801d8c4:	462a      	mov	r2, r5
 801d8c6:	4b0e      	ldr	r3, [pc, #56]	@ (801d900 <_svfiprintf_r+0x1f0>)
 801d8c8:	a904      	add	r1, sp, #16
 801d8ca:	4638      	mov	r0, r7
 801d8cc:	f3af 8000 	nop.w
 801d8d0:	1c42      	adds	r2, r0, #1
 801d8d2:	4606      	mov	r6, r0
 801d8d4:	d1d6      	bne.n	801d884 <_svfiprintf_r+0x174>
 801d8d6:	89ab      	ldrh	r3, [r5, #12]
 801d8d8:	065b      	lsls	r3, r3, #25
 801d8da:	f53f af2d 	bmi.w	801d738 <_svfiprintf_r+0x28>
 801d8de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d8e0:	e72c      	b.n	801d73c <_svfiprintf_r+0x2c>
 801d8e2:	ab03      	add	r3, sp, #12
 801d8e4:	9300      	str	r3, [sp, #0]
 801d8e6:	462a      	mov	r2, r5
 801d8e8:	4b05      	ldr	r3, [pc, #20]	@ (801d900 <_svfiprintf_r+0x1f0>)
 801d8ea:	a904      	add	r1, sp, #16
 801d8ec:	4638      	mov	r0, r7
 801d8ee:	f000 f879 	bl	801d9e4 <_printf_i>
 801d8f2:	e7ed      	b.n	801d8d0 <_svfiprintf_r+0x1c0>
 801d8f4:	08020ab2 	.word	0x08020ab2
 801d8f8:	08020abc 	.word	0x08020abc
 801d8fc:	00000000 	.word	0x00000000
 801d900:	0801d659 	.word	0x0801d659
 801d904:	08020ab8 	.word	0x08020ab8

0801d908 <_printf_common>:
 801d908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d90c:	4616      	mov	r6, r2
 801d90e:	4698      	mov	r8, r3
 801d910:	688a      	ldr	r2, [r1, #8]
 801d912:	690b      	ldr	r3, [r1, #16]
 801d914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d918:	4293      	cmp	r3, r2
 801d91a:	bfb8      	it	lt
 801d91c:	4613      	movlt	r3, r2
 801d91e:	6033      	str	r3, [r6, #0]
 801d920:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d924:	4607      	mov	r7, r0
 801d926:	460c      	mov	r4, r1
 801d928:	b10a      	cbz	r2, 801d92e <_printf_common+0x26>
 801d92a:	3301      	adds	r3, #1
 801d92c:	6033      	str	r3, [r6, #0]
 801d92e:	6823      	ldr	r3, [r4, #0]
 801d930:	0699      	lsls	r1, r3, #26
 801d932:	bf42      	ittt	mi
 801d934:	6833      	ldrmi	r3, [r6, #0]
 801d936:	3302      	addmi	r3, #2
 801d938:	6033      	strmi	r3, [r6, #0]
 801d93a:	6825      	ldr	r5, [r4, #0]
 801d93c:	f015 0506 	ands.w	r5, r5, #6
 801d940:	d106      	bne.n	801d950 <_printf_common+0x48>
 801d942:	f104 0a19 	add.w	sl, r4, #25
 801d946:	68e3      	ldr	r3, [r4, #12]
 801d948:	6832      	ldr	r2, [r6, #0]
 801d94a:	1a9b      	subs	r3, r3, r2
 801d94c:	42ab      	cmp	r3, r5
 801d94e:	dc26      	bgt.n	801d99e <_printf_common+0x96>
 801d950:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d954:	6822      	ldr	r2, [r4, #0]
 801d956:	3b00      	subs	r3, #0
 801d958:	bf18      	it	ne
 801d95a:	2301      	movne	r3, #1
 801d95c:	0692      	lsls	r2, r2, #26
 801d95e:	d42b      	bmi.n	801d9b8 <_printf_common+0xb0>
 801d960:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d964:	4641      	mov	r1, r8
 801d966:	4638      	mov	r0, r7
 801d968:	47c8      	blx	r9
 801d96a:	3001      	adds	r0, #1
 801d96c:	d01e      	beq.n	801d9ac <_printf_common+0xa4>
 801d96e:	6823      	ldr	r3, [r4, #0]
 801d970:	6922      	ldr	r2, [r4, #16]
 801d972:	f003 0306 	and.w	r3, r3, #6
 801d976:	2b04      	cmp	r3, #4
 801d978:	bf02      	ittt	eq
 801d97a:	68e5      	ldreq	r5, [r4, #12]
 801d97c:	6833      	ldreq	r3, [r6, #0]
 801d97e:	1aed      	subeq	r5, r5, r3
 801d980:	68a3      	ldr	r3, [r4, #8]
 801d982:	bf0c      	ite	eq
 801d984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d988:	2500      	movne	r5, #0
 801d98a:	4293      	cmp	r3, r2
 801d98c:	bfc4      	itt	gt
 801d98e:	1a9b      	subgt	r3, r3, r2
 801d990:	18ed      	addgt	r5, r5, r3
 801d992:	2600      	movs	r6, #0
 801d994:	341a      	adds	r4, #26
 801d996:	42b5      	cmp	r5, r6
 801d998:	d11a      	bne.n	801d9d0 <_printf_common+0xc8>
 801d99a:	2000      	movs	r0, #0
 801d99c:	e008      	b.n	801d9b0 <_printf_common+0xa8>
 801d99e:	2301      	movs	r3, #1
 801d9a0:	4652      	mov	r2, sl
 801d9a2:	4641      	mov	r1, r8
 801d9a4:	4638      	mov	r0, r7
 801d9a6:	47c8      	blx	r9
 801d9a8:	3001      	adds	r0, #1
 801d9aa:	d103      	bne.n	801d9b4 <_printf_common+0xac>
 801d9ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9b4:	3501      	adds	r5, #1
 801d9b6:	e7c6      	b.n	801d946 <_printf_common+0x3e>
 801d9b8:	18e1      	adds	r1, r4, r3
 801d9ba:	1c5a      	adds	r2, r3, #1
 801d9bc:	2030      	movs	r0, #48	@ 0x30
 801d9be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d9c2:	4422      	add	r2, r4
 801d9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d9c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d9cc:	3302      	adds	r3, #2
 801d9ce:	e7c7      	b.n	801d960 <_printf_common+0x58>
 801d9d0:	2301      	movs	r3, #1
 801d9d2:	4622      	mov	r2, r4
 801d9d4:	4641      	mov	r1, r8
 801d9d6:	4638      	mov	r0, r7
 801d9d8:	47c8      	blx	r9
 801d9da:	3001      	adds	r0, #1
 801d9dc:	d0e6      	beq.n	801d9ac <_printf_common+0xa4>
 801d9de:	3601      	adds	r6, #1
 801d9e0:	e7d9      	b.n	801d996 <_printf_common+0x8e>
	...

0801d9e4 <_printf_i>:
 801d9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d9e8:	7e0f      	ldrb	r7, [r1, #24]
 801d9ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d9ec:	2f78      	cmp	r7, #120	@ 0x78
 801d9ee:	4691      	mov	r9, r2
 801d9f0:	4680      	mov	r8, r0
 801d9f2:	460c      	mov	r4, r1
 801d9f4:	469a      	mov	sl, r3
 801d9f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d9fa:	d807      	bhi.n	801da0c <_printf_i+0x28>
 801d9fc:	2f62      	cmp	r7, #98	@ 0x62
 801d9fe:	d80a      	bhi.n	801da16 <_printf_i+0x32>
 801da00:	2f00      	cmp	r7, #0
 801da02:	f000 80d2 	beq.w	801dbaa <_printf_i+0x1c6>
 801da06:	2f58      	cmp	r7, #88	@ 0x58
 801da08:	f000 80b9 	beq.w	801db7e <_printf_i+0x19a>
 801da0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801da10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801da14:	e03a      	b.n	801da8c <_printf_i+0xa8>
 801da16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801da1a:	2b15      	cmp	r3, #21
 801da1c:	d8f6      	bhi.n	801da0c <_printf_i+0x28>
 801da1e:	a101      	add	r1, pc, #4	@ (adr r1, 801da24 <_printf_i+0x40>)
 801da20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801da24:	0801da7d 	.word	0x0801da7d
 801da28:	0801da91 	.word	0x0801da91
 801da2c:	0801da0d 	.word	0x0801da0d
 801da30:	0801da0d 	.word	0x0801da0d
 801da34:	0801da0d 	.word	0x0801da0d
 801da38:	0801da0d 	.word	0x0801da0d
 801da3c:	0801da91 	.word	0x0801da91
 801da40:	0801da0d 	.word	0x0801da0d
 801da44:	0801da0d 	.word	0x0801da0d
 801da48:	0801da0d 	.word	0x0801da0d
 801da4c:	0801da0d 	.word	0x0801da0d
 801da50:	0801db91 	.word	0x0801db91
 801da54:	0801dabb 	.word	0x0801dabb
 801da58:	0801db4b 	.word	0x0801db4b
 801da5c:	0801da0d 	.word	0x0801da0d
 801da60:	0801da0d 	.word	0x0801da0d
 801da64:	0801dbb3 	.word	0x0801dbb3
 801da68:	0801da0d 	.word	0x0801da0d
 801da6c:	0801dabb 	.word	0x0801dabb
 801da70:	0801da0d 	.word	0x0801da0d
 801da74:	0801da0d 	.word	0x0801da0d
 801da78:	0801db53 	.word	0x0801db53
 801da7c:	6833      	ldr	r3, [r6, #0]
 801da7e:	1d1a      	adds	r2, r3, #4
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	6032      	str	r2, [r6, #0]
 801da84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801da88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801da8c:	2301      	movs	r3, #1
 801da8e:	e09d      	b.n	801dbcc <_printf_i+0x1e8>
 801da90:	6833      	ldr	r3, [r6, #0]
 801da92:	6820      	ldr	r0, [r4, #0]
 801da94:	1d19      	adds	r1, r3, #4
 801da96:	6031      	str	r1, [r6, #0]
 801da98:	0606      	lsls	r6, r0, #24
 801da9a:	d501      	bpl.n	801daa0 <_printf_i+0xbc>
 801da9c:	681d      	ldr	r5, [r3, #0]
 801da9e:	e003      	b.n	801daa8 <_printf_i+0xc4>
 801daa0:	0645      	lsls	r5, r0, #25
 801daa2:	d5fb      	bpl.n	801da9c <_printf_i+0xb8>
 801daa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801daa8:	2d00      	cmp	r5, #0
 801daaa:	da03      	bge.n	801dab4 <_printf_i+0xd0>
 801daac:	232d      	movs	r3, #45	@ 0x2d
 801daae:	426d      	negs	r5, r5
 801dab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dab4:	4859      	ldr	r0, [pc, #356]	@ (801dc1c <_printf_i+0x238>)
 801dab6:	230a      	movs	r3, #10
 801dab8:	e011      	b.n	801dade <_printf_i+0xfa>
 801daba:	6821      	ldr	r1, [r4, #0]
 801dabc:	6833      	ldr	r3, [r6, #0]
 801dabe:	0608      	lsls	r0, r1, #24
 801dac0:	f853 5b04 	ldr.w	r5, [r3], #4
 801dac4:	d402      	bmi.n	801dacc <_printf_i+0xe8>
 801dac6:	0649      	lsls	r1, r1, #25
 801dac8:	bf48      	it	mi
 801daca:	b2ad      	uxthmi	r5, r5
 801dacc:	2f6f      	cmp	r7, #111	@ 0x6f
 801dace:	4853      	ldr	r0, [pc, #332]	@ (801dc1c <_printf_i+0x238>)
 801dad0:	6033      	str	r3, [r6, #0]
 801dad2:	bf14      	ite	ne
 801dad4:	230a      	movne	r3, #10
 801dad6:	2308      	moveq	r3, #8
 801dad8:	2100      	movs	r1, #0
 801dada:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801dade:	6866      	ldr	r6, [r4, #4]
 801dae0:	60a6      	str	r6, [r4, #8]
 801dae2:	2e00      	cmp	r6, #0
 801dae4:	bfa2      	ittt	ge
 801dae6:	6821      	ldrge	r1, [r4, #0]
 801dae8:	f021 0104 	bicge.w	r1, r1, #4
 801daec:	6021      	strge	r1, [r4, #0]
 801daee:	b90d      	cbnz	r5, 801daf4 <_printf_i+0x110>
 801daf0:	2e00      	cmp	r6, #0
 801daf2:	d04b      	beq.n	801db8c <_printf_i+0x1a8>
 801daf4:	4616      	mov	r6, r2
 801daf6:	fbb5 f1f3 	udiv	r1, r5, r3
 801dafa:	fb03 5711 	mls	r7, r3, r1, r5
 801dafe:	5dc7      	ldrb	r7, [r0, r7]
 801db00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801db04:	462f      	mov	r7, r5
 801db06:	42bb      	cmp	r3, r7
 801db08:	460d      	mov	r5, r1
 801db0a:	d9f4      	bls.n	801daf6 <_printf_i+0x112>
 801db0c:	2b08      	cmp	r3, #8
 801db0e:	d10b      	bne.n	801db28 <_printf_i+0x144>
 801db10:	6823      	ldr	r3, [r4, #0]
 801db12:	07df      	lsls	r7, r3, #31
 801db14:	d508      	bpl.n	801db28 <_printf_i+0x144>
 801db16:	6923      	ldr	r3, [r4, #16]
 801db18:	6861      	ldr	r1, [r4, #4]
 801db1a:	4299      	cmp	r1, r3
 801db1c:	bfde      	ittt	le
 801db1e:	2330      	movle	r3, #48	@ 0x30
 801db20:	f806 3c01 	strble.w	r3, [r6, #-1]
 801db24:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801db28:	1b92      	subs	r2, r2, r6
 801db2a:	6122      	str	r2, [r4, #16]
 801db2c:	f8cd a000 	str.w	sl, [sp]
 801db30:	464b      	mov	r3, r9
 801db32:	aa03      	add	r2, sp, #12
 801db34:	4621      	mov	r1, r4
 801db36:	4640      	mov	r0, r8
 801db38:	f7ff fee6 	bl	801d908 <_printf_common>
 801db3c:	3001      	adds	r0, #1
 801db3e:	d14a      	bne.n	801dbd6 <_printf_i+0x1f2>
 801db40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801db44:	b004      	add	sp, #16
 801db46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db4a:	6823      	ldr	r3, [r4, #0]
 801db4c:	f043 0320 	orr.w	r3, r3, #32
 801db50:	6023      	str	r3, [r4, #0]
 801db52:	4833      	ldr	r0, [pc, #204]	@ (801dc20 <_printf_i+0x23c>)
 801db54:	2778      	movs	r7, #120	@ 0x78
 801db56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801db5a:	6823      	ldr	r3, [r4, #0]
 801db5c:	6831      	ldr	r1, [r6, #0]
 801db5e:	061f      	lsls	r7, r3, #24
 801db60:	f851 5b04 	ldr.w	r5, [r1], #4
 801db64:	d402      	bmi.n	801db6c <_printf_i+0x188>
 801db66:	065f      	lsls	r7, r3, #25
 801db68:	bf48      	it	mi
 801db6a:	b2ad      	uxthmi	r5, r5
 801db6c:	6031      	str	r1, [r6, #0]
 801db6e:	07d9      	lsls	r1, r3, #31
 801db70:	bf44      	itt	mi
 801db72:	f043 0320 	orrmi.w	r3, r3, #32
 801db76:	6023      	strmi	r3, [r4, #0]
 801db78:	b11d      	cbz	r5, 801db82 <_printf_i+0x19e>
 801db7a:	2310      	movs	r3, #16
 801db7c:	e7ac      	b.n	801dad8 <_printf_i+0xf4>
 801db7e:	4827      	ldr	r0, [pc, #156]	@ (801dc1c <_printf_i+0x238>)
 801db80:	e7e9      	b.n	801db56 <_printf_i+0x172>
 801db82:	6823      	ldr	r3, [r4, #0]
 801db84:	f023 0320 	bic.w	r3, r3, #32
 801db88:	6023      	str	r3, [r4, #0]
 801db8a:	e7f6      	b.n	801db7a <_printf_i+0x196>
 801db8c:	4616      	mov	r6, r2
 801db8e:	e7bd      	b.n	801db0c <_printf_i+0x128>
 801db90:	6833      	ldr	r3, [r6, #0]
 801db92:	6825      	ldr	r5, [r4, #0]
 801db94:	6961      	ldr	r1, [r4, #20]
 801db96:	1d18      	adds	r0, r3, #4
 801db98:	6030      	str	r0, [r6, #0]
 801db9a:	062e      	lsls	r6, r5, #24
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	d501      	bpl.n	801dba4 <_printf_i+0x1c0>
 801dba0:	6019      	str	r1, [r3, #0]
 801dba2:	e002      	b.n	801dbaa <_printf_i+0x1c6>
 801dba4:	0668      	lsls	r0, r5, #25
 801dba6:	d5fb      	bpl.n	801dba0 <_printf_i+0x1bc>
 801dba8:	8019      	strh	r1, [r3, #0]
 801dbaa:	2300      	movs	r3, #0
 801dbac:	6123      	str	r3, [r4, #16]
 801dbae:	4616      	mov	r6, r2
 801dbb0:	e7bc      	b.n	801db2c <_printf_i+0x148>
 801dbb2:	6833      	ldr	r3, [r6, #0]
 801dbb4:	1d1a      	adds	r2, r3, #4
 801dbb6:	6032      	str	r2, [r6, #0]
 801dbb8:	681e      	ldr	r6, [r3, #0]
 801dbba:	6862      	ldr	r2, [r4, #4]
 801dbbc:	2100      	movs	r1, #0
 801dbbe:	4630      	mov	r0, r6
 801dbc0:	f7e2 fba6 	bl	8000310 <memchr>
 801dbc4:	b108      	cbz	r0, 801dbca <_printf_i+0x1e6>
 801dbc6:	1b80      	subs	r0, r0, r6
 801dbc8:	6060      	str	r0, [r4, #4]
 801dbca:	6863      	ldr	r3, [r4, #4]
 801dbcc:	6123      	str	r3, [r4, #16]
 801dbce:	2300      	movs	r3, #0
 801dbd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dbd4:	e7aa      	b.n	801db2c <_printf_i+0x148>
 801dbd6:	6923      	ldr	r3, [r4, #16]
 801dbd8:	4632      	mov	r2, r6
 801dbda:	4649      	mov	r1, r9
 801dbdc:	4640      	mov	r0, r8
 801dbde:	47d0      	blx	sl
 801dbe0:	3001      	adds	r0, #1
 801dbe2:	d0ad      	beq.n	801db40 <_printf_i+0x15c>
 801dbe4:	6823      	ldr	r3, [r4, #0]
 801dbe6:	079b      	lsls	r3, r3, #30
 801dbe8:	d413      	bmi.n	801dc12 <_printf_i+0x22e>
 801dbea:	68e0      	ldr	r0, [r4, #12]
 801dbec:	9b03      	ldr	r3, [sp, #12]
 801dbee:	4298      	cmp	r0, r3
 801dbf0:	bfb8      	it	lt
 801dbf2:	4618      	movlt	r0, r3
 801dbf4:	e7a6      	b.n	801db44 <_printf_i+0x160>
 801dbf6:	2301      	movs	r3, #1
 801dbf8:	4632      	mov	r2, r6
 801dbfa:	4649      	mov	r1, r9
 801dbfc:	4640      	mov	r0, r8
 801dbfe:	47d0      	blx	sl
 801dc00:	3001      	adds	r0, #1
 801dc02:	d09d      	beq.n	801db40 <_printf_i+0x15c>
 801dc04:	3501      	adds	r5, #1
 801dc06:	68e3      	ldr	r3, [r4, #12]
 801dc08:	9903      	ldr	r1, [sp, #12]
 801dc0a:	1a5b      	subs	r3, r3, r1
 801dc0c:	42ab      	cmp	r3, r5
 801dc0e:	dcf2      	bgt.n	801dbf6 <_printf_i+0x212>
 801dc10:	e7eb      	b.n	801dbea <_printf_i+0x206>
 801dc12:	2500      	movs	r5, #0
 801dc14:	f104 0619 	add.w	r6, r4, #25
 801dc18:	e7f5      	b.n	801dc06 <_printf_i+0x222>
 801dc1a:	bf00      	nop
 801dc1c:	08020ac3 	.word	0x08020ac3
 801dc20:	08020ad4 	.word	0x08020ad4

0801dc24 <__sflush_r>:
 801dc24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc2c:	0716      	lsls	r6, r2, #28
 801dc2e:	4605      	mov	r5, r0
 801dc30:	460c      	mov	r4, r1
 801dc32:	d454      	bmi.n	801dcde <__sflush_r+0xba>
 801dc34:	684b      	ldr	r3, [r1, #4]
 801dc36:	2b00      	cmp	r3, #0
 801dc38:	dc02      	bgt.n	801dc40 <__sflush_r+0x1c>
 801dc3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	dd48      	ble.n	801dcd2 <__sflush_r+0xae>
 801dc40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc42:	2e00      	cmp	r6, #0
 801dc44:	d045      	beq.n	801dcd2 <__sflush_r+0xae>
 801dc46:	2300      	movs	r3, #0
 801dc48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dc4c:	682f      	ldr	r7, [r5, #0]
 801dc4e:	6a21      	ldr	r1, [r4, #32]
 801dc50:	602b      	str	r3, [r5, #0]
 801dc52:	d030      	beq.n	801dcb6 <__sflush_r+0x92>
 801dc54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dc56:	89a3      	ldrh	r3, [r4, #12]
 801dc58:	0759      	lsls	r1, r3, #29
 801dc5a:	d505      	bpl.n	801dc68 <__sflush_r+0x44>
 801dc5c:	6863      	ldr	r3, [r4, #4]
 801dc5e:	1ad2      	subs	r2, r2, r3
 801dc60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dc62:	b10b      	cbz	r3, 801dc68 <__sflush_r+0x44>
 801dc64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dc66:	1ad2      	subs	r2, r2, r3
 801dc68:	2300      	movs	r3, #0
 801dc6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dc6c:	6a21      	ldr	r1, [r4, #32]
 801dc6e:	4628      	mov	r0, r5
 801dc70:	47b0      	blx	r6
 801dc72:	1c43      	adds	r3, r0, #1
 801dc74:	89a3      	ldrh	r3, [r4, #12]
 801dc76:	d106      	bne.n	801dc86 <__sflush_r+0x62>
 801dc78:	6829      	ldr	r1, [r5, #0]
 801dc7a:	291d      	cmp	r1, #29
 801dc7c:	d82b      	bhi.n	801dcd6 <__sflush_r+0xb2>
 801dc7e:	4a2a      	ldr	r2, [pc, #168]	@ (801dd28 <__sflush_r+0x104>)
 801dc80:	410a      	asrs	r2, r1
 801dc82:	07d6      	lsls	r6, r2, #31
 801dc84:	d427      	bmi.n	801dcd6 <__sflush_r+0xb2>
 801dc86:	2200      	movs	r2, #0
 801dc88:	6062      	str	r2, [r4, #4]
 801dc8a:	04d9      	lsls	r1, r3, #19
 801dc8c:	6922      	ldr	r2, [r4, #16]
 801dc8e:	6022      	str	r2, [r4, #0]
 801dc90:	d504      	bpl.n	801dc9c <__sflush_r+0x78>
 801dc92:	1c42      	adds	r2, r0, #1
 801dc94:	d101      	bne.n	801dc9a <__sflush_r+0x76>
 801dc96:	682b      	ldr	r3, [r5, #0]
 801dc98:	b903      	cbnz	r3, 801dc9c <__sflush_r+0x78>
 801dc9a:	6560      	str	r0, [r4, #84]	@ 0x54
 801dc9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dc9e:	602f      	str	r7, [r5, #0]
 801dca0:	b1b9      	cbz	r1, 801dcd2 <__sflush_r+0xae>
 801dca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dca6:	4299      	cmp	r1, r3
 801dca8:	d002      	beq.n	801dcb0 <__sflush_r+0x8c>
 801dcaa:	4628      	mov	r0, r5
 801dcac:	f7ff fc82 	bl	801d5b4 <_free_r>
 801dcb0:	2300      	movs	r3, #0
 801dcb2:	6363      	str	r3, [r4, #52]	@ 0x34
 801dcb4:	e00d      	b.n	801dcd2 <__sflush_r+0xae>
 801dcb6:	2301      	movs	r3, #1
 801dcb8:	4628      	mov	r0, r5
 801dcba:	47b0      	blx	r6
 801dcbc:	4602      	mov	r2, r0
 801dcbe:	1c50      	adds	r0, r2, #1
 801dcc0:	d1c9      	bne.n	801dc56 <__sflush_r+0x32>
 801dcc2:	682b      	ldr	r3, [r5, #0]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d0c6      	beq.n	801dc56 <__sflush_r+0x32>
 801dcc8:	2b1d      	cmp	r3, #29
 801dcca:	d001      	beq.n	801dcd0 <__sflush_r+0xac>
 801dccc:	2b16      	cmp	r3, #22
 801dcce:	d11e      	bne.n	801dd0e <__sflush_r+0xea>
 801dcd0:	602f      	str	r7, [r5, #0]
 801dcd2:	2000      	movs	r0, #0
 801dcd4:	e022      	b.n	801dd1c <__sflush_r+0xf8>
 801dcd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dcda:	b21b      	sxth	r3, r3
 801dcdc:	e01b      	b.n	801dd16 <__sflush_r+0xf2>
 801dcde:	690f      	ldr	r7, [r1, #16]
 801dce0:	2f00      	cmp	r7, #0
 801dce2:	d0f6      	beq.n	801dcd2 <__sflush_r+0xae>
 801dce4:	0793      	lsls	r3, r2, #30
 801dce6:	680e      	ldr	r6, [r1, #0]
 801dce8:	bf08      	it	eq
 801dcea:	694b      	ldreq	r3, [r1, #20]
 801dcec:	600f      	str	r7, [r1, #0]
 801dcee:	bf18      	it	ne
 801dcf0:	2300      	movne	r3, #0
 801dcf2:	eba6 0807 	sub.w	r8, r6, r7
 801dcf6:	608b      	str	r3, [r1, #8]
 801dcf8:	f1b8 0f00 	cmp.w	r8, #0
 801dcfc:	dde9      	ble.n	801dcd2 <__sflush_r+0xae>
 801dcfe:	6a21      	ldr	r1, [r4, #32]
 801dd00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dd02:	4643      	mov	r3, r8
 801dd04:	463a      	mov	r2, r7
 801dd06:	4628      	mov	r0, r5
 801dd08:	47b0      	blx	r6
 801dd0a:	2800      	cmp	r0, #0
 801dd0c:	dc08      	bgt.n	801dd20 <__sflush_r+0xfc>
 801dd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd16:	81a3      	strh	r3, [r4, #12]
 801dd18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd20:	4407      	add	r7, r0
 801dd22:	eba8 0800 	sub.w	r8, r8, r0
 801dd26:	e7e7      	b.n	801dcf8 <__sflush_r+0xd4>
 801dd28:	dfbffffe 	.word	0xdfbffffe

0801dd2c <_fflush_r>:
 801dd2c:	b538      	push	{r3, r4, r5, lr}
 801dd2e:	690b      	ldr	r3, [r1, #16]
 801dd30:	4605      	mov	r5, r0
 801dd32:	460c      	mov	r4, r1
 801dd34:	b913      	cbnz	r3, 801dd3c <_fflush_r+0x10>
 801dd36:	2500      	movs	r5, #0
 801dd38:	4628      	mov	r0, r5
 801dd3a:	bd38      	pop	{r3, r4, r5, pc}
 801dd3c:	b118      	cbz	r0, 801dd46 <_fflush_r+0x1a>
 801dd3e:	6a03      	ldr	r3, [r0, #32]
 801dd40:	b90b      	cbnz	r3, 801dd46 <_fflush_r+0x1a>
 801dd42:	f7ff f8e1 	bl	801cf08 <__sinit>
 801dd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d0f3      	beq.n	801dd36 <_fflush_r+0xa>
 801dd4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dd50:	07d0      	lsls	r0, r2, #31
 801dd52:	d404      	bmi.n	801dd5e <_fflush_r+0x32>
 801dd54:	0599      	lsls	r1, r3, #22
 801dd56:	d402      	bmi.n	801dd5e <_fflush_r+0x32>
 801dd58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd5a:	f7ff fbe8 	bl	801d52e <__retarget_lock_acquire_recursive>
 801dd5e:	4628      	mov	r0, r5
 801dd60:	4621      	mov	r1, r4
 801dd62:	f7ff ff5f 	bl	801dc24 <__sflush_r>
 801dd66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dd68:	07da      	lsls	r2, r3, #31
 801dd6a:	4605      	mov	r5, r0
 801dd6c:	d4e4      	bmi.n	801dd38 <_fflush_r+0xc>
 801dd6e:	89a3      	ldrh	r3, [r4, #12]
 801dd70:	059b      	lsls	r3, r3, #22
 801dd72:	d4e1      	bmi.n	801dd38 <_fflush_r+0xc>
 801dd74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dd76:	f7ff fbdb 	bl	801d530 <__retarget_lock_release_recursive>
 801dd7a:	e7dd      	b.n	801dd38 <_fflush_r+0xc>

0801dd7c <fiprintf>:
 801dd7c:	b40e      	push	{r1, r2, r3}
 801dd7e:	b503      	push	{r0, r1, lr}
 801dd80:	4601      	mov	r1, r0
 801dd82:	ab03      	add	r3, sp, #12
 801dd84:	4805      	ldr	r0, [pc, #20]	@ (801dd9c <fiprintf+0x20>)
 801dd86:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd8a:	6800      	ldr	r0, [r0, #0]
 801dd8c:	9301      	str	r3, [sp, #4]
 801dd8e:	f000 f8bb 	bl	801df08 <_vfiprintf_r>
 801dd92:	b002      	add	sp, #8
 801dd94:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd98:	b003      	add	sp, #12
 801dd9a:	4770      	bx	lr
 801dd9c:	240013a0 	.word	0x240013a0

0801dda0 <__swhatbuf_r>:
 801dda0:	b570      	push	{r4, r5, r6, lr}
 801dda2:	460c      	mov	r4, r1
 801dda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dda8:	2900      	cmp	r1, #0
 801ddaa:	b096      	sub	sp, #88	@ 0x58
 801ddac:	4615      	mov	r5, r2
 801ddae:	461e      	mov	r6, r3
 801ddb0:	da0d      	bge.n	801ddce <__swhatbuf_r+0x2e>
 801ddb2:	89a3      	ldrh	r3, [r4, #12]
 801ddb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ddb8:	f04f 0100 	mov.w	r1, #0
 801ddbc:	bf14      	ite	ne
 801ddbe:	2340      	movne	r3, #64	@ 0x40
 801ddc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ddc4:	2000      	movs	r0, #0
 801ddc6:	6031      	str	r1, [r6, #0]
 801ddc8:	602b      	str	r3, [r5, #0]
 801ddca:	b016      	add	sp, #88	@ 0x58
 801ddcc:	bd70      	pop	{r4, r5, r6, pc}
 801ddce:	466a      	mov	r2, sp
 801ddd0:	f000 f848 	bl	801de64 <_fstat_r>
 801ddd4:	2800      	cmp	r0, #0
 801ddd6:	dbec      	blt.n	801ddb2 <__swhatbuf_r+0x12>
 801ddd8:	9901      	ldr	r1, [sp, #4]
 801ddda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ddde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dde2:	4259      	negs	r1, r3
 801dde4:	4159      	adcs	r1, r3
 801dde6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ddea:	e7eb      	b.n	801ddc4 <__swhatbuf_r+0x24>

0801ddec <__smakebuf_r>:
 801ddec:	898b      	ldrh	r3, [r1, #12]
 801ddee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ddf0:	079d      	lsls	r5, r3, #30
 801ddf2:	4606      	mov	r6, r0
 801ddf4:	460c      	mov	r4, r1
 801ddf6:	d507      	bpl.n	801de08 <__smakebuf_r+0x1c>
 801ddf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ddfc:	6023      	str	r3, [r4, #0]
 801ddfe:	6123      	str	r3, [r4, #16]
 801de00:	2301      	movs	r3, #1
 801de02:	6163      	str	r3, [r4, #20]
 801de04:	b003      	add	sp, #12
 801de06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de08:	ab01      	add	r3, sp, #4
 801de0a:	466a      	mov	r2, sp
 801de0c:	f7ff ffc8 	bl	801dda0 <__swhatbuf_r>
 801de10:	9f00      	ldr	r7, [sp, #0]
 801de12:	4605      	mov	r5, r0
 801de14:	4639      	mov	r1, r7
 801de16:	4630      	mov	r0, r6
 801de18:	f7fe fe44 	bl	801caa4 <_malloc_r>
 801de1c:	b948      	cbnz	r0, 801de32 <__smakebuf_r+0x46>
 801de1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de22:	059a      	lsls	r2, r3, #22
 801de24:	d4ee      	bmi.n	801de04 <__smakebuf_r+0x18>
 801de26:	f023 0303 	bic.w	r3, r3, #3
 801de2a:	f043 0302 	orr.w	r3, r3, #2
 801de2e:	81a3      	strh	r3, [r4, #12]
 801de30:	e7e2      	b.n	801ddf8 <__smakebuf_r+0xc>
 801de32:	89a3      	ldrh	r3, [r4, #12]
 801de34:	6020      	str	r0, [r4, #0]
 801de36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801de3a:	81a3      	strh	r3, [r4, #12]
 801de3c:	9b01      	ldr	r3, [sp, #4]
 801de3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801de42:	b15b      	cbz	r3, 801de5c <__smakebuf_r+0x70>
 801de44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de48:	4630      	mov	r0, r6
 801de4a:	f000 f81d 	bl	801de88 <_isatty_r>
 801de4e:	b128      	cbz	r0, 801de5c <__smakebuf_r+0x70>
 801de50:	89a3      	ldrh	r3, [r4, #12]
 801de52:	f023 0303 	bic.w	r3, r3, #3
 801de56:	f043 0301 	orr.w	r3, r3, #1
 801de5a:	81a3      	strh	r3, [r4, #12]
 801de5c:	89a3      	ldrh	r3, [r4, #12]
 801de5e:	431d      	orrs	r5, r3
 801de60:	81a5      	strh	r5, [r4, #12]
 801de62:	e7cf      	b.n	801de04 <__smakebuf_r+0x18>

0801de64 <_fstat_r>:
 801de64:	b538      	push	{r3, r4, r5, lr}
 801de66:	4d07      	ldr	r5, [pc, #28]	@ (801de84 <_fstat_r+0x20>)
 801de68:	2300      	movs	r3, #0
 801de6a:	4604      	mov	r4, r0
 801de6c:	4608      	mov	r0, r1
 801de6e:	4611      	mov	r1, r2
 801de70:	602b      	str	r3, [r5, #0]
 801de72:	f7e3 ff4b 	bl	8001d0c <_fstat>
 801de76:	1c43      	adds	r3, r0, #1
 801de78:	d102      	bne.n	801de80 <_fstat_r+0x1c>
 801de7a:	682b      	ldr	r3, [r5, #0]
 801de7c:	b103      	cbz	r3, 801de80 <_fstat_r+0x1c>
 801de7e:	6023      	str	r3, [r4, #0]
 801de80:	bd38      	pop	{r3, r4, r5, pc}
 801de82:	bf00      	nop
 801de84:	240694f0 	.word	0x240694f0

0801de88 <_isatty_r>:
 801de88:	b538      	push	{r3, r4, r5, lr}
 801de8a:	4d06      	ldr	r5, [pc, #24]	@ (801dea4 <_isatty_r+0x1c>)
 801de8c:	2300      	movs	r3, #0
 801de8e:	4604      	mov	r4, r0
 801de90:	4608      	mov	r0, r1
 801de92:	602b      	str	r3, [r5, #0]
 801de94:	f7e3 ff4a 	bl	8001d2c <_isatty>
 801de98:	1c43      	adds	r3, r0, #1
 801de9a:	d102      	bne.n	801dea2 <_isatty_r+0x1a>
 801de9c:	682b      	ldr	r3, [r5, #0]
 801de9e:	b103      	cbz	r3, 801dea2 <_isatty_r+0x1a>
 801dea0:	6023      	str	r3, [r4, #0]
 801dea2:	bd38      	pop	{r3, r4, r5, pc}
 801dea4:	240694f0 	.word	0x240694f0

0801dea8 <abort>:
 801dea8:	b508      	push	{r3, lr}
 801deaa:	2006      	movs	r0, #6
 801deac:	f000 f96c 	bl	801e188 <raise>
 801deb0:	2001      	movs	r0, #1
 801deb2:	f7e3 fedb 	bl	8001c6c <_exit>

0801deb6 <__sfputc_r>:
 801deb6:	6893      	ldr	r3, [r2, #8]
 801deb8:	3b01      	subs	r3, #1
 801deba:	2b00      	cmp	r3, #0
 801debc:	b410      	push	{r4}
 801debe:	6093      	str	r3, [r2, #8]
 801dec0:	da08      	bge.n	801ded4 <__sfputc_r+0x1e>
 801dec2:	6994      	ldr	r4, [r2, #24]
 801dec4:	42a3      	cmp	r3, r4
 801dec6:	db01      	blt.n	801decc <__sfputc_r+0x16>
 801dec8:	290a      	cmp	r1, #10
 801deca:	d103      	bne.n	801ded4 <__sfputc_r+0x1e>
 801decc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ded0:	f7ff b95a 	b.w	801d188 <__swbuf_r>
 801ded4:	6813      	ldr	r3, [r2, #0]
 801ded6:	1c58      	adds	r0, r3, #1
 801ded8:	6010      	str	r0, [r2, #0]
 801deda:	7019      	strb	r1, [r3, #0]
 801dedc:	4608      	mov	r0, r1
 801dede:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dee2:	4770      	bx	lr

0801dee4 <__sfputs_r>:
 801dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dee6:	4606      	mov	r6, r0
 801dee8:	460f      	mov	r7, r1
 801deea:	4614      	mov	r4, r2
 801deec:	18d5      	adds	r5, r2, r3
 801deee:	42ac      	cmp	r4, r5
 801def0:	d101      	bne.n	801def6 <__sfputs_r+0x12>
 801def2:	2000      	movs	r0, #0
 801def4:	e007      	b.n	801df06 <__sfputs_r+0x22>
 801def6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801defa:	463a      	mov	r2, r7
 801defc:	4630      	mov	r0, r6
 801defe:	f7ff ffda 	bl	801deb6 <__sfputc_r>
 801df02:	1c43      	adds	r3, r0, #1
 801df04:	d1f3      	bne.n	801deee <__sfputs_r+0xa>
 801df06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801df08 <_vfiprintf_r>:
 801df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df0c:	460d      	mov	r5, r1
 801df0e:	b09d      	sub	sp, #116	@ 0x74
 801df10:	4614      	mov	r4, r2
 801df12:	4698      	mov	r8, r3
 801df14:	4606      	mov	r6, r0
 801df16:	b118      	cbz	r0, 801df20 <_vfiprintf_r+0x18>
 801df18:	6a03      	ldr	r3, [r0, #32]
 801df1a:	b90b      	cbnz	r3, 801df20 <_vfiprintf_r+0x18>
 801df1c:	f7fe fff4 	bl	801cf08 <__sinit>
 801df20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801df22:	07d9      	lsls	r1, r3, #31
 801df24:	d405      	bmi.n	801df32 <_vfiprintf_r+0x2a>
 801df26:	89ab      	ldrh	r3, [r5, #12]
 801df28:	059a      	lsls	r2, r3, #22
 801df2a:	d402      	bmi.n	801df32 <_vfiprintf_r+0x2a>
 801df2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801df2e:	f7ff fafe 	bl	801d52e <__retarget_lock_acquire_recursive>
 801df32:	89ab      	ldrh	r3, [r5, #12]
 801df34:	071b      	lsls	r3, r3, #28
 801df36:	d501      	bpl.n	801df3c <_vfiprintf_r+0x34>
 801df38:	692b      	ldr	r3, [r5, #16]
 801df3a:	b99b      	cbnz	r3, 801df64 <_vfiprintf_r+0x5c>
 801df3c:	4629      	mov	r1, r5
 801df3e:	4630      	mov	r0, r6
 801df40:	f7ff f960 	bl	801d204 <__swsetup_r>
 801df44:	b170      	cbz	r0, 801df64 <_vfiprintf_r+0x5c>
 801df46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801df48:	07dc      	lsls	r4, r3, #31
 801df4a:	d504      	bpl.n	801df56 <_vfiprintf_r+0x4e>
 801df4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df50:	b01d      	add	sp, #116	@ 0x74
 801df52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df56:	89ab      	ldrh	r3, [r5, #12]
 801df58:	0598      	lsls	r0, r3, #22
 801df5a:	d4f7      	bmi.n	801df4c <_vfiprintf_r+0x44>
 801df5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801df5e:	f7ff fae7 	bl	801d530 <__retarget_lock_release_recursive>
 801df62:	e7f3      	b.n	801df4c <_vfiprintf_r+0x44>
 801df64:	2300      	movs	r3, #0
 801df66:	9309      	str	r3, [sp, #36]	@ 0x24
 801df68:	2320      	movs	r3, #32
 801df6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801df6e:	f8cd 800c 	str.w	r8, [sp, #12]
 801df72:	2330      	movs	r3, #48	@ 0x30
 801df74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e124 <_vfiprintf_r+0x21c>
 801df78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801df7c:	f04f 0901 	mov.w	r9, #1
 801df80:	4623      	mov	r3, r4
 801df82:	469a      	mov	sl, r3
 801df84:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df88:	b10a      	cbz	r2, 801df8e <_vfiprintf_r+0x86>
 801df8a:	2a25      	cmp	r2, #37	@ 0x25
 801df8c:	d1f9      	bne.n	801df82 <_vfiprintf_r+0x7a>
 801df8e:	ebba 0b04 	subs.w	fp, sl, r4
 801df92:	d00b      	beq.n	801dfac <_vfiprintf_r+0xa4>
 801df94:	465b      	mov	r3, fp
 801df96:	4622      	mov	r2, r4
 801df98:	4629      	mov	r1, r5
 801df9a:	4630      	mov	r0, r6
 801df9c:	f7ff ffa2 	bl	801dee4 <__sfputs_r>
 801dfa0:	3001      	adds	r0, #1
 801dfa2:	f000 80a7 	beq.w	801e0f4 <_vfiprintf_r+0x1ec>
 801dfa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dfa8:	445a      	add	r2, fp
 801dfaa:	9209      	str	r2, [sp, #36]	@ 0x24
 801dfac:	f89a 3000 	ldrb.w	r3, [sl]
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	f000 809f 	beq.w	801e0f4 <_vfiprintf_r+0x1ec>
 801dfb6:	2300      	movs	r3, #0
 801dfb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dfbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dfc0:	f10a 0a01 	add.w	sl, sl, #1
 801dfc4:	9304      	str	r3, [sp, #16]
 801dfc6:	9307      	str	r3, [sp, #28]
 801dfc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801dfcc:	931a      	str	r3, [sp, #104]	@ 0x68
 801dfce:	4654      	mov	r4, sl
 801dfd0:	2205      	movs	r2, #5
 801dfd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfd6:	4853      	ldr	r0, [pc, #332]	@ (801e124 <_vfiprintf_r+0x21c>)
 801dfd8:	f7e2 f99a 	bl	8000310 <memchr>
 801dfdc:	9a04      	ldr	r2, [sp, #16]
 801dfde:	b9d8      	cbnz	r0, 801e018 <_vfiprintf_r+0x110>
 801dfe0:	06d1      	lsls	r1, r2, #27
 801dfe2:	bf44      	itt	mi
 801dfe4:	2320      	movmi	r3, #32
 801dfe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dfea:	0713      	lsls	r3, r2, #28
 801dfec:	bf44      	itt	mi
 801dfee:	232b      	movmi	r3, #43	@ 0x2b
 801dff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dff4:	f89a 3000 	ldrb.w	r3, [sl]
 801dff8:	2b2a      	cmp	r3, #42	@ 0x2a
 801dffa:	d015      	beq.n	801e028 <_vfiprintf_r+0x120>
 801dffc:	9a07      	ldr	r2, [sp, #28]
 801dffe:	4654      	mov	r4, sl
 801e000:	2000      	movs	r0, #0
 801e002:	f04f 0c0a 	mov.w	ip, #10
 801e006:	4621      	mov	r1, r4
 801e008:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e00c:	3b30      	subs	r3, #48	@ 0x30
 801e00e:	2b09      	cmp	r3, #9
 801e010:	d94b      	bls.n	801e0aa <_vfiprintf_r+0x1a2>
 801e012:	b1b0      	cbz	r0, 801e042 <_vfiprintf_r+0x13a>
 801e014:	9207      	str	r2, [sp, #28]
 801e016:	e014      	b.n	801e042 <_vfiprintf_r+0x13a>
 801e018:	eba0 0308 	sub.w	r3, r0, r8
 801e01c:	fa09 f303 	lsl.w	r3, r9, r3
 801e020:	4313      	orrs	r3, r2
 801e022:	9304      	str	r3, [sp, #16]
 801e024:	46a2      	mov	sl, r4
 801e026:	e7d2      	b.n	801dfce <_vfiprintf_r+0xc6>
 801e028:	9b03      	ldr	r3, [sp, #12]
 801e02a:	1d19      	adds	r1, r3, #4
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	9103      	str	r1, [sp, #12]
 801e030:	2b00      	cmp	r3, #0
 801e032:	bfbb      	ittet	lt
 801e034:	425b      	neglt	r3, r3
 801e036:	f042 0202 	orrlt.w	r2, r2, #2
 801e03a:	9307      	strge	r3, [sp, #28]
 801e03c:	9307      	strlt	r3, [sp, #28]
 801e03e:	bfb8      	it	lt
 801e040:	9204      	strlt	r2, [sp, #16]
 801e042:	7823      	ldrb	r3, [r4, #0]
 801e044:	2b2e      	cmp	r3, #46	@ 0x2e
 801e046:	d10a      	bne.n	801e05e <_vfiprintf_r+0x156>
 801e048:	7863      	ldrb	r3, [r4, #1]
 801e04a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e04c:	d132      	bne.n	801e0b4 <_vfiprintf_r+0x1ac>
 801e04e:	9b03      	ldr	r3, [sp, #12]
 801e050:	1d1a      	adds	r2, r3, #4
 801e052:	681b      	ldr	r3, [r3, #0]
 801e054:	9203      	str	r2, [sp, #12]
 801e056:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e05a:	3402      	adds	r4, #2
 801e05c:	9305      	str	r3, [sp, #20]
 801e05e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e134 <_vfiprintf_r+0x22c>
 801e062:	7821      	ldrb	r1, [r4, #0]
 801e064:	2203      	movs	r2, #3
 801e066:	4650      	mov	r0, sl
 801e068:	f7e2 f952 	bl	8000310 <memchr>
 801e06c:	b138      	cbz	r0, 801e07e <_vfiprintf_r+0x176>
 801e06e:	9b04      	ldr	r3, [sp, #16]
 801e070:	eba0 000a 	sub.w	r0, r0, sl
 801e074:	2240      	movs	r2, #64	@ 0x40
 801e076:	4082      	lsls	r2, r0
 801e078:	4313      	orrs	r3, r2
 801e07a:	3401      	adds	r4, #1
 801e07c:	9304      	str	r3, [sp, #16]
 801e07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e082:	4829      	ldr	r0, [pc, #164]	@ (801e128 <_vfiprintf_r+0x220>)
 801e084:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e088:	2206      	movs	r2, #6
 801e08a:	f7e2 f941 	bl	8000310 <memchr>
 801e08e:	2800      	cmp	r0, #0
 801e090:	d03f      	beq.n	801e112 <_vfiprintf_r+0x20a>
 801e092:	4b26      	ldr	r3, [pc, #152]	@ (801e12c <_vfiprintf_r+0x224>)
 801e094:	bb1b      	cbnz	r3, 801e0de <_vfiprintf_r+0x1d6>
 801e096:	9b03      	ldr	r3, [sp, #12]
 801e098:	3307      	adds	r3, #7
 801e09a:	f023 0307 	bic.w	r3, r3, #7
 801e09e:	3308      	adds	r3, #8
 801e0a0:	9303      	str	r3, [sp, #12]
 801e0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0a4:	443b      	add	r3, r7
 801e0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e0a8:	e76a      	b.n	801df80 <_vfiprintf_r+0x78>
 801e0aa:	fb0c 3202 	mla	r2, ip, r2, r3
 801e0ae:	460c      	mov	r4, r1
 801e0b0:	2001      	movs	r0, #1
 801e0b2:	e7a8      	b.n	801e006 <_vfiprintf_r+0xfe>
 801e0b4:	2300      	movs	r3, #0
 801e0b6:	3401      	adds	r4, #1
 801e0b8:	9305      	str	r3, [sp, #20]
 801e0ba:	4619      	mov	r1, r3
 801e0bc:	f04f 0c0a 	mov.w	ip, #10
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e0c6:	3a30      	subs	r2, #48	@ 0x30
 801e0c8:	2a09      	cmp	r2, #9
 801e0ca:	d903      	bls.n	801e0d4 <_vfiprintf_r+0x1cc>
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d0c6      	beq.n	801e05e <_vfiprintf_r+0x156>
 801e0d0:	9105      	str	r1, [sp, #20]
 801e0d2:	e7c4      	b.n	801e05e <_vfiprintf_r+0x156>
 801e0d4:	fb0c 2101 	mla	r1, ip, r1, r2
 801e0d8:	4604      	mov	r4, r0
 801e0da:	2301      	movs	r3, #1
 801e0dc:	e7f0      	b.n	801e0c0 <_vfiprintf_r+0x1b8>
 801e0de:	ab03      	add	r3, sp, #12
 801e0e0:	9300      	str	r3, [sp, #0]
 801e0e2:	462a      	mov	r2, r5
 801e0e4:	4b12      	ldr	r3, [pc, #72]	@ (801e130 <_vfiprintf_r+0x228>)
 801e0e6:	a904      	add	r1, sp, #16
 801e0e8:	4630      	mov	r0, r6
 801e0ea:	f3af 8000 	nop.w
 801e0ee:	4607      	mov	r7, r0
 801e0f0:	1c78      	adds	r0, r7, #1
 801e0f2:	d1d6      	bne.n	801e0a2 <_vfiprintf_r+0x19a>
 801e0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e0f6:	07d9      	lsls	r1, r3, #31
 801e0f8:	d405      	bmi.n	801e106 <_vfiprintf_r+0x1fe>
 801e0fa:	89ab      	ldrh	r3, [r5, #12]
 801e0fc:	059a      	lsls	r2, r3, #22
 801e0fe:	d402      	bmi.n	801e106 <_vfiprintf_r+0x1fe>
 801e100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e102:	f7ff fa15 	bl	801d530 <__retarget_lock_release_recursive>
 801e106:	89ab      	ldrh	r3, [r5, #12]
 801e108:	065b      	lsls	r3, r3, #25
 801e10a:	f53f af1f 	bmi.w	801df4c <_vfiprintf_r+0x44>
 801e10e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e110:	e71e      	b.n	801df50 <_vfiprintf_r+0x48>
 801e112:	ab03      	add	r3, sp, #12
 801e114:	9300      	str	r3, [sp, #0]
 801e116:	462a      	mov	r2, r5
 801e118:	4b05      	ldr	r3, [pc, #20]	@ (801e130 <_vfiprintf_r+0x228>)
 801e11a:	a904      	add	r1, sp, #16
 801e11c:	4630      	mov	r0, r6
 801e11e:	f7ff fc61 	bl	801d9e4 <_printf_i>
 801e122:	e7e4      	b.n	801e0ee <_vfiprintf_r+0x1e6>
 801e124:	08020ab2 	.word	0x08020ab2
 801e128:	08020abc 	.word	0x08020abc
 801e12c:	00000000 	.word	0x00000000
 801e130:	0801dee5 	.word	0x0801dee5
 801e134:	08020ab8 	.word	0x08020ab8

0801e138 <_raise_r>:
 801e138:	291f      	cmp	r1, #31
 801e13a:	b538      	push	{r3, r4, r5, lr}
 801e13c:	4605      	mov	r5, r0
 801e13e:	460c      	mov	r4, r1
 801e140:	d904      	bls.n	801e14c <_raise_r+0x14>
 801e142:	2316      	movs	r3, #22
 801e144:	6003      	str	r3, [r0, #0]
 801e146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e14a:	bd38      	pop	{r3, r4, r5, pc}
 801e14c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e14e:	b112      	cbz	r2, 801e156 <_raise_r+0x1e>
 801e150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e154:	b94b      	cbnz	r3, 801e16a <_raise_r+0x32>
 801e156:	4628      	mov	r0, r5
 801e158:	f000 f830 	bl	801e1bc <_getpid_r>
 801e15c:	4622      	mov	r2, r4
 801e15e:	4601      	mov	r1, r0
 801e160:	4628      	mov	r0, r5
 801e162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e166:	f000 b817 	b.w	801e198 <_kill_r>
 801e16a:	2b01      	cmp	r3, #1
 801e16c:	d00a      	beq.n	801e184 <_raise_r+0x4c>
 801e16e:	1c59      	adds	r1, r3, #1
 801e170:	d103      	bne.n	801e17a <_raise_r+0x42>
 801e172:	2316      	movs	r3, #22
 801e174:	6003      	str	r3, [r0, #0]
 801e176:	2001      	movs	r0, #1
 801e178:	e7e7      	b.n	801e14a <_raise_r+0x12>
 801e17a:	2100      	movs	r1, #0
 801e17c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e180:	4620      	mov	r0, r4
 801e182:	4798      	blx	r3
 801e184:	2000      	movs	r0, #0
 801e186:	e7e0      	b.n	801e14a <_raise_r+0x12>

0801e188 <raise>:
 801e188:	4b02      	ldr	r3, [pc, #8]	@ (801e194 <raise+0xc>)
 801e18a:	4601      	mov	r1, r0
 801e18c:	6818      	ldr	r0, [r3, #0]
 801e18e:	f7ff bfd3 	b.w	801e138 <_raise_r>
 801e192:	bf00      	nop
 801e194:	240013a0 	.word	0x240013a0

0801e198 <_kill_r>:
 801e198:	b538      	push	{r3, r4, r5, lr}
 801e19a:	4d07      	ldr	r5, [pc, #28]	@ (801e1b8 <_kill_r+0x20>)
 801e19c:	2300      	movs	r3, #0
 801e19e:	4604      	mov	r4, r0
 801e1a0:	4608      	mov	r0, r1
 801e1a2:	4611      	mov	r1, r2
 801e1a4:	602b      	str	r3, [r5, #0]
 801e1a6:	f7e3 fd51 	bl	8001c4c <_kill>
 801e1aa:	1c43      	adds	r3, r0, #1
 801e1ac:	d102      	bne.n	801e1b4 <_kill_r+0x1c>
 801e1ae:	682b      	ldr	r3, [r5, #0]
 801e1b0:	b103      	cbz	r3, 801e1b4 <_kill_r+0x1c>
 801e1b2:	6023      	str	r3, [r4, #0]
 801e1b4:	bd38      	pop	{r3, r4, r5, pc}
 801e1b6:	bf00      	nop
 801e1b8:	240694f0 	.word	0x240694f0

0801e1bc <_getpid_r>:
 801e1bc:	f7e3 bd3e 	b.w	8001c3c <_getpid>

0801e1c0 <_init>:
 801e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1c2:	bf00      	nop
 801e1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1c6:	bc08      	pop	{r3}
 801e1c8:	469e      	mov	lr, r3
 801e1ca:	4770      	bx	lr

0801e1cc <_fini>:
 801e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1ce:	bf00      	nop
 801e1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1d2:	bc08      	pop	{r3}
 801e1d4:	469e      	mov	lr, r3
 801e1d6:	4770      	bx	lr
