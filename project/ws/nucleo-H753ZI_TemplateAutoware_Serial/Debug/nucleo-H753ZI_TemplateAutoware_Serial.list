
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022f04  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b64  080231a8  080231a8  000241a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025d0c  08025d0c  00026d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000044  08025d14  08025d14  00026d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025d58  08025d58  00026d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000130c  24000000  08025d5c  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000683e0  24001310  08027068  00028310  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240696f0  08027068  000286f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002830c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fa19  00000000  00000000  0002833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d67  00000000  00000000  00057d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fe0  00000000  00000000  0005dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001884  00000000  00000000  0005faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000445e4  00000000  00000000  00061324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037710  00000000  00000000  000a5908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001928e9  00000000  00000000  000dd018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  0026f901  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009354  00000000  00000000  0026f978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00278ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001310 	.word	0x24001310
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802318c 	.word	0x0802318c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001314 	.word	0x24001314
 80002dc:	0802318c 	.word	0x0802318c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000766:	4a38      	ldr	r2, [pc, #224]	@ (8000848 <MX_ADC1_Init+0x108>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_ADC1_Init+0x104>)
 800076c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000778:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <MX_ADC1_Init+0x104>)
 800077a:	2201      	movs	r2, #1
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000780:	2204      	movs	r2, #4
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_ADC1_Init+0x104>)
 800078c:	2201      	movs	r2, #1
 800078e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000792:	2202      	movs	r2, #2
 8000794:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_ADC1_Init+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007aa:	2203      	movs	r2, #3
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4820      	ldr	r0, [pc, #128]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007c4:	f003 f8b6 	bl	8003934 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007ce:	f001 f969 	bl	8001aa4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <MX_ADC1_Init+0x104>)
 80007de:	f004 f8d9 	bl	8004994 <HAL_ADCEx_MultiModeConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007e8:	f001 f95c 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x10c>)
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80007f4:	2306      	movs	r3, #6
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fe:	2304      	movs	r3, #4
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_ADC1_Init+0x104>)
 8000810:	f003 fb14 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081a:	f001 f943 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_ADC1_Init+0x110>)
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000822:	230c      	movs	r3, #12
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_ADC1_Init+0x104>)
 800082c:	f003 fb06 	bl	8003e3c <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000836:	f001 f935 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400132c 	.word	0x2400132c
 8000848:	40022000 	.word	0x40022000
 800084c:	19200040 	.word	0x19200040
 8000850:	08600004 	.word	0x08600004

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ba      	sub	sp, #232	@ 0xe8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	22c0      	movs	r2, #192	@ 0xc0
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f021 fd2b 	bl	80222d0 <memset>
  if(adcHandle->Instance==ADC1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a45      	ldr	r2, [pc, #276]	@ (8000994 <HAL_ADC_MspInit+0x140>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f040 8083 	bne.w	800098c <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	f04f 0300 	mov.w	r3, #0
 800088e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 8000896:	2325      	movs	r3, #37	@ 0x25
 8000898:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008aa:	2320      	movs	r3, #32
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 fab4 	bl	8008e2c <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80008ca:	f001 f8eb 	bl	8001aa4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d4:	4a30      	ldr	r2, [pc, #192]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a29      	ldr	r2, [pc, #164]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008f4:	f043 0320 	orr.w	r3, r3, #32
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <HAL_ADC_MspInit+0x144>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800090a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800090e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000922:	4619      	mov	r1, r3
 8000924:	481d      	ldr	r0, [pc, #116]	@ (800099c <HAL_ADC_MspInit+0x148>)
 8000926:	f007 f83b 	bl	80079a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_ADC_MspInit+0x150>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000932:	2209      	movs	r2, #9
 8000934:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000944:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000948:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800094c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000950:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000954:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000958:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800095c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000972:	f004 f9cd 	bl	8004d10 <HAL_DMA_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 800097c:	f001 f892 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000984:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000986:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_ADC_MspInit+0x14c>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	37e8      	adds	r7, #232	@ 0xe8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40022000 	.word	0x40022000
 8000998:	58024400 	.word	0x58024400
 800099c:	58021400 	.word	0x58021400
 80009a0:	24001390 	.word	0x24001390
 80009a4:	40020410 	.word	0x40020410

080009a8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009b4:	f00f f876 	bl	800faa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80009c0:	f000 f986 	bl	8000cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80009c4:	4b58      	ldr	r3, [pc, #352]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f040 8090 	bne.w	8000af2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01e      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80009d8:	2208      	movs	r2, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d015      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f023 0307 	bic.w	r3, r3, #7
 80009f0:	3308      	adds	r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a02:	f383 8811 	msr	BASEPRI, r3
 8000a06:	f3bf 8f6f 	isb	sy
 8000a0a:	f3bf 8f4f 	dsb	sy
 8000a0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d06a      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d865      	bhi.n	8000af2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <pvPortMallocMicroROS+0x188>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a30:	e004      	b.n	8000a3c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d903      	bls.n	8000a4e <pvPortMallocMicroROS+0xa6>
 8000a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1f1      	bne.n	8000a32 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <pvPortMallocMicroROS+0x17c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d04c      	beq.n	8000af2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	2308      	movs	r3, #8
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d920      	bls.n	8000abc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a90:	f383 8811 	msr	BASEPRI, r3
 8000a94:	f3bf 8f6f 	isb	sy
 8000a98:	f3bf 8f4f 	dsb	sy
 8000a9c:	613b      	str	r3, [r7, #16]
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ab6:	69b8      	ldr	r0, [r7, #24]
 8000ab8:	f000 f96e 	bl	8000d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d203      	bcs.n	8000ade <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <pvPortMallocMicroROS+0x184>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a16      	ldr	r2, [pc, #88]	@ (8000b34 <pvPortMallocMicroROS+0x18c>)
 8000adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <pvPortMallocMicroROS+0x180>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000af2:	f00e ffe5 	bl	800fac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b04:	f383 8811 	msr	BASEPRI, r3
 8000b08:	f3bf 8f6f 	isb	sy
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b18:	69fb      	ldr	r3, [r7, #28]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24032150 	.word	0x24032150
 8000b28:	2403215c 	.word	0x2403215c
 8000b2c:	24032154 	.word	0x24032154
 8000b30:	24032148 	.word	0x24032148
 8000b34:	24032158 	.word	0x24032158

08000b38 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d04a      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10b      	bne.n	8000b7e <vPortFreeMicroROS+0x46>
	__asm volatile
 8000b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b6a:	f383 8811 	msr	BASEPRI, r3
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f3bf 8f4f 	dsb	sy
 8000b76:	60fb      	str	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00b      	beq.n	8000b9e <vPortFreeMicroROS+0x66>
	__asm volatile
 8000b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b8a:	f383 8811 	msr	BASEPRI, r3
 8000b8e:	f3bf 8f6f 	isb	sy
 8000b92:	f3bf 8f4f 	dsb	sy
 8000b96:	60bb      	str	r3, [r7, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d019      	beq.n	8000be0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d115      	bne.n	8000be0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <vPortFreeMicroROS+0xb0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000bc4:	f00e ff6e 	bl	800faa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <vPortFreeMicroROS+0xb4>)
 8000bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000bd6:	6938      	ldr	r0, [r7, #16]
 8000bd8:	f000 f8de 	bl	8000d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000bdc:	f00e ff70 	bl	800fac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2403215c 	.word	0x2403215c
 8000bec:	24032154 	.word	0x24032154

08000bf0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	425b      	negs	r3, r3
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4413      	add	r3, r2
 8000c04:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <getBlockSize+0x38>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

	return count;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2403215c 	.word	0x2403215c

08000c2c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c36:	f00e ff35 	bl	800faa4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c3a:	6838      	ldr	r0, [r7, #0]
 8000c3c:	f7ff feb4 	bl	80009a8 <pvPortMallocMicroROS>
 8000c40:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d017      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d014      	beq.n	8000c78 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffce 	bl	8000bf0 <getBlockSize>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2208      	movs	r2, #8
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d201      	bcs.n	8000c68 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f021 fc4e 	bl	802250e <memcpy>

		vPortFreeMicroROS(pv);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ff60 	bl	8000b38 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000c78:	f00e ff22 	bl	800fac0 <xTaskResumeAll>

	return newmem;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c90:	f00e ff08 	bl	800faa4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fe82 	bl	80009a8 <pvPortMallocMicroROS>
 8000ca4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000caa:	e004      	b.n	8000cb6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	613a      	str	r2, [r7, #16]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	617a      	str	r2, [r7, #20]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1f5      	bne.n	8000cac <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000cc0:	f00e fefe 	bl	800fac0 <xTaskResumeAll>
  	return mem;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <prvHeapInit+0xac>)
 8000cd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cdc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3307      	adds	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <prvHeapInit+0xb0>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <prvHeapInit+0xb4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f023 0307 	bic.w	r3, r3, #7
 8000d28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4a16      	ldr	r2, [pc, #88]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <prvHeapInit+0xb8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <prvHeapInit+0xbc>)
 8000d5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	@ (8000d90 <prvHeapInit+0xc0>)
 8000d64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <prvHeapInit+0xc4>)
 8000d68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	00030d40 	.word	0x00030d40
 8000d80:	24001408 	.word	0x24001408
 8000d84:	24032148 	.word	0x24032148
 8000d88:	24032150 	.word	0x24032150
 8000d8c:	24032158 	.word	0x24032158
 8000d90:	24032154 	.word	0x24032154
 8000d94:	2403215c 	.word	0x2403215c

08000d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <prvInsertBlockIntoFreeList+0xac>)
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e002      	b.n	8000dac <prvInsertBlockIntoFreeList+0x14>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f7      	bhi.n	8000da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d108      	bne.n	8000dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	441a      	add	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	441a      	add	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d118      	bne.n	8000e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d00d      	beq.n	8000e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e008      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <prvInsertBlockIntoFreeList+0xb0>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e003      	b.n	8000e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d002      	beq.n	8000e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	24032148 	.word	0x24032148
 8000e48:	24032150 	.word	0x24032150

08000e4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e70:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_DMA_Init+0x8c>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2105      	movs	r1, #5
 8000e92:	200b      	movs	r0, #11
 8000e94:	f003 ff14 	bl	8004cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f003 ff2b 	bl	8004cf4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f003 ff0c 	bl	8004cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f003 ff23 	bl	8004cf4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2039      	movs	r0, #57	@ 0x39
 8000eb4:	f003 ff04 	bl	8004cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000eb8:	2039      	movs	r0, #57	@ 0x39
 8000eba:	f003 ff1b 	bl	8004cf4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	203a      	movs	r0, #58	@ 0x3a
 8000ec4:	f003 fefc 	bl	8004cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ec8:	203a      	movs	r0, #58	@ 0x3a
 8000eca:	f003 ff13 	bl	8004cf4 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400

08000edc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000eea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef0:	4904      	ldr	r1, [pc, #16]	@ (8000f04 <cubemx_transport_open+0x28>)
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f00b f836 	bl	800bf64 <HAL_UART_Receive_DMA>
    return true;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24032160 	.word	0x24032160

08000f08 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f16:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f00b f86f 	bl	800bffc <HAL_UART_DMAStop>
    return true;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f3c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f44:	2b20      	cmp	r3, #32
 8000f46:	d11b      	bne.n	8000f80 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f00a ff87 	bl	800be64 <HAL_UART_Transmit_DMA>
 8000f56:	4603      	mov	r3, r0
 8000f58:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5a:	e002      	b.n	8000f62 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f00d fa15 	bl	800e38c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d104      	bne.n	8000f72 <cubemx_transport_write+0x4a>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d1f4      	bne.n	8000f5c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <cubemx_transport_write+0x54>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e002      	b.n	8000f82 <cubemx_transport_write+0x5a>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f80:	2300      	movs	r3, #0
    }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000fa0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800111c <cubemx_transport_read+0x190>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d068      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <cubemx_transport_read+0x194>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d061      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a55      	ldr	r2, [pc, #340]	@ (8001124 <cubemx_transport_read+0x198>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05a      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	@ (8001128 <cubemx_transport_read+0x19c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d053      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a50      	ldr	r2, [pc, #320]	@ (800112c <cubemx_transport_read+0x1a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d04c      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <cubemx_transport_read+0x1a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d045      	beq.n	800108a <cubemx_transport_read+0xfe>
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <cubemx_transport_read+0x1a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d03e      	beq.n	800108a <cubemx_transport_read+0xfe>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a48      	ldr	r2, [pc, #288]	@ (8001138 <cubemx_transport_read+0x1ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d037      	beq.n	800108a <cubemx_transport_read+0xfe>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <cubemx_transport_read+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d030      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <cubemx_transport_read+0x1b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d029      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a41      	ldr	r2, [pc, #260]	@ (8001144 <cubemx_transport_read+0x1b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <cubemx_transport_read+0x1bc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01b      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3c      	ldr	r2, [pc, #240]	@ (800114c <cubemx_transport_read+0x1c0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d014      	beq.n	800108a <cubemx_transport_read+0xfe>
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <cubemx_transport_read+0x1c4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <cubemx_transport_read+0xfe>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <cubemx_transport_read+0x1c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d006      	beq.n	800108a <cubemx_transport_read+0xfe>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a34      	ldr	r2, [pc, #208]	@ (8001158 <cubemx_transport_read+0x1cc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d107      	bne.n	800109a <cubemx_transport_read+0x10e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001098:	e006      	b.n	80010a8 <cubemx_transport_read+0x11c>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a8:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010ac:	b662      	cpsie	i
}
 80010ae:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	3301      	adds	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00d f968 	bl	800e38c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <cubemx_transport_read+0x1d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d104      	bne.n	80010d2 <cubemx_transport_read+0x146>
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f6ff af6a 	blt.w	8000fa6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d6:	e011      	b.n	80010fc <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	440b      	add	r3, r1
 80010e2:	4920      	ldr	r1, [pc, #128]	@ (8001164 <cubemx_transport_read+0x1d8>)
 80010e4:	5c8a      	ldrb	r2, [r1, r2]
 80010e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <cubemx_transport_read+0x1d4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <cubemx_transport_read+0x1d0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d003      	beq.n	8001110 <cubemx_transport_read+0x184>
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3e3      	bcc.n	80010d8 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001110:	69bb      	ldr	r3, [r7, #24]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020010 	.word	0x40020010
 8001120:	40020028 	.word	0x40020028
 8001124:	40020040 	.word	0x40020040
 8001128:	40020058 	.word	0x40020058
 800112c:	40020070 	.word	0x40020070
 8001130:	40020088 	.word	0x40020088
 8001134:	400200a0 	.word	0x400200a0
 8001138:	400200b8 	.word	0x400200b8
 800113c:	40020410 	.word	0x40020410
 8001140:	40020428 	.word	0x40020428
 8001144:	40020440 	.word	0x40020440
 8001148:	40020458 	.word	0x40020458
 800114c:	40020470 	.word	0x40020470
 8001150:	40020488 	.word	0x40020488
 8001154:	400204a0 	.word	0x400204a0
 8001158:	400204b8 	.word	0x400204b8
 800115c:	24032964 	.word	0x24032964
 8001160:	24032960 	.word	0x24032960
 8001164:	24032160 	.word	0x24032160

08001168 <timer_watchdog_agent_callback>:
extern osThreadId_t TaskMicroAutowaHandle;

// Timer callbacks

void timer_watchdog_agent_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	e9c7 2300 	strd	r2, r3, [r7]
	
  if(RMW_RET_OK != rmw_uros_ping_agent(20, 1)) 
 8001174:	2101      	movs	r1, #1
 8001176:	2014      	movs	r0, #20
 8001178:	f014 fa4c 	bl	8015614 <rmw_uros_ping_agent>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <timer_watchdog_agent_callback+0x32>
  {
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <timer_watchdog_agent_callback+0x3c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2110      	movs	r1, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f00d f80f 	bl	800e1ac <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <timer_watchdog_agent_callback+0x40>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2110      	movs	r1, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f00d f809 	bl	800e1ac <osThreadFlagsSet>
  } 

  // Try to reconnect

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24032968 	.word	0x24032968
 80011a8:	2403296c 	.word	0x2403296c

080011ac <clock_callback>:
  * @brief  ROS topic subscriber callback to recieve current timestamp
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void clock_callback(const void * xMsgIn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  const rosgraph_msgs__msg__Clock * clock_msg_ = (const rosgraph_msgs__msg__Clock * )xMsgIn;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 0);
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <clock_callback+0x28>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <clock_callback+0x28>)
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	240329ea 	.word	0x240329ea

080011d8 <control_cmd_callback>:
  * @brief  ROS topic subscriber callback to recieve the control commands and save in control_cmd_msg_
  * @param  xMsgIn: pointer to the message recieved in the topic.
  * @retval None
  */
void control_cmd_callback(const void * xMsgIn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  const autoware_auto_control_msgs__msg__AckermannControlCommand * control_cmd_msg_ = (const autoware_auto_control_msgs__msg__AckermannControlCommand * )xMsgIn;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
  ucSubscribersRecieved = ucSubscribersRecieved | (0b1 << 1);
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <control_cmd_callback+0x28>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <control_cmd_callback+0x28>)
 80011f0:	701a      	strb	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	240329ea 	.word	0x240329ea

08001204 <control_mode_cmd_callback>:
  * @param  xRequestMsg: pointer to the request made for the server.
  * @param  xResponseMsg: pointer to the response gave by the server.
  * @retval None
  */
void control_mode_cmd_callback(const void * xRequestMsg, autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response * xResponseMsg)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  const autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request * control_mode_request_msg_ = (const autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request * )xRequestMsg;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  if(AUTOWARE == control_mode_request_msg_->mode)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	7a1b      	ldrb	r3, [r3, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10f      	bne.n	800123a <control_mode_cmd_callback+0x36>
  {
    xResponseMsg->success = true;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, TO_AUTOWARE_MODE_FLAG);
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <control_mode_cmd_callback+0x6c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f00c ffc0 	bl	800e1ac <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <control_mode_cmd_callback+0x70>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	4618      	mov	r0, r3
 8001234:	f00c ffba 	bl	800e1ac <osThreadFlagsSet>
  else
  {
    xResponseMsg->success = false;
  }

}
 8001238:	e016      	b.n	8001268 <control_mode_cmd_callback+0x64>
  else if(MANUAL == control_mode_request_msg_->mode)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	7a1b      	ldrb	r3, [r3, #8]
 800123e:	2b04      	cmp	r3, #4
 8001240:	d10f      	bne.n	8001262 <control_mode_cmd_callback+0x5e>
    xResponseMsg->success = true;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
    osThreadFlagsSet(TaskControleHandle, TO_MANUAL_MODE_FLAG);
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <control_mode_cmd_callback+0x6c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2110      	movs	r1, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f00c ffac 	bl	800e1ac <osThreadFlagsSet>
    osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8001254:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <control_mode_cmd_callback+0x70>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2110      	movs	r1, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f00c ffa6 	bl	800e1ac <osThreadFlagsSet>
}
 8001260:	e002      	b.n	8001268 <control_mode_cmd_callback+0x64>
    xResponseMsg->success = false;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	24032968 	.word	0x24032968
 8001274:	2403296c 	.word	0x2403296c

08001278 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 800127c:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <MX_FREERTOS_Init+0x40>)
 800127e:	f00d f8a0 	bl	800e3c2 <osMutexNew>
 8001282:	4603      	mov	r3, r0
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <MX_FREERTOS_Init+0x44>)
 8001286:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 8001288:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <MX_FREERTOS_Init+0x48>)
 800128a:	f00d f89a 	bl	800e3c2 <osMutexNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <MX_FREERTOS_Init+0x4c>)
 8001292:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8001294:	4a0c      	ldr	r2, [pc, #48]	@ (80012c8 <MX_FREERTOS_Init+0x50>)
 8001296:	2100      	movs	r1, #0
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <MX_FREERTOS_Init+0x54>)
 800129a:	f00c fef4 	bl	800e086 <osThreadNew>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a0b      	ldr	r2, [pc, #44]	@ (80012d0 <MX_FREERTOS_Init+0x58>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* creation of TaskMicroAutowa */
  TaskMicroAutowaHandle = osThreadNew(StartMicroAutoware, NULL, &TaskMicroAutowa_attributes);
 80012a4:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <MX_FREERTOS_Init+0x5c>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <MX_FREERTOS_Init+0x60>)
 80012aa:	f00c feec 	bl	800e086 <osThreadNew>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <MX_FREERTOS_Init+0x64>)
 80012b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	080234a8 	.word	0x080234a8
 80012bc:	24032970 	.word	0x24032970
 80012c0:	080234b8 	.word	0x080234b8
 80012c4:	24032974 	.word	0x24032974
 80012c8:	08023460 	.word	0x08023460
 80012cc:	0800283d 	.word	0x0800283d
 80012d0:	24032968 	.word	0x24032968
 80012d4:	08023484 	.word	0x08023484
 80012d8:	08001ab1 	.word	0x08001ab1
 80012dc:	2403296c 	.word	0x2403296c

080012e0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	@ 0x38
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	4b9e      	ldr	r3, [pc, #632]	@ (8001570 <MX_GPIO_Init+0x290>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001570 <MX_GPIO_Init+0x290>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4b9a      	ldr	r3, [pc, #616]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	623b      	str	r3, [r7, #32]
 8001312:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001314:	4b96      	ldr	r3, [pc, #600]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4a95      	ldr	r2, [pc, #596]	@ (8001570 <MX_GPIO_Init+0x290>)
 800131c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4b92      	ldr	r3, [pc, #584]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b8f      	ldr	r3, [pc, #572]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a8d      	ldr	r2, [pc, #564]	@ (8001570 <MX_GPIO_Init+0x290>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b8b      	ldr	r3, [pc, #556]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b87      	ldr	r3, [pc, #540]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a86      	ldr	r2, [pc, #536]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b83      	ldr	r3, [pc, #524]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b80      	ldr	r3, [pc, #512]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	4a7e      	ldr	r2, [pc, #504]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001376:	f043 0320 	orr.w	r3, r3, #32
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137e:	4b7c      	ldr	r3, [pc, #496]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138c:	4b78      	ldr	r3, [pc, #480]	@ (8001570 <MX_GPIO_Init+0x290>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	4a77      	ldr	r2, [pc, #476]	@ (8001570 <MX_GPIO_Init+0x290>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139c:	4b74      	ldr	r3, [pc, #464]	@ (8001570 <MX_GPIO_Init+0x290>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013aa:	4b71      	ldr	r3, [pc, #452]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b0:	4a6f      	ldr	r2, [pc, #444]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c8:	4b69      	ldr	r3, [pc, #420]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	4a68      	ldr	r2, [pc, #416]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d8:	4b65      	ldr	r3, [pc, #404]	@ (8001570 <MX_GPIO_Init+0x290>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80013ec:	4861      	ldr	r0, [pc, #388]	@ (8001574 <MX_GPIO_Init+0x294>)
 80013ee:	f006 fc87 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f8:	485f      	ldr	r0, [pc, #380]	@ (8001578 <MX_GPIO_Init+0x298>)
 80013fa:	f006 fc81 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2102      	movs	r1, #2
 8001402:	485e      	ldr	r0, [pc, #376]	@ (800157c <MX_GPIO_Init+0x29c>)
 8001404:	f006 fc7c 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4858      	ldr	r0, [pc, #352]	@ (8001580 <MX_GPIO_Init+0x2a0>)
 800141e:	f006 fabf 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001422:	2332      	movs	r3, #50	@ 0x32
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001432:	230b      	movs	r3, #11
 8001434:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	4850      	ldr	r0, [pc, #320]	@ (8001580 <MX_GPIO_Init+0x2a0>)
 800143e:	f006 faaf 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001442:	2386      	movs	r3, #134	@ 0x86
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001452:	230b      	movs	r3, #11
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4849      	ldr	r0, [pc, #292]	@ (8001584 <MX_GPIO_Init+0x2a4>)
 800145e:	f006 fa9f 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001462:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	483e      	ldr	r0, [pc, #248]	@ (8001574 <MX_GPIO_Init+0x294>)
 800147c:	f006 fa90 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	483c      	ldr	r0, [pc, #240]	@ (8001588 <MX_GPIO_Init+0x2a8>)
 8001498:	f006 fa82 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800149c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ae:	230b      	movs	r3, #11
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	482e      	ldr	r0, [pc, #184]	@ (8001574 <MX_GPIO_Init+0x294>)
 80014ba:	f006 fa71 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80014be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4828      	ldr	r0, [pc, #160]	@ (8001578 <MX_GPIO_Init+0x298>)
 80014d8:	f006 fa62 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80014dc:	2380      	movs	r3, #128	@ 0x80
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4826      	ldr	r0, [pc, #152]	@ (800158c <MX_GPIO_Init+0x2ac>)
 80014f2:	f006 fa55 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80014f6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001508:	230a      	movs	r3, #10
 800150a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	481c      	ldr	r0, [pc, #112]	@ (8001584 <MX_GPIO_Init+0x2a4>)
 8001514:	f006 fa44 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001518:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152a:	230b      	movs	r3, #11
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4815      	ldr	r0, [pc, #84]	@ (800158c <MX_GPIO_Init+0x2ac>)
 8001536:	f006 fa33 	bl	80079a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800153a:	2302      	movs	r3, #2
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	480a      	ldr	r0, [pc, #40]	@ (800157c <MX_GPIO_Init+0x29c>)
 8001552:	f006 fa25 	bl	80079a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2107      	movs	r1, #7
 800155a:	2028      	movs	r0, #40	@ 0x28
 800155c:	f003 fbb0 	bl	8004cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001560:	2028      	movs	r0, #40	@ 0x28
 8001562:	f003 fbc7 	bl	8004cf4 <HAL_NVIC_EnableIRQ>

}
 8001566:	bf00      	nop
 8001568:	3738      	adds	r7, #56	@ 0x38
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	58024400 	.word	0x58024400
 8001574:	58020400 	.word	0x58020400
 8001578:	58020c00 	.word	0x58020c00
 800157c:	58021000 	.word	0x58021000
 8001580:	58020800 	.word	0x58020800
 8001584:	58020000 	.word	0x58020000
 8001588:	58021400 	.word	0x58021400
 800158c:	58021800 	.word	0x58021800

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f001 ff7e 	bl	8003494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f81c 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f7ff fea0 	bl	80012e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a0:	f7ff fc54 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80015a4:	f001 fc24 	bl	8002df0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80015a8:	f7ff f8ca 	bl	8000740 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80015ac:	f001 fbd4 	bl	8002d58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 80015b0:	2202      	movs	r2, #2
 80015b2:	4906      	ldr	r1, [pc, #24]	@ (80015cc <main+0x3c>)
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <main+0x40>)
 80015b6:	f002 fb5f 	bl	8003c78 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015ba:	f00c fd05 	bl	800dfc8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80015be:	f7ff fe5b 	bl	8001278 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80015c2:	f00c fd25 	bl	800e010 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <main+0x36>
 80015ca:	bf00      	nop
 80015cc:	2403297c 	.word	0x2403297c
 80015d0:	2400132c 	.word	0x2400132c

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b09e      	sub	sp, #120	@ 0x78
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015de:	224c      	movs	r2, #76	@ 0x4c
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f020 fe74 	bl	80222d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2220      	movs	r2, #32
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f020 fe6d 	bl	80222d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015f6:	2002      	movs	r0, #2
 80015f8:	f006 fbb6 	bl	8007d68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <SystemClock_Config+0x154>)
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	4a48      	ldr	r2, [pc, #288]	@ (8001728 <SystemClock_Config+0x154>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800160c:	4b46      	ldr	r3, [pc, #280]	@ (8001728 <SystemClock_Config+0x154>)
 800160e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b45      	ldr	r3, [pc, #276]	@ (800172c <SystemClock_Config+0x158>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a44      	ldr	r2, [pc, #272]	@ (800172c <SystemClock_Config+0x158>)
 800161c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b42      	ldr	r3, [pc, #264]	@ (800172c <SystemClock_Config+0x158>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800162e:	bf00      	nop
 8001630:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <SystemClock_Config+0x158>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800163c:	d1f8      	bne.n	8001630 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <SystemClock_Config+0x15c>)
 8001640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001644:	4a3a      	ldr	r2, [pc, #232]	@ (8001730 <SystemClock_Config+0x15c>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800164e:	4b38      	ldr	r3, [pc, #224]	@ (8001730 <SystemClock_Config+0x15c>)
 8001650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <SystemClock_Config+0x158>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a31      	ldr	r2, [pc, #196]	@ (800172c <SystemClock_Config+0x158>)
 8001666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <SystemClock_Config+0x158>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <SystemClock_Config+0x154>)
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	4a2b      	ldr	r2, [pc, #172]	@ (8001728 <SystemClock_Config+0x154>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001682:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <SystemClock_Config+0x154>)
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800168e:	bf00      	nop
 8001690:	4b26      	ldr	r3, [pc, #152]	@ (800172c <SystemClock_Config+0x158>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800169c:	d1f8      	bne.n	8001690 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800169e:	2310      	movs	r3, #16
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80016a6:	2320      	movs	r3, #32
 80016a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016aa:	2302      	movs	r3, #2
 80016ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 80016b6:	23f0      	movs	r3, #240	@ 0xf0
 80016b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016be:	2304      	movs	r3, #4
 80016c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016c6:	2308      	movs	r3, #8
 80016c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 fb80 	bl	8007ddc <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80016e2:	f000 f9df 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	233f      	movs	r3, #63	@ 0x3f
 80016e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ea:	2303      	movs	r3, #3
 80016ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016f2:	2308      	movs	r3, #8
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016f6:	2340      	movs	r3, #64	@ 0x40
 80016f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001704:	2340      	movs	r3, #64	@ 0x40
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2104      	movs	r1, #4
 800170e:	4618      	mov	r0, r3
 8001710:	f006 ffbe 	bl	8008690 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800171a:	f000 f9c3 	bl	8001aa4 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3778      	adds	r7, #120	@ 0x78
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	58000400 	.word	0x58000400
 800172c:	58024800 	.word	0x58024800
 8001730:	58024400 	.word	0x58024400

08001734 <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001744:	d11a      	bne.n	800177c <HAL_GPIO_EXTI_Callback+0x48>

    unsigned int uiTick = osKernelGetTickCount();
 8001746:	f00c fc89 	bl	800e05c <osKernelGetTickCount>
 800174a:	60f8      	str	r0, [r7, #12]

    if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <HAL_GPIO_EXTI_Callback+0x50>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	429a      	cmp	r2, r3
 8001758:	d910      	bls.n	800177c <HAL_GPIO_EXTI_Callback+0x48>
    {
      ucButtonState ^= 1;
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_GPIO_EXTI_Callback+0x54>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f083 0301 	eor.w	r3, r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <HAL_GPIO_EXTI_Callback+0x54>)
 8001766:	701a      	strb	r2, [r3, #0]
      uiJoySWTickOnPress = uiTick;
 8001768:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <HAL_GPIO_EXTI_Callback+0x50>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6013      	str	r3, [r2, #0]
      osThreadFlagsSet(TaskControleHandle, JOYSW_FLAG);
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <HAL_GPIO_EXTI_Callback+0x58>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001776:	4618      	mov	r0, r3
 8001778:	f00c fd18 	bl	800e1ac <osThreadFlagsSet>
    }
  }
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	24032984 	.word	0x24032984
 8001788:	24032978 	.word	0x24032978
 800178c:	24032968 	.word	0x24032968

08001790 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4ab5      	ldr	r2, [pc, #724]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2e0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	f040 8163 	bne.w	8001a68 <HAL_UART_RxCpltCallback+0x2d8>
  {

    // State machine state
    unsigned int ucSmState = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	72fb      	strb	r3, [r7, #11]
 80017aa:	e154      	b.n	8001a56 <HAL_UART_RxCpltCallback+0x2c6>
    {
      switch (ucSmState)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80017b0:	f200 814a 	bhi.w	8001a48 <HAL_UART_RxCpltCallback+0x2b8>
 80017b4:	a201      	add	r2, pc, #4	@ (adr r2, 80017bc <HAL_UART_RxCpltCallback+0x2c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	0800186d 	.word	0x0800186d
 80017c0:	0800187f 	.word	0x0800187f
 80017c4:	08001a49 	.word	0x08001a49
 80017c8:	08001a49 	.word	0x08001a49
 80017cc:	08001a49 	.word	0x08001a49
 80017d0:	08001a49 	.word	0x08001a49
 80017d4:	08001a49 	.word	0x08001a49
 80017d8:	08001a49 	.word	0x08001a49
 80017dc:	08001a49 	.word	0x08001a49
 80017e0:	08001a49 	.word	0x08001a49
 80017e4:	08001949 	.word	0x08001949
 80017e8:	08001959 	.word	0x08001959
 80017ec:	08001969 	.word	0x08001969
 80017f0:	08001979 	.word	0x08001979
 80017f4:	08001a49 	.word	0x08001a49
 80017f8:	08001a49 	.word	0x08001a49
 80017fc:	08001a49 	.word	0x08001a49
 8001800:	08001a49 	.word	0x08001a49
 8001804:	08001a49 	.word	0x08001a49
 8001808:	08001a49 	.word	0x08001a49
 800180c:	08001989 	.word	0x08001989
 8001810:	08001999 	.word	0x08001999
 8001814:	080019a9 	.word	0x080019a9
 8001818:	080019b9 	.word	0x080019b9
 800181c:	08001a49 	.word	0x08001a49
 8001820:	08001a49 	.word	0x08001a49
 8001824:	08001a49 	.word	0x08001a49
 8001828:	08001a49 	.word	0x08001a49
 800182c:	08001a49 	.word	0x08001a49
 8001830:	08001a49 	.word	0x08001a49
 8001834:	080019c9 	.word	0x080019c9
 8001838:	080019d9 	.word	0x080019d9
 800183c:	080019e9 	.word	0x080019e9
 8001840:	080019f9 	.word	0x080019f9
 8001844:	08001a49 	.word	0x08001a49
 8001848:	08001a49 	.word	0x08001a49
 800184c:	08001a49 	.word	0x08001a49
 8001850:	08001a49 	.word	0x08001a49
 8001854:	08001a49 	.word	0x08001a49
 8001858:	08001a49 	.word	0x08001a49
 800185c:	08001a09 	.word	0x08001a09
 8001860:	08001a19 	.word	0x08001a19
 8001864:	08001a29 	.word	0x08001a29
 8001868:	08001a39 	.word	0x08001a39
      {
        case 0:
          if('#' == ucDmaBuffer[i])
 800186c:	7afb      	ldrb	r3, [r7, #11]
 800186e:	4a81      	ldr	r2, [pc, #516]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	2b23      	cmp	r3, #35	@ 0x23
 8001874:	f040 80eb 	bne.w	8001a4e <HAL_UART_RxCpltCallback+0x2be>
          {
            ucSmState = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800187c:	e0e7      	b.n	8001a4e <HAL_UART_RxCpltCallback+0x2be>

        case 1:
          switch (ucDmaBuffer[i])
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	4a7c      	ldr	r2, [pc, #496]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	3b24      	subs	r3, #36	@ 0x24
 8001886:	2b20      	cmp	r3, #32
 8001888:	d85a      	bhi.n	8001940 <HAL_UART_RxCpltCallback+0x1b0>
 800188a:	a201      	add	r2, pc, #4	@ (adr r2, 8001890 <HAL_UART_RxCpltCallback+0x100>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	0800192d 	.word	0x0800192d
 8001894:	08001941 	.word	0x08001941
 8001898:	08001941 	.word	0x08001941
 800189c:	08001941 	.word	0x08001941
 80018a0:	08001941 	.word	0x08001941
 80018a4:	08001941 	.word	0x08001941
 80018a8:	08001941 	.word	0x08001941
 80018ac:	08001941 	.word	0x08001941
 80018b0:	08001941 	.word	0x08001941
 80018b4:	08001941 	.word	0x08001941
 80018b8:	08001941 	.word	0x08001941
 80018bc:	08001941 	.word	0x08001941
 80018c0:	08001941 	.word	0x08001941
 80018c4:	08001941 	.word	0x08001941
 80018c8:	08001941 	.word	0x08001941
 80018cc:	08001941 	.word	0x08001941
 80018d0:	08001941 	.word	0x08001941
 80018d4:	08001941 	.word	0x08001941
 80018d8:	08001941 	.word	0x08001941
 80018dc:	08001941 	.word	0x08001941
 80018e0:	08001941 	.word	0x08001941
 80018e4:	08001941 	.word	0x08001941
 80018e8:	08001941 	.word	0x08001941
 80018ec:	08001941 	.word	0x08001941
 80018f0:	08001941 	.word	0x08001941
 80018f4:	08001941 	.word	0x08001941
 80018f8:	08001941 	.word	0x08001941
 80018fc:	08001941 	.word	0x08001941
 8001900:	08001941 	.word	0x08001941
 8001904:	08001915 	.word	0x08001915
 8001908:	0800191b 	.word	0x0800191b
 800190c:	08001921 	.word	0x08001921
 8001910:	08001927 	.word	0x08001927
          {
            case 'A':
              ucSmState = 10;
 8001914:	230a      	movs	r3, #10
 8001916:	60fb      	str	r3, [r7, #12]
              break;
 8001918:	e015      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            case 'B':
              ucSmState = 20;
 800191a:	2314      	movs	r3, #20
 800191c:	60fb      	str	r3, [r7, #12]
              break;
 800191e:	e012      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            case 'C':
              ucSmState = 30;
 8001920:	231e      	movs	r3, #30
 8001922:	60fb      	str	r3, [r7, #12]
              break;
 8001924:	e00f      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            case 'D':
              ucSmState = 40;
 8001926:	2328      	movs	r3, #40	@ 0x28
 8001928:	60fb      	str	r3, [r7, #12]
              break;
 800192a:	e00c      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            case '$':
              ucSmState = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]

              // Message fully received, setting TaskControle ThreadFlag for sync.
              osThreadFlagsSet(TaskControleHandle, UART_NEW_DATA_FLAG);
 8001930:	4b51      	ldr	r3, [pc, #324]	@ (8001a78 <HAL_UART_RxCpltCallback+0x2e8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001938:	4618      	mov	r0, r3
 800193a:	f00c fc37 	bl	800e1ac <osThreadFlagsSet>
              //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
              break;
 800193e:	e002      	b.n	8001946 <HAL_UART_RxCpltCallback+0x1b6>

            default:
              ucSmState = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
              break;
 8001944:	bf00      	nop
          }
          break;
 8001946:	e083      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 10:
          xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800194c:	5cd2      	ldrb	r2, [r2, r3]
 800194e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001950:	701a      	strb	r2, [r3, #0]
          ucSmState = 11;
 8001952:	230b      	movs	r3, #11
 8001954:	60fb      	str	r3, [r7, #12]
          break;
 8001956:	e07b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 11:
          xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	4a46      	ldr	r2, [pc, #280]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800195c:	5cd2      	ldrb	r2, [r2, r3]
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001960:	705a      	strb	r2, [r3, #1]
          ucSmState = 12;
 8001962:	230c      	movs	r3, #12
 8001964:	60fb      	str	r3, [r7, #12]
          break;
 8001966:	e073      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 12:
          xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	4a42      	ldr	r2, [pc, #264]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800196c:	5cd2      	ldrb	r2, [r2, r3]
 800196e:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001970:	709a      	strb	r2, [r3, #2]
          ucSmState = 13;
 8001972:	230d      	movs	r3, #13
 8001974:	60fb      	str	r3, [r7, #12]
          break;
 8001976:	e06b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 13:
          xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800197c:	5cd2      	ldrb	r2, [r2, r3]
 800197e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001980:	70da      	strb	r2, [r3, #3]
          ucSmState = 1;
 8001982:	2301      	movs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
          break;
 8001986:	e063      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 20:
          xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800198c:	5cd2      	ldrb	r2, [r2, r3]
 800198e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001990:	711a      	strb	r2, [r3, #4]
          ucSmState = 21;
 8001992:	2315      	movs	r3, #21
 8001994:	60fb      	str	r3, [r7, #12]
          break;
 8001996:	e05b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 21:
          xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8001998:	7afb      	ldrb	r3, [r7, #11]
 800199a:	4a36      	ldr	r2, [pc, #216]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 800199c:	5cd2      	ldrb	r2, [r2, r3]
 800199e:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019a0:	715a      	strb	r2, [r3, #5]
          ucSmState = 22;
 80019a2:	2316      	movs	r3, #22
 80019a4:	60fb      	str	r3, [r7, #12]
          break;
 80019a6:	e053      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 22:
          xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 80019a8:	7afb      	ldrb	r3, [r7, #11]
 80019aa:	4a32      	ldr	r2, [pc, #200]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019ac:	5cd2      	ldrb	r2, [r2, r3]
 80019ae:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019b0:	719a      	strb	r2, [r3, #6]
          ucSmState = 23;
 80019b2:	2317      	movs	r3, #23
 80019b4:	60fb      	str	r3, [r7, #12]
          break;
 80019b6:	e04b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 23:
          xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019bc:	5cd2      	ldrb	r2, [r2, r3]
 80019be:	4b2f      	ldr	r3, [pc, #188]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019c0:	71da      	strb	r2, [r3, #7]
          ucSmState = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
          break;
 80019c6:	e043      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 30:
          xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019cc:	5cd2      	ldrb	r2, [r2, r3]
 80019ce:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019d0:	721a      	strb	r2, [r3, #8]
          ucSmState = 31;
 80019d2:	231f      	movs	r3, #31
 80019d4:	60fb      	str	r3, [r7, #12]
          break;
 80019d6:	e03b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 31:
          xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	4a26      	ldr	r2, [pc, #152]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019dc:	5cd2      	ldrb	r2, [r2, r3]
 80019de:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019e0:	725a      	strb	r2, [r3, #9]
          ucSmState = 32;
 80019e2:	2320      	movs	r3, #32
 80019e4:	60fb      	str	r3, [r7, #12]
          break;
 80019e6:	e033      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 32:
          xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019ec:	5cd2      	ldrb	r2, [r2, r3]
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 80019f0:	729a      	strb	r2, [r3, #10]
          ucSmState = 33;
 80019f2:	2321      	movs	r3, #33	@ 0x21
 80019f4:	60fb      	str	r3, [r7, #12]
          break;
 80019f6:	e02b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 33:
          xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 80019fc:	5cd2      	ldrb	r2, [r2, r3]
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a00:	72da      	strb	r2, [r3, #11]
          ucSmState = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
          break;
 8001a06:	e023      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 40:
          xVehicleStatus.xSteeringStatus.ucBytes[0] = ucDmaBuffer[i];
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a0c:	5cd2      	ldrb	r2, [r2, r3]
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a10:	731a      	strb	r2, [r3, #12]
          ucSmState = 41;
 8001a12:	2329      	movs	r3, #41	@ 0x29
 8001a14:	60fb      	str	r3, [r7, #12]
          break;
 8001a16:	e01b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 41:
          xVehicleStatus.xSteeringStatus.ucBytes[1] = ucDmaBuffer[i];
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	4a16      	ldr	r2, [pc, #88]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a1c:	5cd2      	ldrb	r2, [r2, r3]
 8001a1e:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a20:	735a      	strb	r2, [r3, #13]
          ucSmState = 42;
 8001a22:	232a      	movs	r3, #42	@ 0x2a
 8001a24:	60fb      	str	r3, [r7, #12]
          break;
 8001a26:	e013      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 42:
          xVehicleStatus.xSteeringStatus.ucBytes[2] = ucDmaBuffer[i];
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a2c:	5cd2      	ldrb	r2, [r2, r3]
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a30:	739a      	strb	r2, [r3, #14]
          ucSmState = 43;
 8001a32:	232b      	movs	r3, #43	@ 0x2b
 8001a34:	60fb      	str	r3, [r7, #12]
          break;
 8001a36:	e00b      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        case 43:
          xVehicleStatus.xSteeringStatus.ucBytes[3] = ucDmaBuffer[i];
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a3c:	5cd2      	ldrb	r2, [r2, r3]
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_UART_RxCpltCallback+0x2ec>)
 8001a40:	73da      	strb	r2, [r3, #15]
          ucSmState = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
          break;
 8001a46:	e003      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>

        default:
		      ucSmState = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
          break;
 8001a4c:	e000      	b.n	8001a50 <HAL_UART_RxCpltCallback+0x2c0>
          break;
 8001a4e:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	3301      	adds	r3, #1
 8001a54:	72fb      	strb	r3, [r7, #11]
 8001a56:	7afb      	ldrb	r3, [r7, #11]
 8001a58:	2b15      	cmp	r3, #21
 8001a5a:	f67f aea7 	bls.w	80017ac <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001a5e:	2216      	movs	r2, #22
 8001a60:	4904      	ldr	r1, [pc, #16]	@ (8001a74 <HAL_UART_RxCpltCallback+0x2e4>)
 8001a62:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <HAL_UART_RxCpltCallback+0x2e0>)
 8001a64:	f00a fa7e 	bl	800bf64 <HAL_UART_Receive_DMA>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	24032a48 	.word	0x24032a48
 8001a74:	240329d4 	.word	0x240329d4
 8001a78:	24032968 	.word	0x24032968
 8001a7c:	240329c4 	.word	0x240329c4

08001a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a92:	f001 fd3b 	bl	800350c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40001000 	.word	0x40001000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <Error_Handler+0x8>

08001ab0 <StartMicroAutoware>:
  * @brief  MicroAutoware task function.
  * @param  argument : not used.
  * @retval None
  */
void StartMicroAutoware(void * argument)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 8001ab6:	af02      	add	r7, sp, #8
 8001ab8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001abc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001ac0:	6018      	str	r0, [r3, #0]

  // Variables -- START

  unsigned int uiFlags;
  unsigned char ucControlMode = MANUAL;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f

  // micro-ros QoS
  const rmw_qos_profile_t * qos_autoware = &rmw_qos_profile_autoware;
 8001ac8:	4bd4      	ldr	r3, [pc, #848]	@ (8001e1c <StartMicroAutoware+0x36c>)
 8001aca:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
  rcl_allocator_t allocator;

  rclc_executor_t executor;

  // Number of subscribers + number of timers + number of services OR Number total of callbacks
  unsigned char ucNumberOfHandles = 3;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
  // Variables -- END

  // micro-ROS configuration

  // Setting transport layer
  rmw_uros_set_custom_transport(
 8001ad4:	4bd2      	ldr	r3, [pc, #840]	@ (8001e20 <StartMicroAutoware+0x370>)
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	4bd2      	ldr	r3, [pc, #840]	@ (8001e24 <StartMicroAutoware+0x374>)
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4bd2      	ldr	r3, [pc, #840]	@ (8001e28 <StartMicroAutoware+0x378>)
 8001ade:	4ad3      	ldr	r2, [pc, #844]	@ (8001e2c <StartMicroAutoware+0x37c>)
 8001ae0:	49d3      	ldr	r1, [pc, #844]	@ (8001e30 <StartMicroAutoware+0x380>)
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f013 fd80 	bl	80155e8 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  // Setting memory allocation methods
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001ae8:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001aec:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001af0:	4618      	mov	r0, r3
 8001af2:	f013 fccd 	bl	8015490 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001af6:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001afa:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001afe:	4acd      	ldr	r2, [pc, #820]	@ (8001e34 <StartMicroAutoware+0x384>)
 8001b00:	601a      	str	r2, [r3, #0]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001b02:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b06:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b0a:	4acb      	ldr	r2, [pc, #812]	@ (8001e38 <StartMicroAutoware+0x388>)
 8001b0c:	605a      	str	r2, [r3, #4]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001b0e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b12:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b16:	4ac9      	ldr	r2, [pc, #804]	@ (8001e3c <StartMicroAutoware+0x38c>)
 8001b18:	609a      	str	r2, [r3, #8]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b1a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b1e:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001b22:	4ac7      	ldr	r2, [pc, #796]	@ (8001e40 <StartMicroAutoware+0x390>)
 8001b24:	60da      	str	r2, [r3, #12]

  // micro-ROS app

  executor = rclc_executor_get_zero_initialized_executor();
 8001b26:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b2a:	f5a3 741c 	sub.w	r4, r3, #624	@ 0x270
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4618      	mov	r0, r3
 8001b32:	f012 fff9 	bl	8014b28 <rclc_executor_get_zero_initialized_executor>
 8001b36:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b3a:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4619      	mov	r1, r3
 8001b42:	2388      	movs	r3, #136	@ 0x88
 8001b44:	461a      	mov	r2, r3
 8001b46:	f020 fce2 	bl	802250e <memcpy>

  allocator = rcl_get_default_allocator();
 8001b4a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b4e:	f5a3 74f2 	sub.w	r4, r3, #484	@ 0x1e4
 8001b52:	463b      	mov	r3, r7
 8001b54:	4618      	mov	r0, r3
 8001b56:	f013 fca9 	bl	80154ac <rcutils_get_default_allocator>
 8001b5a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001b5e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001b62:	461d      	mov	r5, r3
 8001b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001b6c:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001b70:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	f013 fb06 	bl	8015188 <rclc_support_init>

  // create node
  rclc_node_init_default(&VehicleInterfaceNode, NODE_NAME, "microautoware", &support);
 8001b7c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001b80:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 8001b84:	4aaf      	ldr	r2, [pc, #700]	@ (8001e44 <StartMicroAutoware+0x394>)
 8001b86:	49b0      	ldr	r1, [pc, #704]	@ (8001e48 <StartMicroAutoware+0x398>)
 8001b88:	f013 fb48 	bl	801521c <rclc_node_init_default>

  // create executor
  rclc_executor_init(&executor, &support.context, ucNumberOfHandles, &allocator);
 8001b8c:	f897 2327 	ldrb.w	r2, [r7, #807]	@ 0x327
 8001b90:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001b94:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001b98:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001b9c:	f012 ffd0 	bl	8014b40 <rclc_executor_init>

  // create timers
  rclc_timer_init_default(&timer_watchdog_agent, &support, WATCHDOG_AGENT_TIMEOUT, timer_watchdog_agent_callback);
 8001ba0:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8001ba4:	f507 7036 	add.w	r0, r7, #728	@ 0x2d8
 8001ba8:	4ba8      	ldr	r3, [pc, #672]	@ (8001e4c <StartMicroAutoware+0x39c>)
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	f013 fc34 	bl	8015420 <rclc_timer_init_default>

  // create subscribers
  rclc_subscription_init(
 8001bb8:	f014 fb5c 	bl	8016274 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bc2:	f507 7046 	add.w	r0, r7, #792	@ 0x318
 8001bc6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4ba0      	ldr	r3, [pc, #640]	@ (8001e50 <StartMicroAutoware+0x3a0>)
 8001bce:	f013 fbe7 	bl	80153a0 <rclc_subscription_init>
    		&clock_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(rosgraph_msgs, msg, Clock),
    		"/clock", qos_autoware);
        
  rclc_subscription_init(
 8001bd2:	f00f ff2b 	bl	8011a2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bdc:	f507 7045 	add.w	r0, r7, #788	@ 0x314
 8001be0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	4b9b      	ldr	r3, [pc, #620]	@ (8001e54 <StartMicroAutoware+0x3a4>)
 8001be8:	f013 fbda 	bl	80153a0 <rclc_subscription_init>
    		&control_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_control_msgs, msg, AckermannControlCommand),
    		"/control/command/control_cmd", qos_autoware);

  rclc_subscription_init(
 8001bec:	f010 f996 	bl	8011f1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001bf6:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 8001bfa:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4b95      	ldr	r3, [pc, #596]	@ (8001e58 <StartMicroAutoware+0x3a8>)
 8001c02:	f013 fbcd 	bl	80153a0 <rclc_subscription_init>
    		&gear_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, GearCommand),
    		"/control/command/gear_cmd", qos_autoware);

  rclc_subscription_init(
 8001c06:	f010 fa01 	bl	801200c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c10:	f507 7043 	add.w	r0, r7, #780	@ 0x30c
 8001c14:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	4b90      	ldr	r3, [pc, #576]	@ (8001e5c <StartMicroAutoware+0x3ac>)
 8001c1c:	f013 fbc0 	bl	80153a0 <rclc_subscription_init>
    		&turn_indicators_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, TurnIndicatorsCommand),
    		"/control/command/turn_indicators_cmd", qos_autoware);

  rclc_subscription_init(
 8001c20:	f010 f9ac 	bl	8011f7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c2a:	f507 7042 	add.w	r0, r7, #776	@ 0x308
 8001c2e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4b8a      	ldr	r3, [pc, #552]	@ (8001e60 <StartMicroAutoware+0x3b0>)
 8001c36:	f013 fbb3 	bl	80153a0 <rclc_subscription_init>
    		&hazard_lights_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, HazardLightsCommand ),
    		"/control/command/hazard_lights_cmd", qos_autoware);

  rclc_subscription_init(
 8001c3a:	f014 fcad 	bl	8016598 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c44:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8001c48:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4b85      	ldr	r3, [pc, #532]	@ (8001e64 <StartMicroAutoware+0x3b4>)
 8001c50:	f013 fba6 	bl	80153a0 <rclc_subscription_init>
    		&actuation_cmd_sub_,
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationCommandStamped),
    		"/control/command/actuation_cmd", qos_autoware);

  rclc_subscription_init(
 8001c54:	f014 fce8 	bl	8016628 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c5e:	f507 7040 	add.w	r0, r7, #768	@ 0x300
 8001c62:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4b7f      	ldr	r3, [pc, #508]	@ (8001e68 <StartMicroAutoware+0x3b8>)
 8001c6a:	f013 fb99 	bl	80153a0 <rclc_subscription_init>
    		&VehicleInterfaceNode,
    		ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, VehicleEmergencyStamped),
    		"/control/command/emergency_cmd", qos_autoware);

  // create publishers
  rclc_publisher_init(
 8001c6e:	f010 f93d 	bl	8011eec <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c78:	f507 703f 	add.w	r0, r7, #764	@ 0x2fc
 8001c7c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4b7a      	ldr	r3, [pc, #488]	@ (8001e6c <StartMicroAutoware+0x3bc>)
 8001c84:	f013 fb0c 	bl	80152a0 <rclc_publisher_init>
        &control_mode_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, ControlModeReport),
        "/vehicle/status/control_mode", qos_autoware);

  rclc_publisher_init(
 8001c88:	f010 f9f0 	bl	801206c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001c92:	f507 703e 	add.w	r0, r7, #760	@ 0x2f8
 8001c96:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4b74      	ldr	r3, [pc, #464]	@ (8001e70 <StartMicroAutoware+0x3c0>)
 8001c9e:	f013 faff 	bl	80152a0 <rclc_publisher_init>
		    &vehicle_twist_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, VelocityReport),
        "/vehicle/status/velocity_status", qos_autoware);

  rclc_publisher_init(
 8001ca2:	f010 f99b 	bl	8011fdc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cac:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 8001cb0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <StartMicroAutoware+0x3c4>)
 8001cb8:	f013 faf2 	bl	80152a0 <rclc_publisher_init>
        &steering_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, SteeringReport),
        "/vehicle/status/steering_status", qos_autoware);

  rclc_publisher_init(
 8001cbc:	f010 f946 	bl	8011f4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cc6:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8001cca:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4b69      	ldr	r3, [pc, #420]	@ (8001e78 <StartMicroAutoware+0x3c8>)
 8001cd2:	f013 fae5 	bl	80152a0 <rclc_publisher_init>
        &gear_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, GearReport),
        "/vehicle/status/gear_status", qos_autoware);

  rclc_publisher_init(
 8001cd6:	f010 f9b1 	bl	801203c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001ce0:	f507 703b 	add.w	r0, r7, #748	@ 0x2ec
 8001ce4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4b64      	ldr	r3, [pc, #400]	@ (8001e7c <StartMicroAutoware+0x3cc>)
 8001cec:	f013 fad8 	bl	80152a0 <rclc_publisher_init>
        &turn_indicators_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, TurnIndicatorsReport),
        "/vehicle/status/turn_indicators_status", qos_autoware);

  rclc_publisher_init(
 8001cf0:	f010 f95c 	bl	8011fac <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001cfa:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8001cfe:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4b5e      	ldr	r3, [pc, #376]	@ (8001e80 <StartMicroAutoware+0x3d0>)
 8001d06:	f013 facb 	bl	80152a0 <rclc_publisher_init>
        &hazard_lights_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(autoware_auto_vehicle_msgs, msg, HazardLightsReport),
        "/vehicle/status/hazard_lights_status", qos_autoware);

  rclc_publisher_init(
 8001d0a:	f014 fc5d 	bl	80165c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d14:	f507 7039 	add.w	r0, r7, #740	@ 0x2e4
 8001d18:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <StartMicroAutoware+0x3d4>)
 8001d20:	f013 fabe 	bl	80152a0 <rclc_publisher_init>
        &actuation_status_pub_,
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, ActuationStatusStamped),
        "/vehicle/status/actuation_status", qos_autoware);

  rclc_publisher_init(
 8001d24:	f014 fc68 	bl	80165f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d2e:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 8001d32:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4b53      	ldr	r3, [pc, #332]	@ (8001e88 <StartMicroAutoware+0x3d8>)
 8001d3a:	f013 fab1 	bl	80152a0 <rclc_publisher_init>
        &VehicleInterfaceNode,
        ROSIDL_GET_MSG_TYPE_SUPPORT(tier4_vehicle_msgs, msg, SteeringWheelStatusStamped),
        "/vehicle/status/steering_wheel_status", qos_autoware);

  // creating servers
  rclc_service_init(
 8001d3e:	f010 f8b5 	bl	8011eac <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001d48:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 8001d4c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4b4e      	ldr	r3, [pc, #312]	@ (8001e8c <StartMicroAutoware+0x3dc>)
 8001d54:	f013 fae4 	bl	8015320 <rclc_service_init>
        ROSIDL_GET_SRV_TYPE_SUPPORT(autoware_auto_vehicle_msgs, srv, ControlModeCommand),
        "/control/control_mode_request", qos_autoware);


  // adding callbacks to executor
  rclc_executor_add_subscription(&executor, &clock_sub_, &clock_msg_, &clock_callback, ON_NEW_DATA);
 8001d58:	f507 7234 	add.w	r2, r7, #720	@ 0x2d0
 8001d5c:	f507 7146 	add.w	r1, r7, #792	@ 0x318
 8001d60:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4b49      	ldr	r3, [pc, #292]	@ (8001e90 <StartMicroAutoware+0x3e0>)
 8001d6a:	f012 ff65 	bl	8014c38 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &control_cmd_sub_, &control_cmd_msg_, &control_cmd_callback, ON_NEW_DATA);
 8001d6e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8001d72:	f507 7145 	add.w	r1, r7, #788	@ 0x314
 8001d76:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4b45      	ldr	r3, [pc, #276]	@ (8001e94 <StartMicroAutoware+0x3e4>)
 8001d80:	f012 ff5a 	bl	8014c38 <rclc_executor_add_subscription>

  rclc_executor_add_service(&executor, &control_mode_server_, &control_mode_request_msg_, &control_mode_response_msg_, control_mode_cmd_callback);
 8001d84:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001d88:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001d8c:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 8001d90:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001d94:	4c40      	ldr	r4, [pc, #256]	@ (8001e98 <StartMicroAutoware+0x3e8>)
 8001d96:	9400      	str	r4, [sp, #0]
 8001d98:	f012 ff8c 	bl	8014cb4 <rclc_executor_add_service>
//  rclc_executor_add_subscription(&executor, &actuation_cmd_sub_, &actuation_cmd_msg_, &actuation_cmd_callback, ON_NEW_DATA);
//  rclc_executor_add_subscription(&executor, &emergency_sub_, &emergency_msg_, &emergency_callback, ON_NEW_DATA);


  // pinging micro-ros agent
  rmw_ret_t xPingResult = rmw_uros_ping_agent(1000, 20);
 8001d9c:	2114      	movs	r1, #20
 8001d9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da2:	f013 fc37 	bl	8015614 <rmw_uros_ping_agent>
 8001da6:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320

  // Setting flag on TaskControle to enable autonomus mode
  osThreadFlagsSet(TaskControleHandle, MICRO_ROS_AGENT_ONLINE_FLAG);
 8001daa:	4b3c      	ldr	r3, [pc, #240]	@ (8001e9c <StartMicroAutoware+0x3ec>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001db2:	4618      	mov	r0, r3
 8001db4:	f00c f9fa 	bl	800e1ac <osThreadFlagsSet>
  // Task loop
  for (;;)
  {

    // Sync time with ROS
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 8001db8:	203c      	movs	r0, #60	@ 0x3c
 8001dba:	f013 fe45 	bl	8015a48 <rmw_uros_sync_session>

    rclc_executor_spin_some(&executor, EXECUTOR_SPIN_TIME * (1000 * 1000)); // Spinning executor for EXECUTOR_SPIN_PERIOD * (1000 * 1000) ns.
 8001dbe:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001dc2:	4a37      	ldr	r2, [pc, #220]	@ (8001ea0 <StartMicroAutoware+0x3f0>)
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	4608      	mov	r0, r1
 8001dca:	f013 f9a3 	bl	8015114 <rclc_executor_spin_some>

    // Checking if control mode has changed by vehicle or Autoware.
    uiFlags = osThreadFlagsGet();
 8001dce:	f00c fa3b 	bl	800e248 <osThreadFlagsGet>
 8001dd2:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2011      	movs	r0, #17
 8001ddc:	f00c fa55 	bl	800e28a <osThreadFlagsWait>
 8001de0:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

    if(CHECK_FLAG(TO_AUTOWARE_MODE_FLAG, uiFlags))
 8001de4:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <StartMicroAutoware+0x350>
 8001df0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db03      	blt.n	8001e00 <StartMicroAutoware+0x350>
    {
      ucControlMode = AUTOWARE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001dfe:	e06c      	b.n	8001eda <StartMicroAutoware+0x42a>
    }
    else if(CHECK_FLAG(TO_MANUAL_MODE_FLAG, uiFlags))
 8001e00:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d04b      	beq.n	8001ea4 <StartMicroAutoware+0x3f4>
 8001e0c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db47      	blt.n	8001ea4 <StartMicroAutoware+0x3f4>
    {
      ucControlMode = MANUAL;
 8001e14:	2304      	movs	r3, #4
 8001e16:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001e1a:	e05e      	b.n	8001eda <StartMicroAutoware+0x42a>
 8001e1c:	080234c8 	.word	0x080234c8
 8001e20:	08000f8d 	.word	0x08000f8d
 8001e24:	08000f29 	.word	0x08000f29
 8001e28:	08000f09 	.word	0x08000f09
 8001e2c:	08000edd 	.word	0x08000edd
 8001e30:	24032adc 	.word	0x24032adc
 8001e34:	080020ed 	.word	0x080020ed
 8001e38:	08002131 	.word	0x08002131
 8001e3c:	08002169 	.word	0x08002169
 8001e40:	080021d5 	.word	0x080021d5
 8001e44:	080231f0 	.word	0x080231f0
 8001e48:	08023200 	.word	0x08023200
 8001e4c:	08001169 	.word	0x08001169
 8001e50:	08023214 	.word	0x08023214
 8001e54:	0802321c 	.word	0x0802321c
 8001e58:	0802323c 	.word	0x0802323c
 8001e5c:	08023258 	.word	0x08023258
 8001e60:	08023280 	.word	0x08023280
 8001e64:	080232a4 	.word	0x080232a4
 8001e68:	080232c4 	.word	0x080232c4
 8001e6c:	080232e4 	.word	0x080232e4
 8001e70:	08023304 	.word	0x08023304
 8001e74:	08023324 	.word	0x08023324
 8001e78:	08023344 	.word	0x08023344
 8001e7c:	08023360 	.word	0x08023360
 8001e80:	08023388 	.word	0x08023388
 8001e84:	080233b0 	.word	0x080233b0
 8001e88:	080233d4 	.word	0x080233d4
 8001e8c:	080233fc 	.word	0x080233fc
 8001e90:	080011ad 	.word	0x080011ad
 8001e94:	080011d9 	.word	0x080011d9
 8001e98:	08001205 	.word	0x08001205
 8001e9c:	24032968 	.word	0x24032968
 8001ea0:	00e4e1c0 	.word	0x00e4e1c0
    }
    else if(CHECK_FLAG(TO_EMERGENCY_MODE_FLAG, uiFlags))
 8001ea4:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001ea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <StartMicroAutoware+0x410>
 8001eb0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db03      	blt.n	8001ec0 <StartMicroAutoware+0x410>
    {
      ucControlMode = MANUAL;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
 8001ebe:	e00c      	b.n	8001eda <StartMicroAutoware+0x42a>
      // do some of emergency thing in autoware way.
    }
    else if(CHECK_FLAG((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG), uiFlags))
 8001ec0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001ec4:	f003 0311 	and.w	r3, r3, #17
 8001ec8:	2b11      	cmp	r3, #17
 8001eca:	d106      	bne.n	8001eda <StartMicroAutoware+0x42a>
 8001ecc:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db02      	blt.n	8001eda <StartMicroAutoware+0x42a>
    {
      ucControlMode = MANUAL;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	f887 332f 	strb.w	r3, [r7, #815]	@ 0x32f
    }

    control_mode_msg_.stamp = clock_msg_.clock;
 8001eda:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8001ee8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001eec:	e882 0003 	stmia.w	r2, {r0, r1}
    control_mode_msg_.mode = ucControlMode;
 8001ef0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ef8:	f897 232f 	ldrb.w	r2, [r7, #815]	@ 0x32f
 8001efc:	721a      	strb	r2, [r3, #8]
    rcl_publish(&control_mode_pub_, &control_mode_msg_, NULL);
 8001efe:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8001f02:	f507 733f 	add.w	r3, r7, #764	@ 0x2fc
 8001f06:	2200      	movs	r2, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f012 fa7f 	bl	801440c <rcl_publish>

    // All topics are recieved (maybe not all...)
    if(0b1 & (ucSubscribersRecieved >> 1)) // Checking if control_cmd_sub_ data arrives (second bit of ucSubscribersRecieved)
 8001f0e:	4b70      	ldr	r3, [pc, #448]	@ (80020d0 <StartMicroAutoware+0x620>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d03f      	beq.n	8001f9c <StartMicroAutoware+0x4ec>
    {
      // Autonomous mode: Gather all subs data, then compact and send to TaskControle.
      if(AUTOWARE == ucControlMode)
 8001f1c:	f897 332f 	ldrb.w	r3, [r7, #815]	@ 0x32f
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d13b      	bne.n	8001f9c <StartMicroAutoware+0x4ec>
      {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8001f24:	4b6b      	ldr	r3, [pc, #428]	@ (80020d4 <StartMicroAutoware+0x624>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00c face 	bl	800e4ce <osMutexAcquire>
        xControlAction.xSteeringAngle.fFloat = control_cmd_msg_.lateral.steering_tire_angle * 1.2;
 8001f32:	edd7 7aad 	vldr	s15, [r7, #692]	@ 0x2b4
 8001f36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f3a:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 80020c8 <StartMicroAutoware+0x618>
 8001f3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f46:	4b64      	ldr	r3, [pc, #400]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
        xControlAction.xSteeringVelocity.fFloat = control_cmd_msg_.lateral.steering_tire_rotation_rate * 1.2;
 8001f4c:	edd7 7aae 	vldr	s15, [r7, #696]	@ 0x2b8
 8001f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f54:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 80020c8 <StartMicroAutoware+0x618>
 8001f58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f60:	4b5d      	ldr	r3, [pc, #372]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f62:	edc3 7a01 	vstr	s15, [r3, #4]
        xControlAction.xSpeed.fFloat = control_cmd_msg_.longitudinal.speed;
 8001f66:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f6c:	6093      	str	r3, [r2, #8]
        xControlAction.xAcceleration.fFloat = control_cmd_msg_.longitudinal.acceleration;
 8001f6e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8001f72:	4a59      	ldr	r2, [pc, #356]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f74:	60d3      	str	r3, [r2, #12]
        xControlAction.xJerk.fFloat = control_cmd_msg_.longitudinal.jerk;
 8001f76:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8001f7a:	4a57      	ldr	r2, [pc, #348]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f7c:	6113      	str	r3, [r2, #16]
        xControlAction.ucControlMode = AUTOWARE;
 8001f7e:	4b56      	ldr	r3, [pc, #344]	@ (80020d8 <StartMicroAutoware+0x628>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	751a      	strb	r2, [r3, #20]
        osMutexRelease(MutexControlActionHandle);
 8001f84:	4b53      	ldr	r3, [pc, #332]	@ (80020d4 <StartMicroAutoware+0x624>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00c faeb 	bl	800e564 <osMutexRelease>

        osThreadFlagsSet(TaskControleHandle, DATA_UPDATED_FLAG);
 8001f8e:	4b53      	ldr	r3, [pc, #332]	@ (80020dc <StartMicroAutoware+0x62c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00c f908 	bl	800e1ac <osThreadFlagsSet>
      }

    }

    // WAIT for flag to sync xControlSignal update
    uiFlags = osThreadFlagsGet();
 8001f9c:	f00c f954 	bl	800e248 <osThreadFlagsGet>
 8001fa0:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
    uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_SIGNAL);
 8001fa4:	226e      	movs	r2, #110	@ 0x6e
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fac:	f00c f96d 	bl	800e28a <osThreadFlagsWait>
 8001fb0:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c

    // Timeout Error
    if(osFlagsErrorTimeout == uiFlags)
 8001fb4:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001fb8:	f113 0f02 	cmn.w	r3, #2
 8001fbc:	d07e      	beq.n	80020bc <StartMicroAutoware+0x60c>
    {

    }

    // xControlSignal updated
    else if(CHECK_FLAG(DATA_UPDATED_FLAG, uiFlags))
 8001fbe:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d078      	beq.n	80020bc <StartMicroAutoware+0x60c>
 8001fca:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db74      	blt.n	80020bc <StartMicroAutoware+0x60c>
    {
      // Assembling microAutoware msgs
      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001fd2:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <StartMicroAutoware+0x630>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00c fa77 	bl	800e4ce <osMutexAcquire>

      // vehicle_twist_msg_ data

      rosidl_runtime_c__String xFrameId;
      char cFrame[10] = "base_link";
 8001fe0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001fe4:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8001fe8:	4a3e      	ldr	r2, [pc, #248]	@ (80020e4 <StartMicroAutoware+0x634>)
 8001fea:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fec:	c303      	stmia	r3!, {r0, r1}
 8001fee:	801a      	strh	r2, [r3, #0]
      xFrameId.data = cFrame;
 8001ff0:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ff4:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001ff8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001ffc:	601a      	str	r2, [r3, #0]
      xFrameId.size = 9;
 8001ffe:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002002:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002006:	2209      	movs	r2, #9
 8002008:	605a      	str	r2, [r3, #4]
      xFrameId.capacity = 9;
 800200a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800200e:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8002012:	2209      	movs	r2, #9
 8002014:	609a      	str	r2, [r3, #8]

      vehicle_twist_msg_.header.stamp = clock_msg_.clock;
 8002016:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800201a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800201e:	461a      	mov	r2, r3
 8002020:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002024:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002028:	e882 0003 	stmia.w	r2, {r0, r1}
      vehicle_twist_msg_.header.frame_id = xFrameId;
 800202c:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002030:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002034:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8002038:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 800203c:	3308      	adds	r3, #8
 800203e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      vehicle_twist_msg_.heading_rate = xControlSignal.fHeadingRate;
 8002044:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <StartMicroAutoware+0x638>)
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800204c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002050:	61da      	str	r2, [r3, #28]
      vehicle_twist_msg_.lateral_velocity = xControlSignal.fLatSpeed;
 8002052:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <StartMicroAutoware+0x638>)
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800205a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800205e:	619a      	str	r2, [r3, #24]
      vehicle_twist_msg_.longitudinal_velocity = xControlSignal.fLongSpeed;
 8002060:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <StartMicroAutoware+0x638>)
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002068:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800206c:	615a      	str	r2, [r3, #20]

      // steering_status_msg_ data
      steering_status_msg_.stamp = clock_msg_.clock;
 800206e:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8002072:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002076:	461a      	mov	r2, r3
 8002078:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800207c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002080:	e882 0003 	stmia.w	r2, {r0, r1}
      steering_status_msg_.steering_tire_angle = xControlSignal.fSteeringStatus;
 8002084:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <StartMicroAutoware+0x638>)
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800208c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002090:	609a      	str	r2, [r3, #8]

      osMutexRelease(MutexControlSignalHandle);
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <StartMicroAutoware+0x630>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f00c fa64 	bl	800e564 <osMutexRelease>

      // Publishing in Autoware topics
      rcl_publish(&vehicle_twist_pub_, &vehicle_twist_msg_, NULL);
 800209c:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 80020a0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80020a4:	2200      	movs	r2, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f012 f9b0 	bl	801440c <rcl_publish>
      rcl_publish(&steering_status_pub_, &steering_status_msg_, NULL);
 80020ac:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80020b0:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 80020b4:	2200      	movs	r2, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f012 f9a8 	bl	801440c <rcl_publish>
    }

    // Reseting subscribers flags
    ucSubscribersRecieved = 0;
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <StartMicroAutoware+0x620>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
    rmw_uros_sync_session(TIMEOUT_TS_SYNC);
 80020c2:	e679      	b.n	8001db8 <StartMicroAutoware+0x308>
 80020c4:	f3af 8000 	nop.w
 80020c8:	33333333 	.word	0x33333333
 80020cc:	3ff33333 	.word	0x3ff33333
 80020d0:	240329ea 	.word	0x240329ea
 80020d4:	24032974 	.word	0x24032974
 80020d8:	24032988 	.word	0x24032988
 80020dc:	24032968 	.word	0x24032968
 80020e0:	24032970 	.word	0x24032970
 80020e4:	0802341c 	.word	0x0802341c
 80020e8:	240329a0 	.word	0x240329a0

080020ec <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <microros_allocate+0x3c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <microros_allocate+0x3c>)
 8002104:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <microros_allocate+0x40>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <microros_allocate+0x40>)
 8002114:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe fc46 	bl	80009a8 <pvPortMallocMicroROS>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	240329ec 	.word	0x240329ec
 800212c:	240329f0 	.word	0x240329f0

08002130 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00c      	beq.n	800215a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7fe fd55 	bl	8000bf0 <getBlockSize>
 8002146:	4603      	mov	r3, r0
 8002148:	4a06      	ldr	r2, [pc, #24]	@ (8002164 <microros_deallocate+0x34>)
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	461a      	mov	r2, r3
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <microros_deallocate+0x34>)
 8002152:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fcef 	bl	8000b38 <vPortFreeMicroROS>
  }
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	240329f0 	.word	0x240329f0

08002168 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002174:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <microros_reallocate+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4413      	add	r3, r2
 800217e:	461a      	mov	r2, r3
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <microros_reallocate+0x64>)
 8002182:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <microros_reallocate+0x68>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	461a      	mov	r2, r3
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <microros_reallocate+0x68>)
 8002192:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d104      	bne.n	80021a4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800219a:	68b8      	ldr	r0, [r7, #8]
 800219c:	f7fe fc04 	bl	80009a8 <pvPortMallocMicroROS>
 80021a0:	4603      	mov	r3, r0
 80021a2:	e00e      	b.n	80021c2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7fe fd23 	bl	8000bf0 <getBlockSize>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a08      	ldr	r2, [pc, #32]	@ (80021d0 <microros_reallocate+0x68>)
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <microros_reallocate+0x68>)
 80021b6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f7fe fd36 	bl	8000c2c <pvPortReallocMicroROS>
 80021c0:	4603      	mov	r3, r0
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	240329ec 	.word	0x240329ec
 80021d0:	240329f0 	.word	0x240329f0

080021d4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	4a0c      	ldr	r2, [pc, #48]	@ (800221c <microros_zero_allocate+0x48>)
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <microros_zero_allocate+0x48>)
 80021f2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	4a08      	ldr	r2, [pc, #32]	@ (8002220 <microros_zero_allocate+0x4c>)
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4413      	add	r3, r2
 8002202:	461a      	mov	r2, r3
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <microros_zero_allocate+0x4c>)
 8002206:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7fe fd3b 	bl	8000c86 <pvPortCallocMicroROS>
 8002210:	4603      	mov	r3, r0
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	240329ec 	.word	0x240329ec
 8002220:	240329f0 	.word	0x240329f0
 8002224:	00000000 	.word	0x00000000

08002228 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800223a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800223e:	a320      	add	r3, pc, #128	@ (adr r3, 80022c0 <UTILS_NanosecondsToTimespec+0x98>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe f8b4 	bl	80003b0 <__aeabi_ldivmod>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002256:	a31a      	add	r3, pc, #104	@ (adr r3, 80022c0 <UTILS_NanosecondsToTimespec+0x98>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe f8a8 	bl	80003b0 <__aeabi_ldivmod>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	da20      	bge.n	80022ae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a11      	ldr	r2, [pc, #68]	@ (80022b8 <UTILS_NanosecondsToTimespec+0x90>)
 8002272:	fb82 1203 	smull	r1, r2, r2, r3
 8002276:	1712      	asrs	r2, r2, #28
 8002278:	17db      	asrs	r3, r3, #31
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	6979      	ldr	r1, [r7, #20]
 8002288:	17c8      	asrs	r0, r1, #31
 800228a:	460c      	mov	r4, r1
 800228c:	4605      	mov	r5, r0
 800228e:	ebb2 0804 	subs.w	r8, r2, r4
 8002292:	eb63 0905 	sbc.w	r9, r3, r5
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4906      	ldr	r1, [pc, #24]	@ (80022bc <UTILS_NanosecondsToTimespec+0x94>)
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]
    }
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022b8:	44b82fa1 	.word	0x44b82fa1
 80022bc:	3b9aca00 	.word	0x3b9aca00
 80022c0:	3b9aca00 	.word	0x3b9aca00
 80022c4:	00000000 	.word	0x00000000

080022c8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b08e      	sub	sp, #56	@ 0x38
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80022d2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022d8:	2300      	movs	r3, #0
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80022ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ee:	4618      	mov	r0, r3
 80022f0:	f00d fe7c 	bl	800ffec <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	17da      	asrs	r2, r3, #31
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	61fa      	str	r2, [r7, #28]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	69b9      	ldr	r1, [r7, #24]
 8002306:	000b      	movs	r3, r1
 8002308:	2200      	movs	r2, #0
 800230a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800230e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002310:	2200      	movs	r2, #0
 8002312:	461c      	mov	r4, r3
 8002314:	4615      	mov	r5, r2
 8002316:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800231a:	1911      	adds	r1, r2, r4
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	416b      	adcs	r3, r5
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002326:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800232a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	f04f 0500 	mov.w	r5, #0
 800233a:	015d      	lsls	r5, r3, #5
 800233c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002340:	0154      	lsls	r4, r2, #5
 8002342:	4622      	mov	r2, r4
 8002344:	462b      	mov	r3, r5
 8002346:	ebb2 0800 	subs.w	r8, r2, r0
 800234a:	eb63 0901 	sbc.w	r9, r3, r1
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800235a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800235e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002362:	4690      	mov	r8, r2
 8002364:	4699      	mov	r9, r3
 8002366:	eb18 0a00 	adds.w	sl, r8, r0
 800236a:	eb49 0b01 	adc.w	fp, r9, r1
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800237a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800237e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002382:	ebb2 040a 	subs.w	r4, r2, sl
 8002386:	603c      	str	r4, [r7, #0]
 8002388:	eb63 030b 	sbc.w	r3, r3, fp
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4623      	mov	r3, r4
 8002394:	181b      	adds	r3, r3, r0
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	462b      	mov	r3, r5
 800239a:	eb41 0303 	adc.w	r3, r1, r3
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023a6:	f7ff ff3f 	bl	8002228 <UTILS_NanosecondsToTimespec>

    return 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	3738      	adds	r7, #56	@ 0x38
 80023b0:	46bd      	mov	sp, r7
 80023b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_MspInit+0x38>)
 80023c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <HAL_MspInit+0x38>)
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_MspInit+0x38>)
 80023d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	210f      	movs	r1, #15
 80023e0:	f06f 0001 	mvn.w	r0, #1
 80023e4:	f002 fc6c 	bl	8004cc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	58024400 	.word	0x58024400

080023f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b090      	sub	sp, #64	@ 0x40
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	d827      	bhi.n	8002452 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002402:	2200      	movs	r2, #0
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	2036      	movs	r0, #54	@ 0x36
 8002408:	f002 fc5a 	bl	8004cc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800240c:	2036      	movs	r0, #54	@ 0x36
 800240e:	f002 fc71 	bl	8004cf4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002412:	4a29      	ldr	r2, [pc, #164]	@ (80024b8 <HAL_InitTick+0xc4>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002418:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <HAL_InitTick+0xc8>)
 800241a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800241e:	4a27      	ldr	r2, [pc, #156]	@ (80024bc <HAL_InitTick+0xc8>)
 8002420:	f043 0310 	orr.w	r3, r3, #16
 8002424:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002428:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_InitTick+0xc8>)
 800242a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002436:	f107 0210 	add.w	r2, r7, #16
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f006 fcb1 	bl	8008da8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800244a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <HAL_InitTick+0x6a>
 8002450:	e001      	b.n	8002456 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e02b      	b.n	80024ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002456:	f006 fc7b 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800245a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800245c:	e004      	b.n	8002468 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800245e:	f006 fc77 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 8002462:	4603      	mov	r3, r0
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246a:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <HAL_InitTick+0xcc>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	0c9b      	lsrs	r3, r3, #18
 8002472:	3b01      	subs	r3, #1
 8002474:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002476:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_InitTick+0xd0>)
 8002478:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <HAL_InitTick+0xd4>)
 800247a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_InitTick+0xd0>)
 800247e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002482:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002484:	4a0f      	ldr	r2, [pc, #60]	@ (80024c4 <HAL_InitTick+0xd0>)
 8002486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002488:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <HAL_InitTick+0xd0>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <HAL_InitTick+0xd0>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002496:	480b      	ldr	r0, [pc, #44]	@ (80024c4 <HAL_InitTick+0xd0>)
 8002498:	f009 f9c6 	bl	800b828 <HAL_TIM_Base_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024a2:	4808      	ldr	r0, [pc, #32]	@ (80024c4 <HAL_InitTick+0xd0>)
 80024a4:	f009 fa22 	bl	800b8ec <HAL_TIM_Base_Start_IT>
 80024a8:	4603      	mov	r3, r0
 80024aa:	e000      	b.n	80024ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3740      	adds	r7, #64	@ 0x40
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2400000c 	.word	0x2400000c
 80024bc:	58024400 	.word	0x58024400
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	240329f4 	.word	0x240329f4
 80024c8:	40001000 	.word	0x40001000

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <NMI_Handler+0x4>

080024d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <HardFault_Handler+0x4>

080024dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <MemManage_Handler+0x4>

080024e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <BusFault_Handler+0x4>

080024ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <UsageFault_Handler+0x4>

080024f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002508:	4802      	ldr	r0, [pc, #8]	@ (8002514 <DMA1_Stream0_IRQHandler+0x10>)
 800250a:	f003 ff2b 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	24032c60 	.word	0x24032c60

08002518 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <DMA1_Stream1_IRQHandler+0x10>)
 800251e:	f003 ff21 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24032cd8 	.word	0x24032cd8

0800252c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <USART2_IRQHandler+0x10>)
 8002532:	f009 fdf9 	bl	800c128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	24032a48 	.word	0x24032a48

08002540 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <USART3_IRQHandler+0x10>)
 8002546:	f009 fdef 	bl	800c128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	24032adc 	.word	0x24032adc

08002554 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8002558:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800255c:	f005 fbe9 	bl	8007d32 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <TIM6_DAC_IRQHandler+0x10>)
 800256a:	f009 fa37 	bl	800b9dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	240329f4 	.word	0x240329f4

08002578 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800257c:	4802      	ldr	r0, [pc, #8]	@ (8002588 <DMA2_Stream1_IRQHandler+0x10>)
 800257e:	f003 fef1 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	24032b70 	.word	0x24032b70

0800258c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002590:	4802      	ldr	r0, [pc, #8]	@ (800259c <DMA2_Stream2_IRQHandler+0x10>)
 8002592:	f003 fee7 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	24032be8 	.word	0x24032be8

080025a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return 1;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_kill>:

int _kill(int pid, int sig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ba:	f01f ff73 	bl	80224a4 <__errno>
 80025be:	4603      	mov	r3, r0
 80025c0:	2216      	movs	r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
  return -1;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_exit>:

void _exit (int status)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ffe7 	bl	80025b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025e2:	bf00      	nop
 80025e4:	e7fd      	b.n	80025e2 <_exit+0x12>

080025e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e00a      	b.n	800260e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025f8:	f3af 8000 	nop.w
 80025fc:	4601      	mov	r1, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	60ba      	str	r2, [r7, #8]
 8002604:	b2ca      	uxtb	r2, r1
 8002606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	dbf0      	blt.n	80025f8 <_read+0x12>
  }

  return len;
 8002616:	687b      	ldr	r3, [r7, #4]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e009      	b.n	8002646 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	60ba      	str	r2, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	dbf1      	blt.n	8002632 <_write+0x12>
  }
  return len;
 800264e:	687b      	ldr	r3, [r7, #4]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <_close>:

int _close(int file)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002680:	605a      	str	r2, [r3, #4]
  return 0;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_isatty>:

int _isatty(int file)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c8:	4a14      	ldr	r2, [pc, #80]	@ (800271c <_sbrk+0x5c>)
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <_sbrk+0x60>)
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d4:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <_sbrk+0x64>)
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <_sbrk+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d207      	bcs.n	8002700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f0:	f01f fed8 	bl	80224a4 <__errno>
 80026f4:	4603      	mov	r3, r0
 80026f6:	220c      	movs	r2, #12
 80026f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026fe:	e009      	b.n	8002714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	4a05      	ldr	r2, [pc, #20]	@ (8002724 <_sbrk+0x64>)
 8002710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	24080000 	.word	0x24080000
 8002720:	00000400 	.word	0x00000400
 8002724:	24032a44 	.word	0x24032a44
 8002728:	240696f0 	.word	0x240696f0

0800272c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <SystemInit+0xe4>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	4a36      	ldr	r2, [pc, #216]	@ (8002810 <SystemInit+0xe4>)
 8002738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002740:	4b34      	ldr	r3, [pc, #208]	@ (8002814 <SystemInit+0xe8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	2b06      	cmp	r3, #6
 800274a:	d807      	bhi.n	800275c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800274c:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <SystemInit+0xe8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <SystemInit+0xe8>)
 8002756:	f043 0307 	orr.w	r3, r3, #7
 800275a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800275c:	4b2e      	ldr	r3, [pc, #184]	@ (8002818 <SystemInit+0xec>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2d      	ldr	r2, [pc, #180]	@ (8002818 <SystemInit+0xec>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <SystemInit+0xec>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800276e:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <SystemInit+0xec>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4929      	ldr	r1, [pc, #164]	@ (8002818 <SystemInit+0xec>)
 8002774:	4b29      	ldr	r3, [pc, #164]	@ (800281c <SystemInit+0xf0>)
 8002776:	4013      	ands	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800277a:	4b26      	ldr	r3, [pc, #152]	@ (8002814 <SystemInit+0xe8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002786:	4b23      	ldr	r3, [pc, #140]	@ (8002814 <SystemInit+0xe8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 030f 	bic.w	r3, r3, #15
 800278e:	4a21      	ldr	r2, [pc, #132]	@ (8002814 <SystemInit+0xe8>)
 8002790:	f043 0307 	orr.w	r3, r3, #7
 8002794:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <SystemInit+0xec>)
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800279c:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <SystemInit+0xec>)
 800279e:	2200      	movs	r2, #0
 80027a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <SystemInit+0xec>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <SystemInit+0xec>)
 80027aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <SystemInit+0xf4>)
 80027ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <SystemInit+0xec>)
 80027b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <SystemInit+0xf8>)
 80027b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027b4:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <SystemInit+0xec>)
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <SystemInit+0xfc>)
 80027b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027ba:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <SystemInit+0xec>)
 80027bc:	2200      	movs	r2, #0
 80027be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027c0:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <SystemInit+0xec>)
 80027c2:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <SystemInit+0xfc>)
 80027c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027c6:	4b14      	ldr	r3, [pc, #80]	@ (8002818 <SystemInit+0xec>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <SystemInit+0xec>)
 80027ce:	4a16      	ldr	r2, [pc, #88]	@ (8002828 <SystemInit+0xfc>)
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027d2:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <SystemInit+0xec>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <SystemInit+0xec>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002818 <SystemInit+0xec>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <SystemInit+0xec>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <SystemInit+0x100>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <SystemInit+0x104>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027f6:	d202      	bcs.n	80027fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <SystemInit+0x108>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <SystemInit+0x10c>)
 8002800:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002804:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00
 8002814:	52002000 	.word	0x52002000
 8002818:	58024400 	.word	0x58024400
 800281c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002820:	02020200 	.word	0x02020200
 8002824:	01ff0000 	.word	0x01ff0000
 8002828:	01010280 	.word	0x01010280
 800282c:	5c001000 	.word	0x5c001000
 8002830:	ffff0000 	.word	0xffff0000
 8002834:	51008108 	.word	0x51008108
 8002838:	52004000 	.word	0x52004000

0800283c <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void * argument)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b099      	sub	sp, #100	@ 0x64
 8002840:	af04      	add	r7, sp, #16
 8002842:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 8002844:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8002848:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned int uiXMin = 1057;
 800284a:	f240 4321 	movw	r3, #1057	@ 0x421
 800284e:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMax = 65535;
 8002850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002854:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiY0   = 33580;
 8002856:	f248 332c 	movw	r3, #33580	@ 0x832c
 800285a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiYMin = 1062;
 800285c:	f240 4326 	movw	r3, #1062	@ 0x426
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMax = 65535;
 8002862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34

  // Return flags
  unsigned int uiFlags = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	633b      	str	r3, [r7, #48]	@ 0x30

  // Deadline lost counter for control command msg
  unsigned char ucNumberOfLostMessageCtlCmd = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

  // Deadline lost counter for status msg
  unsigned char ucNumberOfLostMessageStatus = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8002878:	2216      	movs	r2, #22
 800287a:	49b8      	ldr	r1, [pc, #736]	@ (8002b5c <StartTaskControle+0x320>)
 800287c:	48b8      	ldr	r0, [pc, #736]	@ (8002b60 <StartTaskControle+0x324>)
 800287e:	f009 fb71 	bl	800bf64 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL;
 8002882:	2304      	movs	r3, #4
 8002884:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  
  uiFlags = osThreadFlagsGet();
 8002888:	f00b fcde 	bl	800e248 <osThreadFlagsGet>
 800288c:	6338      	str	r0, [r7, #48]	@ 0x30
  uiFlags = osThreadFlagsWait(MICRO_ROS_AGENT_ONLINE_FLAG, osFlagsWaitAny, 1000 * 20); // Wait 20 seconds for uROS init
 800288e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002892:	2100      	movs	r1, #0
 8002894:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002898:	f00b fcf7 	bl	800e28a <osThreadFlagsWait>
 800289c:	6338      	str	r0, [r7, #48]	@ 0x30

  if(osFlagsErrorTimeout == uiFlags)
 800289e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a0:	f113 0f02 	cmn.w	r3, #2
 80028a4:	d102      	bne.n	80028ac <StartTaskControle+0x70>
  {
    ucControlMode = MANUAL;
 80028a6:	2304      	movs	r3, #4
 80028a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  // Task loop
  for(;;)
  {

    // Looking fot operation mode change by Autoware -- START
	uiFlags = osThreadFlagsGet();
 80028ac:	f00b fccc 	bl	800e248 <osThreadFlagsGet>
 80028b0:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG, osFlagsWaitAny, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2011      	movs	r0, #17
 80028b8:	f00b fce7 	bl	800e28a <osThreadFlagsWait>
 80028bc:	6338      	str	r0, [r7, #48]	@ 0x30

    if(CHECK_FLAG(TO_AUTOWARE_MODE_FLAG, uiFlags))
 80028be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <StartTaskControle+0x9a>
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db03      	blt.n	80028d6 <StartTaskControle+0x9a>
    {
      ucControlMode = AUTOWARE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80028d4:	e016      	b.n	8002904 <StartTaskControle+0xc8>
    }
    else if(CHECK_FLAG(TO_MANUAL_MODE_FLAG, uiFlags))
 80028d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <StartTaskControle+0xb2>
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db03      	blt.n	80028ee <StartTaskControle+0xb2>
    {
      ucControlMode = MANUAL;
 80028e6:	2304      	movs	r3, #4
 80028e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80028ec:	e00a      	b.n	8002904 <StartTaskControle+0xc8>
    }
    else if(CHECK_FLAG((TO_AUTOWARE_MODE_FLAG | TO_MANUAL_MODE_FLAG), uiFlags))
 80028ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f0:	f003 0311 	and.w	r3, r3, #17
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	d105      	bne.n	8002904 <StartTaskControle+0xc8>
 80028f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	db02      	blt.n	8002904 <StartTaskControle+0xc8>
    {
      ucControlMode = MANUAL;
 80028fe:	2304      	movs	r3, #4
 8002900:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    // Looking for operation mode change by Autoware -- END

    // Looking for operation mode change by JoySW -- START
    uiFlags = osThreadFlagsGet();
 8002904:	f00b fca0 	bl	800e248 <osThreadFlagsGet>
 8002908:	6338      	str	r0, [r7, #48]	@ 0x30
    uiFlags = osThreadFlagsWait(JOYSW_FLAG, osFlagsWaitAll, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2101      	movs	r1, #1
 800290e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002912:	f00b fcba 	bl	800e28a <osThreadFlagsWait>
 8002916:	6338      	str	r0, [r7, #48]	@ 0x30

    if(CHECK_FLAG(JOYSW_FLAG, uiFlags))
 8002918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01d      	beq.n	800295e <StartTaskControle+0x122>
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	2b00      	cmp	r3, #0
 8002926:	db1a      	blt.n	800295e <StartTaskControle+0x122>
    {
      if(AUTOWARE == ucControlMode)
 8002928:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800292c:	2b01      	cmp	r3, #1
 800292e:	d109      	bne.n	8002944 <StartTaskControle+0x108>
      {
        ucControlMode = MANUAL;
 8002930:	2304      	movs	r3, #4
 8002932:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8002936:	4b8b      	ldr	r3, [pc, #556]	@ (8002b64 <StartTaskControle+0x328>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2110      	movs	r1, #16
 800293c:	4618      	mov	r0, r3
 800293e:	f00b fc35 	bl	800e1ac <osThreadFlagsSet>
 8002942:	e00c      	b.n	800295e <StartTaskControle+0x122>
      }
      else if(MANUAL == ucControlMode)
 8002944:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002948:	2b04      	cmp	r3, #4
 800294a:	d108      	bne.n	800295e <StartTaskControle+0x122>
      {
        ucControlMode = AUTOWARE;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        osThreadFlagsSet(TaskMicroAutowaHandle, TO_AUTOWARE_MODE_FLAG);
 8002952:	4b84      	ldr	r3, [pc, #528]	@ (8002b64 <StartTaskControle+0x328>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f00b fc27 	bl	800e1ac <osThreadFlagsSet>
      }
    }
    // Looking for operation mode change by JoySW -- END

    // Autonomous mode (AUTOWARE) routine -- START
    if(AUTOWARE == ucControlMode)
 800295e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002962:	2b01      	cmp	r3, #1
 8002964:	f040 80b2 	bne.w	8002acc <StartTaskControle+0x290>
    {
      // Setting driving mode lights
	  vDrivingModeLights(ucControlMode);
 8002968:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fd1d 	bl	80033ac <vDrivingModeLights>

      // WAIT for flag to sync xControlAction update
  	  uiFlags = osThreadFlagsGet();
 8002972:	f00b fc69 	bl	800e248 <osThreadFlagsGet>
 8002976:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(DATA_UPDATED_FLAG, osFlagsWaitAll, TIMEOUT_GET_CONTROL_ACTION);
 8002978:	2242      	movs	r2, #66	@ 0x42
 800297a:	2101      	movs	r1, #1
 800297c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002980:	f00b fc83 	bl	800e28a <osThreadFlagsWait>
 8002984:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
      if(osFlagsErrorTimeout == uiFlags)
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	f113 0f02 	cmn.w	r3, #2
 800298c:	d11a      	bne.n	80029c4 <StartTaskControle+0x188>
      {
    	// Increment the lost data counter
    	ucNumberOfLostMessageCtlCmd++;
 800298e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002992:	3301      	adds	r3, #1
 8002994:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    	// Check if the max of data lost was got
    	if(ucNumberOfLostMessageCtlCmd >= MAX_OF_LOST_MESSAGES) // If yes, change to manual
 8002998:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800299c:	2b02      	cmp	r3, #2
 800299e:	d909      	bls.n	80029b4 <StartTaskControle+0x178>
    	{
		  ucControlMode = MANUAL;
 80029a0:	2304      	movs	r3, #4
 80029a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		  osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 80029a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002b64 <StartTaskControle+0x328>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2110      	movs	r1, #16
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00b fbfd 	bl	800e1ac <osThreadFlagsSet>
 80029b2:	e08b      	b.n	8002acc <StartTaskControle+0x290>
    	}
    	else // If not, sends the same command again
    	{
          HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	221e      	movs	r2, #30
 80029ba:	4619      	mov	r1, r3
 80029bc:	4868      	ldr	r0, [pc, #416]	@ (8002b60 <StartTaskControle+0x324>)
 80029be:	f009 fa51 	bl	800be64 <HAL_UART_Transmit_DMA>
 80029c2:	e083      	b.n	8002acc <StartTaskControle+0x290>
    	}
      }
      else if(CHECK_FLAG(DATA_UPDATED_FLAG, uiFlags))
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d07e      	beq.n	8002acc <StartTaskControle+0x290>
 80029ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db7b      	blt.n	8002acc <StartTaskControle+0x290>
      {
	    ucNumberOfLostMessageCtlCmd = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    	// Convering control command to array of bytes
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 80029da:	4b63      	ldr	r3, [pc, #396]	@ (8002b68 <StartTaskControle+0x32c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029e2:	4618      	mov	r0, r3
 80029e4:	f00b fd73 	bl	800e4ce <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80029e8:	4b60      	ldr	r3, [pc, #384]	@ (8002b6c <StartTaskControle+0x330>)
 80029ea:	f107 0208 	add.w	r2, r7, #8
 80029ee:	9202      	str	r2, [sp, #8]
 80029f0:	466c      	mov	r4, sp
 80029f2:	f103 0210 	add.w	r2, r3, #16
 80029f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80029fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a00:	f000 fc50 	bl	80032a4 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 8002a04:	4b58      	ldr	r3, [pc, #352]	@ (8002b68 <StartTaskControle+0x32c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f00b fdab 	bl	800e564 <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	221e      	movs	r2, #30
 8002a14:	4619      	mov	r1, r3
 8002a16:	4852      	ldr	r0, [pc, #328]	@ (8002b60 <StartTaskControle+0x324>)
 8002a18:	f009 fa24 	bl	800be64 <HAL_UART_Transmit_DMA>

        // Wait CARLA full msg xVehicleStatusRx
        uiFlags = osThreadFlagsGet();
 8002a1c:	f00b fc14 	bl	800e248 <osThreadFlagsGet>
 8002a20:	6338      	str	r0, [r7, #48]	@ 0x30
        uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002a22:	2264      	movs	r2, #100	@ 0x64
 8002a24:	2101      	movs	r1, #1
 8002a26:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002a2a:	f00b fc2e 	bl	800e28a <osThreadFlagsWait>
 8002a2e:	6338      	str	r0, [r7, #48]	@ 0x30

        // Timeout error
        if(osFlagsErrorTimeout == uiFlags)
 8002a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a32:	f113 0f02 	cmn.w	r3, #2
 8002a36:	d11b      	bne.n	8002a70 <StartTaskControle+0x234>
        {
          // Increment the lost data counter
          ucNumberOfLostMessageStatus++;
 8002a38:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

          // Check if the max of data lost was got
          if(ucNumberOfLostMessageStatus >= MAX_OF_LOST_MESSAGES) // If yes, change to manual
 8002a42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d90a      	bls.n	8002a60 <StartTaskControle+0x224>
          {
    		ucControlMode = EMERGENCY;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    		osThreadFlagsSet(TaskMicroAutowaHandle, TO_EMERGENCY_MODE_FLAG);
 8002a50:	4b44      	ldr	r3, [pc, #272]	@ (8002b64 <StartTaskControle+0x328>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00b fba7 	bl	800e1ac <osThreadFlagsSet>
 8002a5e:	e035      	b.n	8002acc <StartTaskControle+0x290>
          }
          else // If not, sends the same command again
          {
            osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002a60:	4b40      	ldr	r3, [pc, #256]	@ (8002b64 <StartTaskControle+0x328>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00b fb9f 	bl	800e1ac <osThreadFlagsSet>
 8002a6e:	e02d      	b.n	8002acc <StartTaskControle+0x290>
          }
        }
        else if(CHECK_FLAG(UART_NEW_DATA_FLAG, uiFlags))
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d028      	beq.n	8002acc <StartTaskControle+0x290>
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db25      	blt.n	8002acc <StartTaskControle+0x290>
        {
    	  ucNumberOfLostMessageStatus = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    	  osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002a86:	4b3a      	ldr	r3, [pc, #232]	@ (8002b70 <StartTaskControle+0x334>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f00b fd1d 	bl	800e4ce <osMutexAcquire>

          xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002a94:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <StartTaskControle+0x338>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a37      	ldr	r2, [pc, #220]	@ (8002b78 <StartTaskControle+0x33c>)
 8002a9a:	6153      	str	r3, [r2, #20]
          xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002a9c:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <StartTaskControle+0x338>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a35      	ldr	r2, [pc, #212]	@ (8002b78 <StartTaskControle+0x33c>)
 8002aa2:	6193      	str	r3, [r2, #24]
          xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002aa4:	4b33      	ldr	r3, [pc, #204]	@ (8002b74 <StartTaskControle+0x338>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a33      	ldr	r2, [pc, #204]	@ (8002b78 <StartTaskControle+0x33c>)
 8002aaa:	61d3      	str	r3, [r2, #28]
          xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002aac:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <StartTaskControle+0x338>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a31      	ldr	r2, [pc, #196]	@ (8002b78 <StartTaskControle+0x33c>)
 8002ab2:	6213      	str	r3, [r2, #32]

          osMutexRelease(MutexControlSignalHandle);
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b70 <StartTaskControle+0x334>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00b fd53 	bl	800e564 <osMutexRelease>

          osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002abe:	4b29      	ldr	r3, [pc, #164]	@ (8002b64 <StartTaskControle+0x328>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f00b fb70 	bl	800e1ac <osThreadFlagsSet>
    }
    // Autonomous mode (AUTOWARE) routine -- END


    // Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 8002acc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	f040 80d8 	bne.w	8002c86 <StartTaskControle+0x44a>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002ad6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fc66 	bl	80033ac <vDrivingModeLights>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 8002ae0:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <StartTaskControle+0x340>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ae8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002aea:	f000 fb8d 	bl	8003208 <fGetJoyPostition>
 8002aee:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <StartTaskControle+0x340>)
 8002af4:	6858      	ldr	r0, [r3, #4]
 8002af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002afa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002afc:	f000 fb84 	bl	8003208 <fGetJoyPostition>
 8002b00:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      // Assembling xControlAction
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002b04:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <StartTaskControle+0x32c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f00b fcde 	bl	800e4ce <osMutexAcquire>
      xControlAction.xSteeringAngle.fFloat = -fJoyXAxis*MAX_STEERING_ANGLE;
 8002b12:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b16:	eef1 7a67 	vneg.f32	s15, s15
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <StartTaskControle+0x330>)
 8002b1c:	edc3 7a00 	vstr	s15, [r3]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <StartTaskControle+0x330>)
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 8002b28:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	dd01      	ble.n	8002b3a <StartTaskControle+0x2fe>
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	e001      	b.n	8002b3e <StartTaskControle+0x302>
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b6c <StartTaskControle+0x330>)
 8002b40:	6093      	str	r3, [r2, #8]
      xControlAction.xAcceleration.fFloat = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 8002b42:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	d519      	bpl.n	8002b84 <StartTaskControle+0x348>
 8002b50:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b54:	eef1 7a67 	vneg.f32	s15, s15
 8002b58:	e016      	b.n	8002b88 <StartTaskControle+0x34c>
 8002b5a:	bf00      	nop
 8002b5c:	240329d4 	.word	0x240329d4
 8002b60:	24032a48 	.word	0x24032a48
 8002b64:	2403296c 	.word	0x2403296c
 8002b68:	24032974 	.word	0x24032974
 8002b6c:	24032988 	.word	0x24032988
 8002b70:	24032970 	.word	0x24032970
 8002b74:	240329c4 	.word	0x240329c4
 8002b78:	240329a0 	.word	0x240329a0
 8002b7c:	2403297c 	.word	0x2403297c
 8002b80:	00000000 	.word	0x00000000
 8002b84:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8002b80 <StartTaskControle+0x344>
 8002b88:	4b6c      	ldr	r3, [pc, #432]	@ (8002d3c <StartTaskControle+0x500>)
 8002b8a:	edc3 7a03 	vstr	s15, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002b8e:	4b6b      	ldr	r3, [pc, #428]	@ (8002d3c <StartTaskControle+0x500>)
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = MANUAL;
 8002b96:	4b69      	ldr	r3, [pc, #420]	@ (8002d3c <StartTaskControle+0x500>)
 8002b98:	2204      	movs	r2, #4
 8002b9a:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002b9c:	4b67      	ldr	r3, [pc, #412]	@ (8002d3c <StartTaskControle+0x500>)
 8002b9e:	f107 0208 	add.w	r2, r7, #8
 8002ba2:	9202      	str	r2, [sp, #8]
 8002ba4:	466c      	mov	r4, sp
 8002ba6:	f103 0210 	add.w	r2, r3, #16
 8002baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bae:	e884 0003 	stmia.w	r4, {r0, r1}
 8002bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb4:	f000 fb76 	bl	80032a4 <vGetStringFromControlAction>

      osMutexRelease(MutexControlActionHandle);
 8002bb8:	4b61      	ldr	r3, [pc, #388]	@ (8002d40 <StartTaskControle+0x504>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00b fcd1 	bl	800e564 <osMutexRelease>

      // Send cTxMsgToCarla to CARLA
      HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002bc2:	f107 0308 	add.w	r3, r7, #8
 8002bc6:	221e      	movs	r2, #30
 8002bc8:	4619      	mov	r1, r3
 8002bca:	485e      	ldr	r0, [pc, #376]	@ (8002d44 <StartTaskControle+0x508>)
 8002bcc:	f009 f94a 	bl	800be64 <HAL_UART_Transmit_DMA>

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8002bd0:	f00b fb3a 	bl	800e248 <osThreadFlagsGet>
 8002bd4:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002bd6:	2264      	movs	r2, #100	@ 0x64
 8002bd8:	2101      	movs	r1, #1
 8002bda:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002bde:	f00b fb54 	bl	800e28a <osThreadFlagsWait>
 8002be2:	6338      	str	r0, [r7, #48]	@ 0x30

      // Timeout error
	  if(osFlagsErrorTimeout == uiFlags)
 8002be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be6:	f113 0f02 	cmn.w	r3, #2
 8002bea:	d11b      	bne.n	8002c24 <StartTaskControle+0x3e8>
	  {
		// Increment the lost data counter
		ucNumberOfLostMessageStatus++;
 8002bec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

		// Check if the max of data lost was got
		if(ucNumberOfLostMessageStatus >= MAX_OF_LOST_MESSAGES) // If yes, change to manual
 8002bf6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d90a      	bls.n	8002c14 <StartTaskControle+0x3d8>
		{
		ucControlMode = EMERGENCY;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		osThreadFlagsSet(TaskMicroAutowaHandle, TO_EMERGENCY_MODE_FLAG);
 8002c04:	4b50      	ldr	r3, [pc, #320]	@ (8002d48 <StartTaskControle+0x50c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f00b facd 	bl	800e1ac <osThreadFlagsSet>
 8002c12:	e035      	b.n	8002c80 <StartTaskControle+0x444>
		}
		else // If not, sends the same command again
		{
		  osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002c14:	4b4c      	ldr	r3, [pc, #304]	@ (8002d48 <StartTaskControle+0x50c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00b fac5 	bl	800e1ac <osThreadFlagsSet>
 8002c22:	e02d      	b.n	8002c80 <StartTaskControle+0x444>
		}
	  }
      else if(CHECK_FLAG(UART_NEW_DATA_FLAG, uiFlags))
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <StartTaskControle+0x444>
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db25      	blt.n	8002c80 <StartTaskControle+0x444>
	  {
	    ucNumberOfLostMessageStatus = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

	    // Assembling xControlSignal
	    osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8002c3a:	4b44      	ldr	r3, [pc, #272]	@ (8002d4c <StartTaskControle+0x510>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c42:	4618      	mov	r0, r3
 8002c44:	f00b fc43 	bl	800e4ce <osMutexAcquire>

	    xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8002c48:	4b41      	ldr	r3, [pc, #260]	@ (8002d50 <StartTaskControle+0x514>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a41      	ldr	r2, [pc, #260]	@ (8002d54 <StartTaskControle+0x518>)
 8002c4e:	6153      	str	r3, [r2, #20]
	    xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 8002c50:	4b3f      	ldr	r3, [pc, #252]	@ (8002d50 <StartTaskControle+0x514>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a3f      	ldr	r2, [pc, #252]	@ (8002d54 <StartTaskControle+0x518>)
 8002c56:	6193      	str	r3, [r2, #24]
	    xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8002c58:	4b3d      	ldr	r3, [pc, #244]	@ (8002d50 <StartTaskControle+0x514>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8002d54 <StartTaskControle+0x518>)
 8002c5e:	61d3      	str	r3, [r2, #28]
	    xControlSignal.fSteeringStatus = xVehicleStatus.xSteeringStatus.fFloat;
 8002c60:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <StartTaskControle+0x514>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a3b      	ldr	r2, [pc, #236]	@ (8002d54 <StartTaskControle+0x518>)
 8002c66:	6213      	str	r3, [r2, #32]

	    osMutexRelease(MutexControlSignalHandle);
 8002c68:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <StartTaskControle+0x510>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f00b fc79 	bl	800e564 <osMutexRelease>

	    osThreadFlagsSet(TaskMicroAutowaHandle, DATA_UPDATED_FLAG);
 8002c72:	4b35      	ldr	r3, [pc, #212]	@ (8002d48 <StartTaskControle+0x50c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f00b fa96 	bl	800e1ac <osThreadFlagsSet>
	  }
      // WAIT
      osDelay(MANUAL_CONTROL_TIME_COMMAND);
 8002c80:	203c      	movs	r0, #60	@ 0x3c
 8002c82:	f00b fb83 	bl	800e38c <osDelay>
    }
    // Manual mode (MANUAL) routine -- END

    // Emergency mode (EMERGENCY) routine -- START
    if(EMERGENCY == ucControlMode)
 8002c86:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f47f ae0e 	bne.w	80028ac <StartTaskControle+0x70>
    {
      // Setting driving mode lights
  	  vDrivingModeLights(ucControlMode);
 8002c90:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fb89 	bl	80033ac <vDrivingModeLights>
    
      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 8002c9a:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <StartTaskControle+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f00b fc13 	bl	800e4ce <osMutexAcquire>

      xControlAction.xSteeringAngle.fFloat = 0;
 8002ca8:	4b24      	ldr	r3, [pc, #144]	@ (8002d3c <StartTaskControle+0x500>)
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
      xControlAction.xSteeringVelocity.fFloat = 0;
 8002cb0:	4b22      	ldr	r3, [pc, #136]	@ (8002d3c <StartTaskControle+0x500>)
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]
      xControlAction.xSpeed.fFloat = 0;
 8002cb8:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <StartTaskControle+0x500>)
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
      xControlAction.xAcceleration.fFloat = 0;
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <StartTaskControle+0x500>)
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
      xControlAction.xJerk.fFloat = 0;
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <StartTaskControle+0x500>)
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
      xControlAction.ucControlMode = EMERGENCY;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <StartTaskControle+0x500>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	751a      	strb	r2, [r3, #20]
      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8002cd6:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <StartTaskControle+0x500>)
 8002cd8:	f107 0208 	add.w	r2, r7, #8
 8002cdc:	9202      	str	r2, [sp, #8]
 8002cde:	466c      	mov	r4, sp
 8002ce0:	f103 0210 	add.w	r2, r3, #16
 8002ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce8:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cee:	f000 fad9 	bl	80032a4 <vGetStringFromControlAction>

      // Try to stop the car whatever it takes

	  HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	221e      	movs	r2, #30
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4812      	ldr	r0, [pc, #72]	@ (8002d44 <StartTaskControle+0x508>)
 8002cfc:	f009 f8b2 	bl	800be64 <HAL_UART_Transmit_DMA>

      // Wait CARLA full msg xVehicleStatusRx
  	  uiFlags = osThreadFlagsGet();
 8002d00:	f00b faa2 	bl	800e248 <osThreadFlagsGet>
 8002d04:	6338      	str	r0, [r7, #48]	@ 0x30
      uiFlags = osThreadFlagsWait(UART_NEW_DATA_FLAG, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8002d06:	2264      	movs	r2, #100	@ 0x64
 8002d08:	2101      	movs	r1, #1
 8002d0a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002d0e:	f00b fabc 	bl	800e28a <osThreadFlagsWait>
 8002d12:	6338      	str	r0, [r7, #48]	@ 0x30

      if(CHECK_FLAG(UART_NEW_DATA_FLAG, uiFlags))
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f43f adc6 	beq.w	80028ac <StartTaskControle+0x70>
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f6ff adc2 	blt.w	80028ac <StartTaskControle+0x70>
      {
		  ucControlMode = MANUAL;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		  osThreadFlagsSet(TaskMicroAutowaHandle, TO_MANUAL_MODE_FLAG);
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <StartTaskControle+0x50c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2110      	movs	r1, #16
 8002d34:	4618      	mov	r0, r3
 8002d36:	f00b fa39 	bl	800e1ac <osThreadFlagsSet>
	uiFlags = osThreadFlagsGet();
 8002d3a:	e5b7      	b.n	80028ac <StartTaskControle+0x70>
 8002d3c:	24032988 	.word	0x24032988
 8002d40:	24032974 	.word	0x24032974
 8002d44:	24032a48 	.word	0x24032a48
 8002d48:	2403296c 	.word	0x2403296c
 8002d4c:	24032970 	.word	0x24032970
 8002d50:	240329c4 	.word	0x240329c4
 8002d54:	240329a0 	.word	0x240329a0

08002d58 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d5c:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d5e:	4a23      	ldr	r2, [pc, #140]	@ (8002dec <MX_USART2_UART_Init+0x94>)
 8002d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002d62:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d64:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d70:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d7e:	220c      	movs	r2, #12
 8002d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d82:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d88:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d9a:	4b13      	ldr	r3, [pc, #76]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002da0:	4811      	ldr	r0, [pc, #68]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002da2:	f009 f80f 	bl	800bdc4 <HAL_UART_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002dac:	f7fe fe7a 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db0:	2100      	movs	r1, #0
 8002db2:	480d      	ldr	r0, [pc, #52]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002db4:	f00a fffa 	bl	800ddac <HAL_UARTEx_SetTxFifoThreshold>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002dbe:	f7fe fe71 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4808      	ldr	r0, [pc, #32]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002dc6:	f00b f82f 	bl	800de28 <HAL_UARTEx_SetRxFifoThreshold>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002dd0:	f7fe fe68 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dd4:	4804      	ldr	r0, [pc, #16]	@ (8002de8 <MX_USART2_UART_Init+0x90>)
 8002dd6:	f00a ffb0 	bl	800dd3a <HAL_UARTEx_DisableFifoMode>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002de0:	f7fe fe60 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	24032a48 	.word	0x24032a48
 8002dec:	40004400 	.word	0x40004400

08002df0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002df4:	4b22      	ldr	r3, [pc, #136]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002df6:	4a23      	ldr	r2, [pc, #140]	@ (8002e84 <MX_USART3_UART_Init+0x94>)
 8002df8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002dfc:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002e00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e02:	4b1f      	ldr	r3, [pc, #124]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e08:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e14:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e16:	220c      	movs	r2, #12
 8002e18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1a:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e20:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e26:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e38:	4811      	ldr	r0, [pc, #68]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e3a:	f008 ffc3 	bl	800bdc4 <HAL_UART_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e44:	f7fe fe2e 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e48:	2100      	movs	r1, #0
 8002e4a:	480d      	ldr	r0, [pc, #52]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e4c:	f00a ffae 	bl	800ddac <HAL_UARTEx_SetTxFifoThreshold>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e56:	f7fe fe25 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4808      	ldr	r0, [pc, #32]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e5e:	f00a ffe3 	bl	800de28 <HAL_UARTEx_SetRxFifoThreshold>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e68:	f7fe fe1c 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e6c:	4804      	ldr	r0, [pc, #16]	@ (8002e80 <MX_USART3_UART_Init+0x90>)
 8002e6e:	f00a ff64 	bl	800dd3a <HAL_UARTEx_DisableFifoMode>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e78:	f7fe fe14 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	24032adc 	.word	0x24032adc
 8002e84:	40004800 	.word	0x40004800

08002e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b0be      	sub	sp, #248	@ 0xf8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ea0:	f107 0320 	add.w	r3, r7, #32
 8002ea4:	22c0      	movs	r2, #192	@ 0xc0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f01f fa11 	bl	80222d0 <memset>
  if(uartHandle->Instance==USART2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6a      	ldr	r2, [pc, #424]	@ (800305c <HAL_UART_MspInit+0x1d4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	f040 80e1 	bne.w	800307c <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002eba:	f04f 0202 	mov.w	r2, #2
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ecc:	f107 0320 	add.w	r3, r7, #32
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f005 ffab 	bl	8008e2c <HAL_RCCEx_PeriphCLKConfig>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8002edc:	f7fe fde2 	bl	8001aa4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee0:	4b5f      	ldr	r3, [pc, #380]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ef0:	4b5b      	ldr	r3, [pc, #364]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	4b58      	ldr	r3, [pc, #352]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f04:	4a56      	ldr	r2, [pc, #344]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f0e:	4b54      	ldr	r3, [pc, #336]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f1c:	4b50      	ldr	r3, [pc, #320]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f22:	4a4f      	ldr	r2, [pc, #316]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8003060 <HAL_UART_MspInit+0x1d8>)
 8002f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f52:	2307      	movs	r3, #7
 8002f54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4841      	ldr	r0, [pc, #260]	@ (8003064 <HAL_UART_MspInit+0x1dc>)
 8002f60:	f004 fd1e 	bl	80079a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f64:	2320      	movs	r3, #32
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f7c:	2307      	movs	r3, #7
 8002f7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f82:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4837      	ldr	r0, [pc, #220]	@ (8003068 <HAL_UART_MspInit+0x1e0>)
 8002f8a:	f004 fd09 	bl	80079a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8002f8e:	4b37      	ldr	r3, [pc, #220]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002f90:	4a37      	ldr	r2, [pc, #220]	@ (8003070 <HAL_UART_MspInit+0x1e8>)
 8002f92:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f94:	4b35      	ldr	r3, [pc, #212]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002f96:	222b      	movs	r2, #43	@ 0x2b
 8002f98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f9a:	4b34      	ldr	r3, [pc, #208]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa0:	4b32      	ldr	r3, [pc, #200]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fa6:	4b31      	ldr	r3, [pc, #196]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fae:	4b2f      	ldr	r3, [pc, #188]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002fba:	4b2c      	ldr	r3, [pc, #176]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fc2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002fc6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fc8:	4b28      	ldr	r3, [pc, #160]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fce:	4827      	ldr	r0, [pc, #156]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fd0:	f001 fe9e 	bl	8004d10 <HAL_DMA_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8002fda:	f7fe fd63 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002fe6:	4a21      	ldr	r2, [pc, #132]	@ (800306c <HAL_UART_MspInit+0x1e4>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8002fee:	4a22      	ldr	r2, [pc, #136]	@ (8003078 <HAL_UART_MspInit+0x1f0>)
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002ff2:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8002ff4:	222c      	movs	r2, #44	@ 0x2c
 8002ff6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8002ffa:	2240      	movs	r2, #64	@ 0x40
 8002ffc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8003006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800300a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800300c:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 800300e:	2200      	movs	r2, #0
 8003010:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003012:	4b18      	ldr	r3, [pc, #96]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003018:	4b16      	ldr	r3, [pc, #88]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8003020:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003024:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003026:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8003028:	2200      	movs	r2, #0
 800302a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800302c:	4811      	ldr	r0, [pc, #68]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 800302e:	f001 fe6f 	bl	8004d10 <HAL_DMA_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8003038:	f7fe fd34 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a0d      	ldr	r2, [pc, #52]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8003040:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003042:	4a0c      	ldr	r2, [pc, #48]	@ (8003074 <HAL_UART_MspInit+0x1ec>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003048:	2200      	movs	r2, #0
 800304a:	2105      	movs	r1, #5
 800304c:	2026      	movs	r0, #38	@ 0x26
 800304e:	f001 fe37 	bl	8004cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003052:	2026      	movs	r0, #38	@ 0x26
 8003054:	f001 fe4e 	bl	8004cf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003058:	e0c3      	b.n	80031e2 <HAL_UART_MspInit+0x35a>
 800305a:	bf00      	nop
 800305c:	40004400 	.word	0x40004400
 8003060:	58024400 	.word	0x58024400
 8003064:	58020000 	.word	0x58020000
 8003068:	58020c00 	.word	0x58020c00
 800306c:	24032b70 	.word	0x24032b70
 8003070:	40020428 	.word	0x40020428
 8003074:	24032be8 	.word	0x24032be8
 8003078:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5a      	ldr	r2, [pc, #360]	@ (80031ec <HAL_UART_MspInit+0x364>)
 8003082:	4293      	cmp	r3, r2
 8003084:	f040 80ad 	bne.w	80031e2 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003088:	f04f 0202 	mov.w	r2, #2
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800309a:	f107 0320 	add.w	r3, r7, #32
 800309e:	4618      	mov	r0, r3
 80030a0:	f005 fec4 	bl	8008e2c <HAL_RCCEx_PeriphCLKConfig>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_UART_MspInit+0x226>
      Error_Handler();
 80030aa:	f7fe fcfb 	bl	8001aa4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030ae:	4b50      	ldr	r3, [pc, #320]	@ (80031f0 <HAL_UART_MspInit+0x368>)
 80030b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030b4:	4a4e      	ldr	r2, [pc, #312]	@ (80031f0 <HAL_UART_MspInit+0x368>)
 80030b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030be:	4b4c      	ldr	r3, [pc, #304]	@ (80031f0 <HAL_UART_MspInit+0x368>)
 80030c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030cc:	4b48      	ldr	r3, [pc, #288]	@ (80031f0 <HAL_UART_MspInit+0x368>)
 80030ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030d2:	4a47      	ldr	r2, [pc, #284]	@ (80031f0 <HAL_UART_MspInit+0x368>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030dc:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <HAL_UART_MspInit+0x368>)
 80030de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80030ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003104:	2307      	movs	r3, #7
 8003106:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800310a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800310e:	4619      	mov	r1, r3
 8003110:	4838      	ldr	r0, [pc, #224]	@ (80031f4 <HAL_UART_MspInit+0x36c>)
 8003112:	f004 fc45 	bl	80079a0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003116:	4b38      	ldr	r3, [pc, #224]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 8003118:	4a38      	ldr	r2, [pc, #224]	@ (80031fc <HAL_UART_MspInit+0x374>)
 800311a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800311c:	4b36      	ldr	r3, [pc, #216]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 800311e:	222d      	movs	r2, #45	@ 0x2d
 8003120:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003122:	4b35      	ldr	r3, [pc, #212]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003128:	4b33      	ldr	r3, [pc, #204]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800312e:	4b32      	ldr	r3, [pc, #200]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 8003130:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003134:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003136:	4b30      	ldr	r3, [pc, #192]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800313c:	4b2e      	ldr	r3, [pc, #184]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 800313e:	2200      	movs	r2, #0
 8003140:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003142:	4b2d      	ldr	r3, [pc, #180]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 8003144:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003148:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800314a:	4b2b      	ldr	r3, [pc, #172]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 800314c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003150:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003152:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 8003154:	2200      	movs	r2, #0
 8003156:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003158:	4827      	ldr	r0, [pc, #156]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 800315a:	f001 fdd9 	bl	8004d10 <HAL_DMA_Init>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8003164:	f7fe fc9e 	bl	8001aa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a23      	ldr	r2, [pc, #140]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 800316c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003170:	4a21      	ldr	r2, [pc, #132]	@ (80031f8 <HAL_UART_MspInit+0x370>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003176:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <HAL_UART_MspInit+0x378>)
 8003178:	4a22      	ldr	r2, [pc, #136]	@ (8003204 <HAL_UART_MspInit+0x37c>)
 800317a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800317c:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <HAL_UART_MspInit+0x378>)
 800317e:	222e      	movs	r2, #46	@ 0x2e
 8003180:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003182:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <HAL_UART_MspInit+0x378>)
 8003184:	2240      	movs	r2, #64	@ 0x40
 8003186:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <HAL_UART_MspInit+0x378>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <HAL_UART_MspInit+0x378>)
 8003190:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003194:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003196:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <HAL_UART_MspInit+0x378>)
 8003198:	2200      	movs	r2, #0
 800319a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800319c:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <HAL_UART_MspInit+0x378>)
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <HAL_UART_MspInit+0x378>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031a8:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <HAL_UART_MspInit+0x378>)
 80031aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031ae:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031b0:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <HAL_UART_MspInit+0x378>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80031b6:	4812      	ldr	r0, [pc, #72]	@ (8003200 <HAL_UART_MspInit+0x378>)
 80031b8:	f001 fdaa 	bl	8004d10 <HAL_DMA_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80031c2:	f7fe fc6f 	bl	8001aa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <HAL_UART_MspInit+0x378>)
 80031ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 80031cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003200 <HAL_UART_MspInit+0x378>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2108      	movs	r1, #8
 80031d6:	2027      	movs	r0, #39	@ 0x27
 80031d8:	f001 fd72 	bl	8004cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031dc:	2027      	movs	r0, #39	@ 0x27
 80031de:	f001 fd89 	bl	8004cf4 <HAL_NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	37f8      	adds	r7, #248	@ 0xf8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40004800 	.word	0x40004800
 80031f0:	58024400 	.word	0x58024400
 80031f4:	58020c00 	.word	0x58020c00
 80031f8:	24032c60 	.word	0x24032c60
 80031fc:	40020010 	.word	0x40020010
 8003200:	24032cd8 	.word	0x24032cd8
 8003204:	40020028 	.word	0x40020028

08003208 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  if((uiValue > (uiRef0 + JOY_DEAD_BAND)) || (uiValue < (uiRef0 - JOY_DEAD_BAND)))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	429a      	cmp	r2, r3
 8003220:	d805      	bhi.n	800322e <fGetJoyPostition+0x26>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	429a      	cmp	r2, r3
 800322c:	d22e      	bcs.n	800328c <fGetJoyPostition+0x84>
  {
    return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0 - JOY_DEAD_BAND))/((float)(uiRefMax - uiRef0 - JOY_DEAD_BAND)) : ((int)(uiValue - uiRef0 - JOY_DEAD_BAND))/((float)(uiRef0 + JOY_DEAD_BAND - uiRefMin));
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	dd14      	ble.n	8003262 <fGetJoyPostition+0x5a>
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800325c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003260:	e016      	b.n	8003290 <fGetJoyPostition+0x88>
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800328a:	e001      	b.n	8003290 <fGetJoyPostition+0x88>
  }
  else
  {
	return 0.0;
 800328c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80032a0 <fGetJoyPostition+0x98>
  }
}
 8003290:	eeb0 0a67 	vmov.f32	s0, s15
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	00000000 	.word	0x00000000

080032a4 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 80032a4:	b084      	sub	sp, #16
 80032a6:	b490      	push	{r4, r7}
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	f107 0408 	add.w	r4, r7, #8
 80032ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ucTxMsg[0]  = (unsigned char)'#';
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	2223      	movs	r2, #35	@ 0x23
 80032b6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'S';
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	3301      	adds	r3, #1
 80032bc:	2253      	movs	r2, #83	@ 0x53
 80032be:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xControlActionTx.xSteeringAngle.ucBytes[0];
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	3302      	adds	r3, #2
 80032c4:	7a3a      	ldrb	r2, [r7, #8]
 80032c6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xControlActionTx.xSteeringAngle.ucBytes[1];
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	3303      	adds	r3, #3
 80032cc:	7a7a      	ldrb	r2, [r7, #9]
 80032ce:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xControlActionTx.xSteeringAngle.ucBytes[2];
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	3304      	adds	r3, #4
 80032d4:	7aba      	ldrb	r2, [r7, #10]
 80032d6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xControlActionTx.xSteeringAngle.ucBytes[3];
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	3305      	adds	r3, #5
 80032dc:	7afa      	ldrb	r2, [r7, #11]
 80032de:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'W';
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	3306      	adds	r3, #6
 80032e4:	2257      	movs	r2, #87	@ 0x57
 80032e6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xControlActionTx.xSteeringVelocity.ucBytes[0];
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	3307      	adds	r3, #7
 80032ec:	7b3a      	ldrb	r2, [r7, #12]
 80032ee:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xControlActionTx.xSteeringVelocity.ucBytes[1];
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	3308      	adds	r3, #8
 80032f4:	7b7a      	ldrb	r2, [r7, #13]
 80032f6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xControlActionTx.xSteeringVelocity.ucBytes[2];
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	3309      	adds	r3, #9
 80032fc:	7bba      	ldrb	r2, [r7, #14]
 80032fe:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xControlActionTx.xSteeringVelocity.ucBytes[3];
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	330a      	adds	r3, #10
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'V';
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	330b      	adds	r3, #11
 800330c:	2256      	movs	r2, #86	@ 0x56
 800330e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xControlActionTx.xSpeed.ucBytes[0];
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	330c      	adds	r3, #12
 8003314:	7c3a      	ldrb	r2, [r7, #16]
 8003316:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xControlActionTx.xSpeed.ucBytes[1];
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	330d      	adds	r3, #13
 800331c:	7c7a      	ldrb	r2, [r7, #17]
 800331e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xControlActionTx.xSpeed.ucBytes[2];
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	330e      	adds	r3, #14
 8003324:	7cba      	ldrb	r2, [r7, #18]
 8003326:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xControlActionTx.xSpeed.ucBytes[3];
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	330f      	adds	r3, #15
 800332c:	7cfa      	ldrb	r2, [r7, #19]
 800332e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'A';
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	3310      	adds	r3, #16
 8003334:	2241      	movs	r2, #65	@ 0x41
 8003336:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.xAcceleration.ucBytes[0];
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	3311      	adds	r3, #17
 800333c:	7d3a      	ldrb	r2, [r7, #20]
 800333e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = xControlActionTx.xAcceleration.ucBytes[1];
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	3312      	adds	r3, #18
 8003344:	7d7a      	ldrb	r2, [r7, #21]
 8003346:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.xAcceleration.ucBytes[2];
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	3313      	adds	r3, #19
 800334c:	7dba      	ldrb	r2, [r7, #22]
 800334e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = xControlActionTx.xAcceleration.ucBytes[3];
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	3314      	adds	r3, #20
 8003354:	7dfa      	ldrb	r2, [r7, #23]
 8003356:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = (unsigned char)'J';
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	3315      	adds	r3, #21
 800335c:	224a      	movs	r2, #74	@ 0x4a
 800335e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = xControlActionTx.xJerk.ucBytes[0];
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	3316      	adds	r3, #22
 8003364:	7e3a      	ldrb	r2, [r7, #24]
 8003366:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.xJerk.ucBytes[1];
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	3317      	adds	r3, #23
 800336c:	7e7a      	ldrb	r2, [r7, #25]
 800336e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = xControlActionTx.xJerk.ucBytes[2];
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	3318      	adds	r3, #24
 8003374:	7eba      	ldrb	r2, [r7, #26]
 8003376:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = xControlActionTx.xJerk.ucBytes[3];
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	3319      	adds	r3, #25
 800337c:	7efa      	ldrb	r2, [r7, #27]
 800337e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[26] = (unsigned char)'M';
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	331a      	adds	r3, #26
 8003384:	224d      	movs	r2, #77	@ 0x4d
 8003386:	701a      	strb	r2, [r3, #0]
  ucTxMsg[27] = xControlActionTx.ucControlMode;
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	331b      	adds	r3, #27
 800338c:	7f3a      	ldrb	r2, [r7, #28]
 800338e:	701a      	strb	r2, [r3, #0]
  ucTxMsg[28] = (unsigned char)'$';
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	331c      	adds	r3, #28
 8003394:	2224      	movs	r2, #36	@ 0x24
 8003396:	701a      	strb	r2, [r3, #0]
  ucTxMsg[29] = (unsigned char)'\0';
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	331d      	adds	r3, #29
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
  
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc90      	pop	{r4, r7}
 80033a6:	b004      	add	sp, #16
 80033a8:	4770      	bx	lr
	...

080033ac <vDrivingModeLights>:
  * @brief  Update driving mode signaling lights
  * @param  ucDrivingMode:  Driving mode
  * @retval None
  */
void vDrivingModeLights(unsigned char ucDrivingMode)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  switch (ucDrivingMode)
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d016      	beq.n	80033ea <vDrivingModeLights+0x3e>
 80033bc:	2b04      	cmp	r3, #4
 80033be:	dc36      	bgt.n	800342e <vDrivingModeLights+0x82>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d023      	beq.n	800340c <vDrivingModeLights+0x60>
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d132      	bne.n	800342e <vDrivingModeLights+0x82>
  {
    case AUTOWARE:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Green LED
 80033c8:	2200      	movs	r2, #0
 80033ca:	2101      	movs	r1, #1
 80033cc:	481a      	ldr	r0, [pc, #104]	@ (8003438 <vDrivingModeLights+0x8c>)
 80033ce:	f004 fc97 	bl	8007d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1); // Ambar LED
 80033d2:	2201      	movs	r2, #1
 80033d4:	2102      	movs	r1, #2
 80033d6:	4819      	ldr	r0, [pc, #100]	@ (800343c <vDrivingModeLights+0x90>)
 80033d8:	f004 fc92 	bl	8007d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 80033dc:	2200      	movs	r2, #0
 80033de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033e2:	4815      	ldr	r0, [pc, #84]	@ (8003438 <vDrivingModeLights+0x8c>)
 80033e4:	f004 fc8c 	bl	8007d00 <HAL_GPIO_WritePin>
      break;
 80033e8:	e022      	b.n	8003430 <vDrivingModeLights+0x84>

    case MANUAL:
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 1); // Green LED
 80033ea:	2201      	movs	r2, #1
 80033ec:	2101      	movs	r1, #1
 80033ee:	4812      	ldr	r0, [pc, #72]	@ (8003438 <vDrivingModeLights+0x8c>)
 80033f0:	f004 fc86 	bl	8007d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Ambar LED
 80033f4:	2200      	movs	r2, #0
 80033f6:	2102      	movs	r1, #2
 80033f8:	4810      	ldr	r0, [pc, #64]	@ (800343c <vDrivingModeLights+0x90>)
 80033fa:	f004 fc81 	bl	8007d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 0); // Red LED
 80033fe:	2200      	movs	r2, #0
 8003400:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003404:	480c      	ldr	r0, [pc, #48]	@ (8003438 <vDrivingModeLights+0x8c>)
 8003406:	f004 fc7b 	bl	8007d00 <HAL_GPIO_WritePin>
      break;
 800340a:	e011      	b.n	8003430 <vDrivingModeLights+0x84>

    case EMERGENCY:
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0); // Green LED
 800340c:	2200      	movs	r2, #0
 800340e:	2102      	movs	r1, #2
 8003410:	480a      	ldr	r0, [pc, #40]	@ (800343c <vDrivingModeLights+0x90>)
 8003412:	f004 fc75 	bl	8007d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, 0); // Ambar LED
 8003416:	2200      	movs	r2, #0
 8003418:	2101      	movs	r1, #1
 800341a:	4807      	ldr	r0, [pc, #28]	@ (8003438 <vDrivingModeLights+0x8c>)
 800341c:	f004 fc70 	bl	8007d00 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, 1); // Red LED
 8003420:	2201      	movs	r2, #1
 8003422:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003426:	4804      	ldr	r0, [pc, #16]	@ (8003438 <vDrivingModeLights+0x8c>)
 8003428:	f004 fc6a 	bl	8007d00 <HAL_GPIO_WritePin>
      break;
 800342c:	e000      	b.n	8003430 <vDrivingModeLights+0x84>

    default:
      break;
 800342e:	bf00      	nop
  }

}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	58020400 	.word	0x58020400
 800343c:	58021000 	.word	0x58021000

08003440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003444:	f7ff f972 	bl	800272c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003448:	480c      	ldr	r0, [pc, #48]	@ (800347c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800344a:	490d      	ldr	r1, [pc, #52]	@ (8003480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800344c:	4a0d      	ldr	r2, [pc, #52]	@ (8003484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003450:	e002      	b.n	8003458 <LoopCopyDataInit>

08003452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003456:	3304      	adds	r3, #4

08003458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800345a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800345c:	d3f9      	bcc.n	8003452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003460:	4c0a      	ldr	r4, [pc, #40]	@ (800348c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003464:	e001      	b.n	800346a <LoopFillZerobss>

08003466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003468:	3204      	adds	r2, #4

0800346a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800346a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800346c:	d3fb      	bcc.n	8003466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800346e:	f01f f81f 	bl	80224b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003472:	f7fe f88d 	bl	8001590 <main>
  bx  lr
 8003476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003478:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800347c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003480:	2400130c 	.word	0x2400130c
  ldr r2, =_sidata
 8003484:	08025d5c 	.word	0x08025d5c
  ldr r2, =_sbss
 8003488:	24001310 	.word	0x24001310
  ldr r4, =_ebss
 800348c:	240696f0 	.word	0x240696f0

08003490 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003490:	e7fe      	b.n	8003490 <ADC3_IRQHandler>
	...

08003494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800349a:	2003      	movs	r0, #3
 800349c:	f001 fc05 	bl	8004caa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034a0:	f005 faac 	bl	80089fc <HAL_RCC_GetSysClockFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <HAL_Init+0x68>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	4913      	ldr	r1, [pc, #76]	@ (8003500 <HAL_Init+0x6c>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
 80034bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034be:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <HAL_Init+0x68>)
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003500 <HAL_Init+0x6c>)
 80034c8:	5cd3      	ldrb	r3, [r2, r3]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
 80034d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003504 <HAL_Init+0x70>)
 80034d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003508 <HAL_Init+0x74>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034de:	200f      	movs	r0, #15
 80034e0:	f7fe ff88 	bl	80023f4 <HAL_InitTick>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e002      	b.n	80034f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034ee:	f7fe ff63 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	58024400 	.word	0x58024400
 8003500:	08023518 	.word	0x08023518
 8003504:	24000008 	.word	0x24000008
 8003508:	24000004 	.word	0x24000004

0800350c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003510:	4b06      	ldr	r3, [pc, #24]	@ (800352c <HAL_IncTick+0x20>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <HAL_IncTick+0x24>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4413      	add	r3, r2
 800351c:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <HAL_IncTick+0x24>)
 800351e:	6013      	str	r3, [r2, #0]
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	24000010 	.word	0x24000010
 8003530:	24032d50 	.word	0x24032d50

08003534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return uwTick;
 8003538:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_GetTick+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	24032d50 	.word	0x24032d50

0800354c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_GetREVID+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0c1b      	lsrs	r3, r3, #16
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	5c001000 	.word	0x5c001000

08003564 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	609a      	str	r2, [r3, #8]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3360      	adds	r3, #96	@ 0x60
 80035de:	461a      	mov	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	431a      	orrs	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	611a      	str	r2, [r3, #16]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800363e:	b480      	push	{r7}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3360      	adds	r3, #96	@ 0x60
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	431a      	orrs	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	601a      	str	r2, [r3, #0]
  }
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3330      	adds	r3, #48	@ 0x30
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	4413      	add	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	211f      	movs	r1, #31
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	401a      	ands	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	f003 011f 	and.w	r1, r3, #31
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	431a      	orrs	r2, r3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f023 0203 	bic.w	r2, r3, #3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3314      	adds	r3, #20
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	0e5b      	lsrs	r3, r3, #25
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	4413      	add	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	0d1b      	lsrs	r3, r3, #20
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2107      	movs	r1, #7
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	401a      	ands	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	0d1b      	lsrs	r3, r3, #20
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003788:	43db      	mvns	r3, r3
 800378a:	401a      	ands	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0318 	and.w	r3, r3, #24
 8003792:	4908      	ldr	r1, [pc, #32]	@ (80037b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003794:	40d9      	lsrs	r1, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	400b      	ands	r3, r1
 800379a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800379e:	431a      	orrs	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	000fffff 	.word	0x000fffff

080037b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 031f 	and.w	r3, r3, #31
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	4b04      	ldr	r3, [pc, #16]	@ (80037f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6093      	str	r3, [r2, #8]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	5fffffc0 	.word	0x5fffffc0

080037f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800380c:	d101      	bne.n	8003812 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <LL_ADC_EnableInternalRegulator+0x24>)
 800382e:	4013      	ands	r3, r2
 8003830:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	6fffffc0 	.word	0x6fffffc0

08003848 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800385c:	d101      	bne.n	8003862 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <LL_ADC_Enable+0x24>)
 800387e:	4013      	ands	r3, r2
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	7fffffc0 	.word	0x7fffffc0

08003898 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <LL_ADC_IsEnabled+0x18>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <LL_ADC_IsEnabled+0x1a>
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <LL_ADC_REG_StartConversion+0x24>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	f043 0204 	orr.w	r2, r3, #4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	7fffffc0 	.word	0x7fffffc0

080038e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d101      	bne.n	8003900 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b08      	cmp	r3, #8
 8003920:	d101      	bne.n	8003926 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b089      	sub	sp, #36	@ 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e18f      	b.n	8003c6e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fc ff79 	bl	8000854 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff3f 	bl	80037f8 <LL_ADC_IsDeepPowerDownEnabled>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff25 	bl	80037d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff5a 	bl	8003848 <LL_ADC_IsInternalRegulatorEnabled>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d114      	bne.n	80039c4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff3e 	bl	8003820 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039a4:	4b87      	ldr	r3, [pc, #540]	@ (8003bc4 <HAL_ADC_Init+0x290>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	4a87      	ldr	r2, [pc, #540]	@ (8003bc8 <HAL_ADC_Init+0x294>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039b6:	e002      	b.n	80039be <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f9      	bne.n	80039b8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff3d 	bl	8003848 <LL_ADC_IsInternalRegulatorEnabled>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d8:	f043 0210 	orr.w	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff77 	bl	80038e8 <LL_ADC_REG_IsConversionOngoing>
 80039fa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 8129 	bne.w	8003c5c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 8125 	bne.w	8003c5c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a16:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff36 	bl	8003898 <LL_ADC_IsEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d136      	bne.n	8003aa0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a65      	ldr	r2, [pc, #404]	@ (8003bcc <HAL_ADC_Init+0x298>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_ADC_Init+0x112>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a63      	ldr	r2, [pc, #396]	@ (8003bd0 <HAL_ADC_Init+0x29c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10e      	bne.n	8003a64 <HAL_ADC_Init+0x130>
 8003a46:	4861      	ldr	r0, [pc, #388]	@ (8003bcc <HAL_ADC_Init+0x298>)
 8003a48:	f7ff ff26 	bl	8003898 <LL_ADC_IsEnabled>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	4860      	ldr	r0, [pc, #384]	@ (8003bd0 <HAL_ADC_Init+0x29c>)
 8003a50:	f7ff ff22 	bl	8003898 <LL_ADC_IsEnabled>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4323      	orrs	r3, r4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e008      	b.n	8003a76 <HAL_ADC_Init+0x142>
 8003a64:	485b      	ldr	r0, [pc, #364]	@ (8003bd4 <HAL_ADC_Init+0x2a0>)
 8003a66:	f7ff ff17 	bl	8003898 <LL_ADC_IsEnabled>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a53      	ldr	r2, [pc, #332]	@ (8003bcc <HAL_ADC_Init+0x298>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_ADC_Init+0x15a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a51      	ldr	r2, [pc, #324]	@ (8003bd0 <HAL_ADC_Init+0x29c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_Init+0x15e>
 8003a8e:	4a52      	ldr	r2, [pc, #328]	@ (8003bd8 <HAL_ADC_Init+0x2a4>)
 8003a90:	e000      	b.n	8003a94 <HAL_ADC_Init+0x160>
 8003a92:	4a52      	ldr	r2, [pc, #328]	@ (8003bdc <HAL_ADC_Init+0x2a8>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7ff fd62 	bl	8003564 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003aa0:	f7ff fd54 	bl	800354c <HAL_GetREVID>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d914      	bls.n	8003ad8 <HAL_ADC_Init+0x1a4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d110      	bne.n	8003ad8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7d5b      	ldrb	r3, [r3, #21]
 8003aba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ac0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ac6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	7f1b      	ldrb	r3, [r3, #28]
 8003acc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ace:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ad0:	f043 030c 	orr.w	r3, r3, #12
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	e00d      	b.n	8003af4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7d5b      	ldrb	r3, [r3, #21]
 8003adc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ae2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ae8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7f1b      	ldrb	r3, [r3, #28]
 8003aee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7f1b      	ldrb	r3, [r3, #28]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d106      	bne.n	8003b0a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	045b      	lsls	r3, r3, #17
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003be0 <HAL_ADC_Init+0x2ac>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	430b      	orrs	r3, r1
 8003b38:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fed2 	bl	80038e8 <LL_ADC_REG_IsConversionOngoing>
 8003b44:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff fedf 	bl	800390e <LL_ADC_INJ_IsConversionOngoing>
 8003b50:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d15f      	bne.n	8003c18 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d15c      	bne.n	8003c18 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7d1b      	ldrb	r3, [r3, #20]
 8003b62:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	4b1c      	ldr	r3, [pc, #112]	@ (8003be4 <HAL_ADC_Init+0x2b0>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	69b9      	ldr	r1, [r7, #24]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d130      	bne.n	8003bec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <HAL_ADC_Init+0x2b4>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b9e:	3a01      	subs	r2, #1
 8003ba0:	0411      	lsls	r1, r2, #16
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ba6:	4311      	orrs	r1, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003bac:	4311      	orrs	r1, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	611a      	str	r2, [r3, #16]
 8003bc0:	e01c      	b.n	8003bfc <HAL_ADC_Init+0x2c8>
 8003bc2:	bf00      	nop
 8003bc4:	24000004 	.word	0x24000004
 8003bc8:	053e2d63 	.word	0x053e2d63
 8003bcc:	40022000 	.word	0x40022000
 8003bd0:	40022100 	.word	0x40022100
 8003bd4:	58026000 	.word	0x58026000
 8003bd8:	40022300 	.word	0x40022300
 8003bdc:	58026300 	.word	0x58026300
 8003be0:	fff0c003 	.word	0xfff0c003
 8003be4:	ffffbffc 	.word	0xffffbffc
 8003be8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fd8c 	bl	8004730 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10c      	bne.n	8003c3a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	f023 010f 	bic.w	r1, r3, #15
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	1e5a      	subs	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c38:	e007      	b.n	8003c4a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 020f 	bic.w	r2, r2, #15
 8003c48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c5a:	e007      	b.n	8003c6c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c60:	f043 0210 	orr.w	r2, r3, #16
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	@ 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}
 8003c76:	bf00      	nop

08003c78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a55      	ldr	r2, [pc, #340]	@ (8003de0 <HAL_ADC_Start_DMA+0x168>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <HAL_ADC_Start_DMA+0x20>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a54      	ldr	r2, [pc, #336]	@ (8003de4 <HAL_ADC_Start_DMA+0x16c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_Start_DMA+0x24>
 8003c98:	4b53      	ldr	r3, [pc, #332]	@ (8003de8 <HAL_ADC_Start_DMA+0x170>)
 8003c9a:	e000      	b.n	8003c9e <HAL_ADC_Start_DMA+0x26>
 8003c9c:	4b53      	ldr	r3, [pc, #332]	@ (8003dec <HAL_ADC_Start_DMA+0x174>)
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fd8a 	bl	80037b8 <LL_ADC_GetMultimode>
 8003ca4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fe1c 	bl	80038e8 <LL_ADC_REG_IsConversionOngoing>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 808c 	bne.w	8003dd0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_Start_DMA+0x4e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e087      	b.n	8003dd6 <HAL_ADC_Start_DMA+0x15e>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d002      	beq.n	8003ce0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b09      	cmp	r3, #9
 8003cde:	d170      	bne.n	8003dc2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fc07 	bl	80044f4 <ADC_Enable>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d163      	bne.n	8003db8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8003df0 <HAL_ADC_Start_DMA+0x178>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a37      	ldr	r2, [pc, #220]	@ (8003de4 <HAL_ADC_Start_DMA+0x16c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d002      	beq.n	8003d10 <HAL_ADC_Start_DMA+0x98>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	e000      	b.n	8003d12 <HAL_ADC_Start_DMA+0x9a>
 8003d10:	4b33      	ldr	r3, [pc, #204]	@ (8003de0 <HAL_ADC_Start_DMA+0x168>)
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d002      	beq.n	8003d20 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3c:	f023 0206 	bic.w	r2, r3, #6
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d44:	e002      	b.n	8003d4c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d50:	4a28      	ldr	r2, [pc, #160]	@ (8003df4 <HAL_ADC_Start_DMA+0x17c>)
 8003d52:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d58:	4a27      	ldr	r2, [pc, #156]	@ (8003df8 <HAL_ADC_Start_DMA+0x180>)
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d60:	4a26      	ldr	r2, [pc, #152]	@ (8003dfc <HAL_ADC_Start_DMA+0x184>)
 8003d62:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	221c      	movs	r2, #28
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0210 	orr.w	r2, r2, #16
 8003d82:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f7ff fcaf 	bl	80036f2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3340      	adds	r3, #64	@ 0x40
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f001 fb10 	bl	80053c8 <HAL_DMA_Start_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fd85 	bl	80038c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003db6:	e00d      	b.n	8003dd4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003dc0:	e008      	b.n	8003dd4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003dce:	e001      	b.n	8003dd4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40022000 	.word	0x40022000
 8003de4:	40022100 	.word	0x40022100
 8003de8:	40022300 	.word	0x40022300
 8003dec:	58026300 	.word	0x58026300
 8003df0:	fffff0fe 	.word	0xfffff0fe
 8003df4:	08004609 	.word	0x08004609
 8003df8:	080046e1 	.word	0x080046e1
 8003dfc:	080046fd 	.word	0x080046fd

08003e00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e3c:	b590      	push	{r4, r7, lr}
 8003e3e:	b0a1      	sub	sp, #132	@ 0x84
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a65      	ldr	r2, [pc, #404]	@ (8003fec <HAL_ADC_ConfigChannel+0x1b0>)
 8003e56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x2a>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e32e      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x688>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fd38 	bl	80038e8 <LL_ADC_REG_IsConversionOngoing>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 8313 	bne.w	80044a6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db2c      	blt.n	8003ee2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x6a>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	e016      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x98>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003eb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003eb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	e003      	b.n	8003eca <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003ec2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2201      	movs	r2, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	69d1      	ldr	r1, [r2, #28]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f7ff fbd3 	bl	800369a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fcf5 	bl	80038e8 <LL_ADC_REG_IsConversionOngoing>
 8003efe:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff fd02 	bl	800390e <LL_ADC_INJ_IsConversionOngoing>
 8003f0a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 80b8 	bne.w	8004084 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f040 80b4 	bne.w	8004084 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f7ff fbf5 	bl	8003718 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f2e:	4b30      	ldr	r3, [pc, #192]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x1b4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f3a:	d10b      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x118>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	e01d      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x154>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10b      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x13e>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	e00a      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x154>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d02c      	beq.n	8003ff4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6919      	ldr	r1, [r3, #16]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa8:	f7ff fb10 	bl	80035cc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	6919      	ldr	r1, [r3, #16]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	7e5b      	ldrb	r3, [r3, #25]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d102      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x186>
 8003fbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003fc0:	e000      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x188>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f7ff fb3a 	bl	800363e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6919      	ldr	r1, [r3, #16]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	7e1b      	ldrb	r3, [r3, #24]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x1a4>
 8003fda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fde:	e000      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x1a6>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f7ff fb12 	bl	800360c <LL_ADC_SetDataRightShift>
 8003fe8:	e04c      	b.n	8004084 <HAL_ADC_ConfigChannel+0x248>
 8003fea:	bf00      	nop
 8003fec:	47ff0000 	.word	0x47ff0000
 8003ff0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	069b      	lsls	r3, r3, #26
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004016:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800401e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	069b      	lsls	r3, r3, #26
 8004028:	429a      	cmp	r2, r3
 800402a:	d107      	bne.n	800403c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800403a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004042:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	069b      	lsls	r3, r3, #26
 800404c:	429a      	cmp	r2, r3
 800404e:	d107      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800405e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004066:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	069b      	lsls	r3, r3, #26
 8004070:	429a      	cmp	r2, r3
 8004072:	d107      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004082:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fc05 	bl	8003898 <LL_ADC_IsEnabled>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 8211 	bne.w	80044b8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f7ff fb64 	bl	8003770 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4aa1      	ldr	r2, [pc, #644]	@ (8004334 <HAL_ADC_ConfigChannel+0x4f8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f040 812e 	bne.w	8004310 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x2a0>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	bf94      	ite	ls
 80040d4:	2301      	movls	r3, #1
 80040d6:	2300      	movhi	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e019      	b.n	8004110 <HAL_ADC_ConfigChannel+0x2d4>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80040ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	e003      	b.n	8004100 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80040f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2b09      	cmp	r3, #9
 8004108:	bf94      	ite	ls
 800410a:	2301      	movls	r3, #1
 800410c:	2300      	movhi	r3, #0
 800410e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004110:	2b00      	cmp	r3, #0
 8004112:	d079      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x2f4>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	3301      	adds	r3, #1
 8004128:	069b      	lsls	r3, r3, #26
 800412a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800412e:	e015      	b.n	800415c <HAL_ADC_ConfigChannel+0x320>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800413e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004140:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e003      	b.n	8004154 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800414c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	069b      	lsls	r3, r3, #26
 8004158:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_ADC_ConfigChannel+0x340>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0e9b      	lsrs	r3, r3, #26
 800416e:	3301      	adds	r3, #1
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2101      	movs	r1, #1
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	e017      	b.n	80041ac <HAL_ADC_ConfigChannel+0x370>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800418e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004194:	2320      	movs	r3, #32
 8004196:	e003      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3301      	adds	r3, #1
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2101      	movs	r1, #1
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	ea42 0103 	orr.w	r1, r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x396>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0e9b      	lsrs	r3, r3, #26
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	051b      	lsls	r3, r3, #20
 80041d0:	e018      	b.n	8004204 <HAL_ADC_ConfigChannel+0x3c8>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80041e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80041ea:	2320      	movs	r3, #32
 80041ec:	e003      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80041ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004204:	430b      	orrs	r3, r1
 8004206:	e07e      	b.n	8004306 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x3e8>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0e9b      	lsrs	r3, r3, #26
 800421a:	3301      	adds	r3, #1
 800421c:	069b      	lsls	r3, r3, #26
 800421e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004222:	e015      	b.n	8004250 <HAL_ADC_ConfigChannel+0x414>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800423c:	2320      	movs	r3, #32
 800423e:	e003      	b.n	8004248 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	3301      	adds	r3, #1
 800424a:	069b      	lsls	r3, r3, #26
 800424c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x434>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e9b      	lsrs	r3, r3, #26
 8004262:	3301      	adds	r3, #1
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	e017      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x464>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	61bb      	str	r3, [r7, #24]
  return result;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e003      	b.n	8004294 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2101      	movs	r1, #1
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	ea42 0103 	orr.w	r1, r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10d      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x490>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0e9b      	lsrs	r3, r3, #26
 80042b6:	3301      	adds	r3, #1
 80042b8:	f003 021f 	and.w	r2, r3, #31
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	3b1e      	subs	r3, #30
 80042c4:	051b      	lsls	r3, r3, #20
 80042c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042ca:	e01b      	b.n	8004304 <HAL_ADC_ConfigChannel+0x4c8>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	60fb      	str	r3, [r7, #12]
  return result;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e003      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	3301      	adds	r3, #1
 80042f2:	f003 021f 	and.w	r2, r3, #31
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	3b1e      	subs	r3, #30
 80042fe:	051b      	lsls	r3, r3, #20
 8004300:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004304:	430b      	orrs	r3, r1
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	6892      	ldr	r2, [r2, #8]
 800430a:	4619      	mov	r1, r3
 800430c:	f7ff fa04 	bl	8003718 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f280 80cf 	bge.w	80044b8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a06      	ldr	r2, [pc, #24]	@ (8004338 <HAL_ADC_ConfigChannel+0x4fc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_ADC_ConfigChannel+0x4f2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a04      	ldr	r2, [pc, #16]	@ (800433c <HAL_ADC_ConfigChannel+0x500>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10a      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x508>
 800432e:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <HAL_ADC_ConfigChannel+0x504>)
 8004330:	e009      	b.n	8004346 <HAL_ADC_ConfigChannel+0x50a>
 8004332:	bf00      	nop
 8004334:	47ff0000 	.word	0x47ff0000
 8004338:	40022000 	.word	0x40022000
 800433c:	40022100 	.word	0x40022100
 8004340:	40022300 	.word	0x40022300
 8004344:	4b61      	ldr	r3, [pc, #388]	@ (80044cc <HAL_ADC_ConfigChannel+0x690>)
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f932 	bl	80035b0 <LL_ADC_GetCommonPathInternalCh>
 800434c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5f      	ldr	r2, [pc, #380]	@ (80044d0 <HAL_ADC_ConfigChannel+0x694>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_ADC_ConfigChannel+0x526>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5d      	ldr	r2, [pc, #372]	@ (80044d4 <HAL_ADC_ConfigChannel+0x698>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10e      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x544>
 8004362:	485b      	ldr	r0, [pc, #364]	@ (80044d0 <HAL_ADC_ConfigChannel+0x694>)
 8004364:	f7ff fa98 	bl	8003898 <LL_ADC_IsEnabled>
 8004368:	4604      	mov	r4, r0
 800436a:	485a      	ldr	r0, [pc, #360]	@ (80044d4 <HAL_ADC_ConfigChannel+0x698>)
 800436c:	f7ff fa94 	bl	8003898 <LL_ADC_IsEnabled>
 8004370:	4603      	mov	r3, r0
 8004372:	4323      	orrs	r3, r4
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e008      	b.n	8004392 <HAL_ADC_ConfigChannel+0x556>
 8004380:	4855      	ldr	r0, [pc, #340]	@ (80044d8 <HAL_ADC_ConfigChannel+0x69c>)
 8004382:	f7ff fa89 	bl	8003898 <LL_ADC_IsEnabled>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d07d      	beq.n	8004492 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a50      	ldr	r2, [pc, #320]	@ (80044dc <HAL_ADC_ConfigChannel+0x6a0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d130      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x5c6>
 80043a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d12b      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4a      	ldr	r2, [pc, #296]	@ (80044d8 <HAL_ADC_ConfigChannel+0x69c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f040 8081 	bne.w	80044b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a45      	ldr	r2, [pc, #276]	@ (80044d0 <HAL_ADC_ConfigChannel+0x694>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_ADC_ConfigChannel+0x58e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a43      	ldr	r2, [pc, #268]	@ (80044d4 <HAL_ADC_ConfigChannel+0x698>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x592>
 80043ca:	4a45      	ldr	r2, [pc, #276]	@ (80044e0 <HAL_ADC_ConfigChannel+0x6a4>)
 80043cc:	e000      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x594>
 80043ce:	4a3f      	ldr	r2, [pc, #252]	@ (80044cc <HAL_ADC_ConfigChannel+0x690>)
 80043d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f7ff f8d6 	bl	800358a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043de:	4b41      	ldr	r3, [pc, #260]	@ (80044e4 <HAL_ADC_ConfigChannel+0x6a8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	099b      	lsrs	r3, r3, #6
 80043e4:	4a40      	ldr	r2, [pc, #256]	@ (80044e8 <HAL_ADC_ConfigChannel+0x6ac>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	3301      	adds	r3, #1
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043f2:	e002      	b.n	80043fa <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f9      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004400:	e05a      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a39      	ldr	r2, [pc, #228]	@ (80044ec <HAL_ADC_ConfigChannel+0x6b0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d11e      	bne.n	800444a <HAL_ADC_ConfigChannel+0x60e>
 800440c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d119      	bne.n	800444a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2f      	ldr	r2, [pc, #188]	@ (80044d8 <HAL_ADC_ConfigChannel+0x69c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d14b      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a2a      	ldr	r2, [pc, #168]	@ (80044d0 <HAL_ADC_ConfigChannel+0x694>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_ADC_ConfigChannel+0x5f8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a29      	ldr	r2, [pc, #164]	@ (80044d4 <HAL_ADC_ConfigChannel+0x698>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d101      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x5fc>
 8004434:	4a2a      	ldr	r2, [pc, #168]	@ (80044e0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004436:	e000      	b.n	800443a <HAL_ADC_ConfigChannel+0x5fe>
 8004438:	4a24      	ldr	r2, [pc, #144]	@ (80044cc <HAL_ADC_ConfigChannel+0x690>)
 800443a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800443c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f7ff f8a1 	bl	800358a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004448:	e036      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a28      	ldr	r2, [pc, #160]	@ (80044f0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d131      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x67c>
 8004454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d12c      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1d      	ldr	r2, [pc, #116]	@ (80044d8 <HAL_ADC_ConfigChannel+0x69c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d127      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <HAL_ADC_ConfigChannel+0x694>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_ADC_ConfigChannel+0x640>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a17      	ldr	r2, [pc, #92]	@ (80044d4 <HAL_ADC_ConfigChannel+0x698>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x644>
 800447c:	4a18      	ldr	r2, [pc, #96]	@ (80044e0 <HAL_ADC_ConfigChannel+0x6a4>)
 800447e:	e000      	b.n	8004482 <HAL_ADC_ConfigChannel+0x646>
 8004480:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <HAL_ADC_ConfigChannel+0x690>)
 8004482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004484:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f7ff f87d 	bl	800358a <LL_ADC_SetCommonPathInternalCh>
 8004490:	e012      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80044a4:	e008      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3784      	adds	r7, #132	@ 0x84
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd90      	pop	{r4, r7, pc}
 80044cc:	58026300 	.word	0x58026300
 80044d0:	40022000 	.word	0x40022000
 80044d4:	40022100 	.word	0x40022100
 80044d8:	58026000 	.word	0x58026000
 80044dc:	cb840000 	.word	0xcb840000
 80044e0:	40022300 	.word	0x40022300
 80044e4:	24000004 	.word	0x24000004
 80044e8:	053e2d63 	.word	0x053e2d63
 80044ec:	c7520000 	.word	0xc7520000
 80044f0:	cfb80000 	.word	0xcfb80000

080044f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff f9c9 	bl	8003898 <LL_ADC_IsEnabled>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d16e      	bne.n	80045ea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	4b38      	ldr	r3, [pc, #224]	@ (80045f4 <ADC_Enable+0x100>)
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00d      	beq.n	8004536 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	f043 0210 	orr.w	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e05a      	b.n	80045ec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff f998 	bl	8003870 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004540:	f7fe fff8 	bl	8003534 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2b      	ldr	r2, [pc, #172]	@ (80045f8 <ADC_Enable+0x104>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <ADC_Enable+0x66>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a29      	ldr	r2, [pc, #164]	@ (80045fc <ADC_Enable+0x108>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <ADC_Enable+0x6a>
 800455a:	4b29      	ldr	r3, [pc, #164]	@ (8004600 <ADC_Enable+0x10c>)
 800455c:	e000      	b.n	8004560 <ADC_Enable+0x6c>
 800455e:	4b29      	ldr	r3, [pc, #164]	@ (8004604 <ADC_Enable+0x110>)
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff f929 	bl	80037b8 <LL_ADC_GetMultimode>
 8004566:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a23      	ldr	r2, [pc, #140]	@ (80045fc <ADC_Enable+0x108>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d002      	beq.n	8004578 <ADC_Enable+0x84>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	e000      	b.n	800457a <ADC_Enable+0x86>
 8004578:	4b1f      	ldr	r3, [pc, #124]	@ (80045f8 <ADC_Enable+0x104>)
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	4293      	cmp	r3, r2
 8004580:	d02c      	beq.n	80045dc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d130      	bne.n	80045ea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004588:	e028      	b.n	80045dc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff f982 	bl	8003898 <LL_ADC_IsEnabled>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff f966 	bl	8003870 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045a4:	f7fe ffc6 	bl	8003534 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d914      	bls.n	80045dc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d00d      	beq.n	80045dc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	f043 0210 	orr.w	r2, r3, #16
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e007      	b.n	80045ec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d1cf      	bne.n	800458a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	8000003f 	.word	0x8000003f
 80045f8:	40022000 	.word	0x40022000
 80045fc:	40022100 	.word	0x40022100
 8004600:	40022300 	.word	0x40022300
 8004604:	58026300 	.word	0x58026300

08004608 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800461e:	2b00      	cmp	r3, #0
 8004620:	d14b      	bne.n	80046ba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d021      	beq.n	8004680 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff f817 	bl	8003674 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d032      	beq.n	80046b2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d12b      	bne.n	80046b2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11f      	bne.n	80046b2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	655a      	str	r2, [r3, #84]	@ 0x54
 800467e:	e018      	b.n	80046b2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d111      	bne.n	80046b2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d105      	bne.n	80046b2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	f043 0201 	orr.w	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fba4 	bl	8003e00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046b8:	e00e      	b.n	80046d8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fbae 	bl	8003e28 <HAL_ADC_ErrorCallback>
}
 80046cc:	e004      	b.n	80046d8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff fb90 	bl	8003e14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004708:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff fb80 	bl	8003e28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7a      	ldr	r2, [pc, #488]	@ (8004928 <ADC_ConfigureBoostMode+0x1f8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <ADC_ConfigureBoostMode+0x1c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a79      	ldr	r2, [pc, #484]	@ (800492c <ADC_ConfigureBoostMode+0x1fc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d109      	bne.n	8004760 <ADC_ConfigureBoostMode+0x30>
 800474c:	4b78      	ldr	r3, [pc, #480]	@ (8004930 <ADC_ConfigureBoostMode+0x200>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e008      	b.n	8004772 <ADC_ConfigureBoostMode+0x42>
 8004760:	4b74      	ldr	r3, [pc, #464]	@ (8004934 <ADC_ConfigureBoostMode+0x204>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01c      	beq.n	80047b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004776:	f004 fabb 	bl	8008cf0 <HAL_RCC_GetHCLKFreq>
 800477a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004784:	d010      	beq.n	80047a8 <ADC_ConfigureBoostMode+0x78>
 8004786:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800478a:	d873      	bhi.n	8004874 <ADC_ConfigureBoostMode+0x144>
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004790:	d002      	beq.n	8004798 <ADC_ConfigureBoostMode+0x68>
 8004792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004796:	d16d      	bne.n	8004874 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	60fb      	str	r3, [r7, #12]
        break;
 80047a6:	e068      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	60fb      	str	r3, [r7, #12]
        break;
 80047ae:	e064      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80047b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	f005 fd42 	bl	800a240 <HAL_RCCEx_GetPeriphCLKFreq>
 80047bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80047c6:	d051      	beq.n	800486c <ADC_ConfigureBoostMode+0x13c>
 80047c8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80047cc:	d854      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 80047ce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80047d2:	d047      	beq.n	8004864 <ADC_ConfigureBoostMode+0x134>
 80047d4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80047d8:	d84e      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 80047da:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047de:	d03d      	beq.n	800485c <ADC_ConfigureBoostMode+0x12c>
 80047e0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047e4:	d848      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 80047e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ea:	d033      	beq.n	8004854 <ADC_ConfigureBoostMode+0x124>
 80047ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f0:	d842      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 80047f2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047f6:	d029      	beq.n	800484c <ADC_ConfigureBoostMode+0x11c>
 80047f8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047fc:	d83c      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 80047fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004802:	d01a      	beq.n	800483a <ADC_ConfigureBoostMode+0x10a>
 8004804:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004808:	d836      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 800480a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800480e:	d014      	beq.n	800483a <ADC_ConfigureBoostMode+0x10a>
 8004810:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004814:	d830      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481a:	d00e      	beq.n	800483a <ADC_ConfigureBoostMode+0x10a>
 800481c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004820:	d82a      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 8004822:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004826:	d008      	beq.n	800483a <ADC_ConfigureBoostMode+0x10a>
 8004828:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800482c:	d824      	bhi.n	8004878 <ADC_ConfigureBoostMode+0x148>
 800482e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004832:	d002      	beq.n	800483a <ADC_ConfigureBoostMode+0x10a>
 8004834:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004838:	d11e      	bne.n	8004878 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	0c9b      	lsrs	r3, r3, #18
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	60fb      	str	r3, [r7, #12]
        break;
 800484a:	e016      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	60fb      	str	r3, [r7, #12]
        break;
 8004852:	e012      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	60fb      	str	r3, [r7, #12]
        break;
 800485a:	e00e      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	60fb      	str	r3, [r7, #12]
        break;
 8004862:	e00a      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	09db      	lsrs	r3, r3, #7
 8004868:	60fb      	str	r3, [r7, #12]
        break;
 800486a:	e006      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	0a1b      	lsrs	r3, r3, #8
 8004870:	60fb      	str	r3, [r7, #12]
        break;
 8004872:	e002      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004874:	bf00      	nop
 8004876:	e000      	b.n	800487a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004878:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800487a:	f7fe fe67 	bl	800354c <HAL_GetREVID>
 800487e:	4603      	mov	r3, r0
 8004880:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004884:	4293      	cmp	r3, r2
 8004886:	d815      	bhi.n	80048b4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a2b      	ldr	r2, [pc, #172]	@ (8004938 <ADC_ConfigureBoostMode+0x208>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d908      	bls.n	80048a2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800489e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80048a0:	e03e      	b.n	8004920 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048b0:	609a      	str	r2, [r3, #8]
}
 80048b2:	e035      	b.n	8004920 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a1f      	ldr	r2, [pc, #124]	@ (800493c <ADC_ConfigureBoostMode+0x20c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d808      	bhi.n	80048d4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048d0:	609a      	str	r2, [r3, #8]
}
 80048d2:	e025      	b.n	8004920 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004940 <ADC_ConfigureBoostMode+0x210>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d80a      	bhi.n	80048f2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	e016      	b.n	8004920 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <ADC_ConfigureBoostMode+0x214>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d80a      	bhi.n	8004910 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490c:	609a      	str	r2, [r3, #8]
}
 800490e:	e007      	b.n	8004920 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40022000 	.word	0x40022000
 800492c:	40022100 	.word	0x40022100
 8004930:	40022300 	.word	0x40022300
 8004934:	58026300 	.word	0x58026300
 8004938:	01312d00 	.word	0x01312d00
 800493c:	005f5e10 	.word	0x005f5e10
 8004940:	00bebc20 	.word	0x00bebc20
 8004944:	017d7840 	.word	0x017d7840

08004948 <LL_ADC_IsEnabled>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <LL_ADC_IsEnabled+0x18>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <LL_ADC_IsEnabled+0x1a>
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_ADC_REG_IsConversionOngoing>:
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d101      	bne.n	8004986 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b09f      	sub	sp, #124	@ 0x7c
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0be      	b.n	8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80049be:	2300      	movs	r3, #0
 80049c0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d102      	bne.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049cc:	4b5b      	ldr	r3, [pc, #364]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	e001      	b.n	80049d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e09d      	b.n	8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff ffb9 	bl	800496e <LL_ADC_REG_IsConversionOngoing>
 80049fc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff ffb3 	bl	800496e <LL_ADC_REG_IsConversionOngoing>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d17f      	bne.n	8004b0e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d17c      	bne.n	8004b0e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a47      	ldr	r2, [pc, #284]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a46      	ldr	r2, [pc, #280]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d101      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004a28:	4b45      	ldr	r3, [pc, #276]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a2a:	e000      	b.n	8004a2e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a2c:	4b45      	ldr	r3, [pc, #276]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d039      	beq.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a48:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a3a      	ldr	r2, [pc, #232]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a38      	ldr	r2, [pc, #224]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d10e      	bne.n	8004a7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a5e:	4836      	ldr	r0, [pc, #216]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a60:	f7ff ff72 	bl	8004948 <LL_ADC_IsEnabled>
 8004a64:	4604      	mov	r4, r0
 8004a66:	4835      	ldr	r0, [pc, #212]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a68:	f7ff ff6e 	bl	8004948 <LL_ADC_IsEnabled>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4323      	orrs	r3, r4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bf0c      	ite	eq
 8004a74:	2301      	moveq	r3, #1
 8004a76:	2300      	movne	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	e008      	b.n	8004a8e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004a7c:	4832      	ldr	r0, [pc, #200]	@ (8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a7e:	f7ff ff63 	bl	8004948 <LL_ADC_IsEnabled>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d047      	beq.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	4b2d      	ldr	r3, [pc, #180]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	6811      	ldr	r1, [r2, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	6892      	ldr	r2, [r2, #8]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aaa:	e03a      	b.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ab6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10e      	bne.n	8004aea <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004acc:	481a      	ldr	r0, [pc, #104]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ace:	f7ff ff3b 	bl	8004948 <LL_ADC_IsEnabled>
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4819      	ldr	r0, [pc, #100]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ad6:	f7ff ff37 	bl	8004948 <LL_ADC_IsEnabled>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4323      	orrs	r3, r4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e008      	b.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004aea:	4817      	ldr	r0, [pc, #92]	@ (8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004aec:	f7ff ff2c 	bl	8004948 <LL_ADC_IsEnabled>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bf0c      	ite	eq
 8004af6:	2301      	moveq	r3, #1
 8004af8:	2300      	movne	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d010      	beq.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	4b11      	ldr	r3, [pc, #68]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b0a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b0c:	e009      	b.n	8004b22 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004b20:	e000      	b.n	8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b22:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	377c      	adds	r7, #124	@ 0x7c
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	40022000 	.word	0x40022000
 8004b3c:	40022100 	.word	0x40022100
 8004b40:	40022300 	.word	0x40022300
 8004b44:	58026300 	.word	0x58026300
 8004b48:	58026000 	.word	0x58026000
 8004b4c:	fffff0e0 	.word	0xfffff0e0

08004b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b60:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <__NVIC_SetPriorityGrouping+0x40>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <__NVIC_SetPriorityGrouping+0x44>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b7e:	4a04      	ldr	r2, [pc, #16]	@ (8004b90 <__NVIC_SetPriorityGrouping+0x40>)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	60d3      	str	r3, [r2, #12]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	e000ed00 	.word	0xe000ed00
 8004b94:	05fa0000 	.word	0x05fa0000

08004b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b9c:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	f003 0307 	and.w	r3, r3, #7
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	db0b      	blt.n	8004bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	f003 021f 	and.w	r2, r3, #31
 8004bcc:	4907      	ldr	r1, [pc, #28]	@ (8004bec <__NVIC_EnableIRQ+0x38>)
 8004bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	e000e100 	.word	0xe000e100

08004bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	6039      	str	r1, [r7, #0]
 8004bfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db0a      	blt.n	8004c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	490c      	ldr	r1, [pc, #48]	@ (8004c3c <__NVIC_SetPriority+0x4c>)
 8004c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0e:	0112      	lsls	r2, r2, #4
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	440b      	add	r3, r1
 8004c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c18:	e00a      	b.n	8004c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	4908      	ldr	r1, [pc, #32]	@ (8004c40 <__NVIC_SetPriority+0x50>)
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	3b04      	subs	r3, #4
 8004c28:	0112      	lsls	r2, r2, #4
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	761a      	strb	r2, [r3, #24]
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	e000e100 	.word	0xe000e100
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	@ 0x24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f1c3 0307 	rsb	r3, r3, #7
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	bf28      	it	cs
 8004c62:	2304      	movcs	r3, #4
 8004c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d902      	bls.n	8004c74 <NVIC_EncodePriority+0x30>
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3b03      	subs	r3, #3
 8004c72:	e000      	b.n	8004c76 <NVIC_EncodePriority+0x32>
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43da      	mvns	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	401a      	ands	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	43d9      	mvns	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c9c:	4313      	orrs	r3, r2
         );
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3724      	adds	r7, #36	@ 0x24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ff4c 	bl	8004b50 <__NVIC_SetPriorityGrouping>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cce:	f7ff ff63 	bl	8004b98 <__NVIC_GetPriorityGrouping>
 8004cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	6978      	ldr	r0, [r7, #20]
 8004cda:	f7ff ffb3 	bl	8004c44 <NVIC_EncodePriority>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ff82 	bl	8004bf0 <__NVIC_SetPriority>
}
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ff56 	bl	8004bb4 <__NVIC_EnableIRQ>
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d18:	f7fe fc0c 	bl	8003534 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e316      	b.n	8005356 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a66      	ldr	r2, [pc, #408]	@ (8004ec8 <HAL_DMA_Init+0x1b8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d04a      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a65      	ldr	r2, [pc, #404]	@ (8004ecc <HAL_DMA_Init+0x1bc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d045      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a63      	ldr	r2, [pc, #396]	@ (8004ed0 <HAL_DMA_Init+0x1c0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d040      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a62      	ldr	r2, [pc, #392]	@ (8004ed4 <HAL_DMA_Init+0x1c4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d03b      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a60      	ldr	r2, [pc, #384]	@ (8004ed8 <HAL_DMA_Init+0x1c8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d036      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8004edc <HAL_DMA_Init+0x1cc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d031      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5d      	ldr	r2, [pc, #372]	@ (8004ee0 <HAL_DMA_Init+0x1d0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02c      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a5c      	ldr	r2, [pc, #368]	@ (8004ee4 <HAL_DMA_Init+0x1d4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d027      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ee8 <HAL_DMA_Init+0x1d8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d022      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a59      	ldr	r2, [pc, #356]	@ (8004eec <HAL_DMA_Init+0x1dc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d01d      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a57      	ldr	r2, [pc, #348]	@ (8004ef0 <HAL_DMA_Init+0x1e0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d018      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a56      	ldr	r2, [pc, #344]	@ (8004ef4 <HAL_DMA_Init+0x1e4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a54      	ldr	r2, [pc, #336]	@ (8004ef8 <HAL_DMA_Init+0x1e8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a53      	ldr	r2, [pc, #332]	@ (8004efc <HAL_DMA_Init+0x1ec>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a51      	ldr	r2, [pc, #324]	@ (8004f00 <HAL_DMA_Init+0x1f0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_DMA_Init+0xb8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a50      	ldr	r2, [pc, #320]	@ (8004f04 <HAL_DMA_Init+0x1f4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_DMA_Init+0xbc>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_DMA_Init+0xbe>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 813b 	beq.w	800504a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a37      	ldr	r2, [pc, #220]	@ (8004ec8 <HAL_DMA_Init+0x1b8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d04a      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a36      	ldr	r2, [pc, #216]	@ (8004ecc <HAL_DMA_Init+0x1bc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d045      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a34      	ldr	r2, [pc, #208]	@ (8004ed0 <HAL_DMA_Init+0x1c0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d040      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a33      	ldr	r2, [pc, #204]	@ (8004ed4 <HAL_DMA_Init+0x1c4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d03b      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a31      	ldr	r2, [pc, #196]	@ (8004ed8 <HAL_DMA_Init+0x1c8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d036      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a30      	ldr	r2, [pc, #192]	@ (8004edc <HAL_DMA_Init+0x1cc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d031      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee0 <HAL_DMA_Init+0x1d0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d02c      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee4 <HAL_DMA_Init+0x1d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d027      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee8 <HAL_DMA_Init+0x1d8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d022      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2a      	ldr	r2, [pc, #168]	@ (8004eec <HAL_DMA_Init+0x1dc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d01d      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a28      	ldr	r2, [pc, #160]	@ (8004ef0 <HAL_DMA_Init+0x1e0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d018      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a27      	ldr	r2, [pc, #156]	@ (8004ef4 <HAL_DMA_Init+0x1e4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a25      	ldr	r2, [pc, #148]	@ (8004ef8 <HAL_DMA_Init+0x1e8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a24      	ldr	r2, [pc, #144]	@ (8004efc <HAL_DMA_Init+0x1ec>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a22      	ldr	r2, [pc, #136]	@ (8004f00 <HAL_DMA_Init+0x1f0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_DMA_Init+0x174>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a21      	ldr	r2, [pc, #132]	@ (8004f04 <HAL_DMA_Init+0x1f4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <HAL_DMA_Init+0x186>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e007      	b.n	8004ea6 <HAL_DMA_Init+0x196>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ea6:	e02f      	b.n	8004f08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ea8:	f7fe fb44 	bl	8003534 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d928      	bls.n	8004f08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e246      	b.n	8005356 <HAL_DMA_Init+0x646>
 8004ec8:	40020010 	.word	0x40020010
 8004ecc:	40020028 	.word	0x40020028
 8004ed0:	40020040 	.word	0x40020040
 8004ed4:	40020058 	.word	0x40020058
 8004ed8:	40020070 	.word	0x40020070
 8004edc:	40020088 	.word	0x40020088
 8004ee0:	400200a0 	.word	0x400200a0
 8004ee4:	400200b8 	.word	0x400200b8
 8004ee8:	40020410 	.word	0x40020410
 8004eec:	40020428 	.word	0x40020428
 8004ef0:	40020440 	.word	0x40020440
 8004ef4:	40020458 	.word	0x40020458
 8004ef8:	40020470 	.word	0x40020470
 8004efc:	40020488 	.word	0x40020488
 8004f00:	400204a0 	.word	0x400204a0
 8004f04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1c8      	bne.n	8004ea8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4b83      	ldr	r3, [pc, #524]	@ (8005130 <HAL_DMA_Init+0x420>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d107      	bne.n	8004f6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	4313      	orrs	r3, r2
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f6c:	4b71      	ldr	r3, [pc, #452]	@ (8005134 <HAL_DMA_Init+0x424>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b71      	ldr	r3, [pc, #452]	@ (8005138 <HAL_DMA_Init+0x428>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f78:	d328      	bcc.n	8004fcc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b28      	cmp	r3, #40	@ 0x28
 8004f80:	d903      	bls.n	8004f8a <HAL_DMA_Init+0x27a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f88:	d917      	bls.n	8004fba <HAL_DMA_Init+0x2aa>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f90:	d903      	bls.n	8004f9a <HAL_DMA_Init+0x28a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b42      	cmp	r3, #66	@ 0x42
 8004f98:	d90f      	bls.n	8004fba <HAL_DMA_Init+0x2aa>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b46      	cmp	r3, #70	@ 0x46
 8004fa0:	d903      	bls.n	8004faa <HAL_DMA_Init+0x29a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b48      	cmp	r3, #72	@ 0x48
 8004fa8:	d907      	bls.n	8004fba <HAL_DMA_Init+0x2aa>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b4e      	cmp	r3, #78	@ 0x4e
 8004fb0:	d905      	bls.n	8004fbe <HAL_DMA_Init+0x2ae>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b52      	cmp	r3, #82	@ 0x52
 8004fb8:	d801      	bhi.n	8004fbe <HAL_DMA_Init+0x2ae>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_DMA_Init+0x2b0>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0307 	bic.w	r3, r3, #7
 8004fe2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d117      	bne.n	8005026 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00e      	beq.n	8005026 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f002 fb3f 	bl	800768c <DMA_CheckFifoParam>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2240      	movs	r2, #64	@ 0x40
 8005018:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e197      	b.n	8005356 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f002 fa7a 	bl	8007528 <DMA_CalcBaseAndBitshift>
 8005034:	4603      	mov	r3, r0
 8005036:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	223f      	movs	r2, #63	@ 0x3f
 8005042:	409a      	lsls	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	609a      	str	r2, [r3, #8]
 8005048:	e0cd      	b.n	80051e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3b      	ldr	r2, [pc, #236]	@ (800513c <HAL_DMA_Init+0x42c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d022      	beq.n	800509a <HAL_DMA_Init+0x38a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a39      	ldr	r2, [pc, #228]	@ (8005140 <HAL_DMA_Init+0x430>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01d      	beq.n	800509a <HAL_DMA_Init+0x38a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a38      	ldr	r2, [pc, #224]	@ (8005144 <HAL_DMA_Init+0x434>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d018      	beq.n	800509a <HAL_DMA_Init+0x38a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a36      	ldr	r2, [pc, #216]	@ (8005148 <HAL_DMA_Init+0x438>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d013      	beq.n	800509a <HAL_DMA_Init+0x38a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a35      	ldr	r2, [pc, #212]	@ (800514c <HAL_DMA_Init+0x43c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_DMA_Init+0x38a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a33      	ldr	r2, [pc, #204]	@ (8005150 <HAL_DMA_Init+0x440>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_DMA_Init+0x38a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a32      	ldr	r2, [pc, #200]	@ (8005154 <HAL_DMA_Init+0x444>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_DMA_Init+0x38a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a30      	ldr	r2, [pc, #192]	@ (8005158 <HAL_DMA_Init+0x448>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_DMA_Init+0x38e>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_DMA_Init+0x390>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8097 	beq.w	80051d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a24      	ldr	r2, [pc, #144]	@ (800513c <HAL_DMA_Init+0x42c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d021      	beq.n	80050f4 <HAL_DMA_Init+0x3e4>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a22      	ldr	r2, [pc, #136]	@ (8005140 <HAL_DMA_Init+0x430>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01c      	beq.n	80050f4 <HAL_DMA_Init+0x3e4>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a21      	ldr	r2, [pc, #132]	@ (8005144 <HAL_DMA_Init+0x434>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d017      	beq.n	80050f4 <HAL_DMA_Init+0x3e4>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005148 <HAL_DMA_Init+0x438>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d012      	beq.n	80050f4 <HAL_DMA_Init+0x3e4>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <HAL_DMA_Init+0x43c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00d      	beq.n	80050f4 <HAL_DMA_Init+0x3e4>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005150 <HAL_DMA_Init+0x440>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d008      	beq.n	80050f4 <HAL_DMA_Init+0x3e4>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005154 <HAL_DMA_Init+0x444>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <HAL_DMA_Init+0x3e4>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a19      	ldr	r2, [pc, #100]	@ (8005158 <HAL_DMA_Init+0x448>)
 80050f2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4b13      	ldr	r3, [pc, #76]	@ (800515c <HAL_DMA_Init+0x44c>)
 8005110:	4013      	ands	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b40      	cmp	r3, #64	@ 0x40
 800511a:	d021      	beq.n	8005160 <HAL_DMA_Init+0x450>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b80      	cmp	r3, #128	@ 0x80
 8005122:	d102      	bne.n	800512a <HAL_DMA_Init+0x41a>
 8005124:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005128:	e01b      	b.n	8005162 <HAL_DMA_Init+0x452>
 800512a:	2300      	movs	r3, #0
 800512c:	e019      	b.n	8005162 <HAL_DMA_Init+0x452>
 800512e:	bf00      	nop
 8005130:	fe10803f 	.word	0xfe10803f
 8005134:	5c001000 	.word	0x5c001000
 8005138:	ffff0000 	.word	0xffff0000
 800513c:	58025408 	.word	0x58025408
 8005140:	5802541c 	.word	0x5802541c
 8005144:	58025430 	.word	0x58025430
 8005148:	58025444 	.word	0x58025444
 800514c:	58025458 	.word	0x58025458
 8005150:	5802546c 	.word	0x5802546c
 8005154:	58025480 	.word	0x58025480
 8005158:	58025494 	.word	0x58025494
 800515c:	fffe000f 	.word	0xfffe000f
 8005160:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68d2      	ldr	r2, [r2, #12]
 8005166:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005168:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005170:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005190:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005360 <HAL_DMA_Init+0x650>)
 80051a8:	4413      	add	r3, r2
 80051aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005364 <HAL_DMA_Init+0x654>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	009a      	lsls	r2, r3, #2
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f002 f9b5 	bl	8007528 <DMA_CalcBaseAndBitshift>
 80051be:	4603      	mov	r3, r0
 80051c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2201      	movs	r2, #1
 80051cc:	409a      	lsls	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	e008      	b.n	80051e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2240      	movs	r2, #64	@ 0x40
 80051d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2203      	movs	r2, #3
 80051de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e0b7      	b.n	8005356 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a5f      	ldr	r2, [pc, #380]	@ (8005368 <HAL_DMA_Init+0x658>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d072      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a5d      	ldr	r2, [pc, #372]	@ (800536c <HAL_DMA_Init+0x65c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d06d      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005370 <HAL_DMA_Init+0x660>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d068      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a5a      	ldr	r2, [pc, #360]	@ (8005374 <HAL_DMA_Init+0x664>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d063      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a59      	ldr	r2, [pc, #356]	@ (8005378 <HAL_DMA_Init+0x668>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d05e      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a57      	ldr	r2, [pc, #348]	@ (800537c <HAL_DMA_Init+0x66c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d059      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a56      	ldr	r2, [pc, #344]	@ (8005380 <HAL_DMA_Init+0x670>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d054      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a54      	ldr	r2, [pc, #336]	@ (8005384 <HAL_DMA_Init+0x674>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d04f      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a53      	ldr	r2, [pc, #332]	@ (8005388 <HAL_DMA_Init+0x678>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d04a      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a51      	ldr	r2, [pc, #324]	@ (800538c <HAL_DMA_Init+0x67c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d045      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a50      	ldr	r2, [pc, #320]	@ (8005390 <HAL_DMA_Init+0x680>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d040      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a4e      	ldr	r2, [pc, #312]	@ (8005394 <HAL_DMA_Init+0x684>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d03b      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a4d      	ldr	r2, [pc, #308]	@ (8005398 <HAL_DMA_Init+0x688>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d036      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a4b      	ldr	r2, [pc, #300]	@ (800539c <HAL_DMA_Init+0x68c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d031      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a4a      	ldr	r2, [pc, #296]	@ (80053a0 <HAL_DMA_Init+0x690>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d02c      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a48      	ldr	r2, [pc, #288]	@ (80053a4 <HAL_DMA_Init+0x694>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d027      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a47      	ldr	r2, [pc, #284]	@ (80053a8 <HAL_DMA_Init+0x698>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d022      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a45      	ldr	r2, [pc, #276]	@ (80053ac <HAL_DMA_Init+0x69c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01d      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a44      	ldr	r2, [pc, #272]	@ (80053b0 <HAL_DMA_Init+0x6a0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d018      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a42      	ldr	r2, [pc, #264]	@ (80053b4 <HAL_DMA_Init+0x6a4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a41      	ldr	r2, [pc, #260]	@ (80053b8 <HAL_DMA_Init+0x6a8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3f      	ldr	r2, [pc, #252]	@ (80053bc <HAL_DMA_Init+0x6ac>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a3e      	ldr	r2, [pc, #248]	@ (80053c0 <HAL_DMA_Init+0x6b0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_DMA_Init+0x5c6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a3c      	ldr	r2, [pc, #240]	@ (80053c4 <HAL_DMA_Init+0x6b4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <HAL_DMA_Init+0x5ca>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <HAL_DMA_Init+0x5cc>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d032      	beq.n	8005346 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f002 fa4f 	bl	8007784 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b80      	cmp	r3, #128	@ 0x80
 80052ec:	d102      	bne.n	80052f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005308:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_DMA_Init+0x624>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b08      	cmp	r3, #8
 8005318:	d80c      	bhi.n	8005334 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f002 facc 	bl	80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	e008      	b.n	8005346 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	a7fdabf8 	.word	0xa7fdabf8
 8005364:	cccccccd 	.word	0xcccccccd
 8005368:	40020010 	.word	0x40020010
 800536c:	40020028 	.word	0x40020028
 8005370:	40020040 	.word	0x40020040
 8005374:	40020058 	.word	0x40020058
 8005378:	40020070 	.word	0x40020070
 800537c:	40020088 	.word	0x40020088
 8005380:	400200a0 	.word	0x400200a0
 8005384:	400200b8 	.word	0x400200b8
 8005388:	40020410 	.word	0x40020410
 800538c:	40020428 	.word	0x40020428
 8005390:	40020440 	.word	0x40020440
 8005394:	40020458 	.word	0x40020458
 8005398:	40020470 	.word	0x40020470
 800539c:	40020488 	.word	0x40020488
 80053a0:	400204a0 	.word	0x400204a0
 80053a4:	400204b8 	.word	0x400204b8
 80053a8:	58025408 	.word	0x58025408
 80053ac:	5802541c 	.word	0x5802541c
 80053b0:	58025430 	.word	0x58025430
 80053b4:	58025444 	.word	0x58025444
 80053b8:	58025458 	.word	0x58025458
 80053bc:	5802546c 	.word	0x5802546c
 80053c0:	58025480 	.word	0x58025480
 80053c4:	58025494 	.word	0x58025494

080053c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e226      	b.n	8005832 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_DMA_Start_IT+0x2a>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e21f      	b.n	8005832 <HAL_DMA_Start_IT+0x46a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	f040 820a 	bne.w	800581c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a68      	ldr	r2, [pc, #416]	@ (80055bc <HAL_DMA_Start_IT+0x1f4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d04a      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a66      	ldr	r2, [pc, #408]	@ (80055c0 <HAL_DMA_Start_IT+0x1f8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d045      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a65      	ldr	r2, [pc, #404]	@ (80055c4 <HAL_DMA_Start_IT+0x1fc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d040      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a63      	ldr	r2, [pc, #396]	@ (80055c8 <HAL_DMA_Start_IT+0x200>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d03b      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a62      	ldr	r2, [pc, #392]	@ (80055cc <HAL_DMA_Start_IT+0x204>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d036      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a60      	ldr	r2, [pc, #384]	@ (80055d0 <HAL_DMA_Start_IT+0x208>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d031      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a5f      	ldr	r2, [pc, #380]	@ (80055d4 <HAL_DMA_Start_IT+0x20c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d02c      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a5d      	ldr	r2, [pc, #372]	@ (80055d8 <HAL_DMA_Start_IT+0x210>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d027      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a5c      	ldr	r2, [pc, #368]	@ (80055dc <HAL_DMA_Start_IT+0x214>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a5a      	ldr	r2, [pc, #360]	@ (80055e0 <HAL_DMA_Start_IT+0x218>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01d      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a59      	ldr	r2, [pc, #356]	@ (80055e4 <HAL_DMA_Start_IT+0x21c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a57      	ldr	r2, [pc, #348]	@ (80055e8 <HAL_DMA_Start_IT+0x220>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a56      	ldr	r2, [pc, #344]	@ (80055ec <HAL_DMA_Start_IT+0x224>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a54      	ldr	r2, [pc, #336]	@ (80055f0 <HAL_DMA_Start_IT+0x228>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a53      	ldr	r2, [pc, #332]	@ (80055f4 <HAL_DMA_Start_IT+0x22c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_DMA_Start_IT+0xee>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a51      	ldr	r2, [pc, #324]	@ (80055f8 <HAL_DMA_Start_IT+0x230>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d108      	bne.n	80054c8 <HAL_DMA_Start_IT+0x100>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e007      	b.n	80054d8 <HAL_DMA_Start_IT+0x110>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f001 fe76 	bl	80071d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a34      	ldr	r2, [pc, #208]	@ (80055bc <HAL_DMA_Start_IT+0x1f4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04a      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a33      	ldr	r2, [pc, #204]	@ (80055c0 <HAL_DMA_Start_IT+0x1f8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d045      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a31      	ldr	r2, [pc, #196]	@ (80055c4 <HAL_DMA_Start_IT+0x1fc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d040      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a30      	ldr	r2, [pc, #192]	@ (80055c8 <HAL_DMA_Start_IT+0x200>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d03b      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a2e      	ldr	r2, [pc, #184]	@ (80055cc <HAL_DMA_Start_IT+0x204>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d036      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a2d      	ldr	r2, [pc, #180]	@ (80055d0 <HAL_DMA_Start_IT+0x208>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d031      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2b      	ldr	r2, [pc, #172]	@ (80055d4 <HAL_DMA_Start_IT+0x20c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02c      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a2a      	ldr	r2, [pc, #168]	@ (80055d8 <HAL_DMA_Start_IT+0x210>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d027      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a28      	ldr	r2, [pc, #160]	@ (80055dc <HAL_DMA_Start_IT+0x214>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a27      	ldr	r2, [pc, #156]	@ (80055e0 <HAL_DMA_Start_IT+0x218>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01d      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a25      	ldr	r2, [pc, #148]	@ (80055e4 <HAL_DMA_Start_IT+0x21c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a24      	ldr	r2, [pc, #144]	@ (80055e8 <HAL_DMA_Start_IT+0x220>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a22      	ldr	r2, [pc, #136]	@ (80055ec <HAL_DMA_Start_IT+0x224>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a21      	ldr	r2, [pc, #132]	@ (80055f0 <HAL_DMA_Start_IT+0x228>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1f      	ldr	r2, [pc, #124]	@ (80055f4 <HAL_DMA_Start_IT+0x22c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_DMA_Start_IT+0x1bc>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1e      	ldr	r2, [pc, #120]	@ (80055f8 <HAL_DMA_Start_IT+0x230>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_DMA_Start_IT+0x1c0>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_DMA_Start_IT+0x1c2>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d036      	beq.n	80055fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f023 021e 	bic.w	r2, r3, #30
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0216 	orr.w	r2, r2, #22
 80055a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d03e      	beq.n	8005628 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0208 	orr.w	r2, r2, #8
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	e035      	b.n	8005628 <HAL_DMA_Start_IT+0x260>
 80055bc:	40020010 	.word	0x40020010
 80055c0:	40020028 	.word	0x40020028
 80055c4:	40020040 	.word	0x40020040
 80055c8:	40020058 	.word	0x40020058
 80055cc:	40020070 	.word	0x40020070
 80055d0:	40020088 	.word	0x40020088
 80055d4:	400200a0 	.word	0x400200a0
 80055d8:	400200b8 	.word	0x400200b8
 80055dc:	40020410 	.word	0x40020410
 80055e0:	40020428 	.word	0x40020428
 80055e4:	40020440 	.word	0x40020440
 80055e8:	40020458 	.word	0x40020458
 80055ec:	40020470 	.word	0x40020470
 80055f0:	40020488 	.word	0x40020488
 80055f4:	400204a0 	.word	0x400204a0
 80055f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f023 020e 	bic.w	r2, r3, #14
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 020a 	orr.w	r2, r2, #10
 800560e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0204 	orr.w	r2, r2, #4
 8005626:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a83      	ldr	r2, [pc, #524]	@ (800583c <HAL_DMA_Start_IT+0x474>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d072      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a82      	ldr	r2, [pc, #520]	@ (8005840 <HAL_DMA_Start_IT+0x478>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d06d      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a80      	ldr	r2, [pc, #512]	@ (8005844 <HAL_DMA_Start_IT+0x47c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d068      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a7f      	ldr	r2, [pc, #508]	@ (8005848 <HAL_DMA_Start_IT+0x480>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d063      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a7d      	ldr	r2, [pc, #500]	@ (800584c <HAL_DMA_Start_IT+0x484>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d05e      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a7c      	ldr	r2, [pc, #496]	@ (8005850 <HAL_DMA_Start_IT+0x488>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d059      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a7a      	ldr	r2, [pc, #488]	@ (8005854 <HAL_DMA_Start_IT+0x48c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d054      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a79      	ldr	r2, [pc, #484]	@ (8005858 <HAL_DMA_Start_IT+0x490>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d04f      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a77      	ldr	r2, [pc, #476]	@ (800585c <HAL_DMA_Start_IT+0x494>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d04a      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a76      	ldr	r2, [pc, #472]	@ (8005860 <HAL_DMA_Start_IT+0x498>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d045      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a74      	ldr	r2, [pc, #464]	@ (8005864 <HAL_DMA_Start_IT+0x49c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d040      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a73      	ldr	r2, [pc, #460]	@ (8005868 <HAL_DMA_Start_IT+0x4a0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d03b      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a71      	ldr	r2, [pc, #452]	@ (800586c <HAL_DMA_Start_IT+0x4a4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d036      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a70      	ldr	r2, [pc, #448]	@ (8005870 <HAL_DMA_Start_IT+0x4a8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d031      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005874 <HAL_DMA_Start_IT+0x4ac>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02c      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005878 <HAL_DMA_Start_IT+0x4b0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d027      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a6b      	ldr	r2, [pc, #428]	@ (800587c <HAL_DMA_Start_IT+0x4b4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d022      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005880 <HAL_DMA_Start_IT+0x4b8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d01d      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a68      	ldr	r2, [pc, #416]	@ (8005884 <HAL_DMA_Start_IT+0x4bc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d018      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a67      	ldr	r2, [pc, #412]	@ (8005888 <HAL_DMA_Start_IT+0x4c0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a65      	ldr	r2, [pc, #404]	@ (800588c <HAL_DMA_Start_IT+0x4c4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a64      	ldr	r2, [pc, #400]	@ (8005890 <HAL_DMA_Start_IT+0x4c8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d009      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a62      	ldr	r2, [pc, #392]	@ (8005894 <HAL_DMA_Start_IT+0x4cc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_DMA_Start_IT+0x350>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a61      	ldr	r2, [pc, #388]	@ (8005898 <HAL_DMA_Start_IT+0x4d0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d101      	bne.n	800571c <HAL_DMA_Start_IT+0x354>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <HAL_DMA_Start_IT+0x356>
 800571c:	2300      	movs	r3, #0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d01a      	beq.n	8005758 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800573e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005756:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a37      	ldr	r2, [pc, #220]	@ (800583c <HAL_DMA_Start_IT+0x474>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d04a      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a36      	ldr	r2, [pc, #216]	@ (8005840 <HAL_DMA_Start_IT+0x478>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d045      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a34      	ldr	r2, [pc, #208]	@ (8005844 <HAL_DMA_Start_IT+0x47c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d040      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a33      	ldr	r2, [pc, #204]	@ (8005848 <HAL_DMA_Start_IT+0x480>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d03b      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a31      	ldr	r2, [pc, #196]	@ (800584c <HAL_DMA_Start_IT+0x484>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d036      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a30      	ldr	r2, [pc, #192]	@ (8005850 <HAL_DMA_Start_IT+0x488>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d031      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2e      	ldr	r2, [pc, #184]	@ (8005854 <HAL_DMA_Start_IT+0x48c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d02c      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005858 <HAL_DMA_Start_IT+0x490>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d027      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2b      	ldr	r2, [pc, #172]	@ (800585c <HAL_DMA_Start_IT+0x494>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d022      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005860 <HAL_DMA_Start_IT+0x498>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d01d      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a28      	ldr	r2, [pc, #160]	@ (8005864 <HAL_DMA_Start_IT+0x49c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d018      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a27      	ldr	r2, [pc, #156]	@ (8005868 <HAL_DMA_Start_IT+0x4a0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a25      	ldr	r2, [pc, #148]	@ (800586c <HAL_DMA_Start_IT+0x4a4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00e      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a24      	ldr	r2, [pc, #144]	@ (8005870 <HAL_DMA_Start_IT+0x4a8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a22      	ldr	r2, [pc, #136]	@ (8005874 <HAL_DMA_Start_IT+0x4ac>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_DMA_Start_IT+0x430>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a21      	ldr	r2, [pc, #132]	@ (8005878 <HAL_DMA_Start_IT+0x4b0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d108      	bne.n	800580a <HAL_DMA_Start_IT+0x442>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	e012      	b.n	8005830 <HAL_DMA_Start_IT+0x468>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e009      	b.n	8005830 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40020010 	.word	0x40020010
 8005840:	40020028 	.word	0x40020028
 8005844:	40020040 	.word	0x40020040
 8005848:	40020058 	.word	0x40020058
 800584c:	40020070 	.word	0x40020070
 8005850:	40020088 	.word	0x40020088
 8005854:	400200a0 	.word	0x400200a0
 8005858:	400200b8 	.word	0x400200b8
 800585c:	40020410 	.word	0x40020410
 8005860:	40020428 	.word	0x40020428
 8005864:	40020440 	.word	0x40020440
 8005868:	40020458 	.word	0x40020458
 800586c:	40020470 	.word	0x40020470
 8005870:	40020488 	.word	0x40020488
 8005874:	400204a0 	.word	0x400204a0
 8005878:	400204b8 	.word	0x400204b8
 800587c:	58025408 	.word	0x58025408
 8005880:	5802541c 	.word	0x5802541c
 8005884:	58025430 	.word	0x58025430
 8005888:	58025444 	.word	0x58025444
 800588c:	58025458 	.word	0x58025458
 8005890:	5802546c 	.word	0x5802546c
 8005894:	58025480 	.word	0x58025480
 8005898:	58025494 	.word	0x58025494

0800589c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80058a4:	f7fd fe46 	bl	8003534 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e2dc      	b.n	8005e6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d008      	beq.n	80058d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2280      	movs	r2, #128	@ 0x80
 80058c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e2cd      	b.n	8005e6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a76      	ldr	r2, [pc, #472]	@ (8005ab0 <HAL_DMA_Abort+0x214>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d04a      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a74      	ldr	r2, [pc, #464]	@ (8005ab4 <HAL_DMA_Abort+0x218>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d045      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a73      	ldr	r2, [pc, #460]	@ (8005ab8 <HAL_DMA_Abort+0x21c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d040      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a71      	ldr	r2, [pc, #452]	@ (8005abc <HAL_DMA_Abort+0x220>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d03b      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a70      	ldr	r2, [pc, #448]	@ (8005ac0 <HAL_DMA_Abort+0x224>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d036      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a6e      	ldr	r2, [pc, #440]	@ (8005ac4 <HAL_DMA_Abort+0x228>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d031      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a6d      	ldr	r2, [pc, #436]	@ (8005ac8 <HAL_DMA_Abort+0x22c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d02c      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a6b      	ldr	r2, [pc, #428]	@ (8005acc <HAL_DMA_Abort+0x230>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d027      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a6a      	ldr	r2, [pc, #424]	@ (8005ad0 <HAL_DMA_Abort+0x234>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d022      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a68      	ldr	r2, [pc, #416]	@ (8005ad4 <HAL_DMA_Abort+0x238>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01d      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a67      	ldr	r2, [pc, #412]	@ (8005ad8 <HAL_DMA_Abort+0x23c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d018      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a65      	ldr	r2, [pc, #404]	@ (8005adc <HAL_DMA_Abort+0x240>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d013      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a64      	ldr	r2, [pc, #400]	@ (8005ae0 <HAL_DMA_Abort+0x244>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a62      	ldr	r2, [pc, #392]	@ (8005ae4 <HAL_DMA_Abort+0x248>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a61      	ldr	r2, [pc, #388]	@ (8005ae8 <HAL_DMA_Abort+0x24c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_DMA_Abort+0xd6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a5f      	ldr	r2, [pc, #380]	@ (8005aec <HAL_DMA_Abort+0x250>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d101      	bne.n	8005976 <HAL_DMA_Abort+0xda>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <HAL_DMA_Abort+0xdc>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d013      	beq.n	80059a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 021e 	bic.w	r2, r2, #30
 800598a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800599a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e00a      	b.n	80059ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 020e 	bic.w	r2, r2, #14
 80059b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3c      	ldr	r2, [pc, #240]	@ (8005ab0 <HAL_DMA_Abort+0x214>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d072      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3a      	ldr	r2, [pc, #232]	@ (8005ab4 <HAL_DMA_Abort+0x218>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d06d      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a39      	ldr	r2, [pc, #228]	@ (8005ab8 <HAL_DMA_Abort+0x21c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d068      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a37      	ldr	r2, [pc, #220]	@ (8005abc <HAL_DMA_Abort+0x220>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d063      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a36      	ldr	r2, [pc, #216]	@ (8005ac0 <HAL_DMA_Abort+0x224>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d05e      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a34      	ldr	r2, [pc, #208]	@ (8005ac4 <HAL_DMA_Abort+0x228>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d059      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a33      	ldr	r2, [pc, #204]	@ (8005ac8 <HAL_DMA_Abort+0x22c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d054      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a31      	ldr	r2, [pc, #196]	@ (8005acc <HAL_DMA_Abort+0x230>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d04f      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a30      	ldr	r2, [pc, #192]	@ (8005ad0 <HAL_DMA_Abort+0x234>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d04a      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad4 <HAL_DMA_Abort+0x238>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d045      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad8 <HAL_DMA_Abort+0x23c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d040      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005adc <HAL_DMA_Abort+0x240>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d03b      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae0 <HAL_DMA_Abort+0x244>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d036      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a28      	ldr	r2, [pc, #160]	@ (8005ae4 <HAL_DMA_Abort+0x248>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d031      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a27      	ldr	r2, [pc, #156]	@ (8005ae8 <HAL_DMA_Abort+0x24c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d02c      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a25      	ldr	r2, [pc, #148]	@ (8005aec <HAL_DMA_Abort+0x250>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d027      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a24      	ldr	r2, [pc, #144]	@ (8005af0 <HAL_DMA_Abort+0x254>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a22      	ldr	r2, [pc, #136]	@ (8005af4 <HAL_DMA_Abort+0x258>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a21      	ldr	r2, [pc, #132]	@ (8005af8 <HAL_DMA_Abort+0x25c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005afc <HAL_DMA_Abort+0x260>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1e      	ldr	r2, [pc, #120]	@ (8005b00 <HAL_DMA_Abort+0x264>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	@ (8005b04 <HAL_DMA_Abort+0x268>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <HAL_DMA_Abort+0x26c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_DMA_Abort+0x20e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	@ (8005b0c <HAL_DMA_Abort+0x270>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d132      	bne.n	8005b10 <HAL_DMA_Abort+0x274>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e031      	b.n	8005b12 <HAL_DMA_Abort+0x276>
 8005aae:	bf00      	nop
 8005ab0:	40020010 	.word	0x40020010
 8005ab4:	40020028 	.word	0x40020028
 8005ab8:	40020040 	.word	0x40020040
 8005abc:	40020058 	.word	0x40020058
 8005ac0:	40020070 	.word	0x40020070
 8005ac4:	40020088 	.word	0x40020088
 8005ac8:	400200a0 	.word	0x400200a0
 8005acc:	400200b8 	.word	0x400200b8
 8005ad0:	40020410 	.word	0x40020410
 8005ad4:	40020428 	.word	0x40020428
 8005ad8:	40020440 	.word	0x40020440
 8005adc:	40020458 	.word	0x40020458
 8005ae0:	40020470 	.word	0x40020470
 8005ae4:	40020488 	.word	0x40020488
 8005ae8:	400204a0 	.word	0x400204a0
 8005aec:	400204b8 	.word	0x400204b8
 8005af0:	58025408 	.word	0x58025408
 8005af4:	5802541c 	.word	0x5802541c
 8005af8:	58025430 	.word	0x58025430
 8005afc:	58025444 	.word	0x58025444
 8005b00:	58025458 	.word	0x58025458
 8005b04:	5802546c 	.word	0x5802546c
 8005b08:	58025480 	.word	0x58025480
 8005b0c:	58025494 	.word	0x58025494
 8005b10:	2300      	movs	r3, #0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6d      	ldr	r2, [pc, #436]	@ (8005ce0 <HAL_DMA_Abort+0x444>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d04a      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a6b      	ldr	r2, [pc, #428]	@ (8005ce4 <HAL_DMA_Abort+0x448>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d045      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a6a      	ldr	r2, [pc, #424]	@ (8005ce8 <HAL_DMA_Abort+0x44c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d040      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a68      	ldr	r2, [pc, #416]	@ (8005cec <HAL_DMA_Abort+0x450>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d03b      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a67      	ldr	r2, [pc, #412]	@ (8005cf0 <HAL_DMA_Abort+0x454>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d036      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a65      	ldr	r2, [pc, #404]	@ (8005cf4 <HAL_DMA_Abort+0x458>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d031      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a64      	ldr	r2, [pc, #400]	@ (8005cf8 <HAL_DMA_Abort+0x45c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d02c      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a62      	ldr	r2, [pc, #392]	@ (8005cfc <HAL_DMA_Abort+0x460>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d027      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a61      	ldr	r2, [pc, #388]	@ (8005d00 <HAL_DMA_Abort+0x464>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d022      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a5f      	ldr	r2, [pc, #380]	@ (8005d04 <HAL_DMA_Abort+0x468>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d01d      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8005d08 <HAL_DMA_Abort+0x46c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d018      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5c      	ldr	r2, [pc, #368]	@ (8005d0c <HAL_DMA_Abort+0x470>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8005d10 <HAL_DMA_Abort+0x474>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a59      	ldr	r2, [pc, #356]	@ (8005d14 <HAL_DMA_Abort+0x478>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a58      	ldr	r2, [pc, #352]	@ (8005d18 <HAL_DMA_Abort+0x47c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_DMA_Abort+0x32a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a56      	ldr	r2, [pc, #344]	@ (8005d1c <HAL_DMA_Abort+0x480>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d108      	bne.n	8005bd8 <HAL_DMA_Abort+0x33c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e007      	b.n	8005be8 <HAL_DMA_Abort+0x34c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005be8:	e013      	b.n	8005c12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bea:	f7fd fca3 	bl	8003534 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b05      	cmp	r3, #5
 8005bf6:	d90c      	bls.n	8005c12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2203      	movs	r2, #3
 8005c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e12d      	b.n	8005e6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2f      	ldr	r2, [pc, #188]	@ (8005ce0 <HAL_DMA_Abort+0x444>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d04a      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ce4 <HAL_DMA_Abort+0x448>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d045      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <HAL_DMA_Abort+0x44c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d040      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2a      	ldr	r2, [pc, #168]	@ (8005cec <HAL_DMA_Abort+0x450>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d03b      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a29      	ldr	r2, [pc, #164]	@ (8005cf0 <HAL_DMA_Abort+0x454>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d036      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a27      	ldr	r2, [pc, #156]	@ (8005cf4 <HAL_DMA_Abort+0x458>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d031      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a26      	ldr	r2, [pc, #152]	@ (8005cf8 <HAL_DMA_Abort+0x45c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d02c      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a24      	ldr	r2, [pc, #144]	@ (8005cfc <HAL_DMA_Abort+0x460>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d027      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a23      	ldr	r2, [pc, #140]	@ (8005d00 <HAL_DMA_Abort+0x464>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d022      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a21      	ldr	r2, [pc, #132]	@ (8005d04 <HAL_DMA_Abort+0x468>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01d      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a20      	ldr	r2, [pc, #128]	@ (8005d08 <HAL_DMA_Abort+0x46c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d018      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1e      	ldr	r2, [pc, #120]	@ (8005d0c <HAL_DMA_Abort+0x470>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d10 <HAL_DMA_Abort+0x474>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d14 <HAL_DMA_Abort+0x478>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1a      	ldr	r2, [pc, #104]	@ (8005d18 <HAL_DMA_Abort+0x47c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_DMA_Abort+0x422>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a18      	ldr	r2, [pc, #96]	@ (8005d1c <HAL_DMA_Abort+0x480>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d101      	bne.n	8005cc2 <HAL_DMA_Abort+0x426>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <HAL_DMA_Abort+0x428>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d02b      	beq.n	8005d20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ccc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	223f      	movs	r2, #63	@ 0x3f
 8005cd8:	409a      	lsls	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	609a      	str	r2, [r3, #8]
 8005cde:	e02a      	b.n	8005d36 <HAL_DMA_Abort+0x49a>
 8005ce0:	40020010 	.word	0x40020010
 8005ce4:	40020028 	.word	0x40020028
 8005ce8:	40020040 	.word	0x40020040
 8005cec:	40020058 	.word	0x40020058
 8005cf0:	40020070 	.word	0x40020070
 8005cf4:	40020088 	.word	0x40020088
 8005cf8:	400200a0 	.word	0x400200a0
 8005cfc:	400200b8 	.word	0x400200b8
 8005d00:	40020410 	.word	0x40020410
 8005d04:	40020428 	.word	0x40020428
 8005d08:	40020440 	.word	0x40020440
 8005d0c:	40020458 	.word	0x40020458
 8005d10:	40020470 	.word	0x40020470
 8005d14:	40020488 	.word	0x40020488
 8005d18:	400204a0 	.word	0x400204a0
 8005d1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2201      	movs	r2, #1
 8005d30:	409a      	lsls	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8005e78 <HAL_DMA_Abort+0x5dc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d072      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a4d      	ldr	r2, [pc, #308]	@ (8005e7c <HAL_DMA_Abort+0x5e0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d06d      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8005e80 <HAL_DMA_Abort+0x5e4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d068      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a4a      	ldr	r2, [pc, #296]	@ (8005e84 <HAL_DMA_Abort+0x5e8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d063      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a49      	ldr	r2, [pc, #292]	@ (8005e88 <HAL_DMA_Abort+0x5ec>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d05e      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a47      	ldr	r2, [pc, #284]	@ (8005e8c <HAL_DMA_Abort+0x5f0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d059      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a46      	ldr	r2, [pc, #280]	@ (8005e90 <HAL_DMA_Abort+0x5f4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d054      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a44      	ldr	r2, [pc, #272]	@ (8005e94 <HAL_DMA_Abort+0x5f8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d04f      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a43      	ldr	r2, [pc, #268]	@ (8005e98 <HAL_DMA_Abort+0x5fc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d04a      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a41      	ldr	r2, [pc, #260]	@ (8005e9c <HAL_DMA_Abort+0x600>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d045      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a40      	ldr	r2, [pc, #256]	@ (8005ea0 <HAL_DMA_Abort+0x604>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d040      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ea4 <HAL_DMA_Abort+0x608>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d03b      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a3d      	ldr	r2, [pc, #244]	@ (8005ea8 <HAL_DMA_Abort+0x60c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d036      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8005eac <HAL_DMA_Abort+0x610>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d031      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8005eb0 <HAL_DMA_Abort+0x614>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d02c      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a38      	ldr	r2, [pc, #224]	@ (8005eb4 <HAL_DMA_Abort+0x618>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d027      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a37      	ldr	r2, [pc, #220]	@ (8005eb8 <HAL_DMA_Abort+0x61c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d022      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a35      	ldr	r2, [pc, #212]	@ (8005ebc <HAL_DMA_Abort+0x620>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01d      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a34      	ldr	r2, [pc, #208]	@ (8005ec0 <HAL_DMA_Abort+0x624>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d018      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a32      	ldr	r2, [pc, #200]	@ (8005ec4 <HAL_DMA_Abort+0x628>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a31      	ldr	r2, [pc, #196]	@ (8005ec8 <HAL_DMA_Abort+0x62c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00e      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005ecc <HAL_DMA_Abort+0x630>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2e      	ldr	r2, [pc, #184]	@ (8005ed0 <HAL_DMA_Abort+0x634>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_DMA_Abort+0x58a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed4 <HAL_DMA_Abort+0x638>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d101      	bne.n	8005e2a <HAL_DMA_Abort+0x58e>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <HAL_DMA_Abort+0x590>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d015      	beq.n	8005e5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00c      	beq.n	8005e5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40020010 	.word	0x40020010
 8005e7c:	40020028 	.word	0x40020028
 8005e80:	40020040 	.word	0x40020040
 8005e84:	40020058 	.word	0x40020058
 8005e88:	40020070 	.word	0x40020070
 8005e8c:	40020088 	.word	0x40020088
 8005e90:	400200a0 	.word	0x400200a0
 8005e94:	400200b8 	.word	0x400200b8
 8005e98:	40020410 	.word	0x40020410
 8005e9c:	40020428 	.word	0x40020428
 8005ea0:	40020440 	.word	0x40020440
 8005ea4:	40020458 	.word	0x40020458
 8005ea8:	40020470 	.word	0x40020470
 8005eac:	40020488 	.word	0x40020488
 8005eb0:	400204a0 	.word	0x400204a0
 8005eb4:	400204b8 	.word	0x400204b8
 8005eb8:	58025408 	.word	0x58025408
 8005ebc:	5802541c 	.word	0x5802541c
 8005ec0:	58025430 	.word	0x58025430
 8005ec4:	58025444 	.word	0x58025444
 8005ec8:	58025458 	.word	0x58025458
 8005ecc:	5802546c 	.word	0x5802546c
 8005ed0:	58025480 	.word	0x58025480
 8005ed4:	58025494 	.word	0x58025494

08005ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e237      	b.n	800635a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d004      	beq.n	8005f00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2280      	movs	r2, #128	@ 0x80
 8005efa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e22c      	b.n	800635a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a5c      	ldr	r2, [pc, #368]	@ (8006078 <HAL_DMA_Abort_IT+0x1a0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d04a      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800607c <HAL_DMA_Abort_IT+0x1a4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d045      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a59      	ldr	r2, [pc, #356]	@ (8006080 <HAL_DMA_Abort_IT+0x1a8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d040      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a58      	ldr	r2, [pc, #352]	@ (8006084 <HAL_DMA_Abort_IT+0x1ac>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d03b      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a56      	ldr	r2, [pc, #344]	@ (8006088 <HAL_DMA_Abort_IT+0x1b0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d036      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a55      	ldr	r2, [pc, #340]	@ (800608c <HAL_DMA_Abort_IT+0x1b4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d031      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a53      	ldr	r2, [pc, #332]	@ (8006090 <HAL_DMA_Abort_IT+0x1b8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d02c      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a52      	ldr	r2, [pc, #328]	@ (8006094 <HAL_DMA_Abort_IT+0x1bc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d027      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a50      	ldr	r2, [pc, #320]	@ (8006098 <HAL_DMA_Abort_IT+0x1c0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d022      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a4f      	ldr	r2, [pc, #316]	@ (800609c <HAL_DMA_Abort_IT+0x1c4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d01d      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a4d      	ldr	r2, [pc, #308]	@ (80060a0 <HAL_DMA_Abort_IT+0x1c8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d018      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a4c      	ldr	r2, [pc, #304]	@ (80060a4 <HAL_DMA_Abort_IT+0x1cc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80060a8 <HAL_DMA_Abort_IT+0x1d0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a49      	ldr	r2, [pc, #292]	@ (80060ac <HAL_DMA_Abort_IT+0x1d4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a47      	ldr	r2, [pc, #284]	@ (80060b0 <HAL_DMA_Abort_IT+0x1d8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a46      	ldr	r2, [pc, #280]	@ (80060b4 <HAL_DMA_Abort_IT+0x1dc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_DMA_Abort_IT+0xcc>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <HAL_DMA_Abort_IT+0xce>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8086 	beq.w	80060b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8006078 <HAL_DMA_Abort_IT+0x1a0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d04a      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800607c <HAL_DMA_Abort_IT+0x1a4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d045      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8006080 <HAL_DMA_Abort_IT+0x1a8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d040      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006084 <HAL_DMA_Abort_IT+0x1ac>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d03b      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a29      	ldr	r2, [pc, #164]	@ (8006088 <HAL_DMA_Abort_IT+0x1b0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d036      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a28      	ldr	r2, [pc, #160]	@ (800608c <HAL_DMA_Abort_IT+0x1b4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d031      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a26      	ldr	r2, [pc, #152]	@ (8006090 <HAL_DMA_Abort_IT+0x1b8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02c      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a25      	ldr	r2, [pc, #148]	@ (8006094 <HAL_DMA_Abort_IT+0x1bc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d027      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a23      	ldr	r2, [pc, #140]	@ (8006098 <HAL_DMA_Abort_IT+0x1c0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d022      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a22      	ldr	r2, [pc, #136]	@ (800609c <HAL_DMA_Abort_IT+0x1c4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d01d      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a20      	ldr	r2, [pc, #128]	@ (80060a0 <HAL_DMA_Abort_IT+0x1c8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d018      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1f      	ldr	r2, [pc, #124]	@ (80060a4 <HAL_DMA_Abort_IT+0x1cc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d013      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1d      	ldr	r2, [pc, #116]	@ (80060a8 <HAL_DMA_Abort_IT+0x1d0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00e      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1c      	ldr	r2, [pc, #112]	@ (80060ac <HAL_DMA_Abort_IT+0x1d4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d009      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1a      	ldr	r2, [pc, #104]	@ (80060b0 <HAL_DMA_Abort_IT+0x1d8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <HAL_DMA_Abort_IT+0x17c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a19      	ldr	r2, [pc, #100]	@ (80060b4 <HAL_DMA_Abort_IT+0x1dc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d108      	bne.n	8006066 <HAL_DMA_Abort_IT+0x18e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e178      	b.n	8006358 <HAL_DMA_Abort_IT+0x480>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e16f      	b.n	8006358 <HAL_DMA_Abort_IT+0x480>
 8006078:	40020010 	.word	0x40020010
 800607c:	40020028 	.word	0x40020028
 8006080:	40020040 	.word	0x40020040
 8006084:	40020058 	.word	0x40020058
 8006088:	40020070 	.word	0x40020070
 800608c:	40020088 	.word	0x40020088
 8006090:	400200a0 	.word	0x400200a0
 8006094:	400200b8 	.word	0x400200b8
 8006098:	40020410 	.word	0x40020410
 800609c:	40020428 	.word	0x40020428
 80060a0:	40020440 	.word	0x40020440
 80060a4:	40020458 	.word	0x40020458
 80060a8:	40020470 	.word	0x40020470
 80060ac:	40020488 	.word	0x40020488
 80060b0:	400204a0 	.word	0x400204a0
 80060b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 020e 	bic.w	r2, r2, #14
 80060c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a6c      	ldr	r2, [pc, #432]	@ (8006280 <HAL_DMA_Abort_IT+0x3a8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d04a      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006284 <HAL_DMA_Abort_IT+0x3ac>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d045      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a69      	ldr	r2, [pc, #420]	@ (8006288 <HAL_DMA_Abort_IT+0x3b0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d040      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a68      	ldr	r2, [pc, #416]	@ (800628c <HAL_DMA_Abort_IT+0x3b4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d03b      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a66      	ldr	r2, [pc, #408]	@ (8006290 <HAL_DMA_Abort_IT+0x3b8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d036      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a65      	ldr	r2, [pc, #404]	@ (8006294 <HAL_DMA_Abort_IT+0x3bc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d031      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a63      	ldr	r2, [pc, #396]	@ (8006298 <HAL_DMA_Abort_IT+0x3c0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d02c      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a62      	ldr	r2, [pc, #392]	@ (800629c <HAL_DMA_Abort_IT+0x3c4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d027      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a60      	ldr	r2, [pc, #384]	@ (80062a0 <HAL_DMA_Abort_IT+0x3c8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d022      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a5f      	ldr	r2, [pc, #380]	@ (80062a4 <HAL_DMA_Abort_IT+0x3cc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d01d      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a5d      	ldr	r2, [pc, #372]	@ (80062a8 <HAL_DMA_Abort_IT+0x3d0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d018      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a5c      	ldr	r2, [pc, #368]	@ (80062ac <HAL_DMA_Abort_IT+0x3d4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d013      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5a      	ldr	r2, [pc, #360]	@ (80062b0 <HAL_DMA_Abort_IT+0x3d8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00e      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a59      	ldr	r2, [pc, #356]	@ (80062b4 <HAL_DMA_Abort_IT+0x3dc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a57      	ldr	r2, [pc, #348]	@ (80062b8 <HAL_DMA_Abort_IT+0x3e0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_DMA_Abort_IT+0x290>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a56      	ldr	r2, [pc, #344]	@ (80062bc <HAL_DMA_Abort_IT+0x3e4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d108      	bne.n	800617a <HAL_DMA_Abort_IT+0x2a2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e007      	b.n	800618a <HAL_DMA_Abort_IT+0x2b2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a3c      	ldr	r2, [pc, #240]	@ (8006280 <HAL_DMA_Abort_IT+0x3a8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d072      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a3a      	ldr	r2, [pc, #232]	@ (8006284 <HAL_DMA_Abort_IT+0x3ac>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d06d      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a39      	ldr	r2, [pc, #228]	@ (8006288 <HAL_DMA_Abort_IT+0x3b0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d068      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a37      	ldr	r2, [pc, #220]	@ (800628c <HAL_DMA_Abort_IT+0x3b4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d063      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a36      	ldr	r2, [pc, #216]	@ (8006290 <HAL_DMA_Abort_IT+0x3b8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d05e      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a34      	ldr	r2, [pc, #208]	@ (8006294 <HAL_DMA_Abort_IT+0x3bc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d059      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a33      	ldr	r2, [pc, #204]	@ (8006298 <HAL_DMA_Abort_IT+0x3c0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d054      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a31      	ldr	r2, [pc, #196]	@ (800629c <HAL_DMA_Abort_IT+0x3c4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d04f      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a30      	ldr	r2, [pc, #192]	@ (80062a0 <HAL_DMA_Abort_IT+0x3c8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d04a      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a2e      	ldr	r2, [pc, #184]	@ (80062a4 <HAL_DMA_Abort_IT+0x3cc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d045      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a2d      	ldr	r2, [pc, #180]	@ (80062a8 <HAL_DMA_Abort_IT+0x3d0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d040      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2b      	ldr	r2, [pc, #172]	@ (80062ac <HAL_DMA_Abort_IT+0x3d4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d03b      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2a      	ldr	r2, [pc, #168]	@ (80062b0 <HAL_DMA_Abort_IT+0x3d8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d036      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a28      	ldr	r2, [pc, #160]	@ (80062b4 <HAL_DMA_Abort_IT+0x3dc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d031      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a27      	ldr	r2, [pc, #156]	@ (80062b8 <HAL_DMA_Abort_IT+0x3e0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d02c      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a25      	ldr	r2, [pc, #148]	@ (80062bc <HAL_DMA_Abort_IT+0x3e4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d027      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a24      	ldr	r2, [pc, #144]	@ (80062c0 <HAL_DMA_Abort_IT+0x3e8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a22      	ldr	r2, [pc, #136]	@ (80062c4 <HAL_DMA_Abort_IT+0x3ec>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01d      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a21      	ldr	r2, [pc, #132]	@ (80062c8 <HAL_DMA_Abort_IT+0x3f0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1f      	ldr	r2, [pc, #124]	@ (80062cc <HAL_DMA_Abort_IT+0x3f4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1e      	ldr	r2, [pc, #120]	@ (80062d0 <HAL_DMA_Abort_IT+0x3f8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1c      	ldr	r2, [pc, #112]	@ (80062d4 <HAL_DMA_Abort_IT+0x3fc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1b      	ldr	r2, [pc, #108]	@ (80062d8 <HAL_DMA_Abort_IT+0x400>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_DMA_Abort_IT+0x3a2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a19      	ldr	r2, [pc, #100]	@ (80062dc <HAL_DMA_Abort_IT+0x404>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d132      	bne.n	80062e0 <HAL_DMA_Abort_IT+0x408>
 800627a:	2301      	movs	r3, #1
 800627c:	e031      	b.n	80062e2 <HAL_DMA_Abort_IT+0x40a>
 800627e:	bf00      	nop
 8006280:	40020010 	.word	0x40020010
 8006284:	40020028 	.word	0x40020028
 8006288:	40020040 	.word	0x40020040
 800628c:	40020058 	.word	0x40020058
 8006290:	40020070 	.word	0x40020070
 8006294:	40020088 	.word	0x40020088
 8006298:	400200a0 	.word	0x400200a0
 800629c:	400200b8 	.word	0x400200b8
 80062a0:	40020410 	.word	0x40020410
 80062a4:	40020428 	.word	0x40020428
 80062a8:	40020440 	.word	0x40020440
 80062ac:	40020458 	.word	0x40020458
 80062b0:	40020470 	.word	0x40020470
 80062b4:	40020488 	.word	0x40020488
 80062b8:	400204a0 	.word	0x400204a0
 80062bc:	400204b8 	.word	0x400204b8
 80062c0:	58025408 	.word	0x58025408
 80062c4:	5802541c 	.word	0x5802541c
 80062c8:	58025430 	.word	0x58025430
 80062cc:	58025444 	.word	0x58025444
 80062d0:	58025458 	.word	0x58025458
 80062d4:	5802546c 	.word	0x5802546c
 80062d8:	58025480 	.word	0x58025480
 80062dc:	58025494 	.word	0x58025494
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d028      	beq.n	8006338 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	2201      	movs	r2, #1
 8006306:	409a      	lsls	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006314:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800632c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006336:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006370:	4b67      	ldr	r3, [pc, #412]	@ (8006510 <HAL_DMA_IRQHandler+0x1ac>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a67      	ldr	r2, [pc, #412]	@ (8006514 <HAL_DMA_IRQHandler+0x1b0>)
 8006376:	fba2 2303 	umull	r2, r3, r2, r3
 800637a:	0a9b      	lsrs	r3, r3, #10
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006382:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006388:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a5f      	ldr	r2, [pc, #380]	@ (8006518 <HAL_DMA_IRQHandler+0x1b4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d04a      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a5d      	ldr	r2, [pc, #372]	@ (800651c <HAL_DMA_IRQHandler+0x1b8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d045      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a5c      	ldr	r2, [pc, #368]	@ (8006520 <HAL_DMA_IRQHandler+0x1bc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d040      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a5a      	ldr	r2, [pc, #360]	@ (8006524 <HAL_DMA_IRQHandler+0x1c0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d03b      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a59      	ldr	r2, [pc, #356]	@ (8006528 <HAL_DMA_IRQHandler+0x1c4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d036      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a57      	ldr	r2, [pc, #348]	@ (800652c <HAL_DMA_IRQHandler+0x1c8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d031      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a56      	ldr	r2, [pc, #344]	@ (8006530 <HAL_DMA_IRQHandler+0x1cc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d02c      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a54      	ldr	r2, [pc, #336]	@ (8006534 <HAL_DMA_IRQHandler+0x1d0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d027      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a53      	ldr	r2, [pc, #332]	@ (8006538 <HAL_DMA_IRQHandler+0x1d4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a51      	ldr	r2, [pc, #324]	@ (800653c <HAL_DMA_IRQHandler+0x1d8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01d      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a50      	ldr	r2, [pc, #320]	@ (8006540 <HAL_DMA_IRQHandler+0x1dc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d018      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a4e      	ldr	r2, [pc, #312]	@ (8006544 <HAL_DMA_IRQHandler+0x1e0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a4d      	ldr	r2, [pc, #308]	@ (8006548 <HAL_DMA_IRQHandler+0x1e4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a4b      	ldr	r2, [pc, #300]	@ (800654c <HAL_DMA_IRQHandler+0x1e8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a4a      	ldr	r2, [pc, #296]	@ (8006550 <HAL_DMA_IRQHandler+0x1ec>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a48      	ldr	r2, [pc, #288]	@ (8006554 <HAL_DMA_IRQHandler+0x1f0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d101      	bne.n	800643a <HAL_DMA_IRQHandler+0xd6>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_DMA_IRQHandler+0xd8>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 842b 	beq.w	8006c98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2208      	movs	r2, #8
 800644c:	409a      	lsls	r2, r3
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80a2 	beq.w	800659c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a2e      	ldr	r2, [pc, #184]	@ (8006518 <HAL_DMA_IRQHandler+0x1b4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d04a      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a2d      	ldr	r2, [pc, #180]	@ (800651c <HAL_DMA_IRQHandler+0x1b8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d045      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2b      	ldr	r2, [pc, #172]	@ (8006520 <HAL_DMA_IRQHandler+0x1bc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d040      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2a      	ldr	r2, [pc, #168]	@ (8006524 <HAL_DMA_IRQHandler+0x1c0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d03b      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a28      	ldr	r2, [pc, #160]	@ (8006528 <HAL_DMA_IRQHandler+0x1c4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d036      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a27      	ldr	r2, [pc, #156]	@ (800652c <HAL_DMA_IRQHandler+0x1c8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d031      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a25      	ldr	r2, [pc, #148]	@ (8006530 <HAL_DMA_IRQHandler+0x1cc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d02c      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a24      	ldr	r2, [pc, #144]	@ (8006534 <HAL_DMA_IRQHandler+0x1d0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d027      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a22      	ldr	r2, [pc, #136]	@ (8006538 <HAL_DMA_IRQHandler+0x1d4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d022      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a21      	ldr	r2, [pc, #132]	@ (800653c <HAL_DMA_IRQHandler+0x1d8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d01d      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006540 <HAL_DMA_IRQHandler+0x1dc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d018      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006544 <HAL_DMA_IRQHandler+0x1e0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d013      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006548 <HAL_DMA_IRQHandler+0x1e4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00e      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1b      	ldr	r2, [pc, #108]	@ (800654c <HAL_DMA_IRQHandler+0x1e8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d009      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a19      	ldr	r2, [pc, #100]	@ (8006550 <HAL_DMA_IRQHandler+0x1ec>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d004      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a18      	ldr	r2, [pc, #96]	@ (8006554 <HAL_DMA_IRQHandler+0x1f0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d12f      	bne.n	8006558 <HAL_DMA_IRQHandler+0x1f4>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b00      	cmp	r3, #0
 8006504:	bf14      	ite	ne
 8006506:	2301      	movne	r3, #1
 8006508:	2300      	moveq	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	e02e      	b.n	800656c <HAL_DMA_IRQHandler+0x208>
 800650e:	bf00      	nop
 8006510:	24000004 	.word	0x24000004
 8006514:	1b4e81b5 	.word	0x1b4e81b5
 8006518:	40020010 	.word	0x40020010
 800651c:	40020028 	.word	0x40020028
 8006520:	40020040 	.word	0x40020040
 8006524:	40020058 	.word	0x40020058
 8006528:	40020070 	.word	0x40020070
 800652c:	40020088 	.word	0x40020088
 8006530:	400200a0 	.word	0x400200a0
 8006534:	400200b8 	.word	0x400200b8
 8006538:	40020410 	.word	0x40020410
 800653c:	40020428 	.word	0x40020428
 8006540:	40020440 	.word	0x40020440
 8006544:	40020458 	.word	0x40020458
 8006548:	40020470 	.word	0x40020470
 800654c:	40020488 	.word	0x40020488
 8006550:	400204a0 	.word	0x400204a0
 8006554:	400204b8 	.word	0x400204b8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf14      	ite	ne
 8006566:	2301      	movne	r3, #1
 8006568:	2300      	moveq	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0204 	bic.w	r2, r2, #4
 800657e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2208      	movs	r2, #8
 800658a:	409a      	lsls	r2, r3
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006594:	f043 0201 	orr.w	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	fa22 f303 	lsr.w	r3, r2, r3
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d06e      	beq.n	8006690 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a69      	ldr	r2, [pc, #420]	@ (800675c <HAL_DMA_IRQHandler+0x3f8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d04a      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a67      	ldr	r2, [pc, #412]	@ (8006760 <HAL_DMA_IRQHandler+0x3fc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d045      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a66      	ldr	r2, [pc, #408]	@ (8006764 <HAL_DMA_IRQHandler+0x400>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d040      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a64      	ldr	r2, [pc, #400]	@ (8006768 <HAL_DMA_IRQHandler+0x404>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d03b      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a63      	ldr	r2, [pc, #396]	@ (800676c <HAL_DMA_IRQHandler+0x408>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d036      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a61      	ldr	r2, [pc, #388]	@ (8006770 <HAL_DMA_IRQHandler+0x40c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d031      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a60      	ldr	r2, [pc, #384]	@ (8006774 <HAL_DMA_IRQHandler+0x410>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d02c      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a5e      	ldr	r2, [pc, #376]	@ (8006778 <HAL_DMA_IRQHandler+0x414>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d027      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a5d      	ldr	r2, [pc, #372]	@ (800677c <HAL_DMA_IRQHandler+0x418>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a5b      	ldr	r2, [pc, #364]	@ (8006780 <HAL_DMA_IRQHandler+0x41c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01d      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a5a      	ldr	r2, [pc, #360]	@ (8006784 <HAL_DMA_IRQHandler+0x420>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a58      	ldr	r2, [pc, #352]	@ (8006788 <HAL_DMA_IRQHandler+0x424>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a57      	ldr	r2, [pc, #348]	@ (800678c <HAL_DMA_IRQHandler+0x428>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a55      	ldr	r2, [pc, #340]	@ (8006790 <HAL_DMA_IRQHandler+0x42c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a54      	ldr	r2, [pc, #336]	@ (8006794 <HAL_DMA_IRQHandler+0x430>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a52      	ldr	r2, [pc, #328]	@ (8006798 <HAL_DMA_IRQHandler+0x434>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d10a      	bne.n	8006668 <HAL_DMA_IRQHandler+0x304>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	e003      	b.n	8006670 <HAL_DMA_IRQHandler+0x30c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2300      	movs	r3, #0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00d      	beq.n	8006690 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2201      	movs	r2, #1
 800667e:	409a      	lsls	r2, r3
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006688:	f043 0202 	orr.w	r2, r3, #2
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	2204      	movs	r2, #4
 800669a:	409a      	lsls	r2, r3
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 808f 	beq.w	80067c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2c      	ldr	r2, [pc, #176]	@ (800675c <HAL_DMA_IRQHandler+0x3f8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d04a      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2a      	ldr	r2, [pc, #168]	@ (8006760 <HAL_DMA_IRQHandler+0x3fc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d045      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a29      	ldr	r2, [pc, #164]	@ (8006764 <HAL_DMA_IRQHandler+0x400>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d040      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a27      	ldr	r2, [pc, #156]	@ (8006768 <HAL_DMA_IRQHandler+0x404>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d03b      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a26      	ldr	r2, [pc, #152]	@ (800676c <HAL_DMA_IRQHandler+0x408>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d036      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a24      	ldr	r2, [pc, #144]	@ (8006770 <HAL_DMA_IRQHandler+0x40c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d031      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a23      	ldr	r2, [pc, #140]	@ (8006774 <HAL_DMA_IRQHandler+0x410>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d02c      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a21      	ldr	r2, [pc, #132]	@ (8006778 <HAL_DMA_IRQHandler+0x414>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d027      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a20      	ldr	r2, [pc, #128]	@ (800677c <HAL_DMA_IRQHandler+0x418>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d022      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1e      	ldr	r2, [pc, #120]	@ (8006780 <HAL_DMA_IRQHandler+0x41c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01d      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1d      	ldr	r2, [pc, #116]	@ (8006784 <HAL_DMA_IRQHandler+0x420>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d018      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1b      	ldr	r2, [pc, #108]	@ (8006788 <HAL_DMA_IRQHandler+0x424>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1a      	ldr	r2, [pc, #104]	@ (800678c <HAL_DMA_IRQHandler+0x428>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00e      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a18      	ldr	r2, [pc, #96]	@ (8006790 <HAL_DMA_IRQHandler+0x42c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a17      	ldr	r2, [pc, #92]	@ (8006794 <HAL_DMA_IRQHandler+0x430>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a15      	ldr	r2, [pc, #84]	@ (8006798 <HAL_DMA_IRQHandler+0x434>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d12a      	bne.n	800679c <HAL_DMA_IRQHandler+0x438>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	e023      	b.n	80067a4 <HAL_DMA_IRQHandler+0x440>
 800675c:	40020010 	.word	0x40020010
 8006760:	40020028 	.word	0x40020028
 8006764:	40020040 	.word	0x40020040
 8006768:	40020058 	.word	0x40020058
 800676c:	40020070 	.word	0x40020070
 8006770:	40020088 	.word	0x40020088
 8006774:	400200a0 	.word	0x400200a0
 8006778:	400200b8 	.word	0x400200b8
 800677c:	40020410 	.word	0x40020410
 8006780:	40020428 	.word	0x40020428
 8006784:	40020440 	.word	0x40020440
 8006788:	40020458 	.word	0x40020458
 800678c:	40020470 	.word	0x40020470
 8006790:	40020488 	.word	0x40020488
 8006794:	400204a0 	.word	0x400204a0
 8006798:	400204b8 	.word	0x400204b8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00d      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	2204      	movs	r2, #4
 80067b2:	409a      	lsls	r2, r3
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067bc:	f043 0204 	orr.w	r2, r3, #4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067c8:	f003 031f 	and.w	r3, r3, #31
 80067cc:	2210      	movs	r2, #16
 80067ce:	409a      	lsls	r2, r3
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80a6 	beq.w	8006926 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a85      	ldr	r2, [pc, #532]	@ (80069f4 <HAL_DMA_IRQHandler+0x690>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d04a      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a83      	ldr	r2, [pc, #524]	@ (80069f8 <HAL_DMA_IRQHandler+0x694>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d045      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a82      	ldr	r2, [pc, #520]	@ (80069fc <HAL_DMA_IRQHandler+0x698>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d040      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a80      	ldr	r2, [pc, #512]	@ (8006a00 <HAL_DMA_IRQHandler+0x69c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d03b      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a7f      	ldr	r2, [pc, #508]	@ (8006a04 <HAL_DMA_IRQHandler+0x6a0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a7d      	ldr	r2, [pc, #500]	@ (8006a08 <HAL_DMA_IRQHandler+0x6a4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a0c <HAL_DMA_IRQHandler+0x6a8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d02c      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a7a      	ldr	r2, [pc, #488]	@ (8006a10 <HAL_DMA_IRQHandler+0x6ac>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a79      	ldr	r2, [pc, #484]	@ (8006a14 <HAL_DMA_IRQHandler+0x6b0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a77      	ldr	r2, [pc, #476]	@ (8006a18 <HAL_DMA_IRQHandler+0x6b4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a76      	ldr	r2, [pc, #472]	@ (8006a1c <HAL_DMA_IRQHandler+0x6b8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a74      	ldr	r2, [pc, #464]	@ (8006a20 <HAL_DMA_IRQHandler+0x6bc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a73      	ldr	r2, [pc, #460]	@ (8006a24 <HAL_DMA_IRQHandler+0x6c0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a71      	ldr	r2, [pc, #452]	@ (8006a28 <HAL_DMA_IRQHandler+0x6c4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a70      	ldr	r2, [pc, #448]	@ (8006a2c <HAL_DMA_IRQHandler+0x6c8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a6e      	ldr	r2, [pc, #440]	@ (8006a30 <HAL_DMA_IRQHandler+0x6cc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10a      	bne.n	8006890 <HAL_DMA_IRQHandler+0x52c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	bf14      	ite	ne
 8006888:	2301      	movne	r3, #1
 800688a:	2300      	moveq	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	e009      	b.n	80068a4 <HAL_DMA_IRQHandler+0x540>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	bf14      	ite	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	2300      	moveq	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d03e      	beq.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	2210      	movs	r2, #16
 80068b2:	409a      	lsls	r2, r3
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d018      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d108      	bne.n	80068e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d024      	beq.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	e01f      	b.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01b      	beq.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
 80068f6:	e016      	b.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0208 	bic.w	r2, r2, #8
 8006914:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	2220      	movs	r2, #32
 8006930:	409a      	lsls	r2, r3
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	4013      	ands	r3, r2
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8110 	beq.w	8006b5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2c      	ldr	r2, [pc, #176]	@ (80069f4 <HAL_DMA_IRQHandler+0x690>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d04a      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2b      	ldr	r2, [pc, #172]	@ (80069f8 <HAL_DMA_IRQHandler+0x694>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d045      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a29      	ldr	r2, [pc, #164]	@ (80069fc <HAL_DMA_IRQHandler+0x698>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d040      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a28      	ldr	r2, [pc, #160]	@ (8006a00 <HAL_DMA_IRQHandler+0x69c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d03b      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a26      	ldr	r2, [pc, #152]	@ (8006a04 <HAL_DMA_IRQHandler+0x6a0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d036      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a25      	ldr	r2, [pc, #148]	@ (8006a08 <HAL_DMA_IRQHandler+0x6a4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d031      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a23      	ldr	r2, [pc, #140]	@ (8006a0c <HAL_DMA_IRQHandler+0x6a8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d02c      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a22      	ldr	r2, [pc, #136]	@ (8006a10 <HAL_DMA_IRQHandler+0x6ac>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d027      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a20      	ldr	r2, [pc, #128]	@ (8006a14 <HAL_DMA_IRQHandler+0x6b0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d022      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1f      	ldr	r2, [pc, #124]	@ (8006a18 <HAL_DMA_IRQHandler+0x6b4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d01d      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a1c <HAL_DMA_IRQHandler+0x6b8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d018      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006a20 <HAL_DMA_IRQHandler+0x6bc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d013      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a24 <HAL_DMA_IRQHandler+0x6c0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00e      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a19      	ldr	r2, [pc, #100]	@ (8006a28 <HAL_DMA_IRQHandler+0x6c4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d009      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a17      	ldr	r2, [pc, #92]	@ (8006a2c <HAL_DMA_IRQHandler+0x6c8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a16      	ldr	r2, [pc, #88]	@ (8006a30 <HAL_DMA_IRQHandler+0x6cc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d12b      	bne.n	8006a34 <HAL_DMA_IRQHandler+0x6d0>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bf14      	ite	ne
 80069ea:	2301      	movne	r3, #1
 80069ec:	2300      	moveq	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	e02a      	b.n	8006a48 <HAL_DMA_IRQHandler+0x6e4>
 80069f2:	bf00      	nop
 80069f4:	40020010 	.word	0x40020010
 80069f8:	40020028 	.word	0x40020028
 80069fc:	40020040 	.word	0x40020040
 8006a00:	40020058 	.word	0x40020058
 8006a04:	40020070 	.word	0x40020070
 8006a08:	40020088 	.word	0x40020088
 8006a0c:	400200a0 	.word	0x400200a0
 8006a10:	400200b8 	.word	0x400200b8
 8006a14:	40020410 	.word	0x40020410
 8006a18:	40020428 	.word	0x40020428
 8006a1c:	40020440 	.word	0x40020440
 8006a20:	40020458 	.word	0x40020458
 8006a24:	40020470 	.word	0x40020470
 8006a28:	40020488 	.word	0x40020488
 8006a2c:	400204a0 	.word	0x400204a0
 8006a30:	400204b8 	.word	0x400204b8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bf14      	ite	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	2300      	moveq	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8087 	beq.w	8006b5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2220      	movs	r2, #32
 8006a58:	409a      	lsls	r2, r3
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d139      	bne.n	8006ade <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0216 	bic.w	r2, r2, #22
 8006a78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695a      	ldr	r2, [r3, #20]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <HAL_DMA_IRQHandler+0x736>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0208 	bic.w	r2, r2, #8
 8006aa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	223f      	movs	r2, #63	@ 0x3f
 8006ab4:	409a      	lsls	r2, r3
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 834a 	beq.w	8007168 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
          }
          return;
 8006adc:	e344      	b.n	8007168 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d018      	beq.n	8006b1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d108      	bne.n	8006b0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02c      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
 8006b0a:	e027      	b.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d023      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
 8006b1c:	e01e      	b.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10f      	bne.n	8006b4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0210 	bic.w	r2, r2, #16
 8006b3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8306 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8088 	beq.w	8006c84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2204      	movs	r2, #4
 8006b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a7a      	ldr	r2, [pc, #488]	@ (8006d6c <HAL_DMA_IRQHandler+0xa08>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04a      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a79      	ldr	r2, [pc, #484]	@ (8006d70 <HAL_DMA_IRQHandler+0xa0c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d045      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a77      	ldr	r2, [pc, #476]	@ (8006d74 <HAL_DMA_IRQHandler+0xa10>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d040      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a76      	ldr	r2, [pc, #472]	@ (8006d78 <HAL_DMA_IRQHandler+0xa14>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d03b      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a74      	ldr	r2, [pc, #464]	@ (8006d7c <HAL_DMA_IRQHandler+0xa18>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d036      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a73      	ldr	r2, [pc, #460]	@ (8006d80 <HAL_DMA_IRQHandler+0xa1c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d031      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a71      	ldr	r2, [pc, #452]	@ (8006d84 <HAL_DMA_IRQHandler+0xa20>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d02c      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a70      	ldr	r2, [pc, #448]	@ (8006d88 <HAL_DMA_IRQHandler+0xa24>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d027      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8006d8c <HAL_DMA_IRQHandler+0xa28>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d022      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a6d      	ldr	r2, [pc, #436]	@ (8006d90 <HAL_DMA_IRQHandler+0xa2c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d01d      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a6b      	ldr	r2, [pc, #428]	@ (8006d94 <HAL_DMA_IRQHandler+0xa30>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6a      	ldr	r2, [pc, #424]	@ (8006d98 <HAL_DMA_IRQHandler+0xa34>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a68      	ldr	r2, [pc, #416]	@ (8006d9c <HAL_DMA_IRQHandler+0xa38>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a67      	ldr	r2, [pc, #412]	@ (8006da0 <HAL_DMA_IRQHandler+0xa3c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a65      	ldr	r2, [pc, #404]	@ (8006da4 <HAL_DMA_IRQHandler+0xa40>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a64      	ldr	r2, [pc, #400]	@ (8006da8 <HAL_DMA_IRQHandler+0xa44>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d108      	bne.n	8006c2e <HAL_DMA_IRQHandler+0x8ca>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e007      	b.n	8006c3e <HAL_DMA_IRQHandler+0x8da>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d307      	bcc.n	8006c5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f2      	bne.n	8006c3e <HAL_DMA_IRQHandler+0x8da>
 8006c58:	e000      	b.n	8006c5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006c72:	e003      	b.n	8006c7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8272 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
 8006c96:	e26c      	b.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a43      	ldr	r2, [pc, #268]	@ (8006dac <HAL_DMA_IRQHandler+0xa48>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d022      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a42      	ldr	r2, [pc, #264]	@ (8006db0 <HAL_DMA_IRQHandler+0xa4c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01d      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a40      	ldr	r2, [pc, #256]	@ (8006db4 <HAL_DMA_IRQHandler+0xa50>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3f      	ldr	r2, [pc, #252]	@ (8006db8 <HAL_DMA_IRQHandler+0xa54>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8006dbc <HAL_DMA_IRQHandler+0xa58>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a3c      	ldr	r2, [pc, #240]	@ (8006dc0 <HAL_DMA_IRQHandler+0xa5c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8006dc4 <HAL_DMA_IRQHandler+0xa60>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a39      	ldr	r2, [pc, #228]	@ (8006dc8 <HAL_DMA_IRQHandler+0xa64>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d101      	bne.n	8006cec <HAL_DMA_IRQHandler+0x988>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <HAL_DMA_IRQHandler+0x98a>
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 823f 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2204      	movs	r2, #4
 8006d06:	409a      	lsls	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80cd 	beq.w	8006eac <HAL_DMA_IRQHandler+0xb48>
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80c7 	beq.w	8006eac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2204      	movs	r2, #4
 8006d28:	409a      	lsls	r2, r3
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d049      	beq.n	8006dcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8210 	beq.w	800716c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d54:	e20a      	b.n	800716c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8206 	beq.w	800716c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d68:	e200      	b.n	800716c <HAL_DMA_IRQHandler+0xe08>
 8006d6a:	bf00      	nop
 8006d6c:	40020010 	.word	0x40020010
 8006d70:	40020028 	.word	0x40020028
 8006d74:	40020040 	.word	0x40020040
 8006d78:	40020058 	.word	0x40020058
 8006d7c:	40020070 	.word	0x40020070
 8006d80:	40020088 	.word	0x40020088
 8006d84:	400200a0 	.word	0x400200a0
 8006d88:	400200b8 	.word	0x400200b8
 8006d8c:	40020410 	.word	0x40020410
 8006d90:	40020428 	.word	0x40020428
 8006d94:	40020440 	.word	0x40020440
 8006d98:	40020458 	.word	0x40020458
 8006d9c:	40020470 	.word	0x40020470
 8006da0:	40020488 	.word	0x40020488
 8006da4:	400204a0 	.word	0x400204a0
 8006da8:	400204b8 	.word	0x400204b8
 8006dac:	58025408 	.word	0x58025408
 8006db0:	5802541c 	.word	0x5802541c
 8006db4:	58025430 	.word	0x58025430
 8006db8:	58025444 	.word	0x58025444
 8006dbc:	58025458 	.word	0x58025458
 8006dc0:	5802546c 	.word	0x5802546c
 8006dc4:	58025480 	.word	0x58025480
 8006dc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d160      	bne.n	8006e98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a7f      	ldr	r2, [pc, #508]	@ (8006fd8 <HAL_DMA_IRQHandler+0xc74>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d04a      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a7d      	ldr	r2, [pc, #500]	@ (8006fdc <HAL_DMA_IRQHandler+0xc78>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d045      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a7c      	ldr	r2, [pc, #496]	@ (8006fe0 <HAL_DMA_IRQHandler+0xc7c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d040      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a7a      	ldr	r2, [pc, #488]	@ (8006fe4 <HAL_DMA_IRQHandler+0xc80>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d03b      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a79      	ldr	r2, [pc, #484]	@ (8006fe8 <HAL_DMA_IRQHandler+0xc84>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d036      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a77      	ldr	r2, [pc, #476]	@ (8006fec <HAL_DMA_IRQHandler+0xc88>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d031      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a76      	ldr	r2, [pc, #472]	@ (8006ff0 <HAL_DMA_IRQHandler+0xc8c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d02c      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a74      	ldr	r2, [pc, #464]	@ (8006ff4 <HAL_DMA_IRQHandler+0xc90>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d027      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a73      	ldr	r2, [pc, #460]	@ (8006ff8 <HAL_DMA_IRQHandler+0xc94>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a71      	ldr	r2, [pc, #452]	@ (8006ffc <HAL_DMA_IRQHandler+0xc98>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a70      	ldr	r2, [pc, #448]	@ (8007000 <HAL_DMA_IRQHandler+0xc9c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a6e      	ldr	r2, [pc, #440]	@ (8007004 <HAL_DMA_IRQHandler+0xca0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a6d      	ldr	r2, [pc, #436]	@ (8007008 <HAL_DMA_IRQHandler+0xca4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800700c <HAL_DMA_IRQHandler+0xca8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a6a      	ldr	r2, [pc, #424]	@ (8007010 <HAL_DMA_IRQHandler+0xcac>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a68      	ldr	r2, [pc, #416]	@ (8007014 <HAL_DMA_IRQHandler+0xcb0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d108      	bne.n	8006e88 <HAL_DMA_IRQHandler+0xb24>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0208 	bic.w	r2, r2, #8
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e007      	b.n	8006e98 <HAL_DMA_IRQHandler+0xb34>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0204 	bic.w	r2, r2, #4
 8006e96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8165 	beq.w	800716c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eaa:	e15f      	b.n	800716c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80c5 	beq.w	800704c <HAL_DMA_IRQHandler+0xce8>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80bf 	beq.w	800704c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d018      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 813a 	beq.w	8007170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f04:	e134      	b.n	8007170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8130 	beq.w	8007170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f18:	e12a      	b.n	8007170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f040 8089 	bne.w	8007038 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006fd8 <HAL_DMA_IRQHandler+0xc74>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d04a      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a29      	ldr	r2, [pc, #164]	@ (8006fdc <HAL_DMA_IRQHandler+0xc78>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d045      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a28      	ldr	r2, [pc, #160]	@ (8006fe0 <HAL_DMA_IRQHandler+0xc7c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d040      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a26      	ldr	r2, [pc, #152]	@ (8006fe4 <HAL_DMA_IRQHandler+0xc80>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d03b      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a25      	ldr	r2, [pc, #148]	@ (8006fe8 <HAL_DMA_IRQHandler+0xc84>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d036      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a23      	ldr	r2, [pc, #140]	@ (8006fec <HAL_DMA_IRQHandler+0xc88>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d031      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a22      	ldr	r2, [pc, #136]	@ (8006ff0 <HAL_DMA_IRQHandler+0xc8c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d02c      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a20      	ldr	r2, [pc, #128]	@ (8006ff4 <HAL_DMA_IRQHandler+0xc90>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d027      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff8 <HAL_DMA_IRQHandler+0xc94>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1d      	ldr	r2, [pc, #116]	@ (8006ffc <HAL_DMA_IRQHandler+0xc98>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01d      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007000 <HAL_DMA_IRQHandler+0xc9c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1a      	ldr	r2, [pc, #104]	@ (8007004 <HAL_DMA_IRQHandler+0xca0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a19      	ldr	r2, [pc, #100]	@ (8007008 <HAL_DMA_IRQHandler+0xca4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a17      	ldr	r2, [pc, #92]	@ (800700c <HAL_DMA_IRQHandler+0xca8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a16      	ldr	r2, [pc, #88]	@ (8007010 <HAL_DMA_IRQHandler+0xcac>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0xc62>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a14      	ldr	r2, [pc, #80]	@ (8007014 <HAL_DMA_IRQHandler+0xcb0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d128      	bne.n	8007018 <HAL_DMA_IRQHandler+0xcb4>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0214 	bic.w	r2, r2, #20
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	e027      	b.n	8007028 <HAL_DMA_IRQHandler+0xcc4>
 8006fd8:	40020010 	.word	0x40020010
 8006fdc:	40020028 	.word	0x40020028
 8006fe0:	40020040 	.word	0x40020040
 8006fe4:	40020058 	.word	0x40020058
 8006fe8:	40020070 	.word	0x40020070
 8006fec:	40020088 	.word	0x40020088
 8006ff0:	400200a0 	.word	0x400200a0
 8006ff4:	400200b8 	.word	0x400200b8
 8006ff8:	40020410 	.word	0x40020410
 8006ffc:	40020428 	.word	0x40020428
 8007000:	40020440 	.word	0x40020440
 8007004:	40020458 	.word	0x40020458
 8007008:	40020470 	.word	0x40020470
 800700c:	40020488 	.word	0x40020488
 8007010:	400204a0 	.word	0x400204a0
 8007014:	400204b8 	.word	0x400204b8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 020a 	bic.w	r2, r2, #10
 8007026:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8097 	beq.w	8007170 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800704a:	e091      	b.n	8007170 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	2208      	movs	r2, #8
 8007056:	409a      	lsls	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8088 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8082 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a41      	ldr	r2, [pc, #260]	@ (8007178 <HAL_DMA_IRQHandler+0xe14>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d04a      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3f      	ldr	r2, [pc, #252]	@ (800717c <HAL_DMA_IRQHandler+0xe18>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d045      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3e      	ldr	r2, [pc, #248]	@ (8007180 <HAL_DMA_IRQHandler+0xe1c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d040      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a3c      	ldr	r2, [pc, #240]	@ (8007184 <HAL_DMA_IRQHandler+0xe20>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d03b      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3b      	ldr	r2, [pc, #236]	@ (8007188 <HAL_DMA_IRQHandler+0xe24>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d036      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a39      	ldr	r2, [pc, #228]	@ (800718c <HAL_DMA_IRQHandler+0xe28>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d031      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a38      	ldr	r2, [pc, #224]	@ (8007190 <HAL_DMA_IRQHandler+0xe2c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d02c      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a36      	ldr	r2, [pc, #216]	@ (8007194 <HAL_DMA_IRQHandler+0xe30>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d027      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a35      	ldr	r2, [pc, #212]	@ (8007198 <HAL_DMA_IRQHandler+0xe34>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d022      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a33      	ldr	r2, [pc, #204]	@ (800719c <HAL_DMA_IRQHandler+0xe38>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d01d      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a32      	ldr	r2, [pc, #200]	@ (80071a0 <HAL_DMA_IRQHandler+0xe3c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d018      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a30      	ldr	r2, [pc, #192]	@ (80071a4 <HAL_DMA_IRQHandler+0xe40>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a2f      	ldr	r2, [pc, #188]	@ (80071a8 <HAL_DMA_IRQHandler+0xe44>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00e      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a2d      	ldr	r2, [pc, #180]	@ (80071ac <HAL_DMA_IRQHandler+0xe48>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d009      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a2c      	ldr	r2, [pc, #176]	@ (80071b0 <HAL_DMA_IRQHandler+0xe4c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d004      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a2a      	ldr	r2, [pc, #168]	@ (80071b4 <HAL_DMA_IRQHandler+0xe50>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d108      	bne.n	8007120 <HAL_DMA_IRQHandler+0xdbc>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 021c 	bic.w	r2, r2, #28
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	e007      	b.n	8007130 <HAL_DMA_IRQHandler+0xdcc>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 020e 	bic.w	r2, r2, #14
 800712e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	2201      	movs	r2, #1
 800713a:	409a      	lsls	r2, r3
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
 8007166:	e004      	b.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007168:	bf00      	nop
 800716a:	e002      	b.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800716c:	bf00      	nop
 800716e:	e000      	b.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007170:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007172:	3728      	adds	r7, #40	@ 0x28
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40020010 	.word	0x40020010
 800717c:	40020028 	.word	0x40020028
 8007180:	40020040 	.word	0x40020040
 8007184:	40020058 	.word	0x40020058
 8007188:	40020070 	.word	0x40020070
 800718c:	40020088 	.word	0x40020088
 8007190:	400200a0 	.word	0x400200a0
 8007194:	400200b8 	.word	0x400200b8
 8007198:	40020410 	.word	0x40020410
 800719c:	40020428 	.word	0x40020428
 80071a0:	40020440 	.word	0x40020440
 80071a4:	40020458 	.word	0x40020458
 80071a8:	40020470 	.word	0x40020470
 80071ac:	40020488 	.word	0x40020488
 80071b0:	400204a0 	.word	0x400204a0
 80071b4:	400204b8 	.word	0x400204b8

080071b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a7f      	ldr	r2, [pc, #508]	@ (80073ec <DMA_SetConfig+0x21c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d072      	beq.n	80072da <DMA_SetConfig+0x10a>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a7d      	ldr	r2, [pc, #500]	@ (80073f0 <DMA_SetConfig+0x220>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d06d      	beq.n	80072da <DMA_SetConfig+0x10a>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a7c      	ldr	r2, [pc, #496]	@ (80073f4 <DMA_SetConfig+0x224>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d068      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a7a      	ldr	r2, [pc, #488]	@ (80073f8 <DMA_SetConfig+0x228>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d063      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a79      	ldr	r2, [pc, #484]	@ (80073fc <DMA_SetConfig+0x22c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d05e      	beq.n	80072da <DMA_SetConfig+0x10a>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a77      	ldr	r2, [pc, #476]	@ (8007400 <DMA_SetConfig+0x230>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d059      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a76      	ldr	r2, [pc, #472]	@ (8007404 <DMA_SetConfig+0x234>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d054      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a74      	ldr	r2, [pc, #464]	@ (8007408 <DMA_SetConfig+0x238>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d04f      	beq.n	80072da <DMA_SetConfig+0x10a>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a73      	ldr	r2, [pc, #460]	@ (800740c <DMA_SetConfig+0x23c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d04a      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a71      	ldr	r2, [pc, #452]	@ (8007410 <DMA_SetConfig+0x240>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d045      	beq.n	80072da <DMA_SetConfig+0x10a>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a70      	ldr	r2, [pc, #448]	@ (8007414 <DMA_SetConfig+0x244>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d040      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a6e      	ldr	r2, [pc, #440]	@ (8007418 <DMA_SetConfig+0x248>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d03b      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a6d      	ldr	r2, [pc, #436]	@ (800741c <DMA_SetConfig+0x24c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d036      	beq.n	80072da <DMA_SetConfig+0x10a>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a6b      	ldr	r2, [pc, #428]	@ (8007420 <DMA_SetConfig+0x250>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d031      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a6a      	ldr	r2, [pc, #424]	@ (8007424 <DMA_SetConfig+0x254>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d02c      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a68      	ldr	r2, [pc, #416]	@ (8007428 <DMA_SetConfig+0x258>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d027      	beq.n	80072da <DMA_SetConfig+0x10a>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a67      	ldr	r2, [pc, #412]	@ (800742c <DMA_SetConfig+0x25c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d022      	beq.n	80072da <DMA_SetConfig+0x10a>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a65      	ldr	r2, [pc, #404]	@ (8007430 <DMA_SetConfig+0x260>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d01d      	beq.n	80072da <DMA_SetConfig+0x10a>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a64      	ldr	r2, [pc, #400]	@ (8007434 <DMA_SetConfig+0x264>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d018      	beq.n	80072da <DMA_SetConfig+0x10a>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a62      	ldr	r2, [pc, #392]	@ (8007438 <DMA_SetConfig+0x268>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d013      	beq.n	80072da <DMA_SetConfig+0x10a>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a61      	ldr	r2, [pc, #388]	@ (800743c <DMA_SetConfig+0x26c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00e      	beq.n	80072da <DMA_SetConfig+0x10a>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5f      	ldr	r2, [pc, #380]	@ (8007440 <DMA_SetConfig+0x270>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d009      	beq.n	80072da <DMA_SetConfig+0x10a>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007444 <DMA_SetConfig+0x274>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d004      	beq.n	80072da <DMA_SetConfig+0x10a>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a5c      	ldr	r2, [pc, #368]	@ (8007448 <DMA_SetConfig+0x278>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d101      	bne.n	80072de <DMA_SetConfig+0x10e>
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <DMA_SetConfig+0x110>
 80072de:	2300      	movs	r3, #0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00d      	beq.n	8007300 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80072ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d004      	beq.n	8007300 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80072fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a39      	ldr	r2, [pc, #228]	@ (80073ec <DMA_SetConfig+0x21c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d04a      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a38      	ldr	r2, [pc, #224]	@ (80073f0 <DMA_SetConfig+0x220>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d045      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a36      	ldr	r2, [pc, #216]	@ (80073f4 <DMA_SetConfig+0x224>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d040      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a35      	ldr	r2, [pc, #212]	@ (80073f8 <DMA_SetConfig+0x228>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d03b      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a33      	ldr	r2, [pc, #204]	@ (80073fc <DMA_SetConfig+0x22c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d036      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a32      	ldr	r2, [pc, #200]	@ (8007400 <DMA_SetConfig+0x230>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d031      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a30      	ldr	r2, [pc, #192]	@ (8007404 <DMA_SetConfig+0x234>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d02c      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a2f      	ldr	r2, [pc, #188]	@ (8007408 <DMA_SetConfig+0x238>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d027      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a2d      	ldr	r2, [pc, #180]	@ (800740c <DMA_SetConfig+0x23c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d022      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a2c      	ldr	r2, [pc, #176]	@ (8007410 <DMA_SetConfig+0x240>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d01d      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a2a      	ldr	r2, [pc, #168]	@ (8007414 <DMA_SetConfig+0x244>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d018      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a29      	ldr	r2, [pc, #164]	@ (8007418 <DMA_SetConfig+0x248>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a27      	ldr	r2, [pc, #156]	@ (800741c <DMA_SetConfig+0x24c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a26      	ldr	r2, [pc, #152]	@ (8007420 <DMA_SetConfig+0x250>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a24      	ldr	r2, [pc, #144]	@ (8007424 <DMA_SetConfig+0x254>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <DMA_SetConfig+0x1d0>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a23      	ldr	r2, [pc, #140]	@ (8007428 <DMA_SetConfig+0x258>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d101      	bne.n	80073a4 <DMA_SetConfig+0x1d4>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <DMA_SetConfig+0x1d6>
 80073a4:	2300      	movs	r3, #0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d059      	beq.n	800745e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	223f      	movs	r2, #63	@ 0x3f
 80073b4:	409a      	lsls	r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80073c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	2b40      	cmp	r3, #64	@ 0x40
 80073d8:	d138      	bne.n	800744c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073ea:	e086      	b.n	80074fa <DMA_SetConfig+0x32a>
 80073ec:	40020010 	.word	0x40020010
 80073f0:	40020028 	.word	0x40020028
 80073f4:	40020040 	.word	0x40020040
 80073f8:	40020058 	.word	0x40020058
 80073fc:	40020070 	.word	0x40020070
 8007400:	40020088 	.word	0x40020088
 8007404:	400200a0 	.word	0x400200a0
 8007408:	400200b8 	.word	0x400200b8
 800740c:	40020410 	.word	0x40020410
 8007410:	40020428 	.word	0x40020428
 8007414:	40020440 	.word	0x40020440
 8007418:	40020458 	.word	0x40020458
 800741c:	40020470 	.word	0x40020470
 8007420:	40020488 	.word	0x40020488
 8007424:	400204a0 	.word	0x400204a0
 8007428:	400204b8 	.word	0x400204b8
 800742c:	58025408 	.word	0x58025408
 8007430:	5802541c 	.word	0x5802541c
 8007434:	58025430 	.word	0x58025430
 8007438:	58025444 	.word	0x58025444
 800743c:	58025458 	.word	0x58025458
 8007440:	5802546c 	.word	0x5802546c
 8007444:	58025480 	.word	0x58025480
 8007448:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]
}
 800745c:	e04d      	b.n	80074fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a29      	ldr	r2, [pc, #164]	@ (8007508 <DMA_SetConfig+0x338>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d022      	beq.n	80074ae <DMA_SetConfig+0x2de>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a27      	ldr	r2, [pc, #156]	@ (800750c <DMA_SetConfig+0x33c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01d      	beq.n	80074ae <DMA_SetConfig+0x2de>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a26      	ldr	r2, [pc, #152]	@ (8007510 <DMA_SetConfig+0x340>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <DMA_SetConfig+0x2de>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a24      	ldr	r2, [pc, #144]	@ (8007514 <DMA_SetConfig+0x344>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <DMA_SetConfig+0x2de>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a23      	ldr	r2, [pc, #140]	@ (8007518 <DMA_SetConfig+0x348>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <DMA_SetConfig+0x2de>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a21      	ldr	r2, [pc, #132]	@ (800751c <DMA_SetConfig+0x34c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <DMA_SetConfig+0x2de>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a20      	ldr	r2, [pc, #128]	@ (8007520 <DMA_SetConfig+0x350>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <DMA_SetConfig+0x2de>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007524 <DMA_SetConfig+0x354>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <DMA_SetConfig+0x2e2>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <DMA_SetConfig+0x2e4>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d020      	beq.n	80074fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	2201      	movs	r2, #1
 80074c2:	409a      	lsls	r2, r3
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b40      	cmp	r3, #64	@ 0x40
 80074d6:	d108      	bne.n	80074ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	60da      	str	r2, [r3, #12]
}
 80074e8:	e007      	b.n	80074fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	60da      	str	r2, [r3, #12]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	58025408 	.word	0x58025408
 800750c:	5802541c 	.word	0x5802541c
 8007510:	58025430 	.word	0x58025430
 8007514:	58025444 	.word	0x58025444
 8007518:	58025458 	.word	0x58025458
 800751c:	5802546c 	.word	0x5802546c
 8007520:	58025480 	.word	0x58025480
 8007524:	58025494 	.word	0x58025494

08007528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a42      	ldr	r2, [pc, #264]	@ (8007640 <DMA_CalcBaseAndBitshift+0x118>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d04a      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a41      	ldr	r2, [pc, #260]	@ (8007644 <DMA_CalcBaseAndBitshift+0x11c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d045      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a3f      	ldr	r2, [pc, #252]	@ (8007648 <DMA_CalcBaseAndBitshift+0x120>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d040      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a3e      	ldr	r2, [pc, #248]	@ (800764c <DMA_CalcBaseAndBitshift+0x124>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d03b      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a3c      	ldr	r2, [pc, #240]	@ (8007650 <DMA_CalcBaseAndBitshift+0x128>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d036      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a3b      	ldr	r2, [pc, #236]	@ (8007654 <DMA_CalcBaseAndBitshift+0x12c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d031      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a39      	ldr	r2, [pc, #228]	@ (8007658 <DMA_CalcBaseAndBitshift+0x130>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d02c      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a38      	ldr	r2, [pc, #224]	@ (800765c <DMA_CalcBaseAndBitshift+0x134>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d027      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a36      	ldr	r2, [pc, #216]	@ (8007660 <DMA_CalcBaseAndBitshift+0x138>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d022      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a35      	ldr	r2, [pc, #212]	@ (8007664 <DMA_CalcBaseAndBitshift+0x13c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d01d      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a33      	ldr	r2, [pc, #204]	@ (8007668 <DMA_CalcBaseAndBitshift+0x140>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d018      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a32      	ldr	r2, [pc, #200]	@ (800766c <DMA_CalcBaseAndBitshift+0x144>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d013      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a30      	ldr	r2, [pc, #192]	@ (8007670 <DMA_CalcBaseAndBitshift+0x148>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00e      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007674 <DMA_CalcBaseAndBitshift+0x14c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d009      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007678 <DMA_CalcBaseAndBitshift+0x150>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d004      	beq.n	80075d0 <DMA_CalcBaseAndBitshift+0xa8>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2c      	ldr	r2, [pc, #176]	@ (800767c <DMA_CalcBaseAndBitshift+0x154>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d101      	bne.n	80075d4 <DMA_CalcBaseAndBitshift+0xac>
 80075d0:	2301      	movs	r3, #1
 80075d2:	e000      	b.n	80075d6 <DMA_CalcBaseAndBitshift+0xae>
 80075d4:	2300      	movs	r3, #0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d024      	beq.n	8007624 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	3b10      	subs	r3, #16
 80075e2:	4a27      	ldr	r2, [pc, #156]	@ (8007680 <DMA_CalcBaseAndBitshift+0x158>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	091b      	lsrs	r3, r3, #4
 80075ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	4a24      	ldr	r2, [pc, #144]	@ (8007684 <DMA_CalcBaseAndBitshift+0x15c>)
 80075f4:	5cd3      	ldrb	r3, [r2, r3]
 80075f6:	461a      	mov	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d908      	bls.n	8007614 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	4b1f      	ldr	r3, [pc, #124]	@ (8007688 <DMA_CalcBaseAndBitshift+0x160>)
 800760a:	4013      	ands	r3, r2
 800760c:	1d1a      	adds	r2, r3, #4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	659a      	str	r2, [r3, #88]	@ 0x58
 8007612:	e00d      	b.n	8007630 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	4b1b      	ldr	r3, [pc, #108]	@ (8007688 <DMA_CalcBaseAndBitshift+0x160>)
 800761c:	4013      	ands	r3, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6593      	str	r3, [r2, #88]	@ 0x58
 8007622:	e005      	b.n	8007630 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	40020010 	.word	0x40020010
 8007644:	40020028 	.word	0x40020028
 8007648:	40020040 	.word	0x40020040
 800764c:	40020058 	.word	0x40020058
 8007650:	40020070 	.word	0x40020070
 8007654:	40020088 	.word	0x40020088
 8007658:	400200a0 	.word	0x400200a0
 800765c:	400200b8 	.word	0x400200b8
 8007660:	40020410 	.word	0x40020410
 8007664:	40020428 	.word	0x40020428
 8007668:	40020440 	.word	0x40020440
 800766c:	40020458 	.word	0x40020458
 8007670:	40020470 	.word	0x40020470
 8007674:	40020488 	.word	0x40020488
 8007678:	400204a0 	.word	0x400204a0
 800767c:	400204b8 	.word	0x400204b8
 8007680:	aaaaaaab 	.word	0xaaaaaaab
 8007684:	08023528 	.word	0x08023528
 8007688:	fffffc00 	.word	0xfffffc00

0800768c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d120      	bne.n	80076e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d858      	bhi.n	800775a <DMA_CheckFifoParam+0xce>
 80076a8:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <DMA_CheckFifoParam+0x24>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076c1 	.word	0x080076c1
 80076b4:	080076d3 	.word	0x080076d3
 80076b8:	080076c1 	.word	0x080076c1
 80076bc:	0800775b 	.word	0x0800775b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d048      	beq.n	800775e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076d0:	e045      	b.n	800775e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076da:	d142      	bne.n	8007762 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076e0:	e03f      	b.n	8007762 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ea:	d123      	bne.n	8007734 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d838      	bhi.n	8007766 <DMA_CheckFifoParam+0xda>
 80076f4:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <DMA_CheckFifoParam+0x70>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	08007713 	.word	0x08007713
 8007704:	0800770d 	.word	0x0800770d
 8007708:	08007725 	.word	0x08007725
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
        break;
 8007710:	e030      	b.n	8007774 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d025      	beq.n	800776a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007722:	e022      	b.n	800776a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007728:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800772c:	d11f      	bne.n	800776e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007732:	e01c      	b.n	800776e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007738:	2b02      	cmp	r3, #2
 800773a:	d902      	bls.n	8007742 <DMA_CheckFifoParam+0xb6>
 800773c:	2b03      	cmp	r3, #3
 800773e:	d003      	beq.n	8007748 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007740:	e018      	b.n	8007774 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	73fb      	strb	r3, [r7, #15]
        break;
 8007746:	e015      	b.n	8007774 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00e      	beq.n	8007772 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
    break;
 8007758:	e00b      	b.n	8007772 <DMA_CheckFifoParam+0xe6>
        break;
 800775a:	bf00      	nop
 800775c:	e00a      	b.n	8007774 <DMA_CheckFifoParam+0xe8>
        break;
 800775e:	bf00      	nop
 8007760:	e008      	b.n	8007774 <DMA_CheckFifoParam+0xe8>
        break;
 8007762:	bf00      	nop
 8007764:	e006      	b.n	8007774 <DMA_CheckFifoParam+0xe8>
        break;
 8007766:	bf00      	nop
 8007768:	e004      	b.n	8007774 <DMA_CheckFifoParam+0xe8>
        break;
 800776a:	bf00      	nop
 800776c:	e002      	b.n	8007774 <DMA_CheckFifoParam+0xe8>
        break;
 800776e:	bf00      	nop
 8007770:	e000      	b.n	8007774 <DMA_CheckFifoParam+0xe8>
    break;
 8007772:	bf00      	nop
    }
  }

  return status;
 8007774:	7bfb      	ldrb	r3, [r7, #15]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop

08007784 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a38      	ldr	r2, [pc, #224]	@ (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d022      	beq.n	80077e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a36      	ldr	r2, [pc, #216]	@ (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d01d      	beq.n	80077e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a35      	ldr	r2, [pc, #212]	@ (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d018      	beq.n	80077e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a33      	ldr	r2, [pc, #204]	@ (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d013      	beq.n	80077e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a32      	ldr	r2, [pc, #200]	@ (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00e      	beq.n	80077e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a30      	ldr	r2, [pc, #192]	@ (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d009      	beq.n	80077e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d004      	beq.n	80077e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d101      	bne.n	80077e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01a      	beq.n	8007822 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	3b08      	subs	r3, #8
 80077f4:	4a28      	ldr	r2, [pc, #160]	@ (8007898 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80077f6:	fba2 2303 	umull	r2, r3, r2, r3
 80077fa:	091b      	lsrs	r3, r3, #4
 80077fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4b26      	ldr	r3, [pc, #152]	@ (800789c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a24      	ldr	r2, [pc, #144]	@ (80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007810:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	2201      	movs	r2, #1
 800781a:	409a      	lsls	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007820:	e024      	b.n	800786c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	3b10      	subs	r3, #16
 800782a:	4a1e      	ldr	r2, [pc, #120]	@ (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800782c:	fba2 2303 	umull	r2, r3, r2, r3
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4a1c      	ldr	r2, [pc, #112]	@ (80078a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d806      	bhi.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4a1b      	ldr	r2, [pc, #108]	@ (80078ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d902      	bls.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3308      	adds	r3, #8
 8007848:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4b18      	ldr	r3, [pc, #96]	@ (80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a16      	ldr	r2, [pc, #88]	@ (80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800785c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	2201      	movs	r2, #1
 8007866:	409a      	lsls	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	58025408 	.word	0x58025408
 800787c:	5802541c 	.word	0x5802541c
 8007880:	58025430 	.word	0x58025430
 8007884:	58025444 	.word	0x58025444
 8007888:	58025458 	.word	0x58025458
 800788c:	5802546c 	.word	0x5802546c
 8007890:	58025480 	.word	0x58025480
 8007894:	58025494 	.word	0x58025494
 8007898:	cccccccd 	.word	0xcccccccd
 800789c:	16009600 	.word	0x16009600
 80078a0:	58025880 	.word	0x58025880
 80078a4:	aaaaaaab 	.word	0xaaaaaaab
 80078a8:	400204b8 	.word	0x400204b8
 80078ac:	4002040f 	.word	0x4002040f
 80078b0:	10008200 	.word	0x10008200
 80078b4:	40020880 	.word	0x40020880

080078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d04a      	beq.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d847      	bhi.n	8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a25      	ldr	r2, [pc, #148]	@ (8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d022      	beq.n	8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a24      	ldr	r2, [pc, #144]	@ (8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d01d      	beq.n	8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a22      	ldr	r2, [pc, #136]	@ (8007978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d018      	beq.n	8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a21      	ldr	r2, [pc, #132]	@ (800797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d013      	beq.n	8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1f      	ldr	r2, [pc, #124]	@ (8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00e      	beq.n	8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1e      	ldr	r2, [pc, #120]	@ (8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d009      	beq.n	8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1c      	ldr	r2, [pc, #112]	@ (8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1b      	ldr	r2, [pc, #108]	@ (800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d101      	bne.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007928:	2300      	movs	r3, #0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4b17      	ldr	r3, [pc, #92]	@ (8007990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	461a      	mov	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a15      	ldr	r2, [pc, #84]	@ (8007994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007940:	671a      	str	r2, [r3, #112]	@ 0x70
 8007942:	e009      	b.n	8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4b14      	ldr	r3, [pc, #80]	@ (8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	461a      	mov	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a11      	ldr	r2, [pc, #68]	@ (800799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007956:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3b01      	subs	r3, #1
 800795c:	2201      	movs	r2, #1
 800795e:	409a      	lsls	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007964:	bf00      	nop
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	58025408 	.word	0x58025408
 8007974:	5802541c 	.word	0x5802541c
 8007978:	58025430 	.word	0x58025430
 800797c:	58025444 	.word	0x58025444
 8007980:	58025458 	.word	0x58025458
 8007984:	5802546c 	.word	0x5802546c
 8007988:	58025480 	.word	0x58025480
 800798c:	58025494 	.word	0x58025494
 8007990:	1600963f 	.word	0x1600963f
 8007994:	58025940 	.word	0x58025940
 8007998:	1000823f 	.word	0x1000823f
 800799c:	40020940 	.word	0x40020940

080079a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b089      	sub	sp, #36	@ 0x24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079ae:	4b89      	ldr	r3, [pc, #548]	@ (8007bd4 <HAL_GPIO_Init+0x234>)
 80079b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079b2:	e194      	b.n	8007cde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	2101      	movs	r1, #1
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	fa01 f303 	lsl.w	r3, r1, r3
 80079c0:	4013      	ands	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8186 	beq.w	8007cd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d005      	beq.n	80079e4 <HAL_GPIO_Init+0x44>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d130      	bne.n	8007a46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	2203      	movs	r2, #3
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	43db      	mvns	r3, r3
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	4013      	ands	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	43db      	mvns	r3, r3
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	4013      	ands	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	f003 0201 	and.w	r2, r3, #1
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d017      	beq.n	8007a82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	43db      	mvns	r3, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4013      	ands	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d123      	bne.n	8007ad6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	08da      	lsrs	r2, r3, #3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3208      	adds	r2, #8
 8007a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f003 0307 	and.w	r3, r3, #7
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	220f      	movs	r2, #15
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	08da      	lsrs	r2, r3, #3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3208      	adds	r2, #8
 8007ad0:	69b9      	ldr	r1, [r7, #24]
 8007ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	43db      	mvns	r3, r3
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	4013      	ands	r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 0203 	and.w	r2, r3, #3
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	fa02 f303 	lsl.w	r3, r2, r3
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80e0 	beq.w	8007cd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b18:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd8 <HAL_GPIO_Init+0x238>)
 8007b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8007bd8 <HAL_GPIO_Init+0x238>)
 8007b20:	f043 0302 	orr.w	r3, r3, #2
 8007b24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b28:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd8 <HAL_GPIO_Init+0x238>)
 8007b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b36:	4a29      	ldr	r2, [pc, #164]	@ (8007bdc <HAL_GPIO_Init+0x23c>)
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	089b      	lsrs	r3, r3, #2
 8007b3c:	3302      	adds	r3, #2
 8007b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	220f      	movs	r2, #15
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	43db      	mvns	r3, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4013      	ands	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a20      	ldr	r2, [pc, #128]	@ (8007be0 <HAL_GPIO_Init+0x240>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d052      	beq.n	8007c08 <HAL_GPIO_Init+0x268>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a1f      	ldr	r2, [pc, #124]	@ (8007be4 <HAL_GPIO_Init+0x244>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d031      	beq.n	8007bce <HAL_GPIO_Init+0x22e>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8007be8 <HAL_GPIO_Init+0x248>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d02b      	beq.n	8007bca <HAL_GPIO_Init+0x22a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a1d      	ldr	r2, [pc, #116]	@ (8007bec <HAL_GPIO_Init+0x24c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d025      	beq.n	8007bc6 <HAL_GPIO_Init+0x226>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf0 <HAL_GPIO_Init+0x250>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01f      	beq.n	8007bc2 <HAL_GPIO_Init+0x222>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf4 <HAL_GPIO_Init+0x254>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d019      	beq.n	8007bbe <HAL_GPIO_Init+0x21e>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf8 <HAL_GPIO_Init+0x258>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <HAL_GPIO_Init+0x21a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a19      	ldr	r2, [pc, #100]	@ (8007bfc <HAL_GPIO_Init+0x25c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00d      	beq.n	8007bb6 <HAL_GPIO_Init+0x216>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a18      	ldr	r2, [pc, #96]	@ (8007c00 <HAL_GPIO_Init+0x260>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d007      	beq.n	8007bb2 <HAL_GPIO_Init+0x212>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a17      	ldr	r2, [pc, #92]	@ (8007c04 <HAL_GPIO_Init+0x264>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d101      	bne.n	8007bae <HAL_GPIO_Init+0x20e>
 8007baa:	2309      	movs	r3, #9
 8007bac:	e02d      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bae:	230a      	movs	r3, #10
 8007bb0:	e02b      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bb2:	2308      	movs	r3, #8
 8007bb4:	e029      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bb6:	2307      	movs	r3, #7
 8007bb8:	e027      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bba:	2306      	movs	r3, #6
 8007bbc:	e025      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bbe:	2305      	movs	r3, #5
 8007bc0:	e023      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bc2:	2304      	movs	r3, #4
 8007bc4:	e021      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e01f      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e01d      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e01b      	b.n	8007c0a <HAL_GPIO_Init+0x26a>
 8007bd2:	bf00      	nop
 8007bd4:	58000080 	.word	0x58000080
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	58000400 	.word	0x58000400
 8007be0:	58020000 	.word	0x58020000
 8007be4:	58020400 	.word	0x58020400
 8007be8:	58020800 	.word	0x58020800
 8007bec:	58020c00 	.word	0x58020c00
 8007bf0:	58021000 	.word	0x58021000
 8007bf4:	58021400 	.word	0x58021400
 8007bf8:	58021800 	.word	0x58021800
 8007bfc:	58021c00 	.word	0x58021c00
 8007c00:	58022000 	.word	0x58022000
 8007c04:	58022400 	.word	0x58022400
 8007c08:	2300      	movs	r3, #0
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	f002 0203 	and.w	r2, r2, #3
 8007c10:	0092      	lsls	r2, r2, #2
 8007c12:	4093      	lsls	r3, r2
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c1a:	4938      	ldr	r1, [pc, #224]	@ (8007cfc <HAL_GPIO_Init+0x35c>)
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	089b      	lsrs	r3, r3, #2
 8007c20:	3302      	adds	r3, #2
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	43db      	mvns	r3, r3
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	4013      	ands	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	43db      	mvns	r3, r3
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	4013      	ands	r3, r2
 8007c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f ae63 	bne.w	80079b4 <HAL_GPIO_Init+0x14>
  }
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	3724      	adds	r7, #36	@ 0x24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	58000400 	.word	0x58000400

08007d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	807b      	strh	r3, [r7, #2]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d10:	787b      	ldrb	r3, [r7, #1]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d16:	887a      	ldrh	r2, [r7, #2]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d1c:	e003      	b.n	8007d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	041a      	lsls	r2, r3, #16
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	619a      	str	r2, [r3, #24]
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	4603      	mov	r3, r0
 8007d3a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d40:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	4013      	ands	r3, r2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d50:	88fb      	ldrh	r3, [r7, #6]
 8007d52:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7f9 fceb 	bl	8001734 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d70:	4b19      	ldr	r3, [pc, #100]	@ (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d00a      	beq.n	8007d92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d7c:	4b16      	ldr	r3, [pc, #88]	@ (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d001      	beq.n	8007d8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e01f      	b.n	8007dce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e01d      	b.n	8007dce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d92:	4b11      	ldr	r3, [pc, #68]	@ (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f023 0207 	bic.w	r2, r3, #7
 8007d9a:	490f      	ldr	r1, [pc, #60]	@ (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007da2:	f7fb fbc7 	bl	8003534 <HAL_GetTick>
 8007da6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007da8:	e009      	b.n	8007dbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007daa:	f7fb fbc3 	bl	8003534 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007db8:	d901      	bls.n	8007dbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e007      	b.n	8007dce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dbe:	4b06      	ldr	r3, [pc, #24]	@ (8007dd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dca:	d1ee      	bne.n	8007daa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	58024800 	.word	0x58024800

08007ddc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08c      	sub	sp, #48	@ 0x30
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	f000 bc48 	b.w	8008680 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8088 	beq.w	8007f0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dfe:	4b99      	ldr	r3, [pc, #612]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e08:	4b96      	ldr	r3, [pc, #600]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e10:	2b10      	cmp	r3, #16
 8007e12:	d007      	beq.n	8007e24 <HAL_RCC_OscConfig+0x48>
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	2b18      	cmp	r3, #24
 8007e18:	d111      	bne.n	8007e3e <HAL_RCC_OscConfig+0x62>
 8007e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1c:	f003 0303 	and.w	r3, r3, #3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d10c      	bne.n	8007e3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e24:	4b8f      	ldr	r3, [pc, #572]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d06d      	beq.n	8007f0c <HAL_RCC_OscConfig+0x130>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d169      	bne.n	8007f0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f000 bc21 	b.w	8008680 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e46:	d106      	bne.n	8007e56 <HAL_RCC_OscConfig+0x7a>
 8007e48:	4b86      	ldr	r3, [pc, #536]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a85      	ldr	r2, [pc, #532]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	e02e      	b.n	8007eb4 <HAL_RCC_OscConfig+0xd8>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10c      	bne.n	8007e78 <HAL_RCC_OscConfig+0x9c>
 8007e5e:	4b81      	ldr	r3, [pc, #516]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a80      	ldr	r2, [pc, #512]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	4b7e      	ldr	r3, [pc, #504]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a7d      	ldr	r2, [pc, #500]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e01d      	b.n	8007eb4 <HAL_RCC_OscConfig+0xd8>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e80:	d10c      	bne.n	8007e9c <HAL_RCC_OscConfig+0xc0>
 8007e82:	4b78      	ldr	r3, [pc, #480]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a77      	ldr	r2, [pc, #476]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	4b75      	ldr	r3, [pc, #468]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a74      	ldr	r2, [pc, #464]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	e00b      	b.n	8007eb4 <HAL_RCC_OscConfig+0xd8>
 8007e9c:	4b71      	ldr	r3, [pc, #452]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a70      	ldr	r2, [pc, #448]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007ea2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	4b6e      	ldr	r3, [pc, #440]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a6d      	ldr	r2, [pc, #436]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007eae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d013      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebc:	f7fb fb3a 	bl	8003534 <HAL_GetTick>
 8007ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec4:	f7fb fb36 	bl	8003534 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b64      	cmp	r3, #100	@ 0x64
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e3d4      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ed6:	4b63      	ldr	r3, [pc, #396]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0f0      	beq.n	8007ec4 <HAL_RCC_OscConfig+0xe8>
 8007ee2:	e014      	b.n	8007f0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fb fb26 	bl	8003534 <HAL_GetTick>
 8007ee8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eec:	f7fb fb22 	bl	8003534 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	@ 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e3c0      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007efe:	4b59      	ldr	r3, [pc, #356]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1f0      	bne.n	8007eec <HAL_RCC_OscConfig+0x110>
 8007f0a:	e000      	b.n	8007f0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 80ca 	beq.w	80080b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f1c:	4b51      	ldr	r3, [pc, #324]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f26:	4b4f      	ldr	r3, [pc, #316]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_RCC_OscConfig+0x166>
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	2b18      	cmp	r3, #24
 8007f36:	d156      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x20a>
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d151      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f42:	4b48      	ldr	r3, [pc, #288]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0304 	and.w	r3, r3, #4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_RCC_OscConfig+0x17e>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e392      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f5a:	4b42      	ldr	r3, [pc, #264]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f023 0219 	bic.w	r2, r3, #25
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	493f      	ldr	r1, [pc, #252]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6c:	f7fb fae2 	bl	8003534 <HAL_GetTick>
 8007f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f74:	f7fb fade 	bl	8003534 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e37c      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f86:	4b37      	ldr	r3, [pc, #220]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f0      	beq.n	8007f74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f92:	f7fb fadb 	bl	800354c <HAL_GetREVID>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d817      	bhi.n	8007fd0 <HAL_RCC_OscConfig+0x1f4>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b40      	cmp	r3, #64	@ 0x40
 8007fa6:	d108      	bne.n	8007fba <HAL_RCC_OscConfig+0x1de>
 8007fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fb8:	e07a      	b.n	80080b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fba:	4b2a      	ldr	r3, [pc, #168]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	031b      	lsls	r3, r3, #12
 8007fc8:	4926      	ldr	r1, [pc, #152]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fce:	e06f      	b.n	80080b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd0:	4b24      	ldr	r3, [pc, #144]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	061b      	lsls	r3, r3, #24
 8007fde:	4921      	ldr	r1, [pc, #132]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fe4:	e064      	b.n	80080b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d047      	beq.n	800807e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fee:	4b1d      	ldr	r3, [pc, #116]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f023 0219 	bic.w	r2, r3, #25
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	491a      	ldr	r1, [pc, #104]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008000:	f7fb fa98 	bl	8003534 <HAL_GetTick>
 8008004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008008:	f7fb fa94 	bl	8003534 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e332      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800801a:	4b12      	ldr	r3, [pc, #72]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008026:	f7fb fa91 	bl	800354c <HAL_GetREVID>
 800802a:	4603      	mov	r3, r0
 800802c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008030:	4293      	cmp	r3, r2
 8008032:	d819      	bhi.n	8008068 <HAL_RCC_OscConfig+0x28c>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b40      	cmp	r3, #64	@ 0x40
 800803a:	d108      	bne.n	800804e <HAL_RCC_OscConfig+0x272>
 800803c:	4b09      	ldr	r3, [pc, #36]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008044:	4a07      	ldr	r2, [pc, #28]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8008046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800804a:	6053      	str	r3, [r2, #4]
 800804c:	e030      	b.n	80080b0 <HAL_RCC_OscConfig+0x2d4>
 800804e:	4b05      	ldr	r3, [pc, #20]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	031b      	lsls	r3, r3, #12
 800805c:	4901      	ldr	r1, [pc, #4]	@ (8008064 <HAL_RCC_OscConfig+0x288>)
 800805e:	4313      	orrs	r3, r2
 8008060:	604b      	str	r3, [r1, #4]
 8008062:	e025      	b.n	80080b0 <HAL_RCC_OscConfig+0x2d4>
 8008064:	58024400 	.word	0x58024400
 8008068:	4b9a      	ldr	r3, [pc, #616]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	061b      	lsls	r3, r3, #24
 8008076:	4997      	ldr	r1, [pc, #604]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008078:	4313      	orrs	r3, r2
 800807a:	604b      	str	r3, [r1, #4]
 800807c:	e018      	b.n	80080b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800807e:	4b95      	ldr	r3, [pc, #596]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a94      	ldr	r2, [pc, #592]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808a:	f7fb fa53 	bl	8003534 <HAL_GetTick>
 800808e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008092:	f7fb fa4f 	bl	8003534 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e2ed      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080a4:	4b8b      	ldr	r3, [pc, #556]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f0      	bne.n	8008092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0310 	and.w	r3, r3, #16
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80a9 	beq.w	8008210 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080be:	4b85      	ldr	r3, [pc, #532]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080c8:	4b82      	ldr	r3, [pc, #520]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80080ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	d007      	beq.n	80080e4 <HAL_RCC_OscConfig+0x308>
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	2b18      	cmp	r3, #24
 80080d8:	d13a      	bne.n	8008150 <HAL_RCC_OscConfig+0x374>
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f003 0303 	and.w	r3, r3, #3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d135      	bne.n	8008150 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080e4:	4b7b      	ldr	r3, [pc, #492]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d005      	beq.n	80080fc <HAL_RCC_OscConfig+0x320>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	2b80      	cmp	r3, #128	@ 0x80
 80080f6:	d001      	beq.n	80080fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e2c1      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080fc:	f7fb fa26 	bl	800354c <HAL_GetREVID>
 8008100:	4603      	mov	r3, r0
 8008102:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008106:	4293      	cmp	r3, r2
 8008108:	d817      	bhi.n	800813a <HAL_RCC_OscConfig+0x35e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	2b20      	cmp	r3, #32
 8008110:	d108      	bne.n	8008124 <HAL_RCC_OscConfig+0x348>
 8008112:	4b70      	ldr	r3, [pc, #448]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800811a:	4a6e      	ldr	r2, [pc, #440]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800811c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008120:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008122:	e075      	b.n	8008210 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008124:	4b6b      	ldr	r3, [pc, #428]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	069b      	lsls	r3, r3, #26
 8008132:	4968      	ldr	r1, [pc, #416]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008134:	4313      	orrs	r3, r2
 8008136:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008138:	e06a      	b.n	8008210 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800813a:	4b66      	ldr	r3, [pc, #408]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	061b      	lsls	r3, r3, #24
 8008148:	4962      	ldr	r1, [pc, #392]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800814a:	4313      	orrs	r3, r2
 800814c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800814e:	e05f      	b.n	8008210 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d042      	beq.n	80081de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008158:	4b5e      	ldr	r3, [pc, #376]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a5d      	ldr	r2, [pc, #372]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800815e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008164:	f7fb f9e6 	bl	8003534 <HAL_GetTick>
 8008168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800816c:	f7fb f9e2 	bl	8003534 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e280      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800817e:	4b55      	ldr	r3, [pc, #340]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f0      	beq.n	800816c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800818a:	f7fb f9df 	bl	800354c <HAL_GetREVID>
 800818e:	4603      	mov	r3, r0
 8008190:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008194:	4293      	cmp	r3, r2
 8008196:	d817      	bhi.n	80081c8 <HAL_RCC_OscConfig+0x3ec>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	2b20      	cmp	r3, #32
 800819e:	d108      	bne.n	80081b2 <HAL_RCC_OscConfig+0x3d6>
 80081a0:	4b4c      	ldr	r3, [pc, #304]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80081a8:	4a4a      	ldr	r2, [pc, #296]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80081aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081ae:	6053      	str	r3, [r2, #4]
 80081b0:	e02e      	b.n	8008210 <HAL_RCC_OscConfig+0x434>
 80081b2:	4b48      	ldr	r3, [pc, #288]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	069b      	lsls	r3, r3, #26
 80081c0:	4944      	ldr	r1, [pc, #272]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	604b      	str	r3, [r1, #4]
 80081c6:	e023      	b.n	8008210 <HAL_RCC_OscConfig+0x434>
 80081c8:	4b42      	ldr	r3, [pc, #264]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	061b      	lsls	r3, r3, #24
 80081d6:	493f      	ldr	r1, [pc, #252]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	60cb      	str	r3, [r1, #12]
 80081dc:	e018      	b.n	8008210 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80081de:	4b3d      	ldr	r3, [pc, #244]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a3c      	ldr	r2, [pc, #240]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80081e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ea:	f7fb f9a3 	bl	8003534 <HAL_GetTick>
 80081ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081f0:	e008      	b.n	8008204 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081f2:	f7fb f99f 	bl	8003534 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d901      	bls.n	8008204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e23d      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008204:	4b33      	ldr	r3, [pc, #204]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1f0      	bne.n	80081f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b00      	cmp	r3, #0
 800821a:	d036      	beq.n	800828a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d019      	beq.n	8008258 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008224:	4b2b      	ldr	r3, [pc, #172]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008228:	4a2a      	ldr	r2, [pc, #168]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008230:	f7fb f980 	bl	8003534 <HAL_GetTick>
 8008234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008238:	f7fb f97c 	bl	8003534 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e21a      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800824a:	4b22      	ldr	r3, [pc, #136]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800824c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x45c>
 8008256:	e018      	b.n	800828a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008258:	4b1e      	ldr	r3, [pc, #120]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800825a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800825c:	4a1d      	ldr	r2, [pc, #116]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008264:	f7fb f966 	bl	8003534 <HAL_GetTick>
 8008268:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800826a:	e008      	b.n	800827e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800826c:	f7fb f962 	bl	8003534 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e200      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800827e:	4b15      	ldr	r3, [pc, #84]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 8008280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f0      	bne.n	800826c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b00      	cmp	r3, #0
 8008294:	d039      	beq.n	800830a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d01c      	beq.n	80082d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800829e:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a0c      	ldr	r2, [pc, #48]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80082a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80082a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082aa:	f7fb f943 	bl	8003534 <HAL_GetTick>
 80082ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082b0:	e008      	b.n	80082c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082b2:	f7fb f93f 	bl	8003534 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d901      	bls.n	80082c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e1dd      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082c4:	4b03      	ldr	r3, [pc, #12]	@ (80082d4 <HAL_RCC_OscConfig+0x4f8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0f0      	beq.n	80082b2 <HAL_RCC_OscConfig+0x4d6>
 80082d0:	e01b      	b.n	800830a <HAL_RCC_OscConfig+0x52e>
 80082d2:	bf00      	nop
 80082d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082d8:	4b9b      	ldr	r3, [pc, #620]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a9a      	ldr	r2, [pc, #616]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80082de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082e4:	f7fb f926 	bl	8003534 <HAL_GetTick>
 80082e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082ec:	f7fb f922 	bl	8003534 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e1c0      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082fe:	4b92      	ldr	r3, [pc, #584]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f0      	bne.n	80082ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 8081 	beq.w	800841a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008318:	4b8c      	ldr	r3, [pc, #560]	@ (800854c <HAL_RCC_OscConfig+0x770>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a8b      	ldr	r2, [pc, #556]	@ (800854c <HAL_RCC_OscConfig+0x770>)
 800831e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008322:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008324:	f7fb f906 	bl	8003534 <HAL_GetTick>
 8008328:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800832c:	f7fb f902 	bl	8003534 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b64      	cmp	r3, #100	@ 0x64
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e1a0      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800833e:	4b83      	ldr	r3, [pc, #524]	@ (800854c <HAL_RCC_OscConfig+0x770>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0f0      	beq.n	800832c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d106      	bne.n	8008360 <HAL_RCC_OscConfig+0x584>
 8008352:	4b7d      	ldr	r3, [pc, #500]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008356:	4a7c      	ldr	r2, [pc, #496]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008358:	f043 0301 	orr.w	r3, r3, #1
 800835c:	6713      	str	r3, [r2, #112]	@ 0x70
 800835e:	e02d      	b.n	80083bc <HAL_RCC_OscConfig+0x5e0>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10c      	bne.n	8008382 <HAL_RCC_OscConfig+0x5a6>
 8008368:	4b77      	ldr	r3, [pc, #476]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 800836a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800836c:	4a76      	ldr	r2, [pc, #472]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	6713      	str	r3, [r2, #112]	@ 0x70
 8008374:	4b74      	ldr	r3, [pc, #464]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008378:	4a73      	ldr	r2, [pc, #460]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 800837a:	f023 0304 	bic.w	r3, r3, #4
 800837e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008380:	e01c      	b.n	80083bc <HAL_RCC_OscConfig+0x5e0>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2b05      	cmp	r3, #5
 8008388:	d10c      	bne.n	80083a4 <HAL_RCC_OscConfig+0x5c8>
 800838a:	4b6f      	ldr	r3, [pc, #444]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 800838c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800838e:	4a6e      	ldr	r2, [pc, #440]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008390:	f043 0304 	orr.w	r3, r3, #4
 8008394:	6713      	str	r3, [r2, #112]	@ 0x70
 8008396:	4b6c      	ldr	r3, [pc, #432]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839a:	4a6b      	ldr	r2, [pc, #428]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 800839c:	f043 0301 	orr.w	r3, r3, #1
 80083a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80083a2:	e00b      	b.n	80083bc <HAL_RCC_OscConfig+0x5e0>
 80083a4:	4b68      	ldr	r3, [pc, #416]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80083a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a8:	4a67      	ldr	r2, [pc, #412]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80083aa:	f023 0301 	bic.w	r3, r3, #1
 80083ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80083b0:	4b65      	ldr	r3, [pc, #404]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80083b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b4:	4a64      	ldr	r2, [pc, #400]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80083b6:	f023 0304 	bic.w	r3, r3, #4
 80083ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d015      	beq.n	80083f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c4:	f7fb f8b6 	bl	8003534 <HAL_GetTick>
 80083c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ca:	e00a      	b.n	80083e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083cc:	f7fb f8b2 	bl	8003534 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083da:	4293      	cmp	r3, r2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e14e      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083e2:	4b59      	ldr	r3, [pc, #356]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80083e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0ee      	beq.n	80083cc <HAL_RCC_OscConfig+0x5f0>
 80083ee:	e014      	b.n	800841a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f0:	f7fb f8a0 	bl	8003534 <HAL_GetTick>
 80083f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083f6:	e00a      	b.n	800840e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083f8:	f7fb f89c 	bl	8003534 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008406:	4293      	cmp	r3, r2
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e138      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800840e:	4b4e      	ldr	r3, [pc, #312]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1ee      	bne.n	80083f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 812d 	beq.w	800867e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008424:	4b48      	ldr	r3, [pc, #288]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800842c:	2b18      	cmp	r3, #24
 800842e:	f000 80bd 	beq.w	80085ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008436:	2b02      	cmp	r3, #2
 8008438:	f040 809e 	bne.w	8008578 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800843c:	4b42      	ldr	r3, [pc, #264]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a41      	ldr	r2, [pc, #260]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008448:	f7fb f874 	bl	8003534 <HAL_GetTick>
 800844c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fb f870 	bl	8003534 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e10e      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008462:	4b39      	ldr	r3, [pc, #228]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800846e:	4b36      	ldr	r3, [pc, #216]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008470:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008472:	4b37      	ldr	r3, [pc, #220]	@ (8008550 <HAL_RCC_OscConfig+0x774>)
 8008474:	4013      	ands	r3, r2
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800847e:	0112      	lsls	r2, r2, #4
 8008480:	430a      	orrs	r2, r1
 8008482:	4931      	ldr	r1, [pc, #196]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008484:	4313      	orrs	r3, r2
 8008486:	628b      	str	r3, [r1, #40]	@ 0x28
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848c:	3b01      	subs	r3, #1
 800848e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008496:	3b01      	subs	r3, #1
 8008498:	025b      	lsls	r3, r3, #9
 800849a:	b29b      	uxth	r3, r3
 800849c:	431a      	orrs	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a2:	3b01      	subs	r3, #1
 80084a4:	041b      	lsls	r3, r3, #16
 80084a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b0:	3b01      	subs	r3, #1
 80084b2:	061b      	lsls	r3, r3, #24
 80084b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80084b8:	4923      	ldr	r1, [pc, #140]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80084be:	4b22      	ldr	r3, [pc, #136]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c2:	4a21      	ldr	r2, [pc, #132]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ce:	4b21      	ldr	r3, [pc, #132]	@ (8008554 <HAL_RCC_OscConfig+0x778>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084d6:	00d2      	lsls	r2, r2, #3
 80084d8:	491b      	ldr	r1, [pc, #108]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80084de:	4b1a      	ldr	r3, [pc, #104]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	f023 020c 	bic.w	r2, r3, #12
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	4917      	ldr	r1, [pc, #92]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80084f0:	4b15      	ldr	r3, [pc, #84]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	f023 0202 	bic.w	r2, r3, #2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084fc:	4912      	ldr	r1, [pc, #72]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008502:	4b11      	ldr	r3, [pc, #68]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008506:	4a10      	ldr	r2, [pc, #64]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800850c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800850e:	4b0e      	ldr	r3, [pc, #56]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008512:	4a0d      	ldr	r2, [pc, #52]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008518:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800851a:	4b0b      	ldr	r3, [pc, #44]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 800851c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851e:	4a0a      	ldr	r2, [pc, #40]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008526:	4b08      	ldr	r3, [pc, #32]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852a:	4a07      	ldr	r2, [pc, #28]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 800852c:	f043 0301 	orr.w	r3, r3, #1
 8008530:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008532:	4b05      	ldr	r3, [pc, #20]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a04      	ldr	r2, [pc, #16]	@ (8008548 <HAL_RCC_OscConfig+0x76c>)
 8008538:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800853c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800853e:	f7fa fff9 	bl	8003534 <HAL_GetTick>
 8008542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008544:	e011      	b.n	800856a <HAL_RCC_OscConfig+0x78e>
 8008546:	bf00      	nop
 8008548:	58024400 	.word	0x58024400
 800854c:	58024800 	.word	0x58024800
 8008550:	fffffc0c 	.word	0xfffffc0c
 8008554:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008558:	f7fa ffec 	bl	8003534 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e08a      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800856a:	4b47      	ldr	r3, [pc, #284]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f0      	beq.n	8008558 <HAL_RCC_OscConfig+0x77c>
 8008576:	e082      	b.n	800867e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008578:	4b43      	ldr	r3, [pc, #268]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a42      	ldr	r2, [pc, #264]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 800857e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008584:	f7fa ffd6 	bl	8003534 <HAL_GetTick>
 8008588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800858c:	f7fa ffd2 	bl	8003534 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e070      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800859e:	4b3a      	ldr	r3, [pc, #232]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1f0      	bne.n	800858c <HAL_RCC_OscConfig+0x7b0>
 80085aa:	e068      	b.n	800867e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80085ac:	4b36      	ldr	r3, [pc, #216]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 80085ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80085b2:	4b35      	ldr	r3, [pc, #212]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d031      	beq.n	8008624 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f003 0203 	and.w	r2, r3, #3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d12a      	bne.n	8008624 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	091b      	lsrs	r3, r3, #4
 80085d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085da:	429a      	cmp	r2, r3
 80085dc:	d122      	bne.n	8008624 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d11a      	bne.n	8008624 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	0a5b      	lsrs	r3, r3, #9
 80085f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d111      	bne.n	8008624 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800860e:	429a      	cmp	r2, r3
 8008610:	d108      	bne.n	8008624 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	0e1b      	lsrs	r3, r3, #24
 8008616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008620:	429a      	cmp	r2, r3
 8008622:	d001      	beq.n	8008628 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e02b      	b.n	8008680 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008628:	4b17      	ldr	r3, [pc, #92]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 800862a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800862c:	08db      	lsrs	r3, r3, #3
 800862e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008632:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	429a      	cmp	r2, r3
 800863c:	d01f      	beq.n	800867e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800863e:	4b12      	ldr	r3, [pc, #72]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 8008640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008642:	4a11      	ldr	r2, [pc, #68]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800864a:	f7fa ff73 	bl	8003534 <HAL_GetTick>
 800864e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008650:	bf00      	nop
 8008652:	f7fa ff6f 	bl	8003534 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865a:	4293      	cmp	r3, r2
 800865c:	d0f9      	beq.n	8008652 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800865e:	4b0a      	ldr	r3, [pc, #40]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 8008660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008662:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <HAL_RCC_OscConfig+0x8b0>)
 8008664:	4013      	ands	r3, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800866a:	00d2      	lsls	r2, r2, #3
 800866c:	4906      	ldr	r1, [pc, #24]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 800866e:	4313      	orrs	r3, r2
 8008670:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008672:	4b05      	ldr	r3, [pc, #20]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 8008674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008676:	4a04      	ldr	r2, [pc, #16]	@ (8008688 <HAL_RCC_OscConfig+0x8ac>)
 8008678:	f043 0301 	orr.w	r3, r3, #1
 800867c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3730      	adds	r7, #48	@ 0x30
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	58024400 	.word	0x58024400
 800868c:	ffff0007 	.word	0xffff0007

08008690 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e19c      	b.n	80089de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086a4:	4b8a      	ldr	r3, [pc, #552]	@ (80088d0 <HAL_RCC_ClockConfig+0x240>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 030f 	and.w	r3, r3, #15
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d910      	bls.n	80086d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086b2:	4b87      	ldr	r3, [pc, #540]	@ (80088d0 <HAL_RCC_ClockConfig+0x240>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f023 020f 	bic.w	r2, r3, #15
 80086ba:	4985      	ldr	r1, [pc, #532]	@ (80088d0 <HAL_RCC_ClockConfig+0x240>)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	4313      	orrs	r3, r2
 80086c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c2:	4b83      	ldr	r3, [pc, #524]	@ (80088d0 <HAL_RCC_ClockConfig+0x240>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d001      	beq.n	80086d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e184      	b.n	80089de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d010      	beq.n	8008702 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	4b7b      	ldr	r3, [pc, #492]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d908      	bls.n	8008702 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086f0:	4b78      	ldr	r3, [pc, #480]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	4975      	ldr	r1, [pc, #468]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0308 	and.w	r3, r3, #8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d010      	beq.n	8008730 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	695a      	ldr	r2, [r3, #20]
 8008712:	4b70      	ldr	r3, [pc, #448]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800871a:	429a      	cmp	r2, r3
 800871c:	d908      	bls.n	8008730 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800871e:	4b6d      	ldr	r3, [pc, #436]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	496a      	ldr	r1, [pc, #424]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 800872c:	4313      	orrs	r3, r2
 800872e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d010      	beq.n	800875e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	699a      	ldr	r2, [r3, #24]
 8008740:	4b64      	ldr	r3, [pc, #400]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008748:	429a      	cmp	r2, r3
 800874a:	d908      	bls.n	800875e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800874c:	4b61      	ldr	r3, [pc, #388]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	495e      	ldr	r1, [pc, #376]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 800875a:	4313      	orrs	r3, r2
 800875c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b00      	cmp	r3, #0
 8008768:	d010      	beq.n	800878c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69da      	ldr	r2, [r3, #28]
 800876e:	4b59      	ldr	r3, [pc, #356]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008776:	429a      	cmp	r2, r3
 8008778:	d908      	bls.n	800878c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800877a:	4b56      	ldr	r3, [pc, #344]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	4953      	ldr	r1, [pc, #332]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008788:	4313      	orrs	r3, r2
 800878a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d010      	beq.n	80087ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	4b4d      	ldr	r3, [pc, #308]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	f003 030f 	and.w	r3, r3, #15
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d908      	bls.n	80087ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087a8:	4b4a      	ldr	r3, [pc, #296]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	f023 020f 	bic.w	r2, r3, #15
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	4947      	ldr	r1, [pc, #284]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d055      	beq.n	8008872 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087c6:	4b43      	ldr	r3, [pc, #268]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	4940      	ldr	r1, [pc, #256]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d107      	bne.n	80087f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087e0:	4b3c      	ldr	r3, [pc, #240]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d121      	bne.n	8008830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0f6      	b.n	80089de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d107      	bne.n	8008808 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087f8:	4b36      	ldr	r3, [pc, #216]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d115      	bne.n	8008830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0ea      	b.n	80089de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d107      	bne.n	8008820 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008810:	4b30      	ldr	r3, [pc, #192]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008818:	2b00      	cmp	r3, #0
 800881a:	d109      	bne.n	8008830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e0de      	b.n	80089de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008820:	4b2c      	ldr	r3, [pc, #176]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e0d6      	b.n	80089de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008830:	4b28      	ldr	r3, [pc, #160]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f023 0207 	bic.w	r2, r3, #7
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	4925      	ldr	r1, [pc, #148]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 800883e:	4313      	orrs	r3, r2
 8008840:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008842:	f7fa fe77 	bl	8003534 <HAL_GetTick>
 8008846:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008848:	e00a      	b.n	8008860 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800884a:	f7fa fe73 	bl	8003534 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008858:	4293      	cmp	r3, r2
 800885a:	d901      	bls.n	8008860 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e0be      	b.n	80089de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008860:	4b1c      	ldr	r3, [pc, #112]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	429a      	cmp	r2, r3
 8008870:	d1eb      	bne.n	800884a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d010      	beq.n	80088a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	4b14      	ldr	r3, [pc, #80]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	429a      	cmp	r2, r3
 800888c:	d208      	bcs.n	80088a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800888e:	4b11      	ldr	r3, [pc, #68]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	f023 020f 	bic.w	r2, r3, #15
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	490e      	ldr	r1, [pc, #56]	@ (80088d4 <HAL_RCC_ClockConfig+0x244>)
 800889c:	4313      	orrs	r3, r2
 800889e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088a0:	4b0b      	ldr	r3, [pc, #44]	@ (80088d0 <HAL_RCC_ClockConfig+0x240>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d214      	bcs.n	80088d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ae:	4b08      	ldr	r3, [pc, #32]	@ (80088d0 <HAL_RCC_ClockConfig+0x240>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f023 020f 	bic.w	r2, r3, #15
 80088b6:	4906      	ldr	r1, [pc, #24]	@ (80088d0 <HAL_RCC_ClockConfig+0x240>)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088be:	4b04      	ldr	r3, [pc, #16]	@ (80088d0 <HAL_RCC_ClockConfig+0x240>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d005      	beq.n	80088d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e086      	b.n	80089de <HAL_RCC_ClockConfig+0x34e>
 80088d0:	52002000 	.word	0x52002000
 80088d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d010      	beq.n	8008906 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	4b3f      	ldr	r3, [pc, #252]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d208      	bcs.n	8008906 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088f4:	4b3c      	ldr	r3, [pc, #240]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	4939      	ldr	r1, [pc, #228]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008902:	4313      	orrs	r3, r2
 8008904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0308 	and.w	r3, r3, #8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d010      	beq.n	8008934 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	695a      	ldr	r2, [r3, #20]
 8008916:	4b34      	ldr	r3, [pc, #208]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800891e:	429a      	cmp	r2, r3
 8008920:	d208      	bcs.n	8008934 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008922:	4b31      	ldr	r3, [pc, #196]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	492e      	ldr	r1, [pc, #184]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008930:	4313      	orrs	r3, r2
 8008932:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b00      	cmp	r3, #0
 800893e:	d010      	beq.n	8008962 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699a      	ldr	r2, [r3, #24]
 8008944:	4b28      	ldr	r3, [pc, #160]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800894c:	429a      	cmp	r2, r3
 800894e:	d208      	bcs.n	8008962 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008950:	4b25      	ldr	r3, [pc, #148]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	4922      	ldr	r1, [pc, #136]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 800895e:	4313      	orrs	r3, r2
 8008960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0320 	and.w	r3, r3, #32
 800896a:	2b00      	cmp	r3, #0
 800896c:	d010      	beq.n	8008990 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	69da      	ldr	r2, [r3, #28]
 8008972:	4b1d      	ldr	r3, [pc, #116]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800897a:	429a      	cmp	r2, r3
 800897c:	d208      	bcs.n	8008990 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800897e:	4b1a      	ldr	r3, [pc, #104]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	4917      	ldr	r1, [pc, #92]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 800898c:	4313      	orrs	r3, r2
 800898e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008990:	f000 f834 	bl	80089fc <HAL_RCC_GetSysClockFreq>
 8008994:	4602      	mov	r2, r0
 8008996:	4b14      	ldr	r3, [pc, #80]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	4912      	ldr	r1, [pc, #72]	@ (80089ec <HAL_RCC_ClockConfig+0x35c>)
 80089a2:	5ccb      	ldrb	r3, [r1, r3]
 80089a4:	f003 031f 	and.w	r3, r3, #31
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089ae:	4b0e      	ldr	r3, [pc, #56]	@ (80089e8 <HAL_RCC_ClockConfig+0x358>)
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	4a0d      	ldr	r2, [pc, #52]	@ (80089ec <HAL_RCC_ClockConfig+0x35c>)
 80089b8:	5cd3      	ldrb	r3, [r2, r3]
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
 80089c4:	4a0a      	ldr	r2, [pc, #40]	@ (80089f0 <HAL_RCC_ClockConfig+0x360>)
 80089c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089c8:	4a0a      	ldr	r2, [pc, #40]	@ (80089f4 <HAL_RCC_ClockConfig+0x364>)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80089ce:	4b0a      	ldr	r3, [pc, #40]	@ (80089f8 <HAL_RCC_ClockConfig+0x368>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7f9 fd0e 	bl	80023f4 <HAL_InitTick>
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	58024400 	.word	0x58024400
 80089ec:	08023518 	.word	0x08023518
 80089f0:	24000008 	.word	0x24000008
 80089f4:	24000004 	.word	0x24000004
 80089f8:	2400000c 	.word	0x2400000c

080089fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b089      	sub	sp, #36	@ 0x24
 8008a00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a02:	4bb3      	ldr	r3, [pc, #716]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a0a:	2b18      	cmp	r3, #24
 8008a0c:	f200 8155 	bhi.w	8008cba <HAL_RCC_GetSysClockFreq+0x2be>
 8008a10:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a7d 	.word	0x08008a7d
 8008a1c:	08008cbb 	.word	0x08008cbb
 8008a20:	08008cbb 	.word	0x08008cbb
 8008a24:	08008cbb 	.word	0x08008cbb
 8008a28:	08008cbb 	.word	0x08008cbb
 8008a2c:	08008cbb 	.word	0x08008cbb
 8008a30:	08008cbb 	.word	0x08008cbb
 8008a34:	08008cbb 	.word	0x08008cbb
 8008a38:	08008aa3 	.word	0x08008aa3
 8008a3c:	08008cbb 	.word	0x08008cbb
 8008a40:	08008cbb 	.word	0x08008cbb
 8008a44:	08008cbb 	.word	0x08008cbb
 8008a48:	08008cbb 	.word	0x08008cbb
 8008a4c:	08008cbb 	.word	0x08008cbb
 8008a50:	08008cbb 	.word	0x08008cbb
 8008a54:	08008cbb 	.word	0x08008cbb
 8008a58:	08008aa9 	.word	0x08008aa9
 8008a5c:	08008cbb 	.word	0x08008cbb
 8008a60:	08008cbb 	.word	0x08008cbb
 8008a64:	08008cbb 	.word	0x08008cbb
 8008a68:	08008cbb 	.word	0x08008cbb
 8008a6c:	08008cbb 	.word	0x08008cbb
 8008a70:	08008cbb 	.word	0x08008cbb
 8008a74:	08008cbb 	.word	0x08008cbb
 8008a78:	08008aaf 	.word	0x08008aaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a7c:	4b94      	ldr	r3, [pc, #592]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a88:	4b91      	ldr	r3, [pc, #580]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	4a90      	ldr	r2, [pc, #576]	@ (8008cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
 8008a98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008a9a:	e111      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a9c:	4b8d      	ldr	r3, [pc, #564]	@ (8008cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a9e:	61bb      	str	r3, [r7, #24]
      break;
 8008aa0:	e10e      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8008cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008aa4:	61bb      	str	r3, [r7, #24]
      break;
 8008aa6:	e10b      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8008cdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008aaa:	61bb      	str	r3, [r7, #24]
      break;
 8008aac:	e108      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008aae:	4b88      	ldr	r3, [pc, #544]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008ab8:	4b85      	ldr	r3, [pc, #532]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	091b      	lsrs	r3, r3, #4
 8008abe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ac2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ac4:	4b82      	ldr	r3, [pc, #520]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ace:	4b80      	ldr	r3, [pc, #512]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad2:	08db      	lsrs	r3, r3, #3
 8008ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	fb02 f303 	mul.w	r3, r2, r3
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 80e1 	beq.w	8008cb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	f000 8083 	beq.w	8008c00 <HAL_RCC_GetSysClockFreq+0x204>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	f200 80a1 	bhi.w	8008c44 <HAL_RCC_GetSysClockFreq+0x248>
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_RCC_GetSysClockFreq+0x114>
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d056      	beq.n	8008bbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b0e:	e099      	b.n	8008c44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b10:	4b6f      	ldr	r3, [pc, #444]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0320 	and.w	r3, r3, #32
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d02d      	beq.n	8008b78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	08db      	lsrs	r3, r3, #3
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	4a6b      	ldr	r2, [pc, #428]	@ (8008cd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b46:	4b62      	ldr	r3, [pc, #392]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008b76:	e087      	b.n	8008c88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008ce4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8a:	4b51      	ldr	r3, [pc, #324]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bba:	e065      	b.n	8008c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bce:	4b40      	ldr	r3, [pc, #256]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8008be2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bfe:	e043      	b.n	8008c88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008cec <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c12:	4b2f      	ldr	r3, [pc, #188]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c42:	e021      	b.n	8008c88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008ce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c56:	4b1e      	ldr	r3, [pc, #120]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008c88:	4b11      	ldr	r3, [pc, #68]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8c:	0a5b      	lsrs	r3, r3, #9
 8008c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c92:	3301      	adds	r3, #1
 8008c94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	ee07 3a90 	vmov	s15, r3
 8008c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cac:	ee17 3a90 	vmov	r3, s15
 8008cb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008cb2:	e005      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	61bb      	str	r3, [r7, #24]
      break;
 8008cb8:	e002      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008cba:	4b07      	ldr	r3, [pc, #28]	@ (8008cd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cbc:	61bb      	str	r3, [r7, #24]
      break;
 8008cbe:	bf00      	nop
  }

  return sysclockfreq;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3724      	adds	r7, #36	@ 0x24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	58024400 	.word	0x58024400
 8008cd4:	03d09000 	.word	0x03d09000
 8008cd8:	003d0900 	.word	0x003d0900
 8008cdc:	007a1200 	.word	0x007a1200
 8008ce0:	46000000 	.word	0x46000000
 8008ce4:	4c742400 	.word	0x4c742400
 8008ce8:	4a742400 	.word	0x4a742400
 8008cec:	4af42400 	.word	0x4af42400

08008cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cf6:	f7ff fe81 	bl	80089fc <HAL_RCC_GetSysClockFreq>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	4b10      	ldr	r3, [pc, #64]	@ (8008d40 <HAL_RCC_GetHCLKFreq+0x50>)
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	0a1b      	lsrs	r3, r3, #8
 8008d02:	f003 030f 	and.w	r3, r3, #15
 8008d06:	490f      	ldr	r1, [pc, #60]	@ (8008d44 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d08:	5ccb      	ldrb	r3, [r1, r3]
 8008d0a:	f003 031f 	and.w	r3, r3, #31
 8008d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d14:	4b0a      	ldr	r3, [pc, #40]	@ (8008d40 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	4a09      	ldr	r2, [pc, #36]	@ (8008d44 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d1e:	5cd3      	ldrb	r3, [r2, r3]
 8008d20:	f003 031f 	and.w	r3, r3, #31
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2a:	4a07      	ldr	r2, [pc, #28]	@ (8008d48 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d2e:	4a07      	ldr	r2, [pc, #28]	@ (8008d4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d34:	4b04      	ldr	r3, [pc, #16]	@ (8008d48 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	58024400 	.word	0x58024400
 8008d44:	08023518 	.word	0x08023518
 8008d48:	24000008 	.word	0x24000008
 8008d4c:	24000004 	.word	0x24000004

08008d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d54:	f7ff ffcc 	bl	8008cf0 <HAL_RCC_GetHCLKFreq>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	091b      	lsrs	r3, r3, #4
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	4904      	ldr	r1, [pc, #16]	@ (8008d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d66:	5ccb      	ldrb	r3, [r1, r3]
 8008d68:	f003 031f 	and.w	r3, r3, #31
 8008d6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	58024400 	.word	0x58024400
 8008d78:	08023518 	.word	0x08023518

08008d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008d80:	f7ff ffb6 	bl	8008cf0 <HAL_RCC_GetHCLKFreq>
 8008d84:	4602      	mov	r2, r0
 8008d86:	4b06      	ldr	r3, [pc, #24]	@ (8008da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	0a1b      	lsrs	r3, r3, #8
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	4904      	ldr	r1, [pc, #16]	@ (8008da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d92:	5ccb      	ldrb	r3, [r1, r3]
 8008d94:	f003 031f 	and.w	r3, r3, #31
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	58024400 	.word	0x58024400
 8008da4:	08023518 	.word	0x08023518

08008da8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	223f      	movs	r2, #63	@ 0x3f
 8008db6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008db8:	4b1a      	ldr	r3, [pc, #104]	@ (8008e24 <HAL_RCC_GetClockConfig+0x7c>)
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f003 0207 	and.w	r2, r3, #7
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008dc4:	4b17      	ldr	r3, [pc, #92]	@ (8008e24 <HAL_RCC_GetClockConfig+0x7c>)
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008dd0:	4b14      	ldr	r3, [pc, #80]	@ (8008e24 <HAL_RCC_GetClockConfig+0x7c>)
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f003 020f 	and.w	r2, r3, #15
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008ddc:	4b11      	ldr	r3, [pc, #68]	@ (8008e24 <HAL_RCC_GetClockConfig+0x7c>)
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008de8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e24 <HAL_RCC_GetClockConfig+0x7c>)
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008df4:	4b0b      	ldr	r3, [pc, #44]	@ (8008e24 <HAL_RCC_GetClockConfig+0x7c>)
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008e00:	4b08      	ldr	r3, [pc, #32]	@ (8008e24 <HAL_RCC_GetClockConfig+0x7c>)
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e0c:	4b06      	ldr	r3, [pc, #24]	@ (8008e28 <HAL_RCC_GetClockConfig+0x80>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 020f 	and.w	r2, r3, #15
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	601a      	str	r2, [r3, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	58024400 	.word	0x58024400
 8008e28:	52002000 	.word	0x52002000

08008e2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e30:	b0ca      	sub	sp, #296	@ 0x128
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008e50:	2500      	movs	r5, #0
 8008e52:	ea54 0305 	orrs.w	r3, r4, r5
 8008e56:	d049      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e62:	d02f      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e68:	d828      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e6e:	d01a      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e74:	d822      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e7e:	d007      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e80:	e01c      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e82:	4bb8      	ldr	r3, [pc, #736]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e86:	4ab7      	ldr	r2, [pc, #732]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e8e:	e01a      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e94:	3308      	adds	r3, #8
 8008e96:	2102      	movs	r1, #2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f002 fb61 	bl	800b560 <RCCEx_PLL2_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ea4:	e00f      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eaa:	3328      	adds	r3, #40	@ 0x28
 8008eac:	2102      	movs	r1, #2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f002 fc08 	bl	800b6c4 <RCCEx_PLL3_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008eba:	e004      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ec2:	e000      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ece:	4ba5      	ldr	r3, [pc, #660]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008edc:	4aa1      	ldr	r2, [pc, #644]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ee2:	e003      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ef8:	f04f 0900 	mov.w	r9, #0
 8008efc:	ea58 0309 	orrs.w	r3, r8, r9
 8008f00:	d047      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	d82a      	bhi.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f29 	.word	0x08008f29
 8008f18:	08008f37 	.word	0x08008f37
 8008f1c:	08008f4d 	.word	0x08008f4d
 8008f20:	08008f6b 	.word	0x08008f6b
 8008f24:	08008f6b 	.word	0x08008f6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f28:	4b8e      	ldr	r3, [pc, #568]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2c:	4a8d      	ldr	r2, [pc, #564]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f34:	e01a      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f002 fb0e 	bl	800b560 <RCCEx_PLL2_Config>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f4a:	e00f      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f50:	3328      	adds	r3, #40	@ 0x28
 8008f52:	2100      	movs	r1, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f002 fbb5 	bl	800b6c4 <RCCEx_PLL3_Config>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f60:	e004      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f68:	e000      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f74:	4b7b      	ldr	r3, [pc, #492]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f78:	f023 0107 	bic.w	r1, r3, #7
 8008f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f82:	4a78      	ldr	r2, [pc, #480]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f84:	430b      	orrs	r3, r1
 8008f86:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f88:	e003      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008f9e:	f04f 0b00 	mov.w	fp, #0
 8008fa2:	ea5a 030b 	orrs.w	r3, sl, fp
 8008fa6:	d04c      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fb2:	d030      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fb8:	d829      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fba:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fbc:	d02d      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008fbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fc0:	d825      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fc2:	2b80      	cmp	r3, #128	@ 0x80
 8008fc4:	d018      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008fc6:	2b80      	cmp	r3, #128	@ 0x80
 8008fc8:	d821      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008fce:	2b40      	cmp	r3, #64	@ 0x40
 8008fd0:	d007      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008fd2:	e01c      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fd4:	4b63      	ldr	r3, [pc, #396]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd8:	4a62      	ldr	r2, [pc, #392]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fe0:	e01c      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f002 fab8 	bl	800b560 <RCCEx_PLL2_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ff6:	e011      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ffc:	3328      	adds	r3, #40	@ 0x28
 8008ffe:	2100      	movs	r1, #0
 8009000:	4618      	mov	r0, r3
 8009002:	f002 fb5f 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800900c:	e006      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009014:	e002      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009016:	bf00      	nop
 8009018:	e000      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800901a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009024:	4b4f      	ldr	r3, [pc, #316]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009028:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800902c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009032:	4a4c      	ldr	r2, [pc, #304]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009034:	430b      	orrs	r3, r1
 8009036:	6513      	str	r3, [r2, #80]	@ 0x50
 8009038:	e003      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800903e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800904e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009052:	2300      	movs	r3, #0
 8009054:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009058:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800905c:	460b      	mov	r3, r1
 800905e:	4313      	orrs	r3, r2
 8009060:	d053      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009066:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800906a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800906e:	d035      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009070:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009074:	d82e      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009076:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800907a:	d031      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800907c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009080:	d828      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009082:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009086:	d01a      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009088:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800908c:	d822      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009096:	d007      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009098:	e01c      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800909a:	4b32      	ldr	r3, [pc, #200]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800909c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909e:	4a31      	ldr	r2, [pc, #196]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090a6:	e01c      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	3308      	adds	r3, #8
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f002 fa55 	bl	800b560 <RCCEx_PLL2_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80090bc:	e011      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c2:	3328      	adds	r3, #40	@ 0x28
 80090c4:	2100      	movs	r1, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f002 fafc 	bl	800b6c4 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090d2:	e006      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090da:	e002      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80090dc:	bf00      	nop
 80090de:	e000      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80090e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090ea:	4b1e      	ldr	r3, [pc, #120]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090fc:	430b      	orrs	r3, r1
 80090fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8009100:	e003      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009116:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800911a:	2300      	movs	r3, #0
 800911c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009120:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009124:	460b      	mov	r3, r1
 8009126:	4313      	orrs	r3, r2
 8009128:	d056      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800912a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800912e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009132:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009136:	d038      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009138:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800913c:	d831      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800913e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009142:	d034      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009144:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009148:	d82b      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800914a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800914e:	d01d      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009154:	d825      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d006      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800915a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800915e:	d00a      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009160:	e01f      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009162:	bf00      	nop
 8009164:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009168:	4ba2      	ldr	r3, [pc, #648]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800916a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800916c:	4aa1      	ldr	r2, [pc, #644]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800916e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009174:	e01c      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917a:	3308      	adds	r3, #8
 800917c:	2100      	movs	r1, #0
 800917e:	4618      	mov	r0, r3
 8009180:	f002 f9ee 	bl	800b560 <RCCEx_PLL2_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800918a:	e011      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800918c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009190:	3328      	adds	r3, #40	@ 0x28
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f002 fa95 	bl	800b6c4 <RCCEx_PLL3_Config>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091a0:	e006      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091a8:	e002      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091aa:	bf00      	nop
 80091ac:	e000      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10b      	bne.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091b8:	4b8e      	ldr	r3, [pc, #568]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091c8:	4a8a      	ldr	r2, [pc, #552]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ca:	430b      	orrs	r3, r1
 80091cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80091ce:	e003      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80091e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80091e8:	2300      	movs	r3, #0
 80091ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80091ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80091f2:	460b      	mov	r3, r1
 80091f4:	4313      	orrs	r3, r2
 80091f6:	d03a      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80091f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091fe:	2b30      	cmp	r3, #48	@ 0x30
 8009200:	d01f      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009202:	2b30      	cmp	r3, #48	@ 0x30
 8009204:	d819      	bhi.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d00c      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800920a:	2b20      	cmp	r3, #32
 800920c:	d815      	bhi.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d019      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009212:	2b10      	cmp	r3, #16
 8009214:	d111      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009216:	4b77      	ldr	r3, [pc, #476]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921a:	4a76      	ldr	r2, [pc, #472]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800921c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009222:	e011      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009228:	3308      	adds	r3, #8
 800922a:	2102      	movs	r1, #2
 800922c:	4618      	mov	r0, r3
 800922e:	f002 f997 	bl	800b560 <RCCEx_PLL2_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009238:	e006      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009240:	e002      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009242:	bf00      	nop
 8009244:	e000      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009250:	4b68      	ldr	r3, [pc, #416]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009254:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800925c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800925e:	4a65      	ldr	r2, [pc, #404]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009260:	430b      	orrs	r3, r1
 8009262:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009264:	e003      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800926a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800927a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800927e:	2300      	movs	r3, #0
 8009280:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009284:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009288:	460b      	mov	r3, r1
 800928a:	4313      	orrs	r3, r2
 800928c:	d051      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800928e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009298:	d035      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800929a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800929e:	d82e      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092a4:	d031      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80092a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092aa:	d828      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092b0:	d01a      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80092b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092b6:	d822      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80092bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092c0:	d007      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80092c2:	e01c      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c4:	4b4b      	ldr	r3, [pc, #300]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	4a4a      	ldr	r2, [pc, #296]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092d0:	e01c      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d6:	3308      	adds	r3, #8
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f002 f940 	bl	800b560 <RCCEx_PLL2_Config>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092e6:	e011      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ec:	3328      	adds	r3, #40	@ 0x28
 80092ee:	2100      	movs	r1, #0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f002 f9e7 	bl	800b6c4 <RCCEx_PLL3_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092fc:	e006      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009304:	e002      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009306:	bf00      	nop
 8009308:	e000      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800930a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800930c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009314:	4b37      	ldr	r3, [pc, #220]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009318:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800931c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009322:	4a34      	ldr	r2, [pc, #208]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009324:	430b      	orrs	r3, r1
 8009326:	6513      	str	r3, [r2, #80]	@ 0x50
 8009328:	e003      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800932e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800933e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009342:	2300      	movs	r3, #0
 8009344:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009348:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800934c:	460b      	mov	r3, r1
 800934e:	4313      	orrs	r3, r2
 8009350:	d056      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800935c:	d033      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800935e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009362:	d82c      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009364:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009368:	d02f      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800936a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800936e:	d826      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009370:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009374:	d02b      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009376:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800937a:	d820      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800937c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009380:	d012      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009382:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009386:	d81a      	bhi.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009388:	2b00      	cmp	r3, #0
 800938a:	d022      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800938c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009390:	d115      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009396:	3308      	adds	r3, #8
 8009398:	2101      	movs	r1, #1
 800939a:	4618      	mov	r0, r3
 800939c:	f002 f8e0 	bl	800b560 <RCCEx_PLL2_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093a6:	e015      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ac:	3328      	adds	r3, #40	@ 0x28
 80093ae:	2101      	movs	r1, #1
 80093b0:	4618      	mov	r0, r3
 80093b2:	f002 f987 	bl	800b6c4 <RCCEx_PLL3_Config>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093bc:	e00a      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093c4:	e006      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093c6:	bf00      	nop
 80093c8:	e004      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093ca:	bf00      	nop
 80093cc:	e002      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093ce:	bf00      	nop
 80093d0:	e000      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10d      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80093dc:	4b05      	ldr	r3, [pc, #20]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ea:	4a02      	ldr	r2, [pc, #8]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ec:	430b      	orrs	r3, r1
 80093ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80093f0:	e006      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80093f2:	bf00      	nop
 80093f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800940c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009410:	2300      	movs	r3, #0
 8009412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009416:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800941a:	460b      	mov	r3, r1
 800941c:	4313      	orrs	r3, r2
 800941e:	d055      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800942c:	d033      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800942e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009432:	d82c      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009438:	d02f      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943e:	d826      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009440:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009444:	d02b      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009446:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800944a:	d820      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800944c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009450:	d012      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009456:	d81a      	bhi.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d022      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800945c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009460:	d115      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009466:	3308      	adds	r3, #8
 8009468:	2101      	movs	r1, #1
 800946a:	4618      	mov	r0, r3
 800946c:	f002 f878 	bl	800b560 <RCCEx_PLL2_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009476:	e015      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947c:	3328      	adds	r3, #40	@ 0x28
 800947e:	2101      	movs	r1, #1
 8009480:	4618      	mov	r0, r3
 8009482:	f002 f91f 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800948c:	e00a      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009494:	e006      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009496:	bf00      	nop
 8009498:	e004      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800949a:	bf00      	nop
 800949c:	e002      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800949e:	bf00      	nop
 80094a0:	e000      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80094ac:	4ba3      	ldr	r3, [pc, #652]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80094b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094bc:	4a9f      	ldr	r2, [pc, #636]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094be:	430b      	orrs	r3, r1
 80094c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80094c2:	e003      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80094d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094dc:	2300      	movs	r3, #0
 80094de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80094e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80094e6:	460b      	mov	r3, r1
 80094e8:	4313      	orrs	r3, r2
 80094ea:	d037      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80094ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094f6:	d00e      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80094f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094fc:	d816      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d018      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009506:	d111      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009508:	4b8c      	ldr	r3, [pc, #560]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800950a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950c:	4a8b      	ldr	r2, [pc, #556]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800950e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009514:	e00f      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951a:	3308      	adds	r3, #8
 800951c:	2101      	movs	r1, #1
 800951e:	4618      	mov	r0, r3
 8009520:	f002 f81e 	bl	800b560 <RCCEx_PLL2_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800952a:	e004      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009532:	e000      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800953e:	4b7f      	ldr	r3, [pc, #508]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009542:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800954c:	4a7b      	ldr	r2, [pc, #492]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800954e:	430b      	orrs	r3, r1
 8009550:	6513      	str	r3, [r2, #80]	@ 0x50
 8009552:	e003      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800955c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800956c:	2300      	movs	r3, #0
 800956e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009572:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009576:	460b      	mov	r3, r1
 8009578:	4313      	orrs	r3, r2
 800957a:	d039      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800957c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009582:	2b03      	cmp	r3, #3
 8009584:	d81c      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009586:	a201      	add	r2, pc, #4	@ (adr r2, 800958c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958c:	080095c9 	.word	0x080095c9
 8009590:	0800959d 	.word	0x0800959d
 8009594:	080095ab 	.word	0x080095ab
 8009598:	080095c9 	.word	0x080095c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800959c:	4b67      	ldr	r3, [pc, #412]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800959e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a0:	4a66      	ldr	r2, [pc, #408]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095a8:	e00f      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ae:	3308      	adds	r3, #8
 80095b0:	2102      	movs	r1, #2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 ffd4 	bl	800b560 <RCCEx_PLL2_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095be:	e004      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095c6:	e000      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80095c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095d2:	4b5a      	ldr	r3, [pc, #360]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095d6:	f023 0103 	bic.w	r1, r3, #3
 80095da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095e0:	4a56      	ldr	r2, [pc, #344]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e2:	430b      	orrs	r3, r1
 80095e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095e6:	e003      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80095fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009600:	2300      	movs	r3, #0
 8009602:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009606:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800960a:	460b      	mov	r3, r1
 800960c:	4313      	orrs	r3, r2
 800960e:	f000 809f 	beq.w	8009750 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009612:	4b4b      	ldr	r3, [pc, #300]	@ (8009740 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a4a      	ldr	r2, [pc, #296]	@ (8009740 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800961c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800961e:	f7f9 ff89 	bl	8003534 <HAL_GetTick>
 8009622:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009626:	e00b      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009628:	f7f9 ff84 	bl	8003534 <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b64      	cmp	r3, #100	@ 0x64
 8009636:	d903      	bls.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800963e:	e005      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009640:	4b3f      	ldr	r3, [pc, #252]	@ (8009740 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0ed      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800964c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009650:	2b00      	cmp	r3, #0
 8009652:	d179      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009654:	4b39      	ldr	r3, [pc, #228]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009656:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009660:	4053      	eors	r3, r2
 8009662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009666:	2b00      	cmp	r3, #0
 8009668:	d015      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800966a:	4b34      	ldr	r3, [pc, #208]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800966c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800966e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009672:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009676:	4b31      	ldr	r3, [pc, #196]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800967a:	4a30      	ldr	r2, [pc, #192]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800967c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009680:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009682:	4b2e      	ldr	r3, [pc, #184]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009686:	4a2d      	ldr	r2, [pc, #180]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800968c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800968e:	4a2b      	ldr	r2, [pc, #172]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009694:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800969e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a2:	d118      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a4:	f7f9 ff46 	bl	8003534 <HAL_GetTick>
 80096a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096ac:	e00d      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096ae:	f7f9 ff41 	bl	8003534 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096b8:	1ad2      	subs	r2, r2, r3
 80096ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80096be:	429a      	cmp	r2, r3
 80096c0:	d903      	bls.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80096c8:	e005      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096ca:	4b1c      	ldr	r3, [pc, #112]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d0eb      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80096d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d129      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096ee:	d10e      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80096f0:	4b12      	ldr	r3, [pc, #72]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80096f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009700:	091a      	lsrs	r2, r3, #4
 8009702:	4b10      	ldr	r3, [pc, #64]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009704:	4013      	ands	r3, r2
 8009706:	4a0d      	ldr	r2, [pc, #52]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009708:	430b      	orrs	r3, r1
 800970a:	6113      	str	r3, [r2, #16]
 800970c:	e005      	b.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800970e:	4b0b      	ldr	r3, [pc, #44]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	4a0a      	ldr	r2, [pc, #40]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009714:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009718:	6113      	str	r3, [r2, #16]
 800971a:	4b08      	ldr	r3, [pc, #32]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800971c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009722:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800972a:	4a04      	ldr	r2, [pc, #16]	@ (800973c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800972c:	430b      	orrs	r3, r1
 800972e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009730:	e00e      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800973a:	e009      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800973c:	58024400 	.word	0x58024400
 8009740:	58024800 	.word	0x58024800
 8009744:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800974c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f002 0301 	and.w	r3, r2, #1
 800975c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009760:	2300      	movs	r3, #0
 8009762:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009766:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800976a:	460b      	mov	r3, r1
 800976c:	4313      	orrs	r3, r2
 800976e:	f000 8089 	beq.w	8009884 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009778:	2b28      	cmp	r3, #40	@ 0x28
 800977a:	d86b      	bhi.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800977c:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	0800985d 	.word	0x0800985d
 8009788:	08009855 	.word	0x08009855
 800978c:	08009855 	.word	0x08009855
 8009790:	08009855 	.word	0x08009855
 8009794:	08009855 	.word	0x08009855
 8009798:	08009855 	.word	0x08009855
 800979c:	08009855 	.word	0x08009855
 80097a0:	08009855 	.word	0x08009855
 80097a4:	08009829 	.word	0x08009829
 80097a8:	08009855 	.word	0x08009855
 80097ac:	08009855 	.word	0x08009855
 80097b0:	08009855 	.word	0x08009855
 80097b4:	08009855 	.word	0x08009855
 80097b8:	08009855 	.word	0x08009855
 80097bc:	08009855 	.word	0x08009855
 80097c0:	08009855 	.word	0x08009855
 80097c4:	0800983f 	.word	0x0800983f
 80097c8:	08009855 	.word	0x08009855
 80097cc:	08009855 	.word	0x08009855
 80097d0:	08009855 	.word	0x08009855
 80097d4:	08009855 	.word	0x08009855
 80097d8:	08009855 	.word	0x08009855
 80097dc:	08009855 	.word	0x08009855
 80097e0:	08009855 	.word	0x08009855
 80097e4:	0800985d 	.word	0x0800985d
 80097e8:	08009855 	.word	0x08009855
 80097ec:	08009855 	.word	0x08009855
 80097f0:	08009855 	.word	0x08009855
 80097f4:	08009855 	.word	0x08009855
 80097f8:	08009855 	.word	0x08009855
 80097fc:	08009855 	.word	0x08009855
 8009800:	08009855 	.word	0x08009855
 8009804:	0800985d 	.word	0x0800985d
 8009808:	08009855 	.word	0x08009855
 800980c:	08009855 	.word	0x08009855
 8009810:	08009855 	.word	0x08009855
 8009814:	08009855 	.word	0x08009855
 8009818:	08009855 	.word	0x08009855
 800981c:	08009855 	.word	0x08009855
 8009820:	08009855 	.word	0x08009855
 8009824:	0800985d 	.word	0x0800985d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982c:	3308      	adds	r3, #8
 800982e:	2101      	movs	r1, #1
 8009830:	4618      	mov	r0, r3
 8009832:	f001 fe95 	bl	800b560 <RCCEx_PLL2_Config>
 8009836:	4603      	mov	r3, r0
 8009838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800983c:	e00f      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009842:	3328      	adds	r3, #40	@ 0x28
 8009844:	2101      	movs	r1, #1
 8009846:	4618      	mov	r0, r3
 8009848:	f001 ff3c 	bl	800b6c4 <RCCEx_PLL3_Config>
 800984c:	4603      	mov	r3, r0
 800984e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009852:	e004      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800985a:	e000      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800985c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800985e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009866:	4bbf      	ldr	r3, [pc, #764]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800986a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800986e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009874:	4abb      	ldr	r2, [pc, #748]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009876:	430b      	orrs	r3, r1
 8009878:	6553      	str	r3, [r2, #84]	@ 0x54
 800987a:	e003      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009880:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	f002 0302 	and.w	r3, r2, #2
 8009890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009894:	2300      	movs	r3, #0
 8009896:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800989a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800989e:	460b      	mov	r3, r1
 80098a0:	4313      	orrs	r3, r2
 80098a2:	d041      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d824      	bhi.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80098ae:	a201      	add	r2, pc, #4	@ (adr r2, 80098b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	08009901 	.word	0x08009901
 80098b8:	080098cd 	.word	0x080098cd
 80098bc:	080098e3 	.word	0x080098e3
 80098c0:	08009901 	.word	0x08009901
 80098c4:	08009901 	.word	0x08009901
 80098c8:	08009901 	.word	0x08009901
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d0:	3308      	adds	r3, #8
 80098d2:	2101      	movs	r1, #1
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 fe43 	bl	800b560 <RCCEx_PLL2_Config>
 80098da:	4603      	mov	r3, r0
 80098dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098e0:	e00f      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e6:	3328      	adds	r3, #40	@ 0x28
 80098e8:	2101      	movs	r1, #1
 80098ea:	4618      	mov	r0, r3
 80098ec:	f001 feea 	bl	800b6c4 <RCCEx_PLL3_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098f6:	e004      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098fe:	e000      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10a      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800990a:	4b96      	ldr	r3, [pc, #600]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800990c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990e:	f023 0107 	bic.w	r1, r3, #7
 8009912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009918:	4a92      	ldr	r2, [pc, #584]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800991a:	430b      	orrs	r3, r1
 800991c:	6553      	str	r3, [r2, #84]	@ 0x54
 800991e:	e003      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	f002 0304 	and.w	r3, r2, #4
 8009934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009938:	2300      	movs	r3, #0
 800993a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800993e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009942:	460b      	mov	r3, r1
 8009944:	4313      	orrs	r3, r2
 8009946:	d044      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009950:	2b05      	cmp	r3, #5
 8009952:	d825      	bhi.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009954:	a201      	add	r2, pc, #4	@ (adr r2, 800995c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995a:	bf00      	nop
 800995c:	080099a9 	.word	0x080099a9
 8009960:	08009975 	.word	0x08009975
 8009964:	0800998b 	.word	0x0800998b
 8009968:	080099a9 	.word	0x080099a9
 800996c:	080099a9 	.word	0x080099a9
 8009970:	080099a9 	.word	0x080099a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009978:	3308      	adds	r3, #8
 800997a:	2101      	movs	r1, #1
 800997c:	4618      	mov	r0, r3
 800997e:	f001 fdef 	bl	800b560 <RCCEx_PLL2_Config>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009988:	e00f      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998e:	3328      	adds	r3, #40	@ 0x28
 8009990:	2101      	movs	r1, #1
 8009992:	4618      	mov	r0, r3
 8009994:	f001 fe96 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009998:	4603      	mov	r3, r0
 800999a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800999e:	e004      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099a6:	e000      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80099a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099b2:	4b6c      	ldr	r3, [pc, #432]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b6:	f023 0107 	bic.w	r1, r3, #7
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099c2:	4a68      	ldr	r2, [pc, #416]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099c4:	430b      	orrs	r3, r1
 80099c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80099c8:	e003      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f002 0320 	and.w	r3, r2, #32
 80099de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099e2:	2300      	movs	r3, #0
 80099e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099ec:	460b      	mov	r3, r1
 80099ee:	4313      	orrs	r3, r2
 80099f0:	d055      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099fe:	d033      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a04:	d82c      	bhi.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a0a:	d02f      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a10:	d826      	bhi.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a16:	d02b      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009a18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a1c:	d820      	bhi.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a22:	d012      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a28:	d81a      	bhi.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d022      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a32:	d115      	bne.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a38:	3308      	adds	r3, #8
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 fd8f 	bl	800b560 <RCCEx_PLL2_Config>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a48:	e015      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4e:	3328      	adds	r3, #40	@ 0x28
 8009a50:	2102      	movs	r1, #2
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 fe36 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a5e:	e00a      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a66:	e006      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a68:	bf00      	nop
 8009a6a:	e004      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a6c:	bf00      	nop
 8009a6e:	e002      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a70:	bf00      	nop
 8009a72:	e000      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10b      	bne.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a7e:	4b39      	ldr	r3, [pc, #228]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8e:	4a35      	ldr	r2, [pc, #212]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a90:	430b      	orrs	r3, r1
 8009a92:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a94:	e003      	b.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ab4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4313      	orrs	r3, r2
 8009abc:	d058      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ac6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009aca:	d033      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009acc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ad0:	d82c      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ad6:	d02f      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009adc:	d826      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ade:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ae2:	d02b      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009ae4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ae8:	d820      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009aea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aee:	d012      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009af4:	d81a      	bhi.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d022      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009afe:	d115      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b04:	3308      	adds	r3, #8
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 fd29 	bl	800b560 <RCCEx_PLL2_Config>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b14:	e015      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1a:	3328      	adds	r3, #40	@ 0x28
 8009b1c:	2102      	movs	r1, #2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f001 fdd0 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009b24:	4603      	mov	r3, r0
 8009b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b2a:	e00a      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b32:	e006      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b34:	bf00      	nop
 8009b36:	e004      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b38:	bf00      	nop
 8009b3a:	e002      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b3c:	bf00      	nop
 8009b3e:	e000      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10e      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b4a:	4b06      	ldr	r3, [pc, #24]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b5a:	4a02      	ldr	r2, [pc, #8]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b60:	e006      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009b62:	bf00      	nop
 8009b64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	d055      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b9c:	d033      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009b9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009ba2:	d82c      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ba8:	d02f      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bae:	d826      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bb0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009bb4:	d02b      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009bb6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009bba:	d820      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bc0:	d012      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bc6:	d81a      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d022      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bd0:	d115      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	2100      	movs	r1, #0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fcc0 	bl	800b560 <RCCEx_PLL2_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009be6:	e015      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bec:	3328      	adds	r3, #40	@ 0x28
 8009bee:	2102      	movs	r1, #2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f001 fd67 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009bfc:	e00a      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c04:	e006      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c06:	bf00      	nop
 8009c08:	e004      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c0a:	bf00      	nop
 8009c0c:	e002      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c0e:	bf00      	nop
 8009c10:	e000      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c2c:	4a9d      	ldr	r2, [pc, #628]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c32:	e003      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f002 0308 	and.w	r3, r2, #8
 8009c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c56:	460b      	mov	r3, r1
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	d01e      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c68:	d10c      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6e:	3328      	adds	r3, #40	@ 0x28
 8009c70:	2102      	movs	r1, #2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 fd26 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009c84:	4b87      	ldr	r3, [pc, #540]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c94:	4a83      	ldr	r2, [pc, #524]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c96:	430b      	orrs	r3, r1
 8009c98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f002 0310 	and.w	r3, r2, #16
 8009ca6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009caa:	2300      	movs	r3, #0
 8009cac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009cb0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	d01e      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cc6:	d10c      	bne.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ccc:	3328      	adds	r3, #40	@ 0x28
 8009cce:	2102      	movs	r1, #2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 fcf7 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ce2:	4b70      	ldr	r3, [pc, #448]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ce6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cf2:	4a6c      	ldr	r2, [pc, #432]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009d12:	460b      	mov	r3, r1
 8009d14:	4313      	orrs	r3, r2
 8009d16:	d03e      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d24:	d022      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d2a:	d81b      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d34:	d00b      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009d36:	e015      	b.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	2100      	movs	r1, #0
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 fc0d 	bl	800b560 <RCCEx_PLL2_Config>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d4c:	e00f      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d52:	3328      	adds	r3, #40	@ 0x28
 8009d54:	2102      	movs	r1, #2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fcb4 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d62:	e004      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d6a:	e000      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10b      	bne.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d76:	4b4b      	ldr	r3, [pc, #300]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d86:	4a47      	ldr	r2, [pc, #284]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d88:	430b      	orrs	r3, r1
 8009d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d8c:	e003      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009da2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009da4:	2300      	movs	r3, #0
 8009da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009da8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009dac:	460b      	mov	r3, r1
 8009dae:	4313      	orrs	r3, r2
 8009db0:	d03b      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009dbe:	d01f      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009dc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009dc4:	d818      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009dc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dca:	d003      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009dcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dd0:	d007      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009dd2:	e011      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd4:	4b33      	ldr	r3, [pc, #204]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd8:	4a32      	ldr	r2, [pc, #200]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009de0:	e00f      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de6:	3328      	adds	r3, #40	@ 0x28
 8009de8:	2101      	movs	r1, #1
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fc6a 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009df6:	e004      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dfe:	e000      	b.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e0a:	4b26      	ldr	r3, [pc, #152]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e1a:	4a22      	ldr	r2, [pc, #136]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e20:	e003      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e36:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e38:	2300      	movs	r3, #0
 8009e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009e40:	460b      	mov	r3, r1
 8009e42:	4313      	orrs	r3, r2
 8009e44:	d034      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e54:	d007      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009e56:	e011      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e58:	4b12      	ldr	r3, [pc, #72]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5c:	4a11      	ldr	r2, [pc, #68]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e64:	e00e      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f001 fb76 	bl	800b560 <RCCEx_PLL2_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e7a:	e003      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10d      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e8c:	4b05      	ldr	r3, [pc, #20]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e9a:	4a02      	ldr	r2, [pc, #8]	@ (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ea0:	e006      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009ea2:	bf00      	nop
 8009ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ec2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	d00c      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed0:	3328      	adds	r3, #40	@ 0x28
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fbf5 	bl	800b6c4 <RCCEx_PLL3_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ef2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ef8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009efc:	460b      	mov	r3, r1
 8009efe:	4313      	orrs	r3, r2
 8009f00:	d038      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f0e:	d018      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f14:	d811      	bhi.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f1a:	d014      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f20:	d80b      	bhi.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d011      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f2a:	d106      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f2c:	4bc3      	ldr	r3, [pc, #780]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f30:	4ac2      	ldr	r2, [pc, #776]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f38:	e008      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f40:	e004      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f42:	bf00      	nop
 8009f44:	e002      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f46:	bf00      	nop
 8009f48:	e000      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f54:	4bb9      	ldr	r3, [pc, #740]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f64:	4ab5      	ldr	r2, [pc, #724]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f66:	430b      	orrs	r3, r1
 8009f68:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f6a:	e003      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009f80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f82:	2300      	movs	r3, #0
 8009f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	d009      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f90:	4baa      	ldr	r3, [pc, #680]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f9e:	4aa7      	ldr	r2, [pc, #668]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fa0:	430b      	orrs	r3, r1
 8009fa2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009fb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	d00a      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009fc0:	4b9e      	ldr	r3, [pc, #632]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009fd0:	4a9a      	ldr	r2, [pc, #616]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fd2:	430b      	orrs	r3, r1
 8009fd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fe8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009fec:	460b      	mov	r3, r1
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	d009      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ff2:	4b92      	ldr	r3, [pc, #584]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ff6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a000:	4a8e      	ldr	r2, [pc, #568]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a002:	430b      	orrs	r3, r1
 800a004:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a012:	643b      	str	r3, [r7, #64]	@ 0x40
 800a014:	2300      	movs	r3, #0
 800a016:	647b      	str	r3, [r7, #68]	@ 0x44
 800a018:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a01c:	460b      	mov	r3, r1
 800a01e:	4313      	orrs	r3, r2
 800a020:	d00e      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a022:	4b86      	ldr	r3, [pc, #536]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	4a85      	ldr	r2, [pc, #532]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a028:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a02c:	6113      	str	r3, [r2, #16]
 800a02e:	4b83      	ldr	r3, [pc, #524]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a030:	6919      	ldr	r1, [r3, #16]
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a036:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a03a:	4a80      	ldr	r2, [pc, #512]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03c:	430b      	orrs	r3, r1
 800a03e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a04c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a04e:	2300      	movs	r3, #0
 800a050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a052:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a056:	460b      	mov	r3, r1
 800a058:	4313      	orrs	r3, r2
 800a05a:	d009      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a05c:	4b77      	ldr	r3, [pc, #476]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a060:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06a:	4a74      	ldr	r2, [pc, #464]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a06c:	430b      	orrs	r3, r1
 800a06e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a07c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a07e:	2300      	movs	r3, #0
 800a080:	637b      	str	r3, [r7, #52]	@ 0x34
 800a082:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a086:	460b      	mov	r3, r1
 800a088:	4313      	orrs	r3, r2
 800a08a:	d00a      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a08c:	4b6b      	ldr	r3, [pc, #428]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a08e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a090:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a09c:	4a67      	ldr	r2, [pc, #412]	@ (800a23c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	d011      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 fa4a 	bl	800b560 <RCCEx_PLL2_Config>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6239      	str	r1, [r7, #32]
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	d011      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a102:	3308      	adds	r3, #8
 800a104:	2101      	movs	r1, #1
 800a106:	4618      	mov	r0, r3
 800a108:	f001 fa2a 	bl	800b560 <RCCEx_PLL2_Config>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a11e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	2100      	movs	r1, #0
 800a12c:	61b9      	str	r1, [r7, #24]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a138:	460b      	mov	r3, r1
 800a13a:	4313      	orrs	r3, r2
 800a13c:	d011      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a142:	3308      	adds	r3, #8
 800a144:	2102      	movs	r1, #2
 800a146:	4618      	mov	r0, r3
 800a148:	f001 fa0a 	bl	800b560 <RCCEx_PLL2_Config>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a15e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	2100      	movs	r1, #0
 800a16c:	6139      	str	r1, [r7, #16]
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	617b      	str	r3, [r7, #20]
 800a174:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a178:	460b      	mov	r3, r1
 800a17a:	4313      	orrs	r3, r2
 800a17c:	d011      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a182:	3328      	adds	r3, #40	@ 0x28
 800a184:	2100      	movs	r1, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f001 fa9c 	bl	800b6c4 <RCCEx_PLL3_Config>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a19a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a19e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	f003 0310 	and.w	r3, r3, #16
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	d011      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c2:	3328      	adds	r3, #40	@ 0x28
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f001 fa7c 	bl	800b6c4 <RCCEx_PLL3_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	6039      	str	r1, [r7, #0]
 800a1ee:	f003 0320 	and.w	r3, r3, #32
 800a1f2:	607b      	str	r3, [r7, #4]
 800a1f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	d011      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a202:	3328      	adds	r3, #40	@ 0x28
 800a204:	2102      	movs	r1, #2
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fa5c 	bl	800b6c4 <RCCEx_PLL3_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a21e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a222:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e000      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
}
 800a230:	4618      	mov	r0, r3
 800a232:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a236:	46bd      	mov	sp, r7
 800a238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a23c:	58024400 	.word	0x58024400

0800a240 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b090      	sub	sp, #64	@ 0x40
 800a244:	af00      	add	r7, sp, #0
 800a246:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a24e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a252:	430b      	orrs	r3, r1
 800a254:	f040 8094 	bne.w	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a258:	4b9e      	ldr	r3, [pc, #632]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a25a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	2b04      	cmp	r3, #4
 800a266:	f200 8087 	bhi.w	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a26a:	a201      	add	r2, pc, #4	@ (adr r2, 800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a285 	.word	0x0800a285
 800a274:	0800a2ad 	.word	0x0800a2ad
 800a278:	0800a2d5 	.word	0x0800a2d5
 800a27c:	0800a371 	.word	0x0800a371
 800a280:	0800a2fd 	.word	0x0800a2fd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a284:	4b93      	ldr	r3, [pc, #588]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a28c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a290:	d108      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a296:	4618      	mov	r0, r3
 800a298:	f001 f810 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2a0:	f000 bd45 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a8:	f000 bd41 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2ac:	4b89      	ldr	r3, [pc, #548]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2b8:	d108      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ba:	f107 0318 	add.w	r3, r7, #24
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 fd54 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c8:	f000 bd31 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d0:	f000 bd2d 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2d4:	4b7f      	ldr	r3, [pc, #508]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2e0:	d108      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e2:	f107 030c 	add.w	r3, r7, #12
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fe94 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2f0:	f000 bd1d 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f8:	f000 bd19 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2fc:	4b75      	ldr	r3, [pc, #468]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a300:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a304:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a306:	4b73      	ldr	r3, [pc, #460]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0304 	and.w	r3, r3, #4
 800a30e:	2b04      	cmp	r3, #4
 800a310:	d10c      	bne.n	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a314:	2b00      	cmp	r3, #0
 800a316:	d109      	bne.n	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a318:	4b6e      	ldr	r3, [pc, #440]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	08db      	lsrs	r3, r3, #3
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	4a6d      	ldr	r2, [pc, #436]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a324:	fa22 f303 	lsr.w	r3, r2, r3
 800a328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a32a:	e01f      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a32c:	4b69      	ldr	r3, [pc, #420]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a338:	d106      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a340:	d102      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a342:	4b66      	ldr	r3, [pc, #408]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a346:	e011      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a348:	4b62      	ldr	r3, [pc, #392]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a354:	d106      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a35c:	d102      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a35e:	4b60      	ldr	r3, [pc, #384]	@ (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a362:	e003      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a368:	f000 bce1 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a36c:	f000 bcdf 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a370:	4b5c      	ldr	r3, [pc, #368]	@ (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a374:	f000 bcdb 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a37c:	f000 bcd7 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a384:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a388:	430b      	orrs	r3, r1
 800a38a:	f040 80ad 	bne.w	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a38e:	4b51      	ldr	r3, [pc, #324]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a392:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a396:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a39e:	d056      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a6:	f200 8090 	bhi.w	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3ae:	f000 8088 	beq.w	800a4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3b6:	f200 8088 	bhi.w	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	2b80      	cmp	r3, #128	@ 0x80
 800a3be:	d032      	beq.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c2:	2b80      	cmp	r3, #128	@ 0x80
 800a3c4:	f200 8081 	bhi.w	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d0:	2b40      	cmp	r3, #64	@ 0x40
 800a3d2:	d014      	beq.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a3d4:	e079      	b.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3d6:	4b3f      	ldr	r3, [pc, #252]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3e2:	d108      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 ff67 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f2:	f000 bc9c 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fa:	f000 bc98 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3fe:	4b35      	ldr	r3, [pc, #212]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a40a:	d108      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40c:	f107 0318 	add.w	r3, r7, #24
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fcab 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a41a:	f000 bc88 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a422:	f000 bc84 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a426:	4b2b      	ldr	r3, [pc, #172]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a42e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a432:	d108      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a434:	f107 030c 	add.w	r3, r7, #12
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fdeb 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a442:	f000 bc74 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44a:	f000 bc70 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a44e:	4b21      	ldr	r3, [pc, #132]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a452:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a456:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a458:	4b1e      	ldr	r3, [pc, #120]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b04      	cmp	r3, #4
 800a462:	d10c      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a466:	2b00      	cmp	r3, #0
 800a468:	d109      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a46a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	08db      	lsrs	r3, r3, #3
 800a470:	f003 0303 	and.w	r3, r3, #3
 800a474:	4a18      	ldr	r2, [pc, #96]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a476:	fa22 f303 	lsr.w	r3, r2, r3
 800a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a47c:	e01f      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a47e:	4b15      	ldr	r3, [pc, #84]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a486:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a48a:	d106      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a48c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a492:	d102      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a494:	4b11      	ldr	r3, [pc, #68]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a498:	e011      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a49a:	4b0e      	ldr	r3, [pc, #56]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4a6:	d106      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ae:	d102      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4b4:	e003      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4ba:	f000 bc38 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4be:	f000 bc36 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4c2:	4b08      	ldr	r3, [pc, #32]	@ (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c6:	f000 bc32 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ce:	f000 bc2e 	b.w	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4d2:	bf00      	nop
 800a4d4:	58024400 	.word	0x58024400
 800a4d8:	03d09000 	.word	0x03d09000
 800a4dc:	003d0900 	.word	0x003d0900
 800a4e0:	007a1200 	.word	0x007a1200
 800a4e4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	f040 809c 	bne.w	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a4f6:	4b9e      	ldr	r3, [pc, #632]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4fa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a4fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a502:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a506:	d054      	beq.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a50e:	f200 808b 	bhi.w	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a514:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a518:	f000 8083 	beq.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a522:	f200 8081 	bhi.w	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a52c:	d02f      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a534:	d878      	bhi.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d004      	beq.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a542:	d012      	beq.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a544:	e070      	b.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a546:	4b8a      	ldr	r3, [pc, #552]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a54e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a552:	d107      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 feaf 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a562:	e3e4      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a568:	e3e1      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a56a:	4b81      	ldr	r3, [pc, #516]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a572:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a576:	d107      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a578:	f107 0318 	add.w	r3, r7, #24
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fbf5 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a586:	e3d2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a588:	2300      	movs	r3, #0
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58c:	e3cf      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a58e:	4b78      	ldr	r3, [pc, #480]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a59a:	d107      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a59c:	f107 030c 	add.w	r3, r7, #12
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 fd37 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5aa:	e3c0      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b0:	e3bd      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5b2:	4b6f      	ldr	r3, [pc, #444]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5bc:	4b6c      	ldr	r3, [pc, #432]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d10c      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d109      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5ce:	4b68      	ldr	r3, [pc, #416]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	08db      	lsrs	r3, r3, #3
 800a5d4:	f003 0303 	and.w	r3, r3, #3
 800a5d8:	4a66      	ldr	r2, [pc, #408]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5da:	fa22 f303 	lsr.w	r3, r2, r3
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5e0:	e01e      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5e2:	4b63      	ldr	r3, [pc, #396]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ee:	d106      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5f6:	d102      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5f8:	4b5f      	ldr	r3, [pc, #380]	@ (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5fc:	e010      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5fe:	4b5c      	ldr	r3, [pc, #368]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a60a:	d106      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a60e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a612:	d102      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a614:	4b59      	ldr	r3, [pc, #356]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a618:	e002      	b.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a61e:	e386      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a620:	e385      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a622:	4b57      	ldr	r3, [pc, #348]	@ (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a626:	e382      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62c:	e37f      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a62e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a632:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a636:	430b      	orrs	r3, r1
 800a638:	f040 80a7 	bne.w	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a63c:	4b4c      	ldr	r3, [pc, #304]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a63e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a640:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a644:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a64c:	d055      	beq.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a654:	f200 8096 	bhi.w	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a65e:	f000 8084 	beq.w	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a664:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a668:	f200 808c 	bhi.w	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a672:	d030      	beq.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a676:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a67a:	f200 8083 	bhi.w	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	2b00      	cmp	r3, #0
 800a682:	d004      	beq.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a68a:	d012      	beq.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a68c:	e07a      	b.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a68e:	4b38      	ldr	r3, [pc, #224]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a69a:	d107      	bne.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a69c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 fe0b 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6aa:	e340      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b0:	e33d      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6b2:	4b2f      	ldr	r3, [pc, #188]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6c0:	f107 0318 	add.w	r3, r7, #24
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 fb51 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ce:	e32e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d4:	e32b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6d6:	4b26      	ldr	r3, [pc, #152]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6e2:	d107      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6e4:	f107 030c 	add.w	r3, r7, #12
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 fc93 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f2:	e31c      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f8:	e319      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a702:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a704:	4b1a      	ldr	r3, [pc, #104]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d10c      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a712:	2b00      	cmp	r3, #0
 800a714:	d109      	bne.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a716:	4b16      	ldr	r3, [pc, #88]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	08db      	lsrs	r3, r3, #3
 800a71c:	f003 0303 	and.w	r3, r3, #3
 800a720:	4a14      	ldr	r2, [pc, #80]	@ (800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a722:	fa22 f303 	lsr.w	r3, r2, r3
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a728:	e01e      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a72a:	4b11      	ldr	r3, [pc, #68]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a736:	d106      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a73e:	d102      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a740:	4b0d      	ldr	r3, [pc, #52]	@ (800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a744:	e010      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a746:	4b0a      	ldr	r3, [pc, #40]	@ (800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a752:	d106      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a75a:	d102      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a75c:	4b07      	ldr	r3, [pc, #28]	@ (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a760:	e002      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a766:	e2e2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a768:	e2e1      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a76a:	4b05      	ldr	r3, [pc, #20]	@ (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76e:	e2de      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a770:	58024400 	.word	0x58024400
 800a774:	03d09000 	.word	0x03d09000
 800a778:	003d0900 	.word	0x003d0900
 800a77c:	007a1200 	.word	0x007a1200
 800a780:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a788:	e2d1      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a78a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a78e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a792:	430b      	orrs	r3, r1
 800a794:	f040 809c 	bne.w	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a798:	4b93      	ldr	r3, [pc, #588]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a79a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a79c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a7a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7a8:	d054      	beq.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7b0:	f200 808b 	bhi.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7ba:	f000 8083 	beq.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a7c4:	f200 8081 	bhi.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7ce:	d02f      	beq.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7d6:	d878      	bhi.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d004      	beq.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7e4:	d012      	beq.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a7e6:	e070      	b.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7e8:	4b7f      	ldr	r3, [pc, #508]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7f4:	d107      	bne.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fd5e 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a804:	e293      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80a:	e290      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a80c:	4b76      	ldr	r3, [pc, #472]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a818:	d107      	bne.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a81a:	f107 0318 	add.w	r3, r7, #24
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 faa4 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a828:	e281      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82e:	e27e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a830:	4b6d      	ldr	r3, [pc, #436]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a83c:	d107      	bne.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a83e:	f107 030c 	add.w	r3, r7, #12
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fbe6 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84c:	e26f      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a852:	e26c      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a854:	4b64      	ldr	r3, [pc, #400]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a858:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a85c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a85e:	4b62      	ldr	r3, [pc, #392]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0304 	and.w	r3, r3, #4
 800a866:	2b04      	cmp	r3, #4
 800a868:	d10c      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d109      	bne.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a870:	4b5d      	ldr	r3, [pc, #372]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	08db      	lsrs	r3, r3, #3
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	4a5c      	ldr	r2, [pc, #368]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a87c:	fa22 f303 	lsr.w	r3, r2, r3
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a882:	e01e      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a884:	4b58      	ldr	r3, [pc, #352]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a88c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a890:	d106      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a898:	d102      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a89a:	4b55      	ldr	r3, [pc, #340]	@ (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a89e:	e010      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8a0:	4b51      	ldr	r3, [pc, #324]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8ac:	d106      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b4:	d102      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8b6:	4b4f      	ldr	r3, [pc, #316]	@ (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8ba:	e002      	b.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8c0:	e235      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8c2:	e234      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8c4:	4b4c      	ldr	r3, [pc, #304]	@ (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c8:	e231      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ce:	e22e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	f040 808f 	bne.w	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a8de:	4b42      	ldr	r3, [pc, #264]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a8e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8ee:	d06b      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8f6:	d874      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8fe:	d056      	beq.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a902:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a906:	d86c      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a90e:	d03b      	beq.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a912:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a916:	d864      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a91e:	d021      	beq.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a926:	d85c      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a934:	d004      	beq.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a936:	e054      	b.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a938:	f7fe fa0a 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800a93c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a93e:	e1f6      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a940:	4b29      	ldr	r3, [pc, #164]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a948:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a94c:	d107      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a94e:	f107 0318 	add.w	r3, r7, #24
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fa0a 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a95c:	e1e7      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a962:	e1e4      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a964:	4b20      	ldr	r3, [pc, #128]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a96c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a970:	d107      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a972:	f107 030c 	add.w	r3, r7, #12
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fb4c 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a980:	e1d5      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a986:	e1d2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a988:	4b17      	ldr	r3, [pc, #92]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b04      	cmp	r3, #4
 800a992:	d109      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a994:	4b14      	ldr	r3, [pc, #80]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	08db      	lsrs	r3, r3, #3
 800a99a:	f003 0303 	and.w	r3, r3, #3
 800a99e:	4a13      	ldr	r2, [pc, #76]	@ (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a9a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a6:	e1c2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ac:	e1bf      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a9ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ba:	d102      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a9bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c0:	e1b5      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9c6:	e1b2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9c8:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9d4:	d102      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a9d6:	4b07      	ldr	r3, [pc, #28]	@ (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9da:	e1a8      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e0:	e1a5      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e6:	e1a2      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9e8:	58024400 	.word	0x58024400
 800a9ec:	03d09000 	.word	0x03d09000
 800a9f0:	003d0900 	.word	0x003d0900
 800a9f4:	007a1200 	.word	0x007a1200
 800a9f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a9fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa00:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aa04:	430b      	orrs	r3, r1
 800aa06:	d173      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa08:	4b9c      	ldr	r3, [pc, #624]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa18:	d02f      	beq.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa20:	d863      	bhi.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aa22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aa28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa2e:	d012      	beq.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aa30:	e05b      	b.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa32:	4b92      	ldr	r3, [pc, #584]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa3e:	d107      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa40:	f107 0318 	add.w	r3, r7, #24
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 f991 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4e:	e16e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa54:	e16b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa56:	4b89      	ldr	r3, [pc, #548]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa62:	d107      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa64:	f107 030c 	add.w	r3, r7, #12
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fad3 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa72:	e15c      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa78:	e159      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa7a:	4b80      	ldr	r3, [pc, #512]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa82:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa84:	4b7d      	ldr	r3, [pc, #500]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d10c      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d109      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa96:	4b79      	ldr	r3, [pc, #484]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	08db      	lsrs	r3, r3, #3
 800aa9c:	f003 0303 	and.w	r3, r3, #3
 800aaa0:	4a77      	ldr	r2, [pc, #476]	@ (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aaa2:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaa8:	e01e      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aaaa:	4b74      	ldr	r3, [pc, #464]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aab6:	d106      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aabe:	d102      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aac0:	4b70      	ldr	r3, [pc, #448]	@ (800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aac4:	e010      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aac6:	4b6d      	ldr	r3, [pc, #436]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aad2:	d106      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aada:	d102      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aadc:	4b6a      	ldr	r3, [pc, #424]	@ (800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aae0:	e002      	b.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aae6:	e122      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aae8:	e121      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaee:	e11e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aaf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaf4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	d133      	bne.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aafc:	4b5f      	ldr	r3, [pc, #380]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aafe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab04:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d004      	beq.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab12:	d012      	beq.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ab14:	e023      	b.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab16:	4b59      	ldr	r3, [pc, #356]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab22:	d107      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fbc7 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab32:	e0fc      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab38:	e0f9      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab3a:	4b50      	ldr	r3, [pc, #320]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab46:	d107      	bne.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab48:	f107 0318 	add.w	r3, r7, #24
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 f90d 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab56:	e0ea      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab5c:	e0e7      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab62:	e0e4      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab68:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	f040 808d 	bne.w	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ab72:	4b42      	ldr	r3, [pc, #264]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab76:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ab7a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab82:	d06b      	beq.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ab84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab8a:	d874      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab92:	d056      	beq.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ab94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab9a:	d86c      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aba2:	d03b      	beq.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800aba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800abaa:	d864      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abb2:	d021      	beq.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800abb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abba:	d85c      	bhi.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d004      	beq.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800abc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abc8:	d004      	beq.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800abca:	e054      	b.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800abcc:	f000 f8b8 	bl	800ad40 <HAL_RCCEx_GetD3PCLK1Freq>
 800abd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abd2:	e0ac      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abd4:	4b29      	ldr	r3, [pc, #164]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abe0:	d107      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe2:	f107 0318 	add.w	r3, r7, #24
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 f8c0 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf0:	e09d      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf6:	e09a      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abf8:	4b20      	ldr	r3, [pc, #128]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac04:	d107      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac06:	f107 030c 	add.w	r3, r7, #12
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fa02 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac14:	e08b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac1a:	e088      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac1c:	4b17      	ldr	r3, [pc, #92]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d109      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac28:	4b14      	ldr	r3, [pc, #80]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	08db      	lsrs	r3, r3, #3
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	4a13      	ldr	r2, [pc, #76]	@ (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
 800ac38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac3a:	e078      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac40:	e075      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac42:	4b0e      	ldr	r3, [pc, #56]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac4e:	d102      	bne.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ac50:	4b0c      	ldr	r3, [pc, #48]	@ (800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac54:	e06b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac5a:	e068      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac5c:	4b07      	ldr	r3, [pc, #28]	@ (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac68:	d102      	bne.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ac6a:	4b07      	ldr	r3, [pc, #28]	@ (800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6e:	e05e      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac74:	e05b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac7a:	e058      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac7c:	58024400 	.word	0x58024400
 800ac80:	03d09000 	.word	0x03d09000
 800ac84:	003d0900 	.word	0x003d0900
 800ac88:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ac8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac90:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ac94:	430b      	orrs	r3, r1
 800ac96:	d148      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ac98:	4b27      	ldr	r3, [pc, #156]	@ (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aca0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aca8:	d02a      	beq.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800acaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acb0:	d838      	bhi.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800acb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800acb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acbe:	d00d      	beq.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800acc0:	e030      	b.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800acc2:	4b1d      	ldr	r3, [pc, #116]	@ (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acce:	d102      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800acd0:	4b1a      	ldr	r3, [pc, #104]	@ (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd4:	e02b      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acda:	e028      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acdc:	4b16      	ldr	r3, [pc, #88]	@ (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ace4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ace8:	d107      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fae4 	bl	800b2bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf8:	e019      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfe:	e016      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad00:	4b0d      	ldr	r3, [pc, #52]	@ (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad0c:	d107      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad0e:	f107 0318 	add.w	r3, r7, #24
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 f82a 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1c:	e007      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad22:	e004      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad28:	e001      	b.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ad2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3740      	adds	r7, #64	@ 0x40
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	58024400 	.word	0x58024400
 800ad3c:	007a1200 	.word	0x007a1200

0800ad40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad44:	f7fd ffd4 	bl	8008cf0 <HAL_RCC_GetHCLKFreq>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	4b06      	ldr	r3, [pc, #24]	@ (800ad64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	091b      	lsrs	r3, r3, #4
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	4904      	ldr	r1, [pc, #16]	@ (800ad68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ad56:	5ccb      	ldrb	r3, [r1, r3]
 800ad58:	f003 031f 	and.w	r3, r3, #31
 800ad5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	58024400 	.word	0x58024400
 800ad68:	08023518 	.word	0x08023518

0800ad6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b089      	sub	sp, #36	@ 0x24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad74:	4ba1      	ldr	r3, [pc, #644]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad78:	f003 0303 	and.w	r3, r3, #3
 800ad7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ad7e:	4b9f      	ldr	r3, [pc, #636]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad82:	0b1b      	lsrs	r3, r3, #12
 800ad84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad8a:	4b9c      	ldr	r3, [pc, #624]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad8e:	091b      	lsrs	r3, r3, #4
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ad96:	4b99      	ldr	r3, [pc, #612]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad9a:	08db      	lsrs	r3, r3, #3
 800ad9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	fb02 f303 	mul.w	r3, r2, r3
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 8111 	beq.w	800afdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	f000 8083 	beq.w	800aec8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	f200 80a1 	bhi.w	800af0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d056      	beq.n	800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800add6:	e099      	b.n	800af0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800add8:	4b88      	ldr	r3, [pc, #544]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d02d      	beq.n	800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ade4:	4b85      	ldr	r3, [pc, #532]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	08db      	lsrs	r3, r3, #3
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	4a84      	ldr	r2, [pc, #528]	@ (800b000 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800adf0:	fa22 f303 	lsr.w	r3, r2, r3
 800adf4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	ee07 3a90 	vmov	s15, r3
 800adfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0e:	4b7b      	ldr	r3, [pc, #492]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae3e:	e087      	b.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b008 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ae4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae52:	4b6a      	ldr	r3, [pc, #424]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae82:	e065      	b.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae96:	4b59      	ldr	r3, [pc, #356]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9e:	ee07 3a90 	vmov	s15, r3
 800aea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeaa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aec6:	e043      	b.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeda:	4b48      	ldr	r3, [pc, #288]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aedc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aefa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aefe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af0a:	e021      	b.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	ee07 3a90 	vmov	s15, r3
 800af12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1e:	4b37      	ldr	r3, [pc, #220]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800af50:	4b2a      	ldr	r3, [pc, #168]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af54:	0a5b      	lsrs	r3, r3, #9
 800af56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af76:	ee17 2a90 	vmov	r2, s15
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800af7e:	4b1f      	ldr	r3, [pc, #124]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af98:	edd7 6a07 	vldr	s13, [r7, #28]
 800af9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afa4:	ee17 2a90 	vmov	r2, s15
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800afac:	4b13      	ldr	r3, [pc, #76]	@ (800affc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb0:	0e1b      	lsrs	r3, r3, #24
 800afb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd2:	ee17 2a90 	vmov	r2, s15
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800afda:	e008      	b.n	800afee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	609a      	str	r2, [r3, #8]
}
 800afee:	bf00      	nop
 800aff0:	3724      	adds	r7, #36	@ 0x24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	58024400 	.word	0x58024400
 800b000:	03d09000 	.word	0x03d09000
 800b004:	46000000 	.word	0x46000000
 800b008:	4c742400 	.word	0x4c742400
 800b00c:	4a742400 	.word	0x4a742400
 800b010:	4af42400 	.word	0x4af42400

0800b014 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b014:	b480      	push	{r7}
 800b016:	b089      	sub	sp, #36	@ 0x24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b01c:	4ba1      	ldr	r3, [pc, #644]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b020:	f003 0303 	and.w	r3, r3, #3
 800b024:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b026:	4b9f      	ldr	r3, [pc, #636]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b02a:	0d1b      	lsrs	r3, r3, #20
 800b02c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b030:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b032:	4b9c      	ldr	r3, [pc, #624]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b036:	0a1b      	lsrs	r3, r3, #8
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b03e:	4b99      	ldr	r3, [pc, #612]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b042:	08db      	lsrs	r3, r3, #3
 800b044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	fb02 f303 	mul.w	r3, r2, r3
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b056:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 8111 	beq.w	800b284 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	2b02      	cmp	r3, #2
 800b066:	f000 8083 	beq.w	800b170 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	f200 80a1 	bhi.w	800b1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d003      	beq.n	800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d056      	beq.n	800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b07e:	e099      	b.n	800b1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b080:	4b88      	ldr	r3, [pc, #544]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d02d      	beq.n	800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b08c:	4b85      	ldr	r3, [pc, #532]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	08db      	lsrs	r3, r3, #3
 800b092:	f003 0303 	and.w	r3, r3, #3
 800b096:	4a84      	ldr	r2, [pc, #528]	@ (800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b098:	fa22 f303 	lsr.w	r3, r2, r3
 800b09c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	ee07 3a90 	vmov	s15, r3
 800b0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b6:	4b7b      	ldr	r3, [pc, #492]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0e6:	e087      	b.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fa:	4b6a      	ldr	r3, [pc, #424]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b10e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b12a:	e065      	b.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	ee07 3a90 	vmov	s15, r3
 800b132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b136:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b13e:	4b59      	ldr	r3, [pc, #356]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b152:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b15e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b16e:	e043      	b.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b182:	4b48      	ldr	r3, [pc, #288]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b192:	ed97 6a03 	vldr	s12, [r7, #12]
 800b196:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1b2:	e021      	b.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c6:	4b37      	ldr	r3, [pc, #220]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b2ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b1f8:	4b2a      	ldr	r3, [pc, #168]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1fc:	0a5b      	lsrs	r3, r3, #9
 800b1fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b202:	ee07 3a90 	vmov	s15, r3
 800b206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b20e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b212:	edd7 6a07 	vldr	s13, [r7, #28]
 800b216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b21a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b21e:	ee17 2a90 	vmov	r2, s15
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b226:	4b1f      	ldr	r3, [pc, #124]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b22a:	0c1b      	lsrs	r3, r3, #16
 800b22c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b230:	ee07 3a90 	vmov	s15, r3
 800b234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b23c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b240:	edd7 6a07 	vldr	s13, [r7, #28]
 800b244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b24c:	ee17 2a90 	vmov	r2, s15
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b254:	4b13      	ldr	r3, [pc, #76]	@ (800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b258:	0e1b      	lsrs	r3, r3, #24
 800b25a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b25e:	ee07 3a90 	vmov	s15, r3
 800b262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b26a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b26e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b27a:	ee17 2a90 	vmov	r2, s15
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b282:	e008      	b.n	800b296 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	609a      	str	r2, [r3, #8]
}
 800b296:	bf00      	nop
 800b298:	3724      	adds	r7, #36	@ 0x24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	03d09000 	.word	0x03d09000
 800b2ac:	46000000 	.word	0x46000000
 800b2b0:	4c742400 	.word	0x4c742400
 800b2b4:	4a742400 	.word	0x4a742400
 800b2b8:	4af42400 	.word	0x4af42400

0800b2bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b089      	sub	sp, #36	@ 0x24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2c4:	4ba0      	ldr	r3, [pc, #640]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c8:	f003 0303 	and.w	r3, r3, #3
 800b2cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b2ce:	4b9e      	ldr	r3, [pc, #632]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d2:	091b      	lsrs	r3, r3, #4
 800b2d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b2da:	4b9b      	ldr	r3, [pc, #620]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b2e4:	4b98      	ldr	r3, [pc, #608]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2e8:	08db      	lsrs	r3, r3, #3
 800b2ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	fb02 f303 	mul.w	r3, r2, r3
 800b2f4:	ee07 3a90 	vmov	s15, r3
 800b2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	2b00      	cmp	r3, #0
 800b304:	f000 8111 	beq.w	800b52a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	f000 8083 	beq.w	800b416 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	2b02      	cmp	r3, #2
 800b314:	f200 80a1 	bhi.w	800b45a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d056      	beq.n	800b3d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b324:	e099      	b.n	800b45a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b326:	4b88      	ldr	r3, [pc, #544]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d02d      	beq.n	800b38e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b332:	4b85      	ldr	r3, [pc, #532]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	08db      	lsrs	r3, r3, #3
 800b338:	f003 0303 	and.w	r3, r3, #3
 800b33c:	4a83      	ldr	r2, [pc, #524]	@ (800b54c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b33e:	fa22 f303 	lsr.w	r3, r2, r3
 800b342:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	ee07 3a90 	vmov	s15, r3
 800b354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35c:	4b7a      	ldr	r3, [pc, #488]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b364:	ee07 3a90 	vmov	s15, r3
 800b368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b370:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b384:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b388:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b38c:	e087      	b.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	ee07 3a90 	vmov	s15, r3
 800b394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b398:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b554 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b39c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a0:	4b69      	ldr	r3, [pc, #420]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a8:	ee07 3a90 	vmov	s15, r3
 800b3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d0:	e065      	b.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	ee07 3a90 	vmov	s15, r3
 800b3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3dc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b558 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b3e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e4:	4b58      	ldr	r3, [pc, #352]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ec:	ee07 3a90 	vmov	s15, r3
 800b3f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b404:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b410:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b414:	e043      	b.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	ee07 3a90 	vmov	s15, r3
 800b41c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b420:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b55c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b428:	4b47      	ldr	r3, [pc, #284]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b430:	ee07 3a90 	vmov	s15, r3
 800b434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b438:	ed97 6a03 	vldr	s12, [r7, #12]
 800b43c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b44c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b454:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b458:	e021      	b.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	ee07 3a90 	vmov	s15, r3
 800b460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b464:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b554 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46c:	4b36      	ldr	r3, [pc, #216]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b474:	ee07 3a90 	vmov	s15, r3
 800b478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b480:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b550 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b494:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b498:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b49c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b49e:	4b2a      	ldr	r3, [pc, #168]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4a2:	0a5b      	lsrs	r3, r3, #9
 800b4a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4a8:	ee07 3a90 	vmov	s15, r3
 800b4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c4:	ee17 2a90 	vmov	r2, s15
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b4cc:	4b1e      	ldr	r3, [pc, #120]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d0:	0c1b      	lsrs	r3, r3, #16
 800b4d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4f2:	ee17 2a90 	vmov	r2, s15
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b4fa:	4b13      	ldr	r3, [pc, #76]	@ (800b548 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fe:	0e1b      	lsrs	r3, r3, #24
 800b500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b504:	ee07 3a90 	vmov	s15, r3
 800b508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b50c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b510:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b514:	edd7 6a07 	vldr	s13, [r7, #28]
 800b518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b51c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b520:	ee17 2a90 	vmov	r2, s15
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b528:	e008      	b.n	800b53c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	609a      	str	r2, [r3, #8]
}
 800b53c:	bf00      	nop
 800b53e:	3724      	adds	r7, #36	@ 0x24
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	58024400 	.word	0x58024400
 800b54c:	03d09000 	.word	0x03d09000
 800b550:	46000000 	.word	0x46000000
 800b554:	4c742400 	.word	0x4c742400
 800b558:	4a742400 	.word	0x4a742400
 800b55c:	4af42400 	.word	0x4af42400

0800b560 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b56e:	4b53      	ldr	r3, [pc, #332]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	2b03      	cmp	r3, #3
 800b578:	d101      	bne.n	800b57e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e099      	b.n	800b6b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b57e:	4b4f      	ldr	r3, [pc, #316]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a4e      	ldr	r2, [pc, #312]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b584:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b58a:	f7f7 ffd3 	bl	8003534 <HAL_GetTick>
 800b58e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b590:	e008      	b.n	800b5a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b592:	f7f7 ffcf 	bl	8003534 <HAL_GetTick>
 800b596:	4602      	mov	r2, r0
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d901      	bls.n	800b5a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e086      	b.n	800b6b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5a4:	4b45      	ldr	r3, [pc, #276]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1f0      	bne.n	800b592 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b5b0:	4b42      	ldr	r3, [pc, #264]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	031b      	lsls	r3, r3, #12
 800b5be:	493f      	ldr	r1, [pc, #252]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	025b      	lsls	r3, r3, #9
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	041b      	lsls	r3, r3, #16
 800b5e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b5e6:	431a      	orrs	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	061b      	lsls	r3, r3, #24
 800b5f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5f4:	4931      	ldr	r1, [pc, #196]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5fa:	4b30      	ldr	r3, [pc, #192]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	492d      	ldr	r1, [pc, #180]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b608:	4313      	orrs	r3, r2
 800b60a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b60c:	4b2b      	ldr	r3, [pc, #172]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b610:	f023 0220 	bic.w	r2, r3, #32
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	4928      	ldr	r1, [pc, #160]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b61e:	4b27      	ldr	r3, [pc, #156]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b622:	4a26      	ldr	r2, [pc, #152]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b624:	f023 0310 	bic.w	r3, r3, #16
 800b628:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b62a:	4b24      	ldr	r3, [pc, #144]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b62c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b62e:	4b24      	ldr	r3, [pc, #144]	@ (800b6c0 <RCCEx_PLL2_Config+0x160>)
 800b630:	4013      	ands	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	69d2      	ldr	r2, [r2, #28]
 800b636:	00d2      	lsls	r2, r2, #3
 800b638:	4920      	ldr	r1, [pc, #128]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b63a:	4313      	orrs	r3, r2
 800b63c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b63e:	4b1f      	ldr	r3, [pc, #124]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b642:	4a1e      	ldr	r2, [pc, #120]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b644:	f043 0310 	orr.w	r3, r3, #16
 800b648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d106      	bne.n	800b65e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b650:	4b1a      	ldr	r3, [pc, #104]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b654:	4a19      	ldr	r2, [pc, #100]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b656:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b65a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b65c:	e00f      	b.n	800b67e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d106      	bne.n	800b672 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b664:	4b15      	ldr	r3, [pc, #84]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b668:	4a14      	ldr	r2, [pc, #80]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b66a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b66e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b670:	e005      	b.n	800b67e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b672:	4b12      	ldr	r3, [pc, #72]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b676:	4a11      	ldr	r2, [pc, #68]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b678:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b67c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b67e:	4b0f      	ldr	r3, [pc, #60]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a0e      	ldr	r2, [pc, #56]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b684:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b68a:	f7f7 ff53 	bl	8003534 <HAL_GetTick>
 800b68e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b690:	e008      	b.n	800b6a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b692:	f7f7 ff4f 	bl	8003534 <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d901      	bls.n	800b6a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e006      	b.n	800b6b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6a4:	4b05      	ldr	r3, [pc, #20]	@ (800b6bc <RCCEx_PLL2_Config+0x15c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d0f0      	beq.n	800b692 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	58024400 	.word	0x58024400
 800b6c0:	ffff0007 	.word	0xffff0007

0800b6c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6d2:	4b53      	ldr	r3, [pc, #332]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d6:	f003 0303 	and.w	r3, r3, #3
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d101      	bne.n	800b6e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e099      	b.n	800b816 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b6e2:	4b4f      	ldr	r3, [pc, #316]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a4e      	ldr	r2, [pc, #312]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b6e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ee:	f7f7 ff21 	bl	8003534 <HAL_GetTick>
 800b6f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6f4:	e008      	b.n	800b708 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b6f6:	f7f7 ff1d 	bl	8003534 <HAL_GetTick>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	2b02      	cmp	r3, #2
 800b702:	d901      	bls.n	800b708 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b704:	2303      	movs	r3, #3
 800b706:	e086      	b.n	800b816 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b708:	4b45      	ldr	r3, [pc, #276]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1f0      	bne.n	800b6f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b714:	4b42      	ldr	r3, [pc, #264]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b718:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	051b      	lsls	r3, r3, #20
 800b722:	493f      	ldr	r1, [pc, #252]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b724:	4313      	orrs	r3, r2
 800b726:	628b      	str	r3, [r1, #40]	@ 0x28
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	3b01      	subs	r3, #1
 800b738:	025b      	lsls	r3, r3, #9
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	431a      	orrs	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	3b01      	subs	r3, #1
 800b744:	041b      	lsls	r3, r3, #16
 800b746:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b74a:	431a      	orrs	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	3b01      	subs	r3, #1
 800b752:	061b      	lsls	r3, r3, #24
 800b754:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b758:	4931      	ldr	r1, [pc, #196]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b75e:	4b30      	ldr	r3, [pc, #192]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b762:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	492d      	ldr	r1, [pc, #180]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b76c:	4313      	orrs	r3, r2
 800b76e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b770:	4b2b      	ldr	r3, [pc, #172]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b774:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	4928      	ldr	r1, [pc, #160]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b77e:	4313      	orrs	r3, r2
 800b780:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b782:	4b27      	ldr	r3, [pc, #156]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b786:	4a26      	ldr	r2, [pc, #152]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b78c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b78e:	4b24      	ldr	r3, [pc, #144]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b792:	4b24      	ldr	r3, [pc, #144]	@ (800b824 <RCCEx_PLL3_Config+0x160>)
 800b794:	4013      	ands	r3, r2
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	69d2      	ldr	r2, [r2, #28]
 800b79a:	00d2      	lsls	r2, r2, #3
 800b79c:	4920      	ldr	r1, [pc, #128]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b7a2:	4b1f      	ldr	r3, [pc, #124]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a6:	4a1e      	ldr	r2, [pc, #120]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d106      	bne.n	800b7c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b7b4:	4b1a      	ldr	r3, [pc, #104]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b8:	4a19      	ldr	r2, [pc, #100]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b7be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7c0:	e00f      	b.n	800b7e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d106      	bne.n	800b7d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7c8:	4b15      	ldr	r3, [pc, #84]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7cc:	4a14      	ldr	r2, [pc, #80]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b7d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7d4:	e005      	b.n	800b7e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7d6:	4b12      	ldr	r3, [pc, #72]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7da:	4a11      	ldr	r2, [pc, #68]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b7e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a0e      	ldr	r2, [pc, #56]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b7e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ee:	f7f7 fea1 	bl	8003534 <HAL_GetTick>
 800b7f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7f4:	e008      	b.n	800b808 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7f6:	f7f7 fe9d 	bl	8003534 <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	2b02      	cmp	r3, #2
 800b802:	d901      	bls.n	800b808 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b804:	2303      	movs	r3, #3
 800b806:	e006      	b.n	800b816 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b808:	4b05      	ldr	r3, [pc, #20]	@ (800b820 <RCCEx_PLL3_Config+0x15c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0f0      	beq.n	800b7f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b814:	7bfb      	ldrb	r3, [r7, #15]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	58024400 	.word	0x58024400
 800b824:	ffff0007 	.word	0xffff0007

0800b828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e049      	b.n	800b8ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f841 	bl	800b8d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3304      	adds	r3, #4
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	f000 f9e8 	bl	800bc3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b083      	sub	sp, #12
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b8de:	bf00      	nop
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
	...

0800b8ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d001      	beq.n	800b904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	e054      	b.n	800b9ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68da      	ldr	r2, [r3, #12]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f042 0201 	orr.w	r2, r2, #1
 800b91a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a26      	ldr	r2, [pc, #152]	@ (800b9bc <HAL_TIM_Base_Start_IT+0xd0>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d022      	beq.n	800b96c <HAL_TIM_Base_Start_IT+0x80>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b92e:	d01d      	beq.n	800b96c <HAL_TIM_Base_Start_IT+0x80>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a22      	ldr	r2, [pc, #136]	@ (800b9c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d018      	beq.n	800b96c <HAL_TIM_Base_Start_IT+0x80>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a21      	ldr	r2, [pc, #132]	@ (800b9c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d013      	beq.n	800b96c <HAL_TIM_Base_Start_IT+0x80>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a1f      	ldr	r2, [pc, #124]	@ (800b9c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d00e      	beq.n	800b96c <HAL_TIM_Base_Start_IT+0x80>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a1e      	ldr	r2, [pc, #120]	@ (800b9cc <HAL_TIM_Base_Start_IT+0xe0>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d009      	beq.n	800b96c <HAL_TIM_Base_Start_IT+0x80>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a1c      	ldr	r2, [pc, #112]	@ (800b9d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d004      	beq.n	800b96c <HAL_TIM_Base_Start_IT+0x80>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a1b      	ldr	r2, [pc, #108]	@ (800b9d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d115      	bne.n	800b998 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	689a      	ldr	r2, [r3, #8]
 800b972:	4b19      	ldr	r3, [pc, #100]	@ (800b9d8 <HAL_TIM_Base_Start_IT+0xec>)
 800b974:	4013      	ands	r3, r2
 800b976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b06      	cmp	r3, #6
 800b97c:	d015      	beq.n	800b9aa <HAL_TIM_Base_Start_IT+0xbe>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b984:	d011      	beq.n	800b9aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f042 0201 	orr.w	r2, r2, #1
 800b994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b996:	e008      	b.n	800b9aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f042 0201 	orr.w	r2, r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e000      	b.n	800b9ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	40010000 	.word	0x40010000
 800b9c0:	40000400 	.word	0x40000400
 800b9c4:	40000800 	.word	0x40000800
 800b9c8:	40000c00 	.word	0x40000c00
 800b9cc:	40010400 	.word	0x40010400
 800b9d0:	40001800 	.word	0x40001800
 800b9d4:	40014000 	.word	0x40014000
 800b9d8:	00010007 	.word	0x00010007

0800b9dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	f003 0302 	and.w	r3, r3, #2
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d020      	beq.n	800ba40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f003 0302 	and.w	r3, r3, #2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d01b      	beq.n	800ba40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f06f 0202 	mvn.w	r2, #2
 800ba10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	f003 0303 	and.w	r3, r3, #3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d003      	beq.n	800ba2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f8e9 	bl	800bbfe <HAL_TIM_IC_CaptureCallback>
 800ba2c:	e005      	b.n	800ba3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f8db 	bl	800bbea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f8ec 	bl	800bc12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	f003 0304 	and.w	r3, r3, #4
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d020      	beq.n	800ba8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d01b      	beq.n	800ba8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f06f 0204 	mvn.w	r2, #4
 800ba5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2202      	movs	r2, #2
 800ba62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f8c3 	bl	800bbfe <HAL_TIM_IC_CaptureCallback>
 800ba78:	e005      	b.n	800ba86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f8b5 	bl	800bbea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f8c6 	bl	800bc12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	f003 0308 	and.w	r3, r3, #8
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d020      	beq.n	800bad8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f003 0308 	and.w	r3, r3, #8
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d01b      	beq.n	800bad8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f06f 0208 	mvn.w	r2, #8
 800baa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2204      	movs	r2, #4
 800baae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	69db      	ldr	r3, [r3, #28]
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f89d 	bl	800bbfe <HAL_TIM_IC_CaptureCallback>
 800bac4:	e005      	b.n	800bad2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f88f 	bl	800bbea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f8a0 	bl	800bc12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f003 0310 	and.w	r3, r3, #16
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d020      	beq.n	800bb24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f003 0310 	and.w	r3, r3, #16
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d01b      	beq.n	800bb24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f06f 0210 	mvn.w	r2, #16
 800baf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2208      	movs	r2, #8
 800bafa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f877 	bl	800bbfe <HAL_TIM_IC_CaptureCallback>
 800bb10:	e005      	b.n	800bb1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f869 	bl	800bbea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f87a 	bl	800bc12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00c      	beq.n	800bb48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f003 0301 	and.w	r3, r3, #1
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d007      	beq.n	800bb48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f06f 0201 	mvn.w	r2, #1
 800bb40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7f5 ff9c 	bl	8001a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d104      	bne.n	800bb5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00c      	beq.n	800bb76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d007      	beq.n	800bb76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bb6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f913 	bl	800bd9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00c      	beq.n	800bb9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d007      	beq.n	800bb9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bb92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f90b 	bl	800bdb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00c      	beq.n	800bbbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d007      	beq.n	800bbbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bbb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f834 	bl	800bc26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	f003 0320 	and.w	r3, r3, #32
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00c      	beq.n	800bbe2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f003 0320 	and.w	r3, r3, #32
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d007      	beq.n	800bbe2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f06f 0220 	mvn.w	r2, #32
 800bbda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f8d3 	bl	800bd88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbe2:	bf00      	nop
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b083      	sub	sp, #12
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbf2:	bf00      	nop
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b083      	sub	sp, #12
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc12:	b480      	push	{r7}
 800bc14:	b083      	sub	sp, #12
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc1a:	bf00      	nop
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc2e:	bf00      	nop
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
	...

0800bc3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a46      	ldr	r2, [pc, #280]	@ (800bd68 <TIM_Base_SetConfig+0x12c>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d013      	beq.n	800bc7c <TIM_Base_SetConfig+0x40>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc5a:	d00f      	beq.n	800bc7c <TIM_Base_SetConfig+0x40>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a43      	ldr	r2, [pc, #268]	@ (800bd6c <TIM_Base_SetConfig+0x130>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d00b      	beq.n	800bc7c <TIM_Base_SetConfig+0x40>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a42      	ldr	r2, [pc, #264]	@ (800bd70 <TIM_Base_SetConfig+0x134>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d007      	beq.n	800bc7c <TIM_Base_SetConfig+0x40>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a41      	ldr	r2, [pc, #260]	@ (800bd74 <TIM_Base_SetConfig+0x138>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d003      	beq.n	800bc7c <TIM_Base_SetConfig+0x40>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a40      	ldr	r2, [pc, #256]	@ (800bd78 <TIM_Base_SetConfig+0x13c>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d108      	bne.n	800bc8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a35      	ldr	r2, [pc, #212]	@ (800bd68 <TIM_Base_SetConfig+0x12c>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d01f      	beq.n	800bcd6 <TIM_Base_SetConfig+0x9a>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc9c:	d01b      	beq.n	800bcd6 <TIM_Base_SetConfig+0x9a>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a32      	ldr	r2, [pc, #200]	@ (800bd6c <TIM_Base_SetConfig+0x130>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d017      	beq.n	800bcd6 <TIM_Base_SetConfig+0x9a>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a31      	ldr	r2, [pc, #196]	@ (800bd70 <TIM_Base_SetConfig+0x134>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d013      	beq.n	800bcd6 <TIM_Base_SetConfig+0x9a>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a30      	ldr	r2, [pc, #192]	@ (800bd74 <TIM_Base_SetConfig+0x138>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d00f      	beq.n	800bcd6 <TIM_Base_SetConfig+0x9a>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a2f      	ldr	r2, [pc, #188]	@ (800bd78 <TIM_Base_SetConfig+0x13c>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d00b      	beq.n	800bcd6 <TIM_Base_SetConfig+0x9a>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a2e      	ldr	r2, [pc, #184]	@ (800bd7c <TIM_Base_SetConfig+0x140>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d007      	beq.n	800bcd6 <TIM_Base_SetConfig+0x9a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a2d      	ldr	r2, [pc, #180]	@ (800bd80 <TIM_Base_SetConfig+0x144>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d003      	beq.n	800bcd6 <TIM_Base_SetConfig+0x9a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a2c      	ldr	r2, [pc, #176]	@ (800bd84 <TIM_Base_SetConfig+0x148>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d108      	bne.n	800bce8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	689a      	ldr	r2, [r3, #8]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a16      	ldr	r2, [pc, #88]	@ (800bd68 <TIM_Base_SetConfig+0x12c>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d00f      	beq.n	800bd34 <TIM_Base_SetConfig+0xf8>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a18      	ldr	r2, [pc, #96]	@ (800bd78 <TIM_Base_SetConfig+0x13c>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d00b      	beq.n	800bd34 <TIM_Base_SetConfig+0xf8>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a17      	ldr	r2, [pc, #92]	@ (800bd7c <TIM_Base_SetConfig+0x140>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d007      	beq.n	800bd34 <TIM_Base_SetConfig+0xf8>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a16      	ldr	r2, [pc, #88]	@ (800bd80 <TIM_Base_SetConfig+0x144>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d003      	beq.n	800bd34 <TIM_Base_SetConfig+0xf8>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a15      	ldr	r2, [pc, #84]	@ (800bd84 <TIM_Base_SetConfig+0x148>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d103      	bne.n	800bd3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	691a      	ldr	r2, [r3, #16]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d105      	bne.n	800bd5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	f023 0201 	bic.w	r2, r3, #1
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	611a      	str	r2, [r3, #16]
  }
}
 800bd5a:	bf00      	nop
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	40010000 	.word	0x40010000
 800bd6c:	40000400 	.word	0x40000400
 800bd70:	40000800 	.word	0x40000800
 800bd74:	40000c00 	.word	0x40000c00
 800bd78:	40010400 	.word	0x40010400
 800bd7c:	40014000 	.word	0x40014000
 800bd80:	40014400 	.word	0x40014400
 800bd84:	40014800 	.word	0x40014800

0800bd88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bda4:	bf00      	nop
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e042      	b.n	800be5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d106      	bne.n	800bdee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7f7 f84d 	bl	8002e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2224      	movs	r2, #36	@ 0x24
 800bdf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f022 0201 	bic.w	r2, r2, #1
 800be04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f001 fae0 	bl	800d3d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fd75 	bl	800c904 <UART_SetConfig>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d101      	bne.n	800be24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e01b      	b.n	800be5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	689a      	ldr	r2, [r3, #8]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f042 0201 	orr.w	r2, r2, #1
 800be52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f001 fb5f 	bl	800d518 <UART_CheckIdleState>
 800be5a:	4603      	mov	r3, r0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08a      	sub	sp, #40	@ 0x28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	4613      	mov	r3, r2
 800be70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be78:	2b20      	cmp	r3, #32
 800be7a:	d167      	bne.n	800bf4c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <HAL_UART_Transmit_DMA+0x24>
 800be82:	88fb      	ldrh	r3, [r7, #6]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	e060      	b.n	800bf4e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	88fa      	ldrh	r2, [r7, #6]
 800be96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	88fa      	ldrh	r2, [r7, #6]
 800be9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2200      	movs	r2, #0
 800bea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2221      	movs	r2, #33	@ 0x21
 800beae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d028      	beq.n	800bf0c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bebe:	4a26      	ldr	r2, [pc, #152]	@ (800bf58 <HAL_UART_Transmit_DMA+0xf4>)
 800bec0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bec6:	4a25      	ldr	r2, [pc, #148]	@ (800bf5c <HAL_UART_Transmit_DMA+0xf8>)
 800bec8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bece:	4a24      	ldr	r2, [pc, #144]	@ (800bf60 <HAL_UART_Transmit_DMA+0xfc>)
 800bed0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bed6:	2200      	movs	r2, #0
 800bed8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bee2:	4619      	mov	r1, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	3328      	adds	r3, #40	@ 0x28
 800beea:	461a      	mov	r2, r3
 800beec:	88fb      	ldrh	r3, [r7, #6]
 800beee:	f7f9 fa6b 	bl	80053c8 <HAL_DMA_Start_IT>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d009      	beq.n	800bf0c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2210      	movs	r2, #16
 800befc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e020      	b.n	800bf4e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2240      	movs	r2, #64	@ 0x40
 800bf12:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3308      	adds	r3, #8
 800bf1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	e853 3f00 	ldrex	r3, [r3]
 800bf22:	613b      	str	r3, [r7, #16]
   return(result);
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	3308      	adds	r3, #8
 800bf32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf34:	623a      	str	r2, [r7, #32]
 800bf36:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf38:	69f9      	ldr	r1, [r7, #28]
 800bf3a:	6a3a      	ldr	r2, [r7, #32]
 800bf3c:	e841 2300 	strex	r3, r2, [r1]
 800bf40:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e5      	bne.n	800bf14 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	e000      	b.n	800bf4e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bf4c:	2302      	movs	r3, #2
  }
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3728      	adds	r7, #40	@ 0x28
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	0800d9e5 	.word	0x0800d9e5
 800bf5c:	0800da7b 	.word	0x0800da7b
 800bf60:	0800dbfd 	.word	0x0800dbfd

0800bf64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08a      	sub	sp, #40	@ 0x28
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf78:	2b20      	cmp	r3, #32
 800bf7a:	d137      	bne.n	800bfec <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d002      	beq.n	800bf88 <HAL_UART_Receive_DMA+0x24>
 800bf82:	88fb      	ldrh	r3, [r7, #6]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e030      	b.n	800bfee <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a18      	ldr	r2, [pc, #96]	@ (800bff8 <HAL_UART_Receive_DMA+0x94>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d01f      	beq.n	800bfdc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d018      	beq.n	800bfdc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	e853 3f00 	ldrex	r3, [r3]
 800bfb6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bfbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc8:	623b      	str	r3, [r7, #32]
 800bfca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	69f9      	ldr	r1, [r7, #28]
 800bfce:	6a3a      	ldr	r2, [r7, #32]
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e6      	bne.n	800bfaa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bfdc:	88fb      	ldrh	r3, [r7, #6]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	68b9      	ldr	r1, [r7, #8]
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f001 fbb0 	bl	800d748 <UART_Start_Receive_DMA>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	e000      	b.n	800bfee <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bfec:	2302      	movs	r3, #2
  }
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3728      	adds	r7, #40	@ 0x28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	58000c00 	.word	0x58000c00

0800bffc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b090      	sub	sp, #64	@ 0x40
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c012:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c01e:	2b80      	cmp	r3, #128	@ 0x80
 800c020:	d139      	bne.n	800c096 <HAL_UART_DMAStop+0x9a>
 800c022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c024:	2b21      	cmp	r3, #33	@ 0x21
 800c026:	d136      	bne.n	800c096 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3308      	adds	r3, #8
 800c02e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	e853 3f00 	ldrex	r3, [r3]
 800c036:	61fb      	str	r3, [r7, #28]
   return(result);
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c03e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3308      	adds	r3, #8
 800c046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c04a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c04e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c050:	e841 2300 	strex	r3, r2, [r1]
 800c054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e5      	bne.n	800c028 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d015      	beq.n	800c090 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c068:	4618      	mov	r0, r3
 800c06a:	f7f9 fc17 	bl	800589c <HAL_DMA_Abort>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00d      	beq.n	800c090 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fb f89d 	bl	80071b8 <HAL_DMA_GetError>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b20      	cmp	r3, #32
 800c082:	d105      	bne.n	800c090 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2210      	movs	r2, #16
 800c088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c08c:	2303      	movs	r3, #3
 800c08e:	e047      	b.n	800c120 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 fbff 	bl	800d894 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a0:	2b40      	cmp	r3, #64	@ 0x40
 800c0a2:	d13c      	bne.n	800c11e <HAL_UART_DMAStop+0x122>
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a6:	2b22      	cmp	r3, #34	@ 0x22
 800c0a8:	d139      	bne.n	800c11e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	e853 3f00 	ldrex	r3, [r3]
 800c0b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3308      	adds	r3, #8
 800c0c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ca:	61ba      	str	r2, [r7, #24]
 800c0cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ce:	6979      	ldr	r1, [r7, #20]
 800c0d0:	69ba      	ldr	r2, [r7, #24]
 800c0d2:	e841 2300 	strex	r3, r2, [r1]
 800c0d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1e5      	bne.n	800c0aa <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d017      	beq.n	800c118 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7f9 fbd4 	bl	800589c <HAL_DMA_Abort>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00e      	beq.n	800c118 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c100:	4618      	mov	r0, r3
 800c102:	f7fb f859 	bl	80071b8 <HAL_DMA_GetError>
 800c106:	4603      	mov	r3, r0
 800c108:	2b20      	cmp	r3, #32
 800c10a:	d105      	bne.n	800c118 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2210      	movs	r2, #16
 800c110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e003      	b.n	800c120 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 fbfd 	bl	800d918 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3740      	adds	r7, #64	@ 0x40
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b0ba      	sub	sp, #232	@ 0xe8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	69db      	ldr	r3, [r3, #28]
 800c136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c14e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c152:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c156:	4013      	ands	r3, r2
 800c158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c15c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11b      	bne.n	800c19c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c168:	f003 0320 	and.w	r3, r3, #32
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d015      	beq.n	800c19c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c174:	f003 0320 	and.w	r3, r3, #32
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d105      	bne.n	800c188 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c17c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d009      	beq.n	800c19c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f000 8377 	beq.w	800c880 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	4798      	blx	r3
      }
      return;
 800c19a:	e371      	b.n	800c880 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c19c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f000 8123 	beq.w	800c3ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c1a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c1aa:	4b8d      	ldr	r3, [pc, #564]	@ (800c3e0 <HAL_UART_IRQHandler+0x2b8>)
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c1b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c1b6:	4b8b      	ldr	r3, [pc, #556]	@ (800c3e4 <HAL_UART_IRQHandler+0x2bc>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f000 8116 	beq.w	800c3ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1c4:	f003 0301 	and.w	r3, r3, #1
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d011      	beq.n	800c1f0 <HAL_UART_IRQHandler+0xc8>
 800c1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00b      	beq.n	800c1f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1e6:	f043 0201 	orr.w	r2, r3, #1
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d011      	beq.n	800c220 <HAL_UART_IRQHandler+0xf8>
 800c1fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c200:	f003 0301 	and.w	r3, r3, #1
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00b      	beq.n	800c220 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2202      	movs	r2, #2
 800c20e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c216:	f043 0204 	orr.w	r2, r3, #4
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c224:	f003 0304 	and.w	r3, r3, #4
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d011      	beq.n	800c250 <HAL_UART_IRQHandler+0x128>
 800c22c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c230:	f003 0301 	and.w	r3, r3, #1
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2204      	movs	r2, #4
 800c23e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c246:	f043 0202 	orr.w	r2, r3, #2
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c254:	f003 0308 	and.w	r3, r3, #8
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d017      	beq.n	800c28c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c260:	f003 0320 	and.w	r3, r3, #32
 800c264:	2b00      	cmp	r3, #0
 800c266:	d105      	bne.n	800c274 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c268:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c26c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3e0 <HAL_UART_IRQHandler+0x2b8>)
 800c26e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00b      	beq.n	800c28c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2208      	movs	r2, #8
 800c27a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c282:	f043 0208 	orr.w	r2, r3, #8
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c294:	2b00      	cmp	r3, #0
 800c296:	d012      	beq.n	800c2be <HAL_UART_IRQHandler+0x196>
 800c298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c29c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00c      	beq.n	800c2be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2b4:	f043 0220 	orr.w	r2, r3, #32
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 82dd 	beq.w	800c884 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2ce:	f003 0320 	and.w	r3, r3, #32
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d013      	beq.n	800c2fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2da:	f003 0320 	and.w	r3, r3, #32
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d105      	bne.n	800c2ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d007      	beq.n	800c2fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d003      	beq.n	800c2fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c304:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c312:	2b40      	cmp	r3, #64	@ 0x40
 800c314:	d005      	beq.n	800c322 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c31a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d054      	beq.n	800c3cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f001 faf8 	bl	800d918 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c332:	2b40      	cmp	r3, #64	@ 0x40
 800c334:	d146      	bne.n	800c3c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3308      	adds	r3, #8
 800c33c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c344:	e853 3f00 	ldrex	r3, [r3]
 800c348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c34c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3308      	adds	r3, #8
 800c35e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c362:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c366:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c36e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c372:	e841 2300 	strex	r3, r2, [r1]
 800c376:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c37a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1d9      	bne.n	800c336 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d017      	beq.n	800c3bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c392:	4a15      	ldr	r2, [pc, #84]	@ (800c3e8 <HAL_UART_IRQHandler+0x2c0>)
 800c394:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7f9 fd9b 	bl	8005ed8 <HAL_DMA_Abort_IT>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d019      	beq.n	800c3dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ba:	e00f      	b.n	800c3dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fa8b 	bl	800c8d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3c2:	e00b      	b.n	800c3dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 fa87 	bl	800c8d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ca:	e007      	b.n	800c3dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fa83 	bl	800c8d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c3da:	e253      	b.n	800c884 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3dc:	bf00      	nop
    return;
 800c3de:	e251      	b.n	800c884 <HAL_UART_IRQHandler+0x75c>
 800c3e0:	10000001 	.word	0x10000001
 800c3e4:	04000120 	.word	0x04000120
 800c3e8:	0800dc7d 	.word	0x0800dc7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	f040 81e7 	bne.w	800c7c4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3fa:	f003 0310 	and.w	r3, r3, #16
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 81e0 	beq.w	800c7c4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c408:	f003 0310 	and.w	r3, r3, #16
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 81d9 	beq.w	800c7c4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2210      	movs	r2, #16
 800c418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c424:	2b40      	cmp	r3, #64	@ 0x40
 800c426:	f040 8151 	bne.w	800c6cc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a96      	ldr	r2, [pc, #600]	@ (800c68c <HAL_UART_IRQHandler+0x564>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d068      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a93      	ldr	r2, [pc, #588]	@ (800c690 <HAL_UART_IRQHandler+0x568>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d061      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a91      	ldr	r2, [pc, #580]	@ (800c694 <HAL_UART_IRQHandler+0x56c>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d05a      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a8e      	ldr	r2, [pc, #568]	@ (800c698 <HAL_UART_IRQHandler+0x570>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d053      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a8c      	ldr	r2, [pc, #560]	@ (800c69c <HAL_UART_IRQHandler+0x574>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d04c      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a89      	ldr	r2, [pc, #548]	@ (800c6a0 <HAL_UART_IRQHandler+0x578>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d045      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a87      	ldr	r2, [pc, #540]	@ (800c6a4 <HAL_UART_IRQHandler+0x57c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d03e      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a84      	ldr	r2, [pc, #528]	@ (800c6a8 <HAL_UART_IRQHandler+0x580>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d037      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a82      	ldr	r2, [pc, #520]	@ (800c6ac <HAL_UART_IRQHandler+0x584>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d030      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a7f      	ldr	r2, [pc, #508]	@ (800c6b0 <HAL_UART_IRQHandler+0x588>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d029      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a7d      	ldr	r2, [pc, #500]	@ (800c6b4 <HAL_UART_IRQHandler+0x58c>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d022      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a7a      	ldr	r2, [pc, #488]	@ (800c6b8 <HAL_UART_IRQHandler+0x590>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d01b      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a78      	ldr	r2, [pc, #480]	@ (800c6bc <HAL_UART_IRQHandler+0x594>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d014      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a75      	ldr	r2, [pc, #468]	@ (800c6c0 <HAL_UART_IRQHandler+0x598>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d00d      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a73      	ldr	r2, [pc, #460]	@ (800c6c4 <HAL_UART_IRQHandler+0x59c>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d006      	beq.n	800c50a <HAL_UART_IRQHandler+0x3e2>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a70      	ldr	r2, [pc, #448]	@ (800c6c8 <HAL_UART_IRQHandler+0x5a0>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d106      	bne.n	800c518 <HAL_UART_IRQHandler+0x3f0>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	b29b      	uxth	r3, r3
 800c516:	e005      	b.n	800c524 <HAL_UART_IRQHandler+0x3fc>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	b29b      	uxth	r3, r3
 800c524:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c528:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 81ab 	beq.w	800c888 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c538:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c53c:	429a      	cmp	r2, r3
 800c53e:	f080 81a3 	bcs.w	800c888 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c548:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c558:	f000 8087 	beq.w	800c66a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c564:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c568:	e853 3f00 	ldrex	r3, [r3]
 800c56c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	461a      	mov	r2, r3
 800c582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c58a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c592:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c596:	e841 2300 	strex	r3, r2, [r1]
 800c59a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c59e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1da      	bne.n	800c55c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5b8:	f023 0301 	bic.w	r3, r3, #1
 800c5bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c5ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c5ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c5d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c5d6:	e841 2300 	strex	r3, r2, [r1]
 800c5da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c5dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1e1      	bne.n	800c5a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5ec:	e853 3f00 	ldrex	r3, [r3]
 800c5f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c5f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3308      	adds	r3, #8
 800c602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c606:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c608:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c60c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c60e:	e841 2300 	strex	r3, r2, [r1]
 800c612:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e3      	bne.n	800c5e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2220      	movs	r2, #32
 800c61e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c630:	e853 3f00 	ldrex	r3, [r3]
 800c634:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c638:	f023 0310 	bic.w	r3, r3, #16
 800c63c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	461a      	mov	r2, r3
 800c646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c64a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c64c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c650:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c652:	e841 2300 	strex	r3, r2, [r1]
 800c656:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1e4      	bne.n	800c628 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c664:	4618      	mov	r0, r3
 800c666:	f7f9 f919 	bl	800589c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	b29b      	uxth	r3, r3
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f931 	bl	800c8ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c68a:	e0fd      	b.n	800c888 <HAL_UART_IRQHandler+0x760>
 800c68c:	40020010 	.word	0x40020010
 800c690:	40020028 	.word	0x40020028
 800c694:	40020040 	.word	0x40020040
 800c698:	40020058 	.word	0x40020058
 800c69c:	40020070 	.word	0x40020070
 800c6a0:	40020088 	.word	0x40020088
 800c6a4:	400200a0 	.word	0x400200a0
 800c6a8:	400200b8 	.word	0x400200b8
 800c6ac:	40020410 	.word	0x40020410
 800c6b0:	40020428 	.word	0x40020428
 800c6b4:	40020440 	.word	0x40020440
 800c6b8:	40020458 	.word	0x40020458
 800c6bc:	40020470 	.word	0x40020470
 800c6c0:	40020488 	.word	0x40020488
 800c6c4:	400204a0 	.word	0x400204a0
 800c6c8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f000 80cf 	beq.w	800c88c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c6ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 80ca 	beq.w	800c88c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c700:	e853 3f00 	ldrex	r3, [r3]
 800c704:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c70c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	461a      	mov	r2, r3
 800c716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c71a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c71c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1e4      	bne.n	800c6f8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3308      	adds	r3, #8
 800c734:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c738:	e853 3f00 	ldrex	r3, [r3]
 800c73c:	623b      	str	r3, [r7, #32]
   return(result);
 800c73e:	6a3a      	ldr	r2, [r7, #32]
 800c740:	4b55      	ldr	r3, [pc, #340]	@ (800c898 <HAL_UART_IRQHandler+0x770>)
 800c742:	4013      	ands	r3, r2
 800c744:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3308      	adds	r3, #8
 800c74e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c752:	633a      	str	r2, [r7, #48]	@ 0x30
 800c754:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c75a:	e841 2300 	strex	r3, r2, [r1]
 800c75e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e3      	bne.n	800c72e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2220      	movs	r2, #32
 800c76a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	e853 3f00 	ldrex	r3, [r3]
 800c786:	60fb      	str	r3, [r7, #12]
   return(result);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f023 0310 	bic.w	r3, r3, #16
 800c78e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c79c:	61fb      	str	r3, [r7, #28]
 800c79e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a0:	69b9      	ldr	r1, [r7, #24]
 800c7a2:	69fa      	ldr	r2, [r7, #28]
 800c7a4:	e841 2300 	strex	r3, r2, [r1]
 800c7a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e4      	bne.n	800c77a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2202      	movs	r2, #2
 800c7b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f895 	bl	800c8ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7c2:	e063      	b.n	800c88c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00e      	beq.n	800c7ee <HAL_UART_IRQHandler+0x6c6>
 800c7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d008      	beq.n	800c7ee <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c7e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f001 fa89 	bl	800dcfe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7ec:	e051      	b.n	800c892 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d014      	beq.n	800c824 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c7fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c802:	2b00      	cmp	r3, #0
 800c804:	d105      	bne.n	800c812 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c80a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d008      	beq.n	800c824 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c816:	2b00      	cmp	r3, #0
 800c818:	d03a      	beq.n	800c890 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	4798      	blx	r3
    }
    return;
 800c822:	e035      	b.n	800c890 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d009      	beq.n	800c844 <HAL_UART_IRQHandler+0x71c>
 800c830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f001 fa33 	bl	800dca8 <UART_EndTransmit_IT>
    return;
 800c842:	e026      	b.n	800c892 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c848:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d009      	beq.n	800c864 <HAL_UART_IRQHandler+0x73c>
 800c850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c854:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d003      	beq.n	800c864 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f001 fa62 	bl	800dd26 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c862:	e016      	b.n	800c892 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d010      	beq.n	800c892 <HAL_UART_IRQHandler+0x76a>
 800c870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c874:	2b00      	cmp	r3, #0
 800c876:	da0c      	bge.n	800c892 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f001 fa4a 	bl	800dd12 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c87e:	e008      	b.n	800c892 <HAL_UART_IRQHandler+0x76a>
      return;
 800c880:	bf00      	nop
 800c882:	e006      	b.n	800c892 <HAL_UART_IRQHandler+0x76a>
    return;
 800c884:	bf00      	nop
 800c886:	e004      	b.n	800c892 <HAL_UART_IRQHandler+0x76a>
      return;
 800c888:	bf00      	nop
 800c88a:	e002      	b.n	800c892 <HAL_UART_IRQHandler+0x76a>
      return;
 800c88c:	bf00      	nop
 800c88e:	e000      	b.n	800c892 <HAL_UART_IRQHandler+0x76a>
    return;
 800c890:	bf00      	nop
  }
}
 800c892:	37e8      	adds	r7, #232	@ 0xe8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	effffffe 	.word	0xeffffffe

0800c89c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c908:	b092      	sub	sp, #72	@ 0x48
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	689a      	ldr	r2, [r3, #8]
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	431a      	orrs	r2, r3
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	695b      	ldr	r3, [r3, #20]
 800c922:	431a      	orrs	r2, r3
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	69db      	ldr	r3, [r3, #28]
 800c928:	4313      	orrs	r3, r2
 800c92a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	4bbe      	ldr	r3, [pc, #760]	@ (800cc2c <UART_SetConfig+0x328>)
 800c934:	4013      	ands	r3, r2
 800c936:	697a      	ldr	r2, [r7, #20]
 800c938:	6812      	ldr	r2, [r2, #0]
 800c93a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c93c:	430b      	orrs	r3, r1
 800c93e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	68da      	ldr	r2, [r3, #12]
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	430a      	orrs	r2, r1
 800c954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4ab3      	ldr	r2, [pc, #716]	@ (800cc30 <UART_SetConfig+0x32c>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d004      	beq.n	800c970 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c96c:	4313      	orrs	r3, r2
 800c96e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	689a      	ldr	r2, [r3, #8]
 800c976:	4baf      	ldr	r3, [pc, #700]	@ (800cc34 <UART_SetConfig+0x330>)
 800c978:	4013      	ands	r3, r2
 800c97a:	697a      	ldr	r2, [r7, #20]
 800c97c:	6812      	ldr	r2, [r2, #0]
 800c97e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c980:	430b      	orrs	r3, r1
 800c982:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c98a:	f023 010f 	bic.w	r1, r3, #15
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	430a      	orrs	r2, r1
 800c998:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4aa6      	ldr	r2, [pc, #664]	@ (800cc38 <UART_SetConfig+0x334>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d177      	bne.n	800ca94 <UART_SetConfig+0x190>
 800c9a4:	4ba5      	ldr	r3, [pc, #660]	@ (800cc3c <UART_SetConfig+0x338>)
 800c9a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c9ac:	2b28      	cmp	r3, #40	@ 0x28
 800c9ae:	d86d      	bhi.n	800ca8c <UART_SetConfig+0x188>
 800c9b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b8 <UART_SetConfig+0xb4>)
 800c9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b6:	bf00      	nop
 800c9b8:	0800ca5d 	.word	0x0800ca5d
 800c9bc:	0800ca8d 	.word	0x0800ca8d
 800c9c0:	0800ca8d 	.word	0x0800ca8d
 800c9c4:	0800ca8d 	.word	0x0800ca8d
 800c9c8:	0800ca8d 	.word	0x0800ca8d
 800c9cc:	0800ca8d 	.word	0x0800ca8d
 800c9d0:	0800ca8d 	.word	0x0800ca8d
 800c9d4:	0800ca8d 	.word	0x0800ca8d
 800c9d8:	0800ca65 	.word	0x0800ca65
 800c9dc:	0800ca8d 	.word	0x0800ca8d
 800c9e0:	0800ca8d 	.word	0x0800ca8d
 800c9e4:	0800ca8d 	.word	0x0800ca8d
 800c9e8:	0800ca8d 	.word	0x0800ca8d
 800c9ec:	0800ca8d 	.word	0x0800ca8d
 800c9f0:	0800ca8d 	.word	0x0800ca8d
 800c9f4:	0800ca8d 	.word	0x0800ca8d
 800c9f8:	0800ca6d 	.word	0x0800ca6d
 800c9fc:	0800ca8d 	.word	0x0800ca8d
 800ca00:	0800ca8d 	.word	0x0800ca8d
 800ca04:	0800ca8d 	.word	0x0800ca8d
 800ca08:	0800ca8d 	.word	0x0800ca8d
 800ca0c:	0800ca8d 	.word	0x0800ca8d
 800ca10:	0800ca8d 	.word	0x0800ca8d
 800ca14:	0800ca8d 	.word	0x0800ca8d
 800ca18:	0800ca75 	.word	0x0800ca75
 800ca1c:	0800ca8d 	.word	0x0800ca8d
 800ca20:	0800ca8d 	.word	0x0800ca8d
 800ca24:	0800ca8d 	.word	0x0800ca8d
 800ca28:	0800ca8d 	.word	0x0800ca8d
 800ca2c:	0800ca8d 	.word	0x0800ca8d
 800ca30:	0800ca8d 	.word	0x0800ca8d
 800ca34:	0800ca8d 	.word	0x0800ca8d
 800ca38:	0800ca7d 	.word	0x0800ca7d
 800ca3c:	0800ca8d 	.word	0x0800ca8d
 800ca40:	0800ca8d 	.word	0x0800ca8d
 800ca44:	0800ca8d 	.word	0x0800ca8d
 800ca48:	0800ca8d 	.word	0x0800ca8d
 800ca4c:	0800ca8d 	.word	0x0800ca8d
 800ca50:	0800ca8d 	.word	0x0800ca8d
 800ca54:	0800ca8d 	.word	0x0800ca8d
 800ca58:	0800ca85 	.word	0x0800ca85
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca62:	e222      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ca64:	2304      	movs	r3, #4
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6a:	e21e      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ca6c:	2308      	movs	r3, #8
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca72:	e21a      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ca74:	2310      	movs	r3, #16
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca7a:	e216      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ca7c:	2320      	movs	r3, #32
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca82:	e212      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ca84:	2340      	movs	r3, #64	@ 0x40
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8a:	e20e      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ca8c:	2380      	movs	r3, #128	@ 0x80
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca92:	e20a      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a69      	ldr	r2, [pc, #420]	@ (800cc40 <UART_SetConfig+0x33c>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d130      	bne.n	800cb00 <UART_SetConfig+0x1fc>
 800ca9e:	4b67      	ldr	r3, [pc, #412]	@ (800cc3c <UART_SetConfig+0x338>)
 800caa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	2b05      	cmp	r3, #5
 800caa8:	d826      	bhi.n	800caf8 <UART_SetConfig+0x1f4>
 800caaa:	a201      	add	r2, pc, #4	@ (adr r2, 800cab0 <UART_SetConfig+0x1ac>)
 800caac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab0:	0800cac9 	.word	0x0800cac9
 800cab4:	0800cad1 	.word	0x0800cad1
 800cab8:	0800cad9 	.word	0x0800cad9
 800cabc:	0800cae1 	.word	0x0800cae1
 800cac0:	0800cae9 	.word	0x0800cae9
 800cac4:	0800caf1 	.word	0x0800caf1
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cace:	e1ec      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cad0:	2304      	movs	r3, #4
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad6:	e1e8      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cad8:	2308      	movs	r3, #8
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cade:	e1e4      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cae0:	2310      	movs	r3, #16
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cae6:	e1e0      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cae8:	2320      	movs	r3, #32
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caee:	e1dc      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800caf0:	2340      	movs	r3, #64	@ 0x40
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caf6:	e1d8      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800caf8:	2380      	movs	r3, #128	@ 0x80
 800cafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cafe:	e1d4      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a4f      	ldr	r2, [pc, #316]	@ (800cc44 <UART_SetConfig+0x340>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d130      	bne.n	800cb6c <UART_SetConfig+0x268>
 800cb0a:	4b4c      	ldr	r3, [pc, #304]	@ (800cc3c <UART_SetConfig+0x338>)
 800cb0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb0e:	f003 0307 	and.w	r3, r3, #7
 800cb12:	2b05      	cmp	r3, #5
 800cb14:	d826      	bhi.n	800cb64 <UART_SetConfig+0x260>
 800cb16:	a201      	add	r2, pc, #4	@ (adr r2, 800cb1c <UART_SetConfig+0x218>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cb35 	.word	0x0800cb35
 800cb20:	0800cb3d 	.word	0x0800cb3d
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	0800cb4d 	.word	0x0800cb4d
 800cb2c:	0800cb55 	.word	0x0800cb55
 800cb30:	0800cb5d 	.word	0x0800cb5d
 800cb34:	2300      	movs	r3, #0
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3a:	e1b6      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cb3c:	2304      	movs	r3, #4
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb42:	e1b2      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cb44:	2308      	movs	r3, #8
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4a:	e1ae      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cb4c:	2310      	movs	r3, #16
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb52:	e1aa      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cb54:	2320      	movs	r3, #32
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb5a:	e1a6      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cb5c:	2340      	movs	r3, #64	@ 0x40
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb62:	e1a2      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cb64:	2380      	movs	r3, #128	@ 0x80
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb6a:	e19e      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a35      	ldr	r2, [pc, #212]	@ (800cc48 <UART_SetConfig+0x344>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d130      	bne.n	800cbd8 <UART_SetConfig+0x2d4>
 800cb76:	4b31      	ldr	r3, [pc, #196]	@ (800cc3c <UART_SetConfig+0x338>)
 800cb78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb7a:	f003 0307 	and.w	r3, r3, #7
 800cb7e:	2b05      	cmp	r3, #5
 800cb80:	d826      	bhi.n	800cbd0 <UART_SetConfig+0x2cc>
 800cb82:	a201      	add	r2, pc, #4	@ (adr r2, 800cb88 <UART_SetConfig+0x284>)
 800cb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb88:	0800cba1 	.word	0x0800cba1
 800cb8c:	0800cba9 	.word	0x0800cba9
 800cb90:	0800cbb1 	.word	0x0800cbb1
 800cb94:	0800cbb9 	.word	0x0800cbb9
 800cb98:	0800cbc1 	.word	0x0800cbc1
 800cb9c:	0800cbc9 	.word	0x0800cbc9
 800cba0:	2300      	movs	r3, #0
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba6:	e180      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cba8:	2304      	movs	r3, #4
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbae:	e17c      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cbb0:	2308      	movs	r3, #8
 800cbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbb6:	e178      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cbb8:	2310      	movs	r3, #16
 800cbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbbe:	e174      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cbc0:	2320      	movs	r3, #32
 800cbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbc6:	e170      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cbc8:	2340      	movs	r3, #64	@ 0x40
 800cbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbce:	e16c      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cbd0:	2380      	movs	r3, #128	@ 0x80
 800cbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbd6:	e168      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a1b      	ldr	r2, [pc, #108]	@ (800cc4c <UART_SetConfig+0x348>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d142      	bne.n	800cc68 <UART_SetConfig+0x364>
 800cbe2:	4b16      	ldr	r3, [pc, #88]	@ (800cc3c <UART_SetConfig+0x338>)
 800cbe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbe6:	f003 0307 	and.w	r3, r3, #7
 800cbea:	2b05      	cmp	r3, #5
 800cbec:	d838      	bhi.n	800cc60 <UART_SetConfig+0x35c>
 800cbee:	a201      	add	r2, pc, #4	@ (adr r2, 800cbf4 <UART_SetConfig+0x2f0>)
 800cbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf4:	0800cc0d 	.word	0x0800cc0d
 800cbf8:	0800cc15 	.word	0x0800cc15
 800cbfc:	0800cc1d 	.word	0x0800cc1d
 800cc00:	0800cc25 	.word	0x0800cc25
 800cc04:	0800cc51 	.word	0x0800cc51
 800cc08:	0800cc59 	.word	0x0800cc59
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc12:	e14a      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cc14:	2304      	movs	r3, #4
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc1a:	e146      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cc1c:	2308      	movs	r3, #8
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc22:	e142      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cc24:	2310      	movs	r3, #16
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2a:	e13e      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cc2c:	cfff69f3 	.word	0xcfff69f3
 800cc30:	58000c00 	.word	0x58000c00
 800cc34:	11fff4ff 	.word	0x11fff4ff
 800cc38:	40011000 	.word	0x40011000
 800cc3c:	58024400 	.word	0x58024400
 800cc40:	40004400 	.word	0x40004400
 800cc44:	40004800 	.word	0x40004800
 800cc48:	40004c00 	.word	0x40004c00
 800cc4c:	40005000 	.word	0x40005000
 800cc50:	2320      	movs	r3, #32
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc56:	e128      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cc58:	2340      	movs	r3, #64	@ 0x40
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5e:	e124      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cc60:	2380      	movs	r3, #128	@ 0x80
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc66:	e120      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4acb      	ldr	r2, [pc, #812]	@ (800cf9c <UART_SetConfig+0x698>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d176      	bne.n	800cd60 <UART_SetConfig+0x45c>
 800cc72:	4bcb      	ldr	r3, [pc, #812]	@ (800cfa0 <UART_SetConfig+0x69c>)
 800cc74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc7a:	2b28      	cmp	r3, #40	@ 0x28
 800cc7c:	d86c      	bhi.n	800cd58 <UART_SetConfig+0x454>
 800cc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc84 <UART_SetConfig+0x380>)
 800cc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc84:	0800cd29 	.word	0x0800cd29
 800cc88:	0800cd59 	.word	0x0800cd59
 800cc8c:	0800cd59 	.word	0x0800cd59
 800cc90:	0800cd59 	.word	0x0800cd59
 800cc94:	0800cd59 	.word	0x0800cd59
 800cc98:	0800cd59 	.word	0x0800cd59
 800cc9c:	0800cd59 	.word	0x0800cd59
 800cca0:	0800cd59 	.word	0x0800cd59
 800cca4:	0800cd31 	.word	0x0800cd31
 800cca8:	0800cd59 	.word	0x0800cd59
 800ccac:	0800cd59 	.word	0x0800cd59
 800ccb0:	0800cd59 	.word	0x0800cd59
 800ccb4:	0800cd59 	.word	0x0800cd59
 800ccb8:	0800cd59 	.word	0x0800cd59
 800ccbc:	0800cd59 	.word	0x0800cd59
 800ccc0:	0800cd59 	.word	0x0800cd59
 800ccc4:	0800cd39 	.word	0x0800cd39
 800ccc8:	0800cd59 	.word	0x0800cd59
 800cccc:	0800cd59 	.word	0x0800cd59
 800ccd0:	0800cd59 	.word	0x0800cd59
 800ccd4:	0800cd59 	.word	0x0800cd59
 800ccd8:	0800cd59 	.word	0x0800cd59
 800ccdc:	0800cd59 	.word	0x0800cd59
 800cce0:	0800cd59 	.word	0x0800cd59
 800cce4:	0800cd41 	.word	0x0800cd41
 800cce8:	0800cd59 	.word	0x0800cd59
 800ccec:	0800cd59 	.word	0x0800cd59
 800ccf0:	0800cd59 	.word	0x0800cd59
 800ccf4:	0800cd59 	.word	0x0800cd59
 800ccf8:	0800cd59 	.word	0x0800cd59
 800ccfc:	0800cd59 	.word	0x0800cd59
 800cd00:	0800cd59 	.word	0x0800cd59
 800cd04:	0800cd49 	.word	0x0800cd49
 800cd08:	0800cd59 	.word	0x0800cd59
 800cd0c:	0800cd59 	.word	0x0800cd59
 800cd10:	0800cd59 	.word	0x0800cd59
 800cd14:	0800cd59 	.word	0x0800cd59
 800cd18:	0800cd59 	.word	0x0800cd59
 800cd1c:	0800cd59 	.word	0x0800cd59
 800cd20:	0800cd59 	.word	0x0800cd59
 800cd24:	0800cd51 	.word	0x0800cd51
 800cd28:	2301      	movs	r3, #1
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2e:	e0bc      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cd30:	2304      	movs	r3, #4
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd36:	e0b8      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cd38:	2308      	movs	r3, #8
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3e:	e0b4      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cd40:	2310      	movs	r3, #16
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd46:	e0b0      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cd48:	2320      	movs	r3, #32
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4e:	e0ac      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cd50:	2340      	movs	r3, #64	@ 0x40
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd56:	e0a8      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cd58:	2380      	movs	r3, #128	@ 0x80
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5e:	e0a4      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a8f      	ldr	r2, [pc, #572]	@ (800cfa4 <UART_SetConfig+0x6a0>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d130      	bne.n	800cdcc <UART_SetConfig+0x4c8>
 800cd6a:	4b8d      	ldr	r3, [pc, #564]	@ (800cfa0 <UART_SetConfig+0x69c>)
 800cd6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	d826      	bhi.n	800cdc4 <UART_SetConfig+0x4c0>
 800cd76:	a201      	add	r2, pc, #4	@ (adr r2, 800cd7c <UART_SetConfig+0x478>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800cd95 	.word	0x0800cd95
 800cd80:	0800cd9d 	.word	0x0800cd9d
 800cd84:	0800cda5 	.word	0x0800cda5
 800cd88:	0800cdad 	.word	0x0800cdad
 800cd8c:	0800cdb5 	.word	0x0800cdb5
 800cd90:	0800cdbd 	.word	0x0800cdbd
 800cd94:	2300      	movs	r3, #0
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e086      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cd9c:	2304      	movs	r3, #4
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda2:	e082      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cda4:	2308      	movs	r3, #8
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdaa:	e07e      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cdac:	2310      	movs	r3, #16
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb2:	e07a      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cdb4:	2320      	movs	r3, #32
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdba:	e076      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cdbc:	2340      	movs	r3, #64	@ 0x40
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc2:	e072      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cdc4:	2380      	movs	r3, #128	@ 0x80
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdca:	e06e      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a75      	ldr	r2, [pc, #468]	@ (800cfa8 <UART_SetConfig+0x6a4>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d130      	bne.n	800ce38 <UART_SetConfig+0x534>
 800cdd6:	4b72      	ldr	r3, [pc, #456]	@ (800cfa0 <UART_SetConfig+0x69c>)
 800cdd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdda:	f003 0307 	and.w	r3, r3, #7
 800cdde:	2b05      	cmp	r3, #5
 800cde0:	d826      	bhi.n	800ce30 <UART_SetConfig+0x52c>
 800cde2:	a201      	add	r2, pc, #4	@ (adr r2, 800cde8 <UART_SetConfig+0x4e4>)
 800cde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde8:	0800ce01 	.word	0x0800ce01
 800cdec:	0800ce09 	.word	0x0800ce09
 800cdf0:	0800ce11 	.word	0x0800ce11
 800cdf4:	0800ce19 	.word	0x0800ce19
 800cdf8:	0800ce21 	.word	0x0800ce21
 800cdfc:	0800ce29 	.word	0x0800ce29
 800ce00:	2300      	movs	r3, #0
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e050      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce08:	2304      	movs	r3, #4
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0e:	e04c      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce10:	2308      	movs	r3, #8
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce16:	e048      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce18:	2310      	movs	r3, #16
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1e:	e044      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce20:	2320      	movs	r3, #32
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce26:	e040      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce28:	2340      	movs	r3, #64	@ 0x40
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce2e:	e03c      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce30:	2380      	movs	r3, #128	@ 0x80
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce36:	e038      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a5b      	ldr	r2, [pc, #364]	@ (800cfac <UART_SetConfig+0x6a8>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d130      	bne.n	800cea4 <UART_SetConfig+0x5a0>
 800ce42:	4b57      	ldr	r3, [pc, #348]	@ (800cfa0 <UART_SetConfig+0x69c>)
 800ce44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	2b05      	cmp	r3, #5
 800ce4c:	d826      	bhi.n	800ce9c <UART_SetConfig+0x598>
 800ce4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce54 <UART_SetConfig+0x550>)
 800ce50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce54:	0800ce6d 	.word	0x0800ce6d
 800ce58:	0800ce75 	.word	0x0800ce75
 800ce5c:	0800ce7d 	.word	0x0800ce7d
 800ce60:	0800ce85 	.word	0x0800ce85
 800ce64:	0800ce8d 	.word	0x0800ce8d
 800ce68:	0800ce95 	.word	0x0800ce95
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce72:	e01a      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce74:	2304      	movs	r3, #4
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce7a:	e016      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce7c:	2308      	movs	r3, #8
 800ce7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce82:	e012      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce84:	2310      	movs	r3, #16
 800ce86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce8a:	e00e      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce8c:	2320      	movs	r3, #32
 800ce8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce92:	e00a      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce94:	2340      	movs	r3, #64	@ 0x40
 800ce96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce9a:	e006      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800ce9c:	2380      	movs	r3, #128	@ 0x80
 800ce9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cea2:	e002      	b.n	800ceaa <UART_SetConfig+0x5a6>
 800cea4:	2380      	movs	r3, #128	@ 0x80
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4a3f      	ldr	r2, [pc, #252]	@ (800cfac <UART_SetConfig+0x6a8>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	f040 80f8 	bne.w	800d0a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ceb6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ceba:	2b20      	cmp	r3, #32
 800cebc:	dc46      	bgt.n	800cf4c <UART_SetConfig+0x648>
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	f2c0 8082 	blt.w	800cfc8 <UART_SetConfig+0x6c4>
 800cec4:	3b02      	subs	r3, #2
 800cec6:	2b1e      	cmp	r3, #30
 800cec8:	d87e      	bhi.n	800cfc8 <UART_SetConfig+0x6c4>
 800ceca:	a201      	add	r2, pc, #4	@ (adr r2, 800ced0 <UART_SetConfig+0x5cc>)
 800cecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced0:	0800cf53 	.word	0x0800cf53
 800ced4:	0800cfc9 	.word	0x0800cfc9
 800ced8:	0800cf5b 	.word	0x0800cf5b
 800cedc:	0800cfc9 	.word	0x0800cfc9
 800cee0:	0800cfc9 	.word	0x0800cfc9
 800cee4:	0800cfc9 	.word	0x0800cfc9
 800cee8:	0800cf6b 	.word	0x0800cf6b
 800ceec:	0800cfc9 	.word	0x0800cfc9
 800cef0:	0800cfc9 	.word	0x0800cfc9
 800cef4:	0800cfc9 	.word	0x0800cfc9
 800cef8:	0800cfc9 	.word	0x0800cfc9
 800cefc:	0800cfc9 	.word	0x0800cfc9
 800cf00:	0800cfc9 	.word	0x0800cfc9
 800cf04:	0800cfc9 	.word	0x0800cfc9
 800cf08:	0800cf7b 	.word	0x0800cf7b
 800cf0c:	0800cfc9 	.word	0x0800cfc9
 800cf10:	0800cfc9 	.word	0x0800cfc9
 800cf14:	0800cfc9 	.word	0x0800cfc9
 800cf18:	0800cfc9 	.word	0x0800cfc9
 800cf1c:	0800cfc9 	.word	0x0800cfc9
 800cf20:	0800cfc9 	.word	0x0800cfc9
 800cf24:	0800cfc9 	.word	0x0800cfc9
 800cf28:	0800cfc9 	.word	0x0800cfc9
 800cf2c:	0800cfc9 	.word	0x0800cfc9
 800cf30:	0800cfc9 	.word	0x0800cfc9
 800cf34:	0800cfc9 	.word	0x0800cfc9
 800cf38:	0800cfc9 	.word	0x0800cfc9
 800cf3c:	0800cfc9 	.word	0x0800cfc9
 800cf40:	0800cfc9 	.word	0x0800cfc9
 800cf44:	0800cfc9 	.word	0x0800cfc9
 800cf48:	0800cfbb 	.word	0x0800cfbb
 800cf4c:	2b40      	cmp	r3, #64	@ 0x40
 800cf4e:	d037      	beq.n	800cfc0 <UART_SetConfig+0x6bc>
 800cf50:	e03a      	b.n	800cfc8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf52:	f7fd fef5 	bl	800ad40 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cf58:	e03c      	b.n	800cfd4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fd ff04 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf68:	e034      	b.n	800cfd4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf6a:	f107 0318 	add.w	r3, r7, #24
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe f850 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf78:	e02c      	b.n	800cfd4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf7a:	4b09      	ldr	r3, [pc, #36]	@ (800cfa0 <UART_SetConfig+0x69c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 0320 	and.w	r3, r3, #32
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d016      	beq.n	800cfb4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf86:	4b06      	ldr	r3, [pc, #24]	@ (800cfa0 <UART_SetConfig+0x69c>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	08db      	lsrs	r3, r3, #3
 800cf8c:	f003 0303 	and.w	r3, r3, #3
 800cf90:	4a07      	ldr	r2, [pc, #28]	@ (800cfb0 <UART_SetConfig+0x6ac>)
 800cf92:	fa22 f303 	lsr.w	r3, r2, r3
 800cf96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf98:	e01c      	b.n	800cfd4 <UART_SetConfig+0x6d0>
 800cf9a:	bf00      	nop
 800cf9c:	40011400 	.word	0x40011400
 800cfa0:	58024400 	.word	0x58024400
 800cfa4:	40007800 	.word	0x40007800
 800cfa8:	40007c00 	.word	0x40007c00
 800cfac:	58000c00 	.word	0x58000c00
 800cfb0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cfb4:	4b9d      	ldr	r3, [pc, #628]	@ (800d22c <UART_SetConfig+0x928>)
 800cfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfb8:	e00c      	b.n	800cfd4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfba:	4b9d      	ldr	r3, [pc, #628]	@ (800d230 <UART_SetConfig+0x92c>)
 800cfbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfbe:	e009      	b.n	800cfd4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfc6:	e005      	b.n	800cfd4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cfd2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cfd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 81de 	beq.w	800d398 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfe0:	4a94      	ldr	r2, [pc, #592]	@ (800d234 <UART_SetConfig+0x930>)
 800cfe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfea:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	4613      	mov	r3, r2
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	4413      	add	r3, r2
 800cffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d305      	bcc.n	800d00c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d008:	429a      	cmp	r2, r3
 800d00a:	d903      	bls.n	800d014 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d012:	e1c1      	b.n	800d398 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d016:	2200      	movs	r2, #0
 800d018:	60bb      	str	r3, [r7, #8]
 800d01a:	60fa      	str	r2, [r7, #12]
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d020:	4a84      	ldr	r2, [pc, #528]	@ (800d234 <UART_SetConfig+0x930>)
 800d022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d026:	b29b      	uxth	r3, r3
 800d028:	2200      	movs	r2, #0
 800d02a:	603b      	str	r3, [r7, #0]
 800d02c:	607a      	str	r2, [r7, #4]
 800d02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d036:	f7f3 fa0b 	bl	8000450 <__aeabi_uldivmod>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	4610      	mov	r0, r2
 800d040:	4619      	mov	r1, r3
 800d042:	f04f 0200 	mov.w	r2, #0
 800d046:	f04f 0300 	mov.w	r3, #0
 800d04a:	020b      	lsls	r3, r1, #8
 800d04c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d050:	0202      	lsls	r2, r0, #8
 800d052:	6979      	ldr	r1, [r7, #20]
 800d054:	6849      	ldr	r1, [r1, #4]
 800d056:	0849      	lsrs	r1, r1, #1
 800d058:	2000      	movs	r0, #0
 800d05a:	460c      	mov	r4, r1
 800d05c:	4605      	mov	r5, r0
 800d05e:	eb12 0804 	adds.w	r8, r2, r4
 800d062:	eb43 0905 	adc.w	r9, r3, r5
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	469a      	mov	sl, r3
 800d06e:	4693      	mov	fp, r2
 800d070:	4652      	mov	r2, sl
 800d072:	465b      	mov	r3, fp
 800d074:	4640      	mov	r0, r8
 800d076:	4649      	mov	r1, r9
 800d078:	f7f3 f9ea 	bl	8000450 <__aeabi_uldivmod>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	4613      	mov	r3, r2
 800d082:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d08a:	d308      	bcc.n	800d09e <UART_SetConfig+0x79a>
 800d08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d092:	d204      	bcs.n	800d09e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d09a:	60da      	str	r2, [r3, #12]
 800d09c:	e17c      	b.n	800d398 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d0a4:	e178      	b.n	800d398 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	69db      	ldr	r3, [r3, #28]
 800d0aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d0ae:	f040 80c5 	bne.w	800d23c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d0b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d0b6:	2b20      	cmp	r3, #32
 800d0b8:	dc48      	bgt.n	800d14c <UART_SetConfig+0x848>
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	db7b      	blt.n	800d1b6 <UART_SetConfig+0x8b2>
 800d0be:	2b20      	cmp	r3, #32
 800d0c0:	d879      	bhi.n	800d1b6 <UART_SetConfig+0x8b2>
 800d0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c8 <UART_SetConfig+0x7c4>)
 800d0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c8:	0800d153 	.word	0x0800d153
 800d0cc:	0800d15b 	.word	0x0800d15b
 800d0d0:	0800d1b7 	.word	0x0800d1b7
 800d0d4:	0800d1b7 	.word	0x0800d1b7
 800d0d8:	0800d163 	.word	0x0800d163
 800d0dc:	0800d1b7 	.word	0x0800d1b7
 800d0e0:	0800d1b7 	.word	0x0800d1b7
 800d0e4:	0800d1b7 	.word	0x0800d1b7
 800d0e8:	0800d173 	.word	0x0800d173
 800d0ec:	0800d1b7 	.word	0x0800d1b7
 800d0f0:	0800d1b7 	.word	0x0800d1b7
 800d0f4:	0800d1b7 	.word	0x0800d1b7
 800d0f8:	0800d1b7 	.word	0x0800d1b7
 800d0fc:	0800d1b7 	.word	0x0800d1b7
 800d100:	0800d1b7 	.word	0x0800d1b7
 800d104:	0800d1b7 	.word	0x0800d1b7
 800d108:	0800d183 	.word	0x0800d183
 800d10c:	0800d1b7 	.word	0x0800d1b7
 800d110:	0800d1b7 	.word	0x0800d1b7
 800d114:	0800d1b7 	.word	0x0800d1b7
 800d118:	0800d1b7 	.word	0x0800d1b7
 800d11c:	0800d1b7 	.word	0x0800d1b7
 800d120:	0800d1b7 	.word	0x0800d1b7
 800d124:	0800d1b7 	.word	0x0800d1b7
 800d128:	0800d1b7 	.word	0x0800d1b7
 800d12c:	0800d1b7 	.word	0x0800d1b7
 800d130:	0800d1b7 	.word	0x0800d1b7
 800d134:	0800d1b7 	.word	0x0800d1b7
 800d138:	0800d1b7 	.word	0x0800d1b7
 800d13c:	0800d1b7 	.word	0x0800d1b7
 800d140:	0800d1b7 	.word	0x0800d1b7
 800d144:	0800d1b7 	.word	0x0800d1b7
 800d148:	0800d1a9 	.word	0x0800d1a9
 800d14c:	2b40      	cmp	r3, #64	@ 0x40
 800d14e:	d02e      	beq.n	800d1ae <UART_SetConfig+0x8aa>
 800d150:	e031      	b.n	800d1b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d152:	f7fb fdfd 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800d156:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d158:	e033      	b.n	800d1c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d15a:	f7fb fe0f 	bl	8008d7c <HAL_RCC_GetPCLK2Freq>
 800d15e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d160:	e02f      	b.n	800d1c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d166:	4618      	mov	r0, r3
 800d168:	f7fd fe00 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d170:	e027      	b.n	800d1c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d172:	f107 0318 	add.w	r3, r7, #24
 800d176:	4618      	mov	r0, r3
 800d178:	f7fd ff4c 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d180:	e01f      	b.n	800d1c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d182:	4b2d      	ldr	r3, [pc, #180]	@ (800d238 <UART_SetConfig+0x934>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f003 0320 	and.w	r3, r3, #32
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d009      	beq.n	800d1a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d18e:	4b2a      	ldr	r3, [pc, #168]	@ (800d238 <UART_SetConfig+0x934>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	08db      	lsrs	r3, r3, #3
 800d194:	f003 0303 	and.w	r3, r3, #3
 800d198:	4a24      	ldr	r2, [pc, #144]	@ (800d22c <UART_SetConfig+0x928>)
 800d19a:	fa22 f303 	lsr.w	r3, r2, r3
 800d19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1a0:	e00f      	b.n	800d1c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d1a2:	4b22      	ldr	r3, [pc, #136]	@ (800d22c <UART_SetConfig+0x928>)
 800d1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a6:	e00c      	b.n	800d1c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1a8:	4b21      	ldr	r3, [pc, #132]	@ (800d230 <UART_SetConfig+0x92c>)
 800d1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ac:	e009      	b.n	800d1c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1b4:	e005      	b.n	800d1c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d1c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 80e7 	beq.w	800d398 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ce:	4a19      	ldr	r2, [pc, #100]	@ (800d234 <UART_SetConfig+0x930>)
 800d1d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1dc:	005a      	lsls	r2, r3, #1
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	085b      	lsrs	r3, r3, #1
 800d1e4:	441a      	add	r2, r3
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f2:	2b0f      	cmp	r3, #15
 800d1f4:	d916      	bls.n	800d224 <UART_SetConfig+0x920>
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1fc:	d212      	bcs.n	800d224 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d200:	b29b      	uxth	r3, r3
 800d202:	f023 030f 	bic.w	r3, r3, #15
 800d206:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20a:	085b      	lsrs	r3, r3, #1
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	f003 0307 	and.w	r3, r3, #7
 800d212:	b29a      	uxth	r2, r3
 800d214:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d216:	4313      	orrs	r3, r2
 800d218:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d220:	60da      	str	r2, [r3, #12]
 800d222:	e0b9      	b.n	800d398 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d22a:	e0b5      	b.n	800d398 <UART_SetConfig+0xa94>
 800d22c:	03d09000 	.word	0x03d09000
 800d230:	003d0900 	.word	0x003d0900
 800d234:	08023530 	.word	0x08023530
 800d238:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d23c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d240:	2b20      	cmp	r3, #32
 800d242:	dc49      	bgt.n	800d2d8 <UART_SetConfig+0x9d4>
 800d244:	2b00      	cmp	r3, #0
 800d246:	db7c      	blt.n	800d342 <UART_SetConfig+0xa3e>
 800d248:	2b20      	cmp	r3, #32
 800d24a:	d87a      	bhi.n	800d342 <UART_SetConfig+0xa3e>
 800d24c:	a201      	add	r2, pc, #4	@ (adr r2, 800d254 <UART_SetConfig+0x950>)
 800d24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d252:	bf00      	nop
 800d254:	0800d2df 	.word	0x0800d2df
 800d258:	0800d2e7 	.word	0x0800d2e7
 800d25c:	0800d343 	.word	0x0800d343
 800d260:	0800d343 	.word	0x0800d343
 800d264:	0800d2ef 	.word	0x0800d2ef
 800d268:	0800d343 	.word	0x0800d343
 800d26c:	0800d343 	.word	0x0800d343
 800d270:	0800d343 	.word	0x0800d343
 800d274:	0800d2ff 	.word	0x0800d2ff
 800d278:	0800d343 	.word	0x0800d343
 800d27c:	0800d343 	.word	0x0800d343
 800d280:	0800d343 	.word	0x0800d343
 800d284:	0800d343 	.word	0x0800d343
 800d288:	0800d343 	.word	0x0800d343
 800d28c:	0800d343 	.word	0x0800d343
 800d290:	0800d343 	.word	0x0800d343
 800d294:	0800d30f 	.word	0x0800d30f
 800d298:	0800d343 	.word	0x0800d343
 800d29c:	0800d343 	.word	0x0800d343
 800d2a0:	0800d343 	.word	0x0800d343
 800d2a4:	0800d343 	.word	0x0800d343
 800d2a8:	0800d343 	.word	0x0800d343
 800d2ac:	0800d343 	.word	0x0800d343
 800d2b0:	0800d343 	.word	0x0800d343
 800d2b4:	0800d343 	.word	0x0800d343
 800d2b8:	0800d343 	.word	0x0800d343
 800d2bc:	0800d343 	.word	0x0800d343
 800d2c0:	0800d343 	.word	0x0800d343
 800d2c4:	0800d343 	.word	0x0800d343
 800d2c8:	0800d343 	.word	0x0800d343
 800d2cc:	0800d343 	.word	0x0800d343
 800d2d0:	0800d343 	.word	0x0800d343
 800d2d4:	0800d335 	.word	0x0800d335
 800d2d8:	2b40      	cmp	r3, #64	@ 0x40
 800d2da:	d02e      	beq.n	800d33a <UART_SetConfig+0xa36>
 800d2dc:	e031      	b.n	800d342 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2de:	f7fb fd37 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800d2e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2e4:	e033      	b.n	800d34e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2e6:	f7fb fd49 	bl	8008d7c <HAL_RCC_GetPCLK2Freq>
 800d2ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2ec:	e02f      	b.n	800d34e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fd fd3a 	bl	800ad6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2fc:	e027      	b.n	800d34e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2fe:	f107 0318 	add.w	r3, r7, #24
 800d302:	4618      	mov	r0, r3
 800d304:	f7fd fe86 	bl	800b014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d30c:	e01f      	b.n	800d34e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d30e:	4b2d      	ldr	r3, [pc, #180]	@ (800d3c4 <UART_SetConfig+0xac0>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0320 	and.w	r3, r3, #32
 800d316:	2b00      	cmp	r3, #0
 800d318:	d009      	beq.n	800d32e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d31a:	4b2a      	ldr	r3, [pc, #168]	@ (800d3c4 <UART_SetConfig+0xac0>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	08db      	lsrs	r3, r3, #3
 800d320:	f003 0303 	and.w	r3, r3, #3
 800d324:	4a28      	ldr	r2, [pc, #160]	@ (800d3c8 <UART_SetConfig+0xac4>)
 800d326:	fa22 f303 	lsr.w	r3, r2, r3
 800d32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d32c:	e00f      	b.n	800d34e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d32e:	4b26      	ldr	r3, [pc, #152]	@ (800d3c8 <UART_SetConfig+0xac4>)
 800d330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d332:	e00c      	b.n	800d34e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d334:	4b25      	ldr	r3, [pc, #148]	@ (800d3cc <UART_SetConfig+0xac8>)
 800d336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d338:	e009      	b.n	800d34e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d33a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d340:	e005      	b.n	800d34e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d342:	2300      	movs	r3, #0
 800d344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d34c:	bf00      	nop
    }

    if (pclk != 0U)
 800d34e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d350:	2b00      	cmp	r3, #0
 800d352:	d021      	beq.n	800d398 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d358:	4a1d      	ldr	r2, [pc, #116]	@ (800d3d0 <UART_SetConfig+0xacc>)
 800d35a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d35e:	461a      	mov	r2, r3
 800d360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d362:	fbb3 f2f2 	udiv	r2, r3, r2
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	085b      	lsrs	r3, r3, #1
 800d36c:	441a      	add	r2, r3
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	fbb2 f3f3 	udiv	r3, r2, r3
 800d376:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37a:	2b0f      	cmp	r3, #15
 800d37c:	d909      	bls.n	800d392 <UART_SetConfig+0xa8e>
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d384:	d205      	bcs.n	800d392 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d388:	b29a      	uxth	r2, r3
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	60da      	str	r2, [r3, #12]
 800d390:	e002      	b.n	800d398 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d3b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3748      	adds	r7, #72	@ 0x48
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3c2:	bf00      	nop
 800d3c4:	58024400 	.word	0x58024400
 800d3c8:	03d09000 	.word	0x03d09000
 800d3cc:	003d0900 	.word	0x003d0900
 800d3d0:	08023530 	.word	0x08023530

0800d3d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e0:	f003 0308 	and.w	r3, r3, #8
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00a      	beq.n	800d3fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	430a      	orrs	r2, r1
 800d3fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d402:	f003 0301 	and.w	r3, r3, #1
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00a      	beq.n	800d420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	430a      	orrs	r2, r1
 800d41e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d424:	f003 0302 	and.w	r3, r3, #2
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00a      	beq.n	800d442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	430a      	orrs	r2, r1
 800d440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d446:	f003 0304 	and.w	r3, r3, #4
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00a      	beq.n	800d464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	430a      	orrs	r2, r1
 800d462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d468:	f003 0310 	and.w	r3, r3, #16
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00a      	beq.n	800d486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	430a      	orrs	r2, r1
 800d484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d48a:	f003 0320 	and.w	r3, r3, #32
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00a      	beq.n	800d4a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	430a      	orrs	r2, r1
 800d4a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d01a      	beq.n	800d4ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	430a      	orrs	r2, r1
 800d4c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4d2:	d10a      	bne.n	800d4ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00a      	beq.n	800d50c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	430a      	orrs	r2, r1
 800d50a:	605a      	str	r2, [r3, #4]
  }
}
 800d50c:	bf00      	nop
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b098      	sub	sp, #96	@ 0x60
 800d51c:	af02      	add	r7, sp, #8
 800d51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d528:	f7f6 f804 	bl	8003534 <HAL_GetTick>
 800d52c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f003 0308 	and.w	r3, r3, #8
 800d538:	2b08      	cmp	r3, #8
 800d53a:	d12f      	bne.n	800d59c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d53c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d544:	2200      	movs	r2, #0
 800d546:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 f88e 	bl	800d66c <UART_WaitOnFlagUntilTimeout>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d022      	beq.n	800d59c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55e:	e853 3f00 	ldrex	r3, [r3]
 800d562:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d56a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	461a      	mov	r2, r3
 800d572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d574:	647b      	str	r3, [r7, #68]	@ 0x44
 800d576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d57a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d57c:	e841 2300 	strex	r3, r2, [r1]
 800d580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1e6      	bne.n	800d556 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2220      	movs	r2, #32
 800d58c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e063      	b.n	800d664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 0304 	and.w	r3, r3, #4
 800d5a6:	2b04      	cmp	r3, #4
 800d5a8:	d149      	bne.n	800d63e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f857 	bl	800d66c <UART_WaitOnFlagUntilTimeout>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d03c      	beq.n	800d63e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5cc:	e853 3f00 	ldrex	r3, [r3]
 800d5d0:	623b      	str	r3, [r7, #32]
   return(result);
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5ea:	e841 2300 	strex	r3, r2, [r1]
 800d5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1e6      	bne.n	800d5c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3308      	adds	r3, #8
 800d5fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	e853 3f00 	ldrex	r3, [r3]
 800d604:	60fb      	str	r3, [r7, #12]
   return(result);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f023 0301 	bic.w	r3, r3, #1
 800d60c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3308      	adds	r3, #8
 800d614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d616:	61fa      	str	r2, [r7, #28]
 800d618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61a:	69b9      	ldr	r1, [r7, #24]
 800d61c:	69fa      	ldr	r2, [r7, #28]
 800d61e:	e841 2300 	strex	r3, r2, [r1]
 800d622:	617b      	str	r3, [r7, #20]
   return(result);
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1e5      	bne.n	800d5f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2220      	movs	r2, #32
 800d62e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d63a:	2303      	movs	r3, #3
 800d63c:	e012      	b.n	800d664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2220      	movs	r2, #32
 800d642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2220      	movs	r2, #32
 800d64a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3758      	adds	r7, #88	@ 0x58
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	603b      	str	r3, [r7, #0]
 800d678:	4613      	mov	r3, r2
 800d67a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d67c:	e04f      	b.n	800d71e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d684:	d04b      	beq.n	800d71e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d686:	f7f5 ff55 	bl	8003534 <HAL_GetTick>
 800d68a:	4602      	mov	r2, r0
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	1ad3      	subs	r3, r2, r3
 800d690:	69ba      	ldr	r2, [r7, #24]
 800d692:	429a      	cmp	r2, r3
 800d694:	d302      	bcc.n	800d69c <UART_WaitOnFlagUntilTimeout+0x30>
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d69c:	2303      	movs	r3, #3
 800d69e:	e04e      	b.n	800d73e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f003 0304 	and.w	r3, r3, #4
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d037      	beq.n	800d71e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	2b80      	cmp	r3, #128	@ 0x80
 800d6b2:	d034      	beq.n	800d71e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b40      	cmp	r3, #64	@ 0x40
 800d6b8:	d031      	beq.n	800d71e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	69db      	ldr	r3, [r3, #28]
 800d6c0:	f003 0308 	and.w	r3, r3, #8
 800d6c4:	2b08      	cmp	r3, #8
 800d6c6:	d110      	bne.n	800d6ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2208      	movs	r2, #8
 800d6ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f000 f921 	bl	800d918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2208      	movs	r2, #8
 800d6da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e029      	b.n	800d73e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	69db      	ldr	r3, [r3, #28]
 800d6f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6f8:	d111      	bne.n	800d71e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f000 f907 	bl	800d918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2220      	movs	r2, #32
 800d70e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2200      	movs	r2, #0
 800d716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d71a:	2303      	movs	r3, #3
 800d71c:	e00f      	b.n	800d73e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	69da      	ldr	r2, [r3, #28]
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	4013      	ands	r3, r2
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	bf0c      	ite	eq
 800d72e:	2301      	moveq	r3, #1
 800d730:	2300      	movne	r3, #0
 800d732:	b2db      	uxtb	r3, r3
 800d734:	461a      	mov	r2, r3
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d0a0      	beq.n	800d67e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
	...

0800d748 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b096      	sub	sp, #88	@ 0x58
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4613      	mov	r3, r2
 800d754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	88fa      	ldrh	r2, [r7, #6]
 800d760:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2200      	movs	r2, #0
 800d768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2222      	movs	r2, #34	@ 0x22
 800d770:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d02d      	beq.n	800d7da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d784:	4a40      	ldr	r2, [pc, #256]	@ (800d888 <UART_Start_Receive_DMA+0x140>)
 800d786:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d78e:	4a3f      	ldr	r2, [pc, #252]	@ (800d88c <UART_Start_Receive_DMA+0x144>)
 800d790:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d798:	4a3d      	ldr	r2, [pc, #244]	@ (800d890 <UART_Start_Receive_DMA+0x148>)
 800d79a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3324      	adds	r3, #36	@ 0x24
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	88fb      	ldrh	r3, [r7, #6]
 800d7bc:	f7f7 fe04 	bl	80053c8 <HAL_DMA_Start_IT>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d009      	beq.n	800d7da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2210      	movs	r2, #16
 800d7ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2220      	movs	r2, #32
 800d7d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e051      	b.n	800d87e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d018      	beq.n	800d814 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ea:	e853 3f00 	ldrex	r3, [r3]
 800d7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d800:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d802:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d804:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d808:	e841 2300 	strex	r3, r2, [r1]
 800d80c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d80e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1e6      	bne.n	800d7e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3308      	adds	r3, #8
 800d81a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81e:	e853 3f00 	ldrex	r3, [r3]
 800d822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d826:	f043 0301 	orr.w	r3, r3, #1
 800d82a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3308      	adds	r3, #8
 800d832:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d834:	637a      	str	r2, [r7, #52]	@ 0x34
 800d836:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d838:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d83a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d83c:	e841 2300 	strex	r3, r2, [r1]
 800d840:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e5      	bne.n	800d814 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	3308      	adds	r3, #8
 800d84e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	e853 3f00 	ldrex	r3, [r3]
 800d856:	613b      	str	r3, [r7, #16]
   return(result);
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d85e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3308      	adds	r3, #8
 800d866:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d868:	623a      	str	r2, [r7, #32]
 800d86a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86c:	69f9      	ldr	r1, [r7, #28]
 800d86e:	6a3a      	ldr	r2, [r7, #32]
 800d870:	e841 2300 	strex	r3, r2, [r1]
 800d874:	61bb      	str	r3, [r7, #24]
   return(result);
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1e5      	bne.n	800d848 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d87c:	2300      	movs	r3, #0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3758      	adds	r7, #88	@ 0x58
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	0800da97 	.word	0x0800da97
 800d88c:	0800dbbf 	.word	0x0800dbbf
 800d890:	0800dbfd 	.word	0x0800dbfd

0800d894 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d894:	b480      	push	{r7}
 800d896:	b08f      	sub	sp, #60	@ 0x3c
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	e853 3f00 	ldrex	r3, [r3]
 800d8a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d8b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1e6      	bne.n	800d89c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d8e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8ee:	61ba      	str	r2, [r7, #24]
 800d8f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f2:	6979      	ldr	r1, [r7, #20]
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	e841 2300 	strex	r3, r2, [r1]
 800d8fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1e5      	bne.n	800d8ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2220      	movs	r2, #32
 800d906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d90a:	bf00      	nop
 800d90c:	373c      	adds	r7, #60	@ 0x3c
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
	...

0800d918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d918:	b480      	push	{r7}
 800d91a:	b095      	sub	sp, #84	@ 0x54
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d928:	e853 3f00 	ldrex	r3, [r3]
 800d92c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	461a      	mov	r2, r3
 800d93c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d93e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d940:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d942:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d944:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d946:	e841 2300 	strex	r3, r2, [r1]
 800d94a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1e6      	bne.n	800d920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	3308      	adds	r3, #8
 800d958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	e853 3f00 	ldrex	r3, [r3]
 800d960:	61fb      	str	r3, [r7, #28]
   return(result);
 800d962:	69fa      	ldr	r2, [r7, #28]
 800d964:	4b1e      	ldr	r3, [pc, #120]	@ (800d9e0 <UART_EndRxTransfer+0xc8>)
 800d966:	4013      	ands	r3, r2
 800d968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	3308      	adds	r3, #8
 800d970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d974:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d97a:	e841 2300 	strex	r3, r2, [r1]
 800d97e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e5      	bne.n	800d952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d118      	bne.n	800d9c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	e853 3f00 	ldrex	r3, [r3]
 800d99a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	f023 0310 	bic.w	r3, r3, #16
 800d9a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9ac:	61bb      	str	r3, [r7, #24]
 800d9ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b0:	6979      	ldr	r1, [r7, #20]
 800d9b2:	69ba      	ldr	r2, [r7, #24]
 800d9b4:	e841 2300 	strex	r3, r2, [r1]
 800d9b8:	613b      	str	r3, [r7, #16]
   return(result);
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d1e6      	bne.n	800d98e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2220      	movs	r2, #32
 800d9c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d9d4:	bf00      	nop
 800d9d6:	3754      	adds	r7, #84	@ 0x54
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	effffffe 	.word	0xeffffffe

0800d9e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b090      	sub	sp, #64	@ 0x40
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9fa:	d037      	beq.n	800da6c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9fe:	2200      	movs	r2, #0
 800da00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3308      	adds	r3, #8
 800da0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0e:	e853 3f00 	ldrex	r3, [r3]
 800da12:	623b      	str	r3, [r7, #32]
   return(result);
 800da14:	6a3b      	ldr	r3, [r7, #32]
 800da16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	3308      	adds	r3, #8
 800da22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da24:	633a      	str	r2, [r7, #48]	@ 0x30
 800da26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da2c:	e841 2300 	strex	r3, r2, [r1]
 800da30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1e5      	bne.n	800da04 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	e853 3f00 	ldrex	r3, [r3]
 800da44:	60fb      	str	r3, [r7, #12]
   return(result);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800da4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	461a      	mov	r2, r3
 800da54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da56:	61fb      	str	r3, [r7, #28]
 800da58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da5a:	69b9      	ldr	r1, [r7, #24]
 800da5c:	69fa      	ldr	r2, [r7, #28]
 800da5e:	e841 2300 	strex	r3, r2, [r1]
 800da62:	617b      	str	r3, [r7, #20]
   return(result);
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1e6      	bne.n	800da38 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da6a:	e002      	b.n	800da72 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800da6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800da6e:	f7fe ff15 	bl	800c89c <HAL_UART_TxCpltCallback>
}
 800da72:	bf00      	nop
 800da74:	3740      	adds	r7, #64	@ 0x40
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b084      	sub	sp, #16
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	f7fe ff11 	bl	800c8b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da8e:	bf00      	nop
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b09c      	sub	sp, #112	@ 0x70
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800daac:	d071      	beq.n	800db92 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800daae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dab0:	2200      	movs	r2, #0
 800dab2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dabc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dabe:	e853 3f00 	ldrex	r3, [r3]
 800dac2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dac6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800daca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dacc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	461a      	mov	r2, r3
 800dad2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dad4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dad6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dada:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dadc:	e841 2300 	strex	r3, r2, [r1]
 800dae0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1e6      	bne.n	800dab6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	3308      	adds	r3, #8
 800daee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf2:	e853 3f00 	ldrex	r3, [r3]
 800daf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800daf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dafa:	f023 0301 	bic.w	r3, r3, #1
 800dafe:	667b      	str	r3, [r7, #100]	@ 0x64
 800db00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3308      	adds	r3, #8
 800db06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800db08:	647a      	str	r2, [r7, #68]	@ 0x44
 800db0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db10:	e841 2300 	strex	r3, r2, [r1]
 800db14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d1e5      	bne.n	800dae8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3308      	adds	r3, #8
 800db22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db26:	e853 3f00 	ldrex	r3, [r3]
 800db2a:	623b      	str	r3, [r7, #32]
   return(result);
 800db2c:	6a3b      	ldr	r3, [r7, #32]
 800db2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db32:	663b      	str	r3, [r7, #96]	@ 0x60
 800db34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3308      	adds	r3, #8
 800db3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800db3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db44:	e841 2300 	strex	r3, r2, [r1]
 800db48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1e5      	bne.n	800db1c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800db50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db52:	2220      	movs	r2, #32
 800db54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d118      	bne.n	800db92 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	e853 3f00 	ldrex	r3, [r3]
 800db6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f023 0310 	bic.w	r3, r3, #16
 800db74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	461a      	mov	r2, r3
 800db7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db7e:	61fb      	str	r3, [r7, #28]
 800db80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db82:	69b9      	ldr	r1, [r7, #24]
 800db84:	69fa      	ldr	r2, [r7, #28]
 800db86:	e841 2300 	strex	r3, r2, [r1]
 800db8a:	617b      	str	r3, [r7, #20]
   return(result);
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1e6      	bne.n	800db60 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db94:	2200      	movs	r2, #0
 800db96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d107      	bne.n	800dbb0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dba2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dba6:	4619      	mov	r1, r3
 800dba8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dbaa:	f7fe fe9f 	bl	800c8ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbae:	e002      	b.n	800dbb6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dbb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800dbb2:	f7f3 fded 	bl	8001790 <HAL_UART_RxCpltCallback>
}
 800dbb6:	bf00      	nop
 800dbb8:	3770      	adds	r7, #112	@ 0x70
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d109      	bne.n	800dbee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dbe0:	085b      	lsrs	r3, r3, #1
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f7fe fe80 	bl	800c8ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbec:	e002      	b.n	800dbf4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7fe fe68 	bl	800c8c4 <HAL_UART_RxHalfCpltCallback>
}
 800dbf4:	bf00      	nop
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc24:	2b80      	cmp	r3, #128	@ 0x80
 800dc26:	d109      	bne.n	800dc3c <UART_DMAError+0x40>
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	2b21      	cmp	r3, #33	@ 0x21
 800dc2c:	d106      	bne.n	800dc3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800dc36:	6978      	ldr	r0, [r7, #20]
 800dc38:	f7ff fe2c 	bl	800d894 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc46:	2b40      	cmp	r3, #64	@ 0x40
 800dc48:	d109      	bne.n	800dc5e <UART_DMAError+0x62>
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2b22      	cmp	r3, #34	@ 0x22
 800dc4e:	d106      	bne.n	800dc5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dc58:	6978      	ldr	r0, [r7, #20]
 800dc5a:	f7ff fe5d 	bl	800d918 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc64:	f043 0210 	orr.w	r2, r3, #16
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc6e:	6978      	ldr	r0, [r7, #20]
 800dc70:	f7fe fe32 	bl	800c8d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc74:	bf00      	nop
 800dc76:	3718      	adds	r7, #24
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f7fe fe1c 	bl	800c8d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dca0:	bf00      	nop
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	e853 3f00 	ldrex	r3, [r3]
 800dcbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcc4:	61fb      	str	r3, [r7, #28]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	461a      	mov	r2, r3
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	61bb      	str	r3, [r7, #24]
 800dcd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd2:	6979      	ldr	r1, [r7, #20]
 800dcd4:	69ba      	ldr	r2, [r7, #24]
 800dcd6:	e841 2300 	strex	r3, r2, [r1]
 800dcda:	613b      	str	r3, [r7, #16]
   return(result);
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1e6      	bne.n	800dcb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2220      	movs	r2, #32
 800dce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7fe fdd3 	bl	800c89c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcf6:	bf00      	nop
 800dcf8:	3720      	adds	r7, #32
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dcfe:	b480      	push	{r7}
 800dd00:	b083      	sub	sp, #12
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dd06:	bf00      	nop
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dd12:	b480      	push	{r7}
 800dd14:	b083      	sub	sp, #12
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dd1a:	bf00      	nop
 800dd1c:	370c      	adds	r7, #12
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr

0800dd26 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b083      	sub	sp, #12
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dd2e:	bf00      	nop
 800dd30:	370c      	adds	r7, #12
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b085      	sub	sp, #20
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d101      	bne.n	800dd50 <HAL_UARTEx_DisableFifoMode+0x16>
 800dd4c:	2302      	movs	r3, #2
 800dd4e:	e027      	b.n	800dda0 <HAL_UARTEx_DisableFifoMode+0x66>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2224      	movs	r2, #36	@ 0x24
 800dd5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f022 0201 	bic.w	r2, r2, #1
 800dd76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dd7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2220      	movs	r2, #32
 800dd92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3714      	adds	r7, #20
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d101      	bne.n	800ddc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e02d      	b.n	800de20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2224      	movs	r2, #36	@ 0x24
 800ddd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f022 0201 	bic.w	r2, r2, #1
 800ddea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	430a      	orrs	r2, r1
 800ddfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 f84f 	bl	800dea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68fa      	ldr	r2, [r7, #12]
 800de0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2220      	movs	r2, #32
 800de12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de1e:	2300      	movs	r3, #0
}
 800de20:	4618      	mov	r0, r3
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d101      	bne.n	800de40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de3c:	2302      	movs	r3, #2
 800de3e:	e02d      	b.n	800de9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2224      	movs	r2, #36	@ 0x24
 800de4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f022 0201 	bic.w	r2, r2, #1
 800de66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	430a      	orrs	r2, r1
 800de7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 f811 	bl	800dea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2220      	movs	r2, #32
 800de8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de9a:	2300      	movs	r3, #0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d108      	bne.n	800dec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dec4:	e031      	b.n	800df2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dec6:	2310      	movs	r3, #16
 800dec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800deca:	2310      	movs	r3, #16
 800decc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	0e5b      	lsrs	r3, r3, #25
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	f003 0307 	and.w	r3, r3, #7
 800dedc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	0f5b      	lsrs	r3, r3, #29
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 0307 	and.w	r3, r3, #7
 800deec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800deee:	7bbb      	ldrb	r3, [r7, #14]
 800def0:	7b3a      	ldrb	r2, [r7, #12]
 800def2:	4911      	ldr	r1, [pc, #68]	@ (800df38 <UARTEx_SetNbDataToProcess+0x94>)
 800def4:	5c8a      	ldrb	r2, [r1, r2]
 800def6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800defa:	7b3a      	ldrb	r2, [r7, #12]
 800defc:	490f      	ldr	r1, [pc, #60]	@ (800df3c <UARTEx_SetNbDataToProcess+0x98>)
 800defe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df00:	fb93 f3f2 	sdiv	r3, r3, r2
 800df04:	b29a      	uxth	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
 800df0e:	7b7a      	ldrb	r2, [r7, #13]
 800df10:	4909      	ldr	r1, [pc, #36]	@ (800df38 <UARTEx_SetNbDataToProcess+0x94>)
 800df12:	5c8a      	ldrb	r2, [r1, r2]
 800df14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df18:	7b7a      	ldrb	r2, [r7, #13]
 800df1a:	4908      	ldr	r1, [pc, #32]	@ (800df3c <UARTEx_SetNbDataToProcess+0x98>)
 800df1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800df22:	b29a      	uxth	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	08023548 	.word	0x08023548
 800df3c:	08023550 	.word	0x08023550

0800df40 <__NVIC_SetPriority>:
{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	4603      	mov	r3, r0
 800df48:	6039      	str	r1, [r7, #0]
 800df4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800df4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df50:	2b00      	cmp	r3, #0
 800df52:	db0a      	blt.n	800df6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	b2da      	uxtb	r2, r3
 800df58:	490c      	ldr	r1, [pc, #48]	@ (800df8c <__NVIC_SetPriority+0x4c>)
 800df5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df5e:	0112      	lsls	r2, r2, #4
 800df60:	b2d2      	uxtb	r2, r2
 800df62:	440b      	add	r3, r1
 800df64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800df68:	e00a      	b.n	800df80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	4908      	ldr	r1, [pc, #32]	@ (800df90 <__NVIC_SetPriority+0x50>)
 800df70:	88fb      	ldrh	r3, [r7, #6]
 800df72:	f003 030f 	and.w	r3, r3, #15
 800df76:	3b04      	subs	r3, #4
 800df78:	0112      	lsls	r2, r2, #4
 800df7a:	b2d2      	uxtb	r2, r2
 800df7c:	440b      	add	r3, r1
 800df7e:	761a      	strb	r2, [r3, #24]
}
 800df80:	bf00      	nop
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	e000e100 	.word	0xe000e100
 800df90:	e000ed00 	.word	0xe000ed00

0800df94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800df94:	b580      	push	{r7, lr}
 800df96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800df98:	4b05      	ldr	r3, [pc, #20]	@ (800dfb0 <SysTick_Handler+0x1c>)
 800df9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800df9c:	f002 f9c0 	bl	8010320 <xTaskGetSchedulerState>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d001      	beq.n	800dfaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dfa6:	f003 fabf 	bl	8011528 <xPortSysTickHandler>
  }
}
 800dfaa:	bf00      	nop
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	e000e010 	.word	0xe000e010

0800dfb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dfb8:	2100      	movs	r1, #0
 800dfba:	f06f 0004 	mvn.w	r0, #4
 800dfbe:	f7ff ffbf 	bl	800df40 <__NVIC_SetPriority>
#endif
}
 800dfc2:	bf00      	nop
 800dfc4:	bd80      	pop	{r7, pc}
	...

0800dfc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfce:	f3ef 8305 	mrs	r3, IPSR
 800dfd2:	603b      	str	r3, [r7, #0]
  return(result);
 800dfd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d003      	beq.n	800dfe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dfda:	f06f 0305 	mvn.w	r3, #5
 800dfde:	607b      	str	r3, [r7, #4]
 800dfe0:	e00c      	b.n	800dffc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dfe2:	4b0a      	ldr	r3, [pc, #40]	@ (800e00c <osKernelInitialize+0x44>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d105      	bne.n	800dff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dfea:	4b08      	ldr	r3, [pc, #32]	@ (800e00c <osKernelInitialize+0x44>)
 800dfec:	2201      	movs	r2, #1
 800dfee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dff0:	2300      	movs	r3, #0
 800dff2:	607b      	str	r3, [r7, #4]
 800dff4:	e002      	b.n	800dffc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dffc:	687b      	ldr	r3, [r7, #4]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	370c      	adds	r7, #12
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	24032d54 	.word	0x24032d54

0800e010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e016:	f3ef 8305 	mrs	r3, IPSR
 800e01a:	603b      	str	r3, [r7, #0]
  return(result);
 800e01c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e022:	f06f 0305 	mvn.w	r3, #5
 800e026:	607b      	str	r3, [r7, #4]
 800e028:	e010      	b.n	800e04c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e02a:	4b0b      	ldr	r3, [pc, #44]	@ (800e058 <osKernelStart+0x48>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d109      	bne.n	800e046 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e032:	f7ff ffbf 	bl	800dfb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e036:	4b08      	ldr	r3, [pc, #32]	@ (800e058 <osKernelStart+0x48>)
 800e038:	2202      	movs	r2, #2
 800e03a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e03c:	f001 fcc2 	bl	800f9c4 <vTaskStartScheduler>
      stat = osOK;
 800e040:	2300      	movs	r3, #0
 800e042:	607b      	str	r3, [r7, #4]
 800e044:	e002      	b.n	800e04c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e04a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e04c:	687b      	ldr	r3, [r7, #4]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	24032d54 	.word	0x24032d54

0800e05c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e062:	f3ef 8305 	mrs	r3, IPSR
 800e066:	603b      	str	r3, [r7, #0]
  return(result);
 800e068:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d003      	beq.n	800e076 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e06e:	f001 fdd5 	bl	800fc1c <xTaskGetTickCountFromISR>
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	e002      	b.n	800e07c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e076:	f001 fdc1 	bl	800fbfc <xTaskGetTickCount>
 800e07a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e07c:	687b      	ldr	r3, [r7, #4]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e086:	b580      	push	{r7, lr}
 800e088:	b08e      	sub	sp, #56	@ 0x38
 800e08a:	af04      	add	r7, sp, #16
 800e08c:	60f8      	str	r0, [r7, #12]
 800e08e:	60b9      	str	r1, [r7, #8]
 800e090:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e092:	2300      	movs	r3, #0
 800e094:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e096:	f3ef 8305 	mrs	r3, IPSR
 800e09a:	617b      	str	r3, [r7, #20]
  return(result);
 800e09c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d17e      	bne.n	800e1a0 <osThreadNew+0x11a>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d07b      	beq.n	800e1a0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e0a8:	2380      	movs	r3, #128	@ 0x80
 800e0aa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e0ac:	2318      	movs	r3, #24
 800e0ae:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e0b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d045      	beq.n	800e14c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <osThreadNew+0x48>
        name = attr->name;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	699b      	ldr	r3, [r3, #24]
 800e0da:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d008      	beq.n	800e0f4 <osThreadNew+0x6e>
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	2b38      	cmp	r3, #56	@ 0x38
 800e0e6:	d805      	bhi.n	800e0f4 <osThreadNew+0x6e>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <osThreadNew+0x72>
        return (NULL);
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e054      	b.n	800e1a2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	695b      	ldr	r3, [r3, #20]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d003      	beq.n	800e108 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	089b      	lsrs	r3, r3, #2
 800e106:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00e      	beq.n	800e12e <osThreadNew+0xa8>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	2ba7      	cmp	r3, #167	@ 0xa7
 800e116:	d90a      	bls.n	800e12e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d006      	beq.n	800e12e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	695b      	ldr	r3, [r3, #20]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <osThreadNew+0xa8>
        mem = 1;
 800e128:	2301      	movs	r3, #1
 800e12a:	61bb      	str	r3, [r7, #24]
 800e12c:	e010      	b.n	800e150 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	689b      	ldr	r3, [r3, #8]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10c      	bne.n	800e150 <osThreadNew+0xca>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d108      	bne.n	800e150 <osThreadNew+0xca>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	691b      	ldr	r3, [r3, #16]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d104      	bne.n	800e150 <osThreadNew+0xca>
          mem = 0;
 800e146:	2300      	movs	r3, #0
 800e148:	61bb      	str	r3, [r7, #24]
 800e14a:	e001      	b.n	800e150 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e14c:	2300      	movs	r3, #0
 800e14e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	2b01      	cmp	r3, #1
 800e154:	d110      	bne.n	800e178 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e15e:	9202      	str	r2, [sp, #8]
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	9300      	str	r3, [sp, #0]
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	6a3a      	ldr	r2, [r7, #32]
 800e16a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f001 fa35 	bl	800f5dc <xTaskCreateStatic>
 800e172:	4603      	mov	r3, r0
 800e174:	613b      	str	r3, [r7, #16]
 800e176:	e013      	b.n	800e1a0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d110      	bne.n	800e1a0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	b29a      	uxth	r2, r3
 800e182:	f107 0310 	add.w	r3, r7, #16
 800e186:	9301      	str	r3, [sp, #4]
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f001 fa83 	bl	800f69c <xTaskCreate>
 800e196:	4603      	mov	r3, r0
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d001      	beq.n	800e1a0 <osThreadNew+0x11a>
            hTask = NULL;
 800e19c:	2300      	movs	r3, #0
 800e19e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e1a0:	693b      	ldr	r3, [r7, #16]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3728      	adds	r7, #40	@ 0x28
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
	...

0800e1ac <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b088      	sub	sp, #32
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d002      	beq.n	800e1c6 <osThreadFlagsSet+0x1a>
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	da03      	bge.n	800e1ce <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800e1c6:	f06f 0303 	mvn.w	r3, #3
 800e1ca:	60fb      	str	r3, [r7, #12]
 800e1cc:	e035      	b.n	800e23a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800e1ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1d4:	f3ef 8305 	mrs	r3, IPSR
 800e1d8:	613b      	str	r3, [r7, #16]
  return(result);
 800e1da:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d01f      	beq.n	800e220 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800e1e4:	f107 0308 	add.w	r3, r7, #8
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6978      	ldr	r0, [r7, #20]
 800e1f2:	f002 fb45 	bl	8010880 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800e1f6:	f107 030c 	add.w	r3, r7, #12
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	9200      	str	r2, [sp, #0]
 800e1fe:	2200      	movs	r2, #0
 800e200:	2100      	movs	r1, #0
 800e202:	6978      	ldr	r0, [r7, #20]
 800e204:	f002 fb3c 	bl	8010880 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d015      	beq.n	800e23a <osThreadFlagsSet+0x8e>
 800e20e:	4b0d      	ldr	r3, [pc, #52]	@ (800e244 <osThreadFlagsSet+0x98>)
 800e210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e214:	601a      	str	r2, [r3, #0]
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	e00c      	b.n	800e23a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800e220:	2300      	movs	r3, #0
 800e222:	2201      	movs	r2, #1
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	6978      	ldr	r0, [r7, #20]
 800e228:	f002 fa68 	bl	80106fc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800e22c:	f107 030c 	add.w	r3, r7, #12
 800e230:	2200      	movs	r2, #0
 800e232:	2100      	movs	r1, #0
 800e234:	6978      	ldr	r0, [r7, #20]
 800e236:	f002 fa61 	bl	80106fc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800e23a:	68fb      	ldr	r3, [r7, #12]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3718      	adds	r7, #24
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	e000ed04 	.word	0xe000ed04

0800e248 <osThreadFlagsGet>:

  /* Return flags before clearing */
  return (rflags);
}

uint32_t osThreadFlagsGet (void) {
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e24e:	f3ef 8305 	mrs	r3, IPSR
 800e252:	60bb      	str	r3, [r7, #8]
  return(result);
 800e254:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 800e256:	2b00      	cmp	r3, #0
 800e258:	d003      	beq.n	800e262 <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 800e25a:	f06f 0305 	mvn.w	r3, #5
 800e25e:	607b      	str	r3, [r7, #4]
 800e260:	e00e      	b.n	800e280 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800e262:	f002 f84d 	bl	8010300 <xTaskGetCurrentTaskHandle>
 800e266:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 800e268:	1d3b      	adds	r3, r7, #4
 800e26a:	2200      	movs	r2, #0
 800e26c:	2100      	movs	r1, #0
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f002 fa44 	bl	80106fc <xTaskGenericNotify>
 800e274:	4603      	mov	r3, r0
 800e276:	2b01      	cmp	r3, #1
 800e278:	d002      	beq.n	800e280 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 800e27a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e27e:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 800e280:	687b      	ldr	r3, [r7, #4]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b08c      	sub	sp, #48	@ 0x30
 800e28e:	af00      	add	r7, sp, #0
 800e290:	60f8      	str	r0, [r7, #12]
 800e292:	60b9      	str	r1, [r7, #8]
 800e294:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e296:	f3ef 8305 	mrs	r3, IPSR
 800e29a:	617b      	str	r3, [r7, #20]
  return(result);
 800e29c:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800e2a2:	f06f 0305 	mvn.w	r3, #5
 800e2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2a8:	e06b      	b.n	800e382 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	da03      	bge.n	800e2b8 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800e2b0:	f06f 0303 	mvn.w	r3, #3
 800e2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2b6:	e064      	b.n	800e382 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	f003 0302 	and.w	r3, r3, #2
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d002      	beq.n	800e2c8 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2c6:	e001      	b.n	800e2cc <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800e2d4:	f001 fc92 	bl	800fbfc <xTaskGetTickCount>
 800e2d8:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800e2da:	f107 0210 	add.w	r2, r7, #16
 800e2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	f002 f9aa 	bl	801063c <xTaskNotifyWait>
 800e2e8:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d137      	bne.n	800e360 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800e2f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	4013      	ands	r3, r2
 800e2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	f003 0301 	and.w	r3, r3, #1
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00c      	beq.n	800e324 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30e:	4013      	ands	r3, r2
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	429a      	cmp	r2, r3
 800e314:	d032      	beq.n	800e37c <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d10f      	bne.n	800e33c <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e31c:	f06f 0302 	mvn.w	r3, #2
 800e320:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e322:	e02e      	b.n	800e382 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e328:	4013      	ands	r3, r2
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d128      	bne.n	800e380 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d103      	bne.n	800e33c <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800e334:	f06f 0302 	mvn.w	r3, #2
 800e338:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800e33a:	e022      	b.n	800e382 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800e33c:	f001 fc5e 	bl	800fbfc <xTaskGetTickCount>
 800e340:	4602      	mov	r2, r0
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800e348:	69ba      	ldr	r2, [r7, #24]
 800e34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d902      	bls.n	800e356 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	627b      	str	r3, [r7, #36]	@ 0x24
 800e354:	e00e      	b.n	800e374 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800e356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	1ad3      	subs	r3, r2, r3
 800e35c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e35e:	e009      	b.n	800e374 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d103      	bne.n	800e36e <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800e366:	f06f 0302 	mvn.w	r3, #2
 800e36a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e36c:	e002      	b.n	800e374 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800e36e:	f06f 0301 	mvn.w	r3, #1
 800e372:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1af      	bne.n	800e2da <osThreadFlagsWait+0x50>
 800e37a:	e002      	b.n	800e382 <osThreadFlagsWait+0xf8>
            break;
 800e37c:	bf00      	nop
 800e37e:	e000      	b.n	800e382 <osThreadFlagsWait+0xf8>
            break;
 800e380:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800e382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e384:	4618      	mov	r0, r3
 800e386:	3730      	adds	r7, #48	@ 0x30
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e394:	f3ef 8305 	mrs	r3, IPSR
 800e398:	60bb      	str	r3, [r7, #8]
  return(result);
 800e39a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d003      	beq.n	800e3a8 <osDelay+0x1c>
    stat = osErrorISR;
 800e3a0:	f06f 0305 	mvn.w	r3, #5
 800e3a4:	60fb      	str	r3, [r7, #12]
 800e3a6:	e007      	b.n	800e3b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d002      	beq.n	800e3b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f001 fad0 	bl	800f958 <vTaskDelay>
    }
  }

  return (stat);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}

0800e3c2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	b088      	sub	sp, #32
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3ce:	f3ef 8305 	mrs	r3, IPSR
 800e3d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e3d4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d174      	bne.n	800e4c4 <osMutexNew+0x102>
    if (attr != NULL) {
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d003      	beq.n	800e3e8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	61bb      	str	r3, [r7, #24]
 800e3e6:	e001      	b.n	800e3ec <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <osMutexNew+0x3a>
      rmtx = 1U;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	617b      	str	r3, [r7, #20]
 800e3fa:	e001      	b.n	800e400 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	f003 0308 	and.w	r3, r3, #8
 800e406:	2b00      	cmp	r3, #0
 800e408:	d15c      	bne.n	800e4c4 <osMutexNew+0x102>
      mem = -1;
 800e40a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e40e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d015      	beq.n	800e442 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d006      	beq.n	800e42c <osMutexNew+0x6a>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	2b4f      	cmp	r3, #79	@ 0x4f
 800e424:	d902      	bls.n	800e42c <osMutexNew+0x6a>
          mem = 1;
 800e426:	2301      	movs	r3, #1
 800e428:	613b      	str	r3, [r7, #16]
 800e42a:	e00c      	b.n	800e446 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d108      	bne.n	800e446 <osMutexNew+0x84>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d104      	bne.n	800e446 <osMutexNew+0x84>
            mem = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	613b      	str	r3, [r7, #16]
 800e440:	e001      	b.n	800e446 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d112      	bne.n	800e472 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d007      	beq.n	800e462 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	689b      	ldr	r3, [r3, #8]
 800e456:	4619      	mov	r1, r3
 800e458:	2004      	movs	r0, #4
 800e45a:	f000 fb20 	bl	800ea9e <xQueueCreateMutexStatic>
 800e45e:	61f8      	str	r0, [r7, #28]
 800e460:	e016      	b.n	800e490 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	689b      	ldr	r3, [r3, #8]
 800e466:	4619      	mov	r1, r3
 800e468:	2001      	movs	r0, #1
 800e46a:	f000 fb18 	bl	800ea9e <xQueueCreateMutexStatic>
 800e46e:	61f8      	str	r0, [r7, #28]
 800e470:	e00e      	b.n	800e490 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10b      	bne.n	800e490 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d004      	beq.n	800e488 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e47e:	2004      	movs	r0, #4
 800e480:	f000 faf5 	bl	800ea6e <xQueueCreateMutex>
 800e484:	61f8      	str	r0, [r7, #28]
 800e486:	e003      	b.n	800e490 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e488:	2001      	movs	r0, #1
 800e48a:	f000 faf0 	bl	800ea6e <xQueueCreateMutex>
 800e48e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00c      	beq.n	800e4b0 <osMutexNew+0xee>
        if (attr != NULL) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d003      	beq.n	800e4a4 <osMutexNew+0xe2>
          name = attr->name;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	60fb      	str	r3, [r7, #12]
 800e4a2:	e001      	b.n	800e4a8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e4a8:	68f9      	ldr	r1, [r7, #12]
 800e4aa:	69f8      	ldr	r0, [r7, #28]
 800e4ac:	f001 f838 	bl	800f520 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d006      	beq.n	800e4c4 <osMutexNew+0x102>
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	f043 0301 	orr.w	r3, r3, #1
 800e4c2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e4c4:	69fb      	ldr	r3, [r7, #28]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3720      	adds	r7, #32
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b086      	sub	sp, #24
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f023 0301 	bic.w	r3, r3, #1
 800e4de:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f003 0301 	and.w	r3, r3, #1
 800e4e6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4ec:	f3ef 8305 	mrs	r3, IPSR
 800e4f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4f2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d003      	beq.n	800e500 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e4f8:	f06f 0305 	mvn.w	r3, #5
 800e4fc:	617b      	str	r3, [r7, #20]
 800e4fe:	e02c      	b.n	800e55a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d103      	bne.n	800e50e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e506:	f06f 0303 	mvn.w	r3, #3
 800e50a:	617b      	str	r3, [r7, #20]
 800e50c:	e025      	b.n	800e55a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d011      	beq.n	800e538 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e514:	6839      	ldr	r1, [r7, #0]
 800e516:	6938      	ldr	r0, [r7, #16]
 800e518:	f000 fb11 	bl	800eb3e <xQueueTakeMutexRecursive>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d01b      	beq.n	800e55a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d003      	beq.n	800e530 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e528:	f06f 0301 	mvn.w	r3, #1
 800e52c:	617b      	str	r3, [r7, #20]
 800e52e:	e014      	b.n	800e55a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e530:	f06f 0302 	mvn.w	r3, #2
 800e534:	617b      	str	r3, [r7, #20]
 800e536:	e010      	b.n	800e55a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e538:	6839      	ldr	r1, [r7, #0]
 800e53a:	6938      	ldr	r0, [r7, #16]
 800e53c:	f000 fdb8 	bl	800f0b0 <xQueueSemaphoreTake>
 800e540:	4603      	mov	r3, r0
 800e542:	2b01      	cmp	r3, #1
 800e544:	d009      	beq.n	800e55a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d003      	beq.n	800e554 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e54c:	f06f 0301 	mvn.w	r3, #1
 800e550:	617b      	str	r3, [r7, #20]
 800e552:	e002      	b.n	800e55a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e554:	f06f 0302 	mvn.w	r3, #2
 800e558:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e55a:	697b      	ldr	r3, [r7, #20]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3718      	adds	r7, #24
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f023 0301 	bic.w	r3, r3, #1
 800e572:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f003 0301 	and.w	r3, r3, #1
 800e57a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e580:	f3ef 8305 	mrs	r3, IPSR
 800e584:	60bb      	str	r3, [r7, #8]
  return(result);
 800e586:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d003      	beq.n	800e594 <osMutexRelease+0x30>
    stat = osErrorISR;
 800e58c:	f06f 0305 	mvn.w	r3, #5
 800e590:	617b      	str	r3, [r7, #20]
 800e592:	e01f      	b.n	800e5d4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d103      	bne.n	800e5a2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e59a:	f06f 0303 	mvn.w	r3, #3
 800e59e:	617b      	str	r3, [r7, #20]
 800e5a0:	e018      	b.n	800e5d4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d009      	beq.n	800e5bc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e5a8:	6938      	ldr	r0, [r7, #16]
 800e5aa:	f000 fa93 	bl	800ead4 <xQueueGiveMutexRecursive>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d00f      	beq.n	800e5d4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e5b4:	f06f 0302 	mvn.w	r3, #2
 800e5b8:	617b      	str	r3, [r7, #20]
 800e5ba:	e00b      	b.n	800e5d4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e5bc:	2300      	movs	r3, #0
 800e5be:	2200      	movs	r2, #0
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	6938      	ldr	r0, [r7, #16]
 800e5c4:	f000 faf2 	bl	800ebac <xQueueGenericSend>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	d002      	beq.n	800e5d4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e5ce:	f06f 0302 	mvn.w	r3, #2
 800e5d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e5d4:	697b      	ldr	r3, [r7, #20]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
	...

0800e5e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	4a07      	ldr	r2, [pc, #28]	@ (800e60c <vApplicationGetIdleTaskMemory+0x2c>)
 800e5f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	4a06      	ldr	r2, [pc, #24]	@ (800e610 <vApplicationGetIdleTaskMemory+0x30>)
 800e5f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2280      	movs	r2, #128	@ 0x80
 800e5fc:	601a      	str	r2, [r3, #0]
}
 800e5fe:	bf00      	nop
 800e600:	3714      	adds	r7, #20
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	24032d58 	.word	0x24032d58
 800e610:	24032e00 	.word	0x24032e00

0800e614 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	4a07      	ldr	r2, [pc, #28]	@ (800e640 <vApplicationGetTimerTaskMemory+0x2c>)
 800e624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	4a06      	ldr	r2, [pc, #24]	@ (800e644 <vApplicationGetTimerTaskMemory+0x30>)
 800e62a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e632:	601a      	str	r2, [r3, #0]
}
 800e634:	bf00      	nop
 800e636:	3714      	adds	r7, #20
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr
 800e640:	24033000 	.word	0x24033000
 800e644:	240330a8 	.word	0x240330a8

0800e648 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f103 0208 	add.w	r2, r3, #8
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e660:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f103 0208 	add.w	r2, r3, #8
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f103 0208 	add.w	r2, r3, #8
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e67c:	bf00      	nop
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e696:	bf00      	nop
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6a2:	b480      	push	{r7}
 800e6a4:	b085      	sub	sp, #20
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	68fa      	ldr	r2, [r7, #12]
 800e6b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	689a      	ldr	r2, [r3, #8]
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	601a      	str	r2, [r3, #0]
}
 800e6de:	bf00      	nop
 800e6e0:	3714      	adds	r7, #20
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b085      	sub	sp, #20
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e700:	d103      	bne.n	800e70a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	e00c      	b.n	800e724 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3308      	adds	r3, #8
 800e70e:	60fb      	str	r3, [r7, #12]
 800e710:	e002      	b.n	800e718 <vListInsert+0x2e>
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	60fb      	str	r3, [r7, #12]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	429a      	cmp	r2, r3
 800e722:	d2f6      	bcs.n	800e712 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	683a      	ldr	r2, [r7, #0]
 800e732:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	683a      	ldr	r2, [r7, #0]
 800e73e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	1c5a      	adds	r2, r3, #1
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	601a      	str	r2, [r3, #0]
}
 800e750:	bf00      	nop
 800e752:	3714      	adds	r7, #20
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	691b      	ldr	r3, [r3, #16]
 800e768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	6892      	ldr	r2, [r2, #8]
 800e772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	6852      	ldr	r2, [r2, #4]
 800e77c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	429a      	cmp	r2, r3
 800e786:	d103      	bne.n	800e790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	689a      	ldr	r2, [r3, #8]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	1e5a      	subs	r2, r3, #1
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3714      	adds	r7, #20
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d10b      	bne.n	800e7dc <xQueueGenericReset+0x2c>
	__asm volatile
 800e7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	60bb      	str	r3, [r7, #8]
}
 800e7d6:	bf00      	nop
 800e7d8:	bf00      	nop
 800e7da:	e7fd      	b.n	800e7d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e7dc:	f002 fe14 	bl	8011408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7e8:	68f9      	ldr	r1, [r7, #12]
 800e7ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e7ec:	fb01 f303 	mul.w	r3, r1, r3
 800e7f0:	441a      	add	r2, r3
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e80c:	3b01      	subs	r3, #1
 800e80e:	68f9      	ldr	r1, [r7, #12]
 800e810:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e812:	fb01 f303 	mul.w	r3, r1, r3
 800e816:	441a      	add	r2, r3
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	22ff      	movs	r2, #255	@ 0xff
 800e820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	22ff      	movs	r2, #255	@ 0xff
 800e828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d114      	bne.n	800e85c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	691b      	ldr	r3, [r3, #16]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d01a      	beq.n	800e870 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	3310      	adds	r3, #16
 800e83e:	4618      	mov	r0, r3
 800e840:	f001 fb70 	bl	800ff24 <xTaskRemoveFromEventList>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d012      	beq.n	800e870 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e84a:	4b0d      	ldr	r3, [pc, #52]	@ (800e880 <xQueueGenericReset+0xd0>)
 800e84c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	e009      	b.n	800e870 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3310      	adds	r3, #16
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff fef1 	bl	800e648 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	3324      	adds	r3, #36	@ 0x24
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7ff feec 	bl	800e648 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e870:	f002 fdfc 	bl	801146c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e874:	2301      	movs	r3, #1
}
 800e876:	4618      	mov	r0, r3
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	e000ed04 	.word	0xe000ed04

0800e884 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e884:	b580      	push	{r7, lr}
 800e886:	b08e      	sub	sp, #56	@ 0x38
 800e888:	af02      	add	r7, sp, #8
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
 800e890:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d10b      	bne.n	800e8b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e8aa:	bf00      	nop
 800e8ac:	bf00      	nop
 800e8ae:	e7fd      	b.n	800e8ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10b      	bne.n	800e8ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e8c8:	bf00      	nop
 800e8ca:	bf00      	nop
 800e8cc:	e7fd      	b.n	800e8ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <xQueueGenericCreateStatic+0x56>
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d001      	beq.n	800e8de <xQueueGenericCreateStatic+0x5a>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e000      	b.n	800e8e0 <xQueueGenericCreateStatic+0x5c>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10b      	bne.n	800e8fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	623b      	str	r3, [r7, #32]
}
 800e8f6:	bf00      	nop
 800e8f8:	bf00      	nop
 800e8fa:	e7fd      	b.n	800e8f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d102      	bne.n	800e908 <xQueueGenericCreateStatic+0x84>
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d101      	bne.n	800e90c <xQueueGenericCreateStatic+0x88>
 800e908:	2301      	movs	r3, #1
 800e90a:	e000      	b.n	800e90e <xQueueGenericCreateStatic+0x8a>
 800e90c:	2300      	movs	r3, #0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10b      	bne.n	800e92a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e916:	f383 8811 	msr	BASEPRI, r3
 800e91a:	f3bf 8f6f 	isb	sy
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	61fb      	str	r3, [r7, #28]
}
 800e924:	bf00      	nop
 800e926:	bf00      	nop
 800e928:	e7fd      	b.n	800e926 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e92a:	2350      	movs	r3, #80	@ 0x50
 800e92c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2b50      	cmp	r3, #80	@ 0x50
 800e932:	d00b      	beq.n	800e94c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	61bb      	str	r3, [r7, #24]
}
 800e946:	bf00      	nop
 800e948:	bf00      	nop
 800e94a:	e7fd      	b.n	800e948 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e94c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00d      	beq.n	800e974 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e960:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	4613      	mov	r3, r2
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	68b9      	ldr	r1, [r7, #8]
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f000 f840 	bl	800e9f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e976:	4618      	mov	r0, r3
 800e978:	3730      	adds	r7, #48	@ 0x30
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b08a      	sub	sp, #40	@ 0x28
 800e982:	af02      	add	r7, sp, #8
 800e984:	60f8      	str	r0, [r7, #12]
 800e986:	60b9      	str	r1, [r7, #8]
 800e988:	4613      	mov	r3, r2
 800e98a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10b      	bne.n	800e9aa <xQueueGenericCreate+0x2c>
	__asm volatile
 800e992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	613b      	str	r3, [r7, #16]
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	e7fd      	b.n	800e9a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	68ba      	ldr	r2, [r7, #8]
 800e9ae:	fb02 f303 	mul.w	r3, r2, r3
 800e9b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	3350      	adds	r3, #80	@ 0x50
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f002 fe47 	bl	801164c <pvPortMalloc>
 800e9be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d011      	beq.n	800e9ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	3350      	adds	r3, #80	@ 0x50
 800e9ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9d8:	79fa      	ldrb	r2, [r7, #7]
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	697a      	ldr	r2, [r7, #20]
 800e9e2:	68b9      	ldr	r1, [r7, #8]
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f000 f805 	bl	800e9f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9ea:	69bb      	ldr	r3, [r7, #24]
	}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3720      	adds	r7, #32
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
 800ea00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d103      	bne.n	800ea10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	69ba      	ldr	r2, [r7, #24]
 800ea0c:	601a      	str	r2, [r3, #0]
 800ea0e:	e002      	b.n	800ea16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	68ba      	ldr	r2, [r7, #8]
 800ea20:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea22:	2101      	movs	r1, #1
 800ea24:	69b8      	ldr	r0, [r7, #24]
 800ea26:	f7ff fec3 	bl	800e7b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	78fa      	ldrb	r2, [r7, #3]
 800ea2e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ea32:	bf00      	nop
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b082      	sub	sp, #8
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00e      	beq.n	800ea66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	2100      	movs	r1, #0
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 f8a3 	bl	800ebac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ea66:	bf00      	nop
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b086      	sub	sp, #24
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	4603      	mov	r3, r0
 800ea76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	617b      	str	r3, [r7, #20]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ea80:	79fb      	ldrb	r3, [r7, #7]
 800ea82:	461a      	mov	r2, r3
 800ea84:	6939      	ldr	r1, [r7, #16]
 800ea86:	6978      	ldr	r0, [r7, #20]
 800ea88:	f7ff ff79 	bl	800e97e <xQueueGenericCreate>
 800ea8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ea8e:	68f8      	ldr	r0, [r7, #12]
 800ea90:	f7ff ffd3 	bl	800ea3a <prvInitialiseMutex>

		return xNewQueue;
 800ea94:	68fb      	ldr	r3, [r7, #12]
	}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3718      	adds	r7, #24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b088      	sub	sp, #32
 800eaa2:	af02      	add	r7, sp, #8
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	6039      	str	r1, [r7, #0]
 800eaa8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	617b      	str	r3, [r7, #20]
 800eaae:	2300      	movs	r3, #0
 800eab0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800eab2:	79fb      	ldrb	r3, [r7, #7]
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	2200      	movs	r2, #0
 800eaba:	6939      	ldr	r1, [r7, #16]
 800eabc:	6978      	ldr	r0, [r7, #20]
 800eabe:	f7ff fee1 	bl	800e884 <xQueueGenericCreateStatic>
 800eac2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800eac4:	68f8      	ldr	r0, [r7, #12]
 800eac6:	f7ff ffb8 	bl	800ea3a <prvInitialiseMutex>

		return xNewQueue;
 800eaca:	68fb      	ldr	r3, [r7, #12]
	}
 800eacc:	4618      	mov	r0, r3
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ead4:	b590      	push	{r4, r7, lr}
 800ead6:	b087      	sub	sp, #28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d10b      	bne.n	800eafe <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800eae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaea:	f383 8811 	msr	BASEPRI, r3
 800eaee:	f3bf 8f6f 	isb	sy
 800eaf2:	f3bf 8f4f 	dsb	sy
 800eaf6:	60fb      	str	r3, [r7, #12]
}
 800eaf8:	bf00      	nop
 800eafa:	bf00      	nop
 800eafc:	e7fd      	b.n	800eafa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	689c      	ldr	r4, [r3, #8]
 800eb02:	f001 fbfd 	bl	8010300 <xTaskGetCurrentTaskHandle>
 800eb06:	4603      	mov	r3, r0
 800eb08:	429c      	cmp	r4, r3
 800eb0a:	d111      	bne.n	800eb30 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	1e5a      	subs	r2, r3, #1
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d105      	bne.n	800eb2a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800eb1e:	2300      	movs	r3, #0
 800eb20:	2200      	movs	r2, #0
 800eb22:	2100      	movs	r1, #0
 800eb24:	6938      	ldr	r0, [r7, #16]
 800eb26:	f000 f841 	bl	800ebac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	617b      	str	r3, [r7, #20]
 800eb2e:	e001      	b.n	800eb34 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800eb30:	2300      	movs	r3, #0
 800eb32:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800eb34:	697b      	ldr	r3, [r7, #20]
	}
 800eb36:	4618      	mov	r0, r3
 800eb38:	371c      	adds	r7, #28
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd90      	pop	{r4, r7, pc}

0800eb3e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800eb3e:	b590      	push	{r4, r7, lr}
 800eb40:	b087      	sub	sp, #28
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10b      	bne.n	800eb6a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	60fb      	str	r3, [r7, #12]
}
 800eb64:	bf00      	nop
 800eb66:	bf00      	nop
 800eb68:	e7fd      	b.n	800eb66 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	689c      	ldr	r4, [r3, #8]
 800eb6e:	f001 fbc7 	bl	8010300 <xTaskGetCurrentTaskHandle>
 800eb72:	4603      	mov	r3, r0
 800eb74:	429c      	cmp	r4, r3
 800eb76:	d107      	bne.n	800eb88 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	1c5a      	adds	r2, r3, #1
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800eb82:	2301      	movs	r3, #1
 800eb84:	617b      	str	r3, [r7, #20]
 800eb86:	e00c      	b.n	800eba2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800eb88:	6839      	ldr	r1, [r7, #0]
 800eb8a:	6938      	ldr	r0, [r7, #16]
 800eb8c:	f000 fa90 	bl	800f0b0 <xQueueSemaphoreTake>
 800eb90:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d004      	beq.n	800eba2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	68db      	ldr	r3, [r3, #12]
 800eb9c:	1c5a      	adds	r2, r3, #1
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800eba2:	697b      	ldr	r3, [r7, #20]
	}
 800eba4:	4618      	mov	r0, r3
 800eba6:	371c      	adds	r7, #28
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd90      	pop	{r4, r7, pc}

0800ebac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08e      	sub	sp, #56	@ 0x38
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	607a      	str	r2, [r7, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10b      	bne.n	800ebe0 <xQueueGenericSend+0x34>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebcc:	f383 8811 	msr	BASEPRI, r3
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ebda:	bf00      	nop
 800ebdc:	bf00      	nop
 800ebde:	e7fd      	b.n	800ebdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d103      	bne.n	800ebee <xQueueGenericSend+0x42>
 800ebe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d101      	bne.n	800ebf2 <xQueueGenericSend+0x46>
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e000      	b.n	800ebf4 <xQueueGenericSend+0x48>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10b      	bne.n	800ec10 <xQueueGenericSend+0x64>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebfc:	f383 8811 	msr	BASEPRI, r3
 800ec00:	f3bf 8f6f 	isb	sy
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ec0a:	bf00      	nop
 800ec0c:	bf00      	nop
 800ec0e:	e7fd      	b.n	800ec0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	2b02      	cmp	r3, #2
 800ec14:	d103      	bne.n	800ec1e <xQueueGenericSend+0x72>
 800ec16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d101      	bne.n	800ec22 <xQueueGenericSend+0x76>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	e000      	b.n	800ec24 <xQueueGenericSend+0x78>
 800ec22:	2300      	movs	r3, #0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10b      	bne.n	800ec40 <xQueueGenericSend+0x94>
	__asm volatile
 800ec28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2c:	f383 8811 	msr	BASEPRI, r3
 800ec30:	f3bf 8f6f 	isb	sy
 800ec34:	f3bf 8f4f 	dsb	sy
 800ec38:	623b      	str	r3, [r7, #32]
}
 800ec3a:	bf00      	nop
 800ec3c:	bf00      	nop
 800ec3e:	e7fd      	b.n	800ec3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec40:	f001 fb6e 	bl	8010320 <xTaskGetSchedulerState>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d102      	bne.n	800ec50 <xQueueGenericSend+0xa4>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <xQueueGenericSend+0xa8>
 800ec50:	2301      	movs	r3, #1
 800ec52:	e000      	b.n	800ec56 <xQueueGenericSend+0xaa>
 800ec54:	2300      	movs	r3, #0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10b      	bne.n	800ec72 <xQueueGenericSend+0xc6>
	__asm volatile
 800ec5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec5e:	f383 8811 	msr	BASEPRI, r3
 800ec62:	f3bf 8f6f 	isb	sy
 800ec66:	f3bf 8f4f 	dsb	sy
 800ec6a:	61fb      	str	r3, [r7, #28]
}
 800ec6c:	bf00      	nop
 800ec6e:	bf00      	nop
 800ec70:	e7fd      	b.n	800ec6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec72:	f002 fbc9 	bl	8011408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d302      	bcc.n	800ec88 <xQueueGenericSend+0xdc>
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	d129      	bne.n	800ecdc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	68b9      	ldr	r1, [r7, #8]
 800ec8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec8e:	f000 fb37 	bl	800f300 <prvCopyDataToQueue>
 800ec92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d010      	beq.n	800ecbe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9e:	3324      	adds	r3, #36	@ 0x24
 800eca0:	4618      	mov	r0, r3
 800eca2:	f001 f93f 	bl	800ff24 <xTaskRemoveFromEventList>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d013      	beq.n	800ecd4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ecac:	4b3f      	ldr	r3, [pc, #252]	@ (800edac <xQueueGenericSend+0x200>)
 800ecae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	f3bf 8f4f 	dsb	sy
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	e00a      	b.n	800ecd4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ecbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d007      	beq.n	800ecd4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ecc4:	4b39      	ldr	r3, [pc, #228]	@ (800edac <xQueueGenericSend+0x200>)
 800ecc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecca:	601a      	str	r2, [r3, #0]
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ecd4:	f002 fbca 	bl	801146c <vPortExitCritical>
				return pdPASS;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e063      	b.n	800eda4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d103      	bne.n	800ecea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ece2:	f002 fbc3 	bl	801146c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ece6:	2300      	movs	r3, #0
 800ece8:	e05c      	b.n	800eda4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ecea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d106      	bne.n	800ecfe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ecf0:	f107 0314 	add.w	r3, r7, #20
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f001 f9a1 	bl	801003c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ecfe:	f002 fbb5 	bl	801146c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed02:	f000 fecf 	bl	800faa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed06:	f002 fb7f 	bl	8011408 <vPortEnterCritical>
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed10:	b25b      	sxtb	r3, r3
 800ed12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed16:	d103      	bne.n	800ed20 <xQueueGenericSend+0x174>
 800ed18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ed20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ed26:	b25b      	sxtb	r3, r3
 800ed28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed2c:	d103      	bne.n	800ed36 <xQueueGenericSend+0x18a>
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ed36:	f002 fb99 	bl	801146c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed3a:	1d3a      	adds	r2, r7, #4
 800ed3c:	f107 0314 	add.w	r3, r7, #20
 800ed40:	4611      	mov	r1, r2
 800ed42:	4618      	mov	r0, r3
 800ed44:	f001 f990 	bl	8010068 <xTaskCheckForTimeOut>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d124      	bne.n	800ed98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ed4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed50:	f000 fbce 	bl	800f4f0 <prvIsQueueFull>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d018      	beq.n	800ed8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed5c:	3310      	adds	r3, #16
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	4611      	mov	r1, r2
 800ed62:	4618      	mov	r0, r3
 800ed64:	f001 f88c 	bl	800fe80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ed68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed6a:	f000 fb59 	bl	800f420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ed6e:	f000 fea7 	bl	800fac0 <xTaskResumeAll>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f47f af7c 	bne.w	800ec72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ed7a:	4b0c      	ldr	r3, [pc, #48]	@ (800edac <xQueueGenericSend+0x200>)
 800ed7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	f3bf 8f6f 	isb	sy
 800ed8a:	e772      	b.n	800ec72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed8e:	f000 fb47 	bl	800f420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed92:	f000 fe95 	bl	800fac0 <xTaskResumeAll>
 800ed96:	e76c      	b.n	800ec72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed9a:	f000 fb41 	bl	800f420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed9e:	f000 fe8f 	bl	800fac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eda2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3738      	adds	r7, #56	@ 0x38
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	e000ed04 	.word	0xe000ed04

0800edb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b090      	sub	sp, #64	@ 0x40
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
 800edbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800edc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10b      	bne.n	800ede0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800edc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800edda:	bf00      	nop
 800eddc:	bf00      	nop
 800edde:	e7fd      	b.n	800eddc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d103      	bne.n	800edee <xQueueGenericSendFromISR+0x3e>
 800ede6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ede8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edea:	2b00      	cmp	r3, #0
 800edec:	d101      	bne.n	800edf2 <xQueueGenericSendFromISR+0x42>
 800edee:	2301      	movs	r3, #1
 800edf0:	e000      	b.n	800edf4 <xQueueGenericSendFromISR+0x44>
 800edf2:	2300      	movs	r3, #0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10b      	bne.n	800ee10 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ee0a:	bf00      	nop
 800ee0c:	bf00      	nop
 800ee0e:	e7fd      	b.n	800ee0c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d103      	bne.n	800ee1e <xQueueGenericSendFromISR+0x6e>
 800ee16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d101      	bne.n	800ee22 <xQueueGenericSendFromISR+0x72>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e000      	b.n	800ee24 <xQueueGenericSendFromISR+0x74>
 800ee22:	2300      	movs	r3, #0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10b      	bne.n	800ee40 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	623b      	str	r3, [r7, #32]
}
 800ee3a:	bf00      	nop
 800ee3c:	bf00      	nop
 800ee3e:	e7fd      	b.n	800ee3c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee40:	f002 fbc2 	bl	80115c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ee44:	f3ef 8211 	mrs	r2, BASEPRI
 800ee48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4c:	f383 8811 	msr	BASEPRI, r3
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	61fa      	str	r2, [r7, #28]
 800ee5a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee5e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d302      	bcc.n	800ee72 <xQueueGenericSendFromISR+0xc2>
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d12f      	bne.n	800eed2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	68b9      	ldr	r1, [r7, #8]
 800ee86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee88:	f000 fa3a 	bl	800f300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee8c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ee90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee94:	d112      	bne.n	800eebc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d016      	beq.n	800eecc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea0:	3324      	adds	r3, #36	@ 0x24
 800eea2:	4618      	mov	r0, r3
 800eea4:	f001 f83e 	bl	800ff24 <xTaskRemoveFromEventList>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00e      	beq.n	800eecc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00b      	beq.n	800eecc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	e007      	b.n	800eecc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eebc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800eec0:	3301      	adds	r3, #1
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	b25a      	sxtb	r2, r3
 800eec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800eecc:	2301      	movs	r3, #1
 800eece:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800eed0:	e001      	b.n	800eed6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eed8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eee0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3740      	adds	r7, #64	@ 0x40
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b08c      	sub	sp, #48	@ 0x30
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eef8:	2300      	movs	r3, #0
 800eefa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10b      	bne.n	800ef1e <xQueueReceive+0x32>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	623b      	str	r3, [r7, #32]
}
 800ef18:	bf00      	nop
 800ef1a:	bf00      	nop
 800ef1c:	e7fd      	b.n	800ef1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d103      	bne.n	800ef2c <xQueueReceive+0x40>
 800ef24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d101      	bne.n	800ef30 <xQueueReceive+0x44>
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	e000      	b.n	800ef32 <xQueueReceive+0x46>
 800ef30:	2300      	movs	r3, #0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d10b      	bne.n	800ef4e <xQueueReceive+0x62>
	__asm volatile
 800ef36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef3a:	f383 8811 	msr	BASEPRI, r3
 800ef3e:	f3bf 8f6f 	isb	sy
 800ef42:	f3bf 8f4f 	dsb	sy
 800ef46:	61fb      	str	r3, [r7, #28]
}
 800ef48:	bf00      	nop
 800ef4a:	bf00      	nop
 800ef4c:	e7fd      	b.n	800ef4a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef4e:	f001 f9e7 	bl	8010320 <xTaskGetSchedulerState>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d102      	bne.n	800ef5e <xQueueReceive+0x72>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <xQueueReceive+0x76>
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e000      	b.n	800ef64 <xQueueReceive+0x78>
 800ef62:	2300      	movs	r3, #0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10b      	bne.n	800ef80 <xQueueReceive+0x94>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	61bb      	str	r3, [r7, #24]
}
 800ef7a:	bf00      	nop
 800ef7c:	bf00      	nop
 800ef7e:	e7fd      	b.n	800ef7c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef80:	f002 fa42 	bl	8011408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef88:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d01f      	beq.n	800efd0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef90:	68b9      	ldr	r1, [r7, #8]
 800ef92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef94:	f000 fa1e 	bl	800f3d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef9a:	1e5a      	subs	r2, r3, #1
 800ef9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef9e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d00f      	beq.n	800efc8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efaa:	3310      	adds	r3, #16
 800efac:	4618      	mov	r0, r3
 800efae:	f000 ffb9 	bl	800ff24 <xTaskRemoveFromEventList>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d007      	beq.n	800efc8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800efb8:	4b3c      	ldr	r3, [pc, #240]	@ (800f0ac <xQueueReceive+0x1c0>)
 800efba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efbe:	601a      	str	r2, [r3, #0]
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800efc8:	f002 fa50 	bl	801146c <vPortExitCritical>
				return pdPASS;
 800efcc:	2301      	movs	r3, #1
 800efce:	e069      	b.n	800f0a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d103      	bne.n	800efde <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800efd6:	f002 fa49 	bl	801146c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800efda:	2300      	movs	r3, #0
 800efdc:	e062      	b.n	800f0a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800efde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d106      	bne.n	800eff2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efe4:	f107 0310 	add.w	r3, r7, #16
 800efe8:	4618      	mov	r0, r3
 800efea:	f001 f827 	bl	801003c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800efee:	2301      	movs	r3, #1
 800eff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eff2:	f002 fa3b 	bl	801146c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eff6:	f000 fd55 	bl	800faa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800effa:	f002 fa05 	bl	8011408 <vPortEnterCritical>
 800effe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f004:	b25b      	sxtb	r3, r3
 800f006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f00a:	d103      	bne.n	800f014 <xQueueReceive+0x128>
 800f00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f00e:	2200      	movs	r2, #0
 800f010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f016:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f01a:	b25b      	sxtb	r3, r3
 800f01c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f020:	d103      	bne.n	800f02a <xQueueReceive+0x13e>
 800f022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f024:	2200      	movs	r2, #0
 800f026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f02a:	f002 fa1f 	bl	801146c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f02e:	1d3a      	adds	r2, r7, #4
 800f030:	f107 0310 	add.w	r3, r7, #16
 800f034:	4611      	mov	r1, r2
 800f036:	4618      	mov	r0, r3
 800f038:	f001 f816 	bl	8010068 <xTaskCheckForTimeOut>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d123      	bne.n	800f08a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f044:	f000 fa3e 	bl	800f4c4 <prvIsQueueEmpty>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d017      	beq.n	800f07e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f050:	3324      	adds	r3, #36	@ 0x24
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f000 ff12 	bl	800fe80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f05c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f05e:	f000 f9df 	bl	800f420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f062:	f000 fd2d 	bl	800fac0 <xTaskResumeAll>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d189      	bne.n	800ef80 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f06c:	4b0f      	ldr	r3, [pc, #60]	@ (800f0ac <xQueueReceive+0x1c0>)
 800f06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	e780      	b.n	800ef80 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f07e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f080:	f000 f9ce 	bl	800f420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f084:	f000 fd1c 	bl	800fac0 <xTaskResumeAll>
 800f088:	e77a      	b.n	800ef80 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f08a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f08c:	f000 f9c8 	bl	800f420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f090:	f000 fd16 	bl	800fac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f096:	f000 fa15 	bl	800f4c4 <prvIsQueueEmpty>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	f43f af6f 	beq.w	800ef80 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f0a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3730      	adds	r7, #48	@ 0x30
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	e000ed04 	.word	0xe000ed04

0800f0b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b08e      	sub	sp, #56	@ 0x38
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10b      	bne.n	800f0e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d0:	f383 8811 	msr	BASEPRI, r3
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	623b      	str	r3, [r7, #32]
}
 800f0de:	bf00      	nop
 800f0e0:	bf00      	nop
 800f0e2:	e7fd      	b.n	800f0e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00b      	beq.n	800f104 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f0:	f383 8811 	msr	BASEPRI, r3
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	61fb      	str	r3, [r7, #28]
}
 800f0fe:	bf00      	nop
 800f100:	bf00      	nop
 800f102:	e7fd      	b.n	800f100 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f104:	f001 f90c 	bl	8010320 <xTaskGetSchedulerState>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d102      	bne.n	800f114 <xQueueSemaphoreTake+0x64>
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d101      	bne.n	800f118 <xQueueSemaphoreTake+0x68>
 800f114:	2301      	movs	r3, #1
 800f116:	e000      	b.n	800f11a <xQueueSemaphoreTake+0x6a>
 800f118:	2300      	movs	r3, #0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10b      	bne.n	800f136 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	61bb      	str	r3, [r7, #24]
}
 800f130:	bf00      	nop
 800f132:	bf00      	nop
 800f134:	e7fd      	b.n	800f132 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f136:	f002 f967 	bl	8011408 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f13e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f142:	2b00      	cmp	r3, #0
 800f144:	d024      	beq.n	800f190 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f148:	1e5a      	subs	r2, r3, #1
 800f14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f14c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d104      	bne.n	800f160 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f156:	f001 fa5d 	bl	8010614 <pvTaskIncrementMutexHeldCount>
 800f15a:	4602      	mov	r2, r0
 800f15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f15e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00f      	beq.n	800f188 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f16a:	3310      	adds	r3, #16
 800f16c:	4618      	mov	r0, r3
 800f16e:	f000 fed9 	bl	800ff24 <xTaskRemoveFromEventList>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d007      	beq.n	800f188 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f178:	4b54      	ldr	r3, [pc, #336]	@ (800f2cc <xQueueSemaphoreTake+0x21c>)
 800f17a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f17e:	601a      	str	r2, [r3, #0]
 800f180:	f3bf 8f4f 	dsb	sy
 800f184:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f188:	f002 f970 	bl	801146c <vPortExitCritical>
				return pdPASS;
 800f18c:	2301      	movs	r3, #1
 800f18e:	e098      	b.n	800f2c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d112      	bne.n	800f1bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00b      	beq.n	800f1b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a0:	f383 8811 	msr	BASEPRI, r3
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	617b      	str	r3, [r7, #20]
}
 800f1ae:	bf00      	nop
 800f1b0:	bf00      	nop
 800f1b2:	e7fd      	b.n	800f1b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f1b4:	f002 f95a 	bl	801146c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	e082      	b.n	800f2c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d106      	bne.n	800f1d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1c2:	f107 030c 	add.w	r3, r7, #12
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f000 ff38 	bl	801003c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1d0:	f002 f94c 	bl	801146c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1d4:	f000 fc66 	bl	800faa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1d8:	f002 f916 	bl	8011408 <vPortEnterCritical>
 800f1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f1e2:	b25b      	sxtb	r3, r3
 800f1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1e8:	d103      	bne.n	800f1f2 <xQueueSemaphoreTake+0x142>
 800f1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f1f8:	b25b      	sxtb	r3, r3
 800f1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1fe:	d103      	bne.n	800f208 <xQueueSemaphoreTake+0x158>
 800f200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f208:	f002 f930 	bl	801146c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f20c:	463a      	mov	r2, r7
 800f20e:	f107 030c 	add.w	r3, r7, #12
 800f212:	4611      	mov	r1, r2
 800f214:	4618      	mov	r0, r3
 800f216:	f000 ff27 	bl	8010068 <xTaskCheckForTimeOut>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d132      	bne.n	800f286 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f220:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f222:	f000 f94f 	bl	800f4c4 <prvIsQueueEmpty>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d026      	beq.n	800f27a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d109      	bne.n	800f248 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f234:	f002 f8e8 	bl	8011408 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23a:	689b      	ldr	r3, [r3, #8]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f001 f88d 	bl	801035c <xTaskPriorityInherit>
 800f242:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f244:	f002 f912 	bl	801146c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f24a:	3324      	adds	r3, #36	@ 0x24
 800f24c:	683a      	ldr	r2, [r7, #0]
 800f24e:	4611      	mov	r1, r2
 800f250:	4618      	mov	r0, r3
 800f252:	f000 fe15 	bl	800fe80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f256:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f258:	f000 f8e2 	bl	800f420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f25c:	f000 fc30 	bl	800fac0 <xTaskResumeAll>
 800f260:	4603      	mov	r3, r0
 800f262:	2b00      	cmp	r3, #0
 800f264:	f47f af67 	bne.w	800f136 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f268:	4b18      	ldr	r3, [pc, #96]	@ (800f2cc <xQueueSemaphoreTake+0x21c>)
 800f26a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f26e:	601a      	str	r2, [r3, #0]
 800f270:	f3bf 8f4f 	dsb	sy
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	e75d      	b.n	800f136 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f27a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f27c:	f000 f8d0 	bl	800f420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f280:	f000 fc1e 	bl	800fac0 <xTaskResumeAll>
 800f284:	e757      	b.n	800f136 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f286:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f288:	f000 f8ca 	bl	800f420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f28c:	f000 fc18 	bl	800fac0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f290:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f292:	f000 f917 	bl	800f4c4 <prvIsQueueEmpty>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f43f af4c 	beq.w	800f136 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00d      	beq.n	800f2c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f2a4:	f002 f8b0 	bl	8011408 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f2a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2aa:	f000 f811 	bl	800f2d0 <prvGetDisinheritPriorityAfterTimeout>
 800f2ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f001 f928 	bl	801050c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f2bc:	f002 f8d6 	bl	801146c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3738      	adds	r7, #56	@ 0x38
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	e000ed04 	.word	0xe000ed04

0800f2d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d006      	beq.n	800f2ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800f2ea:	60fb      	str	r3, [r7, #12]
 800f2ec:	e001      	b.n	800f2f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
	}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3714      	adds	r7, #20
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f30c:	2300      	movs	r3, #0
 800f30e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d10d      	bne.n	800f33a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d14d      	bne.n	800f3c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f001 f87e 	bl	801042c <xTaskPriorityDisinherit>
 800f330:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2200      	movs	r2, #0
 800f336:	609a      	str	r2, [r3, #8]
 800f338:	e043      	b.n	800f3c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d119      	bne.n	800f374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6858      	ldr	r0, [r3, #4]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f348:	461a      	mov	r2, r3
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	f013 f8df 	bl	802250e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	685a      	ldr	r2, [r3, #4]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f358:	441a      	add	r2, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	429a      	cmp	r2, r3
 800f368:	d32b      	bcc.n	800f3c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	605a      	str	r2, [r3, #4]
 800f372:	e026      	b.n	800f3c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	68d8      	ldr	r0, [r3, #12]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f37c:	461a      	mov	r2, r3
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	f013 f8c5 	bl	802250e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	68da      	ldr	r2, [r3, #12]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f38c:	425b      	negs	r3, r3
 800f38e:	441a      	add	r2, r3
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68da      	ldr	r2, [r3, #12]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d207      	bcs.n	800f3b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	689a      	ldr	r2, [r3, #8]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3a8:	425b      	negs	r3, r3
 800f3aa:	441a      	add	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d105      	bne.n	800f3c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d002      	beq.n	800f3c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	1c5a      	adds	r2, r3, #1
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f3ca:	697b      	ldr	r3, [r7, #20]
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3718      	adds	r7, #24
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d018      	beq.n	800f418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	68da      	ldr	r2, [r3, #12]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3ee:	441a      	add	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	68da      	ldr	r2, [r3, #12]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d303      	bcc.n	800f408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	68d9      	ldr	r1, [r3, #12]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f410:	461a      	mov	r2, r3
 800f412:	6838      	ldr	r0, [r7, #0]
 800f414:	f013 f87b 	bl	802250e <memcpy>
	}
}
 800f418:	bf00      	nop
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f428:	f001 ffee 	bl	8011408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f434:	e011      	b.n	800f45a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d012      	beq.n	800f464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	3324      	adds	r3, #36	@ 0x24
 800f442:	4618      	mov	r0, r3
 800f444:	f000 fd6e 	bl	800ff24 <xTaskRemoveFromEventList>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f44e:	f000 fe6f 	bl	8010130 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f452:	7bfb      	ldrb	r3, [r7, #15]
 800f454:	3b01      	subs	r3, #1
 800f456:	b2db      	uxtb	r3, r3
 800f458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	dce9      	bgt.n	800f436 <prvUnlockQueue+0x16>
 800f462:	e000      	b.n	800f466 <prvUnlockQueue+0x46>
					break;
 800f464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	22ff      	movs	r2, #255	@ 0xff
 800f46a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f46e:	f001 fffd 	bl	801146c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f472:	f001 ffc9 	bl	8011408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f47c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f47e:	e011      	b.n	800f4a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d012      	beq.n	800f4ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3310      	adds	r3, #16
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fd49 	bl	800ff24 <xTaskRemoveFromEventList>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f498:	f000 fe4a 	bl	8010130 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f49c:	7bbb      	ldrb	r3, [r7, #14]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	dce9      	bgt.n	800f480 <prvUnlockQueue+0x60>
 800f4ac:	e000      	b.n	800f4b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	22ff      	movs	r2, #255	@ 0xff
 800f4b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f4b8:	f001 ffd8 	bl	801146c <vPortExitCritical>
}
 800f4bc:	bf00      	nop
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4cc:	f001 ff9c 	bl	8011408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d102      	bne.n	800f4de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	60fb      	str	r3, [r7, #12]
 800f4dc:	e001      	b.n	800f4e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4e2:	f001 ffc3 	bl	801146c <vPortExitCritical>

	return xReturn;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4f8:	f001 ff86 	bl	8011408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f504:	429a      	cmp	r2, r3
 800f506:	d102      	bne.n	800f50e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f508:	2301      	movs	r3, #1
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	e001      	b.n	800f512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f50e:	2300      	movs	r3, #0
 800f510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f512:	f001 ffab 	bl	801146c <vPortExitCritical>

	return xReturn;
 800f516:	68fb      	ldr	r3, [r7, #12]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f52a:	2300      	movs	r3, #0
 800f52c:	60fb      	str	r3, [r7, #12]
 800f52e:	e014      	b.n	800f55a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f530:	4a0f      	ldr	r2, [pc, #60]	@ (800f570 <vQueueAddToRegistry+0x50>)
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10b      	bne.n	800f554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f53c:	490c      	ldr	r1, [pc, #48]	@ (800f570 <vQueueAddToRegistry+0x50>)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f546:	4a0a      	ldr	r2, [pc, #40]	@ (800f570 <vQueueAddToRegistry+0x50>)
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	4413      	add	r3, r2
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f552:	e006      	b.n	800f562 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	3301      	adds	r3, #1
 800f558:	60fb      	str	r3, [r7, #12]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2b07      	cmp	r3, #7
 800f55e:	d9e7      	bls.n	800f530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f560:	bf00      	nop
 800f562:	bf00      	nop
 800f564:	3714      	adds	r7, #20
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr
 800f56e:	bf00      	nop
 800f570:	240334a8 	.word	0x240334a8

0800f574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f584:	f001 ff40 	bl	8011408 <vPortEnterCritical>
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f58e:	b25b      	sxtb	r3, r3
 800f590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f594:	d103      	bne.n	800f59e <vQueueWaitForMessageRestricted+0x2a>
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	2200      	movs	r2, #0
 800f59a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f5a4:	b25b      	sxtb	r3, r3
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5aa:	d103      	bne.n	800f5b4 <vQueueWaitForMessageRestricted+0x40>
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f5b4:	f001 ff5a 	bl	801146c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d106      	bne.n	800f5ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	3324      	adds	r3, #36	@ 0x24
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	68b9      	ldr	r1, [r7, #8]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f000 fc7f 	bl	800fecc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5ce:	6978      	ldr	r0, [r7, #20]
 800f5d0:	f7ff ff26 	bl	800f420 <prvUnlockQueue>
	}
 800f5d4:	bf00      	nop
 800f5d6:	3718      	adds	r7, #24
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08e      	sub	sp, #56	@ 0x38
 800f5e0:	af04      	add	r7, sp, #16
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d10b      	bne.n	800f608 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f4:	f383 8811 	msr	BASEPRI, r3
 800f5f8:	f3bf 8f6f 	isb	sy
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	623b      	str	r3, [r7, #32]
}
 800f602:	bf00      	nop
 800f604:	bf00      	nop
 800f606:	e7fd      	b.n	800f604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10b      	bne.n	800f626 <xTaskCreateStatic+0x4a>
	__asm volatile
 800f60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	61fb      	str	r3, [r7, #28]
}
 800f620:	bf00      	nop
 800f622:	bf00      	nop
 800f624:	e7fd      	b.n	800f622 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f626:	23a8      	movs	r3, #168	@ 0xa8
 800f628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2ba8      	cmp	r3, #168	@ 0xa8
 800f62e:	d00b      	beq.n	800f648 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	61bb      	str	r3, [r7, #24]
}
 800f642:	bf00      	nop
 800f644:	bf00      	nop
 800f646:	e7fd      	b.n	800f644 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f648:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d01e      	beq.n	800f68e <xTaskCreateStatic+0xb2>
 800f650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f652:	2b00      	cmp	r3, #0
 800f654:	d01b      	beq.n	800f68e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f658:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f65c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f65e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f662:	2202      	movs	r2, #2
 800f664:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f668:	2300      	movs	r3, #0
 800f66a:	9303      	str	r3, [sp, #12]
 800f66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66e:	9302      	str	r3, [sp, #8]
 800f670:	f107 0314 	add.w	r3, r7, #20
 800f674:	9301      	str	r3, [sp, #4]
 800f676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	68b9      	ldr	r1, [r7, #8]
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f000 f851 	bl	800f728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f686:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f688:	f000 f8f6 	bl	800f878 <prvAddNewTaskToReadyList>
 800f68c:	e001      	b.n	800f692 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f68e:	2300      	movs	r3, #0
 800f690:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f692:	697b      	ldr	r3, [r7, #20]
	}
 800f694:	4618      	mov	r0, r3
 800f696:	3728      	adds	r7, #40	@ 0x28
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b08c      	sub	sp, #48	@ 0x30
 800f6a0:	af04      	add	r7, sp, #16
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	603b      	str	r3, [r7, #0]
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6ac:	88fb      	ldrh	r3, [r7, #6]
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f001 ffcb 	bl	801164c <pvPortMalloc>
 800f6b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00e      	beq.n	800f6dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f6be:	20a8      	movs	r0, #168	@ 0xa8
 800f6c0:	f001 ffc4 	bl	801164c <pvPortMalloc>
 800f6c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d003      	beq.n	800f6d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	697a      	ldr	r2, [r7, #20]
 800f6d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800f6d2:	e005      	b.n	800f6e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f6d4:	6978      	ldr	r0, [r7, #20]
 800f6d6:	f002 f887 	bl	80117e8 <vPortFree>
 800f6da:	e001      	b.n	800f6e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d017      	beq.n	800f716 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f6e6:	69fb      	ldr	r3, [r7, #28]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f6ee:	88fa      	ldrh	r2, [r7, #6]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9303      	str	r3, [sp, #12]
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	9302      	str	r3, [sp, #8]
 800f6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6fa:	9301      	str	r3, [sp, #4]
 800f6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	68b9      	ldr	r1, [r7, #8]
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f000 f80f 	bl	800f728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f70a:	69f8      	ldr	r0, [r7, #28]
 800f70c:	f000 f8b4 	bl	800f878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f710:	2301      	movs	r3, #1
 800f712:	61bb      	str	r3, [r7, #24]
 800f714:	e002      	b.n	800f71c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f71a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f71c:	69bb      	ldr	r3, [r7, #24]
	}
 800f71e:	4618      	mov	r0, r3
 800f720:	3720      	adds	r7, #32
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
	...

0800f728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b088      	sub	sp, #32
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
 800f734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f738:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	461a      	mov	r2, r3
 800f740:	21a5      	movs	r1, #165	@ 0xa5
 800f742:	f012 fdc5 	bl	80222d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f74a:	6879      	ldr	r1, [r7, #4]
 800f74c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f750:	440b      	add	r3, r1
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	f023 0307 	bic.w	r3, r3, #7
 800f75e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	f003 0307 	and.w	r3, r3, #7
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00b      	beq.n	800f782 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76e:	f383 8811 	msr	BASEPRI, r3
 800f772:	f3bf 8f6f 	isb	sy
 800f776:	f3bf 8f4f 	dsb	sy
 800f77a:	617b      	str	r3, [r7, #20]
}
 800f77c:	bf00      	nop
 800f77e:	bf00      	nop
 800f780:	e7fd      	b.n	800f77e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d01f      	beq.n	800f7c8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f788:	2300      	movs	r3, #0
 800f78a:	61fb      	str	r3, [r7, #28]
 800f78c:	e012      	b.n	800f7b4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	4413      	add	r3, r2
 800f794:	7819      	ldrb	r1, [r3, #0]
 800f796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	4413      	add	r3, r2
 800f79c:	3334      	adds	r3, #52	@ 0x34
 800f79e:	460a      	mov	r2, r1
 800f7a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d006      	beq.n	800f7bc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	61fb      	str	r3, [r7, #28]
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	2b0f      	cmp	r3, #15
 800f7b8:	d9e9      	bls.n	800f78e <prvInitialiseNewTask+0x66>
 800f7ba:	e000      	b.n	800f7be <prvInitialiseNewTask+0x96>
			{
				break;
 800f7bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f7c6:	e003      	b.n	800f7d0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d2:	2b37      	cmp	r3, #55	@ 0x37
 800f7d4:	d901      	bls.n	800f7da <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f7d6:	2337      	movs	r3, #55	@ 0x37
 800f7d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ee:	3304      	adds	r3, #4
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fe ff49 	bl	800e688 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f8:	3318      	adds	r3, #24
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fe ff44 	bl	800e688 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f804:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f808:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f814:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f818:	2200      	movs	r2, #0
 800f81a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f820:	2200      	movs	r2, #0
 800f822:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f828:	3354      	adds	r3, #84	@ 0x54
 800f82a:	224c      	movs	r2, #76	@ 0x4c
 800f82c:	2100      	movs	r1, #0
 800f82e:	4618      	mov	r0, r3
 800f830:	f012 fd4e 	bl	80222d0 <memset>
 800f834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f836:	4a0d      	ldr	r2, [pc, #52]	@ (800f86c <prvInitialiseNewTask+0x144>)
 800f838:	659a      	str	r2, [r3, #88]	@ 0x58
 800f83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f83c:	4a0c      	ldr	r2, [pc, #48]	@ (800f870 <prvInitialiseNewTask+0x148>)
 800f83e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f842:	4a0c      	ldr	r2, [pc, #48]	@ (800f874 <prvInitialiseNewTask+0x14c>)
 800f844:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f846:	683a      	ldr	r2, [r7, #0]
 800f848:	68f9      	ldr	r1, [r7, #12]
 800f84a:	69b8      	ldr	r0, [r7, #24]
 800f84c:	f001 fcac 	bl	80111a8 <pxPortInitialiseStack>
 800f850:	4602      	mov	r2, r0
 800f852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f854:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d002      	beq.n	800f862 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f85e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f862:	bf00      	nop
 800f864:	3720      	adds	r7, #32
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	240695ac 	.word	0x240695ac
 800f870:	24069614 	.word	0x24069614
 800f874:	2406967c 	.word	0x2406967c

0800f878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f880:	f001 fdc2 	bl	8011408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f884:	4b2d      	ldr	r3, [pc, #180]	@ (800f93c <prvAddNewTaskToReadyList+0xc4>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3301      	adds	r3, #1
 800f88a:	4a2c      	ldr	r2, [pc, #176]	@ (800f93c <prvAddNewTaskToReadyList+0xc4>)
 800f88c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f88e:	4b2c      	ldr	r3, [pc, #176]	@ (800f940 <prvAddNewTaskToReadyList+0xc8>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d109      	bne.n	800f8aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f896:	4a2a      	ldr	r2, [pc, #168]	@ (800f940 <prvAddNewTaskToReadyList+0xc8>)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f89c:	4b27      	ldr	r3, [pc, #156]	@ (800f93c <prvAddNewTaskToReadyList+0xc4>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d110      	bne.n	800f8c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8a4:	f000 fc68 	bl	8010178 <prvInitialiseTaskLists>
 800f8a8:	e00d      	b.n	800f8c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8aa:	4b26      	ldr	r3, [pc, #152]	@ (800f944 <prvAddNewTaskToReadyList+0xcc>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d109      	bne.n	800f8c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8b2:	4b23      	ldr	r3, [pc, #140]	@ (800f940 <prvAddNewTaskToReadyList+0xc8>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d802      	bhi.n	800f8c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f8c0:	4a1f      	ldr	r2, [pc, #124]	@ (800f940 <prvAddNewTaskToReadyList+0xc8>)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8c6:	4b20      	ldr	r3, [pc, #128]	@ (800f948 <prvAddNewTaskToReadyList+0xd0>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	4a1e      	ldr	r2, [pc, #120]	@ (800f948 <prvAddNewTaskToReadyList+0xd0>)
 800f8ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f8d0:	4b1d      	ldr	r3, [pc, #116]	@ (800f948 <prvAddNewTaskToReadyList+0xd0>)
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8dc:	4b1b      	ldr	r3, [pc, #108]	@ (800f94c <prvAddNewTaskToReadyList+0xd4>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d903      	bls.n	800f8ec <prvAddNewTaskToReadyList+0x74>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8e8:	4a18      	ldr	r2, [pc, #96]	@ (800f94c <prvAddNewTaskToReadyList+0xd4>)
 800f8ea:	6013      	str	r3, [r2, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4413      	add	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4a15      	ldr	r2, [pc, #84]	@ (800f950 <prvAddNewTaskToReadyList+0xd8>)
 800f8fa:	441a      	add	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	3304      	adds	r3, #4
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7fe fecd 	bl	800e6a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f908:	f001 fdb0 	bl	801146c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f90c:	4b0d      	ldr	r3, [pc, #52]	@ (800f944 <prvAddNewTaskToReadyList+0xcc>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d00e      	beq.n	800f932 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f914:	4b0a      	ldr	r3, [pc, #40]	@ (800f940 <prvAddNewTaskToReadyList+0xc8>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f91e:	429a      	cmp	r2, r3
 800f920:	d207      	bcs.n	800f932 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f922:	4b0c      	ldr	r3, [pc, #48]	@ (800f954 <prvAddNewTaskToReadyList+0xdc>)
 800f924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f928:	601a      	str	r2, [r3, #0]
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f932:	bf00      	nop
 800f934:	3708      	adds	r7, #8
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	240339bc 	.word	0x240339bc
 800f940:	240334e8 	.word	0x240334e8
 800f944:	240339c8 	.word	0x240339c8
 800f948:	240339d8 	.word	0x240339d8
 800f94c:	240339c4 	.word	0x240339c4
 800f950:	240334ec 	.word	0x240334ec
 800f954:	e000ed04 	.word	0xe000ed04

0800f958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f960:	2300      	movs	r3, #0
 800f962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d018      	beq.n	800f99c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f96a:	4b14      	ldr	r3, [pc, #80]	@ (800f9bc <vTaskDelay+0x64>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00b      	beq.n	800f98a <vTaskDelay+0x32>
	__asm volatile
 800f972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f976:	f383 8811 	msr	BASEPRI, r3
 800f97a:	f3bf 8f6f 	isb	sy
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	60bb      	str	r3, [r7, #8]
}
 800f984:	bf00      	nop
 800f986:	bf00      	nop
 800f988:	e7fd      	b.n	800f986 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f98a:	f000 f88b 	bl	800faa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f98e:	2100      	movs	r1, #0
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f001 f85b 	bl	8010a4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f996:	f000 f893 	bl	800fac0 <xTaskResumeAll>
 800f99a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d107      	bne.n	800f9b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f9a2:	4b07      	ldr	r3, [pc, #28]	@ (800f9c0 <vTaskDelay+0x68>)
 800f9a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9a8:	601a      	str	r2, [r3, #0]
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	240339e4 	.word	0x240339e4
 800f9c0:	e000ed04 	.word	0xe000ed04

0800f9c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b08a      	sub	sp, #40	@ 0x28
 800f9c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9d2:	463a      	mov	r2, r7
 800f9d4:	1d39      	adds	r1, r7, #4
 800f9d6:	f107 0308 	add.w	r3, r7, #8
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fe fe00 	bl	800e5e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	9202      	str	r2, [sp, #8]
 800f9e8:	9301      	str	r3, [sp, #4]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	460a      	mov	r2, r1
 800f9f2:	4924      	ldr	r1, [pc, #144]	@ (800fa84 <vTaskStartScheduler+0xc0>)
 800f9f4:	4824      	ldr	r0, [pc, #144]	@ (800fa88 <vTaskStartScheduler+0xc4>)
 800f9f6:	f7ff fdf1 	bl	800f5dc <xTaskCreateStatic>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	4a23      	ldr	r2, [pc, #140]	@ (800fa8c <vTaskStartScheduler+0xc8>)
 800f9fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa00:	4b22      	ldr	r3, [pc, #136]	@ (800fa8c <vTaskStartScheduler+0xc8>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d002      	beq.n	800fa0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	617b      	str	r3, [r7, #20]
 800fa0c:	e001      	b.n	800fa12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d102      	bne.n	800fa1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa18:	f001 f86c 	bl	8010af4 <xTimerCreateTimerTask>
 800fa1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d11b      	bne.n	800fa5c <vTaskStartScheduler+0x98>
	__asm volatile
 800fa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa28:	f383 8811 	msr	BASEPRI, r3
 800fa2c:	f3bf 8f6f 	isb	sy
 800fa30:	f3bf 8f4f 	dsb	sy
 800fa34:	613b      	str	r3, [r7, #16]
}
 800fa36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa38:	4b15      	ldr	r3, [pc, #84]	@ (800fa90 <vTaskStartScheduler+0xcc>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	3354      	adds	r3, #84	@ 0x54
 800fa3e:	4a15      	ldr	r2, [pc, #84]	@ (800fa94 <vTaskStartScheduler+0xd0>)
 800fa40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa42:	4b15      	ldr	r3, [pc, #84]	@ (800fa98 <vTaskStartScheduler+0xd4>)
 800fa44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa4a:	4b14      	ldr	r3, [pc, #80]	@ (800fa9c <vTaskStartScheduler+0xd8>)
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa50:	4b13      	ldr	r3, [pc, #76]	@ (800faa0 <vTaskStartScheduler+0xdc>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa56:	f001 fc33 	bl	80112c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa5a:	e00f      	b.n	800fa7c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa62:	d10b      	bne.n	800fa7c <vTaskStartScheduler+0xb8>
	__asm volatile
 800fa64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa68:	f383 8811 	msr	BASEPRI, r3
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	60fb      	str	r3, [r7, #12]
}
 800fa76:	bf00      	nop
 800fa78:	bf00      	nop
 800fa7a:	e7fd      	b.n	800fa78 <vTaskStartScheduler+0xb4>
}
 800fa7c:	bf00      	nop
 800fa7e:	3718      	adds	r7, #24
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	08023428 	.word	0x08023428
 800fa88:	08010149 	.word	0x08010149
 800fa8c:	240339e0 	.word	0x240339e0
 800fa90:	240334e8 	.word	0x240334e8
 800fa94:	240012bc 	.word	0x240012bc
 800fa98:	240339dc 	.word	0x240339dc
 800fa9c:	240339c8 	.word	0x240339c8
 800faa0:	240339c0 	.word	0x240339c0

0800faa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800faa4:	b480      	push	{r7}
 800faa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800faa8:	4b04      	ldr	r3, [pc, #16]	@ (800fabc <vTaskSuspendAll+0x18>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	3301      	adds	r3, #1
 800faae:	4a03      	ldr	r2, [pc, #12]	@ (800fabc <vTaskSuspendAll+0x18>)
 800fab0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fab2:	bf00      	nop
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr
 800fabc:	240339e4 	.word	0x240339e4

0800fac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fac6:	2300      	movs	r3, #0
 800fac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800faca:	2300      	movs	r3, #0
 800facc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800face:	4b42      	ldr	r3, [pc, #264]	@ (800fbd8 <xTaskResumeAll+0x118>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d10b      	bne.n	800faee <xTaskResumeAll+0x2e>
	__asm volatile
 800fad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fada:	f383 8811 	msr	BASEPRI, r3
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	f3bf 8f4f 	dsb	sy
 800fae6:	603b      	str	r3, [r7, #0]
}
 800fae8:	bf00      	nop
 800faea:	bf00      	nop
 800faec:	e7fd      	b.n	800faea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800faee:	f001 fc8b 	bl	8011408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800faf2:	4b39      	ldr	r3, [pc, #228]	@ (800fbd8 <xTaskResumeAll+0x118>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	3b01      	subs	r3, #1
 800faf8:	4a37      	ldr	r2, [pc, #220]	@ (800fbd8 <xTaskResumeAll+0x118>)
 800fafa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fafc:	4b36      	ldr	r3, [pc, #216]	@ (800fbd8 <xTaskResumeAll+0x118>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d162      	bne.n	800fbca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb04:	4b35      	ldr	r3, [pc, #212]	@ (800fbdc <xTaskResumeAll+0x11c>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d05e      	beq.n	800fbca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb0c:	e02f      	b.n	800fb6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb0e:	4b34      	ldr	r3, [pc, #208]	@ (800fbe0 <xTaskResumeAll+0x120>)
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	3318      	adds	r3, #24
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe fe1e 	bl	800e75c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	3304      	adds	r3, #4
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7fe fe19 	bl	800e75c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb2e:	4b2d      	ldr	r3, [pc, #180]	@ (800fbe4 <xTaskResumeAll+0x124>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d903      	bls.n	800fb3e <xTaskResumeAll+0x7e>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb3a:	4a2a      	ldr	r2, [pc, #168]	@ (800fbe4 <xTaskResumeAll+0x124>)
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb42:	4613      	mov	r3, r2
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	4413      	add	r3, r2
 800fb48:	009b      	lsls	r3, r3, #2
 800fb4a:	4a27      	ldr	r2, [pc, #156]	@ (800fbe8 <xTaskResumeAll+0x128>)
 800fb4c:	441a      	add	r2, r3
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3304      	adds	r3, #4
 800fb52:	4619      	mov	r1, r3
 800fb54:	4610      	mov	r0, r2
 800fb56:	f7fe fda4 	bl	800e6a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb5e:	4b23      	ldr	r3, [pc, #140]	@ (800fbec <xTaskResumeAll+0x12c>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d302      	bcc.n	800fb6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fb68:	4b21      	ldr	r3, [pc, #132]	@ (800fbf0 <xTaskResumeAll+0x130>)
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb6e:	4b1c      	ldr	r3, [pc, #112]	@ (800fbe0 <xTaskResumeAll+0x120>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d1cb      	bne.n	800fb0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d001      	beq.n	800fb80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb7c:	f000 fba0 	bl	80102c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb80:	4b1c      	ldr	r3, [pc, #112]	@ (800fbf4 <xTaskResumeAll+0x134>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d010      	beq.n	800fbae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb8c:	f000 f858 	bl	800fc40 <xTaskIncrementTick>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d002      	beq.n	800fb9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fb96:	4b16      	ldr	r3, [pc, #88]	@ (800fbf0 <xTaskResumeAll+0x130>)
 800fb98:	2201      	movs	r2, #1
 800fb9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d1f1      	bne.n	800fb8c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fba8:	4b12      	ldr	r3, [pc, #72]	@ (800fbf4 <xTaskResumeAll+0x134>)
 800fbaa:	2200      	movs	r2, #0
 800fbac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fbae:	4b10      	ldr	r3, [pc, #64]	@ (800fbf0 <xTaskResumeAll+0x130>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d009      	beq.n	800fbca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbba:	4b0f      	ldr	r3, [pc, #60]	@ (800fbf8 <xTaskResumeAll+0x138>)
 800fbbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbc0:	601a      	str	r2, [r3, #0]
 800fbc2:	f3bf 8f4f 	dsb	sy
 800fbc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbca:	f001 fc4f 	bl	801146c <vPortExitCritical>

	return xAlreadyYielded;
 800fbce:	68bb      	ldr	r3, [r7, #8]
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3710      	adds	r7, #16
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	240339e4 	.word	0x240339e4
 800fbdc:	240339bc 	.word	0x240339bc
 800fbe0:	2403397c 	.word	0x2403397c
 800fbe4:	240339c4 	.word	0x240339c4
 800fbe8:	240334ec 	.word	0x240334ec
 800fbec:	240334e8 	.word	0x240334e8
 800fbf0:	240339d0 	.word	0x240339d0
 800fbf4:	240339cc 	.word	0x240339cc
 800fbf8:	e000ed04 	.word	0xe000ed04

0800fbfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc02:	4b05      	ldr	r3, [pc, #20]	@ (800fc18 <xTaskGetTickCount+0x1c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc08:	687b      	ldr	r3, [r7, #4]
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	370c      	adds	r7, #12
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	240339c0 	.word	0x240339c0

0800fc1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc22:	f001 fcd1 	bl	80115c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fc26:	2300      	movs	r3, #0
 800fc28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fc2a:	4b04      	ldr	r3, [pc, #16]	@ (800fc3c <xTaskGetTickCountFromISR+0x20>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc30:	683b      	ldr	r3, [r7, #0]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3708      	adds	r7, #8
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	240339c0 	.word	0x240339c0

0800fc40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc46:	2300      	movs	r3, #0
 800fc48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc4a:	4b4f      	ldr	r3, [pc, #316]	@ (800fd88 <xTaskIncrementTick+0x148>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	f040 8090 	bne.w	800fd74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc54:	4b4d      	ldr	r3, [pc, #308]	@ (800fd8c <xTaskIncrementTick+0x14c>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc5c:	4a4b      	ldr	r2, [pc, #300]	@ (800fd8c <xTaskIncrementTick+0x14c>)
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d121      	bne.n	800fcac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc68:	4b49      	ldr	r3, [pc, #292]	@ (800fd90 <xTaskIncrementTick+0x150>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00b      	beq.n	800fc8a <xTaskIncrementTick+0x4a>
	__asm volatile
 800fc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc76:	f383 8811 	msr	BASEPRI, r3
 800fc7a:	f3bf 8f6f 	isb	sy
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	603b      	str	r3, [r7, #0]
}
 800fc84:	bf00      	nop
 800fc86:	bf00      	nop
 800fc88:	e7fd      	b.n	800fc86 <xTaskIncrementTick+0x46>
 800fc8a:	4b41      	ldr	r3, [pc, #260]	@ (800fd90 <xTaskIncrementTick+0x150>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	60fb      	str	r3, [r7, #12]
 800fc90:	4b40      	ldr	r3, [pc, #256]	@ (800fd94 <xTaskIncrementTick+0x154>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4a3e      	ldr	r2, [pc, #248]	@ (800fd90 <xTaskIncrementTick+0x150>)
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	4a3e      	ldr	r2, [pc, #248]	@ (800fd94 <xTaskIncrementTick+0x154>)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6013      	str	r3, [r2, #0]
 800fc9e:	4b3e      	ldr	r3, [pc, #248]	@ (800fd98 <xTaskIncrementTick+0x158>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	3301      	adds	r3, #1
 800fca4:	4a3c      	ldr	r2, [pc, #240]	@ (800fd98 <xTaskIncrementTick+0x158>)
 800fca6:	6013      	str	r3, [r2, #0]
 800fca8:	f000 fb0a 	bl	80102c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcac:	4b3b      	ldr	r3, [pc, #236]	@ (800fd9c <xTaskIncrementTick+0x15c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	693a      	ldr	r2, [r7, #16]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d349      	bcc.n	800fd4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcb6:	4b36      	ldr	r3, [pc, #216]	@ (800fd90 <xTaskIncrementTick+0x150>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d104      	bne.n	800fcca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcc0:	4b36      	ldr	r3, [pc, #216]	@ (800fd9c <xTaskIncrementTick+0x15c>)
 800fcc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fcc6:	601a      	str	r2, [r3, #0]
					break;
 800fcc8:	e03f      	b.n	800fd4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcca:	4b31      	ldr	r3, [pc, #196]	@ (800fd90 <xTaskIncrementTick+0x150>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcda:	693a      	ldr	r2, [r7, #16]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d203      	bcs.n	800fcea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fce2:	4a2e      	ldr	r2, [pc, #184]	@ (800fd9c <xTaskIncrementTick+0x15c>)
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fce8:	e02f      	b.n	800fd4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	3304      	adds	r3, #4
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe fd34 	bl	800e75c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d004      	beq.n	800fd06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	3318      	adds	r3, #24
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fe fd2b 	bl	800e75c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd0a:	4b25      	ldr	r3, [pc, #148]	@ (800fda0 <xTaskIncrementTick+0x160>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d903      	bls.n	800fd1a <xTaskIncrementTick+0xda>
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd16:	4a22      	ldr	r2, [pc, #136]	@ (800fda0 <xTaskIncrementTick+0x160>)
 800fd18:	6013      	str	r3, [r2, #0]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd1e:	4613      	mov	r3, r2
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	4413      	add	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	4a1f      	ldr	r2, [pc, #124]	@ (800fda4 <xTaskIncrementTick+0x164>)
 800fd28:	441a      	add	r2, r3
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	3304      	adds	r3, #4
 800fd2e:	4619      	mov	r1, r3
 800fd30:	4610      	mov	r0, r2
 800fd32:	f7fe fcb6 	bl	800e6a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd3a:	4b1b      	ldr	r3, [pc, #108]	@ (800fda8 <xTaskIncrementTick+0x168>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d3b8      	bcc.n	800fcb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800fd44:	2301      	movs	r3, #1
 800fd46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd48:	e7b5      	b.n	800fcb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd4a:	4b17      	ldr	r3, [pc, #92]	@ (800fda8 <xTaskIncrementTick+0x168>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd50:	4914      	ldr	r1, [pc, #80]	@ (800fda4 <xTaskIncrementTick+0x164>)
 800fd52:	4613      	mov	r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4413      	add	r3, r2
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	440b      	add	r3, r1
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d901      	bls.n	800fd66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fd62:	2301      	movs	r3, #1
 800fd64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd66:	4b11      	ldr	r3, [pc, #68]	@ (800fdac <xTaskIncrementTick+0x16c>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d007      	beq.n	800fd7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	617b      	str	r3, [r7, #20]
 800fd72:	e004      	b.n	800fd7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd74:	4b0e      	ldr	r3, [pc, #56]	@ (800fdb0 <xTaskIncrementTick+0x170>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	4a0d      	ldr	r2, [pc, #52]	@ (800fdb0 <xTaskIncrementTick+0x170>)
 800fd7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd7e:	697b      	ldr	r3, [r7, #20]
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3718      	adds	r7, #24
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	240339e4 	.word	0x240339e4
 800fd8c:	240339c0 	.word	0x240339c0
 800fd90:	24033974 	.word	0x24033974
 800fd94:	24033978 	.word	0x24033978
 800fd98:	240339d4 	.word	0x240339d4
 800fd9c:	240339dc 	.word	0x240339dc
 800fda0:	240339c4 	.word	0x240339c4
 800fda4:	240334ec 	.word	0x240334ec
 800fda8:	240334e8 	.word	0x240334e8
 800fdac:	240339d0 	.word	0x240339d0
 800fdb0:	240339cc 	.word	0x240339cc

0800fdb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdba:	4b2b      	ldr	r3, [pc, #172]	@ (800fe68 <vTaskSwitchContext+0xb4>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d003      	beq.n	800fdca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdc2:	4b2a      	ldr	r3, [pc, #168]	@ (800fe6c <vTaskSwitchContext+0xb8>)
 800fdc4:	2201      	movs	r2, #1
 800fdc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fdc8:	e047      	b.n	800fe5a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fdca:	4b28      	ldr	r3, [pc, #160]	@ (800fe6c <vTaskSwitchContext+0xb8>)
 800fdcc:	2200      	movs	r2, #0
 800fdce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdd0:	4b27      	ldr	r3, [pc, #156]	@ (800fe70 <vTaskSwitchContext+0xbc>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	60fb      	str	r3, [r7, #12]
 800fdd6:	e011      	b.n	800fdfc <vTaskSwitchContext+0x48>
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10b      	bne.n	800fdf6 <vTaskSwitchContext+0x42>
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	607b      	str	r3, [r7, #4]
}
 800fdf0:	bf00      	nop
 800fdf2:	bf00      	nop
 800fdf4:	e7fd      	b.n	800fdf2 <vTaskSwitchContext+0x3e>
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	60fb      	str	r3, [r7, #12]
 800fdfc:	491d      	ldr	r1, [pc, #116]	@ (800fe74 <vTaskSwitchContext+0xc0>)
 800fdfe:	68fa      	ldr	r2, [r7, #12]
 800fe00:	4613      	mov	r3, r2
 800fe02:	009b      	lsls	r3, r3, #2
 800fe04:	4413      	add	r3, r2
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	440b      	add	r3, r1
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d0e3      	beq.n	800fdd8 <vTaskSwitchContext+0x24>
 800fe10:	68fa      	ldr	r2, [r7, #12]
 800fe12:	4613      	mov	r3, r2
 800fe14:	009b      	lsls	r3, r3, #2
 800fe16:	4413      	add	r3, r2
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4a16      	ldr	r2, [pc, #88]	@ (800fe74 <vTaskSwitchContext+0xc0>)
 800fe1c:	4413      	add	r3, r2
 800fe1e:	60bb      	str	r3, [r7, #8]
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	685a      	ldr	r2, [r3, #4]
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	605a      	str	r2, [r3, #4]
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	685a      	ldr	r2, [r3, #4]
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	3308      	adds	r3, #8
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d104      	bne.n	800fe40 <vTaskSwitchContext+0x8c>
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	685a      	ldr	r2, [r3, #4]
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	605a      	str	r2, [r3, #4]
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	4a0c      	ldr	r2, [pc, #48]	@ (800fe78 <vTaskSwitchContext+0xc4>)
 800fe48:	6013      	str	r3, [r2, #0]
 800fe4a:	4a09      	ldr	r2, [pc, #36]	@ (800fe70 <vTaskSwitchContext+0xbc>)
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe50:	4b09      	ldr	r3, [pc, #36]	@ (800fe78 <vTaskSwitchContext+0xc4>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	3354      	adds	r3, #84	@ 0x54
 800fe56:	4a09      	ldr	r2, [pc, #36]	@ (800fe7c <vTaskSwitchContext+0xc8>)
 800fe58:	6013      	str	r3, [r2, #0]
}
 800fe5a:	bf00      	nop
 800fe5c:	3714      	adds	r7, #20
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop
 800fe68:	240339e4 	.word	0x240339e4
 800fe6c:	240339d0 	.word	0x240339d0
 800fe70:	240339c4 	.word	0x240339c4
 800fe74:	240334ec 	.word	0x240334ec
 800fe78:	240334e8 	.word	0x240334e8
 800fe7c:	240012bc 	.word	0x240012bc

0800fe80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d10b      	bne.n	800fea8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800fe90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe94:	f383 8811 	msr	BASEPRI, r3
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	60fb      	str	r3, [r7, #12]
}
 800fea2:	bf00      	nop
 800fea4:	bf00      	nop
 800fea6:	e7fd      	b.n	800fea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fea8:	4b07      	ldr	r3, [pc, #28]	@ (800fec8 <vTaskPlaceOnEventList+0x48>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	3318      	adds	r3, #24
 800feae:	4619      	mov	r1, r3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7fe fc1a 	bl	800e6ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800feb6:	2101      	movs	r1, #1
 800feb8:	6838      	ldr	r0, [r7, #0]
 800feba:	f000 fdc7 	bl	8010a4c <prvAddCurrentTaskToDelayedList>
}
 800febe:	bf00      	nop
 800fec0:	3710      	adds	r7, #16
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	240334e8 	.word	0x240334e8

0800fecc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b086      	sub	sp, #24
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10b      	bne.n	800fef6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	617b      	str	r3, [r7, #20]
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	e7fd      	b.n	800fef2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fef6:	4b0a      	ldr	r3, [pc, #40]	@ (800ff20 <vTaskPlaceOnEventListRestricted+0x54>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	3318      	adds	r3, #24
 800fefc:	4619      	mov	r1, r3
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f7fe fbcf 	bl	800e6a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d002      	beq.n	800ff10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ff0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff10:	6879      	ldr	r1, [r7, #4]
 800ff12:	68b8      	ldr	r0, [r7, #8]
 800ff14:	f000 fd9a 	bl	8010a4c <prvAddCurrentTaskToDelayedList>
	}
 800ff18:	bf00      	nop
 800ff1a:	3718      	adds	r7, #24
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	240334e8 	.word	0x240334e8

0800ff24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b086      	sub	sp, #24
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d10b      	bne.n	800ff52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ff3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff3e:	f383 8811 	msr	BASEPRI, r3
 800ff42:	f3bf 8f6f 	isb	sy
 800ff46:	f3bf 8f4f 	dsb	sy
 800ff4a:	60fb      	str	r3, [r7, #12]
}
 800ff4c:	bf00      	nop
 800ff4e:	bf00      	nop
 800ff50:	e7fd      	b.n	800ff4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	3318      	adds	r3, #24
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fe fc00 	bl	800e75c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff5c:	4b1d      	ldr	r3, [pc, #116]	@ (800ffd4 <xTaskRemoveFromEventList+0xb0>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d11d      	bne.n	800ffa0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	3304      	adds	r3, #4
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fe fbf7 	bl	800e75c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff72:	4b19      	ldr	r3, [pc, #100]	@ (800ffd8 <xTaskRemoveFromEventList+0xb4>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d903      	bls.n	800ff82 <xTaskRemoveFromEventList+0x5e>
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff7e:	4a16      	ldr	r2, [pc, #88]	@ (800ffd8 <xTaskRemoveFromEventList+0xb4>)
 800ff80:	6013      	str	r3, [r2, #0]
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff86:	4613      	mov	r3, r2
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	4413      	add	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	4a13      	ldr	r2, [pc, #76]	@ (800ffdc <xTaskRemoveFromEventList+0xb8>)
 800ff90:	441a      	add	r2, r3
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	3304      	adds	r3, #4
 800ff96:	4619      	mov	r1, r3
 800ff98:	4610      	mov	r0, r2
 800ff9a:	f7fe fb82 	bl	800e6a2 <vListInsertEnd>
 800ff9e:	e005      	b.n	800ffac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	3318      	adds	r3, #24
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	480e      	ldr	r0, [pc, #56]	@ (800ffe0 <xTaskRemoveFromEventList+0xbc>)
 800ffa8:	f7fe fb7b 	bl	800e6a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffb0:	4b0c      	ldr	r3, [pc, #48]	@ (800ffe4 <xTaskRemoveFromEventList+0xc0>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d905      	bls.n	800ffc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffbe:	4b0a      	ldr	r3, [pc, #40]	@ (800ffe8 <xTaskRemoveFromEventList+0xc4>)
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	601a      	str	r2, [r3, #0]
 800ffc4:	e001      	b.n	800ffca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffca:	697b      	ldr	r3, [r7, #20]
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3718      	adds	r7, #24
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	240339e4 	.word	0x240339e4
 800ffd8:	240339c4 	.word	0x240339c4
 800ffdc:	240334ec 	.word	0x240334ec
 800ffe0:	2403397c 	.word	0x2403397c
 800ffe4:	240334e8 	.word	0x240334e8
 800ffe8:	240339d0 	.word	0x240339d0

0800ffec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d10b      	bne.n	8010012 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800fffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fffe:	f383 8811 	msr	BASEPRI, r3
 8010002:	f3bf 8f6f 	isb	sy
 8010006:	f3bf 8f4f 	dsb	sy
 801000a:	60fb      	str	r3, [r7, #12]
}
 801000c:	bf00      	nop
 801000e:	bf00      	nop
 8010010:	e7fd      	b.n	801000e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8010012:	f001 f9f9 	bl	8011408 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010016:	4b07      	ldr	r3, [pc, #28]	@ (8010034 <vTaskSetTimeOutState+0x48>)
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 801001e:	4b06      	ldr	r3, [pc, #24]	@ (8010038 <vTaskSetTimeOutState+0x4c>)
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8010026:	f001 fa21 	bl	801146c <vPortExitCritical>
}
 801002a:	bf00      	nop
 801002c:	3710      	adds	r7, #16
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	240339d4 	.word	0x240339d4
 8010038:	240339c0 	.word	0x240339c0

0801003c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010044:	4b06      	ldr	r3, [pc, #24]	@ (8010060 <vTaskInternalSetTimeOutState+0x24>)
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801004c:	4b05      	ldr	r3, [pc, #20]	@ (8010064 <vTaskInternalSetTimeOutState+0x28>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	605a      	str	r2, [r3, #4]
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr
 8010060:	240339d4 	.word	0x240339d4
 8010064:	240339c0 	.word	0x240339c0

08010068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b088      	sub	sp, #32
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d10b      	bne.n	8010090 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801007c:	f383 8811 	msr	BASEPRI, r3
 8010080:	f3bf 8f6f 	isb	sy
 8010084:	f3bf 8f4f 	dsb	sy
 8010088:	613b      	str	r3, [r7, #16]
}
 801008a:	bf00      	nop
 801008c:	bf00      	nop
 801008e:	e7fd      	b.n	801008c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10b      	bne.n	80100ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801009a:	f383 8811 	msr	BASEPRI, r3
 801009e:	f3bf 8f6f 	isb	sy
 80100a2:	f3bf 8f4f 	dsb	sy
 80100a6:	60fb      	str	r3, [r7, #12]
}
 80100a8:	bf00      	nop
 80100aa:	bf00      	nop
 80100ac:	e7fd      	b.n	80100aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80100ae:	f001 f9ab 	bl	8011408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80100b2:	4b1d      	ldr	r3, [pc, #116]	@ (8010128 <xTaskCheckForTimeOut+0xc0>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	69ba      	ldr	r2, [r7, #24]
 80100be:	1ad3      	subs	r3, r2, r3
 80100c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100ca:	d102      	bne.n	80100d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100cc:	2300      	movs	r3, #0
 80100ce:	61fb      	str	r3, [r7, #28]
 80100d0:	e023      	b.n	801011a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	4b15      	ldr	r3, [pc, #84]	@ (801012c <xTaskCheckForTimeOut+0xc4>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d007      	beq.n	80100ee <xTaskCheckForTimeOut+0x86>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	69ba      	ldr	r2, [r7, #24]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d302      	bcc.n	80100ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100e8:	2301      	movs	r3, #1
 80100ea:	61fb      	str	r3, [r7, #28]
 80100ec:	e015      	b.n	801011a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	697a      	ldr	r2, [r7, #20]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d20b      	bcs.n	8010110 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	1ad2      	subs	r2, r2, r3
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7ff ff99 	bl	801003c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801010a:	2300      	movs	r3, #0
 801010c:	61fb      	str	r3, [r7, #28]
 801010e:	e004      	b.n	801011a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	2200      	movs	r2, #0
 8010114:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010116:	2301      	movs	r3, #1
 8010118:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801011a:	f001 f9a7 	bl	801146c <vPortExitCritical>

	return xReturn;
 801011e:	69fb      	ldr	r3, [r7, #28]
}
 8010120:	4618      	mov	r0, r3
 8010122:	3720      	adds	r7, #32
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	240339c0 	.word	0x240339c0
 801012c:	240339d4 	.word	0x240339d4

08010130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010130:	b480      	push	{r7}
 8010132:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010134:	4b03      	ldr	r3, [pc, #12]	@ (8010144 <vTaskMissedYield+0x14>)
 8010136:	2201      	movs	r2, #1
 8010138:	601a      	str	r2, [r3, #0]
}
 801013a:	bf00      	nop
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr
 8010144:	240339d0 	.word	0x240339d0

08010148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010150:	f000 f852 	bl	80101f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010154:	4b06      	ldr	r3, [pc, #24]	@ (8010170 <prvIdleTask+0x28>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2b01      	cmp	r3, #1
 801015a:	d9f9      	bls.n	8010150 <prvIdleTask+0x8>
			{
				taskYIELD();
 801015c:	4b05      	ldr	r3, [pc, #20]	@ (8010174 <prvIdleTask+0x2c>)
 801015e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	f3bf 8f4f 	dsb	sy
 8010168:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801016c:	e7f0      	b.n	8010150 <prvIdleTask+0x8>
 801016e:	bf00      	nop
 8010170:	240334ec 	.word	0x240334ec
 8010174:	e000ed04 	.word	0xe000ed04

08010178 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801017e:	2300      	movs	r3, #0
 8010180:	607b      	str	r3, [r7, #4]
 8010182:	e00c      	b.n	801019e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	4613      	mov	r3, r2
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	4413      	add	r3, r2
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	4a12      	ldr	r2, [pc, #72]	@ (80101d8 <prvInitialiseTaskLists+0x60>)
 8010190:	4413      	add	r3, r2
 8010192:	4618      	mov	r0, r3
 8010194:	f7fe fa58 	bl	800e648 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3301      	adds	r3, #1
 801019c:	607b      	str	r3, [r7, #4]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2b37      	cmp	r3, #55	@ 0x37
 80101a2:	d9ef      	bls.n	8010184 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101a4:	480d      	ldr	r0, [pc, #52]	@ (80101dc <prvInitialiseTaskLists+0x64>)
 80101a6:	f7fe fa4f 	bl	800e648 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80101aa:	480d      	ldr	r0, [pc, #52]	@ (80101e0 <prvInitialiseTaskLists+0x68>)
 80101ac:	f7fe fa4c 	bl	800e648 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80101b0:	480c      	ldr	r0, [pc, #48]	@ (80101e4 <prvInitialiseTaskLists+0x6c>)
 80101b2:	f7fe fa49 	bl	800e648 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80101b6:	480c      	ldr	r0, [pc, #48]	@ (80101e8 <prvInitialiseTaskLists+0x70>)
 80101b8:	f7fe fa46 	bl	800e648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101bc:	480b      	ldr	r0, [pc, #44]	@ (80101ec <prvInitialiseTaskLists+0x74>)
 80101be:	f7fe fa43 	bl	800e648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101c2:	4b0b      	ldr	r3, [pc, #44]	@ (80101f0 <prvInitialiseTaskLists+0x78>)
 80101c4:	4a05      	ldr	r2, [pc, #20]	@ (80101dc <prvInitialiseTaskLists+0x64>)
 80101c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101c8:	4b0a      	ldr	r3, [pc, #40]	@ (80101f4 <prvInitialiseTaskLists+0x7c>)
 80101ca:	4a05      	ldr	r2, [pc, #20]	@ (80101e0 <prvInitialiseTaskLists+0x68>)
 80101cc:	601a      	str	r2, [r3, #0]
}
 80101ce:	bf00      	nop
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	240334ec 	.word	0x240334ec
 80101dc:	2403394c 	.word	0x2403394c
 80101e0:	24033960 	.word	0x24033960
 80101e4:	2403397c 	.word	0x2403397c
 80101e8:	24033990 	.word	0x24033990
 80101ec:	240339a8 	.word	0x240339a8
 80101f0:	24033974 	.word	0x24033974
 80101f4:	24033978 	.word	0x24033978

080101f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101fe:	e019      	b.n	8010234 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010200:	f001 f902 	bl	8011408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010204:	4b10      	ldr	r3, [pc, #64]	@ (8010248 <prvCheckTasksWaitingTermination+0x50>)
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	68db      	ldr	r3, [r3, #12]
 801020a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	3304      	adds	r3, #4
 8010210:	4618      	mov	r0, r3
 8010212:	f7fe faa3 	bl	800e75c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010216:	4b0d      	ldr	r3, [pc, #52]	@ (801024c <prvCheckTasksWaitingTermination+0x54>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	3b01      	subs	r3, #1
 801021c:	4a0b      	ldr	r2, [pc, #44]	@ (801024c <prvCheckTasksWaitingTermination+0x54>)
 801021e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010220:	4b0b      	ldr	r3, [pc, #44]	@ (8010250 <prvCheckTasksWaitingTermination+0x58>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	3b01      	subs	r3, #1
 8010226:	4a0a      	ldr	r2, [pc, #40]	@ (8010250 <prvCheckTasksWaitingTermination+0x58>)
 8010228:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801022a:	f001 f91f 	bl	801146c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f000 f810 	bl	8010254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010234:	4b06      	ldr	r3, [pc, #24]	@ (8010250 <prvCheckTasksWaitingTermination+0x58>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d1e1      	bne.n	8010200 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801023c:	bf00      	nop
 801023e:	bf00      	nop
 8010240:	3708      	adds	r7, #8
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	24033990 	.word	0x24033990
 801024c:	240339bc 	.word	0x240339bc
 8010250:	240339a4 	.word	0x240339a4

08010254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	3354      	adds	r3, #84	@ 0x54
 8010260:	4618      	mov	r0, r3
 8010262:	f012 f883 	bl	802236c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801026c:	2b00      	cmp	r3, #0
 801026e:	d108      	bne.n	8010282 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010274:	4618      	mov	r0, r3
 8010276:	f001 fab7 	bl	80117e8 <vPortFree>
				vPortFree( pxTCB );
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f001 fab4 	bl	80117e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010280:	e019      	b.n	80102b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010288:	2b01      	cmp	r3, #1
 801028a:	d103      	bne.n	8010294 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f001 faab 	bl	80117e8 <vPortFree>
	}
 8010292:	e010      	b.n	80102b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801029a:	2b02      	cmp	r3, #2
 801029c:	d00b      	beq.n	80102b6 <prvDeleteTCB+0x62>
	__asm volatile
 801029e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102a2:	f383 8811 	msr	BASEPRI, r3
 80102a6:	f3bf 8f6f 	isb	sy
 80102aa:	f3bf 8f4f 	dsb	sy
 80102ae:	60fb      	str	r3, [r7, #12]
}
 80102b0:	bf00      	nop
 80102b2:	bf00      	nop
 80102b4:	e7fd      	b.n	80102b2 <prvDeleteTCB+0x5e>
	}
 80102b6:	bf00      	nop
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
	...

080102c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102c6:	4b0c      	ldr	r3, [pc, #48]	@ (80102f8 <prvResetNextTaskUnblockTime+0x38>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d104      	bne.n	80102da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102d0:	4b0a      	ldr	r3, [pc, #40]	@ (80102fc <prvResetNextTaskUnblockTime+0x3c>)
 80102d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102d8:	e008      	b.n	80102ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102da:	4b07      	ldr	r3, [pc, #28]	@ (80102f8 <prvResetNextTaskUnblockTime+0x38>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	4a04      	ldr	r2, [pc, #16]	@ (80102fc <prvResetNextTaskUnblockTime+0x3c>)
 80102ea:	6013      	str	r3, [r2, #0]
}
 80102ec:	bf00      	nop
 80102ee:	370c      	adds	r7, #12
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr
 80102f8:	24033974 	.word	0x24033974
 80102fc:	240339dc 	.word	0x240339dc

08010300 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010306:	4b05      	ldr	r3, [pc, #20]	@ (801031c <xTaskGetCurrentTaskHandle+0x1c>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801030c:	687b      	ldr	r3, [r7, #4]
	}
 801030e:	4618      	mov	r0, r3
 8010310:	370c      	adds	r7, #12
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	240334e8 	.word	0x240334e8

08010320 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010326:	4b0b      	ldr	r3, [pc, #44]	@ (8010354 <xTaskGetSchedulerState+0x34>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d102      	bne.n	8010334 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801032e:	2301      	movs	r3, #1
 8010330:	607b      	str	r3, [r7, #4]
 8010332:	e008      	b.n	8010346 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010334:	4b08      	ldr	r3, [pc, #32]	@ (8010358 <xTaskGetSchedulerState+0x38>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d102      	bne.n	8010342 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801033c:	2302      	movs	r3, #2
 801033e:	607b      	str	r3, [r7, #4]
 8010340:	e001      	b.n	8010346 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010342:	2300      	movs	r3, #0
 8010344:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010346:	687b      	ldr	r3, [r7, #4]
	}
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr
 8010354:	240339c8 	.word	0x240339c8
 8010358:	240339e4 	.word	0x240339e4

0801035c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010368:	2300      	movs	r3, #0
 801036a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d051      	beq.n	8010416 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010376:	4b2a      	ldr	r3, [pc, #168]	@ (8010420 <xTaskPriorityInherit+0xc4>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801037c:	429a      	cmp	r2, r3
 801037e:	d241      	bcs.n	8010404 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	699b      	ldr	r3, [r3, #24]
 8010384:	2b00      	cmp	r3, #0
 8010386:	db06      	blt.n	8010396 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010388:	4b25      	ldr	r3, [pc, #148]	@ (8010420 <xTaskPriorityInherit+0xc4>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801038e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	6959      	ldr	r1, [r3, #20]
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801039e:	4613      	mov	r3, r2
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	4413      	add	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	4a1f      	ldr	r2, [pc, #124]	@ (8010424 <xTaskPriorityInherit+0xc8>)
 80103a8:	4413      	add	r3, r2
 80103aa:	4299      	cmp	r1, r3
 80103ac:	d122      	bne.n	80103f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	3304      	adds	r3, #4
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fe f9d2 	bl	800e75c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103b8:	4b19      	ldr	r3, [pc, #100]	@ (8010420 <xTaskPriorityInherit+0xc4>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103c6:	4b18      	ldr	r3, [pc, #96]	@ (8010428 <xTaskPriorityInherit+0xcc>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d903      	bls.n	80103d6 <xTaskPriorityInherit+0x7a>
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103d2:	4a15      	ldr	r2, [pc, #84]	@ (8010428 <xTaskPriorityInherit+0xcc>)
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103da:	4613      	mov	r3, r2
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	4413      	add	r3, r2
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	4a10      	ldr	r2, [pc, #64]	@ (8010424 <xTaskPriorityInherit+0xc8>)
 80103e4:	441a      	add	r2, r3
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	3304      	adds	r3, #4
 80103ea:	4619      	mov	r1, r3
 80103ec:	4610      	mov	r0, r2
 80103ee:	f7fe f958 	bl	800e6a2 <vListInsertEnd>
 80103f2:	e004      	b.n	80103fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010420 <xTaskPriorityInherit+0xc4>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80103fe:	2301      	movs	r3, #1
 8010400:	60fb      	str	r3, [r7, #12]
 8010402:	e008      	b.n	8010416 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010408:	4b05      	ldr	r3, [pc, #20]	@ (8010420 <xTaskPriorityInherit+0xc4>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801040e:	429a      	cmp	r2, r3
 8010410:	d201      	bcs.n	8010416 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010412:	2301      	movs	r3, #1
 8010414:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010416:	68fb      	ldr	r3, [r7, #12]
	}
 8010418:	4618      	mov	r0, r3
 801041a:	3710      	adds	r7, #16
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	240334e8 	.word	0x240334e8
 8010424:	240334ec 	.word	0x240334ec
 8010428:	240339c4 	.word	0x240339c4

0801042c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801042c:	b580      	push	{r7, lr}
 801042e:	b086      	sub	sp, #24
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010438:	2300      	movs	r3, #0
 801043a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d058      	beq.n	80104f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010442:	4b2f      	ldr	r3, [pc, #188]	@ (8010500 <xTaskPriorityDisinherit+0xd4>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	693a      	ldr	r2, [r7, #16]
 8010448:	429a      	cmp	r2, r3
 801044a:	d00b      	beq.n	8010464 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801044c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010450:	f383 8811 	msr	BASEPRI, r3
 8010454:	f3bf 8f6f 	isb	sy
 8010458:	f3bf 8f4f 	dsb	sy
 801045c:	60fb      	str	r3, [r7, #12]
}
 801045e:	bf00      	nop
 8010460:	bf00      	nop
 8010462:	e7fd      	b.n	8010460 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010468:	2b00      	cmp	r3, #0
 801046a:	d10b      	bne.n	8010484 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801046c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	60bb      	str	r3, [r7, #8]
}
 801047e:	bf00      	nop
 8010480:	bf00      	nop
 8010482:	e7fd      	b.n	8010480 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010488:	1e5a      	subs	r2, r3, #1
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010496:	429a      	cmp	r2, r3
 8010498:	d02c      	beq.n	80104f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d128      	bne.n	80104f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	3304      	adds	r3, #4
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fe f958 	bl	800e75c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104c4:	4b0f      	ldr	r3, [pc, #60]	@ (8010504 <xTaskPriorityDisinherit+0xd8>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d903      	bls.n	80104d4 <xTaskPriorityDisinherit+0xa8>
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104d0:	4a0c      	ldr	r2, [pc, #48]	@ (8010504 <xTaskPriorityDisinherit+0xd8>)
 80104d2:	6013      	str	r3, [r2, #0]
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104d8:	4613      	mov	r3, r2
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	4413      	add	r3, r2
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	4a09      	ldr	r2, [pc, #36]	@ (8010508 <xTaskPriorityDisinherit+0xdc>)
 80104e2:	441a      	add	r2, r3
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	3304      	adds	r3, #4
 80104e8:	4619      	mov	r1, r3
 80104ea:	4610      	mov	r0, r2
 80104ec:	f7fe f8d9 	bl	800e6a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104f0:	2301      	movs	r3, #1
 80104f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104f4:	697b      	ldr	r3, [r7, #20]
	}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3718      	adds	r7, #24
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	240334e8 	.word	0x240334e8
 8010504:	240339c4 	.word	0x240339c4
 8010508:	240334ec 	.word	0x240334ec

0801050c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801050c:	b580      	push	{r7, lr}
 801050e:	b088      	sub	sp, #32
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801051a:	2301      	movs	r3, #1
 801051c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d06c      	beq.n	80105fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010528:	2b00      	cmp	r3, #0
 801052a:	d10b      	bne.n	8010544 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801052c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	60fb      	str	r3, [r7, #12]
}
 801053e:	bf00      	nop
 8010540:	bf00      	nop
 8010542:	e7fd      	b.n	8010540 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010548:	683a      	ldr	r2, [r7, #0]
 801054a:	429a      	cmp	r2, r3
 801054c:	d902      	bls.n	8010554 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	61fb      	str	r3, [r7, #28]
 8010552:	e002      	b.n	801055a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010554:	69bb      	ldr	r3, [r7, #24]
 8010556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010558:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801055e:	69fa      	ldr	r2, [r7, #28]
 8010560:	429a      	cmp	r2, r3
 8010562:	d04c      	beq.n	80105fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010568:	697a      	ldr	r2, [r7, #20]
 801056a:	429a      	cmp	r2, r3
 801056c:	d147      	bne.n	80105fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801056e:	4b26      	ldr	r3, [pc, #152]	@ (8010608 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	69ba      	ldr	r2, [r7, #24]
 8010574:	429a      	cmp	r2, r3
 8010576:	d10b      	bne.n	8010590 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801057c:	f383 8811 	msr	BASEPRI, r3
 8010580:	f3bf 8f6f 	isb	sy
 8010584:	f3bf 8f4f 	dsb	sy
 8010588:	60bb      	str	r3, [r7, #8]
}
 801058a:	bf00      	nop
 801058c:	bf00      	nop
 801058e:	e7fd      	b.n	801058c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010594:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	69fa      	ldr	r2, [r7, #28]
 801059a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	699b      	ldr	r3, [r3, #24]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	db04      	blt.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	6959      	ldr	r1, [r3, #20]
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	4613      	mov	r3, r2
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	4413      	add	r3, r2
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4a13      	ldr	r2, [pc, #76]	@ (801060c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80105be:	4413      	add	r3, r2
 80105c0:	4299      	cmp	r1, r3
 80105c2:	d11c      	bne.n	80105fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105c4:	69bb      	ldr	r3, [r7, #24]
 80105c6:	3304      	adds	r3, #4
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fe f8c7 	bl	800e75c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105d2:	4b0f      	ldr	r3, [pc, #60]	@ (8010610 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d903      	bls.n	80105e2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105de:	4a0c      	ldr	r2, [pc, #48]	@ (8010610 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80105e0:	6013      	str	r3, [r2, #0]
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105e6:	4613      	mov	r3, r2
 80105e8:	009b      	lsls	r3, r3, #2
 80105ea:	4413      	add	r3, r2
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	4a07      	ldr	r2, [pc, #28]	@ (801060c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80105f0:	441a      	add	r2, r3
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	3304      	adds	r3, #4
 80105f6:	4619      	mov	r1, r3
 80105f8:	4610      	mov	r0, r2
 80105fa:	f7fe f852 	bl	800e6a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105fe:	bf00      	nop
 8010600:	3720      	adds	r7, #32
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	240334e8 	.word	0x240334e8
 801060c:	240334ec 	.word	0x240334ec
 8010610:	240339c4 	.word	0x240339c4

08010614 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010614:	b480      	push	{r7}
 8010616:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010618:	4b07      	ldr	r3, [pc, #28]	@ (8010638 <pvTaskIncrementMutexHeldCount+0x24>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d004      	beq.n	801062a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010620:	4b05      	ldr	r3, [pc, #20]	@ (8010638 <pvTaskIncrementMutexHeldCount+0x24>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010626:	3201      	adds	r2, #1
 8010628:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801062a:	4b03      	ldr	r3, [pc, #12]	@ (8010638 <pvTaskIncrementMutexHeldCount+0x24>)
 801062c:	681b      	ldr	r3, [r3, #0]
	}
 801062e:	4618      	mov	r0, r3
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr
 8010638:	240334e8 	.word	0x240334e8

0801063c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	607a      	str	r2, [r7, #4]
 8010648:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801064a:	f000 fedd 	bl	8011408 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801064e:	4b29      	ldr	r3, [pc, #164]	@ (80106f4 <xTaskNotifyWait+0xb8>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b02      	cmp	r3, #2
 801065a:	d01c      	beq.n	8010696 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801065c:	4b25      	ldr	r3, [pc, #148]	@ (80106f4 <xTaskNotifyWait+0xb8>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	43d2      	mvns	r2, r2
 8010668:	400a      	ands	r2, r1
 801066a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801066e:	4b21      	ldr	r3, [pc, #132]	@ (80106f4 <xTaskNotifyWait+0xb8>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2201      	movs	r2, #1
 8010674:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00b      	beq.n	8010696 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801067e:	2101      	movs	r1, #1
 8010680:	6838      	ldr	r0, [r7, #0]
 8010682:	f000 f9e3 	bl	8010a4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010686:	4b1c      	ldr	r3, [pc, #112]	@ (80106f8 <xTaskNotifyWait+0xbc>)
 8010688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	f3bf 8f4f 	dsb	sy
 8010692:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010696:	f000 fee9 	bl	801146c <vPortExitCritical>

		taskENTER_CRITICAL();
 801069a:	f000 feb5 	bl	8011408 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d005      	beq.n	80106b0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80106a4:	4b13      	ldr	r3, [pc, #76]	@ (80106f4 <xTaskNotifyWait+0xb8>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80106b0:	4b10      	ldr	r3, [pc, #64]	@ (80106f4 <xTaskNotifyWait+0xb8>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b02      	cmp	r3, #2
 80106bc:	d002      	beq.n	80106c4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80106be:	2300      	movs	r3, #0
 80106c0:	617b      	str	r3, [r7, #20]
 80106c2:	e00a      	b.n	80106da <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80106c4:	4b0b      	ldr	r3, [pc, #44]	@ (80106f4 <xTaskNotifyWait+0xb8>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80106cc:	68ba      	ldr	r2, [r7, #8]
 80106ce:	43d2      	mvns	r2, r2
 80106d0:	400a      	ands	r2, r1
 80106d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80106d6:	2301      	movs	r3, #1
 80106d8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80106da:	4b06      	ldr	r3, [pc, #24]	@ (80106f4 <xTaskNotifyWait+0xb8>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2200      	movs	r2, #0
 80106e0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80106e4:	f000 fec2 	bl	801146c <vPortExitCritical>

		return xReturn;
 80106e8:	697b      	ldr	r3, [r7, #20]
	}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3718      	adds	r7, #24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	240334e8 	.word	0x240334e8
 80106f8:	e000ed04 	.word	0xe000ed04

080106fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b08a      	sub	sp, #40	@ 0x28
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	4613      	mov	r3, r2
 801070a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801070c:	2301      	movs	r3, #1
 801070e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10b      	bne.n	801072e <xTaskGenericNotify+0x32>
	__asm volatile
 8010716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801071a:	f383 8811 	msr	BASEPRI, r3
 801071e:	f3bf 8f6f 	isb	sy
 8010722:	f3bf 8f4f 	dsb	sy
 8010726:	61bb      	str	r3, [r7, #24]
}
 8010728:	bf00      	nop
 801072a:	bf00      	nop
 801072c:	e7fd      	b.n	801072a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010732:	f000 fe69 	bl	8011408 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d004      	beq.n	8010746 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801073c:	6a3b      	ldr	r3, [r7, #32]
 801073e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010746:	6a3b      	ldr	r3, [r7, #32]
 8010748:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801074c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801074e:	6a3b      	ldr	r3, [r7, #32]
 8010750:	2202      	movs	r2, #2
 8010752:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8010756:	79fb      	ldrb	r3, [r7, #7]
 8010758:	2b04      	cmp	r3, #4
 801075a:	d82e      	bhi.n	80107ba <xTaskGenericNotify+0xbe>
 801075c:	a201      	add	r2, pc, #4	@ (adr r2, 8010764 <xTaskGenericNotify+0x68>)
 801075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010762:	bf00      	nop
 8010764:	080107df 	.word	0x080107df
 8010768:	08010779 	.word	0x08010779
 801076c:	0801078b 	.word	0x0801078b
 8010770:	0801079b 	.word	0x0801079b
 8010774:	080107a5 	.word	0x080107a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010778:	6a3b      	ldr	r3, [r7, #32]
 801077a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	431a      	orrs	r2, r3
 8010782:	6a3b      	ldr	r3, [r7, #32]
 8010784:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010788:	e02c      	b.n	80107e4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801078a:	6a3b      	ldr	r3, [r7, #32]
 801078c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010790:	1c5a      	adds	r2, r3, #1
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010798:	e024      	b.n	80107e4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801079a:	6a3b      	ldr	r3, [r7, #32]
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80107a2:	e01f      	b.n	80107e4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80107a4:	7ffb      	ldrb	r3, [r7, #31]
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	d004      	beq.n	80107b4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80107b2:	e017      	b.n	80107e4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80107b4:	2300      	movs	r3, #0
 80107b6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80107b8:	e014      	b.n	80107e4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80107c4:	d00d      	beq.n	80107e2 <xTaskGenericNotify+0xe6>
	__asm volatile
 80107c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	617b      	str	r3, [r7, #20]
}
 80107d8:	bf00      	nop
 80107da:	bf00      	nop
 80107dc:	e7fd      	b.n	80107da <xTaskGenericNotify+0xde>
					break;
 80107de:	bf00      	nop
 80107e0:	e000      	b.n	80107e4 <xTaskGenericNotify+0xe8>

					break;
 80107e2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80107e4:	7ffb      	ldrb	r3, [r7, #31]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d13b      	bne.n	8010862 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	3304      	adds	r3, #4
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fd ffb4 	bl	800e75c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107f8:	4b1d      	ldr	r3, [pc, #116]	@ (8010870 <xTaskGenericNotify+0x174>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d903      	bls.n	8010808 <xTaskGenericNotify+0x10c>
 8010800:	6a3b      	ldr	r3, [r7, #32]
 8010802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010804:	4a1a      	ldr	r2, [pc, #104]	@ (8010870 <xTaskGenericNotify+0x174>)
 8010806:	6013      	str	r3, [r2, #0]
 8010808:	6a3b      	ldr	r3, [r7, #32]
 801080a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801080c:	4613      	mov	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4413      	add	r3, r2
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	4a17      	ldr	r2, [pc, #92]	@ (8010874 <xTaskGenericNotify+0x178>)
 8010816:	441a      	add	r2, r3
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	3304      	adds	r3, #4
 801081c:	4619      	mov	r1, r3
 801081e:	4610      	mov	r0, r2
 8010820:	f7fd ff3f 	bl	800e6a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010824:	6a3b      	ldr	r3, [r7, #32]
 8010826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00b      	beq.n	8010844 <xTaskGenericNotify+0x148>
	__asm volatile
 801082c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010830:	f383 8811 	msr	BASEPRI, r3
 8010834:	f3bf 8f6f 	isb	sy
 8010838:	f3bf 8f4f 	dsb	sy
 801083c:	613b      	str	r3, [r7, #16]
}
 801083e:	bf00      	nop
 8010840:	bf00      	nop
 8010842:	e7fd      	b.n	8010840 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010844:	6a3b      	ldr	r3, [r7, #32]
 8010846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010848:	4b0b      	ldr	r3, [pc, #44]	@ (8010878 <xTaskGenericNotify+0x17c>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801084e:	429a      	cmp	r2, r3
 8010850:	d907      	bls.n	8010862 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010852:	4b0a      	ldr	r3, [pc, #40]	@ (801087c <xTaskGenericNotify+0x180>)
 8010854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	f3bf 8f4f 	dsb	sy
 801085e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010862:	f000 fe03 	bl	801146c <vPortExitCritical>

		return xReturn;
 8010866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010868:	4618      	mov	r0, r3
 801086a:	3728      	adds	r7, #40	@ 0x28
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	240339c4 	.word	0x240339c4
 8010874:	240334ec 	.word	0x240334ec
 8010878:	240334e8 	.word	0x240334e8
 801087c:	e000ed04 	.word	0xe000ed04

08010880 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010880:	b580      	push	{r7, lr}
 8010882:	b08e      	sub	sp, #56	@ 0x38
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	603b      	str	r3, [r7, #0]
 801088c:	4613      	mov	r3, r2
 801088e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010890:	2301      	movs	r3, #1
 8010892:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d10b      	bne.n	80108b2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801089a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801089e:	f383 8811 	msr	BASEPRI, r3
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	f3bf 8f4f 	dsb	sy
 80108aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80108ac:	bf00      	nop
 80108ae:	bf00      	nop
 80108b0:	e7fd      	b.n	80108ae <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108b2:	f000 fe89 	bl	80115c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80108ba:	f3ef 8211 	mrs	r2, BASEPRI
 80108be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	623a      	str	r2, [r7, #32]
 80108d0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80108d2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d004      	beq.n	80108e6 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80108dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80108e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80108ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80108f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f2:	2202      	movs	r2, #2
 80108f4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80108f8:	79fb      	ldrb	r3, [r7, #7]
 80108fa:	2b04      	cmp	r3, #4
 80108fc:	d82e      	bhi.n	801095c <xTaskGenericNotifyFromISR+0xdc>
 80108fe:	a201      	add	r2, pc, #4	@ (adr r2, 8010904 <xTaskGenericNotifyFromISR+0x84>)
 8010900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010904:	08010981 	.word	0x08010981
 8010908:	08010919 	.word	0x08010919
 801090c:	0801092b 	.word	0x0801092b
 8010910:	0801093b 	.word	0x0801093b
 8010914:	08010945 	.word	0x08010945
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801091a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	431a      	orrs	r2, r3
 8010922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010924:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010928:	e02d      	b.n	8010986 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801092a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010930:	1c5a      	adds	r2, r3, #1
 8010932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010934:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010938:	e025      	b.n	8010986 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8010942:	e020      	b.n	8010986 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010944:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010948:	2b02      	cmp	r3, #2
 801094a:	d004      	beq.n	8010956 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801094c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094e:	68ba      	ldr	r2, [r7, #8]
 8010950:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010954:	e017      	b.n	8010986 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8010956:	2300      	movs	r3, #0
 8010958:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 801095a:	e014      	b.n	8010986 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801095c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801095e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010966:	d00d      	beq.n	8010984 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8010968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801096c:	f383 8811 	msr	BASEPRI, r3
 8010970:	f3bf 8f6f 	isb	sy
 8010974:	f3bf 8f4f 	dsb	sy
 8010978:	61bb      	str	r3, [r7, #24]
}
 801097a:	bf00      	nop
 801097c:	bf00      	nop
 801097e:	e7fd      	b.n	801097c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010980:	bf00      	nop
 8010982:	e000      	b.n	8010986 <xTaskGenericNotifyFromISR+0x106>
					break;
 8010984:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010986:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801098a:	2b01      	cmp	r3, #1
 801098c:	d147      	bne.n	8010a1e <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801098e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00b      	beq.n	80109ae <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8010996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801099a:	f383 8811 	msr	BASEPRI, r3
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f3bf 8f4f 	dsb	sy
 80109a6:	617b      	str	r3, [r7, #20]
}
 80109a8:	bf00      	nop
 80109aa:	bf00      	nop
 80109ac:	e7fd      	b.n	80109aa <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109ae:	4b21      	ldr	r3, [pc, #132]	@ (8010a34 <xTaskGenericNotifyFromISR+0x1b4>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d11d      	bne.n	80109f2 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b8:	3304      	adds	r3, #4
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fd fece 	bl	800e75c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80109c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109c4:	4b1c      	ldr	r3, [pc, #112]	@ (8010a38 <xTaskGenericNotifyFromISR+0x1b8>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d903      	bls.n	80109d4 <xTaskGenericNotifyFromISR+0x154>
 80109cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109d0:	4a19      	ldr	r2, [pc, #100]	@ (8010a38 <xTaskGenericNotifyFromISR+0x1b8>)
 80109d2:	6013      	str	r3, [r2, #0]
 80109d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109d8:	4613      	mov	r3, r2
 80109da:	009b      	lsls	r3, r3, #2
 80109dc:	4413      	add	r3, r2
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	4a16      	ldr	r2, [pc, #88]	@ (8010a3c <xTaskGenericNotifyFromISR+0x1bc>)
 80109e2:	441a      	add	r2, r3
 80109e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e6:	3304      	adds	r3, #4
 80109e8:	4619      	mov	r1, r3
 80109ea:	4610      	mov	r0, r2
 80109ec:	f7fd fe59 	bl	800e6a2 <vListInsertEnd>
 80109f0:	e005      	b.n	80109fe <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80109f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f4:	3318      	adds	r3, #24
 80109f6:	4619      	mov	r1, r3
 80109f8:	4811      	ldr	r0, [pc, #68]	@ (8010a40 <xTaskGenericNotifyFromISR+0x1c0>)
 80109fa:	f7fd fe52 	bl	800e6a2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a02:	4b10      	ldr	r3, [pc, #64]	@ (8010a44 <xTaskGenericNotifyFromISR+0x1c4>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d908      	bls.n	8010a1e <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d002      	beq.n	8010a18 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a14:	2201      	movs	r2, #1
 8010a16:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010a18:	4b0b      	ldr	r3, [pc, #44]	@ (8010a48 <xTaskGenericNotifyFromISR+0x1c8>)
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	f383 8811 	msr	BASEPRI, r3
}
 8010a28:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3738      	adds	r7, #56	@ 0x38
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	240339e4 	.word	0x240339e4
 8010a38:	240339c4 	.word	0x240339c4
 8010a3c:	240334ec 	.word	0x240334ec
 8010a40:	2403397c 	.word	0x2403397c
 8010a44:	240334e8 	.word	0x240334e8
 8010a48:	240339d0 	.word	0x240339d0

08010a4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a56:	4b21      	ldr	r3, [pc, #132]	@ (8010adc <prvAddCurrentTaskToDelayedList+0x90>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a5c:	4b20      	ldr	r3, [pc, #128]	@ (8010ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	3304      	adds	r3, #4
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fd fe7a 	bl	800e75c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010a6e:	d10a      	bne.n	8010a86 <prvAddCurrentTaskToDelayedList+0x3a>
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d007      	beq.n	8010a86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a76:	4b1a      	ldr	r3, [pc, #104]	@ (8010ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	4819      	ldr	r0, [pc, #100]	@ (8010ae4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010a80:	f7fd fe0f 	bl	800e6a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a84:	e026      	b.n	8010ad4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a86:	68fa      	ldr	r2, [r7, #12]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	4413      	add	r3, r2
 8010a8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a8e:	4b14      	ldr	r3, [pc, #80]	@ (8010ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68ba      	ldr	r2, [r7, #8]
 8010a94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d209      	bcs.n	8010ab2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a9e:	4b12      	ldr	r3, [pc, #72]	@ (8010ae8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8010ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	3304      	adds	r3, #4
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	4610      	mov	r0, r2
 8010aac:	f7fd fe1d 	bl	800e6ea <vListInsert>
}
 8010ab0:	e010      	b.n	8010ad4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8010aec <prvAddCurrentTaskToDelayedList+0xa0>)
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8010ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3304      	adds	r3, #4
 8010abc:	4619      	mov	r1, r3
 8010abe:	4610      	mov	r0, r2
 8010ac0:	f7fd fe13 	bl	800e6ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8010af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d202      	bcs.n	8010ad4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010ace:	4a08      	ldr	r2, [pc, #32]	@ (8010af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	6013      	str	r3, [r2, #0]
}
 8010ad4:	bf00      	nop
 8010ad6:	3710      	adds	r7, #16
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	240339c0 	.word	0x240339c0
 8010ae0:	240334e8 	.word	0x240334e8
 8010ae4:	240339a8 	.word	0x240339a8
 8010ae8:	24033978 	.word	0x24033978
 8010aec:	24033974 	.word	0x24033974
 8010af0:	240339dc 	.word	0x240339dc

08010af4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08a      	sub	sp, #40	@ 0x28
 8010af8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010afa:	2300      	movs	r3, #0
 8010afc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010afe:	f000 fb13 	bl	8011128 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010b02:	4b1d      	ldr	r3, [pc, #116]	@ (8010b78 <xTimerCreateTimerTask+0x84>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d021      	beq.n	8010b4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b12:	1d3a      	adds	r2, r7, #4
 8010b14:	f107 0108 	add.w	r1, r7, #8
 8010b18:	f107 030c 	add.w	r3, r7, #12
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fd fd79 	bl	800e614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b22:	6879      	ldr	r1, [r7, #4]
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	9202      	str	r2, [sp, #8]
 8010b2a:	9301      	str	r3, [sp, #4]
 8010b2c:	2302      	movs	r3, #2
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	2300      	movs	r3, #0
 8010b32:	460a      	mov	r2, r1
 8010b34:	4911      	ldr	r1, [pc, #68]	@ (8010b7c <xTimerCreateTimerTask+0x88>)
 8010b36:	4812      	ldr	r0, [pc, #72]	@ (8010b80 <xTimerCreateTimerTask+0x8c>)
 8010b38:	f7fe fd50 	bl	800f5dc <xTaskCreateStatic>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	4a11      	ldr	r2, [pc, #68]	@ (8010b84 <xTimerCreateTimerTask+0x90>)
 8010b40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b42:	4b10      	ldr	r3, [pc, #64]	@ (8010b84 <xTimerCreateTimerTask+0x90>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d10b      	bne.n	8010b6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b58:	f383 8811 	msr	BASEPRI, r3
 8010b5c:	f3bf 8f6f 	isb	sy
 8010b60:	f3bf 8f4f 	dsb	sy
 8010b64:	613b      	str	r3, [r7, #16]
}
 8010b66:	bf00      	nop
 8010b68:	bf00      	nop
 8010b6a:	e7fd      	b.n	8010b68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010b6c:	697b      	ldr	r3, [r7, #20]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3718      	adds	r7, #24
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	24033a18 	.word	0x24033a18
 8010b7c:	08023430 	.word	0x08023430
 8010b80:	08010cc1 	.word	0x08010cc1
 8010b84:	24033a1c 	.word	0x24033a1c

08010b88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b08a      	sub	sp, #40	@ 0x28
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	607a      	str	r2, [r7, #4]
 8010b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010b96:	2300      	movs	r3, #0
 8010b98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d10b      	bne.n	8010bb8 <xTimerGenericCommand+0x30>
	__asm volatile
 8010ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ba4:	f383 8811 	msr	BASEPRI, r3
 8010ba8:	f3bf 8f6f 	isb	sy
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	623b      	str	r3, [r7, #32]
}
 8010bb2:	bf00      	nop
 8010bb4:	bf00      	nop
 8010bb6:	e7fd      	b.n	8010bb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010bb8:	4b19      	ldr	r3, [pc, #100]	@ (8010c20 <xTimerGenericCommand+0x98>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d02a      	beq.n	8010c16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	2b05      	cmp	r3, #5
 8010bd0:	dc18      	bgt.n	8010c04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010bd2:	f7ff fba5 	bl	8010320 <xTaskGetSchedulerState>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b02      	cmp	r3, #2
 8010bda:	d109      	bne.n	8010bf0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010bdc:	4b10      	ldr	r3, [pc, #64]	@ (8010c20 <xTimerGenericCommand+0x98>)
 8010bde:	6818      	ldr	r0, [r3, #0]
 8010be0:	f107 0110 	add.w	r1, r7, #16
 8010be4:	2300      	movs	r3, #0
 8010be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010be8:	f7fd ffe0 	bl	800ebac <xQueueGenericSend>
 8010bec:	6278      	str	r0, [r7, #36]	@ 0x24
 8010bee:	e012      	b.n	8010c16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8010c20 <xTimerGenericCommand+0x98>)
 8010bf2:	6818      	ldr	r0, [r3, #0]
 8010bf4:	f107 0110 	add.w	r1, r7, #16
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f7fd ffd6 	bl	800ebac <xQueueGenericSend>
 8010c00:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c02:	e008      	b.n	8010c16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010c04:	4b06      	ldr	r3, [pc, #24]	@ (8010c20 <xTimerGenericCommand+0x98>)
 8010c06:	6818      	ldr	r0, [r3, #0]
 8010c08:	f107 0110 	add.w	r1, r7, #16
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	683a      	ldr	r2, [r7, #0]
 8010c10:	f7fe f8ce 	bl	800edb0 <xQueueGenericSendFromISR>
 8010c14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3728      	adds	r7, #40	@ 0x28
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	24033a18 	.word	0x24033a18

08010c24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b088      	sub	sp, #32
 8010c28:	af02      	add	r7, sp, #8
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c2e:	4b23      	ldr	r3, [pc, #140]	@ (8010cbc <prvProcessExpiredTimer+0x98>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	68db      	ldr	r3, [r3, #12]
 8010c36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	3304      	adds	r3, #4
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7fd fd8d 	bl	800e75c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c48:	f003 0304 	and.w	r3, r3, #4
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d023      	beq.n	8010c98 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	699a      	ldr	r2, [r3, #24]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	18d1      	adds	r1, r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	683a      	ldr	r2, [r7, #0]
 8010c5c:	6978      	ldr	r0, [r7, #20]
 8010c5e:	f000 f8d5 	bl	8010e0c <prvInsertTimerInActiveList>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d020      	beq.n	8010caa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c68:	2300      	movs	r3, #0
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	2100      	movs	r1, #0
 8010c72:	6978      	ldr	r0, [r7, #20]
 8010c74:	f7ff ff88 	bl	8010b88 <xTimerGenericCommand>
 8010c78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d114      	bne.n	8010caa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c84:	f383 8811 	msr	BASEPRI, r3
 8010c88:	f3bf 8f6f 	isb	sy
 8010c8c:	f3bf 8f4f 	dsb	sy
 8010c90:	60fb      	str	r3, [r7, #12]
}
 8010c92:	bf00      	nop
 8010c94:	bf00      	nop
 8010c96:	e7fd      	b.n	8010c94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c9e:	f023 0301 	bic.w	r3, r3, #1
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	6a1b      	ldr	r3, [r3, #32]
 8010cae:	6978      	ldr	r0, [r7, #20]
 8010cb0:	4798      	blx	r3
}
 8010cb2:	bf00      	nop
 8010cb4:	3718      	adds	r7, #24
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	24033a10 	.word	0x24033a10

08010cc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010cc8:	f107 0308 	add.w	r3, r7, #8
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f000 f859 	bl	8010d84 <prvGetNextExpireTime>
 8010cd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f000 f805 	bl	8010ce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010cde:	f000 f8d7 	bl	8010e90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ce2:	bf00      	nop
 8010ce4:	e7f0      	b.n	8010cc8 <prvTimerTask+0x8>
	...

08010ce8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010cf2:	f7fe fed7 	bl	800faa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010cf6:	f107 0308 	add.w	r3, r7, #8
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f000 f866 	bl	8010dcc <prvSampleTimeNow>
 8010d00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d130      	bne.n	8010d6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d10a      	bne.n	8010d24 <prvProcessTimerOrBlockTask+0x3c>
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d806      	bhi.n	8010d24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010d16:	f7fe fed3 	bl	800fac0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010d1a:	68f9      	ldr	r1, [r7, #12]
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7ff ff81 	bl	8010c24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010d22:	e024      	b.n	8010d6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d008      	beq.n	8010d3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d2a:	4b13      	ldr	r3, [pc, #76]	@ (8010d78 <prvProcessTimerOrBlockTask+0x90>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d101      	bne.n	8010d38 <prvProcessTimerOrBlockTask+0x50>
 8010d34:	2301      	movs	r3, #1
 8010d36:	e000      	b.n	8010d3a <prvProcessTimerOrBlockTask+0x52>
 8010d38:	2300      	movs	r3, #0
 8010d3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8010d7c <prvProcessTimerOrBlockTask+0x94>)
 8010d3e:	6818      	ldr	r0, [r3, #0]
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	1ad3      	subs	r3, r2, r3
 8010d46:	683a      	ldr	r2, [r7, #0]
 8010d48:	4619      	mov	r1, r3
 8010d4a:	f7fe fc13 	bl	800f574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010d4e:	f7fe feb7 	bl	800fac0 <xTaskResumeAll>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d10a      	bne.n	8010d6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010d58:	4b09      	ldr	r3, [pc, #36]	@ (8010d80 <prvProcessTimerOrBlockTask+0x98>)
 8010d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d5e:	601a      	str	r2, [r3, #0]
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	f3bf 8f6f 	isb	sy
}
 8010d68:	e001      	b.n	8010d6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010d6a:	f7fe fea9 	bl	800fac0 <xTaskResumeAll>
}
 8010d6e:	bf00      	nop
 8010d70:	3710      	adds	r7, #16
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	24033a14 	.word	0x24033a14
 8010d7c:	24033a18 	.word	0x24033a18
 8010d80:	e000ed04 	.word	0xe000ed04

08010d84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010d84:	b480      	push	{r7}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8010dc8 <prvGetNextExpireTime+0x44>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d101      	bne.n	8010d9a <prvGetNextExpireTime+0x16>
 8010d96:	2201      	movs	r2, #1
 8010d98:	e000      	b.n	8010d9c <prvGetNextExpireTime+0x18>
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d105      	bne.n	8010db4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010da8:	4b07      	ldr	r3, [pc, #28]	@ (8010dc8 <prvGetNextExpireTime+0x44>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	60fb      	str	r3, [r7, #12]
 8010db2:	e001      	b.n	8010db8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010db4:	2300      	movs	r3, #0
 8010db6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010db8:	68fb      	ldr	r3, [r7, #12]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3714      	adds	r7, #20
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	24033a10 	.word	0x24033a10

08010dcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010dd4:	f7fe ff12 	bl	800fbfc <xTaskGetTickCount>
 8010dd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010dda:	4b0b      	ldr	r3, [pc, #44]	@ (8010e08 <prvSampleTimeNow+0x3c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68fa      	ldr	r2, [r7, #12]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d205      	bcs.n	8010df0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010de4:	f000 f93a 	bl	801105c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2201      	movs	r2, #1
 8010dec:	601a      	str	r2, [r3, #0]
 8010dee:	e002      	b.n	8010df6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2200      	movs	r2, #0
 8010df4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010df6:	4a04      	ldr	r2, [pc, #16]	@ (8010e08 <prvSampleTimeNow+0x3c>)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3710      	adds	r7, #16
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	24033a20 	.word	0x24033a20

08010e0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b086      	sub	sp, #24
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	607a      	str	r2, [r7, #4]
 8010e18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	68ba      	ldr	r2, [r7, #8]
 8010e22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	68fa      	ldr	r2, [r7, #12]
 8010e28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e2a:	68ba      	ldr	r2, [r7, #8]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d812      	bhi.n	8010e58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e32:	687a      	ldr	r2, [r7, #4]
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	1ad2      	subs	r2, r2, r3
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	699b      	ldr	r3, [r3, #24]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d302      	bcc.n	8010e46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010e40:	2301      	movs	r3, #1
 8010e42:	617b      	str	r3, [r7, #20]
 8010e44:	e01b      	b.n	8010e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010e46:	4b10      	ldr	r3, [pc, #64]	@ (8010e88 <prvInsertTimerInActiveList+0x7c>)
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	3304      	adds	r3, #4
 8010e4e:	4619      	mov	r1, r3
 8010e50:	4610      	mov	r0, r2
 8010e52:	f7fd fc4a 	bl	800e6ea <vListInsert>
 8010e56:	e012      	b.n	8010e7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d206      	bcs.n	8010e6e <prvInsertTimerInActiveList+0x62>
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d302      	bcc.n	8010e6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	617b      	str	r3, [r7, #20]
 8010e6c:	e007      	b.n	8010e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e6e:	4b07      	ldr	r3, [pc, #28]	@ (8010e8c <prvInsertTimerInActiveList+0x80>)
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	3304      	adds	r3, #4
 8010e76:	4619      	mov	r1, r3
 8010e78:	4610      	mov	r0, r2
 8010e7a:	f7fd fc36 	bl	800e6ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010e7e:	697b      	ldr	r3, [r7, #20]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3718      	adds	r7, #24
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	24033a14 	.word	0x24033a14
 8010e8c:	24033a10 	.word	0x24033a10

08010e90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b08e      	sub	sp, #56	@ 0x38
 8010e94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e96:	e0ce      	b.n	8011036 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	da19      	bge.n	8010ed2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010e9e:	1d3b      	adds	r3, r7, #4
 8010ea0:	3304      	adds	r3, #4
 8010ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d10b      	bne.n	8010ec2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eae:	f383 8811 	msr	BASEPRI, r3
 8010eb2:	f3bf 8f6f 	isb	sy
 8010eb6:	f3bf 8f4f 	dsb	sy
 8010eba:	61fb      	str	r3, [r7, #28]
}
 8010ebc:	bf00      	nop
 8010ebe:	bf00      	nop
 8010ec0:	e7fd      	b.n	8010ebe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ec8:	6850      	ldr	r0, [r2, #4]
 8010eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ecc:	6892      	ldr	r2, [r2, #8]
 8010ece:	4611      	mov	r1, r2
 8010ed0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	f2c0 80ae 	blt.w	8011036 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee0:	695b      	ldr	r3, [r3, #20]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d004      	beq.n	8010ef0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee8:	3304      	adds	r3, #4
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fd fc36 	bl	800e75c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ef0:	463b      	mov	r3, r7
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7ff ff6a 	bl	8010dcc <prvSampleTimeNow>
 8010ef8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2b09      	cmp	r3, #9
 8010efe:	f200 8097 	bhi.w	8011030 <prvProcessReceivedCommands+0x1a0>
 8010f02:	a201      	add	r2, pc, #4	@ (adr r2, 8010f08 <prvProcessReceivedCommands+0x78>)
 8010f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f08:	08010f31 	.word	0x08010f31
 8010f0c:	08010f31 	.word	0x08010f31
 8010f10:	08010f31 	.word	0x08010f31
 8010f14:	08010fa7 	.word	0x08010fa7
 8010f18:	08010fbb 	.word	0x08010fbb
 8010f1c:	08011007 	.word	0x08011007
 8010f20:	08010f31 	.word	0x08010f31
 8010f24:	08010f31 	.word	0x08010f31
 8010f28:	08010fa7 	.word	0x08010fa7
 8010f2c:	08010fbb 	.word	0x08010fbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f36:	f043 0301 	orr.w	r3, r3, #1
 8010f3a:	b2da      	uxtb	r2, r3
 8010f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f42:	68ba      	ldr	r2, [r7, #8]
 8010f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f46:	699b      	ldr	r3, [r3, #24]
 8010f48:	18d1      	adds	r1, r2, r3
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f50:	f7ff ff5c 	bl	8010e0c <prvInsertTimerInActiveList>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d06c      	beq.n	8011034 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f5c:	6a1b      	ldr	r3, [r3, #32]
 8010f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f68:	f003 0304 	and.w	r3, r3, #4
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d061      	beq.n	8011034 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010f70:	68ba      	ldr	r2, [r7, #8]
 8010f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f74:	699b      	ldr	r3, [r3, #24]
 8010f76:	441a      	add	r2, r3
 8010f78:	2300      	movs	r3, #0
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	2100      	movs	r1, #0
 8010f80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f82:	f7ff fe01 	bl	8010b88 <xTimerGenericCommand>
 8010f86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010f88:	6a3b      	ldr	r3, [r7, #32]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d152      	bne.n	8011034 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f92:	f383 8811 	msr	BASEPRI, r3
 8010f96:	f3bf 8f6f 	isb	sy
 8010f9a:	f3bf 8f4f 	dsb	sy
 8010f9e:	61bb      	str	r3, [r7, #24]
}
 8010fa0:	bf00      	nop
 8010fa2:	bf00      	nop
 8010fa4:	e7fd      	b.n	8010fa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fac:	f023 0301 	bic.w	r3, r3, #1
 8010fb0:	b2da      	uxtb	r2, r3
 8010fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010fb8:	e03d      	b.n	8011036 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010fc0:	f043 0301 	orr.w	r3, r3, #1
 8010fc4:	b2da      	uxtb	r2, r3
 8010fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd4:	699b      	ldr	r3, [r3, #24]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d10b      	bne.n	8010ff2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fde:	f383 8811 	msr	BASEPRI, r3
 8010fe2:	f3bf 8f6f 	isb	sy
 8010fe6:	f3bf 8f4f 	dsb	sy
 8010fea:	617b      	str	r3, [r7, #20]
}
 8010fec:	bf00      	nop
 8010fee:	bf00      	nop
 8010ff0:	e7fd      	b.n	8010fee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ff4:	699a      	ldr	r2, [r3, #24]
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff8:	18d1      	adds	r1, r2, r3
 8010ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011000:	f7ff ff04 	bl	8010e0c <prvInsertTimerInActiveList>
					break;
 8011004:	e017      	b.n	8011036 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801100c:	f003 0302 	and.w	r3, r3, #2
 8011010:	2b00      	cmp	r3, #0
 8011012:	d103      	bne.n	801101c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011016:	f000 fbe7 	bl	80117e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801101a:	e00c      	b.n	8011036 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801101c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801101e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011022:	f023 0301 	bic.w	r3, r3, #1
 8011026:	b2da      	uxtb	r2, r3
 8011028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801102a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801102e:	e002      	b.n	8011036 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011030:	bf00      	nop
 8011032:	e000      	b.n	8011036 <prvProcessReceivedCommands+0x1a6>
					break;
 8011034:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011036:	4b08      	ldr	r3, [pc, #32]	@ (8011058 <prvProcessReceivedCommands+0x1c8>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	1d39      	adds	r1, r7, #4
 801103c:	2200      	movs	r2, #0
 801103e:	4618      	mov	r0, r3
 8011040:	f7fd ff54 	bl	800eeec <xQueueReceive>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	f47f af26 	bne.w	8010e98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801104c:	bf00      	nop
 801104e:	bf00      	nop
 8011050:	3730      	adds	r7, #48	@ 0x30
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	24033a18 	.word	0x24033a18

0801105c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b088      	sub	sp, #32
 8011060:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011062:	e049      	b.n	80110f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011064:	4b2e      	ldr	r3, [pc, #184]	@ (8011120 <prvSwitchTimerLists+0xc4>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801106e:	4b2c      	ldr	r3, [pc, #176]	@ (8011120 <prvSwitchTimerLists+0xc4>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	3304      	adds	r3, #4
 801107c:	4618      	mov	r0, r3
 801107e:	f7fd fb6d 	bl	800e75c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	6a1b      	ldr	r3, [r3, #32]
 8011086:	68f8      	ldr	r0, [r7, #12]
 8011088:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011090:	f003 0304 	and.w	r3, r3, #4
 8011094:	2b00      	cmp	r3, #0
 8011096:	d02f      	beq.n	80110f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	699b      	ldr	r3, [r3, #24]
 801109c:	693a      	ldr	r2, [r7, #16]
 801109e:	4413      	add	r3, r2
 80110a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80110a2:	68ba      	ldr	r2, [r7, #8]
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d90e      	bls.n	80110c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	68fa      	ldr	r2, [r7, #12]
 80110b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110b6:	4b1a      	ldr	r3, [pc, #104]	@ (8011120 <prvSwitchTimerLists+0xc4>)
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	3304      	adds	r3, #4
 80110be:	4619      	mov	r1, r3
 80110c0:	4610      	mov	r0, r2
 80110c2:	f7fd fb12 	bl	800e6ea <vListInsert>
 80110c6:	e017      	b.n	80110f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110c8:	2300      	movs	r3, #0
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	2300      	movs	r3, #0
 80110ce:	693a      	ldr	r2, [r7, #16]
 80110d0:	2100      	movs	r1, #0
 80110d2:	68f8      	ldr	r0, [r7, #12]
 80110d4:	f7ff fd58 	bl	8010b88 <xTimerGenericCommand>
 80110d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d10b      	bne.n	80110f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80110e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110e4:	f383 8811 	msr	BASEPRI, r3
 80110e8:	f3bf 8f6f 	isb	sy
 80110ec:	f3bf 8f4f 	dsb	sy
 80110f0:	603b      	str	r3, [r7, #0]
}
 80110f2:	bf00      	nop
 80110f4:	bf00      	nop
 80110f6:	e7fd      	b.n	80110f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80110f8:	4b09      	ldr	r3, [pc, #36]	@ (8011120 <prvSwitchTimerLists+0xc4>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d1b0      	bne.n	8011064 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011102:	4b07      	ldr	r3, [pc, #28]	@ (8011120 <prvSwitchTimerLists+0xc4>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011108:	4b06      	ldr	r3, [pc, #24]	@ (8011124 <prvSwitchTimerLists+0xc8>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a04      	ldr	r2, [pc, #16]	@ (8011120 <prvSwitchTimerLists+0xc4>)
 801110e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011110:	4a04      	ldr	r2, [pc, #16]	@ (8011124 <prvSwitchTimerLists+0xc8>)
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	6013      	str	r3, [r2, #0]
}
 8011116:	bf00      	nop
 8011118:	3718      	adds	r7, #24
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	24033a10 	.word	0x24033a10
 8011124:	24033a14 	.word	0x24033a14

08011128 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801112e:	f000 f96b 	bl	8011408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011132:	4b15      	ldr	r3, [pc, #84]	@ (8011188 <prvCheckForValidListAndQueue+0x60>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d120      	bne.n	801117c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801113a:	4814      	ldr	r0, [pc, #80]	@ (801118c <prvCheckForValidListAndQueue+0x64>)
 801113c:	f7fd fa84 	bl	800e648 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011140:	4813      	ldr	r0, [pc, #76]	@ (8011190 <prvCheckForValidListAndQueue+0x68>)
 8011142:	f7fd fa81 	bl	800e648 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011146:	4b13      	ldr	r3, [pc, #76]	@ (8011194 <prvCheckForValidListAndQueue+0x6c>)
 8011148:	4a10      	ldr	r2, [pc, #64]	@ (801118c <prvCheckForValidListAndQueue+0x64>)
 801114a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801114c:	4b12      	ldr	r3, [pc, #72]	@ (8011198 <prvCheckForValidListAndQueue+0x70>)
 801114e:	4a10      	ldr	r2, [pc, #64]	@ (8011190 <prvCheckForValidListAndQueue+0x68>)
 8011150:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011152:	2300      	movs	r3, #0
 8011154:	9300      	str	r3, [sp, #0]
 8011156:	4b11      	ldr	r3, [pc, #68]	@ (801119c <prvCheckForValidListAndQueue+0x74>)
 8011158:	4a11      	ldr	r2, [pc, #68]	@ (80111a0 <prvCheckForValidListAndQueue+0x78>)
 801115a:	2110      	movs	r1, #16
 801115c:	200a      	movs	r0, #10
 801115e:	f7fd fb91 	bl	800e884 <xQueueGenericCreateStatic>
 8011162:	4603      	mov	r3, r0
 8011164:	4a08      	ldr	r2, [pc, #32]	@ (8011188 <prvCheckForValidListAndQueue+0x60>)
 8011166:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011168:	4b07      	ldr	r3, [pc, #28]	@ (8011188 <prvCheckForValidListAndQueue+0x60>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d005      	beq.n	801117c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011170:	4b05      	ldr	r3, [pc, #20]	@ (8011188 <prvCheckForValidListAndQueue+0x60>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	490b      	ldr	r1, [pc, #44]	@ (80111a4 <prvCheckForValidListAndQueue+0x7c>)
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe f9d2 	bl	800f520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801117c:	f000 f976 	bl	801146c <vPortExitCritical>
}
 8011180:	bf00      	nop
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	24033a18 	.word	0x24033a18
 801118c:	240339e8 	.word	0x240339e8
 8011190:	240339fc 	.word	0x240339fc
 8011194:	24033a10 	.word	0x24033a10
 8011198:	24033a14 	.word	0x24033a14
 801119c:	24033ac4 	.word	0x24033ac4
 80111a0:	24033a24 	.word	0x24033a24
 80111a4:	08023438 	.word	0x08023438

080111a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80111a8:	b480      	push	{r7}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	3b04      	subs	r3, #4
 80111b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80111c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	3b04      	subs	r3, #4
 80111c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	f023 0201 	bic.w	r2, r3, #1
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	3b04      	subs	r3, #4
 80111d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80111d8:	4a0c      	ldr	r2, [pc, #48]	@ (801120c <pxPortInitialiseStack+0x64>)
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	3b14      	subs	r3, #20
 80111e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	3b04      	subs	r3, #4
 80111ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f06f 0202 	mvn.w	r2, #2
 80111f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	3b20      	subs	r3, #32
 80111fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80111fe:	68fb      	ldr	r3, [r7, #12]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3714      	adds	r7, #20
 8011204:	46bd      	mov	sp, r7
 8011206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120a:	4770      	bx	lr
 801120c:	08011211 	.word	0x08011211

08011210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011210:	b480      	push	{r7}
 8011212:	b085      	sub	sp, #20
 8011214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011216:	2300      	movs	r3, #0
 8011218:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801121a:	4b13      	ldr	r3, [pc, #76]	@ (8011268 <prvTaskExitError+0x58>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011222:	d00b      	beq.n	801123c <prvTaskExitError+0x2c>
	__asm volatile
 8011224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011228:	f383 8811 	msr	BASEPRI, r3
 801122c:	f3bf 8f6f 	isb	sy
 8011230:	f3bf 8f4f 	dsb	sy
 8011234:	60fb      	str	r3, [r7, #12]
}
 8011236:	bf00      	nop
 8011238:	bf00      	nop
 801123a:	e7fd      	b.n	8011238 <prvTaskExitError+0x28>
	__asm volatile
 801123c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011240:	f383 8811 	msr	BASEPRI, r3
 8011244:	f3bf 8f6f 	isb	sy
 8011248:	f3bf 8f4f 	dsb	sy
 801124c:	60bb      	str	r3, [r7, #8]
}
 801124e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011250:	bf00      	nop
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d0fc      	beq.n	8011252 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011258:	bf00      	nop
 801125a:	bf00      	nop
 801125c:	3714      	adds	r7, #20
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop
 8011268:	24000014 	.word	0x24000014
 801126c:	00000000 	.word	0x00000000

08011270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011270:	4b07      	ldr	r3, [pc, #28]	@ (8011290 <pxCurrentTCBConst2>)
 8011272:	6819      	ldr	r1, [r3, #0]
 8011274:	6808      	ldr	r0, [r1, #0]
 8011276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127a:	f380 8809 	msr	PSP, r0
 801127e:	f3bf 8f6f 	isb	sy
 8011282:	f04f 0000 	mov.w	r0, #0
 8011286:	f380 8811 	msr	BASEPRI, r0
 801128a:	4770      	bx	lr
 801128c:	f3af 8000 	nop.w

08011290 <pxCurrentTCBConst2>:
 8011290:	240334e8 	.word	0x240334e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011294:	bf00      	nop
 8011296:	bf00      	nop

08011298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011298:	4808      	ldr	r0, [pc, #32]	@ (80112bc <prvPortStartFirstTask+0x24>)
 801129a:	6800      	ldr	r0, [r0, #0]
 801129c:	6800      	ldr	r0, [r0, #0]
 801129e:	f380 8808 	msr	MSP, r0
 80112a2:	f04f 0000 	mov.w	r0, #0
 80112a6:	f380 8814 	msr	CONTROL, r0
 80112aa:	b662      	cpsie	i
 80112ac:	b661      	cpsie	f
 80112ae:	f3bf 8f4f 	dsb	sy
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	df00      	svc	0
 80112b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80112ba:	bf00      	nop
 80112bc:	e000ed08 	.word	0xe000ed08

080112c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80112c6:	4b47      	ldr	r3, [pc, #284]	@ (80113e4 <xPortStartScheduler+0x124>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4a47      	ldr	r2, [pc, #284]	@ (80113e8 <xPortStartScheduler+0x128>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d10b      	bne.n	80112e8 <xPortStartScheduler+0x28>
	__asm volatile
 80112d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d4:	f383 8811 	msr	BASEPRI, r3
 80112d8:	f3bf 8f6f 	isb	sy
 80112dc:	f3bf 8f4f 	dsb	sy
 80112e0:	613b      	str	r3, [r7, #16]
}
 80112e2:	bf00      	nop
 80112e4:	bf00      	nop
 80112e6:	e7fd      	b.n	80112e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80112e8:	4b3e      	ldr	r3, [pc, #248]	@ (80113e4 <xPortStartScheduler+0x124>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	4a3f      	ldr	r2, [pc, #252]	@ (80113ec <xPortStartScheduler+0x12c>)
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d10b      	bne.n	801130a <xPortStartScheduler+0x4a>
	__asm volatile
 80112f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112f6:	f383 8811 	msr	BASEPRI, r3
 80112fa:	f3bf 8f6f 	isb	sy
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	60fb      	str	r3, [r7, #12]
}
 8011304:	bf00      	nop
 8011306:	bf00      	nop
 8011308:	e7fd      	b.n	8011306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801130a:	4b39      	ldr	r3, [pc, #228]	@ (80113f0 <xPortStartScheduler+0x130>)
 801130c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	b2db      	uxtb	r3, r3
 8011314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	22ff      	movs	r2, #255	@ 0xff
 801131a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	b2db      	uxtb	r3, r3
 8011322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011324:	78fb      	ldrb	r3, [r7, #3]
 8011326:	b2db      	uxtb	r3, r3
 8011328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801132c:	b2da      	uxtb	r2, r3
 801132e:	4b31      	ldr	r3, [pc, #196]	@ (80113f4 <xPortStartScheduler+0x134>)
 8011330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011332:	4b31      	ldr	r3, [pc, #196]	@ (80113f8 <xPortStartScheduler+0x138>)
 8011334:	2207      	movs	r2, #7
 8011336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011338:	e009      	b.n	801134e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801133a:	4b2f      	ldr	r3, [pc, #188]	@ (80113f8 <xPortStartScheduler+0x138>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	3b01      	subs	r3, #1
 8011340:	4a2d      	ldr	r2, [pc, #180]	@ (80113f8 <xPortStartScheduler+0x138>)
 8011342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011344:	78fb      	ldrb	r3, [r7, #3]
 8011346:	b2db      	uxtb	r3, r3
 8011348:	005b      	lsls	r3, r3, #1
 801134a:	b2db      	uxtb	r3, r3
 801134c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801134e:	78fb      	ldrb	r3, [r7, #3]
 8011350:	b2db      	uxtb	r3, r3
 8011352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011356:	2b80      	cmp	r3, #128	@ 0x80
 8011358:	d0ef      	beq.n	801133a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801135a:	4b27      	ldr	r3, [pc, #156]	@ (80113f8 <xPortStartScheduler+0x138>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f1c3 0307 	rsb	r3, r3, #7
 8011362:	2b04      	cmp	r3, #4
 8011364:	d00b      	beq.n	801137e <xPortStartScheduler+0xbe>
	__asm volatile
 8011366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801136a:	f383 8811 	msr	BASEPRI, r3
 801136e:	f3bf 8f6f 	isb	sy
 8011372:	f3bf 8f4f 	dsb	sy
 8011376:	60bb      	str	r3, [r7, #8]
}
 8011378:	bf00      	nop
 801137a:	bf00      	nop
 801137c:	e7fd      	b.n	801137a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801137e:	4b1e      	ldr	r3, [pc, #120]	@ (80113f8 <xPortStartScheduler+0x138>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	021b      	lsls	r3, r3, #8
 8011384:	4a1c      	ldr	r2, [pc, #112]	@ (80113f8 <xPortStartScheduler+0x138>)
 8011386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011388:	4b1b      	ldr	r3, [pc, #108]	@ (80113f8 <xPortStartScheduler+0x138>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011390:	4a19      	ldr	r2, [pc, #100]	@ (80113f8 <xPortStartScheduler+0x138>)
 8011392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	b2da      	uxtb	r2, r3
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801139c:	4b17      	ldr	r3, [pc, #92]	@ (80113fc <xPortStartScheduler+0x13c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a16      	ldr	r2, [pc, #88]	@ (80113fc <xPortStartScheduler+0x13c>)
 80113a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80113a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113a8:	4b14      	ldr	r3, [pc, #80]	@ (80113fc <xPortStartScheduler+0x13c>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4a13      	ldr	r2, [pc, #76]	@ (80113fc <xPortStartScheduler+0x13c>)
 80113ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80113b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113b4:	f000 f8da 	bl	801156c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80113b8:	4b11      	ldr	r3, [pc, #68]	@ (8011400 <xPortStartScheduler+0x140>)
 80113ba:	2200      	movs	r2, #0
 80113bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80113be:	f000 f8f9 	bl	80115b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80113c2:	4b10      	ldr	r3, [pc, #64]	@ (8011404 <xPortStartScheduler+0x144>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	4a0f      	ldr	r2, [pc, #60]	@ (8011404 <xPortStartScheduler+0x144>)
 80113c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80113cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80113ce:	f7ff ff63 	bl	8011298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80113d2:	f7fe fcef 	bl	800fdb4 <vTaskSwitchContext>
	prvTaskExitError();
 80113d6:	f7ff ff1b 	bl	8011210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3718      	adds	r7, #24
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	e000ed00 	.word	0xe000ed00
 80113e8:	410fc271 	.word	0x410fc271
 80113ec:	410fc270 	.word	0x410fc270
 80113f0:	e000e400 	.word	0xe000e400
 80113f4:	24033b14 	.word	0x24033b14
 80113f8:	24033b18 	.word	0x24033b18
 80113fc:	e000ed20 	.word	0xe000ed20
 8011400:	24000014 	.word	0x24000014
 8011404:	e000ef34 	.word	0xe000ef34

08011408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
	__asm volatile
 801140e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	607b      	str	r3, [r7, #4]
}
 8011420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011422:	4b10      	ldr	r3, [pc, #64]	@ (8011464 <vPortEnterCritical+0x5c>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	3301      	adds	r3, #1
 8011428:	4a0e      	ldr	r2, [pc, #56]	@ (8011464 <vPortEnterCritical+0x5c>)
 801142a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801142c:	4b0d      	ldr	r3, [pc, #52]	@ (8011464 <vPortEnterCritical+0x5c>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d110      	bne.n	8011456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011434:	4b0c      	ldr	r3, [pc, #48]	@ (8011468 <vPortEnterCritical+0x60>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	b2db      	uxtb	r3, r3
 801143a:	2b00      	cmp	r3, #0
 801143c:	d00b      	beq.n	8011456 <vPortEnterCritical+0x4e>
	__asm volatile
 801143e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011442:	f383 8811 	msr	BASEPRI, r3
 8011446:	f3bf 8f6f 	isb	sy
 801144a:	f3bf 8f4f 	dsb	sy
 801144e:	603b      	str	r3, [r7, #0]
}
 8011450:	bf00      	nop
 8011452:	bf00      	nop
 8011454:	e7fd      	b.n	8011452 <vPortEnterCritical+0x4a>
	}
}
 8011456:	bf00      	nop
 8011458:	370c      	adds	r7, #12
 801145a:	46bd      	mov	sp, r7
 801145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011460:	4770      	bx	lr
 8011462:	bf00      	nop
 8011464:	24000014 	.word	0x24000014
 8011468:	e000ed04 	.word	0xe000ed04

0801146c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801146c:	b480      	push	{r7}
 801146e:	b083      	sub	sp, #12
 8011470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011472:	4b12      	ldr	r3, [pc, #72]	@ (80114bc <vPortExitCritical+0x50>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d10b      	bne.n	8011492 <vPortExitCritical+0x26>
	__asm volatile
 801147a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801147e:	f383 8811 	msr	BASEPRI, r3
 8011482:	f3bf 8f6f 	isb	sy
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	607b      	str	r3, [r7, #4]
}
 801148c:	bf00      	nop
 801148e:	bf00      	nop
 8011490:	e7fd      	b.n	801148e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011492:	4b0a      	ldr	r3, [pc, #40]	@ (80114bc <vPortExitCritical+0x50>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	3b01      	subs	r3, #1
 8011498:	4a08      	ldr	r2, [pc, #32]	@ (80114bc <vPortExitCritical+0x50>)
 801149a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801149c:	4b07      	ldr	r3, [pc, #28]	@ (80114bc <vPortExitCritical+0x50>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d105      	bne.n	80114b0 <vPortExitCritical+0x44>
 80114a4:	2300      	movs	r3, #0
 80114a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	f383 8811 	msr	BASEPRI, r3
}
 80114ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80114b0:	bf00      	nop
 80114b2:	370c      	adds	r7, #12
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr
 80114bc:	24000014 	.word	0x24000014

080114c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80114c0:	f3ef 8009 	mrs	r0, PSP
 80114c4:	f3bf 8f6f 	isb	sy
 80114c8:	4b15      	ldr	r3, [pc, #84]	@ (8011520 <pxCurrentTCBConst>)
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	f01e 0f10 	tst.w	lr, #16
 80114d0:	bf08      	it	eq
 80114d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80114d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114da:	6010      	str	r0, [r2, #0]
 80114dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80114e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80114e4:	f380 8811 	msr	BASEPRI, r0
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	f3bf 8f6f 	isb	sy
 80114f0:	f7fe fc60 	bl	800fdb4 <vTaskSwitchContext>
 80114f4:	f04f 0000 	mov.w	r0, #0
 80114f8:	f380 8811 	msr	BASEPRI, r0
 80114fc:	bc09      	pop	{r0, r3}
 80114fe:	6819      	ldr	r1, [r3, #0]
 8011500:	6808      	ldr	r0, [r1, #0]
 8011502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011506:	f01e 0f10 	tst.w	lr, #16
 801150a:	bf08      	it	eq
 801150c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011510:	f380 8809 	msr	PSP, r0
 8011514:	f3bf 8f6f 	isb	sy
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop
 801151c:	f3af 8000 	nop.w

08011520 <pxCurrentTCBConst>:
 8011520:	240334e8 	.word	0x240334e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011524:	bf00      	nop
 8011526:	bf00      	nop

08011528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	af00      	add	r7, sp, #0
	__asm volatile
 801152e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011532:	f383 8811 	msr	BASEPRI, r3
 8011536:	f3bf 8f6f 	isb	sy
 801153a:	f3bf 8f4f 	dsb	sy
 801153e:	607b      	str	r3, [r7, #4]
}
 8011540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011542:	f7fe fb7d 	bl	800fc40 <xTaskIncrementTick>
 8011546:	4603      	mov	r3, r0
 8011548:	2b00      	cmp	r3, #0
 801154a:	d003      	beq.n	8011554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801154c:	4b06      	ldr	r3, [pc, #24]	@ (8011568 <xPortSysTickHandler+0x40>)
 801154e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011552:	601a      	str	r2, [r3, #0]
 8011554:	2300      	movs	r3, #0
 8011556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	f383 8811 	msr	BASEPRI, r3
}
 801155e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011560:	bf00      	nop
 8011562:	3708      	adds	r7, #8
 8011564:	46bd      	mov	sp, r7
 8011566:	bd80      	pop	{r7, pc}
 8011568:	e000ed04 	.word	0xe000ed04

0801156c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801156c:	b480      	push	{r7}
 801156e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011570:	4b0b      	ldr	r3, [pc, #44]	@ (80115a0 <vPortSetupTimerInterrupt+0x34>)
 8011572:	2200      	movs	r2, #0
 8011574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011576:	4b0b      	ldr	r3, [pc, #44]	@ (80115a4 <vPortSetupTimerInterrupt+0x38>)
 8011578:	2200      	movs	r2, #0
 801157a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801157c:	4b0a      	ldr	r3, [pc, #40]	@ (80115a8 <vPortSetupTimerInterrupt+0x3c>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	4a0a      	ldr	r2, [pc, #40]	@ (80115ac <vPortSetupTimerInterrupt+0x40>)
 8011582:	fba2 2303 	umull	r2, r3, r2, r3
 8011586:	099b      	lsrs	r3, r3, #6
 8011588:	4a09      	ldr	r2, [pc, #36]	@ (80115b0 <vPortSetupTimerInterrupt+0x44>)
 801158a:	3b01      	subs	r3, #1
 801158c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801158e:	4b04      	ldr	r3, [pc, #16]	@ (80115a0 <vPortSetupTimerInterrupt+0x34>)
 8011590:	2207      	movs	r2, #7
 8011592:	601a      	str	r2, [r3, #0]
}
 8011594:	bf00      	nop
 8011596:	46bd      	mov	sp, r7
 8011598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	e000e010 	.word	0xe000e010
 80115a4:	e000e018 	.word	0xe000e018
 80115a8:	24000004 	.word	0x24000004
 80115ac:	10624dd3 	.word	0x10624dd3
 80115b0:	e000e014 	.word	0xe000e014

080115b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80115b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80115c4 <vPortEnableVFP+0x10>
 80115b8:	6801      	ldr	r1, [r0, #0]
 80115ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80115be:	6001      	str	r1, [r0, #0]
 80115c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80115c2:	bf00      	nop
 80115c4:	e000ed88 	.word	0xe000ed88

080115c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80115c8:	b480      	push	{r7}
 80115ca:	b085      	sub	sp, #20
 80115cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80115ce:	f3ef 8305 	mrs	r3, IPSR
 80115d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2b0f      	cmp	r3, #15
 80115d8:	d915      	bls.n	8011606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80115da:	4a18      	ldr	r2, [pc, #96]	@ (801163c <vPortValidateInterruptPriority+0x74>)
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	4413      	add	r3, r2
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80115e4:	4b16      	ldr	r3, [pc, #88]	@ (8011640 <vPortValidateInterruptPriority+0x78>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	7afa      	ldrb	r2, [r7, #11]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d20b      	bcs.n	8011606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80115ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115f2:	f383 8811 	msr	BASEPRI, r3
 80115f6:	f3bf 8f6f 	isb	sy
 80115fa:	f3bf 8f4f 	dsb	sy
 80115fe:	607b      	str	r3, [r7, #4]
}
 8011600:	bf00      	nop
 8011602:	bf00      	nop
 8011604:	e7fd      	b.n	8011602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011606:	4b0f      	ldr	r3, [pc, #60]	@ (8011644 <vPortValidateInterruptPriority+0x7c>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801160e:	4b0e      	ldr	r3, [pc, #56]	@ (8011648 <vPortValidateInterruptPriority+0x80>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	429a      	cmp	r2, r3
 8011614:	d90b      	bls.n	801162e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161a:	f383 8811 	msr	BASEPRI, r3
 801161e:	f3bf 8f6f 	isb	sy
 8011622:	f3bf 8f4f 	dsb	sy
 8011626:	603b      	str	r3, [r7, #0]
}
 8011628:	bf00      	nop
 801162a:	bf00      	nop
 801162c:	e7fd      	b.n	801162a <vPortValidateInterruptPriority+0x62>
	}
 801162e:	bf00      	nop
 8011630:	3714      	adds	r7, #20
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr
 801163a:	bf00      	nop
 801163c:	e000e3f0 	.word	0xe000e3f0
 8011640:	24033b14 	.word	0x24033b14
 8011644:	e000ed0c 	.word	0xe000ed0c
 8011648:	24033b18 	.word	0x24033b18

0801164c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b08a      	sub	sp, #40	@ 0x28
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011654:	2300      	movs	r3, #0
 8011656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011658:	f7fe fa24 	bl	800faa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801165c:	4b5c      	ldr	r3, [pc, #368]	@ (80117d0 <pvPortMalloc+0x184>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d101      	bne.n	8011668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011664:	f000 f924 	bl	80118b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011668:	4b5a      	ldr	r3, [pc, #360]	@ (80117d4 <pvPortMalloc+0x188>)
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4013      	ands	r3, r2
 8011670:	2b00      	cmp	r3, #0
 8011672:	f040 8095 	bne.w	80117a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d01e      	beq.n	80116ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801167c:	2208      	movs	r2, #8
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4413      	add	r3, r2
 8011682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f003 0307 	and.w	r3, r3, #7
 801168a:	2b00      	cmp	r3, #0
 801168c:	d015      	beq.n	80116ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f023 0307 	bic.w	r3, r3, #7
 8011694:	3308      	adds	r3, #8
 8011696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f003 0307 	and.w	r3, r3, #7
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d00b      	beq.n	80116ba <pvPortMalloc+0x6e>
	__asm volatile
 80116a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116a6:	f383 8811 	msr	BASEPRI, r3
 80116aa:	f3bf 8f6f 	isb	sy
 80116ae:	f3bf 8f4f 	dsb	sy
 80116b2:	617b      	str	r3, [r7, #20]
}
 80116b4:	bf00      	nop
 80116b6:	bf00      	nop
 80116b8:	e7fd      	b.n	80116b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d06f      	beq.n	80117a0 <pvPortMalloc+0x154>
 80116c0:	4b45      	ldr	r3, [pc, #276]	@ (80117d8 <pvPortMalloc+0x18c>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d86a      	bhi.n	80117a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80116ca:	4b44      	ldr	r3, [pc, #272]	@ (80117dc <pvPortMalloc+0x190>)
 80116cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80116ce:	4b43      	ldr	r3, [pc, #268]	@ (80117dc <pvPortMalloc+0x190>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116d4:	e004      	b.n	80116e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80116d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80116da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d903      	bls.n	80116f2 <pvPortMalloc+0xa6>
 80116ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1f1      	bne.n	80116d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80116f2:	4b37      	ldr	r3, [pc, #220]	@ (80117d0 <pvPortMalloc+0x184>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d051      	beq.n	80117a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80116fc:	6a3b      	ldr	r3, [r7, #32]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2208      	movs	r2, #8
 8011702:	4413      	add	r3, r2
 8011704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	6a3b      	ldr	r3, [r7, #32]
 801170c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011710:	685a      	ldr	r2, [r3, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	1ad2      	subs	r2, r2, r3
 8011716:	2308      	movs	r3, #8
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	429a      	cmp	r2, r3
 801171c:	d920      	bls.n	8011760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801171e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	4413      	add	r3, r2
 8011724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011726:	69bb      	ldr	r3, [r7, #24]
 8011728:	f003 0307 	and.w	r3, r3, #7
 801172c:	2b00      	cmp	r3, #0
 801172e:	d00b      	beq.n	8011748 <pvPortMalloc+0xfc>
	__asm volatile
 8011730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011734:	f383 8811 	msr	BASEPRI, r3
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	613b      	str	r3, [r7, #16]
}
 8011742:	bf00      	nop
 8011744:	bf00      	nop
 8011746:	e7fd      	b.n	8011744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174a:	685a      	ldr	r2, [r3, #4]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	1ad2      	subs	r2, r2, r3
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801175a:	69b8      	ldr	r0, [r7, #24]
 801175c:	f000 f90c 	bl	8011978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011760:	4b1d      	ldr	r3, [pc, #116]	@ (80117d8 <pvPortMalloc+0x18c>)
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	1ad3      	subs	r3, r2, r3
 801176a:	4a1b      	ldr	r2, [pc, #108]	@ (80117d8 <pvPortMalloc+0x18c>)
 801176c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801176e:	4b1a      	ldr	r3, [pc, #104]	@ (80117d8 <pvPortMalloc+0x18c>)
 8011770:	681a      	ldr	r2, [r3, #0]
 8011772:	4b1b      	ldr	r3, [pc, #108]	@ (80117e0 <pvPortMalloc+0x194>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	429a      	cmp	r2, r3
 8011778:	d203      	bcs.n	8011782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801177a:	4b17      	ldr	r3, [pc, #92]	@ (80117d8 <pvPortMalloc+0x18c>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	4a18      	ldr	r2, [pc, #96]	@ (80117e0 <pvPortMalloc+0x194>)
 8011780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011784:	685a      	ldr	r2, [r3, #4]
 8011786:	4b13      	ldr	r3, [pc, #76]	@ (80117d4 <pvPortMalloc+0x188>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	431a      	orrs	r2, r3
 801178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801178e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011792:	2200      	movs	r2, #0
 8011794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011796:	4b13      	ldr	r3, [pc, #76]	@ (80117e4 <pvPortMalloc+0x198>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	3301      	adds	r3, #1
 801179c:	4a11      	ldr	r2, [pc, #68]	@ (80117e4 <pvPortMalloc+0x198>)
 801179e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80117a0:	f7fe f98e 	bl	800fac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	f003 0307 	and.w	r3, r3, #7
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d00b      	beq.n	80117c6 <pvPortMalloc+0x17a>
	__asm volatile
 80117ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117b2:	f383 8811 	msr	BASEPRI, r3
 80117b6:	f3bf 8f6f 	isb	sy
 80117ba:	f3bf 8f4f 	dsb	sy
 80117be:	60fb      	str	r3, [r7, #12]
}
 80117c0:	bf00      	nop
 80117c2:	bf00      	nop
 80117c4:	e7fd      	b.n	80117c2 <pvPortMalloc+0x176>
	return pvReturn;
 80117c6:	69fb      	ldr	r3, [r7, #28]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3728      	adds	r7, #40	@ 0x28
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	24064864 	.word	0x24064864
 80117d4:	24064878 	.word	0x24064878
 80117d8:	24064868 	.word	0x24064868
 80117dc:	2406485c 	.word	0x2406485c
 80117e0:	2406486c 	.word	0x2406486c
 80117e4:	24064870 	.word	0x24064870

080117e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b086      	sub	sp, #24
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d04f      	beq.n	801189a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80117fa:	2308      	movs	r3, #8
 80117fc:	425b      	negs	r3, r3
 80117fe:	697a      	ldr	r2, [r7, #20]
 8011800:	4413      	add	r3, r2
 8011802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	685a      	ldr	r2, [r3, #4]
 801180c:	4b25      	ldr	r3, [pc, #148]	@ (80118a4 <vPortFree+0xbc>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4013      	ands	r3, r2
 8011812:	2b00      	cmp	r3, #0
 8011814:	d10b      	bne.n	801182e <vPortFree+0x46>
	__asm volatile
 8011816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801181a:	f383 8811 	msr	BASEPRI, r3
 801181e:	f3bf 8f6f 	isb	sy
 8011822:	f3bf 8f4f 	dsb	sy
 8011826:	60fb      	str	r3, [r7, #12]
}
 8011828:	bf00      	nop
 801182a:	bf00      	nop
 801182c:	e7fd      	b.n	801182a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00b      	beq.n	801184e <vPortFree+0x66>
	__asm volatile
 8011836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801183a:	f383 8811 	msr	BASEPRI, r3
 801183e:	f3bf 8f6f 	isb	sy
 8011842:	f3bf 8f4f 	dsb	sy
 8011846:	60bb      	str	r3, [r7, #8]
}
 8011848:	bf00      	nop
 801184a:	bf00      	nop
 801184c:	e7fd      	b.n	801184a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	685a      	ldr	r2, [r3, #4]
 8011852:	4b14      	ldr	r3, [pc, #80]	@ (80118a4 <vPortFree+0xbc>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	4013      	ands	r3, r2
 8011858:	2b00      	cmp	r3, #0
 801185a:	d01e      	beq.n	801189a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d11a      	bne.n	801189a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	685a      	ldr	r2, [r3, #4]
 8011868:	4b0e      	ldr	r3, [pc, #56]	@ (80118a4 <vPortFree+0xbc>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	43db      	mvns	r3, r3
 801186e:	401a      	ands	r2, r3
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011874:	f7fe f916 	bl	800faa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	685a      	ldr	r2, [r3, #4]
 801187c:	4b0a      	ldr	r3, [pc, #40]	@ (80118a8 <vPortFree+0xc0>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	4413      	add	r3, r2
 8011882:	4a09      	ldr	r2, [pc, #36]	@ (80118a8 <vPortFree+0xc0>)
 8011884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011886:	6938      	ldr	r0, [r7, #16]
 8011888:	f000 f876 	bl	8011978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801188c:	4b07      	ldr	r3, [pc, #28]	@ (80118ac <vPortFree+0xc4>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	3301      	adds	r3, #1
 8011892:	4a06      	ldr	r2, [pc, #24]	@ (80118ac <vPortFree+0xc4>)
 8011894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011896:	f7fe f913 	bl	800fac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801189a:	bf00      	nop
 801189c:	3718      	adds	r7, #24
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	24064878 	.word	0x24064878
 80118a8:	24064868 	.word	0x24064868
 80118ac:	24064874 	.word	0x24064874

080118b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80118b0:	b480      	push	{r7}
 80118b2:	b085      	sub	sp, #20
 80118b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80118b6:	4b29      	ldr	r3, [pc, #164]	@ (801195c <prvHeapInit+0xac>)
 80118b8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80118ba:	4b29      	ldr	r3, [pc, #164]	@ (8011960 <prvHeapInit+0xb0>)
 80118bc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f003 0307 	and.w	r3, r3, #7
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d00c      	beq.n	80118e2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	3307      	adds	r3, #7
 80118cc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f023 0307 	bic.w	r3, r3, #7
 80118d4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	1ad3      	subs	r3, r2, r3
 80118dc:	4a20      	ldr	r2, [pc, #128]	@ (8011960 <prvHeapInit+0xb0>)
 80118de:	4413      	add	r3, r2
 80118e0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80118e6:	4a1f      	ldr	r2, [pc, #124]	@ (8011964 <prvHeapInit+0xb4>)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80118ec:	4b1d      	ldr	r3, [pc, #116]	@ (8011964 <prvHeapInit+0xb4>)
 80118ee:	2200      	movs	r2, #0
 80118f0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	4413      	add	r3, r2
 80118f8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80118fa:	2208      	movs	r2, #8
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	1a9b      	subs	r3, r3, r2
 8011900:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f023 0307 	bic.w	r3, r3, #7
 8011908:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	4a16      	ldr	r2, [pc, #88]	@ (8011968 <prvHeapInit+0xb8>)
 801190e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011910:	4b15      	ldr	r3, [pc, #84]	@ (8011968 <prvHeapInit+0xb8>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	2200      	movs	r2, #0
 8011916:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011918:	4b13      	ldr	r3, [pc, #76]	@ (8011968 <prvHeapInit+0xb8>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	2200      	movs	r2, #0
 801191e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	68fa      	ldr	r2, [r7, #12]
 8011928:	1ad2      	subs	r2, r2, r3
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801192e:	4b0e      	ldr	r3, [pc, #56]	@ (8011968 <prvHeapInit+0xb8>)
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	4a0c      	ldr	r2, [pc, #48]	@ (801196c <prvHeapInit+0xbc>)
 801193c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	4a0b      	ldr	r2, [pc, #44]	@ (8011970 <prvHeapInit+0xc0>)
 8011944:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011946:	4b0b      	ldr	r3, [pc, #44]	@ (8011974 <prvHeapInit+0xc4>)
 8011948:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801194c:	601a      	str	r2, [r3, #0]
}
 801194e:	bf00      	nop
 8011950:	3714      	adds	r7, #20
 8011952:	46bd      	mov	sp, r7
 8011954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011958:	4770      	bx	lr
 801195a:	bf00      	nop
 801195c:	00030d40 	.word	0x00030d40
 8011960:	24033b1c 	.word	0x24033b1c
 8011964:	2406485c 	.word	0x2406485c
 8011968:	24064864 	.word	0x24064864
 801196c:	2406486c 	.word	0x2406486c
 8011970:	24064868 	.word	0x24064868
 8011974:	24064878 	.word	0x24064878

08011978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011978:	b480      	push	{r7}
 801197a:	b085      	sub	sp, #20
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011980:	4b28      	ldr	r3, [pc, #160]	@ (8011a24 <prvInsertBlockIntoFreeList+0xac>)
 8011982:	60fb      	str	r3, [r7, #12]
 8011984:	e002      	b.n	801198c <prvInsertBlockIntoFreeList+0x14>
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	60fb      	str	r3, [r7, #12]
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	429a      	cmp	r2, r3
 8011994:	d8f7      	bhi.n	8011986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	68ba      	ldr	r2, [r7, #8]
 80119a0:	4413      	add	r3, r2
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d108      	bne.n	80119ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	685a      	ldr	r2, [r3, #4]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	441a      	add	r2, r3
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	68ba      	ldr	r2, [r7, #8]
 80119c4:	441a      	add	r2, r3
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d118      	bne.n	8011a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	4b15      	ldr	r3, [pc, #84]	@ (8011a28 <prvInsertBlockIntoFreeList+0xb0>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d00d      	beq.n	80119f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	685a      	ldr	r2, [r3, #4]
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	441a      	add	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	681a      	ldr	r2, [r3, #0]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	601a      	str	r2, [r3, #0]
 80119f4:	e008      	b.n	8011a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80119f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011a28 <prvInsertBlockIntoFreeList+0xb0>)
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	601a      	str	r2, [r3, #0]
 80119fe:	e003      	b.n	8011a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d002      	beq.n	8011a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a16:	bf00      	nop
 8011a18:	3714      	adds	r7, #20
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a20:	4770      	bx	lr
 8011a22:	bf00      	nop
 8011a24:	2406485c 	.word	0x2406485c
 8011a28:	24064864 	.word	0x24064864

08011a2c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a2c:	4b04      	ldr	r3, [pc, #16]	@ (8011a40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	b10a      	cbz	r2, 8011a36 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xa>
 8011a32:	4803      	ldr	r0, [pc, #12]	@ (8011a40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a34:	4770      	bx	lr
 8011a36:	4a03      	ldr	r2, [pc, #12]	@ (8011a44 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x18>)
 8011a38:	4801      	ldr	r0, [pc, #4]	@ (8011a40 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x14>)
 8011a3a:	6812      	ldr	r2, [r2, #0]
 8011a3c:	601a      	str	r2, [r3, #0]
 8011a3e:	4770      	bx	lr
 8011a40:	24000020 	.word	0x24000020
 8011a44:	24000d2c 	.word	0x24000d2c

08011a48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a48:	4a02      	ldr	r2, [pc, #8]	@ (8011a54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0xc>)
 8011a4a:	4b03      	ldr	r3, [pc, #12]	@ (8011a58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x10>)
 8011a4c:	6812      	ldr	r2, [r2, #0]
 8011a4e:	601a      	str	r2, [r3, #0]
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop
 8011a54:	24000d2c 	.word	0x24000d2c
 8011a58:	24000020 	.word	0x24000020

08011a5c <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_init_function>:
 8011a5c:	f004 bffc 	b.w	8016a58 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>

08011a60 <autoware_auto_control_msgs__msg__AckermannControlCommand__rosidl_typesupport_introspection_c__AckermannControlCommand_fini_function>:
 8011a60:	f005 b838 	b.w	8016ad4 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>

08011a64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011a64:	b510      	push	{r4, lr}
 8011a66:	4c0a      	ldr	r4, [pc, #40]	@ (8011a90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>)
 8011a68:	f001 f880 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011a6c:	60e0      	str	r0, [r4, #12]
 8011a6e:	f000 f819 	bl	8011aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011a72:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011a74:	f000 f830 	bl	8011ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011a78:	4b06      	ldr	r3, [pc, #24]	@ (8011a94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011a7a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	b10a      	cbz	r2, 8011a86 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x22>
 8011a82:	4804      	ldr	r0, [pc, #16]	@ (8011a94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011a84:	bd10      	pop	{r4, pc}
 8011a86:	4a04      	ldr	r2, [pc, #16]	@ (8011a98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x34>)
 8011a88:	4802      	ldr	r0, [pc, #8]	@ (8011a94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x30>)
 8011a8a:	6812      	ldr	r2, [r2, #0]
 8011a8c:	601a      	str	r2, [r3, #0]
 8011a8e:	bd10      	pop	{r4, pc}
 8011a90:	2400002c 	.word	0x2400002c
 8011a94:	240000e0 	.word	0x240000e0
 8011a98:	24000d30 	.word	0x24000d30

08011a9c <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_init_function>:
 8011a9c:	f005 b82a 	b.w	8016af4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>

08011aa0 <autoware_auto_control_msgs__msg__AckermannLateralCommand__rosidl_typesupport_introspection_c__AckermannLateralCommand_fini_function>:
 8011aa0:	f005 b83c 	b.w	8016b1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>

08011aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011aa4:	b508      	push	{r3, lr}
 8011aa6:	f001 f861 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011aaa:	4b06      	ldr	r3, [pc, #24]	@ (8011ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011aac:	4906      	ldr	r1, [pc, #24]	@ (8011ac8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x24>)
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	60c8      	str	r0, [r1, #12]
 8011ab2:	b10a      	cbz	r2, 8011ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x14>
 8011ab4:	4803      	ldr	r0, [pc, #12]	@ (8011ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011ab6:	bd08      	pop	{r3, pc}
 8011ab8:	4a04      	ldr	r2, [pc, #16]	@ (8011acc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>)
 8011aba:	4802      	ldr	r0, [pc, #8]	@ (8011ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x20>)
 8011abc:	6812      	ldr	r2, [r2, #0]
 8011abe:	601a      	str	r2, [r3, #0]
 8011ac0:	bd08      	pop	{r3, pc}
 8011ac2:	bf00      	nop
 8011ac4:	240001a0 	.word	0x240001a0
 8011ac8:	240000ec 	.word	0x240000ec
 8011acc:	24000d30 	.word	0x24000d30

08011ad0 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_init_function>:
 8011ad0:	f005 b828 	b.w	8016b24 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>

08011ad4 <autoware_auto_control_msgs__msg__LongitudinalCommand__rosidl_typesupport_introspection_c__LongitudinalCommand_fini_function>:
 8011ad4:	f005 b83c 	b.w	8016b50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>

08011ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011ad8:	b508      	push	{r3, lr}
 8011ada:	f001 f847 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ade:	4b06      	ldr	r3, [pc, #24]	@ (8011af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011ae0:	4906      	ldr	r1, [pc, #24]	@ (8011afc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x24>)
 8011ae2:	681a      	ldr	r2, [r3, #0]
 8011ae4:	60c8      	str	r0, [r1, #12]
 8011ae6:	b10a      	cbz	r2, 8011aec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x14>
 8011ae8:	4803      	ldr	r0, [pc, #12]	@ (8011af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011aea:	bd08      	pop	{r3, pc}
 8011aec:	4a04      	ldr	r2, [pc, #16]	@ (8011b00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x28>)
 8011aee:	4802      	ldr	r0, [pc, #8]	@ (8011af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x20>)
 8011af0:	6812      	ldr	r2, [r2, #0]
 8011af2:	601a      	str	r2, [r3, #0]
 8011af4:	bd08      	pop	{r3, pc}
 8011af6:	bf00      	nop
 8011af8:	2400029c 	.word	0x2400029c
 8011afc:	240001ac 	.word	0x240001ac
 8011b00:	24000d30 	.word	0x24000d30

08011b04 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011b04:	b570      	push	{r4, r5, r6, lr}
 8011b06:	4604      	mov	r4, r0
 8011b08:	b190      	cbz	r0, 8011b30 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannControlCommand+0x2c>
 8011b0a:	460e      	mov	r6, r1
 8011b0c:	f001 f83c 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011b10:	4605      	mov	r5, r0
 8011b12:	f104 0008 	add.w	r0, r4, #8
 8011b16:	4435      	add	r5, r6
 8011b18:	4629      	mov	r1, r5
 8011b1a:	f000 f885 	bl	8011c28 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011b1e:	4601      	mov	r1, r0
 8011b20:	f104 0018 	add.w	r0, r4, #24
 8011b24:	440d      	add	r5, r1
 8011b26:	4629      	mov	r1, r5
 8011b28:	f000 f90e 	bl	8011d48 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011b2c:	1b80      	subs	r0, r0, r6
 8011b2e:	4428      	add	r0, r5
 8011b30:	bd70      	pop	{r4, r5, r6, pc}
 8011b32:	bf00      	nop

08011b34 <_AckermannControlCommand__cdr_deserialize>:
 8011b34:	b570      	push	{r4, r5, r6, lr}
 8011b36:	460c      	mov	r4, r1
 8011b38:	b1e1      	cbz	r1, 8011b74 <_AckermannControlCommand__cdr_deserialize+0x40>
 8011b3a:	4605      	mov	r5, r0
 8011b3c:	f001 f888 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b40:	4603      	mov	r3, r0
 8011b42:	4621      	mov	r1, r4
 8011b44:	4628      	mov	r0, r5
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	4798      	blx	r3
 8011b4c:	f000 f8f8 	bl	8011d40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011b50:	4603      	mov	r3, r0
 8011b52:	f104 0108 	add.w	r1, r4, #8
 8011b56:	4628      	mov	r0, r5
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	4798      	blx	r3
 8011b5e:	f000 f9a1 	bl	8011ea4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011b62:	4603      	mov	r3, r0
 8011b64:	f104 0118 	add.w	r1, r4, #24
 8011b68:	4628      	mov	r0, r5
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	4718      	bx	r3
 8011b74:	4608      	mov	r0, r1
 8011b76:	bd70      	pop	{r4, r5, r6, pc}

08011b78 <_AckermannControlCommand__cdr_serialize>:
 8011b78:	b510      	push	{r4, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	9101      	str	r1, [sp, #4]
 8011b7e:	b1e8      	cbz	r0, 8011bbc <_AckermannControlCommand__cdr_serialize+0x44>
 8011b80:	4604      	mov	r4, r0
 8011b82:	f001 f865 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011b86:	4603      	mov	r3, r0
 8011b88:	9901      	ldr	r1, [sp, #4]
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	4798      	blx	r3
 8011b92:	f000 f8d5 	bl	8011d40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011b96:	4603      	mov	r3, r0
 8011b98:	9901      	ldr	r1, [sp, #4]
 8011b9a:	f104 0008 	add.w	r0, r4, #8
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	689b      	ldr	r3, [r3, #8]
 8011ba2:	4798      	blx	r3
 8011ba4:	f000 f97e 	bl	8011ea4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	9901      	ldr	r1, [sp, #4]
 8011bac:	f104 0018 	add.w	r0, r4, #24
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	689b      	ldr	r3, [r3, #8]
 8011bb4:	b002      	add	sp, #8
 8011bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bba:	4718      	bx	r3
 8011bbc:	b002      	add	sp, #8
 8011bbe:	bd10      	pop	{r4, pc}

08011bc0 <_AckermannControlCommand__get_serialized_size>:
 8011bc0:	b538      	push	{r3, r4, r5, lr}
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	b180      	cbz	r0, 8011be8 <_AckermannControlCommand__get_serialized_size+0x28>
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	f000 ffde 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011bcc:	4605      	mov	r5, r0
 8011bce:	f104 0008 	add.w	r0, r4, #8
 8011bd2:	4629      	mov	r1, r5
 8011bd4:	f000 f828 	bl	8011c28 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011bd8:	4601      	mov	r1, r0
 8011bda:	f104 0018 	add.w	r0, r4, #24
 8011bde:	440d      	add	r5, r1
 8011be0:	4629      	mov	r1, r5
 8011be2:	f000 f8b1 	bl	8011d48 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011be6:	4428      	add	r0, r5
 8011be8:	bd38      	pop	{r3, r4, r5, pc}
 8011bea:	bf00      	nop

08011bec <_AckermannControlCommand__max_serialized_size>:
 8011bec:	b510      	push	{r4, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	f10d 0007 	add.w	r0, sp, #7
 8011bf8:	f88d 3007 	strb.w	r3, [sp, #7]
 8011bfc:	f001 f814 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011c00:	4604      	mov	r4, r0
 8011c02:	f10d 0007 	add.w	r0, sp, #7
 8011c06:	4621      	mov	r1, r4
 8011c08:	f000 f884 	bl	8011d14 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>
 8011c0c:	4601      	mov	r1, r0
 8011c0e:	f10d 0007 	add.w	r0, sp, #7
 8011c12:	440c      	add	r4, r1
 8011c14:	4621      	mov	r1, r4
 8011c16:	f000 f929 	bl	8011e6c <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>
 8011c1a:	4420      	add	r0, r4
 8011c1c:	b002      	add	sp, #8
 8011c1e:	bd10      	pop	{r4, pc}

08011c20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand>:
 8011c20:	4800      	ldr	r0, [pc, #0]	@ (8011c24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannControlCommand+0x4>)
 8011c22:	4770      	bx	lr
 8011c24:	240002a8 	.word	0x240002a8

08011c28 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011c28:	b538      	push	{r3, r4, r5, lr}
 8011c2a:	b188      	cbz	r0, 8011c50 <get_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand+0x28>
 8011c2c:	460d      	mov	r5, r1
 8011c2e:	f000 ffab 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c32:	2104      	movs	r1, #4
 8011c34:	182c      	adds	r4, r5, r0
 8011c36:	f1c5 0504 	rsb	r5, r5, #4
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	f002 faa8 	bl	8014190 <ucdr_alignment>
 8011c40:	2104      	movs	r1, #4
 8011c42:	4408      	add	r0, r1
 8011c44:	4404      	add	r4, r0
 8011c46:	4620      	mov	r0, r4
 8011c48:	f002 faa2 	bl	8014190 <ucdr_alignment>
 8011c4c:	4428      	add	r0, r5
 8011c4e:	4420      	add	r0, r4
 8011c50:	bd38      	pop	{r3, r4, r5, pc}
 8011c52:	bf00      	nop

08011c54 <_AckermannLateralCommand__cdr_deserialize>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	460c      	mov	r4, r1
 8011c58:	b1a1      	cbz	r1, 8011c84 <_AckermannLateralCommand__cdr_deserialize+0x30>
 8011c5a:	4605      	mov	r5, r0
 8011c5c:	f000 fff8 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c60:	4603      	mov	r3, r0
 8011c62:	4621      	mov	r1, r4
 8011c64:	4628      	mov	r0, r5
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	4798      	blx	r3
 8011c6c:	f104 0108 	add.w	r1, r4, #8
 8011c70:	4628      	mov	r0, r5
 8011c72:	f002 f80f 	bl	8013c94 <ucdr_deserialize_float>
 8011c76:	f104 010c 	add.w	r1, r4, #12
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c80:	f002 b808 	b.w	8013c94 <ucdr_deserialize_float>
 8011c84:	4608      	mov	r0, r1
 8011c86:	bd38      	pop	{r3, r4, r5, pc}

08011c88 <_AckermannLateralCommand__cdr_serialize>:
 8011c88:	b1b0      	cbz	r0, 8011cb8 <_AckermannLateralCommand__cdr_serialize+0x30>
 8011c8a:	b538      	push	{r3, r4, r5, lr}
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	460d      	mov	r5, r1
 8011c90:	f000 ffde 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011c94:	4603      	mov	r3, r0
 8011c96:	4629      	mov	r1, r5
 8011c98:	4620      	mov	r0, r4
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	689b      	ldr	r3, [r3, #8]
 8011c9e:	4798      	blx	r3
 8011ca0:	ed94 0a02 	vldr	s0, [r4, #8]
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	f001 ff5d 	bl	8013b64 <ucdr_serialize_float>
 8011caa:	ed94 0a03 	vldr	s0, [r4, #12]
 8011cae:	4628      	mov	r0, r5
 8011cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cb4:	f001 bf56 	b.w	8013b64 <ucdr_serialize_float>
 8011cb8:	4770      	bx	lr
 8011cba:	bf00      	nop

08011cbc <_AckermannLateralCommand__get_serialized_size>:
 8011cbc:	b180      	cbz	r0, 8011ce0 <_AckermannLateralCommand__get_serialized_size+0x24>
 8011cbe:	2100      	movs	r1, #0
 8011cc0:	b510      	push	{r4, lr}
 8011cc2:	f000 ff61 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	2104      	movs	r1, #4
 8011cca:	f002 fa61 	bl	8014190 <ucdr_alignment>
 8011cce:	2104      	movs	r1, #4
 8011cd0:	4420      	add	r0, r4
 8011cd2:	1844      	adds	r4, r0, r1
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f002 fa5b 	bl	8014190 <ucdr_alignment>
 8011cda:	3004      	adds	r0, #4
 8011cdc:	4420      	add	r0, r4
 8011cde:	bd10      	pop	{r4, pc}
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop

08011ce4 <_AckermannLateralCommand__max_serialized_size>:
 8011ce4:	b510      	push	{r4, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	2301      	movs	r3, #1
 8011cea:	2100      	movs	r1, #0
 8011cec:	f10d 0007 	add.w	r0, sp, #7
 8011cf0:	f88d 3007 	strb.w	r3, [sp, #7]
 8011cf4:	f000 ff98 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	2104      	movs	r1, #4
 8011cfc:	f002 fa48 	bl	8014190 <ucdr_alignment>
 8011d00:	2104      	movs	r1, #4
 8011d02:	4420      	add	r0, r4
 8011d04:	1844      	adds	r4, r0, r1
 8011d06:	4620      	mov	r0, r4
 8011d08:	f002 fa42 	bl	8014190 <ucdr_alignment>
 8011d0c:	3004      	adds	r0, #4
 8011d0e:	4420      	add	r0, r4
 8011d10:	b002      	add	sp, #8
 8011d12:	bd10      	pop	{r4, pc}

08011d14 <max_serialized_size_autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011d14:	2301      	movs	r3, #1
 8011d16:	b570      	push	{r4, r5, r6, lr}
 8011d18:	460c      	mov	r4, r1
 8011d1a:	7003      	strb	r3, [r0, #0]
 8011d1c:	f000 ff84 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d20:	2104      	movs	r1, #4
 8011d22:	1826      	adds	r6, r4, r0
 8011d24:	f1c4 0404 	rsb	r4, r4, #4
 8011d28:	4630      	mov	r0, r6
 8011d2a:	f002 fa31 	bl	8014190 <ucdr_alignment>
 8011d2e:	2104      	movs	r1, #4
 8011d30:	1845      	adds	r5, r0, r1
 8011d32:	4435      	add	r5, r6
 8011d34:	4628      	mov	r0, r5
 8011d36:	f002 fa2b 	bl	8014190 <ucdr_alignment>
 8011d3a:	4420      	add	r0, r4
 8011d3c:	4428      	add	r0, r5
 8011d3e:	bd70      	pop	{r4, r5, r6, pc}

08011d40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand>:
 8011d40:	4800      	ldr	r0, [pc, #0]	@ (8011d44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__AckermannLateralCommand+0x4>)
 8011d42:	4770      	bx	lr
 8011d44:	240002d0 	.word	0x240002d0

08011d48 <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011d48:	b1c8      	cbz	r0, 8011d7e <get_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand+0x36>
 8011d4a:	b570      	push	{r4, r5, r6, lr}
 8011d4c:	460d      	mov	r5, r1
 8011d4e:	f000 ff1b 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011d52:	2104      	movs	r1, #4
 8011d54:	182e      	adds	r6, r5, r0
 8011d56:	f1c5 0504 	rsb	r5, r5, #4
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f002 fa18 	bl	8014190 <ucdr_alignment>
 8011d60:	2104      	movs	r1, #4
 8011d62:	1844      	adds	r4, r0, r1
 8011d64:	4434      	add	r4, r6
 8011d66:	4620      	mov	r0, r4
 8011d68:	f002 fa12 	bl	8014190 <ucdr_alignment>
 8011d6c:	2104      	movs	r1, #4
 8011d6e:	4408      	add	r0, r1
 8011d70:	4404      	add	r4, r0
 8011d72:	4620      	mov	r0, r4
 8011d74:	f002 fa0c 	bl	8014190 <ucdr_alignment>
 8011d78:	4428      	add	r0, r5
 8011d7a:	4420      	add	r0, r4
 8011d7c:	bd70      	pop	{r4, r5, r6, pc}
 8011d7e:	4770      	bx	lr

08011d80 <_LongitudinalCommand__cdr_deserialize>:
 8011d80:	b538      	push	{r3, r4, r5, lr}
 8011d82:	460c      	mov	r4, r1
 8011d84:	b1c9      	cbz	r1, 8011dba <_LongitudinalCommand__cdr_deserialize+0x3a>
 8011d86:	4605      	mov	r5, r0
 8011d88:	f000 ff62 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	4621      	mov	r1, r4
 8011d90:	4628      	mov	r0, r5
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	4798      	blx	r3
 8011d98:	f104 0108 	add.w	r1, r4, #8
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f001 ff79 	bl	8013c94 <ucdr_deserialize_float>
 8011da2:	f104 010c 	add.w	r1, r4, #12
 8011da6:	4628      	mov	r0, r5
 8011da8:	f001 ff74 	bl	8013c94 <ucdr_deserialize_float>
 8011dac:	f104 0110 	add.w	r1, r4, #16
 8011db0:	4628      	mov	r0, r5
 8011db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011db6:	f001 bf6d 	b.w	8013c94 <ucdr_deserialize_float>
 8011dba:	4608      	mov	r0, r1
 8011dbc:	bd38      	pop	{r3, r4, r5, pc}
 8011dbe:	bf00      	nop

08011dc0 <_LongitudinalCommand__cdr_serialize>:
 8011dc0:	b1d8      	cbz	r0, 8011dfa <_LongitudinalCommand__cdr_serialize+0x3a>
 8011dc2:	b538      	push	{r3, r4, r5, lr}
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	460d      	mov	r5, r1
 8011dc8:	f000 ff42 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	4629      	mov	r1, r5
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	4798      	blx	r3
 8011dd8:	ed94 0a02 	vldr	s0, [r4, #8]
 8011ddc:	4628      	mov	r0, r5
 8011dde:	f001 fec1 	bl	8013b64 <ucdr_serialize_float>
 8011de2:	ed94 0a03 	vldr	s0, [r4, #12]
 8011de6:	4628      	mov	r0, r5
 8011de8:	f001 febc 	bl	8013b64 <ucdr_serialize_float>
 8011dec:	ed94 0a04 	vldr	s0, [r4, #16]
 8011df0:	4628      	mov	r0, r5
 8011df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011df6:	f001 beb5 	b.w	8013b64 <ucdr_serialize_float>
 8011dfa:	4770      	bx	lr

08011dfc <_LongitudinalCommand__get_serialized_size>:
 8011dfc:	b1b0      	cbz	r0, 8011e2c <_LongitudinalCommand__get_serialized_size+0x30>
 8011dfe:	2100      	movs	r1, #0
 8011e00:	b510      	push	{r4, lr}
 8011e02:	f000 fec1 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8011e06:	4604      	mov	r4, r0
 8011e08:	2104      	movs	r1, #4
 8011e0a:	f002 f9c1 	bl	8014190 <ucdr_alignment>
 8011e0e:	2104      	movs	r1, #4
 8011e10:	4420      	add	r0, r4
 8011e12:	1844      	adds	r4, r0, r1
 8011e14:	4620      	mov	r0, r4
 8011e16:	f002 f9bb 	bl	8014190 <ucdr_alignment>
 8011e1a:	2104      	movs	r1, #4
 8011e1c:	4408      	add	r0, r1
 8011e1e:	4404      	add	r4, r0
 8011e20:	4620      	mov	r0, r4
 8011e22:	f002 f9b5 	bl	8014190 <ucdr_alignment>
 8011e26:	3004      	adds	r0, #4
 8011e28:	4420      	add	r0, r4
 8011e2a:	bd10      	pop	{r4, pc}
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop

08011e30 <_LongitudinalCommand__max_serialized_size>:
 8011e30:	b510      	push	{r4, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	2301      	movs	r3, #1
 8011e36:	2100      	movs	r1, #0
 8011e38:	f10d 0007 	add.w	r0, sp, #7
 8011e3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011e40:	f000 fef2 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011e44:	4604      	mov	r4, r0
 8011e46:	2104      	movs	r1, #4
 8011e48:	f002 f9a2 	bl	8014190 <ucdr_alignment>
 8011e4c:	2104      	movs	r1, #4
 8011e4e:	4420      	add	r0, r4
 8011e50:	1844      	adds	r4, r0, r1
 8011e52:	4620      	mov	r0, r4
 8011e54:	f002 f99c 	bl	8014190 <ucdr_alignment>
 8011e58:	2104      	movs	r1, #4
 8011e5a:	4408      	add	r0, r1
 8011e5c:	4404      	add	r4, r0
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f002 f996 	bl	8014190 <ucdr_alignment>
 8011e64:	3004      	adds	r0, #4
 8011e66:	4420      	add	r0, r4
 8011e68:	b002      	add	sp, #8
 8011e6a:	bd10      	pop	{r4, pc}

08011e6c <max_serialized_size_autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	b570      	push	{r4, r5, r6, lr}
 8011e70:	460c      	mov	r4, r1
 8011e72:	7003      	strb	r3, [r0, #0]
 8011e74:	f000 fed8 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8011e78:	2104      	movs	r1, #4
 8011e7a:	1826      	adds	r6, r4, r0
 8011e7c:	f1c4 0404 	rsb	r4, r4, #4
 8011e80:	4630      	mov	r0, r6
 8011e82:	f002 f985 	bl	8014190 <ucdr_alignment>
 8011e86:	2104      	movs	r1, #4
 8011e88:	1845      	adds	r5, r0, r1
 8011e8a:	4435      	add	r5, r6
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	f002 f97f 	bl	8014190 <ucdr_alignment>
 8011e92:	2104      	movs	r1, #4
 8011e94:	4408      	add	r0, r1
 8011e96:	4405      	add	r5, r0
 8011e98:	4628      	mov	r0, r5
 8011e9a:	f002 f979 	bl	8014190 <ucdr_alignment>
 8011e9e:	4420      	add	r0, r4
 8011ea0:	4428      	add	r0, r5
 8011ea2:	bd70      	pop	{r4, r5, r6, pc}

08011ea4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand>:
 8011ea4:	4800      	ldr	r0, [pc, #0]	@ (8011ea8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_control_msgs__msg__LongitudinalCommand+0x4>)
 8011ea6:	4770      	bx	lr
 8011ea8:	240002f8 	.word	0x240002f8

08011eac <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8011eac:	4b04      	ldr	r3, [pc, #16]	@ (8011ec0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	b10a      	cbz	r2, 8011eb6 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xa>
 8011eb2:	4803      	ldr	r0, [pc, #12]	@ (8011ec0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011eb4:	4770      	bx	lr
 8011eb6:	4a03      	ldr	r2, [pc, #12]	@ (8011ec4 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x18>)
 8011eb8:	4801      	ldr	r0, [pc, #4]	@ (8011ec0 <rosidl_typesupport_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x14>)
 8011eba:	6812      	ldr	r2, [r2, #0]
 8011ebc:	601a      	str	r2, [r3, #0]
 8011ebe:	4770      	bx	lr
 8011ec0:	24000328 	.word	0x24000328
 8011ec4:	24000d2c 	.word	0x24000d2c

08011ec8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8011ec8:	4b04      	ldr	r3, [pc, #16]	@ (8011edc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 8011eca:	4805      	ldr	r0, [pc, #20]	@ (8011ee0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	4905      	ldr	r1, [pc, #20]	@ (8011ee4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 8011ed0:	4a05      	ldr	r2, [pc, #20]	@ (8011ee8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 8011ed2:	6003      	str	r3, [r0, #0]
 8011ed4:	600b      	str	r3, [r1, #0]
 8011ed6:	6013      	str	r3, [r2, #0]
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop
 8011edc:	24000d2c 	.word	0x24000d2c
 8011ee0:	24000344 	.word	0x24000344
 8011ee4:	24000350 	.word	0x24000350
 8011ee8:	24000328 	.word	0x24000328

08011eec <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8011eec:	4b04      	ldr	r3, [pc, #16]	@ (8011f00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	b10a      	cbz	r2, 8011ef6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xa>
 8011ef2:	4803      	ldr	r0, [pc, #12]	@ (8011f00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011ef4:	4770      	bx	lr
 8011ef6:	4a03      	ldr	r2, [pc, #12]	@ (8011f04 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x18>)
 8011ef8:	4801      	ldr	r0, [pc, #4]	@ (8011f00 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>)
 8011efa:	6812      	ldr	r2, [r2, #0]
 8011efc:	601a      	str	r2, [r3, #0]
 8011efe:	4770      	bx	lr
 8011f00:	24000364 	.word	0x24000364
 8011f04:	24000d2c 	.word	0x24000d2c

08011f08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8011f08:	4a02      	ldr	r2, [pc, #8]	@ (8011f14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0xc>)
 8011f0a:	4b03      	ldr	r3, [pc, #12]	@ (8011f18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x10>)
 8011f0c:	6812      	ldr	r2, [r2, #0]
 8011f0e:	601a      	str	r2, [r3, #0]
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	24000d2c 	.word	0x24000d2c
 8011f18:	24000364 	.word	0x24000364

08011f1c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8011f1c:	4b04      	ldr	r3, [pc, #16]	@ (8011f30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	b10a      	cbz	r2, 8011f26 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xa>
 8011f22:	4803      	ldr	r0, [pc, #12]	@ (8011f30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011f24:	4770      	bx	lr
 8011f26:	4a03      	ldr	r2, [pc, #12]	@ (8011f34 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x18>)
 8011f28:	4801      	ldr	r0, [pc, #4]	@ (8011f30 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>)
 8011f2a:	6812      	ldr	r2, [r2, #0]
 8011f2c:	601a      	str	r2, [r3, #0]
 8011f2e:	4770      	bx	lr
 8011f30:	24000378 	.word	0x24000378
 8011f34:	24000d2c 	.word	0x24000d2c

08011f38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 8011f38:	4a02      	ldr	r2, [pc, #8]	@ (8011f44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0xc>)
 8011f3a:	4b03      	ldr	r3, [pc, #12]	@ (8011f48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x10>)
 8011f3c:	6812      	ldr	r2, [r2, #0]
 8011f3e:	601a      	str	r2, [r3, #0]
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop
 8011f44:	24000d2c 	.word	0x24000d2c
 8011f48:	24000378 	.word	0x24000378

08011f4c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8011f4c:	4b04      	ldr	r3, [pc, #16]	@ (8011f60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	b10a      	cbz	r2, 8011f56 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xa>
 8011f52:	4803      	ldr	r0, [pc, #12]	@ (8011f60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f54:	4770      	bx	lr
 8011f56:	4a03      	ldr	r2, [pc, #12]	@ (8011f64 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x18>)
 8011f58:	4801      	ldr	r0, [pc, #4]	@ (8011f60 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>)
 8011f5a:	6812      	ldr	r2, [r2, #0]
 8011f5c:	601a      	str	r2, [r3, #0]
 8011f5e:	4770      	bx	lr
 8011f60:	2400038c 	.word	0x2400038c
 8011f64:	24000d2c 	.word	0x24000d2c

08011f68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8011f68:	4a02      	ldr	r2, [pc, #8]	@ (8011f74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0xc>)
 8011f6a:	4b03      	ldr	r3, [pc, #12]	@ (8011f78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x10>)
 8011f6c:	6812      	ldr	r2, [r2, #0]
 8011f6e:	601a      	str	r2, [r3, #0]
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	24000d2c 	.word	0x24000d2c
 8011f78:	2400038c 	.word	0x2400038c

08011f7c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8011f7c:	4b04      	ldr	r3, [pc, #16]	@ (8011f90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	b10a      	cbz	r2, 8011f86 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xa>
 8011f82:	4803      	ldr	r0, [pc, #12]	@ (8011f90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f84:	4770      	bx	lr
 8011f86:	4a03      	ldr	r2, [pc, #12]	@ (8011f94 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x18>)
 8011f88:	4801      	ldr	r0, [pc, #4]	@ (8011f90 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>)
 8011f8a:	6812      	ldr	r2, [r2, #0]
 8011f8c:	601a      	str	r2, [r3, #0]
 8011f8e:	4770      	bx	lr
 8011f90:	240003a0 	.word	0x240003a0
 8011f94:	24000d2c 	.word	0x24000d2c

08011f98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8011f98:	4a02      	ldr	r2, [pc, #8]	@ (8011fa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 8011f9a:	4b03      	ldr	r3, [pc, #12]	@ (8011fa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8011f9c:	6812      	ldr	r2, [r2, #0]
 8011f9e:	601a      	str	r2, [r3, #0]
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	24000d2c 	.word	0x24000d2c
 8011fa8:	240003a0 	.word	0x240003a0

08011fac <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011fac:	4b04      	ldr	r3, [pc, #16]	@ (8011fc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	b10a      	cbz	r2, 8011fb6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xa>
 8011fb2:	4803      	ldr	r0, [pc, #12]	@ (8011fc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011fb4:	4770      	bx	lr
 8011fb6:	4a03      	ldr	r2, [pc, #12]	@ (8011fc4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x18>)
 8011fb8:	4801      	ldr	r0, [pc, #4]	@ (8011fc0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>)
 8011fba:	6812      	ldr	r2, [r2, #0]
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	4770      	bx	lr
 8011fc0:	240003b4 	.word	0x240003b4
 8011fc4:	24000d2c 	.word	0x24000d2c

08011fc8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8011fc8:	4a02      	ldr	r2, [pc, #8]	@ (8011fd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8011fca:	4b03      	ldr	r3, [pc, #12]	@ (8011fd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8011fcc:	6812      	ldr	r2, [r2, #0]
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop
 8011fd4:	24000d2c 	.word	0x24000d2c
 8011fd8:	240003b4 	.word	0x240003b4

08011fdc <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011fdc:	4b04      	ldr	r3, [pc, #16]	@ (8011ff0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	b10a      	cbz	r2, 8011fe6 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xa>
 8011fe2:	4803      	ldr	r0, [pc, #12]	@ (8011ff0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fe4:	4770      	bx	lr
 8011fe6:	4a03      	ldr	r2, [pc, #12]	@ (8011ff4 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x18>)
 8011fe8:	4801      	ldr	r0, [pc, #4]	@ (8011ff0 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>)
 8011fea:	6812      	ldr	r2, [r2, #0]
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	4770      	bx	lr
 8011ff0:	240003c8 	.word	0x240003c8
 8011ff4:	24000d2c 	.word	0x24000d2c

08011ff8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8011ff8:	4a02      	ldr	r2, [pc, #8]	@ (8012004 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0xc>)
 8011ffa:	4b03      	ldr	r3, [pc, #12]	@ (8012008 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x10>)
 8011ffc:	6812      	ldr	r2, [r2, #0]
 8011ffe:	601a      	str	r2, [r3, #0]
 8012000:	4770      	bx	lr
 8012002:	bf00      	nop
 8012004:	24000d2c 	.word	0x24000d2c
 8012008:	240003c8 	.word	0x240003c8

0801200c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 801200c:	4b04      	ldr	r3, [pc, #16]	@ (8012020 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	b10a      	cbz	r2, 8012016 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xa>
 8012012:	4803      	ldr	r0, [pc, #12]	@ (8012020 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 8012014:	4770      	bx	lr
 8012016:	4a03      	ldr	r2, [pc, #12]	@ (8012024 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x18>)
 8012018:	4801      	ldr	r0, [pc, #4]	@ (8012020 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>)
 801201a:	6812      	ldr	r2, [r2, #0]
 801201c:	601a      	str	r2, [r3, #0]
 801201e:	4770      	bx	lr
 8012020:	240003dc 	.word	0x240003dc
 8012024:	24000d2c 	.word	0x24000d2c

08012028 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012028:	4a02      	ldr	r2, [pc, #8]	@ (8012034 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 801202a:	4b03      	ldr	r3, [pc, #12]	@ (8012038 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 801202c:	6812      	ldr	r2, [r2, #0]
 801202e:	601a      	str	r2, [r3, #0]
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop
 8012034:	24000d2c 	.word	0x24000d2c
 8012038:	240003dc 	.word	0x240003dc

0801203c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 801203c:	4b04      	ldr	r3, [pc, #16]	@ (8012050 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	b10a      	cbz	r2, 8012046 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xa>
 8012042:	4803      	ldr	r0, [pc, #12]	@ (8012050 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 8012044:	4770      	bx	lr
 8012046:	4a03      	ldr	r2, [pc, #12]	@ (8012054 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x18>)
 8012048:	4801      	ldr	r0, [pc, #4]	@ (8012050 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>)
 801204a:	6812      	ldr	r2, [r2, #0]
 801204c:	601a      	str	r2, [r3, #0]
 801204e:	4770      	bx	lr
 8012050:	240003f0 	.word	0x240003f0
 8012054:	24000d2c 	.word	0x24000d2c

08012058 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012058:	4a02      	ldr	r2, [pc, #8]	@ (8012064 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 801205a:	4b03      	ldr	r3, [pc, #12]	@ (8012068 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 801205c:	6812      	ldr	r2, [r2, #0]
 801205e:	601a      	str	r2, [r3, #0]
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	24000d2c 	.word	0x24000d2c
 8012068:	240003f0 	.word	0x240003f0

0801206c <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 801206c:	4b04      	ldr	r3, [pc, #16]	@ (8012080 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 801206e:	681a      	ldr	r2, [r3, #0]
 8012070:	b10a      	cbz	r2, 8012076 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xa>
 8012072:	4803      	ldr	r0, [pc, #12]	@ (8012080 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 8012074:	4770      	bx	lr
 8012076:	4a03      	ldr	r2, [pc, #12]	@ (8012084 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x18>)
 8012078:	4801      	ldr	r0, [pc, #4]	@ (8012080 <rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>)
 801207a:	6812      	ldr	r2, [r2, #0]
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	4770      	bx	lr
 8012080:	24000404 	.word	0x24000404
 8012084:	24000d2c 	.word	0x24000d2c

08012088 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012088:	4a02      	ldr	r2, [pc, #8]	@ (8012094 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0xc>)
 801208a:	4b03      	ldr	r3, [pc, #12]	@ (8012098 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x10>)
 801208c:	6812      	ldr	r2, [r2, #0]
 801208e:	601a      	str	r2, [r3, #0]
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop
 8012094:	24000d2c 	.word	0x24000d2c
 8012098:	24000404 	.word	0x24000404

0801209c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 801209c:	f004 bd5c 	b.w	8016b58 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>

080120a0 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 80120a0:	f004 bd6c 	b.w	8016b7c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>

080120a4 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 80120a4:	f004 bd6e 	b.w	8016b84 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>

080120a8 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 80120a8:	f004 bd70 	b.w	8016b8c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>

080120ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 80120ac:	b508      	push	{r3, lr}
 80120ae:	f000 fd5d 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120b2:	4b06      	ldr	r3, [pc, #24]	@ (80120cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120b4:	4906      	ldr	r1, [pc, #24]	@ (80120d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	60c8      	str	r0, [r1, #12]
 80120ba:	b10a      	cbz	r2, 80120c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 80120bc:	4803      	ldr	r0, [pc, #12]	@ (80120cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120be:	bd08      	pop	{r3, pc}
 80120c0:	4a04      	ldr	r2, [pc, #16]	@ (80120d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 80120c2:	4802      	ldr	r0, [pc, #8]	@ (80120cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80120c4:	6812      	ldr	r2, [r2, #0]
 80120c6:	601a      	str	r2, [r3, #0]
 80120c8:	bd08      	pop	{r3, pc}
 80120ca:	bf00      	nop
 80120cc:	24000488 	.word	0x24000488
 80120d0:	24000410 	.word	0x24000410
 80120d4:	24000d30 	.word	0x24000d30

080120d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 80120d8:	4b04      	ldr	r3, [pc, #16]	@ (80120ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	b10a      	cbz	r2, 80120e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 80120de:	4803      	ldr	r0, [pc, #12]	@ (80120ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120e0:	4770      	bx	lr
 80120e2:	4a03      	ldr	r2, [pc, #12]	@ (80120f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 80120e4:	4801      	ldr	r0, [pc, #4]	@ (80120ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80120e6:	6812      	ldr	r2, [r2, #0]
 80120e8:	601a      	str	r2, [r3, #0]
 80120ea:	4770      	bx	lr
 80120ec:	240004d0 	.word	0x240004d0
 80120f0:	24000d30 	.word	0x24000d30

080120f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 80120f4:	4b16      	ldr	r3, [pc, #88]	@ (8012150 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	b510      	push	{r4, lr}
 80120fa:	b132      	cbz	r2, 801210a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x16>
 80120fc:	685c      	ldr	r4, [r3, #4]
 80120fe:	68a3      	ldr	r3, [r4, #8]
 8012100:	b153      	cbz	r3, 8012118 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x24>
 8012102:	68e3      	ldr	r3, [r4, #12]
 8012104:	b1a3      	cbz	r3, 8012130 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8012106:	4812      	ldr	r0, [pc, #72]	@ (8012150 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8012108:	bd10      	pop	{r4, pc}
 801210a:	4a12      	ldr	r2, [pc, #72]	@ (8012154 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 801210c:	685c      	ldr	r4, [r3, #4]
 801210e:	6812      	ldr	r2, [r2, #0]
 8012110:	601a      	str	r2, [r3, #0]
 8012112:	68a3      	ldr	r3, [r4, #8]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d1f4      	bne.n	8012102 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0xe>
 8012118:	f000 fd28 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801211c:	4b0e      	ldr	r3, [pc, #56]	@ (8012158 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x64>)
 801211e:	490f      	ldr	r1, [pc, #60]	@ (801215c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8012120:	681a      	ldr	r2, [r3, #0]
 8012122:	60c8      	str	r0, [r1, #12]
 8012124:	b17a      	cbz	r2, 8012146 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x52>
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	60a3      	str	r3, [r4, #8]
 801212a:	68e3      	ldr	r3, [r4, #12]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1ea      	bne.n	8012106 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x12>
 8012130:	4b0b      	ldr	r3, [pc, #44]	@ (8012160 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8012132:	681a      	ldr	r2, [r3, #0]
 8012134:	b11a      	cbz	r2, 801213e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	4805      	ldr	r0, [pc, #20]	@ (8012150 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 801213a:	60e3      	str	r3, [r4, #12]
 801213c:	bd10      	pop	{r4, pc}
 801213e:	4a05      	ldr	r2, [pc, #20]	@ (8012154 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012140:	6812      	ldr	r2, [r2, #0]
 8012142:	601a      	str	r2, [r3, #0]
 8012144:	e7f7      	b.n	8012136 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x42>
 8012146:	4a03      	ldr	r2, [pc, #12]	@ (8012154 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8012148:	6812      	ldr	r2, [r2, #0]
 801214a:	601a      	str	r2, [r3, #0]
 801214c:	e7eb      	b.n	8012126 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x32>
 801214e:	bf00      	nop
 8012150:	240004ec 	.word	0x240004ec
 8012154:	24000d30 	.word	0x24000d30
 8012158:	24000488 	.word	0x24000488
 801215c:	24000410 	.word	0x24000410
 8012160:	240004d0 	.word	0x240004d0

08012164 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8012164:	f004 bd14 	b.w	8016b90 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>

08012168 <autoware_auto_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8012168:	f004 bd26 	b.w	8016bb8 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>

0801216c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 801216c:	b508      	push	{r3, lr}
 801216e:	f000 fcfd 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012172:	4b06      	ldr	r3, [pc, #24]	@ (801218c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012174:	4906      	ldr	r1, [pc, #24]	@ (8012190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x24>)
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	60c8      	str	r0, [r1, #12]
 801217a:	b10a      	cbz	r2, 8012180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x14>
 801217c:	4803      	ldr	r0, [pc, #12]	@ (801218c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 801217e:	bd08      	pop	{r3, pc}
 8012180:	4a04      	ldr	r2, [pc, #16]	@ (8012194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x28>)
 8012182:	4802      	ldr	r0, [pc, #8]	@ (801218c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x20>)
 8012184:	6812      	ldr	r2, [r2, #0]
 8012186:	601a      	str	r2, [r3, #0]
 8012188:	bd08      	pop	{r3, pc}
 801218a:	bf00      	nop
 801218c:	24000570 	.word	0x24000570
 8012190:	240004f8 	.word	0x240004f8
 8012194:	24000d30 	.word	0x24000d30

08012198 <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8012198:	f004 bd12 	b.w	8016bc0 <autoware_auto_vehicle_msgs__msg__GearCommand__init>

0801219c <autoware_auto_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 801219c:	f004 bd24 	b.w	8016be8 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>

080121a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 80121a0:	b508      	push	{r3, lr}
 80121a2:	f000 fce3 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121a6:	4b06      	ldr	r3, [pc, #24]	@ (80121c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80121a8:	4906      	ldr	r1, [pc, #24]	@ (80121c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x24>)
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	60c8      	str	r0, [r1, #12]
 80121ae:	b10a      	cbz	r2, 80121b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x14>
 80121b0:	4803      	ldr	r0, [pc, #12]	@ (80121c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80121b2:	bd08      	pop	{r3, pc}
 80121b4:	4a04      	ldr	r2, [pc, #16]	@ (80121c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x28>)
 80121b6:	4802      	ldr	r0, [pc, #8]	@ (80121c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x20>)
 80121b8:	6812      	ldr	r2, [r2, #0]
 80121ba:	601a      	str	r2, [r3, #0]
 80121bc:	bd08      	pop	{r3, pc}
 80121be:	bf00      	nop
 80121c0:	240005f4 	.word	0x240005f4
 80121c4:	2400057c 	.word	0x2400057c
 80121c8:	24000d30 	.word	0x24000d30

080121cc <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 80121cc:	f004 bd10 	b.w	8016bf0 <autoware_auto_vehicle_msgs__msg__GearReport__init>

080121d0 <autoware_auto_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 80121d0:	f004 bd22 	b.w	8016c18 <autoware_auto_vehicle_msgs__msg__GearReport__fini>

080121d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 80121d4:	b508      	push	{r3, lr}
 80121d6:	f000 fcc9 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80121da:	4b06      	ldr	r3, [pc, #24]	@ (80121f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80121dc:	4906      	ldr	r1, [pc, #24]	@ (80121f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x24>)
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	60c8      	str	r0, [r1, #12]
 80121e2:	b10a      	cbz	r2, 80121e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x14>
 80121e4:	4803      	ldr	r0, [pc, #12]	@ (80121f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80121e6:	bd08      	pop	{r3, pc}
 80121e8:	4a04      	ldr	r2, [pc, #16]	@ (80121fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x28>)
 80121ea:	4802      	ldr	r0, [pc, #8]	@ (80121f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x20>)
 80121ec:	6812      	ldr	r2, [r2, #0]
 80121ee:	601a      	str	r2, [r3, #0]
 80121f0:	bd08      	pop	{r3, pc}
 80121f2:	bf00      	nop
 80121f4:	24000678 	.word	0x24000678
 80121f8:	24000600 	.word	0x24000600
 80121fc:	24000d30 	.word	0x24000d30

08012200 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8012200:	f004 bd0e 	b.w	8016c20 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>

08012204 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8012204:	f004 bd20 	b.w	8016c48 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>

08012208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8012208:	b508      	push	{r3, lr}
 801220a:	f000 fcaf 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801220e:	4b06      	ldr	r3, [pc, #24]	@ (8012228 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012210:	4906      	ldr	r1, [pc, #24]	@ (801222c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	60c8      	str	r0, [r1, #12]
 8012216:	b10a      	cbz	r2, 801221c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8012218:	4803      	ldr	r0, [pc, #12]	@ (8012228 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 801221a:	bd08      	pop	{r3, pc}
 801221c:	4a04      	ldr	r2, [pc, #16]	@ (8012230 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 801221e:	4802      	ldr	r0, [pc, #8]	@ (8012228 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8012220:	6812      	ldr	r2, [r2, #0]
 8012222:	601a      	str	r2, [r3, #0]
 8012224:	bd08      	pop	{r3, pc}
 8012226:	bf00      	nop
 8012228:	240006fc 	.word	0x240006fc
 801222c:	24000684 	.word	0x24000684
 8012230:	24000d30 	.word	0x24000d30

08012234 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8012234:	f004 bd0c 	b.w	8016c50 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>

08012238 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8012238:	f004 bd1e 	b.w	8016c78 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>

0801223c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 801223c:	b508      	push	{r3, lr}
 801223e:	f000 fc95 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012242:	4b06      	ldr	r3, [pc, #24]	@ (801225c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012244:	4906      	ldr	r1, [pc, #24]	@ (8012260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	60c8      	str	r0, [r1, #12]
 801224a:	b10a      	cbz	r2, 8012250 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x14>
 801224c:	4803      	ldr	r0, [pc, #12]	@ (801225c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 801224e:	bd08      	pop	{r3, pc}
 8012250:	4a04      	ldr	r2, [pc, #16]	@ (8012264 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8012252:	4802      	ldr	r0, [pc, #8]	@ (801225c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8012254:	6812      	ldr	r2, [r2, #0]
 8012256:	601a      	str	r2, [r3, #0]
 8012258:	bd08      	pop	{r3, pc}
 801225a:	bf00      	nop
 801225c:	24000780 	.word	0x24000780
 8012260:	24000708 	.word	0x24000708
 8012264:	24000d30 	.word	0x24000d30

08012268 <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8012268:	f004 bd0a 	b.w	8016c80 <autoware_auto_vehicle_msgs__msg__SteeringReport__init>

0801226c <autoware_auto_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 801226c:	f004 bd1c 	b.w	8016ca8 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>

08012270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8012270:	b508      	push	{r3, lr}
 8012272:	f000 fc7b 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012276:	4b06      	ldr	r3, [pc, #24]	@ (8012290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012278:	4906      	ldr	r1, [pc, #24]	@ (8012294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x24>)
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	60c8      	str	r0, [r1, #12]
 801227e:	b10a      	cbz	r2, 8012284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x14>
 8012280:	4803      	ldr	r0, [pc, #12]	@ (8012290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012282:	bd08      	pop	{r3, pc}
 8012284:	4a04      	ldr	r2, [pc, #16]	@ (8012298 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x28>)
 8012286:	4802      	ldr	r0, [pc, #8]	@ (8012290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x20>)
 8012288:	6812      	ldr	r2, [r2, #0]
 801228a:	601a      	str	r2, [r3, #0]
 801228c:	bd08      	pop	{r3, pc}
 801228e:	bf00      	nop
 8012290:	24000804 	.word	0x24000804
 8012294:	2400078c 	.word	0x2400078c
 8012298:	24000d30 	.word	0x24000d30

0801229c <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 801229c:	f004 bd08 	b.w	8016cb0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>

080122a0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 80122a0:	f004 bd1a 	b.w	8016cd8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

080122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80122a4:	b508      	push	{r3, lr}
 80122a6:	f000 fc61 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122aa:	4b06      	ldr	r3, [pc, #24]	@ (80122c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122ac:	4906      	ldr	r1, [pc, #24]	@ (80122c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	60c8      	str	r0, [r1, #12]
 80122b2:	b10a      	cbz	r2, 80122b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 80122b4:	4803      	ldr	r0, [pc, #12]	@ (80122c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122b6:	bd08      	pop	{r3, pc}
 80122b8:	4a04      	ldr	r2, [pc, #16]	@ (80122cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 80122ba:	4802      	ldr	r0, [pc, #8]	@ (80122c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 80122bc:	6812      	ldr	r2, [r2, #0]
 80122be:	601a      	str	r2, [r3, #0]
 80122c0:	bd08      	pop	{r3, pc}
 80122c2:	bf00      	nop
 80122c4:	24000888 	.word	0x24000888
 80122c8:	24000810 	.word	0x24000810
 80122cc:	24000d30 	.word	0x24000d30

080122d0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 80122d0:	f004 bd06 	b.w	8016ce0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>

080122d4 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 80122d4:	f004 bd18 	b.w	8016d08 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>

080122d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 80122d8:	b508      	push	{r3, lr}
 80122da:	f000 fc47 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122de:	4b06      	ldr	r3, [pc, #24]	@ (80122f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122e0:	4906      	ldr	r1, [pc, #24]	@ (80122fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	60c8      	str	r0, [r1, #12]
 80122e6:	b10a      	cbz	r2, 80122ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 80122e8:	4803      	ldr	r0, [pc, #12]	@ (80122f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122ea:	bd08      	pop	{r3, pc}
 80122ec:	4a04      	ldr	r2, [pc, #16]	@ (8012300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 80122ee:	4802      	ldr	r0, [pc, #8]	@ (80122f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 80122f0:	6812      	ldr	r2, [r2, #0]
 80122f2:	601a      	str	r2, [r3, #0]
 80122f4:	bd08      	pop	{r3, pc}
 80122f6:	bf00      	nop
 80122f8:	2400090c 	.word	0x2400090c
 80122fc:	24000894 	.word	0x24000894
 8012300:	24000d30 	.word	0x24000d30

08012304 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8012304:	f004 bd04 	b.w	8016d10 <autoware_auto_vehicle_msgs__msg__VelocityReport__init>

08012308 <autoware_auto_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8012308:	f004 bd18 	b.w	8016d3c <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>

0801230c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 801230c:	b508      	push	{r3, lr}
 801230e:	f004 f897 	bl	8016440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012312:	4b06      	ldr	r3, [pc, #24]	@ (801232c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8012314:	4906      	ldr	r1, [pc, #24]	@ (8012330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x24>)
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	60c8      	str	r0, [r1, #12]
 801231a:	b10a      	cbz	r2, 8012320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x14>
 801231c:	4803      	ldr	r0, [pc, #12]	@ (801232c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 801231e:	bd08      	pop	{r3, pc}
 8012320:	4a04      	ldr	r2, [pc, #16]	@ (8012334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x28>)
 8012322:	4802      	ldr	r0, [pc, #8]	@ (801232c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x20>)
 8012324:	6812      	ldr	r2, [r2, #0]
 8012326:	601a      	str	r2, [r3, #0]
 8012328:	bd08      	pop	{r3, pc}
 801232a:	bf00      	nop
 801232c:	24000a08 	.word	0x24000a08
 8012330:	24000918 	.word	0x24000918
 8012334:	24000d30 	.word	0x24000d30

08012338 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012338:	4800      	ldr	r0, [pc, #0]	@ (801233c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 801233a:	4770      	bx	lr
 801233c:	24000a30 	.word	0x24000a30

08012340 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012340:	4800      	ldr	r0, [pc, #0]	@ (8012344 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8012342:	4770      	bx	lr
 8012344:	24000a3c 	.word	0x24000a3c

08012348 <_ControlModeCommand_Response__max_serialized_size>:
 8012348:	2101      	movs	r1, #1
 801234a:	2000      	movs	r0, #0
 801234c:	b508      	push	{r3, lr}
 801234e:	f001 ff1f 	bl	8014190 <ucdr_alignment>
 8012352:	3001      	adds	r0, #1
 8012354:	bd08      	pop	{r3, pc}
 8012356:	bf00      	nop

08012358 <_ControlModeCommand_Response__cdr_deserialize>:
 8012358:	b109      	cbz	r1, 801235e <_ControlModeCommand_Response__cdr_deserialize+0x6>
 801235a:	f000 bc93 	b.w	8012c84 <ucdr_deserialize_bool>
 801235e:	4608      	mov	r0, r1
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop

08012364 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request>:
 8012364:	b538      	push	{r3, r4, r5, lr}
 8012366:	b158      	cbz	r0, 8012380 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8012368:	460d      	mov	r5, r1
 801236a:	f000 fc0d 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 801236e:	2101      	movs	r1, #1
 8012370:	182c      	adds	r4, r5, r0
 8012372:	f1c5 0501 	rsb	r5, r5, #1
 8012376:	4620      	mov	r0, r4
 8012378:	f001 ff0a 	bl	8014190 <ucdr_alignment>
 801237c:	4428      	add	r0, r5
 801237e:	4420      	add	r0, r4
 8012380:	bd38      	pop	{r3, r4, r5, pc}
 8012382:	bf00      	nop

08012384 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response>:
 8012384:	b138      	cbz	r0, 8012396 <get_serialized_size_autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8012386:	b508      	push	{r3, lr}
 8012388:	460b      	mov	r3, r1
 801238a:	2101      	movs	r1, #1
 801238c:	4618      	mov	r0, r3
 801238e:	f001 feff 	bl	8014190 <ucdr_alignment>
 8012392:	3001      	adds	r0, #1
 8012394:	bd08      	pop	{r3, pc}
 8012396:	4770      	bx	lr

08012398 <_ControlModeCommand_Request__cdr_deserialize>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	460c      	mov	r4, r1
 801239c:	b179      	cbz	r1, 80123be <_ControlModeCommand_Request__cdr_deserialize+0x26>
 801239e:	4605      	mov	r5, r0
 80123a0:	f000 fc56 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123a4:	4603      	mov	r3, r0
 80123a6:	4621      	mov	r1, r4
 80123a8:	4628      	mov	r0, r5
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	4798      	blx	r3
 80123b0:	f104 0108 	add.w	r1, r4, #8
 80123b4:	4628      	mov	r0, r5
 80123b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123ba:	f000 bc91 	b.w	8012ce0 <ucdr_deserialize_uint8_t>
 80123be:	4608      	mov	r0, r1
 80123c0:	bd38      	pop	{r3, r4, r5, pc}
 80123c2:	bf00      	nop

080123c4 <_ControlModeCommand_Request__cdr_serialize>:
 80123c4:	b180      	cbz	r0, 80123e8 <_ControlModeCommand_Request__cdr_serialize+0x24>
 80123c6:	b538      	push	{r3, r4, r5, lr}
 80123c8:	4604      	mov	r4, r0
 80123ca:	460d      	mov	r5, r1
 80123cc:	f000 fc40 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80123d0:	4603      	mov	r3, r0
 80123d2:	4629      	mov	r1, r5
 80123d4:	4620      	mov	r0, r4
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	4798      	blx	r3
 80123dc:	7a21      	ldrb	r1, [r4, #8]
 80123de:	4628      	mov	r0, r5
 80123e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123e4:	f000 bc66 	b.w	8012cb4 <ucdr_serialize_uint8_t>
 80123e8:	4770      	bx	lr
 80123ea:	bf00      	nop

080123ec <_ControlModeCommand_Response__cdr_serialize>:
 80123ec:	460a      	mov	r2, r1
 80123ee:	b118      	cbz	r0, 80123f8 <_ControlModeCommand_Response__cdr_serialize+0xc>
 80123f0:	7801      	ldrb	r1, [r0, #0]
 80123f2:	4610      	mov	r0, r2
 80123f4:	f000 bc30 	b.w	8012c58 <ucdr_serialize_bool>
 80123f8:	4770      	bx	lr
 80123fa:	bf00      	nop

080123fc <_ControlModeCommand_Response__get_serialized_size>:
 80123fc:	b130      	cbz	r0, 801240c <_ControlModeCommand_Response__get_serialized_size+0x10>
 80123fe:	2101      	movs	r1, #1
 8012400:	2000      	movs	r0, #0
 8012402:	b508      	push	{r3, lr}
 8012404:	f001 fec4 	bl	8014190 <ucdr_alignment>
 8012408:	3001      	adds	r0, #1
 801240a:	bd08      	pop	{r3, pc}
 801240c:	4770      	bx	lr
 801240e:	bf00      	nop

08012410 <_ControlModeCommand_Request__get_serialized_size>:
 8012410:	b150      	cbz	r0, 8012428 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8012412:	2100      	movs	r1, #0
 8012414:	b510      	push	{r4, lr}
 8012416:	f000 fbb7 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 801241a:	4604      	mov	r4, r0
 801241c:	2101      	movs	r1, #1
 801241e:	f001 feb7 	bl	8014190 <ucdr_alignment>
 8012422:	4420      	add	r0, r4
 8012424:	3001      	adds	r0, #1
 8012426:	bd10      	pop	{r4, pc}
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop

0801242c <_ControlModeCommand_Request__max_serialized_size>:
 801242c:	b510      	push	{r4, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	2401      	movs	r4, #1
 8012432:	2100      	movs	r1, #0
 8012434:	f10d 0007 	add.w	r0, sp, #7
 8012438:	f88d 4007 	strb.w	r4, [sp, #7]
 801243c:	f000 fbf4 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012440:	4621      	mov	r1, r4
 8012442:	4604      	mov	r4, r0
 8012444:	f001 fea4 	bl	8014190 <ucdr_alignment>
 8012448:	4420      	add	r0, r4
 801244a:	3001      	adds	r0, #1
 801244c:	b002      	add	sp, #8
 801244e:	bd10      	pop	{r4, pc}

08012450 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand>:
 8012450:	4800      	ldr	r0, [pc, #0]	@ (8012454 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_auto_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8012452:	4770      	bx	lr
 8012454:	24000a24 	.word	0x24000a24

08012458 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	b158      	cbz	r0, 8012474 <get_serialized_size_autoware_auto_vehicle_msgs__msg__ControlModeReport+0x1c>
 801245c:	460d      	mov	r5, r1
 801245e:	f000 fb93 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012462:	2101      	movs	r1, #1
 8012464:	182c      	adds	r4, r5, r0
 8012466:	f1c5 0501 	rsb	r5, r5, #1
 801246a:	4620      	mov	r0, r4
 801246c:	f001 fe90 	bl	8014190 <ucdr_alignment>
 8012470:	4428      	add	r0, r5
 8012472:	4420      	add	r0, r4
 8012474:	bd38      	pop	{r3, r4, r5, pc}
 8012476:	bf00      	nop

08012478 <_ControlModeReport__cdr_deserialize>:
 8012478:	b538      	push	{r3, r4, r5, lr}
 801247a:	460c      	mov	r4, r1
 801247c:	b179      	cbz	r1, 801249e <_ControlModeReport__cdr_deserialize+0x26>
 801247e:	4605      	mov	r5, r0
 8012480:	f000 fbe6 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012484:	4603      	mov	r3, r0
 8012486:	4621      	mov	r1, r4
 8012488:	4628      	mov	r0, r5
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	4798      	blx	r3
 8012490:	f104 0108 	add.w	r1, r4, #8
 8012494:	4628      	mov	r0, r5
 8012496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801249a:	f000 bc21 	b.w	8012ce0 <ucdr_deserialize_uint8_t>
 801249e:	4608      	mov	r0, r1
 80124a0:	bd38      	pop	{r3, r4, r5, pc}
 80124a2:	bf00      	nop

080124a4 <_ControlModeReport__cdr_serialize>:
 80124a4:	b180      	cbz	r0, 80124c8 <_ControlModeReport__cdr_serialize+0x24>
 80124a6:	b538      	push	{r3, r4, r5, lr}
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	f000 fbd0 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124b0:	4603      	mov	r3, r0
 80124b2:	4629      	mov	r1, r5
 80124b4:	4620      	mov	r0, r4
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	4798      	blx	r3
 80124bc:	7a21      	ldrb	r1, [r4, #8]
 80124be:	4628      	mov	r0, r5
 80124c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c4:	f000 bbf6 	b.w	8012cb4 <ucdr_serialize_uint8_t>
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop

080124cc <_ControlModeReport__get_serialized_size>:
 80124cc:	b150      	cbz	r0, 80124e4 <_ControlModeReport__get_serialized_size+0x18>
 80124ce:	2100      	movs	r1, #0
 80124d0:	b510      	push	{r4, lr}
 80124d2:	f000 fb59 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 80124d6:	4604      	mov	r4, r0
 80124d8:	2101      	movs	r1, #1
 80124da:	f001 fe59 	bl	8014190 <ucdr_alignment>
 80124de:	4420      	add	r0, r4
 80124e0:	3001      	adds	r0, #1
 80124e2:	bd10      	pop	{r4, pc}
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop

080124e8 <_ControlModeReport__max_serialized_size>:
 80124e8:	b510      	push	{r4, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	2401      	movs	r4, #1
 80124ee:	2100      	movs	r1, #0
 80124f0:	f10d 0007 	add.w	r0, sp, #7
 80124f4:	f88d 4007 	strb.w	r4, [sp, #7]
 80124f8:	f000 fb96 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 80124fc:	4621      	mov	r1, r4
 80124fe:	4604      	mov	r4, r0
 8012500:	f001 fe46 	bl	8014190 <ucdr_alignment>
 8012504:	4420      	add	r0, r4
 8012506:	3001      	adds	r0, #1
 8012508:	b002      	add	sp, #8
 801250a:	bd10      	pop	{r4, pc}

0801250c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport>:
 801250c:	4800      	ldr	r0, [pc, #0]	@ (8012510 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__ControlModeReport+0x4>)
 801250e:	4770      	bx	lr
 8012510:	24000a80 	.word	0x24000a80

08012514 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand>:
 8012514:	b538      	push	{r3, r4, r5, lr}
 8012516:	b158      	cbz	r0, 8012530 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearCommand+0x1c>
 8012518:	460d      	mov	r5, r1
 801251a:	f000 fb35 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 801251e:	2101      	movs	r1, #1
 8012520:	182c      	adds	r4, r5, r0
 8012522:	f1c5 0501 	rsb	r5, r5, #1
 8012526:	4620      	mov	r0, r4
 8012528:	f001 fe32 	bl	8014190 <ucdr_alignment>
 801252c:	4428      	add	r0, r5
 801252e:	4420      	add	r0, r4
 8012530:	bd38      	pop	{r3, r4, r5, pc}
 8012532:	bf00      	nop

08012534 <_GearCommand__cdr_deserialize>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	460c      	mov	r4, r1
 8012538:	b179      	cbz	r1, 801255a <_GearCommand__cdr_deserialize+0x26>
 801253a:	4605      	mov	r5, r0
 801253c:	f000 fb88 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012540:	4603      	mov	r3, r0
 8012542:	4621      	mov	r1, r4
 8012544:	4628      	mov	r0, r5
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	4798      	blx	r3
 801254c:	f104 0108 	add.w	r1, r4, #8
 8012550:	4628      	mov	r0, r5
 8012552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012556:	f000 bbc3 	b.w	8012ce0 <ucdr_deserialize_uint8_t>
 801255a:	4608      	mov	r0, r1
 801255c:	bd38      	pop	{r3, r4, r5, pc}
 801255e:	bf00      	nop

08012560 <_GearCommand__cdr_serialize>:
 8012560:	b180      	cbz	r0, 8012584 <_GearCommand__cdr_serialize+0x24>
 8012562:	b538      	push	{r3, r4, r5, lr}
 8012564:	4604      	mov	r4, r0
 8012566:	460d      	mov	r5, r1
 8012568:	f000 fb72 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801256c:	4603      	mov	r3, r0
 801256e:	4629      	mov	r1, r5
 8012570:	4620      	mov	r0, r4
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	689b      	ldr	r3, [r3, #8]
 8012576:	4798      	blx	r3
 8012578:	7a21      	ldrb	r1, [r4, #8]
 801257a:	4628      	mov	r0, r5
 801257c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012580:	f000 bb98 	b.w	8012cb4 <ucdr_serialize_uint8_t>
 8012584:	4770      	bx	lr
 8012586:	bf00      	nop

08012588 <_GearCommand__get_serialized_size>:
 8012588:	b150      	cbz	r0, 80125a0 <_GearCommand__get_serialized_size+0x18>
 801258a:	2100      	movs	r1, #0
 801258c:	b510      	push	{r4, lr}
 801258e:	f000 fafb 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012592:	4604      	mov	r4, r0
 8012594:	2101      	movs	r1, #1
 8012596:	f001 fdfb 	bl	8014190 <ucdr_alignment>
 801259a:	4420      	add	r0, r4
 801259c:	3001      	adds	r0, #1
 801259e:	bd10      	pop	{r4, pc}
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop

080125a4 <_GearCommand__max_serialized_size>:
 80125a4:	b510      	push	{r4, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	2401      	movs	r4, #1
 80125aa:	2100      	movs	r1, #0
 80125ac:	f10d 0007 	add.w	r0, sp, #7
 80125b0:	f88d 4007 	strb.w	r4, [sp, #7]
 80125b4:	f000 fb38 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 80125b8:	4621      	mov	r1, r4
 80125ba:	4604      	mov	r4, r0
 80125bc:	f001 fde8 	bl	8014190 <ucdr_alignment>
 80125c0:	4420      	add	r0, r4
 80125c2:	3001      	adds	r0, #1
 80125c4:	b002      	add	sp, #8
 80125c6:	bd10      	pop	{r4, pc}

080125c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand>:
 80125c8:	4800      	ldr	r0, [pc, #0]	@ (80125cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearCommand+0x4>)
 80125ca:	4770      	bx	lr
 80125cc:	24000aa8 	.word	0x24000aa8

080125d0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport>:
 80125d0:	b538      	push	{r3, r4, r5, lr}
 80125d2:	b158      	cbz	r0, 80125ec <get_serialized_size_autoware_auto_vehicle_msgs__msg__GearReport+0x1c>
 80125d4:	460d      	mov	r5, r1
 80125d6:	f000 fad7 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 80125da:	2101      	movs	r1, #1
 80125dc:	182c      	adds	r4, r5, r0
 80125de:	f1c5 0501 	rsb	r5, r5, #1
 80125e2:	4620      	mov	r0, r4
 80125e4:	f001 fdd4 	bl	8014190 <ucdr_alignment>
 80125e8:	4428      	add	r0, r5
 80125ea:	4420      	add	r0, r4
 80125ec:	bd38      	pop	{r3, r4, r5, pc}
 80125ee:	bf00      	nop

080125f0 <_GearReport__cdr_deserialize>:
 80125f0:	b538      	push	{r3, r4, r5, lr}
 80125f2:	460c      	mov	r4, r1
 80125f4:	b179      	cbz	r1, 8012616 <_GearReport__cdr_deserialize+0x26>
 80125f6:	4605      	mov	r5, r0
 80125f8:	f000 fb2a 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125fc:	4603      	mov	r3, r0
 80125fe:	4621      	mov	r1, r4
 8012600:	4628      	mov	r0, r5
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	68db      	ldr	r3, [r3, #12]
 8012606:	4798      	blx	r3
 8012608:	f104 0108 	add.w	r1, r4, #8
 801260c:	4628      	mov	r0, r5
 801260e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012612:	f000 bb65 	b.w	8012ce0 <ucdr_deserialize_uint8_t>
 8012616:	4608      	mov	r0, r1
 8012618:	bd38      	pop	{r3, r4, r5, pc}
 801261a:	bf00      	nop

0801261c <_GearReport__cdr_serialize>:
 801261c:	b180      	cbz	r0, 8012640 <_GearReport__cdr_serialize+0x24>
 801261e:	b538      	push	{r3, r4, r5, lr}
 8012620:	4604      	mov	r4, r0
 8012622:	460d      	mov	r5, r1
 8012624:	f000 fb14 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012628:	4603      	mov	r3, r0
 801262a:	4629      	mov	r1, r5
 801262c:	4620      	mov	r0, r4
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	689b      	ldr	r3, [r3, #8]
 8012632:	4798      	blx	r3
 8012634:	7a21      	ldrb	r1, [r4, #8]
 8012636:	4628      	mov	r0, r5
 8012638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801263c:	f000 bb3a 	b.w	8012cb4 <ucdr_serialize_uint8_t>
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop

08012644 <_GearReport__get_serialized_size>:
 8012644:	b150      	cbz	r0, 801265c <_GearReport__get_serialized_size+0x18>
 8012646:	2100      	movs	r1, #0
 8012648:	b510      	push	{r4, lr}
 801264a:	f000 fa9d 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 801264e:	4604      	mov	r4, r0
 8012650:	2101      	movs	r1, #1
 8012652:	f001 fd9d 	bl	8014190 <ucdr_alignment>
 8012656:	4420      	add	r0, r4
 8012658:	3001      	adds	r0, #1
 801265a:	bd10      	pop	{r4, pc}
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop

08012660 <_GearReport__max_serialized_size>:
 8012660:	b510      	push	{r4, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	2401      	movs	r4, #1
 8012666:	2100      	movs	r1, #0
 8012668:	f10d 0007 	add.w	r0, sp, #7
 801266c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012670:	f000 fada 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012674:	4621      	mov	r1, r4
 8012676:	4604      	mov	r4, r0
 8012678:	f001 fd8a 	bl	8014190 <ucdr_alignment>
 801267c:	4420      	add	r0, r4
 801267e:	3001      	adds	r0, #1
 8012680:	b002      	add	sp, #8
 8012682:	bd10      	pop	{r4, pc}

08012684 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport>:
 8012684:	4800      	ldr	r0, [pc, #0]	@ (8012688 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__GearReport+0x4>)
 8012686:	4770      	bx	lr
 8012688:	24000ad0 	.word	0x24000ad0

0801268c <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 801268c:	b538      	push	{r3, r4, r5, lr}
 801268e:	b158      	cbz	r0, 80126a8 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8012690:	460d      	mov	r5, r1
 8012692:	f000 fa79 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012696:	2101      	movs	r1, #1
 8012698:	182c      	adds	r4, r5, r0
 801269a:	f1c5 0501 	rsb	r5, r5, #1
 801269e:	4620      	mov	r0, r4
 80126a0:	f001 fd76 	bl	8014190 <ucdr_alignment>
 80126a4:	4428      	add	r0, r5
 80126a6:	4420      	add	r0, r4
 80126a8:	bd38      	pop	{r3, r4, r5, pc}
 80126aa:	bf00      	nop

080126ac <_HazardLightsCommand__cdr_deserialize>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	460c      	mov	r4, r1
 80126b0:	b179      	cbz	r1, 80126d2 <_HazardLightsCommand__cdr_deserialize+0x26>
 80126b2:	4605      	mov	r5, r0
 80126b4:	f000 facc 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126b8:	4603      	mov	r3, r0
 80126ba:	4621      	mov	r1, r4
 80126bc:	4628      	mov	r0, r5
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	4798      	blx	r3
 80126c4:	f104 0108 	add.w	r1, r4, #8
 80126c8:	4628      	mov	r0, r5
 80126ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126ce:	f000 bb07 	b.w	8012ce0 <ucdr_deserialize_uint8_t>
 80126d2:	4608      	mov	r0, r1
 80126d4:	bd38      	pop	{r3, r4, r5, pc}
 80126d6:	bf00      	nop

080126d8 <_HazardLightsCommand__cdr_serialize>:
 80126d8:	b180      	cbz	r0, 80126fc <_HazardLightsCommand__cdr_serialize+0x24>
 80126da:	b538      	push	{r3, r4, r5, lr}
 80126dc:	4604      	mov	r4, r0
 80126de:	460d      	mov	r5, r1
 80126e0:	f000 fab6 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126e4:	4603      	mov	r3, r0
 80126e6:	4629      	mov	r1, r5
 80126e8:	4620      	mov	r0, r4
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	4798      	blx	r3
 80126f0:	7a21      	ldrb	r1, [r4, #8]
 80126f2:	4628      	mov	r0, r5
 80126f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126f8:	f000 badc 	b.w	8012cb4 <ucdr_serialize_uint8_t>
 80126fc:	4770      	bx	lr
 80126fe:	bf00      	nop

08012700 <_HazardLightsCommand__get_serialized_size>:
 8012700:	b150      	cbz	r0, 8012718 <_HazardLightsCommand__get_serialized_size+0x18>
 8012702:	2100      	movs	r1, #0
 8012704:	b510      	push	{r4, lr}
 8012706:	f000 fa3f 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 801270a:	4604      	mov	r4, r0
 801270c:	2101      	movs	r1, #1
 801270e:	f001 fd3f 	bl	8014190 <ucdr_alignment>
 8012712:	4420      	add	r0, r4
 8012714:	3001      	adds	r0, #1
 8012716:	bd10      	pop	{r4, pc}
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop

0801271c <_HazardLightsCommand__max_serialized_size>:
 801271c:	b510      	push	{r4, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	2401      	movs	r4, #1
 8012722:	2100      	movs	r1, #0
 8012724:	f10d 0007 	add.w	r0, sp, #7
 8012728:	f88d 4007 	strb.w	r4, [sp, #7]
 801272c:	f000 fa7c 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012730:	4621      	mov	r1, r4
 8012732:	4604      	mov	r4, r0
 8012734:	f001 fd2c 	bl	8014190 <ucdr_alignment>
 8012738:	4420      	add	r0, r4
 801273a:	3001      	adds	r0, #1
 801273c:	b002      	add	sp, #8
 801273e:	bd10      	pop	{r4, pc}

08012740 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand>:
 8012740:	4800      	ldr	r0, [pc, #0]	@ (8012744 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 8012742:	4770      	bx	lr
 8012744:	24000af8 	.word	0x24000af8

08012748 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 8012748:	b538      	push	{r3, r4, r5, lr}
 801274a:	b158      	cbz	r0, 8012764 <get_serialized_size_autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x1c>
 801274c:	460d      	mov	r5, r1
 801274e:	f000 fa1b 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012752:	2101      	movs	r1, #1
 8012754:	182c      	adds	r4, r5, r0
 8012756:	f1c5 0501 	rsb	r5, r5, #1
 801275a:	4620      	mov	r0, r4
 801275c:	f001 fd18 	bl	8014190 <ucdr_alignment>
 8012760:	4428      	add	r0, r5
 8012762:	4420      	add	r0, r4
 8012764:	bd38      	pop	{r3, r4, r5, pc}
 8012766:	bf00      	nop

08012768 <_HazardLightsReport__cdr_deserialize>:
 8012768:	b538      	push	{r3, r4, r5, lr}
 801276a:	460c      	mov	r4, r1
 801276c:	b179      	cbz	r1, 801278e <_HazardLightsReport__cdr_deserialize+0x26>
 801276e:	4605      	mov	r5, r0
 8012770:	f000 fa6e 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012774:	4603      	mov	r3, r0
 8012776:	4621      	mov	r1, r4
 8012778:	4628      	mov	r0, r5
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	4798      	blx	r3
 8012780:	f104 0108 	add.w	r1, r4, #8
 8012784:	4628      	mov	r0, r5
 8012786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801278a:	f000 baa9 	b.w	8012ce0 <ucdr_deserialize_uint8_t>
 801278e:	4608      	mov	r0, r1
 8012790:	bd38      	pop	{r3, r4, r5, pc}
 8012792:	bf00      	nop

08012794 <_HazardLightsReport__cdr_serialize>:
 8012794:	b180      	cbz	r0, 80127b8 <_HazardLightsReport__cdr_serialize+0x24>
 8012796:	b538      	push	{r3, r4, r5, lr}
 8012798:	4604      	mov	r4, r0
 801279a:	460d      	mov	r5, r1
 801279c:	f000 fa58 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127a0:	4603      	mov	r3, r0
 80127a2:	4629      	mov	r1, r5
 80127a4:	4620      	mov	r0, r4
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	689b      	ldr	r3, [r3, #8]
 80127aa:	4798      	blx	r3
 80127ac:	7a21      	ldrb	r1, [r4, #8]
 80127ae:	4628      	mov	r0, r5
 80127b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127b4:	f000 ba7e 	b.w	8012cb4 <ucdr_serialize_uint8_t>
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop

080127bc <_HazardLightsReport__get_serialized_size>:
 80127bc:	b150      	cbz	r0, 80127d4 <_HazardLightsReport__get_serialized_size+0x18>
 80127be:	2100      	movs	r1, #0
 80127c0:	b510      	push	{r4, lr}
 80127c2:	f000 f9e1 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 80127c6:	4604      	mov	r4, r0
 80127c8:	2101      	movs	r1, #1
 80127ca:	f001 fce1 	bl	8014190 <ucdr_alignment>
 80127ce:	4420      	add	r0, r4
 80127d0:	3001      	adds	r0, #1
 80127d2:	bd10      	pop	{r4, pc}
 80127d4:	4770      	bx	lr
 80127d6:	bf00      	nop

080127d8 <_HazardLightsReport__max_serialized_size>:
 80127d8:	b510      	push	{r4, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	2401      	movs	r4, #1
 80127de:	2100      	movs	r1, #0
 80127e0:	f10d 0007 	add.w	r0, sp, #7
 80127e4:	f88d 4007 	strb.w	r4, [sp, #7]
 80127e8:	f000 fa1e 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 80127ec:	4621      	mov	r1, r4
 80127ee:	4604      	mov	r4, r0
 80127f0:	f001 fcce 	bl	8014190 <ucdr_alignment>
 80127f4:	4420      	add	r0, r4
 80127f6:	3001      	adds	r0, #1
 80127f8:	b002      	add	sp, #8
 80127fa:	bd10      	pop	{r4, pc}

080127fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport>:
 80127fc:	4800      	ldr	r0, [pc, #0]	@ (8012800 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__HazardLightsReport+0x4>)
 80127fe:	4770      	bx	lr
 8012800:	24000b20 	.word	0x24000b20

08012804 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	b158      	cbz	r0, 8012820 <get_serialized_size_autoware_auto_vehicle_msgs__msg__SteeringReport+0x1c>
 8012808:	460d      	mov	r5, r1
 801280a:	f000 f9bd 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 801280e:	2104      	movs	r1, #4
 8012810:	182c      	adds	r4, r5, r0
 8012812:	f1c5 0504 	rsb	r5, r5, #4
 8012816:	4620      	mov	r0, r4
 8012818:	f001 fcba 	bl	8014190 <ucdr_alignment>
 801281c:	4428      	add	r0, r5
 801281e:	4420      	add	r0, r4
 8012820:	bd38      	pop	{r3, r4, r5, pc}
 8012822:	bf00      	nop

08012824 <_SteeringReport__cdr_deserialize>:
 8012824:	b538      	push	{r3, r4, r5, lr}
 8012826:	460c      	mov	r4, r1
 8012828:	b179      	cbz	r1, 801284a <_SteeringReport__cdr_deserialize+0x26>
 801282a:	4605      	mov	r5, r0
 801282c:	f000 fa10 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012830:	4603      	mov	r3, r0
 8012832:	4621      	mov	r1, r4
 8012834:	4628      	mov	r0, r5
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	4798      	blx	r3
 801283c:	f104 0108 	add.w	r1, r4, #8
 8012840:	4628      	mov	r0, r5
 8012842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012846:	f001 ba25 	b.w	8013c94 <ucdr_deserialize_float>
 801284a:	4608      	mov	r0, r1
 801284c:	bd38      	pop	{r3, r4, r5, pc}
 801284e:	bf00      	nop

08012850 <_SteeringReport__cdr_serialize>:
 8012850:	b188      	cbz	r0, 8012876 <_SteeringReport__cdr_serialize+0x26>
 8012852:	b538      	push	{r3, r4, r5, lr}
 8012854:	4604      	mov	r4, r0
 8012856:	460d      	mov	r5, r1
 8012858:	f000 f9fa 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801285c:	4603      	mov	r3, r0
 801285e:	4629      	mov	r1, r5
 8012860:	4620      	mov	r0, r4
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	689b      	ldr	r3, [r3, #8]
 8012866:	4798      	blx	r3
 8012868:	ed94 0a02 	vldr	s0, [r4, #8]
 801286c:	4628      	mov	r0, r5
 801286e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012872:	f001 b977 	b.w	8013b64 <ucdr_serialize_float>
 8012876:	4770      	bx	lr

08012878 <_SteeringReport__get_serialized_size>:
 8012878:	b150      	cbz	r0, 8012890 <_SteeringReport__get_serialized_size+0x18>
 801287a:	2100      	movs	r1, #0
 801287c:	b510      	push	{r4, lr}
 801287e:	f000 f983 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012882:	4604      	mov	r4, r0
 8012884:	2104      	movs	r1, #4
 8012886:	f001 fc83 	bl	8014190 <ucdr_alignment>
 801288a:	4420      	add	r0, r4
 801288c:	3004      	adds	r0, #4
 801288e:	bd10      	pop	{r4, pc}
 8012890:	4770      	bx	lr
 8012892:	bf00      	nop

08012894 <_SteeringReport__max_serialized_size>:
 8012894:	b510      	push	{r4, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	2301      	movs	r3, #1
 801289a:	2100      	movs	r1, #0
 801289c:	f10d 0007 	add.w	r0, sp, #7
 80128a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80128a4:	f000 f9c0 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 80128a8:	4604      	mov	r4, r0
 80128aa:	2104      	movs	r1, #4
 80128ac:	f001 fc70 	bl	8014190 <ucdr_alignment>
 80128b0:	4420      	add	r0, r4
 80128b2:	3004      	adds	r0, #4
 80128b4:	b002      	add	sp, #8
 80128b6:	bd10      	pop	{r4, pc}

080128b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport>:
 80128b8:	4800      	ldr	r0, [pc, #0]	@ (80128bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__SteeringReport+0x4>)
 80128ba:	4770      	bx	lr
 80128bc:	24000b48 	.word	0x24000b48

080128c0 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80128c0:	b538      	push	{r3, r4, r5, lr}
 80128c2:	b158      	cbz	r0, 80128dc <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 80128c4:	460d      	mov	r5, r1
 80128c6:	f000 f95f 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 80128ca:	2101      	movs	r1, #1
 80128cc:	182c      	adds	r4, r5, r0
 80128ce:	f1c5 0501 	rsb	r5, r5, #1
 80128d2:	4620      	mov	r0, r4
 80128d4:	f001 fc5c 	bl	8014190 <ucdr_alignment>
 80128d8:	4428      	add	r0, r5
 80128da:	4420      	add	r0, r4
 80128dc:	bd38      	pop	{r3, r4, r5, pc}
 80128de:	bf00      	nop

080128e0 <_TurnIndicatorsCommand__cdr_deserialize>:
 80128e0:	b538      	push	{r3, r4, r5, lr}
 80128e2:	460c      	mov	r4, r1
 80128e4:	b179      	cbz	r1, 8012906 <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 80128e6:	4605      	mov	r5, r0
 80128e8:	f000 f9b2 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80128ec:	4603      	mov	r3, r0
 80128ee:	4621      	mov	r1, r4
 80128f0:	4628      	mov	r0, r5
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	4798      	blx	r3
 80128f8:	f104 0108 	add.w	r1, r4, #8
 80128fc:	4628      	mov	r0, r5
 80128fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012902:	f000 b9ed 	b.w	8012ce0 <ucdr_deserialize_uint8_t>
 8012906:	4608      	mov	r0, r1
 8012908:	bd38      	pop	{r3, r4, r5, pc}
 801290a:	bf00      	nop

0801290c <_TurnIndicatorsCommand__cdr_serialize>:
 801290c:	b180      	cbz	r0, 8012930 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 801290e:	b538      	push	{r3, r4, r5, lr}
 8012910:	4604      	mov	r4, r0
 8012912:	460d      	mov	r5, r1
 8012914:	f000 f99c 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012918:	4603      	mov	r3, r0
 801291a:	4629      	mov	r1, r5
 801291c:	4620      	mov	r0, r4
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	689b      	ldr	r3, [r3, #8]
 8012922:	4798      	blx	r3
 8012924:	7a21      	ldrb	r1, [r4, #8]
 8012926:	4628      	mov	r0, r5
 8012928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801292c:	f000 b9c2 	b.w	8012cb4 <ucdr_serialize_uint8_t>
 8012930:	4770      	bx	lr
 8012932:	bf00      	nop

08012934 <_TurnIndicatorsCommand__get_serialized_size>:
 8012934:	b150      	cbz	r0, 801294c <_TurnIndicatorsCommand__get_serialized_size+0x18>
 8012936:	2100      	movs	r1, #0
 8012938:	b510      	push	{r4, lr}
 801293a:	f000 f925 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 801293e:	4604      	mov	r4, r0
 8012940:	2101      	movs	r1, #1
 8012942:	f001 fc25 	bl	8014190 <ucdr_alignment>
 8012946:	4420      	add	r0, r4
 8012948:	3001      	adds	r0, #1
 801294a:	bd10      	pop	{r4, pc}
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop

08012950 <_TurnIndicatorsCommand__max_serialized_size>:
 8012950:	b510      	push	{r4, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	2401      	movs	r4, #1
 8012956:	2100      	movs	r1, #0
 8012958:	f10d 0007 	add.w	r0, sp, #7
 801295c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012960:	f000 f962 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012964:	4621      	mov	r1, r4
 8012966:	4604      	mov	r4, r0
 8012968:	f001 fc12 	bl	8014190 <ucdr_alignment>
 801296c:	4420      	add	r0, r4
 801296e:	3001      	adds	r0, #1
 8012970:	b002      	add	sp, #8
 8012972:	bd10      	pop	{r4, pc}

08012974 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8012974:	4800      	ldr	r0, [pc, #0]	@ (8012978 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 8012976:	4770      	bx	lr
 8012978:	24000b70 	.word	0x24000b70

0801297c <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 801297c:	b538      	push	{r3, r4, r5, lr}
 801297e:	b158      	cbz	r0, 8012998 <get_serialized_size_autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8012980:	460d      	mov	r5, r1
 8012982:	f000 f901 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8012986:	2101      	movs	r1, #1
 8012988:	182c      	adds	r4, r5, r0
 801298a:	f1c5 0501 	rsb	r5, r5, #1
 801298e:	4620      	mov	r0, r4
 8012990:	f001 fbfe 	bl	8014190 <ucdr_alignment>
 8012994:	4428      	add	r0, r5
 8012996:	4420      	add	r0, r4
 8012998:	bd38      	pop	{r3, r4, r5, pc}
 801299a:	bf00      	nop

0801299c <_TurnIndicatorsReport__cdr_deserialize>:
 801299c:	b538      	push	{r3, r4, r5, lr}
 801299e:	460c      	mov	r4, r1
 80129a0:	b179      	cbz	r1, 80129c2 <_TurnIndicatorsReport__cdr_deserialize+0x26>
 80129a2:	4605      	mov	r5, r0
 80129a4:	f000 f954 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129a8:	4603      	mov	r3, r0
 80129aa:	4621      	mov	r1, r4
 80129ac:	4628      	mov	r0, r5
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	4798      	blx	r3
 80129b4:	f104 0108 	add.w	r1, r4, #8
 80129b8:	4628      	mov	r0, r5
 80129ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129be:	f000 b98f 	b.w	8012ce0 <ucdr_deserialize_uint8_t>
 80129c2:	4608      	mov	r0, r1
 80129c4:	bd38      	pop	{r3, r4, r5, pc}
 80129c6:	bf00      	nop

080129c8 <_TurnIndicatorsReport__cdr_serialize>:
 80129c8:	b180      	cbz	r0, 80129ec <_TurnIndicatorsReport__cdr_serialize+0x24>
 80129ca:	b538      	push	{r3, r4, r5, lr}
 80129cc:	4604      	mov	r4, r0
 80129ce:	460d      	mov	r5, r1
 80129d0:	f000 f93e 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129d4:	4603      	mov	r3, r0
 80129d6:	4629      	mov	r1, r5
 80129d8:	4620      	mov	r0, r4
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	689b      	ldr	r3, [r3, #8]
 80129de:	4798      	blx	r3
 80129e0:	7a21      	ldrb	r1, [r4, #8]
 80129e2:	4628      	mov	r0, r5
 80129e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129e8:	f000 b964 	b.w	8012cb4 <ucdr_serialize_uint8_t>
 80129ec:	4770      	bx	lr
 80129ee:	bf00      	nop

080129f0 <_TurnIndicatorsReport__get_serialized_size>:
 80129f0:	b150      	cbz	r0, 8012a08 <_TurnIndicatorsReport__get_serialized_size+0x18>
 80129f2:	2100      	movs	r1, #0
 80129f4:	b510      	push	{r4, lr}
 80129f6:	f000 f8c7 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 80129fa:	4604      	mov	r4, r0
 80129fc:	2101      	movs	r1, #1
 80129fe:	f001 fbc7 	bl	8014190 <ucdr_alignment>
 8012a02:	4420      	add	r0, r4
 8012a04:	3001      	adds	r0, #1
 8012a06:	bd10      	pop	{r4, pc}
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop

08012a0c <_TurnIndicatorsReport__max_serialized_size>:
 8012a0c:	b510      	push	{r4, lr}
 8012a0e:	b082      	sub	sp, #8
 8012a10:	2401      	movs	r4, #1
 8012a12:	2100      	movs	r1, #0
 8012a14:	f10d 0007 	add.w	r0, sp, #7
 8012a18:	f88d 4007 	strb.w	r4, [sp, #7]
 8012a1c:	f000 f904 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a20:	4621      	mov	r1, r4
 8012a22:	4604      	mov	r4, r0
 8012a24:	f001 fbb4 	bl	8014190 <ucdr_alignment>
 8012a28:	4420      	add	r0, r4
 8012a2a:	3001      	adds	r0, #1
 8012a2c:	b002      	add	sp, #8
 8012a2e:	bd10      	pop	{r4, pc}

08012a30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport>:
 8012a30:	4800      	ldr	r0, [pc, #0]	@ (8012a34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 8012a32:	4770      	bx	lr
 8012a34:	24000b98 	.word	0x24000b98

08012a38 <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012a38:	b1c8      	cbz	r0, 8012a6e <get_serialized_size_autoware_auto_vehicle_msgs__msg__VelocityReport+0x36>
 8012a3a:	b570      	push	{r4, r5, r6, lr}
 8012a3c:	460d      	mov	r5, r1
 8012a3e:	f003 fd23 	bl	8016488 <get_serialized_size_std_msgs__msg__Header>
 8012a42:	2104      	movs	r1, #4
 8012a44:	182e      	adds	r6, r5, r0
 8012a46:	f1c5 0504 	rsb	r5, r5, #4
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f001 fba0 	bl	8014190 <ucdr_alignment>
 8012a50:	2104      	movs	r1, #4
 8012a52:	1844      	adds	r4, r0, r1
 8012a54:	4434      	add	r4, r6
 8012a56:	4620      	mov	r0, r4
 8012a58:	f001 fb9a 	bl	8014190 <ucdr_alignment>
 8012a5c:	2104      	movs	r1, #4
 8012a5e:	4408      	add	r0, r1
 8012a60:	4404      	add	r4, r0
 8012a62:	4620      	mov	r0, r4
 8012a64:	f001 fb94 	bl	8014190 <ucdr_alignment>
 8012a68:	4428      	add	r0, r5
 8012a6a:	4420      	add	r0, r4
 8012a6c:	bd70      	pop	{r4, r5, r6, pc}
 8012a6e:	4770      	bx	lr

08012a70 <_VelocityReport__cdr_deserialize>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	460c      	mov	r4, r1
 8012a74:	b1c9      	cbz	r1, 8012aaa <_VelocityReport__cdr_deserialize+0x3a>
 8012a76:	4605      	mov	r5, r0
 8012a78:	f003 fd8a 	bl	8016590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	4621      	mov	r1, r4
 8012a80:	4628      	mov	r0, r5
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	68db      	ldr	r3, [r3, #12]
 8012a86:	4798      	blx	r3
 8012a88:	f104 0114 	add.w	r1, r4, #20
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	f001 f901 	bl	8013c94 <ucdr_deserialize_float>
 8012a92:	f104 0118 	add.w	r1, r4, #24
 8012a96:	4628      	mov	r0, r5
 8012a98:	f001 f8fc 	bl	8013c94 <ucdr_deserialize_float>
 8012a9c:	f104 011c 	add.w	r1, r4, #28
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012aa6:	f001 b8f5 	b.w	8013c94 <ucdr_deserialize_float>
 8012aaa:	4608      	mov	r0, r1
 8012aac:	bd38      	pop	{r3, r4, r5, pc}
 8012aae:	bf00      	nop

08012ab0 <_VelocityReport__cdr_serialize>:
 8012ab0:	b1d8      	cbz	r0, 8012aea <_VelocityReport__cdr_serialize+0x3a>
 8012ab2:	b538      	push	{r3, r4, r5, lr}
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	460d      	mov	r5, r1
 8012ab8:	f003 fd6a 	bl	8016590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012abc:	4603      	mov	r3, r0
 8012abe:	4629      	mov	r1, r5
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	689b      	ldr	r3, [r3, #8]
 8012ac6:	4798      	blx	r3
 8012ac8:	ed94 0a05 	vldr	s0, [r4, #20]
 8012acc:	4628      	mov	r0, r5
 8012ace:	f001 f849 	bl	8013b64 <ucdr_serialize_float>
 8012ad2:	ed94 0a06 	vldr	s0, [r4, #24]
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f001 f844 	bl	8013b64 <ucdr_serialize_float>
 8012adc:	ed94 0a07 	vldr	s0, [r4, #28]
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ae6:	f001 b83d 	b.w	8013b64 <ucdr_serialize_float>
 8012aea:	4770      	bx	lr

08012aec <_VelocityReport__get_serialized_size>:
 8012aec:	b1b0      	cbz	r0, 8012b1c <_VelocityReport__get_serialized_size+0x30>
 8012aee:	2100      	movs	r1, #0
 8012af0:	b510      	push	{r4, lr}
 8012af2:	f003 fcc9 	bl	8016488 <get_serialized_size_std_msgs__msg__Header>
 8012af6:	4604      	mov	r4, r0
 8012af8:	2104      	movs	r1, #4
 8012afa:	f001 fb49 	bl	8014190 <ucdr_alignment>
 8012afe:	2104      	movs	r1, #4
 8012b00:	4420      	add	r0, r4
 8012b02:	1844      	adds	r4, r0, r1
 8012b04:	4620      	mov	r0, r4
 8012b06:	f001 fb43 	bl	8014190 <ucdr_alignment>
 8012b0a:	2104      	movs	r1, #4
 8012b0c:	4408      	add	r0, r1
 8012b0e:	4404      	add	r4, r0
 8012b10:	4620      	mov	r0, r4
 8012b12:	f001 fb3d 	bl	8014190 <ucdr_alignment>
 8012b16:	3004      	adds	r0, #4
 8012b18:	4420      	add	r0, r4
 8012b1a:	bd10      	pop	{r4, pc}
 8012b1c:	4770      	bx	lr
 8012b1e:	bf00      	nop

08012b20 <_VelocityReport__max_serialized_size>:
 8012b20:	b510      	push	{r4, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	2301      	movs	r3, #1
 8012b26:	2100      	movs	r1, #0
 8012b28:	f10d 0007 	add.w	r0, sp, #7
 8012b2c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012b30:	f003 fd24 	bl	801657c <max_serialized_size_std_msgs__msg__Header>
 8012b34:	4604      	mov	r4, r0
 8012b36:	2104      	movs	r1, #4
 8012b38:	f001 fb2a 	bl	8014190 <ucdr_alignment>
 8012b3c:	2104      	movs	r1, #4
 8012b3e:	4420      	add	r0, r4
 8012b40:	1844      	adds	r4, r0, r1
 8012b42:	4620      	mov	r0, r4
 8012b44:	f001 fb24 	bl	8014190 <ucdr_alignment>
 8012b48:	2104      	movs	r1, #4
 8012b4a:	4408      	add	r0, r1
 8012b4c:	4404      	add	r4, r0
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f001 fb1e 	bl	8014190 <ucdr_alignment>
 8012b54:	3004      	adds	r0, #4
 8012b56:	4420      	add	r0, r4
 8012b58:	b002      	add	sp, #8
 8012b5a:	bd10      	pop	{r4, pc}

08012b5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport>:
 8012b5c:	4800      	ldr	r0, [pc, #0]	@ (8012b60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_auto_vehicle_msgs__msg__VelocityReport+0x4>)
 8012b5e:	4770      	bx	lr
 8012b60:	24000bc0 	.word	0x24000bc0

08012b64 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012b64:	f004 b8ee 	b.w	8016d44 <builtin_interfaces__msg__Time__init>

08012b68 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012b68:	f004 b8f0 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>

08012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012b6c:	4b04      	ldr	r3, [pc, #16]	@ (8012b80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	b10a      	cbz	r2, 8012b76 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012b72:	4803      	ldr	r0, [pc, #12]	@ (8012b80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b74:	4770      	bx	lr
 8012b76:	4a03      	ldr	r2, [pc, #12]	@ (8012b84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012b78:	4801      	ldr	r0, [pc, #4]	@ (8012b80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012b7a:	6812      	ldr	r2, [r2, #0]
 8012b7c:	601a      	str	r2, [r3, #0]
 8012b7e:	4770      	bx	lr
 8012b80:	24000c60 	.word	0x24000c60
 8012b84:	24000d30 	.word	0x24000d30

08012b88 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012b88:	b180      	cbz	r0, 8012bac <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012b8a:	b538      	push	{r3, r4, r5, lr}
 8012b8c:	460d      	mov	r5, r1
 8012b8e:	2104      	movs	r1, #4
 8012b90:	4628      	mov	r0, r5
 8012b92:	f001 fafd 	bl	8014190 <ucdr_alignment>
 8012b96:	1d2b      	adds	r3, r5, #4
 8012b98:	f1c5 0504 	rsb	r5, r5, #4
 8012b9c:	2104      	movs	r1, #4
 8012b9e:	181c      	adds	r4, r3, r0
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f001 faf5 	bl	8014190 <ucdr_alignment>
 8012ba6:	4428      	add	r0, r5
 8012ba8:	4420      	add	r0, r4
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop

08012bb0 <_Time__cdr_deserialize>:
 8012bb0:	b538      	push	{r3, r4, r5, lr}
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	b141      	cbz	r1, 8012bc8 <_Time__cdr_deserialize+0x18>
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	f000 ff44 	bl	8013a44 <ucdr_deserialize_int32_t>
 8012bbc:	1d21      	adds	r1, r4, #4
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bc4:	f000 bbbc 	b.w	8013340 <ucdr_deserialize_uint32_t>
 8012bc8:	4608      	mov	r0, r1
 8012bca:	bd38      	pop	{r3, r4, r5, pc}

08012bcc <_Time__cdr_serialize>:
 8012bcc:	b160      	cbz	r0, 8012be8 <_Time__cdr_serialize+0x1c>
 8012bce:	b538      	push	{r3, r4, r5, lr}
 8012bd0:	460d      	mov	r5, r1
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	6801      	ldr	r1, [r0, #0]
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f000 fe9c 	bl	8013914 <ucdr_serialize_int32_t>
 8012bdc:	6861      	ldr	r1, [r4, #4]
 8012bde:	4628      	mov	r0, r5
 8012be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012be4:	f000 ba7c 	b.w	80130e0 <ucdr_serialize_uint32_t>
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop

08012bec <_Time__get_serialized_size>:
 8012bec:	b160      	cbz	r0, 8012c08 <_Time__get_serialized_size+0x1c>
 8012bee:	2104      	movs	r1, #4
 8012bf0:	2000      	movs	r0, #0
 8012bf2:	b510      	push	{r4, lr}
 8012bf4:	f001 facc 	bl	8014190 <ucdr_alignment>
 8012bf8:	2104      	movs	r1, #4
 8012bfa:	1844      	adds	r4, r0, r1
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	f001 fac7 	bl	8014190 <ucdr_alignment>
 8012c02:	3004      	adds	r0, #4
 8012c04:	4420      	add	r0, r4
 8012c06:	bd10      	pop	{r4, pc}
 8012c08:	4770      	bx	lr
 8012c0a:	bf00      	nop

08012c0c <_Time__max_serialized_size>:
 8012c0c:	b510      	push	{r4, lr}
 8012c0e:	2104      	movs	r1, #4
 8012c10:	2000      	movs	r0, #0
 8012c12:	f001 fabd 	bl	8014190 <ucdr_alignment>
 8012c16:	2104      	movs	r1, #4
 8012c18:	1844      	adds	r4, r0, r1
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	f001 fab8 	bl	8014190 <ucdr_alignment>
 8012c20:	3004      	adds	r0, #4
 8012c22:	4420      	add	r0, r4
 8012c24:	bd10      	pop	{r4, pc}
 8012c26:	bf00      	nop

08012c28 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012c28:	b538      	push	{r3, r4, r5, lr}
 8012c2a:	460c      	mov	r4, r1
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	2104      	movs	r1, #4
 8012c30:	1d25      	adds	r5, r4, #4
 8012c32:	7003      	strb	r3, [r0, #0]
 8012c34:	4620      	mov	r0, r4
 8012c36:	f1c4 0404 	rsb	r4, r4, #4
 8012c3a:	f001 faa9 	bl	8014190 <ucdr_alignment>
 8012c3e:	4405      	add	r5, r0
 8012c40:	2104      	movs	r1, #4
 8012c42:	4628      	mov	r0, r5
 8012c44:	f001 faa4 	bl	8014190 <ucdr_alignment>
 8012c48:	4420      	add	r0, r4
 8012c4a:	4428      	add	r0, r5
 8012c4c:	bd38      	pop	{r3, r4, r5, pc}
 8012c4e:	bf00      	nop

08012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012c50:	4800      	ldr	r0, [pc, #0]	@ (8012c54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012c52:	4770      	bx	lr
 8012c54:	24000c6c 	.word	0x24000c6c

08012c58 <ucdr_serialize_bool>:
 8012c58:	b538      	push	{r3, r4, r5, lr}
 8012c5a:	460d      	mov	r5, r1
 8012c5c:	2101      	movs	r1, #1
 8012c5e:	4604      	mov	r4, r0
 8012c60:	f001 fa4a 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012c64:	b148      	cbz	r0, 8012c7a <ucdr_serialize_bool+0x22>
 8012c66:	68a3      	ldr	r3, [r4, #8]
 8012c68:	2101      	movs	r1, #1
 8012c6a:	701d      	strb	r5, [r3, #0]
 8012c6c:	68a2      	ldr	r2, [r4, #8]
 8012c6e:	6923      	ldr	r3, [r4, #16]
 8012c70:	440a      	add	r2, r1
 8012c72:	7561      	strb	r1, [r4, #21]
 8012c74:	440b      	add	r3, r1
 8012c76:	60a2      	str	r2, [r4, #8]
 8012c78:	6123      	str	r3, [r4, #16]
 8012c7a:	7da0      	ldrb	r0, [r4, #22]
 8012c7c:	f080 0001 	eor.w	r0, r0, #1
 8012c80:	bd38      	pop	{r3, r4, r5, pc}
 8012c82:	bf00      	nop

08012c84 <ucdr_deserialize_bool>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	460d      	mov	r5, r1
 8012c88:	2101      	movs	r1, #1
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	f001 fa34 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012c90:	b160      	cbz	r0, 8012cac <ucdr_deserialize_bool+0x28>
 8012c92:	68a2      	ldr	r2, [r4, #8]
 8012c94:	2101      	movs	r1, #1
 8012c96:	6923      	ldr	r3, [r4, #16]
 8012c98:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012c9c:	440b      	add	r3, r1
 8012c9e:	3800      	subs	r0, #0
 8012ca0:	bf18      	it	ne
 8012ca2:	2001      	movne	r0, #1
 8012ca4:	7028      	strb	r0, [r5, #0]
 8012ca6:	60a2      	str	r2, [r4, #8]
 8012ca8:	6123      	str	r3, [r4, #16]
 8012caa:	7561      	strb	r1, [r4, #21]
 8012cac:	7da0      	ldrb	r0, [r4, #22]
 8012cae:	f080 0001 	eor.w	r0, r0, #1
 8012cb2:	bd38      	pop	{r3, r4, r5, pc}

08012cb4 <ucdr_serialize_uint8_t>:
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	460d      	mov	r5, r1
 8012cb8:	2101      	movs	r1, #1
 8012cba:	4604      	mov	r4, r0
 8012cbc:	f001 fa1c 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012cc0:	b148      	cbz	r0, 8012cd6 <ucdr_serialize_uint8_t+0x22>
 8012cc2:	68a3      	ldr	r3, [r4, #8]
 8012cc4:	2101      	movs	r1, #1
 8012cc6:	701d      	strb	r5, [r3, #0]
 8012cc8:	68a2      	ldr	r2, [r4, #8]
 8012cca:	6923      	ldr	r3, [r4, #16]
 8012ccc:	440a      	add	r2, r1
 8012cce:	7561      	strb	r1, [r4, #21]
 8012cd0:	440b      	add	r3, r1
 8012cd2:	60a2      	str	r2, [r4, #8]
 8012cd4:	6123      	str	r3, [r4, #16]
 8012cd6:	7da0      	ldrb	r0, [r4, #22]
 8012cd8:	f080 0001 	eor.w	r0, r0, #1
 8012cdc:	bd38      	pop	{r3, r4, r5, pc}
 8012cde:	bf00      	nop

08012ce0 <ucdr_deserialize_uint8_t>:
 8012ce0:	b538      	push	{r3, r4, r5, lr}
 8012ce2:	460d      	mov	r5, r1
 8012ce4:	2101      	movs	r1, #1
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	f001 fa06 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012cec:	b150      	cbz	r0, 8012d04 <ucdr_deserialize_uint8_t+0x24>
 8012cee:	68a3      	ldr	r3, [r4, #8]
 8012cf0:	2101      	movs	r1, #1
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	702b      	strb	r3, [r5, #0]
 8012cf6:	68a2      	ldr	r2, [r4, #8]
 8012cf8:	6923      	ldr	r3, [r4, #16]
 8012cfa:	440a      	add	r2, r1
 8012cfc:	7561      	strb	r1, [r4, #21]
 8012cfe:	440b      	add	r3, r1
 8012d00:	60a2      	str	r2, [r4, #8]
 8012d02:	6123      	str	r3, [r4, #16]
 8012d04:	7da0      	ldrb	r0, [r4, #22]
 8012d06:	f080 0001 	eor.w	r0, r0, #1
 8012d0a:	bd38      	pop	{r3, r4, r5, pc}

08012d0c <ucdr_serialize_uint16_t>:
 8012d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d10:	460b      	mov	r3, r1
 8012d12:	b082      	sub	sp, #8
 8012d14:	4604      	mov	r4, r0
 8012d16:	2102      	movs	r1, #2
 8012d18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012d1c:	f001 fa40 	bl	80141a0 <ucdr_buffer_alignment>
 8012d20:	4601      	mov	r1, r0
 8012d22:	4620      	mov	r0, r4
 8012d24:	7d67      	ldrb	r7, [r4, #21]
 8012d26:	f001 fa83 	bl	8014230 <ucdr_advance_buffer>
 8012d2a:	2102      	movs	r1, #2
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f001 f9d7 	bl	80140e0 <ucdr_check_buffer_available_for>
 8012d32:	bb78      	cbnz	r0, 8012d94 <ucdr_serialize_uint16_t+0x88>
 8012d34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012d38:	42ab      	cmp	r3, r5
 8012d3a:	d926      	bls.n	8012d8a <ucdr_serialize_uint16_t+0x7e>
 8012d3c:	1b5e      	subs	r6, r3, r5
 8012d3e:	60a3      	str	r3, [r4, #8]
 8012d40:	6923      	ldr	r3, [r4, #16]
 8012d42:	4620      	mov	r0, r4
 8012d44:	f1c6 0802 	rsb	r8, r6, #2
 8012d48:	4433      	add	r3, r6
 8012d4a:	4641      	mov	r1, r8
 8012d4c:	6123      	str	r3, [r4, #16]
 8012d4e:	f001 f9d3 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d03b      	beq.n	8012dce <ucdr_serialize_uint16_t+0xc2>
 8012d56:	7d23      	ldrb	r3, [r4, #20]
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d04a      	beq.n	8012df2 <ucdr_serialize_uint16_t+0xe6>
 8012d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d60:	702b      	strb	r3, [r5, #0]
 8012d62:	2e00      	cmp	r6, #0
 8012d64:	d040      	beq.n	8012de8 <ucdr_serialize_uint16_t+0xdc>
 8012d66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d6a:	706b      	strb	r3, [r5, #1]
 8012d6c:	6923      	ldr	r3, [r4, #16]
 8012d6e:	2102      	movs	r1, #2
 8012d70:	68a2      	ldr	r2, [r4, #8]
 8012d72:	3302      	adds	r3, #2
 8012d74:	7da0      	ldrb	r0, [r4, #22]
 8012d76:	4442      	add	r2, r8
 8012d78:	7561      	strb	r1, [r4, #21]
 8012d7a:	1b9e      	subs	r6, r3, r6
 8012d7c:	f080 0001 	eor.w	r0, r0, #1
 8012d80:	60a2      	str	r2, [r4, #8]
 8012d82:	6126      	str	r6, [r4, #16]
 8012d84:	b002      	add	sp, #8
 8012d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d8a:	2102      	movs	r1, #2
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f001 f9b3 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012d92:	b190      	cbz	r0, 8012dba <ucdr_serialize_uint16_t+0xae>
 8012d94:	7d23      	ldrb	r3, [r4, #20]
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	68a3      	ldr	r3, [r4, #8]
 8012d9a:	d014      	beq.n	8012dc6 <ucdr_serialize_uint16_t+0xba>
 8012d9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012da0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012da4:	7019      	strb	r1, [r3, #0]
 8012da6:	68a3      	ldr	r3, [r4, #8]
 8012da8:	705a      	strb	r2, [r3, #1]
 8012daa:	2102      	movs	r1, #2
 8012dac:	68a2      	ldr	r2, [r4, #8]
 8012dae:	6923      	ldr	r3, [r4, #16]
 8012db0:	440a      	add	r2, r1
 8012db2:	7561      	strb	r1, [r4, #21]
 8012db4:	440b      	add	r3, r1
 8012db6:	60a2      	str	r2, [r4, #8]
 8012db8:	6123      	str	r3, [r4, #16]
 8012dba:	7da0      	ldrb	r0, [r4, #22]
 8012dbc:	f080 0001 	eor.w	r0, r0, #1
 8012dc0:	b002      	add	sp, #8
 8012dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012dca:	801a      	strh	r2, [r3, #0]
 8012dcc:	e7ed      	b.n	8012daa <ucdr_serialize_uint16_t+0x9e>
 8012dce:	68a2      	ldr	r2, [r4, #8]
 8012dd0:	6923      	ldr	r3, [r4, #16]
 8012dd2:	7da0      	ldrb	r0, [r4, #22]
 8012dd4:	1b92      	subs	r2, r2, r6
 8012dd6:	1b9b      	subs	r3, r3, r6
 8012dd8:	7567      	strb	r7, [r4, #21]
 8012dda:	f080 0001 	eor.w	r0, r0, #1
 8012dde:	60a2      	str	r2, [r4, #8]
 8012de0:	6123      	str	r3, [r4, #16]
 8012de2:	b002      	add	sp, #8
 8012de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de8:	68a3      	ldr	r3, [r4, #8]
 8012dea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dee:	701a      	strb	r2, [r3, #0]
 8012df0:	e7bc      	b.n	8012d6c <ucdr_serialize_uint16_t+0x60>
 8012df2:	4628      	mov	r0, r5
 8012df4:	f10d 0506 	add.w	r5, sp, #6
 8012df8:	4632      	mov	r2, r6
 8012dfa:	4629      	mov	r1, r5
 8012dfc:	f00f fb87 	bl	802250e <memcpy>
 8012e00:	4642      	mov	r2, r8
 8012e02:	19a9      	adds	r1, r5, r6
 8012e04:	68a0      	ldr	r0, [r4, #8]
 8012e06:	f00f fb82 	bl	802250e <memcpy>
 8012e0a:	e7af      	b.n	8012d6c <ucdr_serialize_uint16_t+0x60>

08012e0c <ucdr_serialize_endian_uint16_t>:
 8012e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e10:	4604      	mov	r4, r0
 8012e12:	b083      	sub	sp, #12
 8012e14:	460d      	mov	r5, r1
 8012e16:	2102      	movs	r1, #2
 8012e18:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012e1c:	f001 f9c0 	bl	80141a0 <ucdr_buffer_alignment>
 8012e20:	4601      	mov	r1, r0
 8012e22:	4620      	mov	r0, r4
 8012e24:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e28:	f001 fa02 	bl	8014230 <ucdr_advance_buffer>
 8012e2c:	2102      	movs	r1, #2
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f001 f956 	bl	80140e0 <ucdr_check_buffer_available_for>
 8012e34:	bb70      	cbnz	r0, 8012e94 <ucdr_serialize_endian_uint16_t+0x88>
 8012e36:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012e3a:	42be      	cmp	r6, r7
 8012e3c:	d925      	bls.n	8012e8a <ucdr_serialize_endian_uint16_t+0x7e>
 8012e3e:	6923      	ldr	r3, [r4, #16]
 8012e40:	4620      	mov	r0, r4
 8012e42:	60a6      	str	r6, [r4, #8]
 8012e44:	1bf6      	subs	r6, r6, r7
 8012e46:	4433      	add	r3, r6
 8012e48:	f1c6 0902 	rsb	r9, r6, #2
 8012e4c:	6123      	str	r3, [r4, #16]
 8012e4e:	4649      	mov	r1, r9
 8012e50:	f001 f952 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012e54:	2800      	cmp	r0, #0
 8012e56:	d039      	beq.n	8012ecc <ucdr_serialize_endian_uint16_t+0xc0>
 8012e58:	2d01      	cmp	r5, #1
 8012e5a:	d04a      	beq.n	8012ef2 <ucdr_serialize_endian_uint16_t+0xe6>
 8012e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e60:	703b      	strb	r3, [r7, #0]
 8012e62:	2e00      	cmp	r6, #0
 8012e64:	d040      	beq.n	8012ee8 <ucdr_serialize_endian_uint16_t+0xdc>
 8012e66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012e6a:	707b      	strb	r3, [r7, #1]
 8012e6c:	6923      	ldr	r3, [r4, #16]
 8012e6e:	2102      	movs	r1, #2
 8012e70:	68a2      	ldr	r2, [r4, #8]
 8012e72:	7da0      	ldrb	r0, [r4, #22]
 8012e74:	3302      	adds	r3, #2
 8012e76:	444a      	add	r2, r9
 8012e78:	7561      	strb	r1, [r4, #21]
 8012e7a:	1b9b      	subs	r3, r3, r6
 8012e7c:	f080 0001 	eor.w	r0, r0, #1
 8012e80:	60a2      	str	r2, [r4, #8]
 8012e82:	6123      	str	r3, [r4, #16]
 8012e84:	b003      	add	sp, #12
 8012e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e8a:	2102      	movs	r1, #2
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f001 f933 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012e92:	b188      	cbz	r0, 8012eb8 <ucdr_serialize_endian_uint16_t+0xac>
 8012e94:	2d01      	cmp	r5, #1
 8012e96:	68a3      	ldr	r3, [r4, #8]
 8012e98:	d014      	beq.n	8012ec4 <ucdr_serialize_endian_uint16_t+0xb8>
 8012e9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012e9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ea2:	7019      	strb	r1, [r3, #0]
 8012ea4:	68a3      	ldr	r3, [r4, #8]
 8012ea6:	705a      	strb	r2, [r3, #1]
 8012ea8:	2102      	movs	r1, #2
 8012eaa:	68a2      	ldr	r2, [r4, #8]
 8012eac:	6923      	ldr	r3, [r4, #16]
 8012eae:	440a      	add	r2, r1
 8012eb0:	7561      	strb	r1, [r4, #21]
 8012eb2:	440b      	add	r3, r1
 8012eb4:	60a2      	str	r2, [r4, #8]
 8012eb6:	6123      	str	r3, [r4, #16]
 8012eb8:	7da0      	ldrb	r0, [r4, #22]
 8012eba:	f080 0001 	eor.w	r0, r0, #1
 8012ebe:	b003      	add	sp, #12
 8012ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ec4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012ec8:	801a      	strh	r2, [r3, #0]
 8012eca:	e7ed      	b.n	8012ea8 <ucdr_serialize_endian_uint16_t+0x9c>
 8012ecc:	68a2      	ldr	r2, [r4, #8]
 8012ece:	6923      	ldr	r3, [r4, #16]
 8012ed0:	7da0      	ldrb	r0, [r4, #22]
 8012ed2:	1b92      	subs	r2, r2, r6
 8012ed4:	1b9b      	subs	r3, r3, r6
 8012ed6:	f884 8015 	strb.w	r8, [r4, #21]
 8012eda:	f080 0001 	eor.w	r0, r0, #1
 8012ede:	60a2      	str	r2, [r4, #8]
 8012ee0:	6123      	str	r3, [r4, #16]
 8012ee2:	b003      	add	sp, #12
 8012ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ee8:	68a3      	ldr	r3, [r4, #8]
 8012eea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012eee:	701a      	strb	r2, [r3, #0]
 8012ef0:	e7bc      	b.n	8012e6c <ucdr_serialize_endian_uint16_t+0x60>
 8012ef2:	f10d 0506 	add.w	r5, sp, #6
 8012ef6:	4632      	mov	r2, r6
 8012ef8:	4638      	mov	r0, r7
 8012efa:	4629      	mov	r1, r5
 8012efc:	f00f fb07 	bl	802250e <memcpy>
 8012f00:	464a      	mov	r2, r9
 8012f02:	19a9      	adds	r1, r5, r6
 8012f04:	68a0      	ldr	r0, [r4, #8]
 8012f06:	f00f fb02 	bl	802250e <memcpy>
 8012f0a:	e7af      	b.n	8012e6c <ucdr_serialize_endian_uint16_t+0x60>

08012f0c <ucdr_deserialize_uint16_t>:
 8012f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f10:	4604      	mov	r4, r0
 8012f12:	460d      	mov	r5, r1
 8012f14:	2102      	movs	r1, #2
 8012f16:	f001 f943 	bl	80141a0 <ucdr_buffer_alignment>
 8012f1a:	4601      	mov	r1, r0
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012f22:	f001 f985 	bl	8014230 <ucdr_advance_buffer>
 8012f26:	2102      	movs	r1, #2
 8012f28:	4620      	mov	r0, r4
 8012f2a:	f001 f8d9 	bl	80140e0 <ucdr_check_buffer_available_for>
 8012f2e:	bb60      	cbnz	r0, 8012f8a <ucdr_deserialize_uint16_t+0x7e>
 8012f30:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012f34:	42be      	cmp	r6, r7
 8012f36:	d923      	bls.n	8012f80 <ucdr_deserialize_uint16_t+0x74>
 8012f38:	6923      	ldr	r3, [r4, #16]
 8012f3a:	4620      	mov	r0, r4
 8012f3c:	60a6      	str	r6, [r4, #8]
 8012f3e:	1bf6      	subs	r6, r6, r7
 8012f40:	4433      	add	r3, r6
 8012f42:	f1c6 0902 	rsb	r9, r6, #2
 8012f46:	6123      	str	r3, [r4, #16]
 8012f48:	4649      	mov	r1, r9
 8012f4a:	f001 f8d5 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d034      	beq.n	8012fbc <ucdr_deserialize_uint16_t+0xb0>
 8012f52:	7d23      	ldrb	r3, [r4, #20]
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d042      	beq.n	8012fde <ucdr_deserialize_uint16_t+0xd2>
 8012f58:	787b      	ldrb	r3, [r7, #1]
 8012f5a:	702b      	strb	r3, [r5, #0]
 8012f5c:	2e00      	cmp	r6, #0
 8012f5e:	d03a      	beq.n	8012fd6 <ucdr_deserialize_uint16_t+0xca>
 8012f60:	783b      	ldrb	r3, [r7, #0]
 8012f62:	706b      	strb	r3, [r5, #1]
 8012f64:	6923      	ldr	r3, [r4, #16]
 8012f66:	2102      	movs	r1, #2
 8012f68:	68a2      	ldr	r2, [r4, #8]
 8012f6a:	3302      	adds	r3, #2
 8012f6c:	7da0      	ldrb	r0, [r4, #22]
 8012f6e:	444a      	add	r2, r9
 8012f70:	7561      	strb	r1, [r4, #21]
 8012f72:	1b9b      	subs	r3, r3, r6
 8012f74:	f080 0001 	eor.w	r0, r0, #1
 8012f78:	60a2      	str	r2, [r4, #8]
 8012f7a:	6123      	str	r3, [r4, #16]
 8012f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f80:	2102      	movs	r1, #2
 8012f82:	4620      	mov	r0, r4
 8012f84:	f001 f8b8 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8012f88:	b180      	cbz	r0, 8012fac <ucdr_deserialize_uint16_t+0xa0>
 8012f8a:	7d23      	ldrb	r3, [r4, #20]
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	68a3      	ldr	r3, [r4, #8]
 8012f90:	d011      	beq.n	8012fb6 <ucdr_deserialize_uint16_t+0xaa>
 8012f92:	785b      	ldrb	r3, [r3, #1]
 8012f94:	702b      	strb	r3, [r5, #0]
 8012f96:	68a3      	ldr	r3, [r4, #8]
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	706b      	strb	r3, [r5, #1]
 8012f9c:	2102      	movs	r1, #2
 8012f9e:	68a2      	ldr	r2, [r4, #8]
 8012fa0:	6923      	ldr	r3, [r4, #16]
 8012fa2:	440a      	add	r2, r1
 8012fa4:	7561      	strb	r1, [r4, #21]
 8012fa6:	440b      	add	r3, r1
 8012fa8:	60a2      	str	r2, [r4, #8]
 8012faa:	6123      	str	r3, [r4, #16]
 8012fac:	7da0      	ldrb	r0, [r4, #22]
 8012fae:	f080 0001 	eor.w	r0, r0, #1
 8012fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fb6:	881b      	ldrh	r3, [r3, #0]
 8012fb8:	802b      	strh	r3, [r5, #0]
 8012fba:	e7ef      	b.n	8012f9c <ucdr_deserialize_uint16_t+0x90>
 8012fbc:	68a2      	ldr	r2, [r4, #8]
 8012fbe:	6923      	ldr	r3, [r4, #16]
 8012fc0:	1b92      	subs	r2, r2, r6
 8012fc2:	7da0      	ldrb	r0, [r4, #22]
 8012fc4:	1b9b      	subs	r3, r3, r6
 8012fc6:	f884 8015 	strb.w	r8, [r4, #21]
 8012fca:	f080 0001 	eor.w	r0, r0, #1
 8012fce:	60a2      	str	r2, [r4, #8]
 8012fd0:	6123      	str	r3, [r4, #16]
 8012fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fd6:	68a3      	ldr	r3, [r4, #8]
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	706b      	strb	r3, [r5, #1]
 8012fdc:	e7c2      	b.n	8012f64 <ucdr_deserialize_uint16_t+0x58>
 8012fde:	4639      	mov	r1, r7
 8012fe0:	4632      	mov	r2, r6
 8012fe2:	4628      	mov	r0, r5
 8012fe4:	f00f fa93 	bl	802250e <memcpy>
 8012fe8:	464a      	mov	r2, r9
 8012fea:	19a8      	adds	r0, r5, r6
 8012fec:	68a1      	ldr	r1, [r4, #8]
 8012fee:	f00f fa8e 	bl	802250e <memcpy>
 8012ff2:	e7b7      	b.n	8012f64 <ucdr_deserialize_uint16_t+0x58>

08012ff4 <ucdr_deserialize_endian_uint16_t>:
 8012ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ff8:	4604      	mov	r4, r0
 8012ffa:	460e      	mov	r6, r1
 8012ffc:	2102      	movs	r1, #2
 8012ffe:	4615      	mov	r5, r2
 8013000:	f001 f8ce 	bl	80141a0 <ucdr_buffer_alignment>
 8013004:	4601      	mov	r1, r0
 8013006:	4620      	mov	r0, r4
 8013008:	f894 8015 	ldrb.w	r8, [r4, #21]
 801300c:	f001 f910 	bl	8014230 <ucdr_advance_buffer>
 8013010:	2102      	movs	r1, #2
 8013012:	4620      	mov	r0, r4
 8013014:	f001 f864 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013018:	bb70      	cbnz	r0, 8013078 <ucdr_deserialize_endian_uint16_t+0x84>
 801301a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801301e:	454f      	cmp	r7, r9
 8013020:	d925      	bls.n	801306e <ucdr_deserialize_endian_uint16_t+0x7a>
 8013022:	6923      	ldr	r3, [r4, #16]
 8013024:	4620      	mov	r0, r4
 8013026:	60a7      	str	r7, [r4, #8]
 8013028:	eba7 0709 	sub.w	r7, r7, r9
 801302c:	443b      	add	r3, r7
 801302e:	f1c7 0a02 	rsb	sl, r7, #2
 8013032:	6123      	str	r3, [r4, #16]
 8013034:	4651      	mov	r1, sl
 8013036:	f001 f85f 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 801303a:	2800      	cmp	r0, #0
 801303c:	d034      	beq.n	80130a8 <ucdr_deserialize_endian_uint16_t+0xb4>
 801303e:	2e01      	cmp	r6, #1
 8013040:	d043      	beq.n	80130ca <ucdr_deserialize_endian_uint16_t+0xd6>
 8013042:	f899 3001 	ldrb.w	r3, [r9, #1]
 8013046:	702b      	strb	r3, [r5, #0]
 8013048:	2f00      	cmp	r7, #0
 801304a:	d03a      	beq.n	80130c2 <ucdr_deserialize_endian_uint16_t+0xce>
 801304c:	f899 3000 	ldrb.w	r3, [r9]
 8013050:	706b      	strb	r3, [r5, #1]
 8013052:	6923      	ldr	r3, [r4, #16]
 8013054:	2102      	movs	r1, #2
 8013056:	68a2      	ldr	r2, [r4, #8]
 8013058:	3302      	adds	r3, #2
 801305a:	7da0      	ldrb	r0, [r4, #22]
 801305c:	4452      	add	r2, sl
 801305e:	7561      	strb	r1, [r4, #21]
 8013060:	1bdb      	subs	r3, r3, r7
 8013062:	f080 0001 	eor.w	r0, r0, #1
 8013066:	60a2      	str	r2, [r4, #8]
 8013068:	6123      	str	r3, [r4, #16]
 801306a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801306e:	2102      	movs	r1, #2
 8013070:	4620      	mov	r0, r4
 8013072:	f001 f841 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013076:	b178      	cbz	r0, 8013098 <ucdr_deserialize_endian_uint16_t+0xa4>
 8013078:	2e01      	cmp	r6, #1
 801307a:	68a3      	ldr	r3, [r4, #8]
 801307c:	d011      	beq.n	80130a2 <ucdr_deserialize_endian_uint16_t+0xae>
 801307e:	785b      	ldrb	r3, [r3, #1]
 8013080:	702b      	strb	r3, [r5, #0]
 8013082:	68a3      	ldr	r3, [r4, #8]
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	706b      	strb	r3, [r5, #1]
 8013088:	2102      	movs	r1, #2
 801308a:	68a2      	ldr	r2, [r4, #8]
 801308c:	6923      	ldr	r3, [r4, #16]
 801308e:	440a      	add	r2, r1
 8013090:	7561      	strb	r1, [r4, #21]
 8013092:	440b      	add	r3, r1
 8013094:	60a2      	str	r2, [r4, #8]
 8013096:	6123      	str	r3, [r4, #16]
 8013098:	7da0      	ldrb	r0, [r4, #22]
 801309a:	f080 0001 	eor.w	r0, r0, #1
 801309e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	802b      	strh	r3, [r5, #0]
 80130a6:	e7ef      	b.n	8013088 <ucdr_deserialize_endian_uint16_t+0x94>
 80130a8:	68a2      	ldr	r2, [r4, #8]
 80130aa:	6923      	ldr	r3, [r4, #16]
 80130ac:	1bd2      	subs	r2, r2, r7
 80130ae:	7da0      	ldrb	r0, [r4, #22]
 80130b0:	1bdb      	subs	r3, r3, r7
 80130b2:	f884 8015 	strb.w	r8, [r4, #21]
 80130b6:	f080 0001 	eor.w	r0, r0, #1
 80130ba:	60a2      	str	r2, [r4, #8]
 80130bc:	6123      	str	r3, [r4, #16]
 80130be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	706b      	strb	r3, [r5, #1]
 80130c8:	e7c3      	b.n	8013052 <ucdr_deserialize_endian_uint16_t+0x5e>
 80130ca:	4649      	mov	r1, r9
 80130cc:	463a      	mov	r2, r7
 80130ce:	4628      	mov	r0, r5
 80130d0:	f00f fa1d 	bl	802250e <memcpy>
 80130d4:	4652      	mov	r2, sl
 80130d6:	19e8      	adds	r0, r5, r7
 80130d8:	68a1      	ldr	r1, [r4, #8]
 80130da:	f00f fa18 	bl	802250e <memcpy>
 80130de:	e7b8      	b.n	8013052 <ucdr_deserialize_endian_uint16_t+0x5e>

080130e0 <ucdr_serialize_uint32_t>:
 80130e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e4:	b082      	sub	sp, #8
 80130e6:	4604      	mov	r4, r0
 80130e8:	9101      	str	r1, [sp, #4]
 80130ea:	2104      	movs	r1, #4
 80130ec:	f001 f858 	bl	80141a0 <ucdr_buffer_alignment>
 80130f0:	4601      	mov	r1, r0
 80130f2:	4620      	mov	r0, r4
 80130f4:	7d67      	ldrb	r7, [r4, #21]
 80130f6:	f001 f89b 	bl	8014230 <ucdr_advance_buffer>
 80130fa:	2104      	movs	r1, #4
 80130fc:	4620      	mov	r0, r4
 80130fe:	f000 ffef 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013102:	2800      	cmp	r0, #0
 8013104:	d139      	bne.n	801317a <ucdr_serialize_uint32_t+0x9a>
 8013106:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801310a:	42ab      	cmp	r3, r5
 801310c:	d930      	bls.n	8013170 <ucdr_serialize_uint32_t+0x90>
 801310e:	1b5e      	subs	r6, r3, r5
 8013110:	60a3      	str	r3, [r4, #8]
 8013112:	6923      	ldr	r3, [r4, #16]
 8013114:	4620      	mov	r0, r4
 8013116:	f1c6 0804 	rsb	r8, r6, #4
 801311a:	4433      	add	r3, r6
 801311c:	4641      	mov	r1, r8
 801311e:	6123      	str	r3, [r4, #16]
 8013120:	f000 ffea 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013124:	2800      	cmp	r0, #0
 8013126:	d04c      	beq.n	80131c2 <ucdr_serialize_uint32_t+0xe2>
 8013128:	7d23      	ldrb	r3, [r4, #20]
 801312a:	2b01      	cmp	r3, #1
 801312c:	d063      	beq.n	80131f6 <ucdr_serialize_uint32_t+0x116>
 801312e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013132:	702b      	strb	r3, [r5, #0]
 8013134:	2e00      	cmp	r6, #0
 8013136:	d051      	beq.n	80131dc <ucdr_serialize_uint32_t+0xfc>
 8013138:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801313c:	2e01      	cmp	r6, #1
 801313e:	706b      	strb	r3, [r5, #1]
 8013140:	d050      	beq.n	80131e4 <ucdr_serialize_uint32_t+0x104>
 8013142:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013146:	2e02      	cmp	r6, #2
 8013148:	70ab      	strb	r3, [r5, #2]
 801314a:	d04f      	beq.n	80131ec <ucdr_serialize_uint32_t+0x10c>
 801314c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013150:	70eb      	strb	r3, [r5, #3]
 8013152:	6923      	ldr	r3, [r4, #16]
 8013154:	2104      	movs	r1, #4
 8013156:	68a2      	ldr	r2, [r4, #8]
 8013158:	3304      	adds	r3, #4
 801315a:	7da0      	ldrb	r0, [r4, #22]
 801315c:	4442      	add	r2, r8
 801315e:	7561      	strb	r1, [r4, #21]
 8013160:	1b9e      	subs	r6, r3, r6
 8013162:	f080 0001 	eor.w	r0, r0, #1
 8013166:	60a2      	str	r2, [r4, #8]
 8013168:	6126      	str	r6, [r4, #16]
 801316a:	b002      	add	sp, #8
 801316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013170:	2104      	movs	r1, #4
 8013172:	4620      	mov	r0, r4
 8013174:	f000 ffc0 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013178:	b1d0      	cbz	r0, 80131b0 <ucdr_serialize_uint32_t+0xd0>
 801317a:	7d23      	ldrb	r3, [r4, #20]
 801317c:	2b01      	cmp	r3, #1
 801317e:	68a3      	ldr	r3, [r4, #8]
 8013180:	d01c      	beq.n	80131bc <ucdr_serialize_uint32_t+0xdc>
 8013182:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013186:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801318a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801318e:	7018      	strb	r0, [r3, #0]
 8013190:	68a3      	ldr	r3, [r4, #8]
 8013192:	705a      	strb	r2, [r3, #1]
 8013194:	68a3      	ldr	r3, [r4, #8]
 8013196:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801319a:	7099      	strb	r1, [r3, #2]
 801319c:	68a3      	ldr	r3, [r4, #8]
 801319e:	70da      	strb	r2, [r3, #3]
 80131a0:	2104      	movs	r1, #4
 80131a2:	68a2      	ldr	r2, [r4, #8]
 80131a4:	6923      	ldr	r3, [r4, #16]
 80131a6:	440a      	add	r2, r1
 80131a8:	7561      	strb	r1, [r4, #21]
 80131aa:	440b      	add	r3, r1
 80131ac:	60a2      	str	r2, [r4, #8]
 80131ae:	6123      	str	r3, [r4, #16]
 80131b0:	7da0      	ldrb	r0, [r4, #22]
 80131b2:	f080 0001 	eor.w	r0, r0, #1
 80131b6:	b002      	add	sp, #8
 80131b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131bc:	9a01      	ldr	r2, [sp, #4]
 80131be:	601a      	str	r2, [r3, #0]
 80131c0:	e7ee      	b.n	80131a0 <ucdr_serialize_uint32_t+0xc0>
 80131c2:	68a2      	ldr	r2, [r4, #8]
 80131c4:	6923      	ldr	r3, [r4, #16]
 80131c6:	7da0      	ldrb	r0, [r4, #22]
 80131c8:	1b92      	subs	r2, r2, r6
 80131ca:	1b9b      	subs	r3, r3, r6
 80131cc:	7567      	strb	r7, [r4, #21]
 80131ce:	f080 0001 	eor.w	r0, r0, #1
 80131d2:	60a2      	str	r2, [r4, #8]
 80131d4:	6123      	str	r3, [r4, #16]
 80131d6:	b002      	add	sp, #8
 80131d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131dc:	68a3      	ldr	r3, [r4, #8]
 80131de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131e2:	701a      	strb	r2, [r3, #0]
 80131e4:	68a3      	ldr	r3, [r4, #8]
 80131e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80131ea:	701a      	strb	r2, [r3, #0]
 80131ec:	68a3      	ldr	r3, [r4, #8]
 80131ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131f2:	701a      	strb	r2, [r3, #0]
 80131f4:	e7ad      	b.n	8013152 <ucdr_serialize_uint32_t+0x72>
 80131f6:	4628      	mov	r0, r5
 80131f8:	ad01      	add	r5, sp, #4
 80131fa:	4632      	mov	r2, r6
 80131fc:	4629      	mov	r1, r5
 80131fe:	f00f f986 	bl	802250e <memcpy>
 8013202:	4642      	mov	r2, r8
 8013204:	19a9      	adds	r1, r5, r6
 8013206:	68a0      	ldr	r0, [r4, #8]
 8013208:	f00f f981 	bl	802250e <memcpy>
 801320c:	e7a1      	b.n	8013152 <ucdr_serialize_uint32_t+0x72>
 801320e:	bf00      	nop

08013210 <ucdr_serialize_endian_uint32_t>:
 8013210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013214:	4604      	mov	r4, r0
 8013216:	b083      	sub	sp, #12
 8013218:	460d      	mov	r5, r1
 801321a:	2104      	movs	r1, #4
 801321c:	9201      	str	r2, [sp, #4]
 801321e:	f000 ffbf 	bl	80141a0 <ucdr_buffer_alignment>
 8013222:	4601      	mov	r1, r0
 8013224:	4620      	mov	r0, r4
 8013226:	f894 8015 	ldrb.w	r8, [r4, #21]
 801322a:	f001 f801 	bl	8014230 <ucdr_advance_buffer>
 801322e:	2104      	movs	r1, #4
 8013230:	4620      	mov	r0, r4
 8013232:	f000 ff55 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013236:	2800      	cmp	r0, #0
 8013238:	d138      	bne.n	80132ac <ucdr_serialize_endian_uint32_t+0x9c>
 801323a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801323e:	42b7      	cmp	r7, r6
 8013240:	d92f      	bls.n	80132a2 <ucdr_serialize_endian_uint32_t+0x92>
 8013242:	6923      	ldr	r3, [r4, #16]
 8013244:	4620      	mov	r0, r4
 8013246:	60a7      	str	r7, [r4, #8]
 8013248:	1bbf      	subs	r7, r7, r6
 801324a:	443b      	add	r3, r7
 801324c:	f1c7 0904 	rsb	r9, r7, #4
 8013250:	6123      	str	r3, [r4, #16]
 8013252:	4649      	mov	r1, r9
 8013254:	f000 ff50 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013258:	2800      	cmp	r0, #0
 801325a:	d04a      	beq.n	80132f2 <ucdr_serialize_endian_uint32_t+0xe2>
 801325c:	2d01      	cmp	r5, #1
 801325e:	d063      	beq.n	8013328 <ucdr_serialize_endian_uint32_t+0x118>
 8013260:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013264:	7033      	strb	r3, [r6, #0]
 8013266:	2f00      	cmp	r7, #0
 8013268:	d051      	beq.n	801330e <ucdr_serialize_endian_uint32_t+0xfe>
 801326a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801326e:	2f01      	cmp	r7, #1
 8013270:	7073      	strb	r3, [r6, #1]
 8013272:	d050      	beq.n	8013316 <ucdr_serialize_endian_uint32_t+0x106>
 8013274:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013278:	2f02      	cmp	r7, #2
 801327a:	70b3      	strb	r3, [r6, #2]
 801327c:	d04f      	beq.n	801331e <ucdr_serialize_endian_uint32_t+0x10e>
 801327e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013282:	70f3      	strb	r3, [r6, #3]
 8013284:	6923      	ldr	r3, [r4, #16]
 8013286:	2104      	movs	r1, #4
 8013288:	68a2      	ldr	r2, [r4, #8]
 801328a:	7da0      	ldrb	r0, [r4, #22]
 801328c:	3304      	adds	r3, #4
 801328e:	444a      	add	r2, r9
 8013290:	7561      	strb	r1, [r4, #21]
 8013292:	1bdb      	subs	r3, r3, r7
 8013294:	f080 0001 	eor.w	r0, r0, #1
 8013298:	60a2      	str	r2, [r4, #8]
 801329a:	6123      	str	r3, [r4, #16]
 801329c:	b003      	add	sp, #12
 801329e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132a2:	2104      	movs	r1, #4
 80132a4:	4620      	mov	r0, r4
 80132a6:	f000 ff27 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 80132aa:	b1c8      	cbz	r0, 80132e0 <ucdr_serialize_endian_uint32_t+0xd0>
 80132ac:	2d01      	cmp	r5, #1
 80132ae:	68a3      	ldr	r3, [r4, #8]
 80132b0:	d01c      	beq.n	80132ec <ucdr_serialize_endian_uint32_t+0xdc>
 80132b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80132b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80132be:	7018      	strb	r0, [r3, #0]
 80132c0:	68a3      	ldr	r3, [r4, #8]
 80132c2:	705a      	strb	r2, [r3, #1]
 80132c4:	68a3      	ldr	r3, [r4, #8]
 80132c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80132ca:	7099      	strb	r1, [r3, #2]
 80132cc:	68a3      	ldr	r3, [r4, #8]
 80132ce:	70da      	strb	r2, [r3, #3]
 80132d0:	2104      	movs	r1, #4
 80132d2:	68a2      	ldr	r2, [r4, #8]
 80132d4:	6923      	ldr	r3, [r4, #16]
 80132d6:	440a      	add	r2, r1
 80132d8:	7561      	strb	r1, [r4, #21]
 80132da:	440b      	add	r3, r1
 80132dc:	60a2      	str	r2, [r4, #8]
 80132de:	6123      	str	r3, [r4, #16]
 80132e0:	7da0      	ldrb	r0, [r4, #22]
 80132e2:	f080 0001 	eor.w	r0, r0, #1
 80132e6:	b003      	add	sp, #12
 80132e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132ec:	9a01      	ldr	r2, [sp, #4]
 80132ee:	601a      	str	r2, [r3, #0]
 80132f0:	e7ee      	b.n	80132d0 <ucdr_serialize_endian_uint32_t+0xc0>
 80132f2:	68a2      	ldr	r2, [r4, #8]
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	7da0      	ldrb	r0, [r4, #22]
 80132f8:	1bd2      	subs	r2, r2, r7
 80132fa:	1bdb      	subs	r3, r3, r7
 80132fc:	f884 8015 	strb.w	r8, [r4, #21]
 8013300:	f080 0001 	eor.w	r0, r0, #1
 8013304:	60a2      	str	r2, [r4, #8]
 8013306:	6123      	str	r3, [r4, #16]
 8013308:	b003      	add	sp, #12
 801330a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801330e:	68a3      	ldr	r3, [r4, #8]
 8013310:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013314:	701a      	strb	r2, [r3, #0]
 8013316:	68a3      	ldr	r3, [r4, #8]
 8013318:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801331c:	701a      	strb	r2, [r3, #0]
 801331e:	68a3      	ldr	r3, [r4, #8]
 8013320:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013324:	701a      	strb	r2, [r3, #0]
 8013326:	e7ad      	b.n	8013284 <ucdr_serialize_endian_uint32_t+0x74>
 8013328:	ad01      	add	r5, sp, #4
 801332a:	463a      	mov	r2, r7
 801332c:	4630      	mov	r0, r6
 801332e:	4629      	mov	r1, r5
 8013330:	f00f f8ed 	bl	802250e <memcpy>
 8013334:	464a      	mov	r2, r9
 8013336:	19e9      	adds	r1, r5, r7
 8013338:	68a0      	ldr	r0, [r4, #8]
 801333a:	f00f f8e8 	bl	802250e <memcpy>
 801333e:	e7a1      	b.n	8013284 <ucdr_serialize_endian_uint32_t+0x74>

08013340 <ucdr_deserialize_uint32_t>:
 8013340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013344:	4604      	mov	r4, r0
 8013346:	460d      	mov	r5, r1
 8013348:	2104      	movs	r1, #4
 801334a:	f000 ff29 	bl	80141a0 <ucdr_buffer_alignment>
 801334e:	4601      	mov	r1, r0
 8013350:	4620      	mov	r0, r4
 8013352:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013356:	f000 ff6b 	bl	8014230 <ucdr_advance_buffer>
 801335a:	2104      	movs	r1, #4
 801335c:	4620      	mov	r0, r4
 801335e:	f000 febf 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013362:	2800      	cmp	r0, #0
 8013364:	d138      	bne.n	80133d8 <ucdr_deserialize_uint32_t+0x98>
 8013366:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801336a:	42b7      	cmp	r7, r6
 801336c:	d92f      	bls.n	80133ce <ucdr_deserialize_uint32_t+0x8e>
 801336e:	6923      	ldr	r3, [r4, #16]
 8013370:	4620      	mov	r0, r4
 8013372:	60a7      	str	r7, [r4, #8]
 8013374:	1bbf      	subs	r7, r7, r6
 8013376:	443b      	add	r3, r7
 8013378:	f1c7 0904 	rsb	r9, r7, #4
 801337c:	6123      	str	r3, [r4, #16]
 801337e:	4649      	mov	r1, r9
 8013380:	f000 feba 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013384:	2800      	cmp	r0, #0
 8013386:	d046      	beq.n	8013416 <ucdr_deserialize_uint32_t+0xd6>
 8013388:	7d23      	ldrb	r3, [r4, #20]
 801338a:	2b01      	cmp	r3, #1
 801338c:	d05c      	beq.n	8013448 <ucdr_deserialize_uint32_t+0x108>
 801338e:	78f3      	ldrb	r3, [r6, #3]
 8013390:	702b      	strb	r3, [r5, #0]
 8013392:	2f00      	cmp	r7, #0
 8013394:	d04c      	beq.n	8013430 <ucdr_deserialize_uint32_t+0xf0>
 8013396:	78b3      	ldrb	r3, [r6, #2]
 8013398:	2f01      	cmp	r7, #1
 801339a:	706b      	strb	r3, [r5, #1]
 801339c:	f105 0302 	add.w	r3, r5, #2
 80133a0:	d04a      	beq.n	8013438 <ucdr_deserialize_uint32_t+0xf8>
 80133a2:	7873      	ldrb	r3, [r6, #1]
 80133a4:	2f02      	cmp	r7, #2
 80133a6:	70ab      	strb	r3, [r5, #2]
 80133a8:	f105 0303 	add.w	r3, r5, #3
 80133ac:	d048      	beq.n	8013440 <ucdr_deserialize_uint32_t+0x100>
 80133ae:	7833      	ldrb	r3, [r6, #0]
 80133b0:	70eb      	strb	r3, [r5, #3]
 80133b2:	6923      	ldr	r3, [r4, #16]
 80133b4:	2104      	movs	r1, #4
 80133b6:	68a2      	ldr	r2, [r4, #8]
 80133b8:	3304      	adds	r3, #4
 80133ba:	7da0      	ldrb	r0, [r4, #22]
 80133bc:	444a      	add	r2, r9
 80133be:	7561      	strb	r1, [r4, #21]
 80133c0:	1bdb      	subs	r3, r3, r7
 80133c2:	f080 0001 	eor.w	r0, r0, #1
 80133c6:	60a2      	str	r2, [r4, #8]
 80133c8:	6123      	str	r3, [r4, #16]
 80133ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ce:	2104      	movs	r1, #4
 80133d0:	4620      	mov	r0, r4
 80133d2:	f000 fe91 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 80133d6:	b1b0      	cbz	r0, 8013406 <ucdr_deserialize_uint32_t+0xc6>
 80133d8:	7d23      	ldrb	r3, [r4, #20]
 80133da:	2b01      	cmp	r3, #1
 80133dc:	68a3      	ldr	r3, [r4, #8]
 80133de:	d017      	beq.n	8013410 <ucdr_deserialize_uint32_t+0xd0>
 80133e0:	78db      	ldrb	r3, [r3, #3]
 80133e2:	702b      	strb	r3, [r5, #0]
 80133e4:	68a3      	ldr	r3, [r4, #8]
 80133e6:	789b      	ldrb	r3, [r3, #2]
 80133e8:	706b      	strb	r3, [r5, #1]
 80133ea:	68a3      	ldr	r3, [r4, #8]
 80133ec:	785b      	ldrb	r3, [r3, #1]
 80133ee:	70ab      	strb	r3, [r5, #2]
 80133f0:	68a3      	ldr	r3, [r4, #8]
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	70eb      	strb	r3, [r5, #3]
 80133f6:	2104      	movs	r1, #4
 80133f8:	68a2      	ldr	r2, [r4, #8]
 80133fa:	6923      	ldr	r3, [r4, #16]
 80133fc:	440a      	add	r2, r1
 80133fe:	7561      	strb	r1, [r4, #21]
 8013400:	440b      	add	r3, r1
 8013402:	60a2      	str	r2, [r4, #8]
 8013404:	6123      	str	r3, [r4, #16]
 8013406:	7da0      	ldrb	r0, [r4, #22]
 8013408:	f080 0001 	eor.w	r0, r0, #1
 801340c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	602b      	str	r3, [r5, #0]
 8013414:	e7ef      	b.n	80133f6 <ucdr_deserialize_uint32_t+0xb6>
 8013416:	68a2      	ldr	r2, [r4, #8]
 8013418:	6923      	ldr	r3, [r4, #16]
 801341a:	1bd2      	subs	r2, r2, r7
 801341c:	7da0      	ldrb	r0, [r4, #22]
 801341e:	1bdb      	subs	r3, r3, r7
 8013420:	f884 8015 	strb.w	r8, [r4, #21]
 8013424:	f080 0001 	eor.w	r0, r0, #1
 8013428:	60a2      	str	r2, [r4, #8]
 801342a:	6123      	str	r3, [r4, #16]
 801342c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013430:	68a3      	ldr	r3, [r4, #8]
 8013432:	789b      	ldrb	r3, [r3, #2]
 8013434:	706b      	strb	r3, [r5, #1]
 8013436:	1cab      	adds	r3, r5, #2
 8013438:	68a2      	ldr	r2, [r4, #8]
 801343a:	7852      	ldrb	r2, [r2, #1]
 801343c:	f803 2b01 	strb.w	r2, [r3], #1
 8013440:	68a2      	ldr	r2, [r4, #8]
 8013442:	7812      	ldrb	r2, [r2, #0]
 8013444:	701a      	strb	r2, [r3, #0]
 8013446:	e7b4      	b.n	80133b2 <ucdr_deserialize_uint32_t+0x72>
 8013448:	4631      	mov	r1, r6
 801344a:	463a      	mov	r2, r7
 801344c:	4628      	mov	r0, r5
 801344e:	f00f f85e 	bl	802250e <memcpy>
 8013452:	464a      	mov	r2, r9
 8013454:	19e8      	adds	r0, r5, r7
 8013456:	68a1      	ldr	r1, [r4, #8]
 8013458:	f00f f859 	bl	802250e <memcpy>
 801345c:	e7a9      	b.n	80133b2 <ucdr_deserialize_uint32_t+0x72>
 801345e:	bf00      	nop

08013460 <ucdr_deserialize_endian_uint32_t>:
 8013460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013464:	4604      	mov	r4, r0
 8013466:	460e      	mov	r6, r1
 8013468:	2104      	movs	r1, #4
 801346a:	4615      	mov	r5, r2
 801346c:	f000 fe98 	bl	80141a0 <ucdr_buffer_alignment>
 8013470:	4601      	mov	r1, r0
 8013472:	4620      	mov	r0, r4
 8013474:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013478:	f000 feda 	bl	8014230 <ucdr_advance_buffer>
 801347c:	2104      	movs	r1, #4
 801347e:	4620      	mov	r0, r4
 8013480:	f000 fe2e 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013484:	2800      	cmp	r0, #0
 8013486:	d13c      	bne.n	8013502 <ucdr_deserialize_endian_uint32_t+0xa2>
 8013488:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801348c:	42bb      	cmp	r3, r7
 801348e:	d933      	bls.n	80134f8 <ucdr_deserialize_endian_uint32_t+0x98>
 8013490:	eba3 0907 	sub.w	r9, r3, r7
 8013494:	60a3      	str	r3, [r4, #8]
 8013496:	6923      	ldr	r3, [r4, #16]
 8013498:	4620      	mov	r0, r4
 801349a:	f1c9 0a04 	rsb	sl, r9, #4
 801349e:	444b      	add	r3, r9
 80134a0:	4651      	mov	r1, sl
 80134a2:	6123      	str	r3, [r4, #16]
 80134a4:	f000 fe28 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d048      	beq.n	801353e <ucdr_deserialize_endian_uint32_t+0xde>
 80134ac:	2e01      	cmp	r6, #1
 80134ae:	d061      	beq.n	8013574 <ucdr_deserialize_endian_uint32_t+0x114>
 80134b0:	78fb      	ldrb	r3, [r7, #3]
 80134b2:	702b      	strb	r3, [r5, #0]
 80134b4:	f1b9 0f00 	cmp.w	r9, #0
 80134b8:	d050      	beq.n	801355c <ucdr_deserialize_endian_uint32_t+0xfc>
 80134ba:	78bb      	ldrb	r3, [r7, #2]
 80134bc:	f1b9 0f01 	cmp.w	r9, #1
 80134c0:	706b      	strb	r3, [r5, #1]
 80134c2:	f105 0302 	add.w	r3, r5, #2
 80134c6:	d04d      	beq.n	8013564 <ucdr_deserialize_endian_uint32_t+0x104>
 80134c8:	787b      	ldrb	r3, [r7, #1]
 80134ca:	f1b9 0f02 	cmp.w	r9, #2
 80134ce:	70ab      	strb	r3, [r5, #2]
 80134d0:	f105 0303 	add.w	r3, r5, #3
 80134d4:	d04a      	beq.n	801356c <ucdr_deserialize_endian_uint32_t+0x10c>
 80134d6:	783b      	ldrb	r3, [r7, #0]
 80134d8:	70eb      	strb	r3, [r5, #3]
 80134da:	6923      	ldr	r3, [r4, #16]
 80134dc:	2104      	movs	r1, #4
 80134de:	68a2      	ldr	r2, [r4, #8]
 80134e0:	3304      	adds	r3, #4
 80134e2:	7da0      	ldrb	r0, [r4, #22]
 80134e4:	4452      	add	r2, sl
 80134e6:	7561      	strb	r1, [r4, #21]
 80134e8:	eba3 0309 	sub.w	r3, r3, r9
 80134ec:	f080 0001 	eor.w	r0, r0, #1
 80134f0:	60a2      	str	r2, [r4, #8]
 80134f2:	6123      	str	r3, [r4, #16]
 80134f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134f8:	2104      	movs	r1, #4
 80134fa:	4620      	mov	r0, r4
 80134fc:	f000 fdfc 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013500:	b1a8      	cbz	r0, 801352e <ucdr_deserialize_endian_uint32_t+0xce>
 8013502:	2e01      	cmp	r6, #1
 8013504:	68a3      	ldr	r3, [r4, #8]
 8013506:	d017      	beq.n	8013538 <ucdr_deserialize_endian_uint32_t+0xd8>
 8013508:	78db      	ldrb	r3, [r3, #3]
 801350a:	702b      	strb	r3, [r5, #0]
 801350c:	68a3      	ldr	r3, [r4, #8]
 801350e:	789b      	ldrb	r3, [r3, #2]
 8013510:	706b      	strb	r3, [r5, #1]
 8013512:	68a3      	ldr	r3, [r4, #8]
 8013514:	785b      	ldrb	r3, [r3, #1]
 8013516:	70ab      	strb	r3, [r5, #2]
 8013518:	68a3      	ldr	r3, [r4, #8]
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	70eb      	strb	r3, [r5, #3]
 801351e:	2104      	movs	r1, #4
 8013520:	68a2      	ldr	r2, [r4, #8]
 8013522:	6923      	ldr	r3, [r4, #16]
 8013524:	440a      	add	r2, r1
 8013526:	7561      	strb	r1, [r4, #21]
 8013528:	440b      	add	r3, r1
 801352a:	60a2      	str	r2, [r4, #8]
 801352c:	6123      	str	r3, [r4, #16]
 801352e:	7da0      	ldrb	r0, [r4, #22]
 8013530:	f080 0001 	eor.w	r0, r0, #1
 8013534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	602b      	str	r3, [r5, #0]
 801353c:	e7ef      	b.n	801351e <ucdr_deserialize_endian_uint32_t+0xbe>
 801353e:	68a2      	ldr	r2, [r4, #8]
 8013540:	6923      	ldr	r3, [r4, #16]
 8013542:	eba2 0209 	sub.w	r2, r2, r9
 8013546:	7da0      	ldrb	r0, [r4, #22]
 8013548:	eba3 0309 	sub.w	r3, r3, r9
 801354c:	f884 8015 	strb.w	r8, [r4, #21]
 8013550:	f080 0001 	eor.w	r0, r0, #1
 8013554:	60a2      	str	r2, [r4, #8]
 8013556:	6123      	str	r3, [r4, #16]
 8013558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801355c:	68a3      	ldr	r3, [r4, #8]
 801355e:	789b      	ldrb	r3, [r3, #2]
 8013560:	706b      	strb	r3, [r5, #1]
 8013562:	1cab      	adds	r3, r5, #2
 8013564:	68a2      	ldr	r2, [r4, #8]
 8013566:	7852      	ldrb	r2, [r2, #1]
 8013568:	f803 2b01 	strb.w	r2, [r3], #1
 801356c:	68a2      	ldr	r2, [r4, #8]
 801356e:	7812      	ldrb	r2, [r2, #0]
 8013570:	701a      	strb	r2, [r3, #0]
 8013572:	e7b2      	b.n	80134da <ucdr_deserialize_endian_uint32_t+0x7a>
 8013574:	4639      	mov	r1, r7
 8013576:	464a      	mov	r2, r9
 8013578:	4628      	mov	r0, r5
 801357a:	f00e ffc8 	bl	802250e <memcpy>
 801357e:	4652      	mov	r2, sl
 8013580:	eb05 0009 	add.w	r0, r5, r9
 8013584:	68a1      	ldr	r1, [r4, #8]
 8013586:	f00e ffc2 	bl	802250e <memcpy>
 801358a:	e7a6      	b.n	80134da <ucdr_deserialize_endian_uint32_t+0x7a>

0801358c <ucdr_serialize_uint64_t>:
 801358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013590:	4604      	mov	r4, r0
 8013592:	b082      	sub	sp, #8
 8013594:	2108      	movs	r1, #8
 8013596:	e9cd 2300 	strd	r2, r3, [sp]
 801359a:	f000 fe01 	bl	80141a0 <ucdr_buffer_alignment>
 801359e:	4601      	mov	r1, r0
 80135a0:	4620      	mov	r0, r4
 80135a2:	7d67      	ldrb	r7, [r4, #21]
 80135a4:	f000 fe44 	bl	8014230 <ucdr_advance_buffer>
 80135a8:	2108      	movs	r1, #8
 80135aa:	4620      	mov	r0, r4
 80135ac:	f000 fd98 	bl	80140e0 <ucdr_check_buffer_available_for>
 80135b0:	2800      	cmp	r0, #0
 80135b2:	d14e      	bne.n	8013652 <ucdr_serialize_uint64_t+0xc6>
 80135b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80135b8:	42ab      	cmp	r3, r5
 80135ba:	d945      	bls.n	8013648 <ucdr_serialize_uint64_t+0xbc>
 80135bc:	1b5e      	subs	r6, r3, r5
 80135be:	60a3      	str	r3, [r4, #8]
 80135c0:	6923      	ldr	r3, [r4, #16]
 80135c2:	4620      	mov	r0, r4
 80135c4:	f1c6 0808 	rsb	r8, r6, #8
 80135c8:	4433      	add	r3, r6
 80135ca:	4641      	mov	r1, r8
 80135cc:	6123      	str	r3, [r4, #16]
 80135ce:	f000 fd93 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d074      	beq.n	80136c0 <ucdr_serialize_uint64_t+0x134>
 80135d6:	7d23      	ldrb	r3, [r4, #20]
 80135d8:	2b01      	cmp	r3, #1
 80135da:	f000 809b 	beq.w	8013714 <ucdr_serialize_uint64_t+0x188>
 80135de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80135e2:	702b      	strb	r3, [r5, #0]
 80135e4:	2e00      	cmp	r6, #0
 80135e6:	d078      	beq.n	80136da <ucdr_serialize_uint64_t+0x14e>
 80135e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80135ec:	2e01      	cmp	r6, #1
 80135ee:	706b      	strb	r3, [r5, #1]
 80135f0:	d077      	beq.n	80136e2 <ucdr_serialize_uint64_t+0x156>
 80135f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80135f6:	2e02      	cmp	r6, #2
 80135f8:	70ab      	strb	r3, [r5, #2]
 80135fa:	d076      	beq.n	80136ea <ucdr_serialize_uint64_t+0x15e>
 80135fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013600:	2e03      	cmp	r6, #3
 8013602:	70eb      	strb	r3, [r5, #3]
 8013604:	d075      	beq.n	80136f2 <ucdr_serialize_uint64_t+0x166>
 8013606:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801360a:	2e04      	cmp	r6, #4
 801360c:	712b      	strb	r3, [r5, #4]
 801360e:	d074      	beq.n	80136fa <ucdr_serialize_uint64_t+0x16e>
 8013610:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013614:	2e05      	cmp	r6, #5
 8013616:	716b      	strb	r3, [r5, #5]
 8013618:	d073      	beq.n	8013702 <ucdr_serialize_uint64_t+0x176>
 801361a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801361e:	2e06      	cmp	r6, #6
 8013620:	71ab      	strb	r3, [r5, #6]
 8013622:	d072      	beq.n	801370a <ucdr_serialize_uint64_t+0x17e>
 8013624:	f89d 3000 	ldrb.w	r3, [sp]
 8013628:	71eb      	strb	r3, [r5, #7]
 801362a:	6923      	ldr	r3, [r4, #16]
 801362c:	2108      	movs	r1, #8
 801362e:	68a2      	ldr	r2, [r4, #8]
 8013630:	3308      	adds	r3, #8
 8013632:	7da0      	ldrb	r0, [r4, #22]
 8013634:	4442      	add	r2, r8
 8013636:	7561      	strb	r1, [r4, #21]
 8013638:	1b9e      	subs	r6, r3, r6
 801363a:	f080 0001 	eor.w	r0, r0, #1
 801363e:	60a2      	str	r2, [r4, #8]
 8013640:	6126      	str	r6, [r4, #16]
 8013642:	b002      	add	sp, #8
 8013644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013648:	2108      	movs	r1, #8
 801364a:	4620      	mov	r0, r4
 801364c:	f000 fd54 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013650:	b350      	cbz	r0, 80136a8 <ucdr_serialize_uint64_t+0x11c>
 8013652:	7d23      	ldrb	r3, [r4, #20]
 8013654:	2b01      	cmp	r3, #1
 8013656:	d02d      	beq.n	80136b4 <ucdr_serialize_uint64_t+0x128>
 8013658:	68a3      	ldr	r3, [r4, #8]
 801365a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801365e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013662:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013666:	7018      	strb	r0, [r3, #0]
 8013668:	68a3      	ldr	r3, [r4, #8]
 801366a:	705a      	strb	r2, [r3, #1]
 801366c:	68a3      	ldr	r3, [r4, #8]
 801366e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013672:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013676:	7099      	strb	r1, [r3, #2]
 8013678:	68a3      	ldr	r3, [r4, #8]
 801367a:	70da      	strb	r2, [r3, #3]
 801367c:	68a3      	ldr	r3, [r4, #8]
 801367e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013682:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013686:	7118      	strb	r0, [r3, #4]
 8013688:	68a3      	ldr	r3, [r4, #8]
 801368a:	715a      	strb	r2, [r3, #5]
 801368c:	68a3      	ldr	r3, [r4, #8]
 801368e:	f89d 2000 	ldrb.w	r2, [sp]
 8013692:	7199      	strb	r1, [r3, #6]
 8013694:	68a3      	ldr	r3, [r4, #8]
 8013696:	71da      	strb	r2, [r3, #7]
 8013698:	2108      	movs	r1, #8
 801369a:	68a2      	ldr	r2, [r4, #8]
 801369c:	6923      	ldr	r3, [r4, #16]
 801369e:	440a      	add	r2, r1
 80136a0:	7561      	strb	r1, [r4, #21]
 80136a2:	440b      	add	r3, r1
 80136a4:	60a2      	str	r2, [r4, #8]
 80136a6:	6123      	str	r3, [r4, #16]
 80136a8:	7da0      	ldrb	r0, [r4, #22]
 80136aa:	f080 0001 	eor.w	r0, r0, #1
 80136ae:	b002      	add	sp, #8
 80136b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b4:	466b      	mov	r3, sp
 80136b6:	68a2      	ldr	r2, [r4, #8]
 80136b8:	cb03      	ldmia	r3!, {r0, r1}
 80136ba:	6010      	str	r0, [r2, #0]
 80136bc:	6051      	str	r1, [r2, #4]
 80136be:	e7eb      	b.n	8013698 <ucdr_serialize_uint64_t+0x10c>
 80136c0:	68a2      	ldr	r2, [r4, #8]
 80136c2:	6923      	ldr	r3, [r4, #16]
 80136c4:	7da0      	ldrb	r0, [r4, #22]
 80136c6:	1b92      	subs	r2, r2, r6
 80136c8:	1b9b      	subs	r3, r3, r6
 80136ca:	7567      	strb	r7, [r4, #21]
 80136cc:	f080 0001 	eor.w	r0, r0, #1
 80136d0:	60a2      	str	r2, [r4, #8]
 80136d2:	6123      	str	r3, [r4, #16]
 80136d4:	b002      	add	sp, #8
 80136d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136da:	68a3      	ldr	r3, [r4, #8]
 80136dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136e0:	701a      	strb	r2, [r3, #0]
 80136e2:	68a3      	ldr	r3, [r4, #8]
 80136e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80136e8:	701a      	strb	r2, [r3, #0]
 80136ea:	68a3      	ldr	r3, [r4, #8]
 80136ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80136f0:	701a      	strb	r2, [r3, #0]
 80136f2:	68a3      	ldr	r3, [r4, #8]
 80136f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80136f8:	701a      	strb	r2, [r3, #0]
 80136fa:	68a3      	ldr	r3, [r4, #8]
 80136fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013700:	701a      	strb	r2, [r3, #0]
 8013702:	68a3      	ldr	r3, [r4, #8]
 8013704:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013708:	701a      	strb	r2, [r3, #0]
 801370a:	68a3      	ldr	r3, [r4, #8]
 801370c:	f89d 2000 	ldrb.w	r2, [sp]
 8013710:	701a      	strb	r2, [r3, #0]
 8013712:	e78a      	b.n	801362a <ucdr_serialize_uint64_t+0x9e>
 8013714:	4628      	mov	r0, r5
 8013716:	466d      	mov	r5, sp
 8013718:	4632      	mov	r2, r6
 801371a:	4629      	mov	r1, r5
 801371c:	f00e fef7 	bl	802250e <memcpy>
 8013720:	4642      	mov	r2, r8
 8013722:	19a9      	adds	r1, r5, r6
 8013724:	68a0      	ldr	r0, [r4, #8]
 8013726:	f00e fef2 	bl	802250e <memcpy>
 801372a:	e77e      	b.n	801362a <ucdr_serialize_uint64_t+0x9e>

0801372c <ucdr_serialize_int16_t>:
 801372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013730:	460b      	mov	r3, r1
 8013732:	b082      	sub	sp, #8
 8013734:	4604      	mov	r4, r0
 8013736:	2102      	movs	r1, #2
 8013738:	f8ad 3006 	strh.w	r3, [sp, #6]
 801373c:	f000 fd30 	bl	80141a0 <ucdr_buffer_alignment>
 8013740:	4601      	mov	r1, r0
 8013742:	4620      	mov	r0, r4
 8013744:	7d67      	ldrb	r7, [r4, #21]
 8013746:	f000 fd73 	bl	8014230 <ucdr_advance_buffer>
 801374a:	2102      	movs	r1, #2
 801374c:	4620      	mov	r0, r4
 801374e:	f000 fcc7 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013752:	bb78      	cbnz	r0, 80137b4 <ucdr_serialize_int16_t+0x88>
 8013754:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013758:	42ab      	cmp	r3, r5
 801375a:	d926      	bls.n	80137aa <ucdr_serialize_int16_t+0x7e>
 801375c:	1b5e      	subs	r6, r3, r5
 801375e:	60a3      	str	r3, [r4, #8]
 8013760:	6923      	ldr	r3, [r4, #16]
 8013762:	4620      	mov	r0, r4
 8013764:	f1c6 0802 	rsb	r8, r6, #2
 8013768:	4433      	add	r3, r6
 801376a:	4641      	mov	r1, r8
 801376c:	6123      	str	r3, [r4, #16]
 801376e:	f000 fcc3 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013772:	2800      	cmp	r0, #0
 8013774:	d03b      	beq.n	80137ee <ucdr_serialize_int16_t+0xc2>
 8013776:	7d23      	ldrb	r3, [r4, #20]
 8013778:	2b01      	cmp	r3, #1
 801377a:	d04a      	beq.n	8013812 <ucdr_serialize_int16_t+0xe6>
 801377c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013780:	702b      	strb	r3, [r5, #0]
 8013782:	2e00      	cmp	r6, #0
 8013784:	d040      	beq.n	8013808 <ucdr_serialize_int16_t+0xdc>
 8013786:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801378a:	706b      	strb	r3, [r5, #1]
 801378c:	6923      	ldr	r3, [r4, #16]
 801378e:	2102      	movs	r1, #2
 8013790:	68a2      	ldr	r2, [r4, #8]
 8013792:	3302      	adds	r3, #2
 8013794:	7da0      	ldrb	r0, [r4, #22]
 8013796:	4442      	add	r2, r8
 8013798:	7561      	strb	r1, [r4, #21]
 801379a:	1b9e      	subs	r6, r3, r6
 801379c:	f080 0001 	eor.w	r0, r0, #1
 80137a0:	60a2      	str	r2, [r4, #8]
 80137a2:	6126      	str	r6, [r4, #16]
 80137a4:	b002      	add	sp, #8
 80137a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137aa:	2102      	movs	r1, #2
 80137ac:	4620      	mov	r0, r4
 80137ae:	f000 fca3 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 80137b2:	b190      	cbz	r0, 80137da <ucdr_serialize_int16_t+0xae>
 80137b4:	7d23      	ldrb	r3, [r4, #20]
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	68a3      	ldr	r3, [r4, #8]
 80137ba:	d014      	beq.n	80137e6 <ucdr_serialize_int16_t+0xba>
 80137bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80137c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137c4:	7019      	strb	r1, [r3, #0]
 80137c6:	68a3      	ldr	r3, [r4, #8]
 80137c8:	705a      	strb	r2, [r3, #1]
 80137ca:	2102      	movs	r1, #2
 80137cc:	68a2      	ldr	r2, [r4, #8]
 80137ce:	6923      	ldr	r3, [r4, #16]
 80137d0:	440a      	add	r2, r1
 80137d2:	7561      	strb	r1, [r4, #21]
 80137d4:	440b      	add	r3, r1
 80137d6:	60a2      	str	r2, [r4, #8]
 80137d8:	6123      	str	r3, [r4, #16]
 80137da:	7da0      	ldrb	r0, [r4, #22]
 80137dc:	f080 0001 	eor.w	r0, r0, #1
 80137e0:	b002      	add	sp, #8
 80137e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80137ea:	801a      	strh	r2, [r3, #0]
 80137ec:	e7ed      	b.n	80137ca <ucdr_serialize_int16_t+0x9e>
 80137ee:	68a2      	ldr	r2, [r4, #8]
 80137f0:	6923      	ldr	r3, [r4, #16]
 80137f2:	7da0      	ldrb	r0, [r4, #22]
 80137f4:	1b92      	subs	r2, r2, r6
 80137f6:	1b9b      	subs	r3, r3, r6
 80137f8:	7567      	strb	r7, [r4, #21]
 80137fa:	f080 0001 	eor.w	r0, r0, #1
 80137fe:	60a2      	str	r2, [r4, #8]
 8013800:	6123      	str	r3, [r4, #16]
 8013802:	b002      	add	sp, #8
 8013804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013808:	68a3      	ldr	r3, [r4, #8]
 801380a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801380e:	701a      	strb	r2, [r3, #0]
 8013810:	e7bc      	b.n	801378c <ucdr_serialize_int16_t+0x60>
 8013812:	4628      	mov	r0, r5
 8013814:	f10d 0506 	add.w	r5, sp, #6
 8013818:	4632      	mov	r2, r6
 801381a:	4629      	mov	r1, r5
 801381c:	f00e fe77 	bl	802250e <memcpy>
 8013820:	4642      	mov	r2, r8
 8013822:	19a9      	adds	r1, r5, r6
 8013824:	68a0      	ldr	r0, [r4, #8]
 8013826:	f00e fe72 	bl	802250e <memcpy>
 801382a:	e7af      	b.n	801378c <ucdr_serialize_int16_t+0x60>

0801382c <ucdr_deserialize_int16_t>:
 801382c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013830:	4604      	mov	r4, r0
 8013832:	460d      	mov	r5, r1
 8013834:	2102      	movs	r1, #2
 8013836:	f000 fcb3 	bl	80141a0 <ucdr_buffer_alignment>
 801383a:	4601      	mov	r1, r0
 801383c:	4620      	mov	r0, r4
 801383e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013842:	f000 fcf5 	bl	8014230 <ucdr_advance_buffer>
 8013846:	2102      	movs	r1, #2
 8013848:	4620      	mov	r0, r4
 801384a:	f000 fc49 	bl	80140e0 <ucdr_check_buffer_available_for>
 801384e:	bb60      	cbnz	r0, 80138aa <ucdr_deserialize_int16_t+0x7e>
 8013850:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013854:	42be      	cmp	r6, r7
 8013856:	d923      	bls.n	80138a0 <ucdr_deserialize_int16_t+0x74>
 8013858:	6923      	ldr	r3, [r4, #16]
 801385a:	4620      	mov	r0, r4
 801385c:	60a6      	str	r6, [r4, #8]
 801385e:	1bf6      	subs	r6, r6, r7
 8013860:	4433      	add	r3, r6
 8013862:	f1c6 0902 	rsb	r9, r6, #2
 8013866:	6123      	str	r3, [r4, #16]
 8013868:	4649      	mov	r1, r9
 801386a:	f000 fc45 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 801386e:	2800      	cmp	r0, #0
 8013870:	d034      	beq.n	80138dc <ucdr_deserialize_int16_t+0xb0>
 8013872:	7d23      	ldrb	r3, [r4, #20]
 8013874:	2b01      	cmp	r3, #1
 8013876:	d042      	beq.n	80138fe <ucdr_deserialize_int16_t+0xd2>
 8013878:	787b      	ldrb	r3, [r7, #1]
 801387a:	702b      	strb	r3, [r5, #0]
 801387c:	2e00      	cmp	r6, #0
 801387e:	d03a      	beq.n	80138f6 <ucdr_deserialize_int16_t+0xca>
 8013880:	783b      	ldrb	r3, [r7, #0]
 8013882:	706b      	strb	r3, [r5, #1]
 8013884:	6923      	ldr	r3, [r4, #16]
 8013886:	2102      	movs	r1, #2
 8013888:	68a2      	ldr	r2, [r4, #8]
 801388a:	3302      	adds	r3, #2
 801388c:	7da0      	ldrb	r0, [r4, #22]
 801388e:	444a      	add	r2, r9
 8013890:	7561      	strb	r1, [r4, #21]
 8013892:	1b9b      	subs	r3, r3, r6
 8013894:	f080 0001 	eor.w	r0, r0, #1
 8013898:	60a2      	str	r2, [r4, #8]
 801389a:	6123      	str	r3, [r4, #16]
 801389c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138a0:	2102      	movs	r1, #2
 80138a2:	4620      	mov	r0, r4
 80138a4:	f000 fc28 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 80138a8:	b180      	cbz	r0, 80138cc <ucdr_deserialize_int16_t+0xa0>
 80138aa:	7d23      	ldrb	r3, [r4, #20]
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	68a3      	ldr	r3, [r4, #8]
 80138b0:	d011      	beq.n	80138d6 <ucdr_deserialize_int16_t+0xaa>
 80138b2:	785b      	ldrb	r3, [r3, #1]
 80138b4:	702b      	strb	r3, [r5, #0]
 80138b6:	68a3      	ldr	r3, [r4, #8]
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	706b      	strb	r3, [r5, #1]
 80138bc:	2102      	movs	r1, #2
 80138be:	68a2      	ldr	r2, [r4, #8]
 80138c0:	6923      	ldr	r3, [r4, #16]
 80138c2:	440a      	add	r2, r1
 80138c4:	7561      	strb	r1, [r4, #21]
 80138c6:	440b      	add	r3, r1
 80138c8:	60a2      	str	r2, [r4, #8]
 80138ca:	6123      	str	r3, [r4, #16]
 80138cc:	7da0      	ldrb	r0, [r4, #22]
 80138ce:	f080 0001 	eor.w	r0, r0, #1
 80138d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	802b      	strh	r3, [r5, #0]
 80138da:	e7ef      	b.n	80138bc <ucdr_deserialize_int16_t+0x90>
 80138dc:	68a2      	ldr	r2, [r4, #8]
 80138de:	6923      	ldr	r3, [r4, #16]
 80138e0:	1b92      	subs	r2, r2, r6
 80138e2:	7da0      	ldrb	r0, [r4, #22]
 80138e4:	1b9b      	subs	r3, r3, r6
 80138e6:	f884 8015 	strb.w	r8, [r4, #21]
 80138ea:	f080 0001 	eor.w	r0, r0, #1
 80138ee:	60a2      	str	r2, [r4, #8]
 80138f0:	6123      	str	r3, [r4, #16]
 80138f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138f6:	68a3      	ldr	r3, [r4, #8]
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	706b      	strb	r3, [r5, #1]
 80138fc:	e7c2      	b.n	8013884 <ucdr_deserialize_int16_t+0x58>
 80138fe:	4639      	mov	r1, r7
 8013900:	4632      	mov	r2, r6
 8013902:	4628      	mov	r0, r5
 8013904:	f00e fe03 	bl	802250e <memcpy>
 8013908:	464a      	mov	r2, r9
 801390a:	19a8      	adds	r0, r5, r6
 801390c:	68a1      	ldr	r1, [r4, #8]
 801390e:	f00e fdfe 	bl	802250e <memcpy>
 8013912:	e7b7      	b.n	8013884 <ucdr_deserialize_int16_t+0x58>

08013914 <ucdr_serialize_int32_t>:
 8013914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013918:	b082      	sub	sp, #8
 801391a:	4604      	mov	r4, r0
 801391c:	9101      	str	r1, [sp, #4]
 801391e:	2104      	movs	r1, #4
 8013920:	f000 fc3e 	bl	80141a0 <ucdr_buffer_alignment>
 8013924:	4601      	mov	r1, r0
 8013926:	4620      	mov	r0, r4
 8013928:	7d67      	ldrb	r7, [r4, #21]
 801392a:	f000 fc81 	bl	8014230 <ucdr_advance_buffer>
 801392e:	2104      	movs	r1, #4
 8013930:	4620      	mov	r0, r4
 8013932:	f000 fbd5 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013936:	2800      	cmp	r0, #0
 8013938:	d139      	bne.n	80139ae <ucdr_serialize_int32_t+0x9a>
 801393a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801393e:	42ab      	cmp	r3, r5
 8013940:	d930      	bls.n	80139a4 <ucdr_serialize_int32_t+0x90>
 8013942:	1b5e      	subs	r6, r3, r5
 8013944:	60a3      	str	r3, [r4, #8]
 8013946:	6923      	ldr	r3, [r4, #16]
 8013948:	4620      	mov	r0, r4
 801394a:	f1c6 0804 	rsb	r8, r6, #4
 801394e:	4433      	add	r3, r6
 8013950:	4641      	mov	r1, r8
 8013952:	6123      	str	r3, [r4, #16]
 8013954:	f000 fbd0 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013958:	2800      	cmp	r0, #0
 801395a:	d04c      	beq.n	80139f6 <ucdr_serialize_int32_t+0xe2>
 801395c:	7d23      	ldrb	r3, [r4, #20]
 801395e:	2b01      	cmp	r3, #1
 8013960:	d063      	beq.n	8013a2a <ucdr_serialize_int32_t+0x116>
 8013962:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013966:	702b      	strb	r3, [r5, #0]
 8013968:	2e00      	cmp	r6, #0
 801396a:	d051      	beq.n	8013a10 <ucdr_serialize_int32_t+0xfc>
 801396c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013970:	2e01      	cmp	r6, #1
 8013972:	706b      	strb	r3, [r5, #1]
 8013974:	d050      	beq.n	8013a18 <ucdr_serialize_int32_t+0x104>
 8013976:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801397a:	2e02      	cmp	r6, #2
 801397c:	70ab      	strb	r3, [r5, #2]
 801397e:	d04f      	beq.n	8013a20 <ucdr_serialize_int32_t+0x10c>
 8013980:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013984:	70eb      	strb	r3, [r5, #3]
 8013986:	6923      	ldr	r3, [r4, #16]
 8013988:	2104      	movs	r1, #4
 801398a:	68a2      	ldr	r2, [r4, #8]
 801398c:	3304      	adds	r3, #4
 801398e:	7da0      	ldrb	r0, [r4, #22]
 8013990:	4442      	add	r2, r8
 8013992:	7561      	strb	r1, [r4, #21]
 8013994:	1b9e      	subs	r6, r3, r6
 8013996:	f080 0001 	eor.w	r0, r0, #1
 801399a:	60a2      	str	r2, [r4, #8]
 801399c:	6126      	str	r6, [r4, #16]
 801399e:	b002      	add	sp, #8
 80139a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139a4:	2104      	movs	r1, #4
 80139a6:	4620      	mov	r0, r4
 80139a8:	f000 fba6 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 80139ac:	b1d0      	cbz	r0, 80139e4 <ucdr_serialize_int32_t+0xd0>
 80139ae:	7d23      	ldrb	r3, [r4, #20]
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	68a3      	ldr	r3, [r4, #8]
 80139b4:	d01c      	beq.n	80139f0 <ucdr_serialize_int32_t+0xdc>
 80139b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80139ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80139be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80139c2:	7018      	strb	r0, [r3, #0]
 80139c4:	68a3      	ldr	r3, [r4, #8]
 80139c6:	705a      	strb	r2, [r3, #1]
 80139c8:	68a3      	ldr	r3, [r4, #8]
 80139ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80139ce:	7099      	strb	r1, [r3, #2]
 80139d0:	68a3      	ldr	r3, [r4, #8]
 80139d2:	70da      	strb	r2, [r3, #3]
 80139d4:	2104      	movs	r1, #4
 80139d6:	68a2      	ldr	r2, [r4, #8]
 80139d8:	6923      	ldr	r3, [r4, #16]
 80139da:	440a      	add	r2, r1
 80139dc:	7561      	strb	r1, [r4, #21]
 80139de:	440b      	add	r3, r1
 80139e0:	60a2      	str	r2, [r4, #8]
 80139e2:	6123      	str	r3, [r4, #16]
 80139e4:	7da0      	ldrb	r0, [r4, #22]
 80139e6:	f080 0001 	eor.w	r0, r0, #1
 80139ea:	b002      	add	sp, #8
 80139ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139f0:	9a01      	ldr	r2, [sp, #4]
 80139f2:	601a      	str	r2, [r3, #0]
 80139f4:	e7ee      	b.n	80139d4 <ucdr_serialize_int32_t+0xc0>
 80139f6:	68a2      	ldr	r2, [r4, #8]
 80139f8:	6923      	ldr	r3, [r4, #16]
 80139fa:	7da0      	ldrb	r0, [r4, #22]
 80139fc:	1b92      	subs	r2, r2, r6
 80139fe:	1b9b      	subs	r3, r3, r6
 8013a00:	7567      	strb	r7, [r4, #21]
 8013a02:	f080 0001 	eor.w	r0, r0, #1
 8013a06:	60a2      	str	r2, [r4, #8]
 8013a08:	6123      	str	r3, [r4, #16]
 8013a0a:	b002      	add	sp, #8
 8013a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a10:	68a3      	ldr	r3, [r4, #8]
 8013a12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a16:	701a      	strb	r2, [r3, #0]
 8013a18:	68a3      	ldr	r3, [r4, #8]
 8013a1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013a1e:	701a      	strb	r2, [r3, #0]
 8013a20:	68a3      	ldr	r3, [r4, #8]
 8013a22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013a26:	701a      	strb	r2, [r3, #0]
 8013a28:	e7ad      	b.n	8013986 <ucdr_serialize_int32_t+0x72>
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	ad01      	add	r5, sp, #4
 8013a2e:	4632      	mov	r2, r6
 8013a30:	4629      	mov	r1, r5
 8013a32:	f00e fd6c 	bl	802250e <memcpy>
 8013a36:	4642      	mov	r2, r8
 8013a38:	19a9      	adds	r1, r5, r6
 8013a3a:	68a0      	ldr	r0, [r4, #8]
 8013a3c:	f00e fd67 	bl	802250e <memcpy>
 8013a40:	e7a1      	b.n	8013986 <ucdr_serialize_int32_t+0x72>
 8013a42:	bf00      	nop

08013a44 <ucdr_deserialize_int32_t>:
 8013a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a48:	4604      	mov	r4, r0
 8013a4a:	460d      	mov	r5, r1
 8013a4c:	2104      	movs	r1, #4
 8013a4e:	f000 fba7 	bl	80141a0 <ucdr_buffer_alignment>
 8013a52:	4601      	mov	r1, r0
 8013a54:	4620      	mov	r0, r4
 8013a56:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013a5a:	f000 fbe9 	bl	8014230 <ucdr_advance_buffer>
 8013a5e:	2104      	movs	r1, #4
 8013a60:	4620      	mov	r0, r4
 8013a62:	f000 fb3d 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013a66:	2800      	cmp	r0, #0
 8013a68:	d138      	bne.n	8013adc <ucdr_deserialize_int32_t+0x98>
 8013a6a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013a6e:	42b7      	cmp	r7, r6
 8013a70:	d92f      	bls.n	8013ad2 <ucdr_deserialize_int32_t+0x8e>
 8013a72:	6923      	ldr	r3, [r4, #16]
 8013a74:	4620      	mov	r0, r4
 8013a76:	60a7      	str	r7, [r4, #8]
 8013a78:	1bbf      	subs	r7, r7, r6
 8013a7a:	443b      	add	r3, r7
 8013a7c:	f1c7 0904 	rsb	r9, r7, #4
 8013a80:	6123      	str	r3, [r4, #16]
 8013a82:	4649      	mov	r1, r9
 8013a84:	f000 fb38 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d046      	beq.n	8013b1a <ucdr_deserialize_int32_t+0xd6>
 8013a8c:	7d23      	ldrb	r3, [r4, #20]
 8013a8e:	2b01      	cmp	r3, #1
 8013a90:	d05c      	beq.n	8013b4c <ucdr_deserialize_int32_t+0x108>
 8013a92:	78f3      	ldrb	r3, [r6, #3]
 8013a94:	702b      	strb	r3, [r5, #0]
 8013a96:	2f00      	cmp	r7, #0
 8013a98:	d04c      	beq.n	8013b34 <ucdr_deserialize_int32_t+0xf0>
 8013a9a:	78b3      	ldrb	r3, [r6, #2]
 8013a9c:	2f01      	cmp	r7, #1
 8013a9e:	706b      	strb	r3, [r5, #1]
 8013aa0:	f105 0302 	add.w	r3, r5, #2
 8013aa4:	d04a      	beq.n	8013b3c <ucdr_deserialize_int32_t+0xf8>
 8013aa6:	7873      	ldrb	r3, [r6, #1]
 8013aa8:	2f02      	cmp	r7, #2
 8013aaa:	70ab      	strb	r3, [r5, #2]
 8013aac:	f105 0303 	add.w	r3, r5, #3
 8013ab0:	d048      	beq.n	8013b44 <ucdr_deserialize_int32_t+0x100>
 8013ab2:	7833      	ldrb	r3, [r6, #0]
 8013ab4:	70eb      	strb	r3, [r5, #3]
 8013ab6:	6923      	ldr	r3, [r4, #16]
 8013ab8:	2104      	movs	r1, #4
 8013aba:	68a2      	ldr	r2, [r4, #8]
 8013abc:	3304      	adds	r3, #4
 8013abe:	7da0      	ldrb	r0, [r4, #22]
 8013ac0:	444a      	add	r2, r9
 8013ac2:	7561      	strb	r1, [r4, #21]
 8013ac4:	1bdb      	subs	r3, r3, r7
 8013ac6:	f080 0001 	eor.w	r0, r0, #1
 8013aca:	60a2      	str	r2, [r4, #8]
 8013acc:	6123      	str	r3, [r4, #16]
 8013ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ad2:	2104      	movs	r1, #4
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f000 fb0f 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013ada:	b1b0      	cbz	r0, 8013b0a <ucdr_deserialize_int32_t+0xc6>
 8013adc:	7d23      	ldrb	r3, [r4, #20]
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	68a3      	ldr	r3, [r4, #8]
 8013ae2:	d017      	beq.n	8013b14 <ucdr_deserialize_int32_t+0xd0>
 8013ae4:	78db      	ldrb	r3, [r3, #3]
 8013ae6:	702b      	strb	r3, [r5, #0]
 8013ae8:	68a3      	ldr	r3, [r4, #8]
 8013aea:	789b      	ldrb	r3, [r3, #2]
 8013aec:	706b      	strb	r3, [r5, #1]
 8013aee:	68a3      	ldr	r3, [r4, #8]
 8013af0:	785b      	ldrb	r3, [r3, #1]
 8013af2:	70ab      	strb	r3, [r5, #2]
 8013af4:	68a3      	ldr	r3, [r4, #8]
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	70eb      	strb	r3, [r5, #3]
 8013afa:	2104      	movs	r1, #4
 8013afc:	68a2      	ldr	r2, [r4, #8]
 8013afe:	6923      	ldr	r3, [r4, #16]
 8013b00:	440a      	add	r2, r1
 8013b02:	7561      	strb	r1, [r4, #21]
 8013b04:	440b      	add	r3, r1
 8013b06:	60a2      	str	r2, [r4, #8]
 8013b08:	6123      	str	r3, [r4, #16]
 8013b0a:	7da0      	ldrb	r0, [r4, #22]
 8013b0c:	f080 0001 	eor.w	r0, r0, #1
 8013b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	602b      	str	r3, [r5, #0]
 8013b18:	e7ef      	b.n	8013afa <ucdr_deserialize_int32_t+0xb6>
 8013b1a:	68a2      	ldr	r2, [r4, #8]
 8013b1c:	6923      	ldr	r3, [r4, #16]
 8013b1e:	1bd2      	subs	r2, r2, r7
 8013b20:	7da0      	ldrb	r0, [r4, #22]
 8013b22:	1bdb      	subs	r3, r3, r7
 8013b24:	f884 8015 	strb.w	r8, [r4, #21]
 8013b28:	f080 0001 	eor.w	r0, r0, #1
 8013b2c:	60a2      	str	r2, [r4, #8]
 8013b2e:	6123      	str	r3, [r4, #16]
 8013b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b34:	68a3      	ldr	r3, [r4, #8]
 8013b36:	789b      	ldrb	r3, [r3, #2]
 8013b38:	706b      	strb	r3, [r5, #1]
 8013b3a:	1cab      	adds	r3, r5, #2
 8013b3c:	68a2      	ldr	r2, [r4, #8]
 8013b3e:	7852      	ldrb	r2, [r2, #1]
 8013b40:	f803 2b01 	strb.w	r2, [r3], #1
 8013b44:	68a2      	ldr	r2, [r4, #8]
 8013b46:	7812      	ldrb	r2, [r2, #0]
 8013b48:	701a      	strb	r2, [r3, #0]
 8013b4a:	e7b4      	b.n	8013ab6 <ucdr_deserialize_int32_t+0x72>
 8013b4c:	4631      	mov	r1, r6
 8013b4e:	463a      	mov	r2, r7
 8013b50:	4628      	mov	r0, r5
 8013b52:	f00e fcdc 	bl	802250e <memcpy>
 8013b56:	464a      	mov	r2, r9
 8013b58:	19e8      	adds	r0, r5, r7
 8013b5a:	68a1      	ldr	r1, [r4, #8]
 8013b5c:	f00e fcd7 	bl	802250e <memcpy>
 8013b60:	e7a9      	b.n	8013ab6 <ucdr_deserialize_int32_t+0x72>
 8013b62:	bf00      	nop

08013b64 <ucdr_serialize_float>:
 8013b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b68:	4604      	mov	r4, r0
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	2104      	movs	r1, #4
 8013b6e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013b72:	f000 fb15 	bl	80141a0 <ucdr_buffer_alignment>
 8013b76:	4601      	mov	r1, r0
 8013b78:	4620      	mov	r0, r4
 8013b7a:	7d67      	ldrb	r7, [r4, #21]
 8013b7c:	f000 fb58 	bl	8014230 <ucdr_advance_buffer>
 8013b80:	2104      	movs	r1, #4
 8013b82:	4620      	mov	r0, r4
 8013b84:	f000 faac 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	d139      	bne.n	8013c00 <ucdr_serialize_float+0x9c>
 8013b8c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013b90:	42ab      	cmp	r3, r5
 8013b92:	d930      	bls.n	8013bf6 <ucdr_serialize_float+0x92>
 8013b94:	1b5e      	subs	r6, r3, r5
 8013b96:	60a3      	str	r3, [r4, #8]
 8013b98:	6923      	ldr	r3, [r4, #16]
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	f1c6 0804 	rsb	r8, r6, #4
 8013ba0:	4433      	add	r3, r6
 8013ba2:	4641      	mov	r1, r8
 8013ba4:	6123      	str	r3, [r4, #16]
 8013ba6:	f000 faa7 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d04c      	beq.n	8013c48 <ucdr_serialize_float+0xe4>
 8013bae:	7d23      	ldrb	r3, [r4, #20]
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d063      	beq.n	8013c7c <ucdr_serialize_float+0x118>
 8013bb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013bb8:	702b      	strb	r3, [r5, #0]
 8013bba:	2e00      	cmp	r6, #0
 8013bbc:	d051      	beq.n	8013c62 <ucdr_serialize_float+0xfe>
 8013bbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013bc2:	2e01      	cmp	r6, #1
 8013bc4:	706b      	strb	r3, [r5, #1]
 8013bc6:	d050      	beq.n	8013c6a <ucdr_serialize_float+0x106>
 8013bc8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013bcc:	2e02      	cmp	r6, #2
 8013bce:	70ab      	strb	r3, [r5, #2]
 8013bd0:	d04f      	beq.n	8013c72 <ucdr_serialize_float+0x10e>
 8013bd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013bd6:	70eb      	strb	r3, [r5, #3]
 8013bd8:	6923      	ldr	r3, [r4, #16]
 8013bda:	2104      	movs	r1, #4
 8013bdc:	68a2      	ldr	r2, [r4, #8]
 8013bde:	3304      	adds	r3, #4
 8013be0:	7da0      	ldrb	r0, [r4, #22]
 8013be2:	4442      	add	r2, r8
 8013be4:	7561      	strb	r1, [r4, #21]
 8013be6:	1b9e      	subs	r6, r3, r6
 8013be8:	f080 0001 	eor.w	r0, r0, #1
 8013bec:	60a2      	str	r2, [r4, #8]
 8013bee:	6126      	str	r6, [r4, #16]
 8013bf0:	b002      	add	sp, #8
 8013bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf6:	2104      	movs	r1, #4
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	f000 fa7d 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013bfe:	b1d0      	cbz	r0, 8013c36 <ucdr_serialize_float+0xd2>
 8013c00:	7d23      	ldrb	r3, [r4, #20]
 8013c02:	2b01      	cmp	r3, #1
 8013c04:	68a3      	ldr	r3, [r4, #8]
 8013c06:	d01c      	beq.n	8013c42 <ucdr_serialize_float+0xde>
 8013c08:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013c0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c10:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013c14:	7018      	strb	r0, [r3, #0]
 8013c16:	68a3      	ldr	r3, [r4, #8]
 8013c18:	705a      	strb	r2, [r3, #1]
 8013c1a:	68a3      	ldr	r3, [r4, #8]
 8013c1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c20:	7099      	strb	r1, [r3, #2]
 8013c22:	68a3      	ldr	r3, [r4, #8]
 8013c24:	70da      	strb	r2, [r3, #3]
 8013c26:	2104      	movs	r1, #4
 8013c28:	68a2      	ldr	r2, [r4, #8]
 8013c2a:	6923      	ldr	r3, [r4, #16]
 8013c2c:	440a      	add	r2, r1
 8013c2e:	7561      	strb	r1, [r4, #21]
 8013c30:	440b      	add	r3, r1
 8013c32:	60a2      	str	r2, [r4, #8]
 8013c34:	6123      	str	r3, [r4, #16]
 8013c36:	7da0      	ldrb	r0, [r4, #22]
 8013c38:	f080 0001 	eor.w	r0, r0, #1
 8013c3c:	b002      	add	sp, #8
 8013c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c42:	9a01      	ldr	r2, [sp, #4]
 8013c44:	601a      	str	r2, [r3, #0]
 8013c46:	e7ee      	b.n	8013c26 <ucdr_serialize_float+0xc2>
 8013c48:	68a2      	ldr	r2, [r4, #8]
 8013c4a:	6923      	ldr	r3, [r4, #16]
 8013c4c:	7da0      	ldrb	r0, [r4, #22]
 8013c4e:	1b92      	subs	r2, r2, r6
 8013c50:	1b9b      	subs	r3, r3, r6
 8013c52:	7567      	strb	r7, [r4, #21]
 8013c54:	f080 0001 	eor.w	r0, r0, #1
 8013c58:	60a2      	str	r2, [r4, #8]
 8013c5a:	6123      	str	r3, [r4, #16]
 8013c5c:	b002      	add	sp, #8
 8013c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c62:	68a3      	ldr	r3, [r4, #8]
 8013c64:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013c68:	701a      	strb	r2, [r3, #0]
 8013c6a:	68a3      	ldr	r3, [r4, #8]
 8013c6c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013c70:	701a      	strb	r2, [r3, #0]
 8013c72:	68a3      	ldr	r3, [r4, #8]
 8013c74:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013c78:	701a      	strb	r2, [r3, #0]
 8013c7a:	e7ad      	b.n	8013bd8 <ucdr_serialize_float+0x74>
 8013c7c:	4628      	mov	r0, r5
 8013c7e:	ad01      	add	r5, sp, #4
 8013c80:	4632      	mov	r2, r6
 8013c82:	4629      	mov	r1, r5
 8013c84:	f00e fc43 	bl	802250e <memcpy>
 8013c88:	4642      	mov	r2, r8
 8013c8a:	19a9      	adds	r1, r5, r6
 8013c8c:	68a0      	ldr	r0, [r4, #8]
 8013c8e:	f00e fc3e 	bl	802250e <memcpy>
 8013c92:	e7a1      	b.n	8013bd8 <ucdr_serialize_float+0x74>

08013c94 <ucdr_deserialize_float>:
 8013c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c98:	4604      	mov	r4, r0
 8013c9a:	460d      	mov	r5, r1
 8013c9c:	2104      	movs	r1, #4
 8013c9e:	f000 fa7f 	bl	80141a0 <ucdr_buffer_alignment>
 8013ca2:	4601      	mov	r1, r0
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013caa:	f000 fac1 	bl	8014230 <ucdr_advance_buffer>
 8013cae:	2104      	movs	r1, #4
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	f000 fa15 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d138      	bne.n	8013d2c <ucdr_deserialize_float+0x98>
 8013cba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013cbe:	42b7      	cmp	r7, r6
 8013cc0:	d92f      	bls.n	8013d22 <ucdr_deserialize_float+0x8e>
 8013cc2:	6923      	ldr	r3, [r4, #16]
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	60a7      	str	r7, [r4, #8]
 8013cc8:	1bbf      	subs	r7, r7, r6
 8013cca:	443b      	add	r3, r7
 8013ccc:	f1c7 0904 	rsb	r9, r7, #4
 8013cd0:	6123      	str	r3, [r4, #16]
 8013cd2:	4649      	mov	r1, r9
 8013cd4:	f000 fa10 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d046      	beq.n	8013d6a <ucdr_deserialize_float+0xd6>
 8013cdc:	7d23      	ldrb	r3, [r4, #20]
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d05c      	beq.n	8013d9c <ucdr_deserialize_float+0x108>
 8013ce2:	78f3      	ldrb	r3, [r6, #3]
 8013ce4:	702b      	strb	r3, [r5, #0]
 8013ce6:	2f00      	cmp	r7, #0
 8013ce8:	d04c      	beq.n	8013d84 <ucdr_deserialize_float+0xf0>
 8013cea:	78b3      	ldrb	r3, [r6, #2]
 8013cec:	2f01      	cmp	r7, #1
 8013cee:	706b      	strb	r3, [r5, #1]
 8013cf0:	f105 0302 	add.w	r3, r5, #2
 8013cf4:	d04a      	beq.n	8013d8c <ucdr_deserialize_float+0xf8>
 8013cf6:	7873      	ldrb	r3, [r6, #1]
 8013cf8:	2f02      	cmp	r7, #2
 8013cfa:	70ab      	strb	r3, [r5, #2]
 8013cfc:	f105 0303 	add.w	r3, r5, #3
 8013d00:	d048      	beq.n	8013d94 <ucdr_deserialize_float+0x100>
 8013d02:	7833      	ldrb	r3, [r6, #0]
 8013d04:	70eb      	strb	r3, [r5, #3]
 8013d06:	6923      	ldr	r3, [r4, #16]
 8013d08:	2104      	movs	r1, #4
 8013d0a:	68a2      	ldr	r2, [r4, #8]
 8013d0c:	3304      	adds	r3, #4
 8013d0e:	7da0      	ldrb	r0, [r4, #22]
 8013d10:	444a      	add	r2, r9
 8013d12:	7561      	strb	r1, [r4, #21]
 8013d14:	1bdb      	subs	r3, r3, r7
 8013d16:	f080 0001 	eor.w	r0, r0, #1
 8013d1a:	60a2      	str	r2, [r4, #8]
 8013d1c:	6123      	str	r3, [r4, #16]
 8013d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d22:	2104      	movs	r1, #4
 8013d24:	4620      	mov	r0, r4
 8013d26:	f000 f9e7 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013d2a:	b1b0      	cbz	r0, 8013d5a <ucdr_deserialize_float+0xc6>
 8013d2c:	7d23      	ldrb	r3, [r4, #20]
 8013d2e:	2b01      	cmp	r3, #1
 8013d30:	68a3      	ldr	r3, [r4, #8]
 8013d32:	d017      	beq.n	8013d64 <ucdr_deserialize_float+0xd0>
 8013d34:	78db      	ldrb	r3, [r3, #3]
 8013d36:	702b      	strb	r3, [r5, #0]
 8013d38:	68a3      	ldr	r3, [r4, #8]
 8013d3a:	789b      	ldrb	r3, [r3, #2]
 8013d3c:	706b      	strb	r3, [r5, #1]
 8013d3e:	68a3      	ldr	r3, [r4, #8]
 8013d40:	785b      	ldrb	r3, [r3, #1]
 8013d42:	70ab      	strb	r3, [r5, #2]
 8013d44:	68a3      	ldr	r3, [r4, #8]
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	70eb      	strb	r3, [r5, #3]
 8013d4a:	2104      	movs	r1, #4
 8013d4c:	68a2      	ldr	r2, [r4, #8]
 8013d4e:	6923      	ldr	r3, [r4, #16]
 8013d50:	440a      	add	r2, r1
 8013d52:	7561      	strb	r1, [r4, #21]
 8013d54:	440b      	add	r3, r1
 8013d56:	60a2      	str	r2, [r4, #8]
 8013d58:	6123      	str	r3, [r4, #16]
 8013d5a:	7da0      	ldrb	r0, [r4, #22]
 8013d5c:	f080 0001 	eor.w	r0, r0, #1
 8013d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	602b      	str	r3, [r5, #0]
 8013d68:	e7ef      	b.n	8013d4a <ucdr_deserialize_float+0xb6>
 8013d6a:	68a2      	ldr	r2, [r4, #8]
 8013d6c:	6923      	ldr	r3, [r4, #16]
 8013d6e:	1bd2      	subs	r2, r2, r7
 8013d70:	7da0      	ldrb	r0, [r4, #22]
 8013d72:	1bdb      	subs	r3, r3, r7
 8013d74:	f884 8015 	strb.w	r8, [r4, #21]
 8013d78:	f080 0001 	eor.w	r0, r0, #1
 8013d7c:	60a2      	str	r2, [r4, #8]
 8013d7e:	6123      	str	r3, [r4, #16]
 8013d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d84:	68a3      	ldr	r3, [r4, #8]
 8013d86:	789b      	ldrb	r3, [r3, #2]
 8013d88:	706b      	strb	r3, [r5, #1]
 8013d8a:	1cab      	adds	r3, r5, #2
 8013d8c:	68a2      	ldr	r2, [r4, #8]
 8013d8e:	7852      	ldrb	r2, [r2, #1]
 8013d90:	f803 2b01 	strb.w	r2, [r3], #1
 8013d94:	68a2      	ldr	r2, [r4, #8]
 8013d96:	7812      	ldrb	r2, [r2, #0]
 8013d98:	701a      	strb	r2, [r3, #0]
 8013d9a:	e7b4      	b.n	8013d06 <ucdr_deserialize_float+0x72>
 8013d9c:	4631      	mov	r1, r6
 8013d9e:	463a      	mov	r2, r7
 8013da0:	4628      	mov	r0, r5
 8013da2:	f00e fbb4 	bl	802250e <memcpy>
 8013da6:	464a      	mov	r2, r9
 8013da8:	19e8      	adds	r0, r5, r7
 8013daa:	68a1      	ldr	r1, [r4, #8]
 8013dac:	f00e fbaf 	bl	802250e <memcpy>
 8013db0:	e7a9      	b.n	8013d06 <ucdr_deserialize_float+0x72>
 8013db2:	bf00      	nop

08013db4 <ucdr_serialize_double>:
 8013db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db8:	4604      	mov	r4, r0
 8013dba:	b082      	sub	sp, #8
 8013dbc:	2108      	movs	r1, #8
 8013dbe:	ed8d 0b00 	vstr	d0, [sp]
 8013dc2:	f000 f9ed 	bl	80141a0 <ucdr_buffer_alignment>
 8013dc6:	4601      	mov	r1, r0
 8013dc8:	4620      	mov	r0, r4
 8013dca:	7d67      	ldrb	r7, [r4, #21]
 8013dcc:	f000 fa30 	bl	8014230 <ucdr_advance_buffer>
 8013dd0:	2108      	movs	r1, #8
 8013dd2:	4620      	mov	r0, r4
 8013dd4:	f000 f984 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	d14e      	bne.n	8013e7a <ucdr_serialize_double+0xc6>
 8013ddc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013de0:	42ab      	cmp	r3, r5
 8013de2:	d945      	bls.n	8013e70 <ucdr_serialize_double+0xbc>
 8013de4:	1b5e      	subs	r6, r3, r5
 8013de6:	60a3      	str	r3, [r4, #8]
 8013de8:	6923      	ldr	r3, [r4, #16]
 8013dea:	4620      	mov	r0, r4
 8013dec:	f1c6 0808 	rsb	r8, r6, #8
 8013df0:	4433      	add	r3, r6
 8013df2:	4641      	mov	r1, r8
 8013df4:	6123      	str	r3, [r4, #16]
 8013df6:	f000 f97f 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	d074      	beq.n	8013ee8 <ucdr_serialize_double+0x134>
 8013dfe:	7d23      	ldrb	r3, [r4, #20]
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	f000 809b 	beq.w	8013f3c <ucdr_serialize_double+0x188>
 8013e06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e0a:	702b      	strb	r3, [r5, #0]
 8013e0c:	2e00      	cmp	r6, #0
 8013e0e:	d078      	beq.n	8013f02 <ucdr_serialize_double+0x14e>
 8013e10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013e14:	2e01      	cmp	r6, #1
 8013e16:	706b      	strb	r3, [r5, #1]
 8013e18:	d077      	beq.n	8013f0a <ucdr_serialize_double+0x156>
 8013e1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013e1e:	2e02      	cmp	r6, #2
 8013e20:	70ab      	strb	r3, [r5, #2]
 8013e22:	d076      	beq.n	8013f12 <ucdr_serialize_double+0x15e>
 8013e24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013e28:	2e03      	cmp	r6, #3
 8013e2a:	70eb      	strb	r3, [r5, #3]
 8013e2c:	d075      	beq.n	8013f1a <ucdr_serialize_double+0x166>
 8013e2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013e32:	2e04      	cmp	r6, #4
 8013e34:	712b      	strb	r3, [r5, #4]
 8013e36:	d074      	beq.n	8013f22 <ucdr_serialize_double+0x16e>
 8013e38:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013e3c:	2e05      	cmp	r6, #5
 8013e3e:	716b      	strb	r3, [r5, #5]
 8013e40:	d073      	beq.n	8013f2a <ucdr_serialize_double+0x176>
 8013e42:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013e46:	2e06      	cmp	r6, #6
 8013e48:	71ab      	strb	r3, [r5, #6]
 8013e4a:	d072      	beq.n	8013f32 <ucdr_serialize_double+0x17e>
 8013e4c:	f89d 3000 	ldrb.w	r3, [sp]
 8013e50:	71eb      	strb	r3, [r5, #7]
 8013e52:	6923      	ldr	r3, [r4, #16]
 8013e54:	2108      	movs	r1, #8
 8013e56:	68a2      	ldr	r2, [r4, #8]
 8013e58:	3308      	adds	r3, #8
 8013e5a:	7da0      	ldrb	r0, [r4, #22]
 8013e5c:	4442      	add	r2, r8
 8013e5e:	7561      	strb	r1, [r4, #21]
 8013e60:	1b9e      	subs	r6, r3, r6
 8013e62:	f080 0001 	eor.w	r0, r0, #1
 8013e66:	60a2      	str	r2, [r4, #8]
 8013e68:	6126      	str	r6, [r4, #16]
 8013e6a:	b002      	add	sp, #8
 8013e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e70:	2108      	movs	r1, #8
 8013e72:	4620      	mov	r0, r4
 8013e74:	f000 f940 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013e78:	b350      	cbz	r0, 8013ed0 <ucdr_serialize_double+0x11c>
 8013e7a:	7d23      	ldrb	r3, [r4, #20]
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d02d      	beq.n	8013edc <ucdr_serialize_double+0x128>
 8013e80:	68a3      	ldr	r3, [r4, #8]
 8013e82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013e86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e8a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013e8e:	7018      	strb	r0, [r3, #0]
 8013e90:	68a3      	ldr	r3, [r4, #8]
 8013e92:	705a      	strb	r2, [r3, #1]
 8013e94:	68a3      	ldr	r3, [r4, #8]
 8013e96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013e9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013e9e:	7099      	strb	r1, [r3, #2]
 8013ea0:	68a3      	ldr	r3, [r4, #8]
 8013ea2:	70da      	strb	r2, [r3, #3]
 8013ea4:	68a3      	ldr	r3, [r4, #8]
 8013ea6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013eaa:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013eae:	7118      	strb	r0, [r3, #4]
 8013eb0:	68a3      	ldr	r3, [r4, #8]
 8013eb2:	715a      	strb	r2, [r3, #5]
 8013eb4:	68a3      	ldr	r3, [r4, #8]
 8013eb6:	f89d 2000 	ldrb.w	r2, [sp]
 8013eba:	7199      	strb	r1, [r3, #6]
 8013ebc:	68a3      	ldr	r3, [r4, #8]
 8013ebe:	71da      	strb	r2, [r3, #7]
 8013ec0:	2108      	movs	r1, #8
 8013ec2:	68a2      	ldr	r2, [r4, #8]
 8013ec4:	6923      	ldr	r3, [r4, #16]
 8013ec6:	440a      	add	r2, r1
 8013ec8:	7561      	strb	r1, [r4, #21]
 8013eca:	440b      	add	r3, r1
 8013ecc:	60a2      	str	r2, [r4, #8]
 8013ece:	6123      	str	r3, [r4, #16]
 8013ed0:	7da0      	ldrb	r0, [r4, #22]
 8013ed2:	f080 0001 	eor.w	r0, r0, #1
 8013ed6:	b002      	add	sp, #8
 8013ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013edc:	466b      	mov	r3, sp
 8013ede:	68a2      	ldr	r2, [r4, #8]
 8013ee0:	cb03      	ldmia	r3!, {r0, r1}
 8013ee2:	6010      	str	r0, [r2, #0]
 8013ee4:	6051      	str	r1, [r2, #4]
 8013ee6:	e7eb      	b.n	8013ec0 <ucdr_serialize_double+0x10c>
 8013ee8:	68a2      	ldr	r2, [r4, #8]
 8013eea:	6923      	ldr	r3, [r4, #16]
 8013eec:	7da0      	ldrb	r0, [r4, #22]
 8013eee:	1b92      	subs	r2, r2, r6
 8013ef0:	1b9b      	subs	r3, r3, r6
 8013ef2:	7567      	strb	r7, [r4, #21]
 8013ef4:	f080 0001 	eor.w	r0, r0, #1
 8013ef8:	60a2      	str	r2, [r4, #8]
 8013efa:	6123      	str	r3, [r4, #16]
 8013efc:	b002      	add	sp, #8
 8013efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f02:	68a3      	ldr	r3, [r4, #8]
 8013f04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f08:	701a      	strb	r2, [r3, #0]
 8013f0a:	68a3      	ldr	r3, [r4, #8]
 8013f0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f10:	701a      	strb	r2, [r3, #0]
 8013f12:	68a3      	ldr	r3, [r4, #8]
 8013f14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f18:	701a      	strb	r2, [r3, #0]
 8013f1a:	68a3      	ldr	r3, [r4, #8]
 8013f1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013f20:	701a      	strb	r2, [r3, #0]
 8013f22:	68a3      	ldr	r3, [r4, #8]
 8013f24:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013f28:	701a      	strb	r2, [r3, #0]
 8013f2a:	68a3      	ldr	r3, [r4, #8]
 8013f2c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013f30:	701a      	strb	r2, [r3, #0]
 8013f32:	68a3      	ldr	r3, [r4, #8]
 8013f34:	f89d 2000 	ldrb.w	r2, [sp]
 8013f38:	701a      	strb	r2, [r3, #0]
 8013f3a:	e78a      	b.n	8013e52 <ucdr_serialize_double+0x9e>
 8013f3c:	4628      	mov	r0, r5
 8013f3e:	466d      	mov	r5, sp
 8013f40:	4632      	mov	r2, r6
 8013f42:	4629      	mov	r1, r5
 8013f44:	f00e fae3 	bl	802250e <memcpy>
 8013f48:	4642      	mov	r2, r8
 8013f4a:	19a9      	adds	r1, r5, r6
 8013f4c:	68a0      	ldr	r0, [r4, #8]
 8013f4e:	f00e fade 	bl	802250e <memcpy>
 8013f52:	e77e      	b.n	8013e52 <ucdr_serialize_double+0x9e>

08013f54 <ucdr_deserialize_double>:
 8013f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f58:	4604      	mov	r4, r0
 8013f5a:	460d      	mov	r5, r1
 8013f5c:	2108      	movs	r1, #8
 8013f5e:	f000 f91f 	bl	80141a0 <ucdr_buffer_alignment>
 8013f62:	4601      	mov	r1, r0
 8013f64:	4620      	mov	r0, r4
 8013f66:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f6a:	f000 f961 	bl	8014230 <ucdr_advance_buffer>
 8013f6e:	2108      	movs	r1, #8
 8013f70:	4620      	mov	r0, r4
 8013f72:	f000 f8b5 	bl	80140e0 <ucdr_check_buffer_available_for>
 8013f76:	2800      	cmp	r0, #0
 8013f78:	d151      	bne.n	801401e <ucdr_deserialize_double+0xca>
 8013f7a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013f7e:	42be      	cmp	r6, r7
 8013f80:	d948      	bls.n	8014014 <ucdr_deserialize_double+0xc0>
 8013f82:	6923      	ldr	r3, [r4, #16]
 8013f84:	4620      	mov	r0, r4
 8013f86:	60a6      	str	r6, [r4, #8]
 8013f88:	1bf6      	subs	r6, r6, r7
 8013f8a:	4433      	add	r3, r6
 8013f8c:	f1c6 0908 	rsb	r9, r6, #8
 8013f90:	6123      	str	r3, [r4, #16]
 8013f92:	4649      	mov	r1, r9
 8013f94:	f000 f8b0 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	d06d      	beq.n	8014078 <ucdr_deserialize_double+0x124>
 8013f9c:	7d23      	ldrb	r3, [r4, #20]
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	f000 8093 	beq.w	80140ca <ucdr_deserialize_double+0x176>
 8013fa4:	79fb      	ldrb	r3, [r7, #7]
 8013fa6:	702b      	strb	r3, [r5, #0]
 8013fa8:	2e00      	cmp	r6, #0
 8013faa:	d072      	beq.n	8014092 <ucdr_deserialize_double+0x13e>
 8013fac:	79bb      	ldrb	r3, [r7, #6]
 8013fae:	2e01      	cmp	r6, #1
 8013fb0:	706b      	strb	r3, [r5, #1]
 8013fb2:	f105 0302 	add.w	r3, r5, #2
 8013fb6:	d070      	beq.n	801409a <ucdr_deserialize_double+0x146>
 8013fb8:	797b      	ldrb	r3, [r7, #5]
 8013fba:	2e02      	cmp	r6, #2
 8013fbc:	70ab      	strb	r3, [r5, #2]
 8013fbe:	f105 0303 	add.w	r3, r5, #3
 8013fc2:	d06e      	beq.n	80140a2 <ucdr_deserialize_double+0x14e>
 8013fc4:	793b      	ldrb	r3, [r7, #4]
 8013fc6:	2e03      	cmp	r6, #3
 8013fc8:	70eb      	strb	r3, [r5, #3]
 8013fca:	f105 0304 	add.w	r3, r5, #4
 8013fce:	d06c      	beq.n	80140aa <ucdr_deserialize_double+0x156>
 8013fd0:	78fb      	ldrb	r3, [r7, #3]
 8013fd2:	2e04      	cmp	r6, #4
 8013fd4:	712b      	strb	r3, [r5, #4]
 8013fd6:	f105 0305 	add.w	r3, r5, #5
 8013fda:	d06a      	beq.n	80140b2 <ucdr_deserialize_double+0x15e>
 8013fdc:	78bb      	ldrb	r3, [r7, #2]
 8013fde:	2e05      	cmp	r6, #5
 8013fe0:	716b      	strb	r3, [r5, #5]
 8013fe2:	f105 0306 	add.w	r3, r5, #6
 8013fe6:	d068      	beq.n	80140ba <ucdr_deserialize_double+0x166>
 8013fe8:	787b      	ldrb	r3, [r7, #1]
 8013fea:	2e06      	cmp	r6, #6
 8013fec:	71ab      	strb	r3, [r5, #6]
 8013fee:	f105 0307 	add.w	r3, r5, #7
 8013ff2:	d066      	beq.n	80140c2 <ucdr_deserialize_double+0x16e>
 8013ff4:	783b      	ldrb	r3, [r7, #0]
 8013ff6:	71eb      	strb	r3, [r5, #7]
 8013ff8:	6923      	ldr	r3, [r4, #16]
 8013ffa:	2108      	movs	r1, #8
 8013ffc:	68a2      	ldr	r2, [r4, #8]
 8013ffe:	3308      	adds	r3, #8
 8014000:	7da0      	ldrb	r0, [r4, #22]
 8014002:	444a      	add	r2, r9
 8014004:	7561      	strb	r1, [r4, #21]
 8014006:	1b9e      	subs	r6, r3, r6
 8014008:	f080 0001 	eor.w	r0, r0, #1
 801400c:	60a2      	str	r2, [r4, #8]
 801400e:	6126      	str	r6, [r4, #16]
 8014010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014014:	2108      	movs	r1, #8
 8014016:	4620      	mov	r0, r4
 8014018:	f000 f86e 	bl	80140f8 <ucdr_check_final_buffer_behavior>
 801401c:	b310      	cbz	r0, 8014064 <ucdr_deserialize_double+0x110>
 801401e:	7d23      	ldrb	r3, [r4, #20]
 8014020:	2b01      	cmp	r3, #1
 8014022:	68a3      	ldr	r3, [r4, #8]
 8014024:	d023      	beq.n	801406e <ucdr_deserialize_double+0x11a>
 8014026:	79db      	ldrb	r3, [r3, #7]
 8014028:	702b      	strb	r3, [r5, #0]
 801402a:	68a3      	ldr	r3, [r4, #8]
 801402c:	799b      	ldrb	r3, [r3, #6]
 801402e:	706b      	strb	r3, [r5, #1]
 8014030:	68a3      	ldr	r3, [r4, #8]
 8014032:	795b      	ldrb	r3, [r3, #5]
 8014034:	70ab      	strb	r3, [r5, #2]
 8014036:	68a3      	ldr	r3, [r4, #8]
 8014038:	791b      	ldrb	r3, [r3, #4]
 801403a:	70eb      	strb	r3, [r5, #3]
 801403c:	68a3      	ldr	r3, [r4, #8]
 801403e:	78db      	ldrb	r3, [r3, #3]
 8014040:	712b      	strb	r3, [r5, #4]
 8014042:	68a3      	ldr	r3, [r4, #8]
 8014044:	789b      	ldrb	r3, [r3, #2]
 8014046:	716b      	strb	r3, [r5, #5]
 8014048:	68a3      	ldr	r3, [r4, #8]
 801404a:	785b      	ldrb	r3, [r3, #1]
 801404c:	71ab      	strb	r3, [r5, #6]
 801404e:	68a3      	ldr	r3, [r4, #8]
 8014050:	781b      	ldrb	r3, [r3, #0]
 8014052:	71eb      	strb	r3, [r5, #7]
 8014054:	2108      	movs	r1, #8
 8014056:	68a2      	ldr	r2, [r4, #8]
 8014058:	6923      	ldr	r3, [r4, #16]
 801405a:	440a      	add	r2, r1
 801405c:	7561      	strb	r1, [r4, #21]
 801405e:	440b      	add	r3, r1
 8014060:	60a2      	str	r2, [r4, #8]
 8014062:	6123      	str	r3, [r4, #16]
 8014064:	7da0      	ldrb	r0, [r4, #22]
 8014066:	f080 0001 	eor.w	r0, r0, #1
 801406a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	602a      	str	r2, [r5, #0]
 8014074:	606b      	str	r3, [r5, #4]
 8014076:	e7ed      	b.n	8014054 <ucdr_deserialize_double+0x100>
 8014078:	68a2      	ldr	r2, [r4, #8]
 801407a:	6923      	ldr	r3, [r4, #16]
 801407c:	1b92      	subs	r2, r2, r6
 801407e:	7da0      	ldrb	r0, [r4, #22]
 8014080:	1b9b      	subs	r3, r3, r6
 8014082:	f884 8015 	strb.w	r8, [r4, #21]
 8014086:	f080 0001 	eor.w	r0, r0, #1
 801408a:	60a2      	str	r2, [r4, #8]
 801408c:	6123      	str	r3, [r4, #16]
 801408e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014092:	68a3      	ldr	r3, [r4, #8]
 8014094:	799b      	ldrb	r3, [r3, #6]
 8014096:	706b      	strb	r3, [r5, #1]
 8014098:	1cab      	adds	r3, r5, #2
 801409a:	68a2      	ldr	r2, [r4, #8]
 801409c:	7952      	ldrb	r2, [r2, #5]
 801409e:	f803 2b01 	strb.w	r2, [r3], #1
 80140a2:	68a2      	ldr	r2, [r4, #8]
 80140a4:	7912      	ldrb	r2, [r2, #4]
 80140a6:	f803 2b01 	strb.w	r2, [r3], #1
 80140aa:	68a2      	ldr	r2, [r4, #8]
 80140ac:	78d2      	ldrb	r2, [r2, #3]
 80140ae:	f803 2b01 	strb.w	r2, [r3], #1
 80140b2:	68a2      	ldr	r2, [r4, #8]
 80140b4:	7892      	ldrb	r2, [r2, #2]
 80140b6:	f803 2b01 	strb.w	r2, [r3], #1
 80140ba:	68a2      	ldr	r2, [r4, #8]
 80140bc:	7852      	ldrb	r2, [r2, #1]
 80140be:	f803 2b01 	strb.w	r2, [r3], #1
 80140c2:	68a2      	ldr	r2, [r4, #8]
 80140c4:	7812      	ldrb	r2, [r2, #0]
 80140c6:	701a      	strb	r2, [r3, #0]
 80140c8:	e796      	b.n	8013ff8 <ucdr_deserialize_double+0xa4>
 80140ca:	4639      	mov	r1, r7
 80140cc:	4632      	mov	r2, r6
 80140ce:	4628      	mov	r0, r5
 80140d0:	f00e fa1d 	bl	802250e <memcpy>
 80140d4:	464a      	mov	r2, r9
 80140d6:	19a8      	adds	r0, r5, r6
 80140d8:	68a1      	ldr	r1, [r4, #8]
 80140da:	f00e fa18 	bl	802250e <memcpy>
 80140de:	e78b      	b.n	8013ff8 <ucdr_deserialize_double+0xa4>

080140e0 <ucdr_check_buffer_available_for>:
 80140e0:	7d83      	ldrb	r3, [r0, #22]
 80140e2:	b93b      	cbnz	r3, 80140f4 <ucdr_check_buffer_available_for+0x14>
 80140e4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80140e8:	4419      	add	r1, r3
 80140ea:	4288      	cmp	r0, r1
 80140ec:	bf34      	ite	cc
 80140ee:	2000      	movcc	r0, #0
 80140f0:	2001      	movcs	r0, #1
 80140f2:	4770      	bx	lr
 80140f4:	2000      	movs	r0, #0
 80140f6:	4770      	bx	lr

080140f8 <ucdr_check_final_buffer_behavior>:
 80140f8:	7d83      	ldrb	r3, [r0, #22]
 80140fa:	b943      	cbnz	r3, 801410e <ucdr_check_final_buffer_behavior+0x16>
 80140fc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8014100:	b510      	push	{r4, lr}
 8014102:	4291      	cmp	r1, r2
 8014104:	4604      	mov	r4, r0
 8014106:	d205      	bcs.n	8014114 <ucdr_check_final_buffer_behavior+0x1c>
 8014108:	2301      	movs	r3, #1
 801410a:	4618      	mov	r0, r3
 801410c:	bd10      	pop	{r4, pc}
 801410e:	2300      	movs	r3, #0
 8014110:	4618      	mov	r0, r3
 8014112:	4770      	bx	lr
 8014114:	6982      	ldr	r2, [r0, #24]
 8014116:	b13a      	cbz	r2, 8014128 <ucdr_check_final_buffer_behavior+0x30>
 8014118:	69c1      	ldr	r1, [r0, #28]
 801411a:	4790      	blx	r2
 801411c:	f080 0301 	eor.w	r3, r0, #1
 8014120:	75a0      	strb	r0, [r4, #22]
 8014122:	b2db      	uxtb	r3, r3
 8014124:	4618      	mov	r0, r3
 8014126:	bd10      	pop	{r4, pc}
 8014128:	2001      	movs	r0, #1
 801412a:	75a0      	strb	r0, [r4, #22]
 801412c:	e7fa      	b.n	8014124 <ucdr_check_final_buffer_behavior+0x2c>
 801412e:	bf00      	nop

08014130 <ucdr_set_on_full_buffer_callback>:
 8014130:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8014134:	4770      	bx	lr
 8014136:	bf00      	nop

08014138 <ucdr_init_buffer_origin_offset_endian>:
 8014138:	b410      	push	{r4}
 801413a:	9c01      	ldr	r4, [sp, #4]
 801413c:	440a      	add	r2, r1
 801413e:	6001      	str	r1, [r0, #0]
 8014140:	6042      	str	r2, [r0, #4]
 8014142:	190a      	adds	r2, r1, r4
 8014144:	441c      	add	r4, r3
 8014146:	6082      	str	r2, [r0, #8]
 8014148:	2200      	movs	r2, #0
 801414a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801414e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014152:	7542      	strb	r2, [r0, #21]
 8014154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014158:	7582      	strb	r2, [r0, #22]
 801415a:	7503      	strb	r3, [r0, #20]
 801415c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014160:	4770      	bx	lr
 8014162:	bf00      	nop

08014164 <ucdr_init_buffer_origin_offset>:
 8014164:	b510      	push	{r4, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	9c04      	ldr	r4, [sp, #16]
 801416a:	9400      	str	r4, [sp, #0]
 801416c:	2401      	movs	r4, #1
 801416e:	9401      	str	r4, [sp, #4]
 8014170:	f7ff ffe2 	bl	8014138 <ucdr_init_buffer_origin_offset_endian>
 8014174:	b002      	add	sp, #8
 8014176:	bd10      	pop	{r4, pc}

08014178 <ucdr_init_buffer_origin>:
 8014178:	b510      	push	{r4, lr}
 801417a:	2400      	movs	r4, #0
 801417c:	b082      	sub	sp, #8
 801417e:	9400      	str	r4, [sp, #0]
 8014180:	f7ff fff0 	bl	8014164 <ucdr_init_buffer_origin_offset>
 8014184:	b002      	add	sp, #8
 8014186:	bd10      	pop	{r4, pc}

08014188 <ucdr_init_buffer>:
 8014188:	2300      	movs	r3, #0
 801418a:	f7ff bff5 	b.w	8014178 <ucdr_init_buffer_origin>
 801418e:	bf00      	nop

08014190 <ucdr_alignment>:
 8014190:	fbb0 f2f1 	udiv	r2, r0, r1
 8014194:	fb02 0011 	mls	r0, r2, r1, r0
 8014198:	1e4b      	subs	r3, r1, #1
 801419a:	1a08      	subs	r0, r1, r0
 801419c:	4018      	ands	r0, r3
 801419e:	4770      	bx	lr

080141a0 <ucdr_buffer_alignment>:
 80141a0:	7d43      	ldrb	r3, [r0, #21]
 80141a2:	428b      	cmp	r3, r1
 80141a4:	d209      	bcs.n	80141ba <ucdr_buffer_alignment+0x1a>
 80141a6:	6903      	ldr	r3, [r0, #16]
 80141a8:	1e4a      	subs	r2, r1, #1
 80141aa:	fbb3 f0f1 	udiv	r0, r3, r1
 80141ae:	fb01 3010 	mls	r0, r1, r0, r3
 80141b2:	1a09      	subs	r1, r1, r0
 80141b4:	ea01 0002 	and.w	r0, r1, r2
 80141b8:	4770      	bx	lr
 80141ba:	2000      	movs	r0, #0
 80141bc:	4770      	bx	lr
 80141be:	bf00      	nop

080141c0 <ucdr_align_to>:
 80141c0:	b538      	push	{r3, r4, r5, lr}
 80141c2:	4604      	mov	r4, r0
 80141c4:	460d      	mov	r5, r1
 80141c6:	f7ff ffeb 	bl	80141a0 <ucdr_buffer_alignment>
 80141ca:	68a3      	ldr	r3, [r4, #8]
 80141cc:	7565      	strb	r5, [r4, #21]
 80141ce:	181a      	adds	r2, r3, r0
 80141d0:	6923      	ldr	r3, [r4, #16]
 80141d2:	4418      	add	r0, r3
 80141d4:	6863      	ldr	r3, [r4, #4]
 80141d6:	4293      	cmp	r3, r2
 80141d8:	6120      	str	r0, [r4, #16]
 80141da:	bf28      	it	cs
 80141dc:	4613      	movcs	r3, r2
 80141de:	60a3      	str	r3, [r4, #8]
 80141e0:	bd38      	pop	{r3, r4, r5, pc}
 80141e2:	bf00      	nop

080141e4 <ucdr_buffer_length>:
 80141e4:	6882      	ldr	r2, [r0, #8]
 80141e6:	6800      	ldr	r0, [r0, #0]
 80141e8:	1a10      	subs	r0, r2, r0
 80141ea:	4770      	bx	lr

080141ec <ucdr_buffer_remaining>:
 80141ec:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80141f0:	1a10      	subs	r0, r2, r0
 80141f2:	4770      	bx	lr

080141f4 <ucdr_check_final_buffer_behavior_array>:
 80141f4:	b538      	push	{r3, r4, r5, lr}
 80141f6:	7d83      	ldrb	r3, [r0, #22]
 80141f8:	b9a3      	cbnz	r3, 8014224 <ucdr_check_final_buffer_behavior_array+0x30>
 80141fa:	4604      	mov	r4, r0
 80141fc:	460d      	mov	r5, r1
 80141fe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014202:	429a      	cmp	r2, r3
 8014204:	d300      	bcc.n	8014208 <ucdr_check_final_buffer_behavior_array+0x14>
 8014206:	b931      	cbnz	r1, 8014216 <ucdr_check_final_buffer_behavior_array+0x22>
 8014208:	4620      	mov	r0, r4
 801420a:	f7ff ffef 	bl	80141ec <ucdr_buffer_remaining>
 801420e:	42a8      	cmp	r0, r5
 8014210:	bf28      	it	cs
 8014212:	4628      	movcs	r0, r5
 8014214:	bd38      	pop	{r3, r4, r5, pc}
 8014216:	6983      	ldr	r3, [r0, #24]
 8014218:	b133      	cbz	r3, 8014228 <ucdr_check_final_buffer_behavior_array+0x34>
 801421a:	69c1      	ldr	r1, [r0, #28]
 801421c:	4798      	blx	r3
 801421e:	75a0      	strb	r0, [r4, #22]
 8014220:	2800      	cmp	r0, #0
 8014222:	d0f1      	beq.n	8014208 <ucdr_check_final_buffer_behavior_array+0x14>
 8014224:	2000      	movs	r0, #0
 8014226:	bd38      	pop	{r3, r4, r5, pc}
 8014228:	2301      	movs	r3, #1
 801422a:	7583      	strb	r3, [r0, #22]
 801422c:	e7fa      	b.n	8014224 <ucdr_check_final_buffer_behavior_array+0x30>
 801422e:	bf00      	nop

08014230 <ucdr_advance_buffer>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	4604      	mov	r4, r0
 8014234:	460d      	mov	r5, r1
 8014236:	f7ff ff53 	bl	80140e0 <ucdr_check_buffer_available_for>
 801423a:	b178      	cbz	r0, 801425c <ucdr_advance_buffer+0x2c>
 801423c:	6923      	ldr	r3, [r4, #16]
 801423e:	68a2      	ldr	r2, [r4, #8]
 8014240:	442b      	add	r3, r5
 8014242:	442a      	add	r2, r5
 8014244:	6123      	str	r3, [r4, #16]
 8014246:	2301      	movs	r3, #1
 8014248:	60a2      	str	r2, [r4, #8]
 801424a:	7563      	strb	r3, [r4, #21]
 801424c:	bd38      	pop	{r3, r4, r5, pc}
 801424e:	68a2      	ldr	r2, [r4, #8]
 8014250:	1a2d      	subs	r5, r5, r0
 8014252:	6923      	ldr	r3, [r4, #16]
 8014254:	4402      	add	r2, r0
 8014256:	4418      	add	r0, r3
 8014258:	60a2      	str	r2, [r4, #8]
 801425a:	6120      	str	r0, [r4, #16]
 801425c:	4629      	mov	r1, r5
 801425e:	2201      	movs	r2, #1
 8014260:	4620      	mov	r0, r4
 8014262:	f7ff ffc7 	bl	80141f4 <ucdr_check_final_buffer_behavior_array>
 8014266:	2800      	cmp	r0, #0
 8014268:	d1f1      	bne.n	801424e <ucdr_advance_buffer+0x1e>
 801426a:	2301      	movs	r3, #1
 801426c:	7563      	strb	r3, [r4, #21]
 801426e:	bd38      	pop	{r3, r4, r5, pc}

08014270 <rcl_get_zero_initialized_publisher>:
 8014270:	4b01      	ldr	r3, [pc, #4]	@ (8014278 <rcl_get_zero_initialized_publisher+0x8>)
 8014272:	6818      	ldr	r0, [r3, #0]
 8014274:	4770      	bx	lr
 8014276:	bf00      	nop
 8014278:	080248c8 	.word	0x080248c8

0801427c <rcl_publisher_init>:
 801427c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014280:	b088      	sub	sp, #32
 8014282:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014284:	2e00      	cmp	r6, #0
 8014286:	d06b      	beq.n	8014360 <rcl_publisher_init+0xe4>
 8014288:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 801428c:	4605      	mov	r5, r0
 801428e:	460f      	mov	r7, r1
 8014290:	4690      	mov	r8, r2
 8014292:	4650      	mov	r0, sl
 8014294:	4699      	mov	r9, r3
 8014296:	f001 f917 	bl	80154c8 <rcutils_allocator_is_valid>
 801429a:	f080 0401 	eor.w	r4, r0, #1
 801429e:	b2e4      	uxtb	r4, r4
 80142a0:	2c00      	cmp	r4, #0
 80142a2:	d15d      	bne.n	8014360 <rcl_publisher_init+0xe4>
 80142a4:	2d00      	cmp	r5, #0
 80142a6:	d05b      	beq.n	8014360 <rcl_publisher_init+0xe4>
 80142a8:	682b      	ldr	r3, [r5, #0]
 80142aa:	b123      	cbz	r3, 80142b6 <rcl_publisher_init+0x3a>
 80142ac:	2464      	movs	r4, #100	@ 0x64
 80142ae:	4620      	mov	r0, r4
 80142b0:	b008      	add	sp, #32
 80142b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142b6:	4638      	mov	r0, r7
 80142b8:	f007 f812 	bl	801b2e0 <rcl_node_is_valid>
 80142bc:	2800      	cmp	r0, #0
 80142be:	d054      	beq.n	801436a <rcl_publisher_init+0xee>
 80142c0:	f1b8 0f00 	cmp.w	r8, #0
 80142c4:	d04c      	beq.n	8014360 <rcl_publisher_init+0xe4>
 80142c6:	fab9 f389 	clz	r3, r9
 80142ca:	095b      	lsrs	r3, r3, #5
 80142cc:	f1b9 0f00 	cmp.w	r9, #0
 80142d0:	d046      	beq.n	8014360 <rcl_publisher_init+0xe4>
 80142d2:	aa07      	add	r2, sp, #28
 80142d4:	9307      	str	r3, [sp, #28]
 80142d6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80142da:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80142de:	9205      	str	r2, [sp, #20]
 80142e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80142e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80142e8:	4649      	mov	r1, r9
 80142ea:	4638      	mov	r0, r7
 80142ec:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80142f0:	f007 f84e 	bl	801b390 <rcl_node_resolve_name>
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d14f      	bne.n	8014398 <rcl_publisher_init+0x11c>
 80142f8:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80142fa:	20c8      	movs	r0, #200	@ 0xc8
 80142fc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80142fe:	4798      	blx	r3
 8014300:	6028      	str	r0, [r5, #0]
 8014302:	2800      	cmp	r0, #0
 8014304:	d050      	beq.n	80143a8 <rcl_publisher_init+0x12c>
 8014306:	4638      	mov	r0, r7
 8014308:	f007 f80c 	bl	801b324 <rcl_node_get_rmw_handle>
 801430c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8014310:	4641      	mov	r1, r8
 8014312:	9a07      	ldr	r2, [sp, #28]
 8014314:	9300      	str	r3, [sp, #0]
 8014316:	4633      	mov	r3, r6
 8014318:	682c      	ldr	r4, [r5, #0]
 801431a:	f001 fa23 	bl	8015764 <rmw_create_publisher>
 801431e:	682b      	ldr	r3, [r5, #0]
 8014320:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8014324:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014328:	b370      	cbz	r0, 8014388 <rcl_publisher_init+0x10c>
 801432a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801432e:	f001 fafd 	bl	801592c <rmw_publisher_get_actual_qos>
 8014332:	682b      	ldr	r3, [r5, #0]
 8014334:	4604      	mov	r4, r0
 8014336:	b9d0      	cbnz	r0, 801436e <rcl_publisher_init+0xf2>
 8014338:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 801433c:	4631      	mov	r1, r6
 801433e:	4618      	mov	r0, r3
 8014340:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8014344:	2270      	movs	r2, #112	@ 0x70
 8014346:	f00e f8e2 	bl	802250e <memcpy>
 801434a:	683a      	ldr	r2, [r7, #0]
 801434c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8014350:	9807      	ldr	r0, [sp, #28]
 8014352:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014354:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014356:	4798      	blx	r3
 8014358:	4620      	mov	r0, r4
 801435a:	b008      	add	sp, #32
 801435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014360:	240b      	movs	r4, #11
 8014362:	4620      	mov	r0, r4
 8014364:	b008      	add	sp, #32
 8014366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801436a:	24c8      	movs	r4, #200	@ 0xc8
 801436c:	e79f      	b.n	80142ae <rcl_publisher_init+0x32>
 801436e:	b1cb      	cbz	r3, 80143a4 <rcl_publisher_init+0x128>
 8014370:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014374:	b142      	cbz	r2, 8014388 <rcl_publisher_init+0x10c>
 8014376:	4638      	mov	r0, r7
 8014378:	f006 ffd4 	bl	801b324 <rcl_node_get_rmw_handle>
 801437c:	682b      	ldr	r3, [r5, #0]
 801437e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8014382:	f001 fae7 	bl	8015954 <rmw_destroy_publisher>
 8014386:	682b      	ldr	r3, [r5, #0]
 8014388:	4618      	mov	r0, r3
 801438a:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 801438c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801438e:	2401      	movs	r4, #1
 8014390:	4790      	blx	r2
 8014392:	2300      	movs	r3, #0
 8014394:	602b      	str	r3, [r5, #0]
 8014396:	e7db      	b.n	8014350 <rcl_publisher_init+0xd4>
 8014398:	2867      	cmp	r0, #103	@ 0x67
 801439a:	d007      	beq.n	80143ac <rcl_publisher_init+0x130>
 801439c:	2869      	cmp	r0, #105	@ 0x69
 801439e:	d005      	beq.n	80143ac <rcl_publisher_init+0x130>
 80143a0:	280a      	cmp	r0, #10
 80143a2:	d001      	beq.n	80143a8 <rcl_publisher_init+0x12c>
 80143a4:	2401      	movs	r4, #1
 80143a6:	e7d3      	b.n	8014350 <rcl_publisher_init+0xd4>
 80143a8:	240a      	movs	r4, #10
 80143aa:	e7d1      	b.n	8014350 <rcl_publisher_init+0xd4>
 80143ac:	2467      	movs	r4, #103	@ 0x67
 80143ae:	e7cf      	b.n	8014350 <rcl_publisher_init+0xd4>

080143b0 <rcl_publisher_get_default_options>:
 80143b0:	b570      	push	{r4, r5, r6, lr}
 80143b2:	4d14      	ldr	r5, [pc, #80]	@ (8014404 <rcl_publisher_get_default_options+0x54>)
 80143b4:	b088      	sub	sp, #32
 80143b6:	4604      	mov	r4, r0
 80143b8:	2250      	movs	r2, #80	@ 0x50
 80143ba:	4913      	ldr	r1, [pc, #76]	@ (8014408 <rcl_publisher_get_default_options+0x58>)
 80143bc:	4628      	mov	r0, r5
 80143be:	f00e f8a6 	bl	802250e <memcpy>
 80143c2:	a802      	add	r0, sp, #8
 80143c4:	f001 f872 	bl	80154ac <rcutils_get_default_allocator>
 80143c8:	f10d 0c08 	add.w	ip, sp, #8
 80143cc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80143d0:	466e      	mov	r6, sp
 80143d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143da:	f8dc 3000 	ldr.w	r3, [ip]
 80143de:	4630      	mov	r0, r6
 80143e0:	f8ce 3000 	str.w	r3, [lr]
 80143e4:	f001 f8fc 	bl	80155e0 <rmw_get_default_publisher_options>
 80143e8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80143ec:	2270      	movs	r2, #112	@ 0x70
 80143ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80143f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80143f6:	4629      	mov	r1, r5
 80143f8:	4620      	mov	r0, r4
 80143fa:	f00e f888 	bl	802250e <memcpy>
 80143fe:	4620      	mov	r0, r4
 8014400:	b008      	add	sp, #32
 8014402:	bd70      	pop	{r4, r5, r6, pc}
 8014404:	24064880 	.word	0x24064880
 8014408:	080248d0 	.word	0x080248d0

0801440c <rcl_publish>:
 801440c:	b1f8      	cbz	r0, 801444e <rcl_publish+0x42>
 801440e:	6803      	ldr	r3, [r0, #0]
 8014410:	b570      	push	{r4, r5, r6, lr}
 8014412:	4604      	mov	r4, r0
 8014414:	b1b3      	cbz	r3, 8014444 <rcl_publish+0x38>
 8014416:	4616      	mov	r6, r2
 8014418:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801441c:	b192      	cbz	r2, 8014444 <rcl_publish+0x38>
 801441e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014422:	460d      	mov	r5, r1
 8014424:	f006 fb7c 	bl	801ab20 <rcl_context_is_valid>
 8014428:	b160      	cbz	r0, 8014444 <rcl_publish+0x38>
 801442a:	6823      	ldr	r3, [r4, #0]
 801442c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014430:	b140      	cbz	r0, 8014444 <rcl_publish+0x38>
 8014432:	b155      	cbz	r5, 801444a <rcl_publish+0x3e>
 8014434:	4632      	mov	r2, r6
 8014436:	4629      	mov	r1, r5
 8014438:	f001 f934 	bl	80156a4 <rmw_publish>
 801443c:	3800      	subs	r0, #0
 801443e:	bf18      	it	ne
 8014440:	2001      	movne	r0, #1
 8014442:	bd70      	pop	{r4, r5, r6, pc}
 8014444:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014448:	bd70      	pop	{r4, r5, r6, pc}
 801444a:	200b      	movs	r0, #11
 801444c:	bd70      	pop	{r4, r5, r6, pc}
 801444e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8014452:	4770      	bx	lr

08014454 <rcl_publisher_is_valid>:
 8014454:	b1a0      	cbz	r0, 8014480 <rcl_publisher_is_valid+0x2c>
 8014456:	6803      	ldr	r3, [r0, #0]
 8014458:	b510      	push	{r4, lr}
 801445a:	4604      	mov	r4, r0
 801445c:	b173      	cbz	r3, 801447c <rcl_publisher_is_valid+0x28>
 801445e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014462:	b15a      	cbz	r2, 801447c <rcl_publisher_is_valid+0x28>
 8014464:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014468:	f006 fb5a 	bl	801ab20 <rcl_context_is_valid>
 801446c:	b130      	cbz	r0, 801447c <rcl_publisher_is_valid+0x28>
 801446e:	6823      	ldr	r3, [r4, #0]
 8014470:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014474:	3800      	subs	r0, #0
 8014476:	bf18      	it	ne
 8014478:	2001      	movne	r0, #1
 801447a:	bd10      	pop	{r4, pc}
 801447c:	2000      	movs	r0, #0
 801447e:	bd10      	pop	{r4, pc}
 8014480:	2000      	movs	r0, #0
 8014482:	4770      	bx	lr

08014484 <rcl_publisher_is_valid_except_context>:
 8014484:	b130      	cbz	r0, 8014494 <rcl_publisher_is_valid_except_context+0x10>
 8014486:	6800      	ldr	r0, [r0, #0]
 8014488:	b120      	cbz	r0, 8014494 <rcl_publisher_is_valid_except_context+0x10>
 801448a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801448e:	3800      	subs	r0, #0
 8014490:	bf18      	it	ne
 8014492:	2001      	movne	r0, #1
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop

08014498 <_rclc_check_for_new_data>:
 8014498:	2800      	cmp	r0, #0
 801449a:	d046      	beq.n	801452a <_rclc_check_for_new_data+0x92>
 801449c:	4603      	mov	r3, r0
 801449e:	b530      	push	{r4, r5, lr}
 80144a0:	7802      	ldrb	r2, [r0, #0]
 80144a2:	b085      	sub	sp, #20
 80144a4:	2a0a      	cmp	r2, #10
 80144a6:	d842      	bhi.n	801452e <_rclc_check_for_new_data+0x96>
 80144a8:	e8df f002 	tbb	[pc, r2]
 80144ac:	14181212 	.word	0x14181212
 80144b0:	06060614 	.word	0x06060614
 80144b4:	2e1a      	.short	0x2e1a
 80144b6:	16          	.byte	0x16
 80144b7:	00          	.byte	0x00
 80144b8:	6a0a      	ldr	r2, [r1, #32]
 80144ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80144bc:	2000      	movs	r0, #0
 80144be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80144c2:	1a12      	subs	r2, r2, r0
 80144c4:	bf18      	it	ne
 80144c6:	2201      	movne	r2, #1
 80144c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80144cc:	b005      	add	sp, #20
 80144ce:	bd30      	pop	{r4, r5, pc}
 80144d0:	680a      	ldr	r2, [r1, #0]
 80144d2:	e7f2      	b.n	80144ba <_rclc_check_for_new_data+0x22>
 80144d4:	698a      	ldr	r2, [r1, #24]
 80144d6:	e7f0      	b.n	80144ba <_rclc_check_for_new_data+0x22>
 80144d8:	688a      	ldr	r2, [r1, #8]
 80144da:	e7ee      	b.n	80144ba <_rclc_check_for_new_data+0x22>
 80144dc:	690a      	ldr	r2, [r1, #16]
 80144de:	e7ec      	b.n	80144ba <_rclc_check_for_new_data+0x22>
 80144e0:	685c      	ldr	r4, [r3, #4]
 80144e2:	4608      	mov	r0, r1
 80144e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80144e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144ec:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 80144f0:	f104 0110 	add.w	r1, r4, #16
 80144f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80144f8:	9500      	str	r5, [sp, #0]
 80144fa:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80144fe:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8014502:	f008 ff3d 	bl	801d380 <rcl_action_client_wait_set_get_entities_ready>
 8014506:	e7e1      	b.n	80144cc <_rclc_check_for_new_data+0x34>
 8014508:	685c      	ldr	r4, [r3, #4]
 801450a:	4608      	mov	r0, r1
 801450c:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 8014510:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 8014514:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8014518:	e9cd 2100 	strd	r2, r1, [sp]
 801451c:	f104 0220 	add.w	r2, r4, #32
 8014520:	f104 0110 	add.w	r1, r4, #16
 8014524:	f009 f946 	bl	801d7b4 <rcl_action_server_wait_set_get_entities_ready>
 8014528:	e7d0      	b.n	80144cc <_rclc_check_for_new_data+0x34>
 801452a:	200b      	movs	r0, #11
 801452c:	4770      	bx	lr
 801452e:	2001      	movs	r0, #1
 8014530:	e7cc      	b.n	80144cc <_rclc_check_for_new_data+0x34>
 8014532:	bf00      	nop

08014534 <_rclc_take_new_data>:
 8014534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014536:	b09b      	sub	sp, #108	@ 0x6c
 8014538:	2800      	cmp	r0, #0
 801453a:	f000 8088 	beq.w	801464e <_rclc_take_new_data+0x11a>
 801453e:	7803      	ldrb	r3, [r0, #0]
 8014540:	4604      	mov	r4, r0
 8014542:	2b0a      	cmp	r3, #10
 8014544:	f200 8167 	bhi.w	8014816 <_rclc_take_new_data+0x2e2>
 8014548:	e8df f003 	tbb	[pc, r3]
 801454c:	44152d2d 	.word	0x44152d2d
 8014550:	19191944 	.word	0x19191944
 8014554:	065a      	.short	0x065a
 8014556:	15          	.byte	0x15
 8014557:	00          	.byte	0x00
 8014558:	6840      	ldr	r0, [r0, #4]
 801455a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801455e:	2b00      	cmp	r3, #0
 8014560:	f040 80b2 	bne.w	80146c8 <_rclc_take_new_data+0x194>
 8014564:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8014568:	2b00      	cmp	r3, #0
 801456a:	f040 80e4 	bne.w	8014736 <_rclc_take_new_data+0x202>
 801456e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014572:	2b00      	cmp	r3, #0
 8014574:	d16f      	bne.n	8014656 <_rclc_take_new_data+0x122>
 8014576:	2500      	movs	r5, #0
 8014578:	4628      	mov	r0, r5
 801457a:	b01b      	add	sp, #108	@ 0x6c
 801457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801457e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8014580:	6a0b      	ldr	r3, [r1, #32]
 8014582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d0f5      	beq.n	8014576 <_rclc_take_new_data+0x42>
 801458a:	6882      	ldr	r2, [r0, #8]
 801458c:	f100 0110 	add.w	r1, r0, #16
 8014590:	6840      	ldr	r0, [r0, #4]
 8014592:	f007 f993 	bl	801b8bc <rcl_take_request>
 8014596:	4605      	mov	r5, r0
 8014598:	2800      	cmp	r0, #0
 801459a:	d0ec      	beq.n	8014576 <_rclc_take_new_data+0x42>
 801459c:	f240 2359 	movw	r3, #601	@ 0x259
 80145a0:	4298      	cmp	r0, r3
 80145a2:	d013      	beq.n	80145cc <_rclc_take_new_data+0x98>
 80145a4:	e029      	b.n	80145fa <_rclc_take_new_data+0xc6>
 80145a6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80145a8:	680b      	ldr	r3, [r1, #0]
 80145aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d0e1      	beq.n	8014576 <_rclc_take_new_data+0x42>
 80145b2:	2300      	movs	r3, #0
 80145b4:	aa0a      	add	r2, sp, #40	@ 0x28
 80145b6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80145ba:	f007 fac3 	bl	801bb44 <rcl_take>
 80145be:	4605      	mov	r5, r0
 80145c0:	2800      	cmp	r0, #0
 80145c2:	d0d9      	beq.n	8014578 <_rclc_take_new_data+0x44>
 80145c4:	f240 1391 	movw	r3, #401	@ 0x191
 80145c8:	4298      	cmp	r0, r3
 80145ca:	d116      	bne.n	80145fa <_rclc_take_new_data+0xc6>
 80145cc:	2300      	movs	r3, #0
 80145ce:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80145d2:	e7d1      	b.n	8014578 <_rclc_take_new_data+0x44>
 80145d4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80145d6:	698b      	ldr	r3, [r1, #24]
 80145d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d0ca      	beq.n	8014576 <_rclc_take_new_data+0x42>
 80145e0:	6882      	ldr	r2, [r0, #8]
 80145e2:	f100 0110 	add.w	r1, r0, #16
 80145e6:	6840      	ldr	r0, [r0, #4]
 80145e8:	f006 fa2a 	bl	801aa40 <rcl_take_response>
 80145ec:	4605      	mov	r5, r0
 80145ee:	2800      	cmp	r0, #0
 80145f0:	d0c1      	beq.n	8014576 <_rclc_take_new_data+0x42>
 80145f2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80145f6:	4298      	cmp	r0, r3
 80145f8:	d0be      	beq.n	8014578 <_rclc_take_new_data+0x44>
 80145fa:	f000 ff89 	bl	8015510 <rcutils_reset_error>
 80145fe:	e7bb      	b.n	8014578 <_rclc_take_new_data+0x44>
 8014600:	6840      	ldr	r0, [r0, #4]
 8014602:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8014606:	2b00      	cmp	r3, #0
 8014608:	d17d      	bne.n	8014706 <_rclc_take_new_data+0x1d2>
 801460a:	69c3      	ldr	r3, [r0, #28]
 801460c:	b11b      	cbz	r3, 8014616 <_rclc_take_new_data+0xe2>
 801460e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014612:	2b00      	cmp	r3, #0
 8014614:	d144      	bne.n	80146a0 <_rclc_take_new_data+0x16c>
 8014616:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801461a:	2b00      	cmp	r3, #0
 801461c:	f040 80ac 	bne.w	8014778 <_rclc_take_new_data+0x244>
 8014620:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8014624:	2b00      	cmp	r3, #0
 8014626:	d0a6      	beq.n	8014576 <_rclc_take_new_data+0x42>
 8014628:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801462a:	a90a      	add	r1, sp, #40	@ 0x28
 801462c:	3010      	adds	r0, #16
 801462e:	f008 fd7f 	bl	801d130 <rcl_action_take_result_response>
 8014632:	4605      	mov	r5, r0
 8014634:	2800      	cmp	r0, #0
 8014636:	d1e0      	bne.n	80145fa <_rclc_take_new_data+0xc6>
 8014638:	6860      	ldr	r0, [r4, #4]
 801463a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801463e:	f009 f9e9 	bl	801da14 <rclc_action_find_handle_by_result_request_sequence_number>
 8014642:	2800      	cmp	r0, #0
 8014644:	d098      	beq.n	8014578 <_rclc_take_new_data+0x44>
 8014646:	2301      	movs	r3, #1
 8014648:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 801464c:	e794      	b.n	8014578 <_rclc_take_new_data+0x44>
 801464e:	250b      	movs	r5, #11
 8014650:	4628      	mov	r0, r5
 8014652:	b01b      	add	sp, #108	@ 0x6c
 8014654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014656:	ae04      	add	r6, sp, #16
 8014658:	3010      	adds	r0, #16
 801465a:	aa0a      	add	r2, sp, #40	@ 0x28
 801465c:	4631      	mov	r1, r6
 801465e:	f008 ffdd 	bl	801d61c <rcl_action_take_cancel_request>
 8014662:	4605      	mov	r5, r0
 8014664:	2800      	cmp	r0, #0
 8014666:	d1c8      	bne.n	80145fa <_rclc_take_new_data+0xc6>
 8014668:	a90a      	add	r1, sp, #40	@ 0x28
 801466a:	6860      	ldr	r0, [r4, #4]
 801466c:	f009 f992 	bl	801d994 <rclc_action_find_goal_handle_by_uuid>
 8014670:	4607      	mov	r7, r0
 8014672:	2800      	cmp	r0, #0
 8014674:	f000 80bb 	beq.w	80147ee <_rclc_take_new_data+0x2ba>
 8014678:	2101      	movs	r1, #1
 801467a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801467e:	f009 f913 	bl	801d8a8 <rcl_action_transition_goal_state>
 8014682:	2803      	cmp	r0, #3
 8014684:	4684      	mov	ip, r0
 8014686:	f040 80a7 	bne.w	80147d8 <_rclc_take_new_data+0x2a4>
 801468a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801468e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014692:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014696:	e884 0003 	stmia.w	r4, {r0, r1}
 801469a:	f887 c008 	strb.w	ip, [r7, #8]
 801469e:	e76b      	b.n	8014578 <_rclc_take_new_data+0x44>
 80146a0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80146a2:	3010      	adds	r0, #16
 80146a4:	f008 fdc4 	bl	801d230 <rcl_action_take_feedback>
 80146a8:	4605      	mov	r5, r0
 80146aa:	2800      	cmp	r0, #0
 80146ac:	d1a5      	bne.n	80145fa <_rclc_take_new_data+0xc6>
 80146ae:	6860      	ldr	r0, [r4, #4]
 80146b0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80146b2:	f009 f96f 	bl	801d994 <rclc_action_find_goal_handle_by_uuid>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2800      	cmp	r0, #0
 80146ba:	f000 80a3 	beq.w	8014804 <_rclc_take_new_data+0x2d0>
 80146be:	2201      	movs	r2, #1
 80146c0:	6860      	ldr	r0, [r4, #4]
 80146c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80146c6:	e7a6      	b.n	8014616 <_rclc_take_new_data+0xe2>
 80146c8:	f009 f93e 	bl	801d948 <rclc_action_take_goal_handle>
 80146cc:	4606      	mov	r6, r0
 80146ce:	6860      	ldr	r0, [r4, #4]
 80146d0:	2e00      	cmp	r6, #0
 80146d2:	f43f af47 	beq.w	8014564 <_rclc_take_new_data+0x30>
 80146d6:	6070      	str	r0, [r6, #4]
 80146d8:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80146dc:	69f2      	ldr	r2, [r6, #28]
 80146de:	3010      	adds	r0, #16
 80146e0:	f008 fee4 	bl	801d4ac <rcl_action_take_goal_request>
 80146e4:	4605      	mov	r5, r0
 80146e6:	2800      	cmp	r0, #0
 80146e8:	f040 808e 	bne.w	8014808 <_rclc_take_new_data+0x2d4>
 80146ec:	69f7      	ldr	r7, [r6, #28]
 80146ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146f0:	7235      	strb	r5, [r6, #8]
 80146f2:	f8c6 0009 	str.w	r0, [r6, #9]
 80146f6:	f8c6 100d 	str.w	r1, [r6, #13]
 80146fa:	6860      	ldr	r0, [r4, #4]
 80146fc:	f8c6 2011 	str.w	r2, [r6, #17]
 8014700:	f8c6 3015 	str.w	r3, [r6, #21]
 8014704:	e72e      	b.n	8014564 <_rclc_take_new_data+0x30>
 8014706:	aa04      	add	r2, sp, #16
 8014708:	a90a      	add	r1, sp, #40	@ 0x28
 801470a:	3010      	adds	r0, #16
 801470c:	f008 fc98 	bl	801d040 <rcl_action_take_goal_response>
 8014710:	4605      	mov	r5, r0
 8014712:	2800      	cmp	r0, #0
 8014714:	f47f af71 	bne.w	80145fa <_rclc_take_new_data+0xc6>
 8014718:	6860      	ldr	r0, [r4, #4]
 801471a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801471e:	f009 f967 	bl	801d9f0 <rclc_action_find_handle_by_goal_request_sequence_number>
 8014722:	b130      	cbz	r0, 8014732 <_rclc_take_new_data+0x1fe>
 8014724:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014728:	2201      	movs	r2, #1
 801472a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 801472e:	f880 2020 	strb.w	r2, [r0, #32]
 8014732:	6860      	ldr	r0, [r4, #4]
 8014734:	e769      	b.n	801460a <_rclc_take_new_data+0xd6>
 8014736:	3010      	adds	r0, #16
 8014738:	aa04      	add	r2, sp, #16
 801473a:	a90a      	add	r1, sp, #40	@ 0x28
 801473c:	f008 ff2e 	bl	801d59c <rcl_action_take_result_request>
 8014740:	4605      	mov	r5, r0
 8014742:	2800      	cmp	r0, #0
 8014744:	f47f af59 	bne.w	80145fa <_rclc_take_new_data+0xc6>
 8014748:	a904      	add	r1, sp, #16
 801474a:	6860      	ldr	r0, [r4, #4]
 801474c:	f009 f922 	bl	801d994 <rclc_action_find_goal_handle_by_uuid>
 8014750:	4607      	mov	r7, r0
 8014752:	b160      	cbz	r0, 801476e <_rclc_take_new_data+0x23a>
 8014754:	ad0a      	add	r5, sp, #40	@ 0x28
 8014756:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 801475a:	f04f 0c02 	mov.w	ip, #2
 801475e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014760:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014762:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014766:	e886 0003 	stmia.w	r6, {r0, r1}
 801476a:	f887 c008 	strb.w	ip, [r7, #8]
 801476e:	6860      	ldr	r0, [r4, #4]
 8014770:	2300      	movs	r3, #0
 8014772:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8014776:	e6fa      	b.n	801456e <_rclc_take_new_data+0x3a>
 8014778:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 801477c:	a90a      	add	r1, sp, #40	@ 0x28
 801477e:	3010      	adds	r0, #16
 8014780:	f008 fd16 	bl	801d1b0 <rcl_action_take_cancel_response>
 8014784:	4605      	mov	r5, r0
 8014786:	2800      	cmp	r0, #0
 8014788:	f47f af37 	bne.w	80145fa <_rclc_take_new_data+0xc6>
 801478c:	6860      	ldr	r0, [r4, #4]
 801478e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014792:	f009 f951 	bl	801da38 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8014796:	4606      	mov	r6, r0
 8014798:	6860      	ldr	r0, [r4, #4]
 801479a:	2e00      	cmp	r6, #0
 801479c:	f43f af40 	beq.w	8014620 <_rclc_take_new_data+0xec>
 80147a0:	2701      	movs	r7, #1
 80147a2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147a4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	f43f af3a 	beq.w	8014620 <_rclc_take_new_data+0xec>
 80147ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80147ae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80147b2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80147b6:	f009 f8ed 	bl	801d994 <rclc_action_find_goal_handle_by_uuid>
 80147ba:	b138      	cbz	r0, 80147cc <_rclc_take_new_data+0x298>
 80147bc:	6860      	ldr	r0, [r4, #4]
 80147be:	3501      	adds	r5, #1
 80147c0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80147c4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147c6:	42ab      	cmp	r3, r5
 80147c8:	d8f0      	bhi.n	80147ac <_rclc_take_new_data+0x278>
 80147ca:	e729      	b.n	8014620 <_rclc_take_new_data+0xec>
 80147cc:	6860      	ldr	r0, [r4, #4]
 80147ce:	3501      	adds	r5, #1
 80147d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80147d2:	42ab      	cmp	r3, r5
 80147d4:	d8ea      	bhi.n	80147ac <_rclc_take_new_data+0x278>
 80147d6:	e723      	b.n	8014620 <_rclc_take_new_data+0xec>
 80147d8:	ab06      	add	r3, sp, #24
 80147da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147dc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147e0:	2103      	movs	r1, #3
 80147e2:	6860      	ldr	r0, [r4, #4]
 80147e4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147e8:	f009 f99a 	bl	801db20 <rclc_action_server_goal_cancel_reject>
 80147ec:	e6c4      	b.n	8014578 <_rclc_take_new_data+0x44>
 80147ee:	ab06      	add	r3, sp, #24
 80147f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147f6:	2102      	movs	r1, #2
 80147f8:	6860      	ldr	r0, [r4, #4]
 80147fa:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147fe:	f009 f98f 	bl	801db20 <rclc_action_server_goal_cancel_reject>
 8014802:	e6b9      	b.n	8014578 <_rclc_take_new_data+0x44>
 8014804:	6860      	ldr	r0, [r4, #4]
 8014806:	e706      	b.n	8014616 <_rclc_take_new_data+0xe2>
 8014808:	4631      	mov	r1, r6
 801480a:	6860      	ldr	r0, [r4, #4]
 801480c:	f009 f8ac 	bl	801d968 <rclc_action_remove_used_goal_handle>
 8014810:	f000 fe7e 	bl	8015510 <rcutils_reset_error>
 8014814:	e6b0      	b.n	8014578 <_rclc_take_new_data+0x44>
 8014816:	2501      	movs	r5, #1
 8014818:	e6ae      	b.n	8014578 <_rclc_take_new_data+0x44>
 801481a:	bf00      	nop

0801481c <_rclc_execute.part.0>:
 801481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801481e:	7803      	ldrb	r3, [r0, #0]
 8014820:	b085      	sub	sp, #20
 8014822:	4604      	mov	r4, r0
 8014824:	2b0a      	cmp	r3, #10
 8014826:	f200 8139 	bhi.w	8014a9c <_rclc_execute.part.0+0x280>
 801482a:	e8df f003 	tbb	[pc, r3]
 801482e:	4268      	.short	0x4268
 8014830:	06a75b4d 	.word	0x06a75b4d
 8014834:	721d0606 	.word	0x721d0606
 8014838:	62          	.byte	0x62
 8014839:	00          	.byte	0x00
 801483a:	2b06      	cmp	r3, #6
 801483c:	f000 8126 	beq.w	8014a8c <_rclc_execute.part.0+0x270>
 8014840:	2b07      	cmp	r3, #7
 8014842:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014844:	f040 811c 	bne.w	8014a80 <_rclc_execute.part.0+0x264>
 8014848:	f104 0510 	add.w	r5, r4, #16
 801484c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8014850:	6880      	ldr	r0, [r0, #8]
 8014852:	4798      	blx	r3
 8014854:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014856:	4629      	mov	r1, r5
 8014858:	6860      	ldr	r0, [r4, #4]
 801485a:	f007 f86f 	bl	801b93c <rcl_send_response>
 801485e:	4604      	mov	r4, r0
 8014860:	b378      	cbz	r0, 80148c2 <_rclc_execute.part.0+0xa6>
 8014862:	f000 fe55 	bl	8015510 <rcutils_reset_error>
 8014866:	e02c      	b.n	80148c2 <_rclc_execute.part.0+0xa6>
 8014868:	6840      	ldr	r0, [r0, #4]
 801486a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801486e:	2b00      	cmp	r3, #0
 8014870:	f000 808e 	beq.w	8014990 <_rclc_execute.part.0+0x174>
 8014874:	2600      	movs	r6, #0
 8014876:	2701      	movs	r7, #1
 8014878:	e004      	b.n	8014884 <_rclc_execute.part.0+0x68>
 801487a:	f009 f83f 	bl	801d8fc <rclc_action_send_result_request>
 801487e:	b998      	cbnz	r0, 80148a8 <_rclc_execute.part.0+0x8c>
 8014880:	722f      	strb	r7, [r5, #8]
 8014882:	6860      	ldr	r0, [r4, #4]
 8014884:	f009 f8ea 	bl	801da5c <rclc_action_find_first_handle_with_goal_response>
 8014888:	4605      	mov	r5, r0
 801488a:	2800      	cmp	r0, #0
 801488c:	d07f      	beq.n	801498e <_rclc_execute.part.0+0x172>
 801488e:	6863      	ldr	r3, [r4, #4]
 8014890:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014892:	699b      	ldr	r3, [r3, #24]
 8014894:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8014898:	f885 6020 	strb.w	r6, [r5, #32]
 801489c:	4798      	blx	r3
 801489e:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80148a2:	4628      	mov	r0, r5
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d1e8      	bne.n	801487a <_rclc_execute.part.0+0x5e>
 80148a8:	6860      	ldr	r0, [r4, #4]
 80148aa:	4629      	mov	r1, r5
 80148ac:	f009 f85c 	bl	801d968 <rclc_action_remove_used_goal_handle>
 80148b0:	e7e7      	b.n	8014882 <_rclc_execute.part.0+0x66>
 80148b2:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80148b6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 80148ba:	b100      	cbz	r0, 80148be <_rclc_execute.part.0+0xa2>
 80148bc:	68a0      	ldr	r0, [r4, #8]
 80148be:	2400      	movs	r4, #0
 80148c0:	4798      	blx	r3
 80148c2:	4620      	mov	r0, r4
 80148c4:	b005      	add	sp, #20
 80148c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148c8:	6840      	ldr	r0, [r0, #4]
 80148ca:	f007 fc6f 	bl	801c1ac <rcl_timer_call>
 80148ce:	f240 3321 	movw	r3, #801	@ 0x321
 80148d2:	4604      	mov	r4, r0
 80148d4:	4298      	cmp	r0, r3
 80148d6:	d001      	beq.n	80148dc <_rclc_execute.part.0+0xc0>
 80148d8:	2800      	cmp	r0, #0
 80148da:	d1c2      	bne.n	8014862 <_rclc_execute.part.0+0x46>
 80148dc:	2400      	movs	r4, #0
 80148de:	4620      	mov	r0, r4
 80148e0:	b005      	add	sp, #20
 80148e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148e4:	2400      	movs	r4, #0
 80148e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148e8:	6880      	ldr	r0, [r0, #8]
 80148ea:	4798      	blx	r3
 80148ec:	4620      	mov	r0, r4
 80148ee:	b005      	add	sp, #20
 80148f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f2:	2400      	movs	r4, #0
 80148f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148f6:	4798      	blx	r3
 80148f8:	4620      	mov	r0, r4
 80148fa:	b005      	add	sp, #20
 80148fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fe:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8014902:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014904:	b100      	cbz	r0, 8014908 <_rclc_execute.part.0+0xec>
 8014906:	68a0      	ldr	r0, [r4, #8]
 8014908:	2400      	movs	r4, #0
 801490a:	4798      	blx	r3
 801490c:	4620      	mov	r0, r4
 801490e:	b005      	add	sp, #20
 8014910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014912:	6840      	ldr	r0, [r0, #4]
 8014914:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8014918:	bb3b      	cbnz	r3, 801496a <_rclc_execute.part.0+0x14e>
 801491a:	f890 3020 	ldrb.w	r3, [r0, #32]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d07d      	beq.n	8014a1e <_rclc_execute.part.0+0x202>
 8014922:	f640 0634 	movw	r6, #2100	@ 0x834
 8014926:	2701      	movs	r7, #1
 8014928:	e007      	b.n	801493a <_rclc_execute.part.0+0x11e>
 801492a:	4628      	mov	r0, r5
 801492c:	f009 f8ae 	bl	801da8c <rclc_action_server_response_goal_request>
 8014930:	4629      	mov	r1, r5
 8014932:	6860      	ldr	r0, [r4, #4]
 8014934:	f009 f818 	bl	801d968 <rclc_action_remove_used_goal_handle>
 8014938:	6860      	ldr	r0, [r4, #4]
 801493a:	2100      	movs	r1, #0
 801493c:	f009 f840 	bl	801d9c0 <rclc_action_find_first_handle_by_status>
 8014940:	4605      	mov	r5, r0
 8014942:	2800      	cmp	r0, #0
 8014944:	d068      	beq.n	8014a18 <_rclc_execute.part.0+0x1fc>
 8014946:	6863      	ldr	r3, [r4, #4]
 8014948:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801494a:	699b      	ldr	r3, [r3, #24]
 801494c:	4798      	blx	r3
 801494e:	42b0      	cmp	r0, r6
 8014950:	f04f 0100 	mov.w	r1, #0
 8014954:	d1e9      	bne.n	801492a <_rclc_execute.part.0+0x10e>
 8014956:	2101      	movs	r1, #1
 8014958:	4628      	mov	r0, r5
 801495a:	f009 f897 	bl	801da8c <rclc_action_server_response_goal_request>
 801495e:	722f      	strb	r7, [r5, #8]
 8014960:	e7ea      	b.n	8014938 <_rclc_execute.part.0+0x11c>
 8014962:	6848      	ldr	r0, [r1, #4]
 8014964:	f009 f800 	bl	801d968 <rclc_action_remove_used_goal_handle>
 8014968:	6860      	ldr	r0, [r4, #4]
 801496a:	f009 f835 	bl	801d9d8 <rclc_action_find_first_terminated_handle>
 801496e:	4601      	mov	r1, r0
 8014970:	2800      	cmp	r0, #0
 8014972:	d1f6      	bne.n	8014962 <_rclc_execute.part.0+0x146>
 8014974:	6860      	ldr	r0, [r4, #4]
 8014976:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 801497a:	e7ce      	b.n	801491a <_rclc_execute.part.0+0xfe>
 801497c:	2400      	movs	r4, #0
 801497e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014980:	f100 0110 	add.w	r1, r0, #16
 8014984:	6880      	ldr	r0, [r0, #8]
 8014986:	4798      	blx	r3
 8014988:	4620      	mov	r0, r4
 801498a:	b005      	add	sp, #20
 801498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801498e:	6860      	ldr	r0, [r4, #4]
 8014990:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014994:	b18b      	cbz	r3, 80149ba <_rclc_execute.part.0+0x19e>
 8014996:	68c5      	ldr	r5, [r0, #12]
 8014998:	b32d      	cbz	r5, 80149e6 <_rclc_execute.part.0+0x1ca>
 801499a:	2600      	movs	r6, #0
 801499c:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80149a0:	b143      	cbz	r3, 80149b4 <_rclc_execute.part.0+0x198>
 80149a2:	69c3      	ldr	r3, [r0, #28]
 80149a4:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80149a8:	b123      	cbz	r3, 80149b4 <_rclc_execute.part.0+0x198>
 80149aa:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80149ac:	4628      	mov	r0, r5
 80149ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149b0:	4798      	blx	r3
 80149b2:	6860      	ldr	r0, [r4, #4]
 80149b4:	682d      	ldr	r5, [r5, #0]
 80149b6:	2d00      	cmp	r5, #0
 80149b8:	d1f0      	bne.n	801499c <_rclc_execute.part.0+0x180>
 80149ba:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80149be:	b193      	cbz	r3, 80149e6 <_rclc_execute.part.0+0x1ca>
 80149c0:	68c5      	ldr	r5, [r0, #12]
 80149c2:	b185      	cbz	r5, 80149e6 <_rclc_execute.part.0+0x1ca>
 80149c4:	2600      	movs	r6, #0
 80149c6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80149ca:	b14b      	cbz	r3, 80149e0 <_rclc_execute.part.0+0x1c4>
 80149cc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80149ce:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80149d2:	b12b      	cbz	r3, 80149e0 <_rclc_execute.part.0+0x1c4>
 80149d4:	4628      	mov	r0, r5
 80149d6:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80149da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149dc:	4798      	blx	r3
 80149de:	6860      	ldr	r0, [r4, #4]
 80149e0:	682d      	ldr	r5, [r5, #0]
 80149e2:	2d00      	cmp	r5, #0
 80149e4:	d1ef      	bne.n	80149c6 <_rclc_execute.part.0+0x1aa>
 80149e6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	f43f af76 	beq.w	80148dc <_rclc_execute.part.0+0xc0>
 80149f0:	2700      	movs	r7, #0
 80149f2:	e00b      	b.n	8014a0c <_rclc_execute.part.0+0x1f0>
 80149f4:	6863      	ldr	r3, [r4, #4]
 80149f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80149f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80149fa:	6a1e      	ldr	r6, [r3, #32]
 80149fc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8014a00:	47b0      	blx	r6
 8014a02:	6860      	ldr	r0, [r4, #4]
 8014a04:	4629      	mov	r1, r5
 8014a06:	f008 ffaf 	bl	801d968 <rclc_action_remove_used_goal_handle>
 8014a0a:	6860      	ldr	r0, [r4, #4]
 8014a0c:	f009 f832 	bl	801da74 <rclc_action_find_first_handle_with_result_response>
 8014a10:	4605      	mov	r5, r0
 8014a12:	2800      	cmp	r0, #0
 8014a14:	d1ee      	bne.n	80149f4 <_rclc_execute.part.0+0x1d8>
 8014a16:	e761      	b.n	80148dc <_rclc_execute.part.0+0xc0>
 8014a18:	6860      	ldr	r0, [r4, #4]
 8014a1a:	f880 5020 	strb.w	r5, [r0, #32]
 8014a1e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	f43f af5a 	beq.w	80148dc <_rclc_execute.part.0+0xc0>
 8014a28:	68c5      	ldr	r5, [r0, #12]
 8014a2a:	b1b5      	cbz	r5, 8014a5a <_rclc_execute.part.0+0x23e>
 8014a2c:	2602      	movs	r6, #2
 8014a2e:	e001      	b.n	8014a34 <_rclc_execute.part.0+0x218>
 8014a30:	682d      	ldr	r5, [r5, #0]
 8014a32:	b195      	cbz	r5, 8014a5a <_rclc_execute.part.0+0x23e>
 8014a34:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014a38:	2b03      	cmp	r3, #3
 8014a3a:	d1f9      	bne.n	8014a30 <_rclc_execute.part.0+0x214>
 8014a3c:	69c3      	ldr	r3, [r0, #28]
 8014a3e:	4628      	mov	r0, r5
 8014a40:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014a42:	4798      	blx	r3
 8014a44:	4603      	mov	r3, r0
 8014a46:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8014a4a:	4628      	mov	r0, r5
 8014a4c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014a50:	b143      	cbz	r3, 8014a64 <_rclc_execute.part.0+0x248>
 8014a52:	f009 f839 	bl	801dac8 <rclc_action_server_goal_cancel_accept>
 8014a56:	6860      	ldr	r0, [r4, #4]
 8014a58:	e7ea      	b.n	8014a30 <_rclc_execute.part.0+0x214>
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	461c      	mov	r4, r3
 8014a5e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8014a62:	e72e      	b.n	80148c2 <_rclc_execute.part.0+0xa6>
 8014a64:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014a66:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8014a6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a6e:	2101      	movs	r1, #1
 8014a70:	6860      	ldr	r0, [r4, #4]
 8014a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a76:	f009 f853 	bl	801db20 <rclc_action_server_goal_cancel_reject>
 8014a7a:	722e      	strb	r6, [r5, #8]
 8014a7c:	6860      	ldr	r0, [r4, #4]
 8014a7e:	e7d7      	b.n	8014a30 <_rclc_execute.part.0+0x214>
 8014a80:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8014a82:	f104 0510 	add.w	r5, r4, #16
 8014a86:	6880      	ldr	r0, [r0, #8]
 8014a88:	4798      	blx	r3
 8014a8a:	e6e3      	b.n	8014854 <_rclc_execute.part.0+0x38>
 8014a8c:	f100 0510 	add.w	r5, r0, #16
 8014a90:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a92:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8014a94:	4629      	mov	r1, r5
 8014a96:	6880      	ldr	r0, [r0, #8]
 8014a98:	4798      	blx	r3
 8014a9a:	e6db      	b.n	8014854 <_rclc_execute.part.0+0x38>
 8014a9c:	2401      	movs	r4, #1
 8014a9e:	e710      	b.n	80148c2 <_rclc_execute.part.0+0xa6>

08014aa0 <rclc_executor_trigger_any>:
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	d03d      	beq.n	8014b20 <rclc_executor_trigger_any+0x80>
 8014aa4:	2900      	cmp	r1, #0
 8014aa6:	d03c      	beq.n	8014b22 <rclc_executor_trigger_any+0x82>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8014aae:	2200      	movs	r2, #0
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	d035      	beq.n	8014b20 <rclc_executor_trigger_any+0x80>
 8014ab4:	b430      	push	{r4, r5}
 8014ab6:	f893 c000 	ldrb.w	ip, [r3]
 8014aba:	f1bc 0f08 	cmp.w	ip, #8
 8014abe:	d11d      	bne.n	8014afc <rclc_executor_trigger_any+0x5c>
 8014ac0:	685c      	ldr	r4, [r3, #4]
 8014ac2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8014ac4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8014ac8:	d105      	bne.n	8014ad6 <rclc_executor_trigger_any+0x36>
 8014aca:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8014ace:	b910      	cbnz	r0, 8014ad6 <rclc_executor_trigger_any+0x36>
 8014ad0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8014ad4:	b128      	cbz	r0, 8014ae2 <rclc_executor_trigger_any+0x42>
 8014ad6:	bc30      	pop	{r4, r5}
 8014ad8:	4770      	bx	lr
 8014ada:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	d1f9      	bne.n	8014ad6 <rclc_executor_trigger_any+0x36>
 8014ae2:	3201      	adds	r2, #1
 8014ae4:	3340      	adds	r3, #64	@ 0x40
 8014ae6:	4291      	cmp	r1, r2
 8014ae8:	d017      	beq.n	8014b1a <rclc_executor_trigger_any+0x7a>
 8014aea:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8014aee:	2800      	cmp	r0, #0
 8014af0:	d0f1      	beq.n	8014ad6 <rclc_executor_trigger_any+0x36>
 8014af2:	f893 c000 	ldrb.w	ip, [r3]
 8014af6:	f1bc 0f08 	cmp.w	ip, #8
 8014afa:	d0e1      	beq.n	8014ac0 <rclc_executor_trigger_any+0x20>
 8014afc:	f1bc 0f09 	cmp.w	ip, #9
 8014b00:	d1eb      	bne.n	8014ada <rclc_executor_trigger_any+0x3a>
 8014b02:	685c      	ldr	r4, [r3, #4]
 8014b04:	6a25      	ldr	r5, [r4, #32]
 8014b06:	2d00      	cmp	r5, #0
 8014b08:	d1e5      	bne.n	8014ad6 <rclc_executor_trigger_any+0x36>
 8014b0a:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	d1e1      	bne.n	8014ad6 <rclc_executor_trigger_any+0x36>
 8014b12:	3201      	adds	r2, #1
 8014b14:	3340      	adds	r3, #64	@ 0x40
 8014b16:	4291      	cmp	r1, r2
 8014b18:	d1e7      	bne.n	8014aea <rclc_executor_trigger_any+0x4a>
 8014b1a:	2000      	movs	r0, #0
 8014b1c:	bc30      	pop	{r4, r5}
 8014b1e:	4770      	bx	lr
 8014b20:	4770      	bx	lr
 8014b22:	4608      	mov	r0, r1
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop

08014b28 <rclc_executor_get_zero_initialized_executor>:
 8014b28:	b510      	push	{r4, lr}
 8014b2a:	4604      	mov	r4, r0
 8014b2c:	2288      	movs	r2, #136	@ 0x88
 8014b2e:	4902      	ldr	r1, [pc, #8]	@ (8014b38 <rclc_executor_get_zero_initialized_executor+0x10>)
 8014b30:	f00d fced 	bl	802250e <memcpy>
 8014b34:	4620      	mov	r0, r4
 8014b36:	bd10      	pop	{r4, pc}
 8014b38:	08024920 	.word	0x08024920
 8014b3c:	00000000 	.word	0x00000000

08014b40 <rclc_executor_init>:
 8014b40:	2900      	cmp	r1, #0
 8014b42:	d06a      	beq.n	8014c1a <rclc_executor_init+0xda>
 8014b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b48:	4605      	mov	r5, r0
 8014b4a:	b0b0      	sub	sp, #192	@ 0xc0
 8014b4c:	2800      	cmp	r0, #0
 8014b4e:	d05c      	beq.n	8014c0a <rclc_executor_init+0xca>
 8014b50:	4616      	mov	r6, r2
 8014b52:	4618      	mov	r0, r3
 8014b54:	4688      	mov	r8, r1
 8014b56:	461f      	mov	r7, r3
 8014b58:	f000 fcb6 	bl	80154c8 <rcutils_allocator_is_valid>
 8014b5c:	2e00      	cmp	r6, #0
 8014b5e:	d054      	beq.n	8014c0a <rclc_executor_init+0xca>
 8014b60:	f080 0401 	eor.w	r4, r0, #1
 8014b64:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8014b68:	d14f      	bne.n	8014c0a <rclc_executor_init+0xca>
 8014b6a:	2288      	movs	r2, #136	@ 0x88
 8014b6c:	4930      	ldr	r1, [pc, #192]	@ (8014c30 <rclc_executor_init+0xf0>)
 8014b6e:	a80e      	add	r0, sp, #56	@ 0x38
 8014b70:	f00d fccd 	bl	802250e <memcpy>
 8014b74:	a90e      	add	r1, sp, #56	@ 0x38
 8014b76:	2288      	movs	r2, #136	@ 0x88
 8014b78:	4628      	mov	r0, r5
 8014b7a:	f00d fcc8 	bl	802250e <memcpy>
 8014b7e:	4668      	mov	r0, sp
 8014b80:	f8c5 8000 	str.w	r8, [r5]
 8014b84:	60ae      	str	r6, [r5, #8]
 8014b86:	f007 fc87 	bl	801c498 <rcl_get_zero_initialized_wait_set>
 8014b8a:	46ec      	mov	ip, sp
 8014b8c:	f105 0e14 	add.w	lr, r5, #20
 8014b90:	f8d7 8000 	ldr.w	r8, [r7]
 8014b94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ba0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014ba4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ba8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8014c28 <rclc_executor_init+0xe8>
 8014bac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014bb0:	f8dc 3000 	ldr.w	r3, [ip]
 8014bb4:	01b0      	lsls	r0, r6, #6
 8014bb6:	6939      	ldr	r1, [r7, #16]
 8014bb8:	f8ce 3000 	str.w	r3, [lr]
 8014bbc:	612f      	str	r7, [r5, #16]
 8014bbe:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8014bc2:	47c0      	blx	r8
 8014bc4:	6068      	str	r0, [r5, #4]
 8014bc6:	b908      	cbnz	r0, 8014bcc <rclc_executor_init+0x8c>
 8014bc8:	e029      	b.n	8014c1e <rclc_executor_init+0xde>
 8014bca:	6868      	ldr	r0, [r5, #4]
 8014bcc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014bd0:	3401      	adds	r4, #1
 8014bd2:	4631      	mov	r1, r6
 8014bd4:	f000 fac0 	bl	8015158 <rclc_executor_handle_init>
 8014bd8:	42a6      	cmp	r6, r4
 8014bda:	d8f6      	bhi.n	8014bca <rclc_executor_init+0x8a>
 8014bdc:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8014be0:	f000 faae 	bl	8015140 <rclc_executor_handle_counters_zero_init>
 8014be4:	4a13      	ldr	r2, [pc, #76]	@ (8014c34 <rclc_executor_init+0xf4>)
 8014be6:	2300      	movs	r3, #0
 8014be8:	6868      	ldr	r0, [r5, #4]
 8014bea:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 8014bee:	b168      	cbz	r0, 8014c0c <rclc_executor_init+0xcc>
 8014bf0:	68ab      	ldr	r3, [r5, #8]
 8014bf2:	b173      	cbz	r3, 8014c12 <rclc_executor_init+0xd2>
 8014bf4:	692a      	ldr	r2, [r5, #16]
 8014bf6:	fab2 f382 	clz	r3, r2
 8014bfa:	095b      	lsrs	r3, r3, #5
 8014bfc:	b14a      	cbz	r2, 8014c12 <rclc_executor_init+0xd2>
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 8014c04:	b030      	add	sp, #192	@ 0xc0
 8014c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c0a:	200b      	movs	r0, #11
 8014c0c:	b030      	add	sp, #192	@ 0xc0
 8014c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c12:	2000      	movs	r0, #0
 8014c14:	b030      	add	sp, #192	@ 0xc0
 8014c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c1a:	200b      	movs	r0, #11
 8014c1c:	4770      	bx	lr
 8014c1e:	200a      	movs	r0, #10
 8014c20:	e7f4      	b.n	8014c0c <rclc_executor_init+0xcc>
 8014c22:	bf00      	nop
 8014c24:	f3af 8000 	nop.w
 8014c28:	3b9aca00 	.word	0x3b9aca00
 8014c2c:	00000000 	.word	0x00000000
 8014c30:	08024920 	.word	0x08024920
 8014c34:	08014aa1 	.word	0x08014aa1

08014c38 <rclc_executor_add_subscription>:
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	bf18      	it	ne
 8014c3c:	2a00      	cmpne	r2, #0
 8014c3e:	b570      	push	{r4, r5, r6, lr}
 8014c40:	4604      	mov	r4, r0
 8014c42:	bf0c      	ite	eq
 8014c44:	2001      	moveq	r0, #1
 8014c46:	2000      	movne	r0, #0
 8014c48:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014c4c:	2900      	cmp	r1, #0
 8014c4e:	bf08      	it	eq
 8014c50:	f040 0001 	orreq.w	r0, r0, #1
 8014c54:	bb28      	cbnz	r0, 8014ca2 <rclc_executor_add_subscription+0x6a>
 8014c56:	fab4 f584 	clz	r5, r4
 8014c5a:	096d      	lsrs	r5, r5, #5
 8014c5c:	b30c      	cbz	r4, 8014ca2 <rclc_executor_add_subscription+0x6a>
 8014c5e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014c62:	4286      	cmp	r6, r0
 8014c64:	d301      	bcc.n	8014c6a <rclc_executor_add_subscription+0x32>
 8014c66:	2001      	movs	r0, #1
 8014c68:	bd70      	pop	{r4, r5, r6, pc}
 8014c6a:	6860      	ldr	r0, [r4, #4]
 8014c6c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014c70:	f800 500e 	strb.w	r5, [r0, lr]
 8014c74:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014c78:	3601      	adds	r6, #1
 8014c7a:	6303      	str	r3, [r0, #48]	@ 0x30
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	62c5      	str	r5, [r0, #44]	@ 0x2c
 8014c80:	f104 0514 	add.w	r5, r4, #20
 8014c84:	f880 c001 	strb.w	ip, [r0, #1]
 8014c88:	8703      	strh	r3, [r0, #56]	@ 0x38
 8014c8a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014c8e:	4628      	mov	r0, r5
 8014c90:	60e6      	str	r6, [r4, #12]
 8014c92:	f007 fc15 	bl	801c4c0 <rcl_wait_set_is_valid>
 8014c96:	b930      	cbnz	r0, 8014ca6 <rclc_executor_add_subscription+0x6e>
 8014c98:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8014c9a:	2000      	movs	r0, #0
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8014ca0:	bd70      	pop	{r4, r5, r6, pc}
 8014ca2:	200b      	movs	r0, #11
 8014ca4:	bd70      	pop	{r4, r5, r6, pc}
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	f007 fc10 	bl	801c4cc <rcl_wait_set_fini>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d0f3      	beq.n	8014c98 <rclc_executor_add_subscription+0x60>
 8014cb0:	bd70      	pop	{r4, r5, r6, pc}
 8014cb2:	bf00      	nop

08014cb4 <rclc_executor_add_service>:
 8014cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb6:	9d06      	ldr	r5, [sp, #24]
 8014cb8:	4604      	mov	r4, r0
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	bf18      	it	ne
 8014cbe:	2d00      	cmpne	r5, #0
 8014cc0:	bf0c      	ite	eq
 8014cc2:	2001      	moveq	r0, #1
 8014cc4:	2000      	movne	r0, #0
 8014cc6:	2a00      	cmp	r2, #0
 8014cc8:	bf08      	it	eq
 8014cca:	f040 0001 	orreq.w	r0, r0, #1
 8014cce:	2900      	cmp	r1, #0
 8014cd0:	bf08      	it	eq
 8014cd2:	f040 0001 	orreq.w	r0, r0, #1
 8014cd6:	bb40      	cbnz	r0, 8014d2a <rclc_executor_add_service+0x76>
 8014cd8:	fab4 f684 	clz	r6, r4
 8014cdc:	0976      	lsrs	r6, r6, #5
 8014cde:	b324      	cbz	r4, 8014d2a <rclc_executor_add_service+0x76>
 8014ce0:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014ce4:	42b8      	cmp	r0, r7
 8014ce6:	d301      	bcc.n	8014cec <rclc_executor_add_service+0x38>
 8014ce8:	2001      	movs	r0, #1
 8014cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cec:	6867      	ldr	r7, [r4, #4]
 8014cee:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014cf2:	f100 0c01 	add.w	ip, r0, #1
 8014cf6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014cfa:	6283      	str	r3, [r0, #40]	@ 0x28
 8014cfc:	2305      	movs	r3, #5
 8014cfe:	6305      	str	r5, [r0, #48]	@ 0x30
 8014d00:	f104 0514 	add.w	r5, r4, #20
 8014d04:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014d08:	f827 300e 	strh.w	r3, [r7, lr]
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	62c6      	str	r6, [r0, #44]	@ 0x2c
 8014d10:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014d14:	4628      	mov	r0, r5
 8014d16:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014d1a:	f007 fbd1 	bl	801c4c0 <rcl_wait_set_is_valid>
 8014d1e:	b930      	cbnz	r0, 8014d2e <rclc_executor_add_service+0x7a>
 8014d20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8014d22:	2000      	movs	r0, #0
 8014d24:	3301      	adds	r3, #1
 8014d26:	6563      	str	r3, [r4, #84]	@ 0x54
 8014d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d2a:	200b      	movs	r0, #11
 8014d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d2e:	4628      	mov	r0, r5
 8014d30:	f007 fbcc 	bl	801c4cc <rcl_wait_set_fini>
 8014d34:	2800      	cmp	r0, #0
 8014d36:	d0f3      	beq.n	8014d20 <rclc_executor_add_service+0x6c>
 8014d38:	e7d7      	b.n	8014cea <rclc_executor_add_service+0x36>
 8014d3a:	bf00      	nop

08014d3c <rclc_executor_prepare>:
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	d044      	beq.n	8014dca <rclc_executor_prepare+0x8e>
 8014d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d42:	f100 0514 	add.w	r5, r0, #20
 8014d46:	b09b      	sub	sp, #108	@ 0x6c
 8014d48:	4604      	mov	r4, r0
 8014d4a:	4628      	mov	r0, r5
 8014d4c:	f007 fbb8 	bl	801c4c0 <rcl_wait_set_is_valid>
 8014d50:	b110      	cbz	r0, 8014d58 <rclc_executor_prepare+0x1c>
 8014d52:	2000      	movs	r0, #0
 8014d54:	b01b      	add	sp, #108	@ 0x6c
 8014d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d58:	4628      	mov	r0, r5
 8014d5a:	f007 fbb7 	bl	801c4cc <rcl_wait_set_fini>
 8014d5e:	2800      	cmp	r0, #0
 8014d60:	d130      	bne.n	8014dc4 <rclc_executor_prepare+0x88>
 8014d62:	a80c      	add	r0, sp, #48	@ 0x30
 8014d64:	ae04      	add	r6, sp, #16
 8014d66:	f007 fb97 	bl	801c498 <rcl_get_zero_initialized_wait_set>
 8014d6a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014d6e:	46ae      	mov	lr, r5
 8014d70:	6927      	ldr	r7, [r4, #16]
 8014d72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d76:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d8a:	f8dc 3000 	ldr.w	r3, [ip]
 8014d8e:	f8ce 3000 	str.w	r3, [lr]
 8014d92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014d94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014d96:	683b      	ldr	r3, [r7, #0]
 8014d98:	4628      	mov	r0, r5
 8014d9a:	6822      	ldr	r2, [r4, #0]
 8014d9c:	6033      	str	r3, [r6, #0]
 8014d9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014da0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8014da2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014da6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8014daa:	e9cd 2100 	strd	r2, r1, [sp]
 8014dae:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8014db0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014db2:	f007 fe8b 	bl	801cacc <rcl_wait_set_init>
 8014db6:	2800      	cmp	r0, #0
 8014db8:	d0cc      	beq.n	8014d54 <rclc_executor_prepare+0x18>
 8014dba:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014dbc:	f000 fba8 	bl	8015510 <rcutils_reset_error>
 8014dc0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014dc2:	e7c7      	b.n	8014d54 <rclc_executor_prepare+0x18>
 8014dc4:	f000 fba4 	bl	8015510 <rcutils_reset_error>
 8014dc8:	e7cb      	b.n	8014d62 <rclc_executor_prepare+0x26>
 8014dca:	200b      	movs	r0, #11
 8014dcc:	4770      	bx	lr
 8014dce:	bf00      	nop

08014dd0 <rclc_executor_spin_some.part.0>:
 8014dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd4:	4605      	mov	r5, r0
 8014dd6:	4691      	mov	r9, r2
 8014dd8:	4698      	mov	r8, r3
 8014dda:	f7ff ffaf 	bl	8014d3c <rclc_executor_prepare>
 8014dde:	f105 0614 	add.w	r6, r5, #20
 8014de2:	4630      	mov	r0, r6
 8014de4:	f007 fc3e 	bl	801c664 <rcl_wait_set_clear>
 8014de8:	4607      	mov	r7, r0
 8014dea:	2800      	cmp	r0, #0
 8014dec:	f040 80a8 	bne.w	8014f40 <rclc_executor_spin_some.part.0+0x170>
 8014df0:	68ab      	ldr	r3, [r5, #8]
 8014df2:	b30b      	cbz	r3, 8014e38 <rclc_executor_spin_some.part.0+0x68>
 8014df4:	4604      	mov	r4, r0
 8014df6:	6869      	ldr	r1, [r5, #4]
 8014df8:	01a2      	lsls	r2, r4, #6
 8014dfa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014dfe:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8014e02:	b1cb      	cbz	r3, 8014e38 <rclc_executor_spin_some.part.0+0x68>
 8014e04:	5c8b      	ldrb	r3, [r1, r2]
 8014e06:	2b0a      	cmp	r3, #10
 8014e08:	f200 80de 	bhi.w	8014fc8 <rclc_executor_spin_some.part.0+0x1f8>
 8014e0c:	e8df f003 	tbb	[pc, r3]
 8014e10:	8da99d9d 	.word	0x8da99d9d
 8014e14:	0606068d 	.word	0x0606068d
 8014e18:	c1ce      	.short	0xc1ce
 8014e1a:	b5          	.byte	0xb5
 8014e1b:	00          	.byte	0x00
 8014e1c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014e20:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014e24:	4630      	mov	r0, r6
 8014e26:	f007 ff6d 	bl	801cd04 <rcl_wait_set_add_service>
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	f040 8087 	bne.w	8014f3e <rclc_executor_spin_some.part.0+0x16e>
 8014e30:	3401      	adds	r4, #1
 8014e32:	68ab      	ldr	r3, [r5, #8]
 8014e34:	429c      	cmp	r4, r3
 8014e36:	d3de      	bcc.n	8014df6 <rclc_executor_spin_some.part.0+0x26>
 8014e38:	4643      	mov	r3, r8
 8014e3a:	464a      	mov	r2, r9
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	f007 ff8f 	bl	801cd60 <rcl_wait>
 8014e42:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	f000 80c6 	beq.w	8014fd8 <rclc_executor_spin_some.part.0+0x208>
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	f040 80bb 	bne.w	8014fc8 <rclc_executor_spin_some.part.0+0x1f8>
 8014e52:	68ab      	ldr	r3, [r5, #8]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	f000 8159 	beq.w	801510c <rclc_executor_spin_some.part.0+0x33c>
 8014e5a:	2400      	movs	r4, #0
 8014e5c:	f240 1991 	movw	r9, #401	@ 0x191
 8014e60:	46a0      	mov	r8, r4
 8014e62:	e00a      	b.n	8014e7a <rclc_executor_spin_some.part.0+0xaa>
 8014e64:	f7ff fb18 	bl	8014498 <_rclc_check_for_new_data>
 8014e68:	4604      	mov	r4, r0
 8014e6a:	b110      	cbz	r0, 8014e72 <rclc_executor_spin_some.part.0+0xa2>
 8014e6c:	4548      	cmp	r0, r9
 8014e6e:	f040 80b1 	bne.w	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8014e72:	68ab      	ldr	r3, [r5, #8]
 8014e74:	4598      	cmp	r8, r3
 8014e76:	f080 8126 	bcs.w	80150c6 <rclc_executor_spin_some.part.0+0x2f6>
 8014e7a:	686a      	ldr	r2, [r5, #4]
 8014e7c:	4631      	mov	r1, r6
 8014e7e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014e82:	f108 0801 	add.w	r8, r8, #1
 8014e86:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014e8a:	f1bc 0f00 	cmp.w	ip, #0
 8014e8e:	d1e9      	bne.n	8014e64 <rclc_executor_spin_some.part.0+0x94>
 8014e90:	4619      	mov	r1, r3
 8014e92:	4610      	mov	r0, r2
 8014e94:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014e98:	4798      	blx	r3
 8014e9a:	2800      	cmp	r0, #0
 8014e9c:	f000 809a 	beq.w	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8014ea0:	68ab      	ldr	r3, [r5, #8]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	f000 8096 	beq.w	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8014ea8:	f04f 0800 	mov.w	r8, #0
 8014eac:	f240 1991 	movw	r9, #401	@ 0x191
 8014eb0:	e009      	b.n	8014ec6 <rclc_executor_spin_some.part.0+0xf6>
 8014eb2:	f7ff fb3f 	bl	8014534 <_rclc_take_new_data>
 8014eb6:	4604      	mov	r4, r0
 8014eb8:	b110      	cbz	r0, 8014ec0 <rclc_executor_spin_some.part.0+0xf0>
 8014eba:	4548      	cmp	r0, r9
 8014ebc:	f040 808a 	bne.w	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8014ec0:	68ab      	ldr	r3, [r5, #8]
 8014ec2:	4598      	cmp	r8, r3
 8014ec4:	d209      	bcs.n	8014eda <rclc_executor_spin_some.part.0+0x10a>
 8014ec6:	6868      	ldr	r0, [r5, #4]
 8014ec8:	4631      	mov	r1, r6
 8014eca:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014ece:	f108 0801 	add.w	r8, r8, #1
 8014ed2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8014ed6:	2a00      	cmp	r2, #0
 8014ed8:	d1eb      	bne.n	8014eb2 <rclc_executor_spin_some.part.0+0xe2>
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d07a      	beq.n	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8014ede:	2600      	movs	r6, #0
 8014ee0:	e00e      	b.n	8014f00 <rclc_executor_spin_some.part.0+0x130>
 8014ee2:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014ee6:	2a08      	cmp	r2, #8
 8014ee8:	f000 80fc 	beq.w	80150e4 <rclc_executor_spin_some.part.0+0x314>
 8014eec:	2a09      	cmp	r2, #9
 8014eee:	f000 80ee 	beq.w	80150ce <rclc_executor_spin_some.part.0+0x2fe>
 8014ef2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8014ef6:	b98a      	cbnz	r2, 8014f1c <rclc_executor_spin_some.part.0+0x14c>
 8014ef8:	3601      	adds	r6, #1
 8014efa:	429e      	cmp	r6, r3
 8014efc:	d267      	bcs.n	8014fce <rclc_executor_spin_some.part.0+0x1fe>
 8014efe:	2400      	movs	r4, #0
 8014f00:	686a      	ldr	r2, [r5, #4]
 8014f02:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014f06:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014f0a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8014f0e:	2900      	cmp	r1, #0
 8014f10:	d060      	beq.n	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8014f12:	7841      	ldrb	r1, [r0, #1]
 8014f14:	2900      	cmp	r1, #0
 8014f16:	d0e4      	beq.n	8014ee2 <rclc_executor_spin_some.part.0+0x112>
 8014f18:	2901      	cmp	r1, #1
 8014f1a:	d1ed      	bne.n	8014ef8 <rclc_executor_spin_some.part.0+0x128>
 8014f1c:	f7ff fc7e 	bl	801481c <_rclc_execute.part.0>
 8014f20:	2800      	cmp	r0, #0
 8014f22:	f040 80b5 	bne.w	8015090 <rclc_executor_spin_some.part.0+0x2c0>
 8014f26:	68ab      	ldr	r3, [r5, #8]
 8014f28:	e7e6      	b.n	8014ef8 <rclc_executor_spin_some.part.0+0x128>
 8014f2a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f2e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f32:	4630      	mov	r0, r6
 8014f34:	f007 feba 	bl	801ccac <rcl_wait_set_add_client>
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	f43f af79 	beq.w	8014e30 <rclc_executor_spin_some.part.0+0x60>
 8014f3e:	4607      	mov	r7, r0
 8014f40:	f000 fae6 	bl	8015510 <rcutils_reset_error>
 8014f44:	4638      	mov	r0, r7
 8014f46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f4a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f4e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f52:	4630      	mov	r0, r6
 8014f54:	f007 fb5a 	bl	801c60c <rcl_wait_set_add_subscription>
 8014f58:	2800      	cmp	r0, #0
 8014f5a:	f43f af69 	beq.w	8014e30 <rclc_executor_spin_some.part.0+0x60>
 8014f5e:	4607      	mov	r7, r0
 8014f60:	e7ee      	b.n	8014f40 <rclc_executor_spin_some.part.0+0x170>
 8014f62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f6a:	4630      	mov	r0, r6
 8014f6c:	f007 fe6e 	bl	801cc4c <rcl_wait_set_add_timer>
 8014f70:	2800      	cmp	r0, #0
 8014f72:	f43f af5d 	beq.w	8014e30 <rclc_executor_spin_some.part.0+0x60>
 8014f76:	4607      	mov	r7, r0
 8014f78:	e7e2      	b.n	8014f40 <rclc_executor_spin_some.part.0+0x170>
 8014f7a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f7e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f82:	4630      	mov	r0, r6
 8014f84:	f007 fe36 	bl	801cbf4 <rcl_wait_set_add_guard_condition>
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	f43f af51 	beq.w	8014e30 <rclc_executor_spin_some.part.0+0x60>
 8014f8e:	4607      	mov	r7, r0
 8014f90:	e7d6      	b.n	8014f40 <rclc_executor_spin_some.part.0+0x170>
 8014f92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f96:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	3110      	adds	r1, #16
 8014f9e:	f008 fbb5 	bl	801d70c <rcl_action_wait_set_add_action_server>
 8014fa2:	2800      	cmp	r0, #0
 8014fa4:	f43f af44 	beq.w	8014e30 <rclc_executor_spin_some.part.0+0x60>
 8014fa8:	4607      	mov	r7, r0
 8014faa:	e7c9      	b.n	8014f40 <rclc_executor_spin_some.part.0+0x170>
 8014fac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	3110      	adds	r1, #16
 8014fba:	f008 f97d 	bl	801d2b8 <rcl_action_wait_set_add_action_client>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	f43f af36 	beq.w	8014e30 <rclc_executor_spin_some.part.0+0x60>
 8014fc4:	4607      	mov	r7, r0
 8014fc6:	e7bb      	b.n	8014f40 <rclc_executor_spin_some.part.0+0x170>
 8014fc8:	2701      	movs	r7, #1
 8014fca:	f000 faa1 	bl	8015510 <rcutils_reset_error>
 8014fce:	4638      	mov	r0, r7
 8014fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd4:	4627      	mov	r7, r4
 8014fd6:	e7fa      	b.n	8014fce <rclc_executor_spin_some.part.0+0x1fe>
 8014fd8:	68ab      	ldr	r3, [r5, #8]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	f000 8093 	beq.w	8015106 <rclc_executor_spin_some.part.0+0x336>
 8014fe0:	2400      	movs	r4, #0
 8014fe2:	f240 1991 	movw	r9, #401	@ 0x191
 8014fe6:	46a0      	mov	r8, r4
 8014fe8:	e008      	b.n	8014ffc <rclc_executor_spin_some.part.0+0x22c>
 8014fea:	f7ff fa55 	bl	8014498 <_rclc_check_for_new_data>
 8014fee:	4604      	mov	r4, r0
 8014ff0:	b108      	cbz	r0, 8014ff6 <rclc_executor_spin_some.part.0+0x226>
 8014ff2:	4548      	cmp	r0, r9
 8014ff4:	d1ee      	bne.n	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8014ff6:	68ab      	ldr	r3, [r5, #8]
 8014ff8:	4598      	cmp	r8, r3
 8014ffa:	d266      	bcs.n	80150ca <rclc_executor_spin_some.part.0+0x2fa>
 8014ffc:	686a      	ldr	r2, [r5, #4]
 8014ffe:	4631      	mov	r1, r6
 8015000:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8015004:	f108 0801 	add.w	r8, r8, #1
 8015008:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801500c:	f1bc 0f00 	cmp.w	ip, #0
 8015010:	d1eb      	bne.n	8014fea <rclc_executor_spin_some.part.0+0x21a>
 8015012:	4619      	mov	r1, r3
 8015014:	4610      	mov	r0, r2
 8015016:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801501a:	4798      	blx	r3
 801501c:	2800      	cmp	r0, #0
 801501e:	d0d9      	beq.n	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8015020:	68ab      	ldr	r3, [r5, #8]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d0d6      	beq.n	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8015026:	f04f 0a00 	mov.w	sl, #0
 801502a:	f240 1891 	movw	r8, #401	@ 0x191
 801502e:	f240 2959 	movw	r9, #601	@ 0x259
 8015032:	e00e      	b.n	8015052 <rclc_executor_spin_some.part.0+0x282>
 8015034:	f813 300b 	ldrb.w	r3, [r3, fp]
 8015038:	2b08      	cmp	r3, #8
 801503a:	d034      	beq.n	80150a6 <rclc_executor_spin_some.part.0+0x2d6>
 801503c:	2b09      	cmp	r3, #9
 801503e:	d029      	beq.n	8015094 <rclc_executor_spin_some.part.0+0x2c4>
 8015040:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8015044:	bb03      	cbnz	r3, 8015088 <rclc_executor_spin_some.part.0+0x2b8>
 8015046:	f10a 0a01 	add.w	sl, sl, #1
 801504a:	68ab      	ldr	r3, [r5, #8]
 801504c:	459a      	cmp	sl, r3
 801504e:	d2be      	bcs.n	8014fce <rclc_executor_spin_some.part.0+0x1fe>
 8015050:	2400      	movs	r4, #0
 8015052:	6868      	ldr	r0, [r5, #4]
 8015054:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8015058:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801505c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8015060:	2b00      	cmp	r3, #0
 8015062:	d0b7      	beq.n	8014fd4 <rclc_executor_spin_some.part.0+0x204>
 8015064:	4631      	mov	r1, r6
 8015066:	f7ff fa65 	bl	8014534 <_rclc_take_new_data>
 801506a:	2800      	cmp	r0, #0
 801506c:	bf18      	it	ne
 801506e:	4540      	cmpne	r0, r8
 8015070:	d001      	beq.n	8015076 <rclc_executor_spin_some.part.0+0x2a6>
 8015072:	4548      	cmp	r0, r9
 8015074:	d10c      	bne.n	8015090 <rclc_executor_spin_some.part.0+0x2c0>
 8015076:	686b      	ldr	r3, [r5, #4]
 8015078:	eb13 000b 	adds.w	r0, r3, fp
 801507c:	d021      	beq.n	80150c2 <rclc_executor_spin_some.part.0+0x2f2>
 801507e:	7842      	ldrb	r2, [r0, #1]
 8015080:	2a00      	cmp	r2, #0
 8015082:	d0d7      	beq.n	8015034 <rclc_executor_spin_some.part.0+0x264>
 8015084:	2a01      	cmp	r2, #1
 8015086:	d1de      	bne.n	8015046 <rclc_executor_spin_some.part.0+0x276>
 8015088:	f7ff fbc8 	bl	801481c <_rclc_execute.part.0>
 801508c:	2800      	cmp	r0, #0
 801508e:	d0da      	beq.n	8015046 <rclc_executor_spin_some.part.0+0x276>
 8015090:	4607      	mov	r7, r0
 8015092:	e79c      	b.n	8014fce <rclc_executor_spin_some.part.0+0x1fe>
 8015094:	6843      	ldr	r3, [r0, #4]
 8015096:	6a1a      	ldr	r2, [r3, #32]
 8015098:	2a00      	cmp	r2, #0
 801509a:	d1f5      	bne.n	8015088 <rclc_executor_spin_some.part.0+0x2b8>
 801509c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d0d0      	beq.n	8015046 <rclc_executor_spin_some.part.0+0x276>
 80150a4:	e7f0      	b.n	8015088 <rclc_executor_spin_some.part.0+0x2b8>
 80150a6:	6843      	ldr	r3, [r0, #4]
 80150a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80150aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80150ae:	d1eb      	bne.n	8015088 <rclc_executor_spin_some.part.0+0x2b8>
 80150b0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80150b4:	2a00      	cmp	r2, #0
 80150b6:	d1e7      	bne.n	8015088 <rclc_executor_spin_some.part.0+0x2b8>
 80150b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d0c2      	beq.n	8015046 <rclc_executor_spin_some.part.0+0x276>
 80150c0:	e7e2      	b.n	8015088 <rclc_executor_spin_some.part.0+0x2b8>
 80150c2:	270b      	movs	r7, #11
 80150c4:	e783      	b.n	8014fce <rclc_executor_spin_some.part.0+0x1fe>
 80150c6:	686a      	ldr	r2, [r5, #4]
 80150c8:	e6e2      	b.n	8014e90 <rclc_executor_spin_some.part.0+0xc0>
 80150ca:	686a      	ldr	r2, [r5, #4]
 80150cc:	e7a1      	b.n	8015012 <rclc_executor_spin_some.part.0+0x242>
 80150ce:	6842      	ldr	r2, [r0, #4]
 80150d0:	6a11      	ldr	r1, [r2, #32]
 80150d2:	2900      	cmp	r1, #0
 80150d4:	f47f af22 	bne.w	8014f1c <rclc_executor_spin_some.part.0+0x14c>
 80150d8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80150dc:	2a00      	cmp	r2, #0
 80150de:	f43f af0b 	beq.w	8014ef8 <rclc_executor_spin_some.part.0+0x128>
 80150e2:	e71b      	b.n	8014f1c <rclc_executor_spin_some.part.0+0x14c>
 80150e4:	6842      	ldr	r2, [r0, #4]
 80150e6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80150e8:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 80150ec:	f47f af16 	bne.w	8014f1c <rclc_executor_spin_some.part.0+0x14c>
 80150f0:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 80150f4:	2900      	cmp	r1, #0
 80150f6:	f47f af11 	bne.w	8014f1c <rclc_executor_spin_some.part.0+0x14c>
 80150fa:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 80150fe:	2a00      	cmp	r2, #0
 8015100:	f43f aefa 	beq.w	8014ef8 <rclc_executor_spin_some.part.0+0x128>
 8015104:	e70a      	b.n	8014f1c <rclc_executor_spin_some.part.0+0x14c>
 8015106:	686a      	ldr	r2, [r5, #4]
 8015108:	461c      	mov	r4, r3
 801510a:	e782      	b.n	8015012 <rclc_executor_spin_some.part.0+0x242>
 801510c:	686a      	ldr	r2, [r5, #4]
 801510e:	461c      	mov	r4, r3
 8015110:	e6be      	b.n	8014e90 <rclc_executor_spin_some.part.0+0xc0>
 8015112:	bf00      	nop

08015114 <rclc_executor_spin_some>:
 8015114:	b190      	cbz	r0, 801513c <rclc_executor_spin_some+0x28>
 8015116:	b570      	push	{r4, r5, r6, lr}
 8015118:	4604      	mov	r4, r0
 801511a:	6800      	ldr	r0, [r0, #0]
 801511c:	4616      	mov	r6, r2
 801511e:	461d      	mov	r5, r3
 8015120:	f005 fcfe 	bl	801ab20 <rcl_context_is_valid>
 8015124:	b130      	cbz	r0, 8015134 <rclc_executor_spin_some+0x20>
 8015126:	4632      	mov	r2, r6
 8015128:	462b      	mov	r3, r5
 801512a:	4620      	mov	r0, r4
 801512c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015130:	f7ff be4e 	b.w	8014dd0 <rclc_executor_spin_some.part.0>
 8015134:	f000 f9ec 	bl	8015510 <rcutils_reset_error>
 8015138:	2001      	movs	r0, #1
 801513a:	bd70      	pop	{r4, r5, r6, pc}
 801513c:	200b      	movs	r0, #11
 801513e:	4770      	bx	lr

08015140 <rclc_executor_handle_counters_zero_init>:
 8015140:	b130      	cbz	r0, 8015150 <rclc_executor_handle_counters_zero_init+0x10>
 8015142:	2220      	movs	r2, #32
 8015144:	2100      	movs	r1, #0
 8015146:	b508      	push	{r3, lr}
 8015148:	f00d f8c2 	bl	80222d0 <memset>
 801514c:	2000      	movs	r0, #0
 801514e:	bd08      	pop	{r3, pc}
 8015150:	200b      	movs	r0, #11
 8015152:	4770      	bx	lr
 8015154:	0000      	movs	r0, r0
	...

08015158 <rclc_executor_handle_init>:
 8015158:	4603      	mov	r3, r0
 801515a:	b178      	cbz	r0, 801517c <rclc_executor_handle_init+0x24>
 801515c:	2200      	movs	r2, #0
 801515e:	f04f 0c0b 	mov.w	ip, #11
 8015162:	6341      	str	r1, [r0, #52]	@ 0x34
 8015164:	4610      	mov	r0, r2
 8015166:	f8a3 c000 	strh.w	ip, [r3]
 801516a:	631a      	str	r2, [r3, #48]	@ 0x30
 801516c:	871a      	strh	r2, [r3, #56]	@ 0x38
 801516e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 8015180 <rclc_executor_handle_init+0x28>
 8015172:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8015176:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 801517a:	4770      	bx	lr
 801517c:	200b      	movs	r0, #11
 801517e:	4770      	bx	lr
	...

08015188 <rclc_support_init>:
 8015188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801518c:	b086      	sub	sp, #24
 801518e:	b3bb      	cbz	r3, 8015200 <rclc_support_init+0x78>
 8015190:	4606      	mov	r6, r0
 8015192:	b3a8      	cbz	r0, 8015200 <rclc_support_init+0x78>
 8015194:	461c      	mov	r4, r3
 8015196:	460f      	mov	r7, r1
 8015198:	4690      	mov	r8, r2
 801519a:	f005 fe2d 	bl	801adf8 <rcl_get_zero_initialized_init_options>
 801519e:	f104 050c 	add.w	r5, r4, #12
 80151a2:	9005      	str	r0, [sp, #20]
 80151a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151a8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80151ac:	a805      	add	r0, sp, #20
 80151ae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80151b2:	f005 fe23 	bl	801adfc <rcl_init_options_init>
 80151b6:	4605      	mov	r5, r0
 80151b8:	b9e0      	cbnz	r0, 80151f4 <rclc_support_init+0x6c>
 80151ba:	ad02      	add	r5, sp, #8
 80151bc:	4628      	mov	r0, r5
 80151be:	f005 fca5 	bl	801ab0c <rcl_get_zero_initialized_context>
 80151c2:	4633      	mov	r3, r6
 80151c4:	aa05      	add	r2, sp, #20
 80151c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151ca:	e886 0003 	stmia.w	r6, {r0, r1}
 80151ce:	4641      	mov	r1, r8
 80151d0:	4638      	mov	r0, r7
 80151d2:	f005 fd0b 	bl	801abec <rcl_init>
 80151d6:	4605      	mov	r5, r0
 80151d8:	b9b8      	cbnz	r0, 801520a <rclc_support_init+0x82>
 80151da:	4622      	mov	r2, r4
 80151dc:	f106 010c 	add.w	r1, r6, #12
 80151e0:	2003      	movs	r0, #3
 80151e2:	60b4      	str	r4, [r6, #8]
 80151e4:	f006 fd2e 	bl	801bc44 <rcl_clock_init>
 80151e8:	4605      	mov	r5, r0
 80151ea:	b970      	cbnz	r0, 801520a <rclc_support_init+0x82>
 80151ec:	a805      	add	r0, sp, #20
 80151ee:	f005 fe6b 	bl	801aec8 <rcl_init_options_fini>
 80151f2:	b108      	cbz	r0, 80151f8 <rclc_support_init+0x70>
 80151f4:	f000 f98c 	bl	8015510 <rcutils_reset_error>
 80151f8:	4628      	mov	r0, r5
 80151fa:	b006      	add	sp, #24
 80151fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015200:	250b      	movs	r5, #11
 8015202:	4628      	mov	r0, r5
 8015204:	b006      	add	sp, #24
 8015206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801520a:	f000 f981 	bl	8015510 <rcutils_reset_error>
 801520e:	a805      	add	r0, sp, #20
 8015210:	f005 fe5a 	bl	801aec8 <rcl_init_options_fini>
 8015214:	2800      	cmp	r0, #0
 8015216:	d0ef      	beq.n	80151f8 <rclc_support_init+0x70>
 8015218:	e7ec      	b.n	80151f4 <rclc_support_init+0x6c>
 801521a:	bf00      	nop

0801521c <rclc_node_init_default>:
 801521c:	2b00      	cmp	r3, #0
 801521e:	bf18      	it	ne
 8015220:	2a00      	cmpne	r2, #0
 8015222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015226:	4616      	mov	r6, r2
 8015228:	bf0c      	ite	eq
 801522a:	2201      	moveq	r2, #1
 801522c:	2200      	movne	r2, #0
 801522e:	b0a1      	sub	sp, #132	@ 0x84
 8015230:	2900      	cmp	r1, #0
 8015232:	bf08      	it	eq
 8015234:	f042 0201 	orreq.w	r2, r2, #1
 8015238:	bb22      	cbnz	r2, 8015284 <rclc_node_init_default+0x68>
 801523a:	4604      	mov	r4, r0
 801523c:	b310      	cbz	r0, 8015284 <rclc_node_init_default+0x68>
 801523e:	f10d 0810 	add.w	r8, sp, #16
 8015242:	461f      	mov	r7, r3
 8015244:	460d      	mov	r5, r1
 8015246:	f10d 0918 	add.w	r9, sp, #24
 801524a:	4640      	mov	r0, r8
 801524c:	f005 fef6 	bl	801b03c <rcl_get_zero_initialized_node>
 8015250:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015254:	e884 0003 	stmia.w	r4, {r0, r1}
 8015258:	4648      	mov	r0, r9
 801525a:	f006 f869 	bl	801b330 <rcl_node_get_default_options>
 801525e:	4640      	mov	r0, r8
 8015260:	f005 feec 	bl	801b03c <rcl_get_zero_initialized_node>
 8015264:	f8cd 9000 	str.w	r9, [sp]
 8015268:	463b      	mov	r3, r7
 801526a:	4632      	mov	r2, r6
 801526c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015270:	e884 0003 	stmia.w	r4, {r0, r1}
 8015274:	4629      	mov	r1, r5
 8015276:	4620      	mov	r0, r4
 8015278:	f005 feea 	bl	801b050 <rcl_node_init>
 801527c:	b930      	cbnz	r0, 801528c <rclc_node_init_default+0x70>
 801527e:	b021      	add	sp, #132	@ 0x84
 8015280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015284:	200b      	movs	r0, #11
 8015286:	b021      	add	sp, #132	@ 0x84
 8015288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801528c:	9003      	str	r0, [sp, #12]
 801528e:	f000 f93f 	bl	8015510 <rcutils_reset_error>
 8015292:	f000 f93d 	bl	8015510 <rcutils_reset_error>
 8015296:	9803      	ldr	r0, [sp, #12]
 8015298:	b021      	add	sp, #132	@ 0x84
 801529a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801529e:	bf00      	nop

080152a0 <rclc_publisher_init>:
 80152a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152a4:	b0a1      	sub	sp, #132	@ 0x84
 80152a6:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80152a8:	2e00      	cmp	r6, #0
 80152aa:	bf18      	it	ne
 80152ac:	2b00      	cmpne	r3, #0
 80152ae:	bf0c      	ite	eq
 80152b0:	f04f 0c01 	moveq.w	ip, #1
 80152b4:	f04f 0c00 	movne.w	ip, #0
 80152b8:	2a00      	cmp	r2, #0
 80152ba:	bf08      	it	eq
 80152bc:	f04c 0c01 	orreq.w	ip, ip, #1
 80152c0:	2900      	cmp	r1, #0
 80152c2:	bf08      	it	eq
 80152c4:	f04c 0c01 	orreq.w	ip, ip, #1
 80152c8:	f1bc 0f00 	cmp.w	ip, #0
 80152cc:	d11d      	bne.n	801530a <rclc_publisher_init+0x6a>
 80152ce:	4604      	mov	r4, r0
 80152d0:	b1d8      	cbz	r0, 801530a <rclc_publisher_init+0x6a>
 80152d2:	f10d 0910 	add.w	r9, sp, #16
 80152d6:	461f      	mov	r7, r3
 80152d8:	4690      	mov	r8, r2
 80152da:	460d      	mov	r5, r1
 80152dc:	f7fe ffc8 	bl	8014270 <rcl_get_zero_initialized_publisher>
 80152e0:	6020      	str	r0, [r4, #0]
 80152e2:	4648      	mov	r0, r9
 80152e4:	f7ff f864 	bl	80143b0 <rcl_publisher_get_default_options>
 80152e8:	4631      	mov	r1, r6
 80152ea:	2250      	movs	r2, #80	@ 0x50
 80152ec:	4648      	mov	r0, r9
 80152ee:	f00d f90e 	bl	802250e <memcpy>
 80152f2:	463b      	mov	r3, r7
 80152f4:	4642      	mov	r2, r8
 80152f6:	4629      	mov	r1, r5
 80152f8:	4620      	mov	r0, r4
 80152fa:	f8cd 9000 	str.w	r9, [sp]
 80152fe:	f7fe ffbd 	bl	801427c <rcl_publisher_init>
 8015302:	b930      	cbnz	r0, 8015312 <rclc_publisher_init+0x72>
 8015304:	b021      	add	sp, #132	@ 0x84
 8015306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801530a:	200b      	movs	r0, #11
 801530c:	b021      	add	sp, #132	@ 0x84
 801530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015312:	9003      	str	r0, [sp, #12]
 8015314:	f000 f8fc 	bl	8015510 <rcutils_reset_error>
 8015318:	9803      	ldr	r0, [sp, #12]
 801531a:	b021      	add	sp, #132	@ 0x84
 801531c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015320 <rclc_service_init>:
 8015320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015324:	b09f      	sub	sp, #124	@ 0x7c
 8015326:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 8015328:	2e00      	cmp	r6, #0
 801532a:	bf18      	it	ne
 801532c:	2b00      	cmpne	r3, #0
 801532e:	bf0c      	ite	eq
 8015330:	f04f 0c01 	moveq.w	ip, #1
 8015334:	f04f 0c00 	movne.w	ip, #0
 8015338:	2a00      	cmp	r2, #0
 801533a:	bf08      	it	eq
 801533c:	f04c 0c01 	orreq.w	ip, ip, #1
 8015340:	2900      	cmp	r1, #0
 8015342:	bf08      	it	eq
 8015344:	f04c 0c01 	orreq.w	ip, ip, #1
 8015348:	f1bc 0f00 	cmp.w	ip, #0
 801534c:	d11d      	bne.n	801538a <rclc_service_init+0x6a>
 801534e:	4604      	mov	r4, r0
 8015350:	b1d8      	cbz	r0, 801538a <rclc_service_init+0x6a>
 8015352:	f10d 0910 	add.w	r9, sp, #16
 8015356:	461f      	mov	r7, r3
 8015358:	4690      	mov	r8, r2
 801535a:	460d      	mov	r5, r1
 801535c:	f006 f9ec 	bl	801b738 <rcl_get_zero_initialized_service>
 8015360:	6020      	str	r0, [r4, #0]
 8015362:	4648      	mov	r0, r9
 8015364:	f006 fa80 	bl	801b868 <rcl_service_get_default_options>
 8015368:	4631      	mov	r1, r6
 801536a:	2250      	movs	r2, #80	@ 0x50
 801536c:	4648      	mov	r0, r9
 801536e:	f00d f8ce 	bl	802250e <memcpy>
 8015372:	463b      	mov	r3, r7
 8015374:	4642      	mov	r2, r8
 8015376:	4629      	mov	r1, r5
 8015378:	4620      	mov	r0, r4
 801537a:	f8cd 9000 	str.w	r9, [sp]
 801537e:	f006 f9e1 	bl	801b744 <rcl_service_init>
 8015382:	b930      	cbnz	r0, 8015392 <rclc_service_init+0x72>
 8015384:	b01f      	add	sp, #124	@ 0x7c
 8015386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801538a:	200b      	movs	r0, #11
 801538c:	b01f      	add	sp, #124	@ 0x7c
 801538e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015392:	9003      	str	r0, [sp, #12]
 8015394:	f000 f8bc 	bl	8015510 <rcutils_reset_error>
 8015398:	9803      	ldr	r0, [sp, #12]
 801539a:	b01f      	add	sp, #124	@ 0x7c
 801539c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080153a0 <rclc_subscription_init>:
 80153a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153a4:	b0a1      	sub	sp, #132	@ 0x84
 80153a6:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
 80153a8:	2e00      	cmp	r6, #0
 80153aa:	bf18      	it	ne
 80153ac:	2b00      	cmpne	r3, #0
 80153ae:	bf0c      	ite	eq
 80153b0:	f04f 0c01 	moveq.w	ip, #1
 80153b4:	f04f 0c00 	movne.w	ip, #0
 80153b8:	2a00      	cmp	r2, #0
 80153ba:	bf08      	it	eq
 80153bc:	f04c 0c01 	orreq.w	ip, ip, #1
 80153c0:	2900      	cmp	r1, #0
 80153c2:	bf08      	it	eq
 80153c4:	f04c 0c01 	orreq.w	ip, ip, #1
 80153c8:	f1bc 0f00 	cmp.w	ip, #0
 80153cc:	d11d      	bne.n	801540a <rclc_subscription_init+0x6a>
 80153ce:	4604      	mov	r4, r0
 80153d0:	b1d8      	cbz	r0, 801540a <rclc_subscription_init+0x6a>
 80153d2:	f10d 0910 	add.w	r9, sp, #16
 80153d6:	461f      	mov	r7, r3
 80153d8:	4690      	mov	r8, r2
 80153da:	460d      	mov	r5, r1
 80153dc:	f006 fad0 	bl	801b980 <rcl_get_zero_initialized_subscription>
 80153e0:	6020      	str	r0, [r4, #0]
 80153e2:	4648      	mov	r0, r9
 80153e4:	f006 fb80 	bl	801bae8 <rcl_subscription_get_default_options>
 80153e8:	4631      	mov	r1, r6
 80153ea:	2250      	movs	r2, #80	@ 0x50
 80153ec:	4648      	mov	r0, r9
 80153ee:	f00d f88e 	bl	802250e <memcpy>
 80153f2:	463b      	mov	r3, r7
 80153f4:	4642      	mov	r2, r8
 80153f6:	4629      	mov	r1, r5
 80153f8:	4620      	mov	r0, r4
 80153fa:	f8cd 9000 	str.w	r9, [sp]
 80153fe:	f006 fac5 	bl	801b98c <rcl_subscription_init>
 8015402:	b930      	cbnz	r0, 8015412 <rclc_subscription_init+0x72>
 8015404:	b021      	add	sp, #132	@ 0x84
 8015406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801540a:	200b      	movs	r0, #11
 801540c:	b021      	add	sp, #132	@ 0x84
 801540e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015412:	9003      	str	r0, [sp, #12]
 8015414:	f000 f87c 	bl	8015510 <rcutils_reset_error>
 8015418:	9803      	ldr	r0, [sp, #12]
 801541a:	b021      	add	sp, #132	@ 0x84
 801541c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015420 <rclc_timer_init_default>:
 8015420:	b361      	cbz	r1, 801547c <rclc_timer_init_default+0x5c>
 8015422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015426:	4606      	mov	r6, r0
 8015428:	b08a      	sub	sp, #40	@ 0x28
 801542a:	b318      	cbz	r0, 8015474 <rclc_timer_init_default+0x54>
 801542c:	460d      	mov	r5, r1
 801542e:	4690      	mov	r8, r2
 8015430:	461f      	mov	r7, r3
 8015432:	f006 fdff 	bl	801c034 <rcl_get_zero_initialized_timer>
 8015436:	68ac      	ldr	r4, [r5, #8]
 8015438:	f10d 0c0c 	add.w	ip, sp, #12
 801543c:	6030      	str	r0, [r6, #0]
 801543e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015440:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015444:	6823      	ldr	r3, [r4, #0]
 8015446:	462a      	mov	r2, r5
 8015448:	f105 010c 	add.w	r1, r5, #12
 801544c:	4630      	mov	r0, r6
 801544e:	f8cc 3000 	str.w	r3, [ip]
 8015452:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015454:	e9cd 8700 	strd	r8, r7, [sp]
 8015458:	9302      	str	r3, [sp, #8]
 801545a:	f006 fdf1 	bl	801c040 <rcl_timer_init>
 801545e:	b910      	cbnz	r0, 8015466 <rclc_timer_init_default+0x46>
 8015460:	b00a      	add	sp, #40	@ 0x28
 8015462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015466:	9009      	str	r0, [sp, #36]	@ 0x24
 8015468:	f000 f852 	bl	8015510 <rcutils_reset_error>
 801546c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801546e:	b00a      	add	sp, #40	@ 0x28
 8015470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015474:	200b      	movs	r0, #11
 8015476:	b00a      	add	sp, #40	@ 0x28
 8015478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801547c:	200b      	movs	r0, #11
 801547e:	4770      	bx	lr

08015480 <__default_zero_allocate>:
 8015480:	f00c ba4e 	b.w	8021920 <calloc>

08015484 <__default_reallocate>:
 8015484:	f00c bbec 	b.w	8021c60 <realloc>

08015488 <__default_deallocate>:
 8015488:	f00c bac8 	b.w	8021a1c <free>

0801548c <__default_allocate>:
 801548c:	f00c babe 	b.w	8021a0c <malloc>

08015490 <rcutils_get_zero_initialized_allocator>:
 8015490:	b510      	push	{r4, lr}
 8015492:	4c05      	ldr	r4, [pc, #20]	@ (80154a8 <rcutils_get_zero_initialized_allocator+0x18>)
 8015494:	4686      	mov	lr, r0
 8015496:	4684      	mov	ip, r0
 8015498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801549a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801549e:	6823      	ldr	r3, [r4, #0]
 80154a0:	4670      	mov	r0, lr
 80154a2:	f8cc 3000 	str.w	r3, [ip]
 80154a6:	bd10      	pop	{r4, pc}
 80154a8:	080249a8 	.word	0x080249a8

080154ac <rcutils_get_default_allocator>:
 80154ac:	b510      	push	{r4, lr}
 80154ae:	4c05      	ldr	r4, [pc, #20]	@ (80154c4 <rcutils_get_default_allocator+0x18>)
 80154b0:	4686      	mov	lr, r0
 80154b2:	4684      	mov	ip, r0
 80154b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154ba:	6823      	ldr	r3, [r4, #0]
 80154bc:	4670      	mov	r0, lr
 80154be:	f8cc 3000 	str.w	r3, [ip]
 80154c2:	bd10      	pop	{r4, pc}
 80154c4:	24000c94 	.word	0x24000c94

080154c8 <rcutils_allocator_is_valid>:
 80154c8:	b158      	cbz	r0, 80154e2 <rcutils_allocator_is_valid+0x1a>
 80154ca:	6803      	ldr	r3, [r0, #0]
 80154cc:	b143      	cbz	r3, 80154e0 <rcutils_allocator_is_valid+0x18>
 80154ce:	6843      	ldr	r3, [r0, #4]
 80154d0:	b133      	cbz	r3, 80154e0 <rcutils_allocator_is_valid+0x18>
 80154d2:	68c3      	ldr	r3, [r0, #12]
 80154d4:	b123      	cbz	r3, 80154e0 <rcutils_allocator_is_valid+0x18>
 80154d6:	6880      	ldr	r0, [r0, #8]
 80154d8:	3800      	subs	r0, #0
 80154da:	bf18      	it	ne
 80154dc:	2001      	movne	r0, #1
 80154de:	4770      	bx	lr
 80154e0:	4618      	mov	r0, r3
 80154e2:	4770      	bx	lr

080154e4 <rcutils_get_error_string>:
 80154e4:	4b06      	ldr	r3, [pc, #24]	@ (8015500 <rcutils_get_error_string+0x1c>)
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	b13b      	cbz	r3, 80154fa <rcutils_get_error_string+0x16>
 80154ea:	4b06      	ldr	r3, [pc, #24]	@ (8015504 <rcutils_get_error_string+0x20>)
 80154ec:	781a      	ldrb	r2, [r3, #0]
 80154ee:	b90a      	cbnz	r2, 80154f4 <rcutils_get_error_string+0x10>
 80154f0:	2201      	movs	r2, #1
 80154f2:	701a      	strb	r2, [r3, #0]
 80154f4:	4b04      	ldr	r3, [pc, #16]	@ (8015508 <rcutils_get_error_string+0x24>)
 80154f6:	7818      	ldrb	r0, [r3, #0]
 80154f8:	4770      	bx	lr
 80154fa:	4b04      	ldr	r3, [pc, #16]	@ (801550c <rcutils_get_error_string+0x28>)
 80154fc:	7818      	ldrb	r0, [r3, #0]
 80154fe:	4770      	bx	lr
 8015500:	240648f0 	.word	0x240648f0
 8015504:	24064909 	.word	0x24064909
 8015508:	24064908 	.word	0x24064908
 801550c:	080239b8 	.word	0x080239b8

08015510 <rcutils_reset_error>:
 8015510:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8015530 <rcutils_reset_error+0x20>
 8015514:	2300      	movs	r3, #0
 8015516:	4a08      	ldr	r2, [pc, #32]	@ (8015538 <rcutils_reset_error+0x28>)
 8015518:	4808      	ldr	r0, [pc, #32]	@ (801553c <rcutils_reset_error+0x2c>)
 801551a:	8013      	strh	r3, [r2, #0]
 801551c:	4908      	ldr	r1, [pc, #32]	@ (8015540 <rcutils_reset_error+0x30>)
 801551e:	7003      	strb	r3, [r0, #0]
 8015520:	700b      	strb	r3, [r1, #0]
 8015522:	ed82 7b02 	vstr	d7, [r2, #8]
 8015526:	4a07      	ldr	r2, [pc, #28]	@ (8015544 <rcutils_reset_error+0x34>)
 8015528:	7013      	strb	r3, [r2, #0]
 801552a:	4770      	bx	lr
 801552c:	f3af 8000 	nop.w
	...
 8015538:	240648f8 	.word	0x240648f8
 801553c:	24064909 	.word	0x24064909
 8015540:	24064908 	.word	0x24064908
 8015544:	240648f0 	.word	0x240648f0

08015548 <rcutils_system_time_now>:
 8015548:	b300      	cbz	r0, 801558c <rcutils_system_time_now+0x44>
 801554a:	b570      	push	{r4, r5, r6, lr}
 801554c:	b084      	sub	sp, #16
 801554e:	4604      	mov	r4, r0
 8015550:	2001      	movs	r0, #1
 8015552:	4669      	mov	r1, sp
 8015554:	f7ec feb8 	bl	80022c8 <clock_gettime>
 8015558:	e9dd 3100 	ldrd	r3, r1, [sp]
 801555c:	2900      	cmp	r1, #0
 801555e:	db12      	blt.n	8015586 <rcutils_system_time_now+0x3e>
 8015560:	ea53 0201 	orrs.w	r2, r3, r1
 8015564:	9d02      	ldr	r5, [sp, #8]
 8015566:	d101      	bne.n	801556c <rcutils_system_time_now+0x24>
 8015568:	2d00      	cmp	r5, #0
 801556a:	db0c      	blt.n	8015586 <rcutils_system_time_now+0x3e>
 801556c:	4e08      	ldr	r6, [pc, #32]	@ (8015590 <rcutils_system_time_now+0x48>)
 801556e:	2000      	movs	r0, #0
 8015570:	fba3 3206 	umull	r3, r2, r3, r6
 8015574:	195b      	adds	r3, r3, r5
 8015576:	fb06 2201 	mla	r2, r6, r1, r2
 801557a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801557e:	e9c4 3200 	strd	r3, r2, [r4]
 8015582:	b004      	add	sp, #16
 8015584:	bd70      	pop	{r4, r5, r6, pc}
 8015586:	2002      	movs	r0, #2
 8015588:	b004      	add	sp, #16
 801558a:	bd70      	pop	{r4, r5, r6, pc}
 801558c:	200b      	movs	r0, #11
 801558e:	4770      	bx	lr
 8015590:	3b9aca00 	.word	0x3b9aca00

08015594 <rcutils_steady_time_now>:
 8015594:	b300      	cbz	r0, 80155d8 <rcutils_steady_time_now+0x44>
 8015596:	b570      	push	{r4, r5, r6, lr}
 8015598:	b084      	sub	sp, #16
 801559a:	4604      	mov	r4, r0
 801559c:	2000      	movs	r0, #0
 801559e:	4669      	mov	r1, sp
 80155a0:	f7ec fe92 	bl	80022c8 <clock_gettime>
 80155a4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80155a8:	2900      	cmp	r1, #0
 80155aa:	db12      	blt.n	80155d2 <rcutils_steady_time_now+0x3e>
 80155ac:	ea53 0201 	orrs.w	r2, r3, r1
 80155b0:	9d02      	ldr	r5, [sp, #8]
 80155b2:	d101      	bne.n	80155b8 <rcutils_steady_time_now+0x24>
 80155b4:	2d00      	cmp	r5, #0
 80155b6:	db0c      	blt.n	80155d2 <rcutils_steady_time_now+0x3e>
 80155b8:	4e08      	ldr	r6, [pc, #32]	@ (80155dc <rcutils_steady_time_now+0x48>)
 80155ba:	2000      	movs	r0, #0
 80155bc:	fba3 3206 	umull	r3, r2, r3, r6
 80155c0:	195b      	adds	r3, r3, r5
 80155c2:	fb06 2201 	mla	r2, r6, r1, r2
 80155c6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80155ca:	e9c4 3200 	strd	r3, r2, [r4]
 80155ce:	b004      	add	sp, #16
 80155d0:	bd70      	pop	{r4, r5, r6, pc}
 80155d2:	2002      	movs	r0, #2
 80155d4:	b004      	add	sp, #16
 80155d6:	bd70      	pop	{r4, r5, r6, pc}
 80155d8:	200b      	movs	r0, #11
 80155da:	4770      	bx	lr
 80155dc:	3b9aca00 	.word	0x3b9aca00

080155e0 <rmw_get_default_publisher_options>:
 80155e0:	2200      	movs	r2, #0
 80155e2:	6002      	str	r2, [r0, #0]
 80155e4:	7102      	strb	r2, [r0, #4]
 80155e6:	4770      	bx	lr

080155e8 <rmw_uros_set_custom_transport>:
 80155e8:	b470      	push	{r4, r5, r6}
 80155ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80155ee:	b162      	cbz	r2, 801560a <rmw_uros_set_custom_transport+0x22>
 80155f0:	b15b      	cbz	r3, 801560a <rmw_uros_set_custom_transport+0x22>
 80155f2:	b155      	cbz	r5, 801560a <rmw_uros_set_custom_transport+0x22>
 80155f4:	b14e      	cbz	r6, 801560a <rmw_uros_set_custom_transport+0x22>
 80155f6:	4c06      	ldr	r4, [pc, #24]	@ (8015610 <rmw_uros_set_custom_transport+0x28>)
 80155f8:	7020      	strb	r0, [r4, #0]
 80155fa:	2000      	movs	r0, #0
 80155fc:	6166      	str	r6, [r4, #20]
 80155fe:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015602:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015606:	bc70      	pop	{r4, r5, r6}
 8015608:	4770      	bx	lr
 801560a:	200b      	movs	r0, #11
 801560c:	bc70      	pop	{r4, r5, r6}
 801560e:	4770      	bx	lr
 8015610:	2406490c 	.word	0x2406490c

08015614 <rmw_uros_ping_agent>:
 8015614:	4b1f      	ldr	r3, [pc, #124]	@ (8015694 <rmw_uros_ping_agent+0x80>)
 8015616:	7b1a      	ldrb	r2, [r3, #12]
 8015618:	b570      	push	{r4, r5, r6, lr}
 801561a:	4605      	mov	r5, r0
 801561c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8015620:	460e      	mov	r6, r1
 8015622:	b192      	cbz	r2, 801564a <rmw_uros_ping_agent+0x36>
 8015624:	681c      	ldr	r4, [r3, #0]
 8015626:	b184      	cbz	r4, 801564a <rmw_uros_ping_agent+0x36>
 8015628:	68a0      	ldr	r0, [r4, #8]
 801562a:	4632      	mov	r2, r6
 801562c:	4629      	mov	r1, r5
 801562e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015632:	f001 ff0f 	bl	8017454 <uxr_ping_agent_session>
 8015636:	6864      	ldr	r4, [r4, #4]
 8015638:	f080 0301 	eor.w	r3, r0, #1
 801563c:	b2d8      	uxtb	r0, r3
 801563e:	b10c      	cbz	r4, 8015644 <rmw_uros_ping_agent+0x30>
 8015640:	2800      	cmp	r0, #0
 8015642:	d1f1      	bne.n	8015628 <rmw_uros_ping_agent+0x14>
 8015644:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015648:	bd70      	pop	{r4, r5, r6, pc}
 801564a:	4b13      	ldr	r3, [pc, #76]	@ (8015698 <rmw_uros_ping_agent+0x84>)
 801564c:	2100      	movs	r1, #0
 801564e:	781a      	ldrb	r2, [r3, #0]
 8015650:	6918      	ldr	r0, [r3, #16]
 8015652:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 8015656:	685a      	ldr	r2, [r3, #4]
 8015658:	909c      	str	r0, [sp, #624]	@ 0x270
 801565a:	92a3      	str	r2, [sp, #652]	@ 0x28c
 801565c:	6958      	ldr	r0, [r3, #20]
 801565e:	68da      	ldr	r2, [r3, #12]
 8015660:	689b      	ldr	r3, [r3, #8]
 8015662:	929b      	str	r2, [sp, #620]	@ 0x26c
 8015664:	466a      	mov	r2, sp
 8015666:	909d      	str	r0, [sp, #628]	@ 0x274
 8015668:	4608      	mov	r0, r1
 801566a:	939a      	str	r3, [sp, #616]	@ 0x268
 801566c:	f000 f9c6 	bl	80159fc <rmw_uxrce_transport_init>
 8015670:	2800      	cmp	r0, #0
 8015672:	d1e7      	bne.n	8015644 <rmw_uros_ping_agent+0x30>
 8015674:	4632      	mov	r2, r6
 8015676:	4629      	mov	r1, r5
 8015678:	a89e      	add	r0, sp, #632	@ 0x278
 801567a:	f001 ff37 	bl	80174ec <uxr_ping_agent_attempts>
 801567e:	4604      	mov	r4, r0
 8015680:	4668      	mov	r0, sp
 8015682:	f001 feb3 	bl	80173ec <uxr_close_custom_transport>
 8015686:	f084 0301 	eor.w	r3, r4, #1
 801568a:	b2d8      	uxtb	r0, r3
 801568c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015690:	bd70      	pop	{r4, r5, r6, pc}
 8015692:	bf00      	nop
 8015694:	24069224 	.word	0x24069224
 8015698:	2406490c 	.word	0x2406490c

0801569c <flush_session>:
 801569c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801569e:	f002 bcb7 	b.w	8018010 <uxr_run_session_until_confirm_delivery>
 80156a2:	bf00      	nop

080156a4 <rmw_publish>:
 80156a4:	2800      	cmp	r0, #0
 80156a6:	d053      	beq.n	8015750 <rmw_publish+0xac>
 80156a8:	b570      	push	{r4, r5, r6, lr}
 80156aa:	460d      	mov	r5, r1
 80156ac:	b08e      	sub	sp, #56	@ 0x38
 80156ae:	2900      	cmp	r1, #0
 80156b0:	d04b      	beq.n	801574a <rmw_publish+0xa6>
 80156b2:	4604      	mov	r4, r0
 80156b4:	6800      	ldr	r0, [r0, #0]
 80156b6:	f000 fdcf 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d045      	beq.n	801574a <rmw_publish+0xa6>
 80156be:	6866      	ldr	r6, [r4, #4]
 80156c0:	2e00      	cmp	r6, #0
 80156c2:	d042      	beq.n	801574a <rmw_publish+0xa6>
 80156c4:	69b4      	ldr	r4, [r6, #24]
 80156c6:	4628      	mov	r0, r5
 80156c8:	6923      	ldr	r3, [r4, #16]
 80156ca:	4798      	blx	r3
 80156cc:	69f3      	ldr	r3, [r6, #28]
 80156ce:	9005      	str	r0, [sp, #20]
 80156d0:	b113      	cbz	r3, 80156d8 <rmw_publish+0x34>
 80156d2:	a805      	add	r0, sp, #20
 80156d4:	4798      	blx	r3
 80156d6:	9805      	ldr	r0, [sp, #20]
 80156d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80156dc:	691b      	ldr	r3, [r3, #16]
 80156de:	9000      	str	r0, [sp, #0]
 80156e0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80156e4:	6972      	ldr	r2, [r6, #20]
 80156e6:	ab06      	add	r3, sp, #24
 80156e8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80156ea:	f003 ff8b 	bl	8019604 <uxr_prepare_output_stream>
 80156ee:	b1d8      	cbz	r0, 8015728 <rmw_publish+0x84>
 80156f0:	68a3      	ldr	r3, [r4, #8]
 80156f2:	a906      	add	r1, sp, #24
 80156f4:	4628      	mov	r0, r5
 80156f6:	4798      	blx	r3
 80156f8:	6a33      	ldr	r3, [r6, #32]
 80156fa:	4604      	mov	r4, r0
 80156fc:	b10b      	cbz	r3, 8015702 <rmw_publish+0x5e>
 80156fe:	a806      	add	r0, sp, #24
 8015700:	4798      	blx	r3
 8015702:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8015706:	2b01      	cmp	r3, #1
 8015708:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801570c:	d022      	beq.n	8015754 <rmw_publish+0xb0>
 801570e:	6918      	ldr	r0, [r3, #16]
 8015710:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8015712:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015716:	f002 fc7b 	bl	8018010 <uxr_run_session_until_confirm_delivery>
 801571a:	4020      	ands	r0, r4
 801571c:	b2c4      	uxtb	r4, r0
 801571e:	f084 0001 	eor.w	r0, r4, #1
 8015722:	b2c0      	uxtb	r0, r0
 8015724:	b00e      	add	sp, #56	@ 0x38
 8015726:	bd70      	pop	{r4, r5, r6, pc}
 8015728:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801572c:	6918      	ldr	r0, [r3, #16]
 801572e:	9b05      	ldr	r3, [sp, #20]
 8015730:	9602      	str	r6, [sp, #8]
 8015732:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015736:	9300      	str	r3, [sp, #0]
 8015738:	4b09      	ldr	r3, [pc, #36]	@ (8015760 <rmw_publish+0xbc>)
 801573a:	9301      	str	r3, [sp, #4]
 801573c:	ab06      	add	r3, sp, #24
 801573e:	6972      	ldr	r2, [r6, #20]
 8015740:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8015742:	f003 ff8f 	bl	8019664 <uxr_prepare_output_stream_fragmented>
 8015746:	2800      	cmp	r0, #0
 8015748:	d1d2      	bne.n	80156f0 <rmw_publish+0x4c>
 801574a:	2001      	movs	r0, #1
 801574c:	b00e      	add	sp, #56	@ 0x38
 801574e:	bd70      	pop	{r4, r5, r6, pc}
 8015750:	2001      	movs	r0, #1
 8015752:	4770      	bx	lr
 8015754:	6918      	ldr	r0, [r3, #16]
 8015756:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801575a:	f002 f89f 	bl	801789c <uxr_flash_output_streams>
 801575e:	e7de      	b.n	801571e <rmw_publish+0x7a>
 8015760:	0801569d 	.word	0x0801569d

08015764 <rmw_create_publisher>:
 8015764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015768:	b087      	sub	sp, #28
 801576a:	2800      	cmp	r0, #0
 801576c:	f000 80d2 	beq.w	8015914 <rmw_create_publisher+0x1b0>
 8015770:	460e      	mov	r6, r1
 8015772:	2900      	cmp	r1, #0
 8015774:	f000 80ce 	beq.w	8015914 <rmw_create_publisher+0x1b0>
 8015778:	4604      	mov	r4, r0
 801577a:	6800      	ldr	r0, [r0, #0]
 801577c:	4615      	mov	r5, r2
 801577e:	461f      	mov	r7, r3
 8015780:	f000 fd6a 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 8015784:	f080 0001 	eor.w	r0, r0, #1
 8015788:	b2c0      	uxtb	r0, r0
 801578a:	2800      	cmp	r0, #0
 801578c:	f040 80c2 	bne.w	8015914 <rmw_create_publisher+0x1b0>
 8015790:	2d00      	cmp	r5, #0
 8015792:	f000 80bf 	beq.w	8015914 <rmw_create_publisher+0x1b0>
 8015796:	782b      	ldrb	r3, [r5, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	f000 80bb 	beq.w	8015914 <rmw_create_publisher+0x1b0>
 801579e:	2f00      	cmp	r7, #0
 80157a0:	f000 80b8 	beq.w	8015914 <rmw_create_publisher+0x1b0>
 80157a4:	485e      	ldr	r0, [pc, #376]	@ (8015920 <rmw_create_publisher+0x1bc>)
 80157a6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80157aa:	f008 ff73 	bl	801e694 <get_memory>
 80157ae:	2800      	cmp	r0, #0
 80157b0:	f000 80b0 	beq.w	8015914 <rmw_create_publisher+0x1b0>
 80157b4:	6884      	ldr	r4, [r0, #8]
 80157b6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80157ba:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80157be:	f008 ffd1 	bl	801e764 <rmw_get_implementation_identifier>
 80157c2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80157c6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80157ca:	4628      	mov	r0, r5
 80157cc:	f7ea fd92 	bl	80002f4 <strlen>
 80157d0:	3001      	adds	r0, #1
 80157d2:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 80157d6:	283c      	cmp	r0, #60	@ 0x3c
 80157d8:	f200 808f 	bhi.w	80158fa <rmw_create_publisher+0x196>
 80157dc:	462b      	mov	r3, r5
 80157de:	4a51      	ldr	r2, [pc, #324]	@ (8015924 <rmw_create_publisher+0x1c0>)
 80157e0:	213c      	movs	r1, #60	@ 0x3c
 80157e2:	4650      	mov	r0, sl
 80157e4:	f00c fc06 	bl	8021ff4 <sniprintf>
 80157e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80157ec:	4639      	mov	r1, r7
 80157ee:	2250      	movs	r2, #80	@ 0x50
 80157f0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80157f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80157f6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80157fa:	f00c fe88 	bl	802250e <memcpy>
 80157fe:	7a3b      	ldrb	r3, [r7, #8]
 8015800:	4630      	mov	r0, r6
 8015802:	4949      	ldr	r1, [pc, #292]	@ (8015928 <rmw_create_publisher+0x1c4>)
 8015804:	2b02      	cmp	r3, #2
 8015806:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801580a:	bf0c      	ite	eq
 801580c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8015810:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8015814:	67a3      	str	r3, [r4, #120]	@ 0x78
 8015816:	2300      	movs	r3, #0
 8015818:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801581c:	f000 fd98 	bl	8016350 <get_message_typesupport_handle>
 8015820:	2800      	cmp	r0, #0
 8015822:	d06a      	beq.n	80158fa <rmw_create_publisher+0x196>
 8015824:	6842      	ldr	r2, [r0, #4]
 8015826:	61a2      	str	r2, [r4, #24]
 8015828:	2a00      	cmp	r2, #0
 801582a:	d066      	beq.n	80158fa <rmw_create_publisher+0x196>
 801582c:	4629      	mov	r1, r5
 801582e:	463b      	mov	r3, r7
 8015830:	4648      	mov	r0, r9
 8015832:	f009 fa03 	bl	801ec3c <create_topic>
 8015836:	6260      	str	r0, [r4, #36]	@ 0x24
 8015838:	2800      	cmp	r0, #0
 801583a:	d062      	beq.n	8015902 <rmw_create_publisher+0x19e>
 801583c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015840:	2103      	movs	r1, #3
 8015842:	2506      	movs	r5, #6
 8015844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015848:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 801584c:	1c42      	adds	r2, r0, #1
 801584e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8015852:	f001 fdcf 	bl	80173f4 <uxr_object_id>
 8015856:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801585a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801585e:	6120      	str	r0, [r4, #16]
 8015860:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8015864:	6910      	ldr	r0, [r2, #16]
 8015866:	9500      	str	r5, [sp, #0]
 8015868:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801586c:	6819      	ldr	r1, [r3, #0]
 801586e:	6922      	ldr	r2, [r4, #16]
 8015870:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015874:	f001 fb78 	bl	8016f68 <uxr_buffer_create_publisher_bin>
 8015878:	4602      	mov	r2, r0
 801587a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801587e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015882:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015886:	f000 fbd5 	bl	8016034 <run_xrce_session>
 801588a:	b3b0      	cbz	r0, 80158fa <rmw_create_publisher+0x196>
 801588c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015890:	2105      	movs	r1, #5
 8015892:	f10d 0a10 	add.w	sl, sp, #16
 8015896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801589a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801589e:	1c42      	adds	r2, r0, #1
 80158a0:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80158a4:	f001 fda6 	bl	80173f4 <uxr_object_id>
 80158a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80158ac:	4639      	mov	r1, r7
 80158ae:	6160      	str	r0, [r4, #20]
 80158b0:	691e      	ldr	r6, [r3, #16]
 80158b2:	4650      	mov	r0, sl
 80158b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158b8:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80158bc:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80158c0:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 80158c4:	f000 fbd2 	bl	801606c <convert_qos_profile>
 80158c8:	9503      	str	r5, [sp, #12]
 80158ca:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80158ce:	9001      	str	r0, [sp, #4]
 80158d0:	4630      	mov	r0, r6
 80158d2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80158d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80158da:	9300      	str	r3, [sp, #0]
 80158dc:	6839      	ldr	r1, [r7, #0]
 80158de:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80158e2:	f001 fba1 	bl	8017028 <uxr_buffer_create_datawriter_bin>
 80158e6:	4602      	mov	r2, r0
 80158e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80158ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80158f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80158f4:	f000 fb9e 	bl	8016034 <run_xrce_session>
 80158f8:	b970      	cbnz	r0, 8015918 <rmw_create_publisher+0x1b4>
 80158fa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80158fc:	b108      	cbz	r0, 8015902 <rmw_create_publisher+0x19e>
 80158fe:	f000 fa8b 	bl	8015e18 <rmw_uxrce_fini_topic_memory>
 8015902:	4640      	mov	r0, r8
 8015904:	f04f 0800 	mov.w	r8, #0
 8015908:	f000 fa2e 	bl	8015d68 <rmw_uxrce_fini_publisher_memory>
 801590c:	4640      	mov	r0, r8
 801590e:	b007      	add	sp, #28
 8015910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015914:	f04f 0800 	mov.w	r8, #0
 8015918:	4640      	mov	r0, r8
 801591a:	b007      	add	sp, #28
 801591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015920:	24069204 	.word	0x24069204
 8015924:	080249cc 	.word	0x080249cc
 8015928:	08023698 	.word	0x08023698

0801592c <rmw_publisher_get_actual_qos>:
 801592c:	b178      	cbz	r0, 801594e <rmw_publisher_get_actual_qos+0x22>
 801592e:	b510      	push	{r4, lr}
 8015930:	fab1 f481 	clz	r4, r1
 8015934:	0964      	lsrs	r4, r4, #5
 8015936:	b141      	cbz	r1, 801594a <rmw_publisher_get_actual_qos+0x1e>
 8015938:	6843      	ldr	r3, [r0, #4]
 801593a:	2250      	movs	r2, #80	@ 0x50
 801593c:	4608      	mov	r0, r1
 801593e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8015942:	f00c fde4 	bl	802250e <memcpy>
 8015946:	4620      	mov	r0, r4
 8015948:	bd10      	pop	{r4, pc}
 801594a:	200b      	movs	r0, #11
 801594c:	bd10      	pop	{r4, pc}
 801594e:	200b      	movs	r0, #11
 8015950:	4770      	bx	lr
 8015952:	bf00      	nop

08015954 <rmw_destroy_publisher>:
 8015954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015958:	b128      	cbz	r0, 8015966 <rmw_destroy_publisher+0x12>
 801595a:	4604      	mov	r4, r0
 801595c:	6800      	ldr	r0, [r0, #0]
 801595e:	460d      	mov	r5, r1
 8015960:	f000 fc7a 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 8015964:	b918      	cbnz	r0, 801596e <rmw_destroy_publisher+0x1a>
 8015966:	2401      	movs	r4, #1
 8015968:	4620      	mov	r0, r4
 801596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801596e:	6863      	ldr	r3, [r4, #4]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d0f8      	beq.n	8015966 <rmw_destroy_publisher+0x12>
 8015974:	fab5 f485 	clz	r4, r5
 8015978:	0964      	lsrs	r4, r4, #5
 801597a:	2d00      	cmp	r5, #0
 801597c:	d0f3      	beq.n	8015966 <rmw_destroy_publisher+0x12>
 801597e:	6828      	ldr	r0, [r5, #0]
 8015980:	f000 fc6a 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 8015984:	2800      	cmp	r0, #0
 8015986:	d0ee      	beq.n	8015966 <rmw_destroy_publisher+0x12>
 8015988:	686e      	ldr	r6, [r5, #4]
 801598a:	2e00      	cmp	r6, #0
 801598c:	d0eb      	beq.n	8015966 <rmw_destroy_publisher+0x12>
 801598e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8015990:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8015994:	f009 f9a2 	bl	801ecdc <destroy_topic>
 8015998:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801599c:	6972      	ldr	r2, [r6, #20]
 801599e:	6918      	ldr	r0, [r3, #16]
 80159a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80159a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159a8:	6819      	ldr	r1, [r3, #0]
 80159aa:	f001 fa29 	bl	8016e00 <uxr_buffer_delete_entity>
 80159ae:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80159b2:	4680      	mov	r8, r0
 80159b4:	6932      	ldr	r2, [r6, #16]
 80159b6:	6918      	ldr	r0, [r3, #16]
 80159b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80159bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159c0:	6819      	ldr	r1, [r3, #0]
 80159c2:	f001 fa1d 	bl	8016e00 <uxr_buffer_delete_entity>
 80159c6:	4606      	mov	r6, r0
 80159c8:	6938      	ldr	r0, [r7, #16]
 80159ca:	4642      	mov	r2, r8
 80159cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80159d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80159d4:	f000 fb2e 	bl	8016034 <run_xrce_session>
 80159d8:	693f      	ldr	r7, [r7, #16]
 80159da:	4632      	mov	r2, r6
 80159dc:	4606      	mov	r6, r0
 80159de:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80159e2:	4638      	mov	r0, r7
 80159e4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80159e8:	f000 fb24 	bl	8016034 <run_xrce_session>
 80159ec:	b126      	cbz	r6, 80159f8 <rmw_destroy_publisher+0xa4>
 80159ee:	b118      	cbz	r0, 80159f8 <rmw_destroy_publisher+0xa4>
 80159f0:	4628      	mov	r0, r5
 80159f2:	f000 f9b9 	bl	8015d68 <rmw_uxrce_fini_publisher_memory>
 80159f6:	e7b7      	b.n	8015968 <rmw_destroy_publisher+0x14>
 80159f8:	2402      	movs	r4, #2
 80159fa:	e7f9      	b.n	80159f0 <rmw_destroy_publisher+0x9c>

080159fc <rmw_uxrce_transport_init>:
 80159fc:	b508      	push	{r3, lr}
 80159fe:	b108      	cbz	r0, 8015a04 <rmw_uxrce_transport_init+0x8>
 8015a00:	f100 0210 	add.w	r2, r0, #16
 8015a04:	b139      	cbz	r1, 8015a16 <rmw_uxrce_transport_init+0x1a>
 8015a06:	6949      	ldr	r1, [r1, #20]
 8015a08:	4610      	mov	r0, r2
 8015a0a:	f001 fcbb 	bl	8017384 <uxr_init_custom_transport>
 8015a0e:	f080 0001 	eor.w	r0, r0, #1
 8015a12:	b2c0      	uxtb	r0, r0
 8015a14:	bd08      	pop	{r3, pc}
 8015a16:	4b04      	ldr	r3, [pc, #16]	@ (8015a28 <rmw_uxrce_transport_init+0x2c>)
 8015a18:	4610      	mov	r0, r2
 8015a1a:	6859      	ldr	r1, [r3, #4]
 8015a1c:	f001 fcb2 	bl	8017384 <uxr_init_custom_transport>
 8015a20:	f080 0001 	eor.w	r0, r0, #1
 8015a24:	b2c0      	uxtb	r0, r0
 8015a26:	bd08      	pop	{r3, pc}
 8015a28:	2406490c 	.word	0x2406490c

08015a2c <rmw_uros_epoch_nanos>:
 8015a2c:	4b05      	ldr	r3, [pc, #20]	@ (8015a44 <rmw_uros_epoch_nanos+0x18>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	b123      	cbz	r3, 8015a3c <rmw_uros_epoch_nanos+0x10>
 8015a32:	6898      	ldr	r0, [r3, #8]
 8015a34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a38:	f001 bf26 	b.w	8017888 <uxr_epoch_nanos>
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	2100      	movs	r1, #0
 8015a40:	4770      	bx	lr
 8015a42:	bf00      	nop
 8015a44:	24069224 	.word	0x24069224

08015a48 <rmw_uros_sync_session>:
 8015a48:	b508      	push	{r3, lr}
 8015a4a:	4b07      	ldr	r3, [pc, #28]	@ (8015a68 <rmw_uros_sync_session+0x20>)
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	b14b      	cbz	r3, 8015a64 <rmw_uros_sync_session+0x1c>
 8015a50:	4601      	mov	r1, r0
 8015a52:	6898      	ldr	r0, [r3, #8]
 8015a54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a58:	f002 fb56 	bl	8018108 <uxr_sync_session>
 8015a5c:	f080 0001 	eor.w	r0, r0, #1
 8015a60:	b2c0      	uxtb	r0, r0
 8015a62:	bd08      	pop	{r3, pc}
 8015a64:	2001      	movs	r0, #1
 8015a66:	bd08      	pop	{r3, pc}
 8015a68:	24069224 	.word	0x24069224

08015a6c <rmw_uxrce_init_service_memory>:
 8015a6c:	b1e2      	cbz	r2, 8015aa8 <rmw_uxrce_init_service_memory+0x3c>
 8015a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a72:	7b05      	ldrb	r5, [r0, #12]
 8015a74:	4606      	mov	r6, r0
 8015a76:	b9ad      	cbnz	r5, 8015aa4 <rmw_uxrce_init_service_memory+0x38>
 8015a78:	23c8      	movs	r3, #200	@ 0xc8
 8015a7a:	4617      	mov	r7, r2
 8015a7c:	460c      	mov	r4, r1
 8015a7e:	46a8      	mov	r8, r5
 8015a80:	6083      	str	r3, [r0, #8]
 8015a82:	f240 1301 	movw	r3, #257	@ 0x101
 8015a86:	e9c0 5500 	strd	r5, r5, [r0]
 8015a8a:	8183      	strh	r3, [r0, #12]
 8015a8c:	3501      	adds	r5, #1
 8015a8e:	4621      	mov	r1, r4
 8015a90:	4630      	mov	r0, r6
 8015a92:	f008 fe0f 	bl	801e6b4 <put_memory>
 8015a96:	42af      	cmp	r7, r5
 8015a98:	60a4      	str	r4, [r4, #8]
 8015a9a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015a9e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015aa2:	d1f3      	bne.n	8015a8c <rmw_uxrce_init_service_memory+0x20>
 8015aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aa8:	4770      	bx	lr
 8015aaa:	bf00      	nop

08015aac <rmw_uxrce_init_client_memory>:
 8015aac:	b1e2      	cbz	r2, 8015ae8 <rmw_uxrce_init_client_memory+0x3c>
 8015aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab2:	7b05      	ldrb	r5, [r0, #12]
 8015ab4:	4606      	mov	r6, r0
 8015ab6:	b9ad      	cbnz	r5, 8015ae4 <rmw_uxrce_init_client_memory+0x38>
 8015ab8:	23c8      	movs	r3, #200	@ 0xc8
 8015aba:	4617      	mov	r7, r2
 8015abc:	460c      	mov	r4, r1
 8015abe:	46a8      	mov	r8, r5
 8015ac0:	6083      	str	r3, [r0, #8]
 8015ac2:	f240 1301 	movw	r3, #257	@ 0x101
 8015ac6:	e9c0 5500 	strd	r5, r5, [r0]
 8015aca:	8183      	strh	r3, [r0, #12]
 8015acc:	3501      	adds	r5, #1
 8015ace:	4621      	mov	r1, r4
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	f008 fdef 	bl	801e6b4 <put_memory>
 8015ad6:	42af      	cmp	r7, r5
 8015ad8:	60a4      	str	r4, [r4, #8]
 8015ada:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8015ade:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015ae2:	d1f3      	bne.n	8015acc <rmw_uxrce_init_client_memory+0x20>
 8015ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop

08015aec <rmw_uxrce_init_publisher_memory>:
 8015aec:	b1e2      	cbz	r2, 8015b28 <rmw_uxrce_init_publisher_memory+0x3c>
 8015aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015af2:	7b05      	ldrb	r5, [r0, #12]
 8015af4:	4606      	mov	r6, r0
 8015af6:	b9ad      	cbnz	r5, 8015b24 <rmw_uxrce_init_publisher_memory+0x38>
 8015af8:	23d8      	movs	r3, #216	@ 0xd8
 8015afa:	4617      	mov	r7, r2
 8015afc:	460c      	mov	r4, r1
 8015afe:	46a8      	mov	r8, r5
 8015b00:	6083      	str	r3, [r0, #8]
 8015b02:	f240 1301 	movw	r3, #257	@ 0x101
 8015b06:	e9c0 5500 	strd	r5, r5, [r0]
 8015b0a:	8183      	strh	r3, [r0, #12]
 8015b0c:	3501      	adds	r5, #1
 8015b0e:	4621      	mov	r1, r4
 8015b10:	4630      	mov	r0, r6
 8015b12:	f008 fdcf 	bl	801e6b4 <put_memory>
 8015b16:	42af      	cmp	r7, r5
 8015b18:	60a4      	str	r4, [r4, #8]
 8015b1a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015b1e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015b22:	d1f3      	bne.n	8015b0c <rmw_uxrce_init_publisher_memory+0x20>
 8015b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b28:	4770      	bx	lr
 8015b2a:	bf00      	nop

08015b2c <rmw_uxrce_init_subscription_memory>:
 8015b2c:	b1e2      	cbz	r2, 8015b68 <rmw_uxrce_init_subscription_memory+0x3c>
 8015b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b32:	7b05      	ldrb	r5, [r0, #12]
 8015b34:	4606      	mov	r6, r0
 8015b36:	b9ad      	cbnz	r5, 8015b64 <rmw_uxrce_init_subscription_memory+0x38>
 8015b38:	23d8      	movs	r3, #216	@ 0xd8
 8015b3a:	4617      	mov	r7, r2
 8015b3c:	460c      	mov	r4, r1
 8015b3e:	46a8      	mov	r8, r5
 8015b40:	6083      	str	r3, [r0, #8]
 8015b42:	f240 1301 	movw	r3, #257	@ 0x101
 8015b46:	e9c0 5500 	strd	r5, r5, [r0]
 8015b4a:	8183      	strh	r3, [r0, #12]
 8015b4c:	3501      	adds	r5, #1
 8015b4e:	4621      	mov	r1, r4
 8015b50:	4630      	mov	r0, r6
 8015b52:	f008 fdaf 	bl	801e6b4 <put_memory>
 8015b56:	42af      	cmp	r7, r5
 8015b58:	60a4      	str	r4, [r4, #8]
 8015b5a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8015b5e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015b62:	d1f3      	bne.n	8015b4c <rmw_uxrce_init_subscription_memory+0x20>
 8015b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b68:	4770      	bx	lr
 8015b6a:	bf00      	nop

08015b6c <rmw_uxrce_init_node_memory>:
 8015b6c:	b1e2      	cbz	r2, 8015ba8 <rmw_uxrce_init_node_memory+0x3c>
 8015b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b72:	7b05      	ldrb	r5, [r0, #12]
 8015b74:	4606      	mov	r6, r0
 8015b76:	b9ad      	cbnz	r5, 8015ba4 <rmw_uxrce_init_node_memory+0x38>
 8015b78:	23a4      	movs	r3, #164	@ 0xa4
 8015b7a:	4617      	mov	r7, r2
 8015b7c:	460c      	mov	r4, r1
 8015b7e:	46a8      	mov	r8, r5
 8015b80:	6083      	str	r3, [r0, #8]
 8015b82:	f240 1301 	movw	r3, #257	@ 0x101
 8015b86:	e9c0 5500 	strd	r5, r5, [r0]
 8015b8a:	8183      	strh	r3, [r0, #12]
 8015b8c:	3501      	adds	r5, #1
 8015b8e:	4621      	mov	r1, r4
 8015b90:	4630      	mov	r0, r6
 8015b92:	f008 fd8f 	bl	801e6b4 <put_memory>
 8015b96:	42af      	cmp	r7, r5
 8015b98:	60a4      	str	r4, [r4, #8]
 8015b9a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8015b9e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015ba2:	d1f3      	bne.n	8015b8c <rmw_uxrce_init_node_memory+0x20>
 8015ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ba8:	4770      	bx	lr
 8015baa:	bf00      	nop

08015bac <rmw_uxrce_init_session_memory>:
 8015bac:	b1ea      	cbz	r2, 8015bea <rmw_uxrce_init_session_memory+0x3e>
 8015bae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bb2:	7b05      	ldrb	r5, [r0, #12]
 8015bb4:	4606      	mov	r6, r0
 8015bb6:	b9b5      	cbnz	r5, 8015be6 <rmw_uxrce_init_session_memory+0x3a>
 8015bb8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8015bbc:	f240 1301 	movw	r3, #257	@ 0x101
 8015bc0:	4617      	mov	r7, r2
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	46a9      	mov	r9, r5
 8015bc6:	f8c0 8008 	str.w	r8, [r0, #8]
 8015bca:	8183      	strh	r3, [r0, #12]
 8015bcc:	e9c0 5500 	strd	r5, r5, [r0]
 8015bd0:	3501      	adds	r5, #1
 8015bd2:	4621      	mov	r1, r4
 8015bd4:	4630      	mov	r0, r6
 8015bd6:	f008 fd6d 	bl	801e6b4 <put_memory>
 8015bda:	42af      	cmp	r7, r5
 8015bdc:	60a4      	str	r4, [r4, #8]
 8015bde:	f884 900c 	strb.w	r9, [r4, #12]
 8015be2:	4444      	add	r4, r8
 8015be4:	d1f4      	bne.n	8015bd0 <rmw_uxrce_init_session_memory+0x24>
 8015be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bea:	4770      	bx	lr

08015bec <rmw_uxrce_init_topic_memory>:
 8015bec:	b1e2      	cbz	r2, 8015c28 <rmw_uxrce_init_topic_memory+0x3c>
 8015bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bf2:	7b05      	ldrb	r5, [r0, #12]
 8015bf4:	4606      	mov	r6, r0
 8015bf6:	b9ad      	cbnz	r5, 8015c24 <rmw_uxrce_init_topic_memory+0x38>
 8015bf8:	231c      	movs	r3, #28
 8015bfa:	4617      	mov	r7, r2
 8015bfc:	460c      	mov	r4, r1
 8015bfe:	46a8      	mov	r8, r5
 8015c00:	6083      	str	r3, [r0, #8]
 8015c02:	f240 1301 	movw	r3, #257	@ 0x101
 8015c06:	e9c0 5500 	strd	r5, r5, [r0]
 8015c0a:	8183      	strh	r3, [r0, #12]
 8015c0c:	3501      	adds	r5, #1
 8015c0e:	4621      	mov	r1, r4
 8015c10:	4630      	mov	r0, r6
 8015c12:	f008 fd4f 	bl	801e6b4 <put_memory>
 8015c16:	42af      	cmp	r7, r5
 8015c18:	60a4      	str	r4, [r4, #8]
 8015c1a:	f104 041c 	add.w	r4, r4, #28
 8015c1e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015c22:	d1f3      	bne.n	8015c0c <rmw_uxrce_init_topic_memory+0x20>
 8015c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c28:	4770      	bx	lr
 8015c2a:	bf00      	nop

08015c2c <rmw_uxrce_init_static_input_buffer_memory>:
 8015c2c:	b1ea      	cbz	r2, 8015c6a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8015c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c32:	7b05      	ldrb	r5, [r0, #12]
 8015c34:	4606      	mov	r6, r0
 8015c36:	b9b5      	cbnz	r5, 8015c66 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8015c38:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8015c3c:	4617      	mov	r7, r2
 8015c3e:	460c      	mov	r4, r1
 8015c40:	46a8      	mov	r8, r5
 8015c42:	6083      	str	r3, [r0, #8]
 8015c44:	f240 1301 	movw	r3, #257	@ 0x101
 8015c48:	e9c0 5500 	strd	r5, r5, [r0]
 8015c4c:	8183      	strh	r3, [r0, #12]
 8015c4e:	3501      	adds	r5, #1
 8015c50:	4621      	mov	r1, r4
 8015c52:	4630      	mov	r0, r6
 8015c54:	f008 fd2e 	bl	801e6b4 <put_memory>
 8015c58:	42af      	cmp	r7, r5
 8015c5a:	60a4      	str	r4, [r4, #8]
 8015c5c:	f884 800c 	strb.w	r8, [r4, #12]
 8015c60:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8015c64:	d1f3      	bne.n	8015c4e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c6a:	4770      	bx	lr

08015c6c <rmw_uxrce_init_init_options_impl_memory>:
 8015c6c:	b1e2      	cbz	r2, 8015ca8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8015c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c72:	7b05      	ldrb	r5, [r0, #12]
 8015c74:	4606      	mov	r6, r0
 8015c76:	b9ad      	cbnz	r5, 8015ca4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015c78:	232c      	movs	r3, #44	@ 0x2c
 8015c7a:	4617      	mov	r7, r2
 8015c7c:	460c      	mov	r4, r1
 8015c7e:	46a8      	mov	r8, r5
 8015c80:	6083      	str	r3, [r0, #8]
 8015c82:	f240 1301 	movw	r3, #257	@ 0x101
 8015c86:	e9c0 5500 	strd	r5, r5, [r0]
 8015c8a:	8183      	strh	r3, [r0, #12]
 8015c8c:	3501      	adds	r5, #1
 8015c8e:	4621      	mov	r1, r4
 8015c90:	4630      	mov	r0, r6
 8015c92:	f008 fd0f 	bl	801e6b4 <put_memory>
 8015c96:	42af      	cmp	r7, r5
 8015c98:	60a4      	str	r4, [r4, #8]
 8015c9a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8015c9e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015ca2:	d1f3      	bne.n	8015c8c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop

08015cac <rmw_uxrce_init_wait_set_memory>:
 8015cac:	b1e2      	cbz	r2, 8015ce8 <rmw_uxrce_init_wait_set_memory+0x3c>
 8015cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb2:	7b05      	ldrb	r5, [r0, #12]
 8015cb4:	4606      	mov	r6, r0
 8015cb6:	b9ad      	cbnz	r5, 8015ce4 <rmw_uxrce_init_wait_set_memory+0x38>
 8015cb8:	231c      	movs	r3, #28
 8015cba:	4617      	mov	r7, r2
 8015cbc:	460c      	mov	r4, r1
 8015cbe:	46a8      	mov	r8, r5
 8015cc0:	6083      	str	r3, [r0, #8]
 8015cc2:	f240 1301 	movw	r3, #257	@ 0x101
 8015cc6:	e9c0 5500 	strd	r5, r5, [r0]
 8015cca:	8183      	strh	r3, [r0, #12]
 8015ccc:	3501      	adds	r5, #1
 8015cce:	4621      	mov	r1, r4
 8015cd0:	4630      	mov	r0, r6
 8015cd2:	f008 fcef 	bl	801e6b4 <put_memory>
 8015cd6:	42af      	cmp	r7, r5
 8015cd8:	60a4      	str	r4, [r4, #8]
 8015cda:	f104 041c 	add.w	r4, r4, #28
 8015cde:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015ce2:	d1f3      	bne.n	8015ccc <rmw_uxrce_init_wait_set_memory+0x20>
 8015ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ce8:	4770      	bx	lr
 8015cea:	bf00      	nop

08015cec <rmw_uxrce_init_guard_condition_memory>:
 8015cec:	b1e2      	cbz	r2, 8015d28 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8015cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf2:	7b05      	ldrb	r5, [r0, #12]
 8015cf4:	4606      	mov	r6, r0
 8015cf6:	b9ad      	cbnz	r5, 8015d24 <rmw_uxrce_init_guard_condition_memory+0x38>
 8015cf8:	2320      	movs	r3, #32
 8015cfa:	4617      	mov	r7, r2
 8015cfc:	460c      	mov	r4, r1
 8015cfe:	46a8      	mov	r8, r5
 8015d00:	6083      	str	r3, [r0, #8]
 8015d02:	f240 1301 	movw	r3, #257	@ 0x101
 8015d06:	e9c0 5500 	strd	r5, r5, [r0]
 8015d0a:	8183      	strh	r3, [r0, #12]
 8015d0c:	3501      	adds	r5, #1
 8015d0e:	4621      	mov	r1, r4
 8015d10:	4630      	mov	r0, r6
 8015d12:	f008 fccf 	bl	801e6b4 <put_memory>
 8015d16:	42af      	cmp	r7, r5
 8015d18:	60a4      	str	r4, [r4, #8]
 8015d1a:	f104 0420 	add.w	r4, r4, #32
 8015d1e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8015d22:	d1f3      	bne.n	8015d0c <rmw_uxrce_init_guard_condition_memory+0x20>
 8015d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d28:	4770      	bx	lr
 8015d2a:	bf00      	nop

08015d2c <rmw_uxrce_fini_session_memory>:
 8015d2c:	4601      	mov	r1, r0
 8015d2e:	4801      	ldr	r0, [pc, #4]	@ (8015d34 <rmw_uxrce_fini_session_memory+0x8>)
 8015d30:	f008 bcc0 	b.w	801e6b4 <put_memory>
 8015d34:	24069224 	.word	0x24069224

08015d38 <rmw_uxrce_fini_node_memory>:
 8015d38:	b538      	push	{r3, r4, r5, lr}
 8015d3a:	4604      	mov	r4, r0
 8015d3c:	6800      	ldr	r0, [r0, #0]
 8015d3e:	b128      	cbz	r0, 8015d4c <rmw_uxrce_fini_node_memory+0x14>
 8015d40:	4b07      	ldr	r3, [pc, #28]	@ (8015d60 <rmw_uxrce_fini_node_memory+0x28>)
 8015d42:	6819      	ldr	r1, [r3, #0]
 8015d44:	f7ea facc 	bl	80002e0 <strcmp>
 8015d48:	b940      	cbnz	r0, 8015d5c <rmw_uxrce_fini_node_memory+0x24>
 8015d4a:	6020      	str	r0, [r4, #0]
 8015d4c:	6861      	ldr	r1, [r4, #4]
 8015d4e:	b129      	cbz	r1, 8015d5c <rmw_uxrce_fini_node_memory+0x24>
 8015d50:	2500      	movs	r5, #0
 8015d52:	4804      	ldr	r0, [pc, #16]	@ (8015d64 <rmw_uxrce_fini_node_memory+0x2c>)
 8015d54:	610d      	str	r5, [r1, #16]
 8015d56:	f008 fcad 	bl	801e6b4 <put_memory>
 8015d5a:	6065      	str	r5, [r4, #4]
 8015d5c:	bd38      	pop	{r3, r4, r5, pc}
 8015d5e:	bf00      	nop
 8015d60:	08025948 	.word	0x08025948
 8015d64:	240691f4 	.word	0x240691f4

08015d68 <rmw_uxrce_fini_publisher_memory>:
 8015d68:	b510      	push	{r4, lr}
 8015d6a:	4604      	mov	r4, r0
 8015d6c:	6800      	ldr	r0, [r0, #0]
 8015d6e:	b128      	cbz	r0, 8015d7c <rmw_uxrce_fini_publisher_memory+0x14>
 8015d70:	4b06      	ldr	r3, [pc, #24]	@ (8015d8c <rmw_uxrce_fini_publisher_memory+0x24>)
 8015d72:	6819      	ldr	r1, [r3, #0]
 8015d74:	f7ea fab4 	bl	80002e0 <strcmp>
 8015d78:	b938      	cbnz	r0, 8015d8a <rmw_uxrce_fini_publisher_memory+0x22>
 8015d7a:	6020      	str	r0, [r4, #0]
 8015d7c:	6861      	ldr	r1, [r4, #4]
 8015d7e:	b121      	cbz	r1, 8015d8a <rmw_uxrce_fini_publisher_memory+0x22>
 8015d80:	4803      	ldr	r0, [pc, #12]	@ (8015d90 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015d82:	f008 fc97 	bl	801e6b4 <put_memory>
 8015d86:	2300      	movs	r3, #0
 8015d88:	6063      	str	r3, [r4, #4]
 8015d8a:	bd10      	pop	{r4, pc}
 8015d8c:	08025948 	.word	0x08025948
 8015d90:	24069204 	.word	0x24069204

08015d94 <rmw_uxrce_fini_subscription_memory>:
 8015d94:	b510      	push	{r4, lr}
 8015d96:	4604      	mov	r4, r0
 8015d98:	6800      	ldr	r0, [r0, #0]
 8015d9a:	b128      	cbz	r0, 8015da8 <rmw_uxrce_fini_subscription_memory+0x14>
 8015d9c:	4b06      	ldr	r3, [pc, #24]	@ (8015db8 <rmw_uxrce_fini_subscription_memory+0x24>)
 8015d9e:	6819      	ldr	r1, [r3, #0]
 8015da0:	f7ea fa9e 	bl	80002e0 <strcmp>
 8015da4:	b938      	cbnz	r0, 8015db6 <rmw_uxrce_fini_subscription_memory+0x22>
 8015da6:	6020      	str	r0, [r4, #0]
 8015da8:	6861      	ldr	r1, [r4, #4]
 8015daa:	b121      	cbz	r1, 8015db6 <rmw_uxrce_fini_subscription_memory+0x22>
 8015dac:	4803      	ldr	r0, [pc, #12]	@ (8015dbc <rmw_uxrce_fini_subscription_memory+0x28>)
 8015dae:	f008 fc81 	bl	801e6b4 <put_memory>
 8015db2:	2300      	movs	r3, #0
 8015db4:	6063      	str	r3, [r4, #4]
 8015db6:	bd10      	pop	{r4, pc}
 8015db8:	08025948 	.word	0x08025948
 8015dbc:	24069244 	.word	0x24069244

08015dc0 <rmw_uxrce_fini_service_memory>:
 8015dc0:	b510      	push	{r4, lr}
 8015dc2:	4604      	mov	r4, r0
 8015dc4:	6800      	ldr	r0, [r0, #0]
 8015dc6:	b128      	cbz	r0, 8015dd4 <rmw_uxrce_fini_service_memory+0x14>
 8015dc8:	4b06      	ldr	r3, [pc, #24]	@ (8015de4 <rmw_uxrce_fini_service_memory+0x24>)
 8015dca:	6819      	ldr	r1, [r3, #0]
 8015dcc:	f7ea fa88 	bl	80002e0 <strcmp>
 8015dd0:	b938      	cbnz	r0, 8015de2 <rmw_uxrce_fini_service_memory+0x22>
 8015dd2:	6020      	str	r0, [r4, #0]
 8015dd4:	6861      	ldr	r1, [r4, #4]
 8015dd6:	b121      	cbz	r1, 8015de2 <rmw_uxrce_fini_service_memory+0x22>
 8015dd8:	4803      	ldr	r0, [pc, #12]	@ (8015de8 <rmw_uxrce_fini_service_memory+0x28>)
 8015dda:	f008 fc6b 	bl	801e6b4 <put_memory>
 8015dde:	2300      	movs	r3, #0
 8015de0:	6063      	str	r3, [r4, #4]
 8015de2:	bd10      	pop	{r4, pc}
 8015de4:	08025948 	.word	0x08025948
 8015de8:	24069214 	.word	0x24069214

08015dec <rmw_uxrce_fini_client_memory>:
 8015dec:	b510      	push	{r4, lr}
 8015dee:	4604      	mov	r4, r0
 8015df0:	6800      	ldr	r0, [r0, #0]
 8015df2:	b128      	cbz	r0, 8015e00 <rmw_uxrce_fini_client_memory+0x14>
 8015df4:	4b06      	ldr	r3, [pc, #24]	@ (8015e10 <rmw_uxrce_fini_client_memory+0x24>)
 8015df6:	6819      	ldr	r1, [r3, #0]
 8015df8:	f7ea fa72 	bl	80002e0 <strcmp>
 8015dfc:	b938      	cbnz	r0, 8015e0e <rmw_uxrce_fini_client_memory+0x22>
 8015dfe:	6020      	str	r0, [r4, #0]
 8015e00:	6861      	ldr	r1, [r4, #4]
 8015e02:	b121      	cbz	r1, 8015e0e <rmw_uxrce_fini_client_memory+0x22>
 8015e04:	4803      	ldr	r0, [pc, #12]	@ (8015e14 <rmw_uxrce_fini_client_memory+0x28>)
 8015e06:	f008 fc55 	bl	801e6b4 <put_memory>
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	6063      	str	r3, [r4, #4]
 8015e0e:	bd10      	pop	{r4, pc}
 8015e10:	08025948 	.word	0x08025948
 8015e14:	24064928 	.word	0x24064928

08015e18 <rmw_uxrce_fini_topic_memory>:
 8015e18:	b510      	push	{r4, lr}
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	4803      	ldr	r0, [pc, #12]	@ (8015e2c <rmw_uxrce_fini_topic_memory+0x14>)
 8015e1e:	4621      	mov	r1, r4
 8015e20:	f008 fc48 	bl	801e6b4 <put_memory>
 8015e24:	2300      	movs	r3, #0
 8015e26:	61a3      	str	r3, [r4, #24]
 8015e28:	bd10      	pop	{r4, pc}
 8015e2a:	bf00      	nop
 8015e2c:	24069254 	.word	0x24069254

08015e30 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8015e30:	b082      	sub	sp, #8
 8015e32:	492b      	ldr	r1, [pc, #172]	@ (8015ee0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015e34:	b530      	push	{r4, r5, lr}
 8015e36:	680d      	ldr	r5, [r1, #0]
 8015e38:	ac03      	add	r4, sp, #12
 8015e3a:	e884 000c 	stmia.w	r4, {r2, r3}
 8015e3e:	461c      	mov	r4, r3
 8015e40:	2d00      	cmp	r5, #0
 8015e42:	d04b      	beq.n	8015edc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8015e44:	462b      	mov	r3, r5
 8015e46:	2100      	movs	r1, #0
 8015e48:	689a      	ldr	r2, [r3, #8]
 8015e4a:	685b      	ldr	r3, [r3, #4]
 8015e4c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8015e50:	4290      	cmp	r0, r2
 8015e52:	bf08      	it	eq
 8015e54:	3101      	addeq	r1, #1
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d1f6      	bne.n	8015e48 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8015e5a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015e5e:	2b02      	cmp	r3, #2
 8015e60:	d029      	beq.n	8015eb6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015e62:	d820      	bhi.n	8015ea6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015e64:	428c      	cmp	r4, r1
 8015e66:	d828      	bhi.n	8015eba <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015e68:	fab4 f284 	clz	r2, r4
 8015e6c:	0952      	lsrs	r2, r2, #5
 8015e6e:	b324      	cbz	r4, 8015eba <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015e70:	b1dd      	cbz	r5, 8015eaa <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015e72:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015e76:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8015e7a:	e001      	b.n	8015e80 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8015e7c:	686d      	ldr	r5, [r5, #4]
 8015e7e:	b1ad      	cbz	r5, 8015eac <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015e80:	68ab      	ldr	r3, [r5, #8]
 8015e82:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8015e86:	4288      	cmp	r0, r1
 8015e88:	d1f8      	bne.n	8015e7c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e8a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8015e8e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8015e92:	4561      	cmp	r1, ip
 8015e94:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015e98:	eb73 0e04 	sbcs.w	lr, r3, r4
 8015e9c:	daee      	bge.n	8015e7c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015e9e:	468c      	mov	ip, r1
 8015ea0:	461c      	mov	r4, r3
 8015ea2:	462a      	mov	r2, r5
 8015ea4:	e7ea      	b.n	8015e7c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015ea6:	2b03      	cmp	r3, #3
 8015ea8:	d0dc      	beq.n	8015e64 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8015eaa:	2200      	movs	r2, #0
 8015eac:	4610      	mov	r0, r2
 8015eae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015eb2:	b002      	add	sp, #8
 8015eb4:	4770      	bx	lr
 8015eb6:	428c      	cmp	r4, r1
 8015eb8:	d905      	bls.n	8015ec6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8015eba:	4809      	ldr	r0, [pc, #36]	@ (8015ee0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ec0:	b002      	add	sp, #8
 8015ec2:	f008 bbe7 	b.w	801e694 <get_memory>
 8015ec6:	fab4 f284 	clz	r2, r4
 8015eca:	0952      	lsrs	r2, r2, #5
 8015ecc:	2c00      	cmp	r4, #0
 8015ece:	d1ed      	bne.n	8015eac <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015ed0:	4803      	ldr	r0, [pc, #12]	@ (8015ee0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015ed2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ed6:	b002      	add	sp, #8
 8015ed8:	f008 bbdc 	b.w	801e694 <get_memory>
 8015edc:	4629      	mov	r1, r5
 8015ede:	e7bc      	b.n	8015e5a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015ee0:	24069234 	.word	0x24069234

08015ee4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015ee4:	4b12      	ldr	r3, [pc, #72]	@ (8015f30 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	b530      	push	{r4, r5, lr}
 8015eea:	b1f3      	cbz	r3, 8015f2a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8015eec:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8015ef0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8015ef4:	2400      	movs	r4, #0
 8015ef6:	e001      	b.n	8015efc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	b1a3      	cbz	r3, 8015f26 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8015efc:	689a      	ldr	r2, [r3, #8]
 8015efe:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8015f02:	4288      	cmp	r0, r1
 8015f04:	d1f8      	bne.n	8015ef8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015f06:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8015f0a:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8015f0e:	4571      	cmp	r1, lr
 8015f10:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015f14:	eb72 050c 	sbcs.w	r5, r2, ip
 8015f18:	daee      	bge.n	8015ef8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8015f1a:	461c      	mov	r4, r3
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	468e      	mov	lr, r1
 8015f20:	4694      	mov	ip, r2
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d1ea      	bne.n	8015efc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8015f26:	4620      	mov	r0, r4
 8015f28:	bd30      	pop	{r4, r5, pc}
 8015f2a:	461c      	mov	r4, r3
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	bd30      	pop	{r4, r5, pc}
 8015f30:	24069234 	.word	0x24069234
 8015f34:	00000000 	.word	0x00000000

08015f38 <rmw_uxrce_clean_expired_static_input_buffer>:
 8015f38:	4b3d      	ldr	r3, [pc, #244]	@ (8016030 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015f3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f3e:	681f      	ldr	r7, [r3, #0]
 8015f40:	ed2d 8b06 	vpush	{d8-d10}
 8015f44:	b08d      	sub	sp, #52	@ 0x34
 8015f46:	f7ff fd71 	bl	8015a2c <rmw_uros_epoch_nanos>
 8015f4a:	2f00      	cmp	r7, #0
 8015f4c:	d05d      	beq.n	801600a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015f4e:	46b8      	mov	r8, r7
 8015f50:	4681      	mov	r9, r0
 8015f52:	468a      	mov	sl, r1
 8015f54:	ac04      	add	r4, sp, #16
 8015f56:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015f5a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015f5e:	2b04      	cmp	r3, #4
 8015f60:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8016018 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8015f64:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8016020 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8015f68:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8016028 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8015f6c:	d03f      	beq.n	8015fee <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015f6e:	2b05      	cmp	r3, #5
 8015f70:	d044      	beq.n	8015ffc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8015f72:	2b03      	cmp	r3, #3
 8015f74:	d03b      	beq.n	8015fee <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015f76:	ed8d 8b04 	vstr	d8, [sp, #16]
 8015f7a:	ed8d ab06 	vstr	d10, [sp, #24]
 8015f7e:	ab08      	add	r3, sp, #32
 8015f80:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015f84:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8015f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f8a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015f8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f92:	f008 f9a1 	bl	801e2d8 <rmw_time_equal>
 8015f96:	b118      	cbz	r0, 8015fa0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8015f98:	ed8d 9b04 	vstr	d9, [sp, #16]
 8015f9c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015fa0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8015fa4:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8015fa8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8015fac:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8015fb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015fb4:	f008 f9e6 	bl	801e384 <rmw_time_total_nsec>
 8015fb8:	1830      	adds	r0, r6, r0
 8015fba:	eb47 0101 	adc.w	r1, r7, r1
 8015fbe:	4548      	cmp	r0, r9
 8015fc0:	eb71 030a 	sbcs.w	r3, r1, sl
 8015fc4:	db05      	blt.n	8015fd2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8015fc6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8015fca:	4591      	cmp	r9, r2
 8015fcc:	eb7a 0303 	sbcs.w	r3, sl, r3
 8015fd0:	da03      	bge.n	8015fda <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8015fd2:	4641      	mov	r1, r8
 8015fd4:	4816      	ldr	r0, [pc, #88]	@ (8016030 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015fd6:	f008 fb6d 	bl	801e6b4 <put_memory>
 8015fda:	f1bb 0f00 	cmp.w	fp, #0
 8015fde:	d014      	beq.n	801600a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015fe0:	46d8      	mov	r8, fp
 8015fe2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015fe6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8015fea:	2b04      	cmp	r3, #4
 8015fec:	d1bf      	bne.n	8015f6e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8015fee:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8015ff2:	3340      	adds	r3, #64	@ 0x40
 8015ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015ffa:	e7c0      	b.n	8015f7e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8015ffc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8016000:	3348      	adds	r3, #72	@ 0x48
 8016002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016008:	e7b9      	b.n	8015f7e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801600a:	b00d      	add	sp, #52	@ 0x34
 801600c:	ecbd 8b06 	vpop	{d8-d10}
 8016010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016014:	f3af 8000 	nop.w
	...
 8016020:	00000001 	.word	0x00000001
 8016024:	00000000 	.word	0x00000000
 8016028:	0000001e 	.word	0x0000001e
 801602c:	00000000 	.word	0x00000000
 8016030:	24069234 	.word	0x24069234

08016034 <run_xrce_session>:
 8016034:	b510      	push	{r4, lr}
 8016036:	788c      	ldrb	r4, [r1, #2]
 8016038:	b086      	sub	sp, #24
 801603a:	2c01      	cmp	r4, #1
 801603c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016040:	d00c      	beq.n	801605c <run_xrce_session+0x28>
 8016042:	2401      	movs	r4, #1
 8016044:	4619      	mov	r1, r3
 8016046:	f10d 020e 	add.w	r2, sp, #14
 801604a:	f10d 0317 	add.w	r3, sp, #23
 801604e:	9400      	str	r4, [sp, #0]
 8016050:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016054:	f002 f800 	bl	8018058 <uxr_run_session_until_all_status>
 8016058:	b006      	add	sp, #24
 801605a:	bd10      	pop	{r4, pc}
 801605c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016060:	f001 fc1c 	bl	801789c <uxr_flash_output_streams>
 8016064:	4620      	mov	r0, r4
 8016066:	b006      	add	sp, #24
 8016068:	bd10      	pop	{r4, pc}
 801606a:	bf00      	nop

0801606c <convert_qos_profile>:
 801606c:	7a4a      	ldrb	r2, [r1, #9]
 801606e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016072:	2a02      	cmp	r2, #2
 8016074:	bf18      	it	ne
 8016076:	2200      	movne	r2, #0
 8016078:	7002      	strb	r2, [r0, #0]
 801607a:	f1ac 0202 	sub.w	r2, ip, #2
 801607e:	fab2 f282 	clz	r2, r2
 8016082:	0952      	lsrs	r2, r2, #5
 8016084:	7042      	strb	r2, [r0, #1]
 8016086:	780a      	ldrb	r2, [r1, #0]
 8016088:	8889      	ldrh	r1, [r1, #4]
 801608a:	f1a2 0202 	sub.w	r2, r2, #2
 801608e:	8081      	strh	r1, [r0, #4]
 8016090:	fab2 f282 	clz	r2, r2
 8016094:	0952      	lsrs	r2, r2, #5
 8016096:	7082      	strb	r2, [r0, #2]
 8016098:	4770      	bx	lr
 801609a:	bf00      	nop

0801609c <generate_service_topics>:
 801609c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801609e:	461d      	mov	r5, r3
 80160a0:	b083      	sub	sp, #12
 80160a2:	4606      	mov	r6, r0
 80160a4:	4c11      	ldr	r4, [pc, #68]	@ (80160ec <generate_service_topics+0x50>)
 80160a6:	4608      	mov	r0, r1
 80160a8:	4b11      	ldr	r3, [pc, #68]	@ (80160f0 <generate_service_topics+0x54>)
 80160aa:	4617      	mov	r7, r2
 80160ac:	4629      	mov	r1, r5
 80160ae:	4a11      	ldr	r2, [pc, #68]	@ (80160f4 <generate_service_topics+0x58>)
 80160b0:	9401      	str	r4, [sp, #4]
 80160b2:	9600      	str	r6, [sp, #0]
 80160b4:	f00b ff9e 	bl	8021ff4 <sniprintf>
 80160b8:	4a0f      	ldr	r2, [pc, #60]	@ (80160f8 <generate_service_topics+0x5c>)
 80160ba:	4604      	mov	r4, r0
 80160bc:	4b0f      	ldr	r3, [pc, #60]	@ (80160fc <generate_service_topics+0x60>)
 80160be:	9201      	str	r2, [sp, #4]
 80160c0:	4638      	mov	r0, r7
 80160c2:	4a0c      	ldr	r2, [pc, #48]	@ (80160f4 <generate_service_topics+0x58>)
 80160c4:	4629      	mov	r1, r5
 80160c6:	9600      	str	r6, [sp, #0]
 80160c8:	f00b ff94 	bl	8021ff4 <sniprintf>
 80160cc:	2c00      	cmp	r4, #0
 80160ce:	bfa8      	it	ge
 80160d0:	42a5      	cmpge	r5, r4
 80160d2:	bfcc      	ite	gt
 80160d4:	2401      	movgt	r4, #1
 80160d6:	2400      	movle	r4, #0
 80160d8:	dd05      	ble.n	80160e6 <generate_service_topics+0x4a>
 80160da:	2800      	cmp	r0, #0
 80160dc:	bfa8      	it	ge
 80160de:	4285      	cmpge	r5, r0
 80160e0:	bfcc      	ite	gt
 80160e2:	2401      	movgt	r4, #1
 80160e4:	2400      	movle	r4, #0
 80160e6:	4620      	mov	r0, r4
 80160e8:	b003      	add	sp, #12
 80160ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ec:	080249f0 	.word	0x080249f0
 80160f0:	080249ec 	.word	0x080249ec
 80160f4:	080249c8 	.word	0x080249c8
 80160f8:	080249e4 	.word	0x080249e4
 80160fc:	080249e0 	.word	0x080249e0

08016100 <generate_service_types>:
 8016100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016104:	4606      	mov	r6, r0
 8016106:	b087      	sub	sp, #28
 8016108:	461c      	mov	r4, r3
 801610a:	6883      	ldr	r3, [r0, #8]
 801610c:	460d      	mov	r5, r1
 801610e:	4617      	mov	r7, r2
 8016110:	4798      	blx	r3
 8016112:	68f3      	ldr	r3, [r6, #12]
 8016114:	4606      	mov	r6, r0
 8016116:	4798      	blx	r3
 8016118:	2300      	movs	r3, #0
 801611a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801611e:	6872      	ldr	r2, [r6, #4]
 8016120:	702b      	strb	r3, [r5, #0]
 8016122:	6813      	ldr	r3, [r2, #0]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d03f      	beq.n	80161a8 <generate_service_types+0xa8>
 8016128:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80161bc <generate_service_types+0xbc>
 801612c:	4649      	mov	r1, r9
 801612e:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 80161c4 <generate_service_types+0xc4>
 8016132:	4628      	mov	r0, r5
 8016134:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80161c8 <generate_service_types+0xc8>
 8016138:	f8cd 8014 	str.w	r8, [sp, #20]
 801613c:	6852      	ldr	r2, [r2, #4]
 801613e:	9100      	str	r1, [sp, #0]
 8016140:	4621      	mov	r1, r4
 8016142:	f8cd 8008 	str.w	r8, [sp, #8]
 8016146:	f8cd a004 	str.w	sl, [sp, #4]
 801614a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801614e:	4a1a      	ldr	r2, [pc, #104]	@ (80161b8 <generate_service_types+0xb8>)
 8016150:	f00b ff50 	bl	8021ff4 <sniprintf>
 8016154:	2300      	movs	r3, #0
 8016156:	42a0      	cmp	r0, r4
 8016158:	ea6f 0600 	mvn.w	r6, r0
 801615c:	703b      	strb	r3, [r7, #0]
 801615e:	f8db 3000 	ldr.w	r3, [fp]
 8016162:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8016166:	bfac      	ite	ge
 8016168:	2500      	movge	r5, #0
 801616a:	2501      	movlt	r5, #1
 801616c:	b30b      	cbz	r3, 80161b2 <generate_service_types+0xb2>
 801616e:	4a13      	ldr	r2, [pc, #76]	@ (80161bc <generate_service_types+0xbc>)
 8016170:	f8cd 8014 	str.w	r8, [sp, #20]
 8016174:	402e      	ands	r6, r5
 8016176:	f8db 1004 	ldr.w	r1, [fp, #4]
 801617a:	4638      	mov	r0, r7
 801617c:	9104      	str	r1, [sp, #16]
 801617e:	4621      	mov	r1, r4
 8016180:	e9cd 2a00 	strd	r2, sl, [sp]
 8016184:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016188:	4a0b      	ldr	r2, [pc, #44]	@ (80161b8 <generate_service_types+0xb8>)
 801618a:	f00b ff33 	bl	8021ff4 <sniprintf>
 801618e:	2800      	cmp	r0, #0
 8016190:	bfb4      	ite	lt
 8016192:	2600      	movlt	r6, #0
 8016194:	f006 0601 	andge.w	r6, r6, #1
 8016198:	42a0      	cmp	r0, r4
 801619a:	bfac      	ite	ge
 801619c:	2000      	movge	r0, #0
 801619e:	f006 0001 	andlt.w	r0, r6, #1
 80161a2:	b007      	add	sp, #28
 80161a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a8:	4b05      	ldr	r3, [pc, #20]	@ (80161c0 <generate_service_types+0xc0>)
 80161aa:	f8df 9010 	ldr.w	r9, [pc, #16]	@ 80161bc <generate_service_types+0xbc>
 80161ae:	4619      	mov	r1, r3
 80161b0:	e7bd      	b.n	801612e <generate_service_types+0x2e>
 80161b2:	4b03      	ldr	r3, [pc, #12]	@ (80161c0 <generate_service_types+0xc0>)
 80161b4:	461a      	mov	r2, r3
 80161b6:	e7db      	b.n	8016170 <generate_service_types+0x70>
 80161b8:	080249c0 	.word	0x080249c0
 80161bc:	080249bc 	.word	0x080249bc
 80161c0:	08025a84 	.word	0x08025a84
 80161c4:	080249d0 	.word	0x080249d0
 80161c8:	080249d4 	.word	0x080249d4

080161cc <generate_type_name>:
 80161cc:	2300      	movs	r3, #0
 80161ce:	b530      	push	{r4, r5, lr}
 80161d0:	700b      	strb	r3, [r1, #0]
 80161d2:	b087      	sub	sp, #28
 80161d4:	6803      	ldr	r3, [r0, #0]
 80161d6:	4614      	mov	r4, r2
 80161d8:	b1bb      	cbz	r3, 801620a <generate_type_name+0x3e>
 80161da:	4a0e      	ldr	r2, [pc, #56]	@ (8016214 <generate_type_name+0x48>)
 80161dc:	4615      	mov	r5, r2
 80161de:	9500      	str	r5, [sp, #0]
 80161e0:	9203      	str	r2, [sp, #12]
 80161e2:	4d0d      	ldr	r5, [pc, #52]	@ (8016218 <generate_type_name+0x4c>)
 80161e4:	6842      	ldr	r2, [r0, #4]
 80161e6:	4608      	mov	r0, r1
 80161e8:	490c      	ldr	r1, [pc, #48]	@ (801621c <generate_type_name+0x50>)
 80161ea:	9204      	str	r2, [sp, #16]
 80161ec:	9105      	str	r1, [sp, #20]
 80161ee:	9102      	str	r1, [sp, #8]
 80161f0:	4621      	mov	r1, r4
 80161f2:	4a0b      	ldr	r2, [pc, #44]	@ (8016220 <generate_type_name+0x54>)
 80161f4:	9501      	str	r5, [sp, #4]
 80161f6:	f00b fefd 	bl	8021ff4 <sniprintf>
 80161fa:	2800      	cmp	r0, #0
 80161fc:	bfa8      	it	ge
 80161fe:	4284      	cmpge	r4, r0
 8016200:	bfcc      	ite	gt
 8016202:	2001      	movgt	r0, #1
 8016204:	2000      	movle	r0, #0
 8016206:	b007      	add	sp, #28
 8016208:	bd30      	pop	{r4, r5, pc}
 801620a:	4b06      	ldr	r3, [pc, #24]	@ (8016224 <generate_type_name+0x58>)
 801620c:	4a01      	ldr	r2, [pc, #4]	@ (8016214 <generate_type_name+0x48>)
 801620e:	461d      	mov	r5, r3
 8016210:	e7e5      	b.n	80161de <generate_type_name+0x12>
 8016212:	bf00      	nop
 8016214:	080249bc 	.word	0x080249bc
 8016218:	080249d4 	.word	0x080249d4
 801621c:	080249d0 	.word	0x080249d0
 8016220:	080249c0 	.word	0x080249c0
 8016224:	08025a84 	.word	0x08025a84

08016228 <generate_topic_name>:
 8016228:	b530      	push	{r4, r5, lr}
 801622a:	4614      	mov	r4, r2
 801622c:	b083      	sub	sp, #12
 801622e:	4605      	mov	r5, r0
 8016230:	4b07      	ldr	r3, [pc, #28]	@ (8016250 <generate_topic_name+0x28>)
 8016232:	4a08      	ldr	r2, [pc, #32]	@ (8016254 <generate_topic_name+0x2c>)
 8016234:	4608      	mov	r0, r1
 8016236:	9500      	str	r5, [sp, #0]
 8016238:	4621      	mov	r1, r4
 801623a:	f00b fedb 	bl	8021ff4 <sniprintf>
 801623e:	2800      	cmp	r0, #0
 8016240:	bfa8      	it	ge
 8016242:	4284      	cmpge	r4, r0
 8016244:	bfcc      	ite	gt
 8016246:	2001      	movgt	r0, #1
 8016248:	2000      	movle	r0, #0
 801624a:	b003      	add	sp, #12
 801624c:	bd30      	pop	{r4, r5, pc}
 801624e:	bf00      	nop
 8016250:	080249f8 	.word	0x080249f8
 8016254:	080249d8 	.word	0x080249d8

08016258 <is_uxrce_rmw_identifier_valid>:
 8016258:	b510      	push	{r4, lr}
 801625a:	4604      	mov	r4, r0
 801625c:	b140      	cbz	r0, 8016270 <is_uxrce_rmw_identifier_valid+0x18>
 801625e:	f008 fa81 	bl	801e764 <rmw_get_implementation_identifier>
 8016262:	4601      	mov	r1, r0
 8016264:	4620      	mov	r0, r4
 8016266:	f7ea f83b 	bl	80002e0 <strcmp>
 801626a:	fab0 f080 	clz	r0, r0
 801626e:	0940      	lsrs	r0, r0, #5
 8016270:	bd10      	pop	{r4, pc}
 8016272:	bf00      	nop

08016274 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016274:	4b04      	ldr	r3, [pc, #16]	@ (8016288 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 8016276:	681a      	ldr	r2, [r3, #0]
 8016278:	b10a      	cbz	r2, 801627e <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xa>
 801627a:	4803      	ldr	r0, [pc, #12]	@ (8016288 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 801627c:	4770      	bx	lr
 801627e:	4a03      	ldr	r2, [pc, #12]	@ (801628c <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x18>)
 8016280:	4801      	ldr	r0, [pc, #4]	@ (8016288 <rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>)
 8016282:	6812      	ldr	r2, [r2, #0]
 8016284:	601a      	str	r2, [r3, #0]
 8016286:	4770      	bx	lr
 8016288:	24000cb0 	.word	0x24000cb0
 801628c:	24000d2c 	.word	0x24000d2c

08016290 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016290:	4a02      	ldr	r2, [pc, #8]	@ (801629c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0xc>)
 8016292:	4b03      	ldr	r3, [pc, #12]	@ (80162a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x10>)
 8016294:	6812      	ldr	r2, [r2, #0]
 8016296:	601a      	str	r2, [r3, #0]
 8016298:	4770      	bx	lr
 801629a:	bf00      	nop
 801629c:	24000d2c 	.word	0x24000d2c
 80162a0:	24000cb0 	.word	0x24000cb0

080162a4 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_init_function>:
 80162a4:	f009 bc2a 	b.w	801fafc <rosgraph_msgs__msg__Clock__init>

080162a8 <rosgraph_msgs__msg__Clock__rosidl_typesupport_introspection_c__Clock_fini_function>:
 80162a8:	f009 bc3a 	b.w	801fb20 <rosgraph_msgs__msg__Clock__fini>

080162ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 80162ac:	b508      	push	{r3, lr}
 80162ae:	f7fc fc5d 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80162b2:	4b06      	ldr	r3, [pc, #24]	@ (80162cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162b4:	4906      	ldr	r1, [pc, #24]	@ (80162d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x24>)
 80162b6:	681a      	ldr	r2, [r3, #0]
 80162b8:	60c8      	str	r0, [r1, #12]
 80162ba:	b10a      	cbz	r2, 80162c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x14>
 80162bc:	4803      	ldr	r0, [pc, #12]	@ (80162cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162be:	bd08      	pop	{r3, pc}
 80162c0:	4a04      	ldr	r2, [pc, #16]	@ (80162d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x28>)
 80162c2:	4802      	ldr	r0, [pc, #8]	@ (80162cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x20>)
 80162c4:	6812      	ldr	r2, [r2, #0]
 80162c6:	601a      	str	r2, [r3, #0]
 80162c8:	bd08      	pop	{r3, pc}
 80162ca:	bf00      	nop
 80162cc:	24000cf8 	.word	0x24000cf8
 80162d0:	24000cbc 	.word	0x24000cbc
 80162d4:	24000d30 	.word	0x24000d30

080162d8 <get_serialized_size_rosgraph_msgs__msg__Clock>:
 80162d8:	b108      	cbz	r0, 80162de <get_serialized_size_rosgraph_msgs__msg__Clock+0x6>
 80162da:	f7fc bc55 	b.w	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 80162de:	4770      	bx	lr

080162e0 <_Clock__max_serialized_size>:
 80162e0:	b500      	push	{lr}
 80162e2:	b083      	sub	sp, #12
 80162e4:	2301      	movs	r3, #1
 80162e6:	2100      	movs	r1, #0
 80162e8:	f10d 0007 	add.w	r0, sp, #7
 80162ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80162f0:	f7fc fc9a 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 80162f4:	b003      	add	sp, #12
 80162f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80162fa:	bf00      	nop

080162fc <_Clock__get_serialized_size>:
 80162fc:	b110      	cbz	r0, 8016304 <_Clock__get_serialized_size+0x8>
 80162fe:	2100      	movs	r1, #0
 8016300:	f7fc bc42 	b.w	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8016304:	4770      	bx	lr
 8016306:	bf00      	nop

08016308 <_Clock__cdr_deserialize>:
 8016308:	b570      	push	{r4, r5, r6, lr}
 801630a:	460c      	mov	r4, r1
 801630c:	b151      	cbz	r1, 8016324 <_Clock__cdr_deserialize+0x1c>
 801630e:	4605      	mov	r5, r0
 8016310:	f7fc fc9e 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016314:	4603      	mov	r3, r0
 8016316:	4621      	mov	r1, r4
 8016318:	4628      	mov	r0, r5
 801631a:	685b      	ldr	r3, [r3, #4]
 801631c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016320:	68db      	ldr	r3, [r3, #12]
 8016322:	4718      	bx	r3
 8016324:	4608      	mov	r0, r1
 8016326:	bd70      	pop	{r4, r5, r6, pc}

08016328 <_Clock__cdr_serialize>:
 8016328:	b160      	cbz	r0, 8016344 <_Clock__cdr_serialize+0x1c>
 801632a:	b570      	push	{r4, r5, r6, lr}
 801632c:	4604      	mov	r4, r0
 801632e:	460d      	mov	r5, r1
 8016330:	f7fc fc8e 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016334:	4603      	mov	r3, r0
 8016336:	4629      	mov	r1, r5
 8016338:	4620      	mov	r0, r4
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016340:	689b      	ldr	r3, [r3, #8]
 8016342:	4718      	bx	r3
 8016344:	4770      	bx	lr
 8016346:	bf00      	nop

08016348 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock>:
 8016348:	4800      	ldr	r0, [pc, #0]	@ (801634c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock+0x4>)
 801634a:	4770      	bx	lr
 801634c:	24000d04 	.word	0x24000d04

08016350 <get_message_typesupport_handle>:
 8016350:	6883      	ldr	r3, [r0, #8]
 8016352:	4718      	bx	r3

08016354 <get_message_typesupport_handle_function>:
 8016354:	b510      	push	{r4, lr}
 8016356:	4604      	mov	r4, r0
 8016358:	6800      	ldr	r0, [r0, #0]
 801635a:	f7e9 ffc1 	bl	80002e0 <strcmp>
 801635e:	2800      	cmp	r0, #0
 8016360:	bf0c      	ite	eq
 8016362:	4620      	moveq	r0, r4
 8016364:	2000      	movne	r0, #0
 8016366:	bd10      	pop	{r4, pc}

08016368 <get_service_typesupport_handle>:
 8016368:	6883      	ldr	r3, [r0, #8]
 801636a:	4718      	bx	r3

0801636c <get_service_typesupport_handle_function>:
 801636c:	b510      	push	{r4, lr}
 801636e:	4604      	mov	r4, r0
 8016370:	6800      	ldr	r0, [r0, #0]
 8016372:	f7e9 ffb5 	bl	80002e0 <strcmp>
 8016376:	2800      	cmp	r0, #0
 8016378:	bf0c      	ite	eq
 801637a:	4620      	moveq	r0, r4
 801637c:	2000      	movne	r0, #0
 801637e:	bd10      	pop	{r4, pc}

08016380 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016384:	6805      	ldr	r5, [r0, #0]
 8016386:	4604      	mov	r4, r0
 8016388:	460e      	mov	r6, r1
 801638a:	4628      	mov	r0, r5
 801638c:	f7e9 ffa8 	bl	80002e0 <strcmp>
 8016390:	b1c8      	cbz	r0, 80163c6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8016392:	4b11      	ldr	r3, [pc, #68]	@ (80163d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	429d      	cmp	r5, r3
 8016398:	d112      	bne.n	80163c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801639a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801639e:	f8d8 4000 	ldr.w	r4, [r8]
 80163a2:	b16c      	cbz	r4, 80163c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80163a4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80163a8:	2700      	movs	r7, #0
 80163aa:	3d04      	subs	r5, #4
 80163ac:	4631      	mov	r1, r6
 80163ae:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80163b2:	f7e9 ff95 	bl	80002e0 <strcmp>
 80163b6:	00bb      	lsls	r3, r7, #2
 80163b8:	b140      	cbz	r0, 80163cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80163ba:	3701      	adds	r7, #1
 80163bc:	42bc      	cmp	r4, r7
 80163be:	d1f5      	bne.n	80163ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80163c0:	2000      	movs	r0, #0
 80163c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163c6:	4620      	mov	r0, r4
 80163c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80163d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163d4:	58d3      	ldr	r3, [r2, r3]
 80163d6:	4718      	bx	r3
 80163d8:	24000d2c 	.word	0x24000d2c

080163dc <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 80163dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163e0:	6805      	ldr	r5, [r0, #0]
 80163e2:	4604      	mov	r4, r0
 80163e4:	460e      	mov	r6, r1
 80163e6:	4628      	mov	r0, r5
 80163e8:	f7e9 ff7a 	bl	80002e0 <strcmp>
 80163ec:	b1c8      	cbz	r0, 8016422 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 80163ee:	4b11      	ldr	r3, [pc, #68]	@ (8016434 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	429d      	cmp	r5, r3
 80163f4:	d112      	bne.n	801641c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 80163f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80163fa:	f8d8 4000 	ldr.w	r4, [r8]
 80163fe:	b16c      	cbz	r4, 801641c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8016400:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016404:	2700      	movs	r7, #0
 8016406:	3d04      	subs	r5, #4
 8016408:	4631      	mov	r1, r6
 801640a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801640e:	f7e9 ff67 	bl	80002e0 <strcmp>
 8016412:	00bb      	lsls	r3, r7, #2
 8016414:	b140      	cbz	r0, 8016428 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8016416:	3701      	adds	r7, #1
 8016418:	42bc      	cmp	r4, r7
 801641a:	d1f5      	bne.n	8016408 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 801641c:	2000      	movs	r0, #0
 801641e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016422:	4620      	mov	r0, r4
 8016424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016428:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801642c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016430:	58d3      	ldr	r3, [r2, r3]
 8016432:	4718      	bx	r3
 8016434:	24000d2c 	.word	0x24000d2c

08016438 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8016438:	f009 bb76 	b.w	801fb28 <std_msgs__msg__Header__init>

0801643c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 801643c:	f009 bb98 	b.w	801fb70 <std_msgs__msg__Header__fini>

08016440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016440:	b508      	push	{r3, lr}
 8016442:	f7fc fb93 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016446:	4b06      	ldr	r3, [pc, #24]	@ (8016460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016448:	4906      	ldr	r1, [pc, #24]	@ (8016464 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	60c8      	str	r0, [r1, #12]
 801644e:	b10a      	cbz	r2, 8016454 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8016450:	4803      	ldr	r0, [pc, #12]	@ (8016460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016452:	bd08      	pop	{r3, pc}
 8016454:	4a04      	ldr	r2, [pc, #16]	@ (8016468 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8016456:	4802      	ldr	r0, [pc, #8]	@ (8016460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8016458:	6812      	ldr	r2, [r2, #0]
 801645a:	601a      	str	r2, [r3, #0]
 801645c:	bd08      	pop	{r3, pc}
 801645e:	bf00      	nop
 8016460:	24000dac 	.word	0x24000dac
 8016464:	24000d34 	.word	0x24000d34
 8016468:	24000d30 	.word	0x24000d30

0801646c <_Header__max_serialized_size>:
 801646c:	b500      	push	{lr}
 801646e:	b083      	sub	sp, #12
 8016470:	2301      	movs	r3, #1
 8016472:	2100      	movs	r1, #0
 8016474:	f10d 0007 	add.w	r0, sp, #7
 8016478:	f88d 3007 	strb.w	r3, [sp, #7]
 801647c:	f7fc fbd4 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8016480:	b003      	add	sp, #12
 8016482:	f85d fb04 	ldr.w	pc, [sp], #4
 8016486:	bf00      	nop

08016488 <get_serialized_size_std_msgs__msg__Header>:
 8016488:	b570      	push	{r4, r5, r6, lr}
 801648a:	4605      	mov	r5, r0
 801648c:	b168      	cbz	r0, 80164aa <get_serialized_size_std_msgs__msg__Header+0x22>
 801648e:	460c      	mov	r4, r1
 8016490:	f7fc fb7a 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8016494:	2104      	movs	r1, #4
 8016496:	1826      	adds	r6, r4, r0
 8016498:	f1c4 0405 	rsb	r4, r4, #5
 801649c:	4630      	mov	r0, r6
 801649e:	f7fd fe77 	bl	8014190 <ucdr_alignment>
 80164a2:	68e9      	ldr	r1, [r5, #12]
 80164a4:	440c      	add	r4, r1
 80164a6:	4404      	add	r4, r0
 80164a8:	19a0      	adds	r0, r4, r6
 80164aa:	bd70      	pop	{r4, r5, r6, pc}

080164ac <_Header__cdr_deserialize>:
 80164ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164ae:	460c      	mov	r4, r1
 80164b0:	b083      	sub	sp, #12
 80164b2:	b1e9      	cbz	r1, 80164f0 <_Header__cdr_deserialize+0x44>
 80164b4:	4606      	mov	r6, r0
 80164b6:	f7fc fbcb 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80164ba:	4603      	mov	r3, r0
 80164bc:	4621      	mov	r1, r4
 80164be:	4630      	mov	r0, r6
 80164c0:	685b      	ldr	r3, [r3, #4]
 80164c2:	68db      	ldr	r3, [r3, #12]
 80164c4:	4798      	blx	r3
 80164c6:	6927      	ldr	r7, [r4, #16]
 80164c8:	ab01      	add	r3, sp, #4
 80164ca:	68a1      	ldr	r1, [r4, #8]
 80164cc:	463a      	mov	r2, r7
 80164ce:	4630      	mov	r0, r6
 80164d0:	f000 fc50 	bl	8016d74 <ucdr_deserialize_sequence_char>
 80164d4:	9b01      	ldr	r3, [sp, #4]
 80164d6:	4605      	mov	r5, r0
 80164d8:	b920      	cbnz	r0, 80164e4 <_Header__cdr_deserialize+0x38>
 80164da:	429f      	cmp	r7, r3
 80164dc:	d30c      	bcc.n	80164f8 <_Header__cdr_deserialize+0x4c>
 80164de:	4628      	mov	r0, r5
 80164e0:	b003      	add	sp, #12
 80164e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164e4:	b103      	cbz	r3, 80164e8 <_Header__cdr_deserialize+0x3c>
 80164e6:	3b01      	subs	r3, #1
 80164e8:	4628      	mov	r0, r5
 80164ea:	60e3      	str	r3, [r4, #12]
 80164ec:	b003      	add	sp, #12
 80164ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164f0:	460d      	mov	r5, r1
 80164f2:	4628      	mov	r0, r5
 80164f4:	b003      	add	sp, #12
 80164f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164f8:	2101      	movs	r1, #1
 80164fa:	4630      	mov	r0, r6
 80164fc:	75b5      	strb	r5, [r6, #22]
 80164fe:	7571      	strb	r1, [r6, #21]
 8016500:	60e5      	str	r5, [r4, #12]
 8016502:	f7fd fe5d 	bl	80141c0 <ucdr_align_to>
 8016506:	4630      	mov	r0, r6
 8016508:	9901      	ldr	r1, [sp, #4]
 801650a:	f7fd fe91 	bl	8014230 <ucdr_advance_buffer>
 801650e:	4628      	mov	r0, r5
 8016510:	b003      	add	sp, #12
 8016512:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016514 <_Header__cdr_serialize>:
 8016514:	b308      	cbz	r0, 801655a <_Header__cdr_serialize+0x46>
 8016516:	b570      	push	{r4, r5, r6, lr}
 8016518:	4604      	mov	r4, r0
 801651a:	460d      	mov	r5, r1
 801651c:	f7fc fb98 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016520:	4603      	mov	r3, r0
 8016522:	4629      	mov	r1, r5
 8016524:	4620      	mov	r0, r4
 8016526:	685b      	ldr	r3, [r3, #4]
 8016528:	689b      	ldr	r3, [r3, #8]
 801652a:	4798      	blx	r3
 801652c:	68a6      	ldr	r6, [r4, #8]
 801652e:	b15e      	cbz	r6, 8016548 <_Header__cdr_serialize+0x34>
 8016530:	4630      	mov	r0, r6
 8016532:	f7e9 fedf 	bl	80002f4 <strlen>
 8016536:	4603      	mov	r3, r0
 8016538:	1c42      	adds	r2, r0, #1
 801653a:	4631      	mov	r1, r6
 801653c:	4628      	mov	r0, r5
 801653e:	60e3      	str	r3, [r4, #12]
 8016540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016544:	f000 bc04 	b.w	8016d50 <ucdr_serialize_sequence_char>
 8016548:	4633      	mov	r3, r6
 801654a:	4632      	mov	r2, r6
 801654c:	4631      	mov	r1, r6
 801654e:	4628      	mov	r0, r5
 8016550:	60e3      	str	r3, [r4, #12]
 8016552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016556:	f000 bbfb 	b.w	8016d50 <ucdr_serialize_sequence_char>
 801655a:	4770      	bx	lr

0801655c <_Header__get_serialized_size>:
 801655c:	b538      	push	{r3, r4, r5, lr}
 801655e:	4604      	mov	r4, r0
 8016560:	b150      	cbz	r0, 8016578 <_Header__get_serialized_size+0x1c>
 8016562:	2100      	movs	r1, #0
 8016564:	f7fc fb10 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8016568:	2104      	movs	r1, #4
 801656a:	4605      	mov	r5, r0
 801656c:	f7fd fe10 	bl	8014190 <ucdr_alignment>
 8016570:	68e2      	ldr	r2, [r4, #12]
 8016572:	3205      	adds	r2, #5
 8016574:	1953      	adds	r3, r2, r5
 8016576:	4418      	add	r0, r3
 8016578:	bd38      	pop	{r3, r4, r5, pc}
 801657a:	bf00      	nop

0801657c <max_serialized_size_std_msgs__msg__Header>:
 801657c:	2301      	movs	r3, #1
 801657e:	b510      	push	{r4, lr}
 8016580:	7003      	strb	r3, [r0, #0]
 8016582:	4604      	mov	r4, r0
 8016584:	f7fc fb50 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8016588:	2300      	movs	r3, #0
 801658a:	7023      	strb	r3, [r4, #0]
 801658c:	bd10      	pop	{r4, pc}
 801658e:	bf00      	nop

08016590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8016590:	4800      	ldr	r0, [pc, #0]	@ (8016594 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8016592:	4770      	bx	lr
 8016594:	24000db8 	.word	0x24000db8

08016598 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016598:	4b04      	ldr	r3, [pc, #16]	@ (80165ac <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 801659a:	681a      	ldr	r2, [r3, #0]
 801659c:	b10a      	cbz	r2, 80165a2 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xa>
 801659e:	4803      	ldr	r0, [pc, #12]	@ (80165ac <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80165a0:	4770      	bx	lr
 80165a2:	4a03      	ldr	r2, [pc, #12]	@ (80165b0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x18>)
 80165a4:	4801      	ldr	r0, [pc, #4]	@ (80165ac <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x14>)
 80165a6:	6812      	ldr	r2, [r2, #0]
 80165a8:	601a      	str	r2, [r3, #0]
 80165aa:	4770      	bx	lr
 80165ac:	24000de8 	.word	0x24000de8
 80165b0:	24000d2c 	.word	0x24000d2c

080165b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 80165b4:	4a02      	ldr	r2, [pc, #8]	@ (80165c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 80165b6:	4b03      	ldr	r3, [pc, #12]	@ (80165c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 80165b8:	6812      	ldr	r2, [r2, #0]
 80165ba:	601a      	str	r2, [r3, #0]
 80165bc:	4770      	bx	lr
 80165be:	bf00      	nop
 80165c0:	24000d2c 	.word	0x24000d2c
 80165c4:	24000de8 	.word	0x24000de8

080165c8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80165c8:	4b04      	ldr	r3, [pc, #16]	@ (80165dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	b10a      	cbz	r2, 80165d2 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xa>
 80165ce:	4803      	ldr	r0, [pc, #12]	@ (80165dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165d0:	4770      	bx	lr
 80165d2:	4a03      	ldr	r2, [pc, #12]	@ (80165e0 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x18>)
 80165d4:	4801      	ldr	r0, [pc, #4]	@ (80165dc <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x14>)
 80165d6:	6812      	ldr	r2, [r2, #0]
 80165d8:	601a      	str	r2, [r3, #0]
 80165da:	4770      	bx	lr
 80165dc:	24000dfc 	.word	0x24000dfc
 80165e0:	24000d2c 	.word	0x24000d2c

080165e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80165e4:	4a02      	ldr	r2, [pc, #8]	@ (80165f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 80165e6:	4b03      	ldr	r3, [pc, #12]	@ (80165f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 80165e8:	6812      	ldr	r2, [r2, #0]
 80165ea:	601a      	str	r2, [r3, #0]
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop
 80165f0:	24000d2c 	.word	0x24000d2c
 80165f4:	24000dfc 	.word	0x24000dfc

080165f8 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80165f8:	4b04      	ldr	r3, [pc, #16]	@ (801660c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 80165fa:	681a      	ldr	r2, [r3, #0]
 80165fc:	b10a      	cbz	r2, 8016602 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xa>
 80165fe:	4803      	ldr	r0, [pc, #12]	@ (801660c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8016600:	4770      	bx	lr
 8016602:	4a03      	ldr	r2, [pc, #12]	@ (8016610 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x18>)
 8016604:	4801      	ldr	r0, [pc, #4]	@ (801660c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>)
 8016606:	6812      	ldr	r2, [r2, #0]
 8016608:	601a      	str	r2, [r3, #0]
 801660a:	4770      	bx	lr
 801660c:	24000e10 	.word	0x24000e10
 8016610:	24000d2c 	.word	0x24000d2c

08016614 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016614:	4a02      	ldr	r2, [pc, #8]	@ (8016620 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 8016616:	4b03      	ldr	r3, [pc, #12]	@ (8016624 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 8016618:	6812      	ldr	r2, [r2, #0]
 801661a:	601a      	str	r2, [r3, #0]
 801661c:	4770      	bx	lr
 801661e:	bf00      	nop
 8016620:	24000d2c 	.word	0x24000d2c
 8016624:	24000e10 	.word	0x24000e10

08016628 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016628:	4b04      	ldr	r3, [pc, #16]	@ (801663c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 801662a:	681a      	ldr	r2, [r3, #0]
 801662c:	b10a      	cbz	r2, 8016632 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xa>
 801662e:	4803      	ldr	r0, [pc, #12]	@ (801663c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016630:	4770      	bx	lr
 8016632:	4a03      	ldr	r2, [pc, #12]	@ (8016640 <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x18>)
 8016634:	4801      	ldr	r0, [pc, #4]	@ (801663c <rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>)
 8016636:	6812      	ldr	r2, [r2, #0]
 8016638:	601a      	str	r2, [r3, #0]
 801663a:	4770      	bx	lr
 801663c:	24000e24 	.word	0x24000e24
 8016640:	24000d2c 	.word	0x24000d2c

08016644 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016644:	4a02      	ldr	r2, [pc, #8]	@ (8016650 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 8016646:	4b03      	ldr	r3, [pc, #12]	@ (8016654 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8016648:	6812      	ldr	r2, [r2, #0]
 801664a:	601a      	str	r2, [r3, #0]
 801664c:	4770      	bx	lr
 801664e:	bf00      	nop
 8016650:	24000d2c 	.word	0x24000d2c
 8016654:	24000e24 	.word	0x24000e24

08016658 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8016658:	f009 ba96 	b.w	801fb88 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

0801665c <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 801665c:	f009 bab8 	b.w	801fbd0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08016660 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016660:	b510      	push	{r4, lr}
 8016662:	4c08      	ldr	r4, [pc, #32]	@ (8016684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 8016664:	f7ff feec 	bl	8016440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016668:	60e0      	str	r0, [r4, #12]
 801666a:	f009 fb1d 	bl	801fca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801666e:	4b06      	ldr	r3, [pc, #24]	@ (8016688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016670:	64a0      	str	r0, [r4, #72]	@ 0x48
 8016672:	681a      	ldr	r2, [r3, #0]
 8016674:	b10a      	cbz	r2, 801667a <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 8016676:	4804      	ldr	r0, [pc, #16]	@ (8016688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8016678:	bd10      	pop	{r4, pc}
 801667a:	4a04      	ldr	r2, [pc, #16]	@ (801668c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 801667c:	4802      	ldr	r0, [pc, #8]	@ (8016688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 801667e:	6812      	ldr	r2, [r2, #0]
 8016680:	601a      	str	r2, [r3, #0]
 8016682:	bd10      	pop	{r4, pc}
 8016684:	24000e30 	.word	0x24000e30
 8016688:	24000ea8 	.word	0x24000ea8
 801668c:	24000d30 	.word	0x24000d30

08016690 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 8016690:	f009 baaa 	b.w	801fbe8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

08016694 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 8016694:	f009 bacc 	b.w	801fc30 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

08016698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016698:	b510      	push	{r4, lr}
 801669a:	4c08      	ldr	r4, [pc, #32]	@ (80166bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 801669c:	f7ff fed0 	bl	8016440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80166a0:	60e0      	str	r0, [r4, #12]
 80166a2:	f009 fb13 	bl	801fccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80166a6:	4b06      	ldr	r3, [pc, #24]	@ (80166c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166a8:	64a0      	str	r0, [r4, #72]	@ 0x48
 80166aa:	681a      	ldr	r2, [r3, #0]
 80166ac:	b10a      	cbz	r2, 80166b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80166ae:	4804      	ldr	r0, [pc, #16]	@ (80166c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166b0:	bd10      	pop	{r4, pc}
 80166b2:	4a04      	ldr	r2, [pc, #16]	@ (80166c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80166b4:	4802      	ldr	r0, [pc, #8]	@ (80166c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80166b6:	6812      	ldr	r2, [r2, #0]
 80166b8:	601a      	str	r2, [r3, #0]
 80166ba:	bd10      	pop	{r4, pc}
 80166bc:	24000eb4 	.word	0x24000eb4
 80166c0:	24000f2c 	.word	0x24000f2c
 80166c4:	24000d30 	.word	0x24000d30

080166c8 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80166c8:	f009 babe 	b.w	801fc48 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080166cc <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80166cc:	f009 bace 	b.w	801fc6c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080166d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80166d0:	b508      	push	{r3, lr}
 80166d2:	f7fc fa4b 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80166d6:	4b06      	ldr	r3, [pc, #24]	@ (80166f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166d8:	4906      	ldr	r1, [pc, #24]	@ (80166f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	60c8      	str	r0, [r1, #12]
 80166de:	b10a      	cbz	r2, 80166e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 80166e0:	4803      	ldr	r0, [pc, #12]	@ (80166f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166e2:	bd08      	pop	{r3, pc}
 80166e4:	4a04      	ldr	r2, [pc, #16]	@ (80166f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 80166e6:	4802      	ldr	r0, [pc, #8]	@ (80166f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 80166e8:	6812      	ldr	r2, [r2, #0]
 80166ea:	601a      	str	r2, [r3, #0]
 80166ec:	bd08      	pop	{r3, pc}
 80166ee:	bf00      	nop
 80166f0:	24000fb0 	.word	0x24000fb0
 80166f4:	24000f38 	.word	0x24000f38
 80166f8:	24000d30 	.word	0x24000d30

080166fc <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 80166fc:	f009 baba 	b.w	801fc74 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08016700 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8016700:	f009 baca 	b.w	801fc98 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

08016704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016704:	b508      	push	{r3, lr}
 8016706:	f7fc fa31 	bl	8012b6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801670a:	4b06      	ldr	r3, [pc, #24]	@ (8016724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801670c:	4906      	ldr	r1, [pc, #24]	@ (8016728 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 801670e:	681a      	ldr	r2, [r3, #0]
 8016710:	60c8      	str	r0, [r1, #12]
 8016712:	b10a      	cbz	r2, 8016718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 8016714:	4803      	ldr	r0, [pc, #12]	@ (8016724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8016716:	bd08      	pop	{r3, pc}
 8016718:	4a04      	ldr	r2, [pc, #16]	@ (801672c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 801671a:	4802      	ldr	r0, [pc, #8]	@ (8016724 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801671c:	6812      	ldr	r2, [r2, #0]
 801671e:	601a      	str	r2, [r3, #0]
 8016720:	bd08      	pop	{r3, pc}
 8016722:	bf00      	nop
 8016724:	24001034 	.word	0x24001034
 8016728:	24000fbc 	.word	0x24000fbc
 801672c:	24000d30 	.word	0x24000d30

08016730 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016730:	b538      	push	{r3, r4, r5, lr}
 8016732:	4604      	mov	r4, r0
 8016734:	b150      	cbz	r0, 801674c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 8016736:	460d      	mov	r5, r1
 8016738:	f7ff fea6 	bl	8016488 <get_serialized_size_std_msgs__msg__Header>
 801673c:	4603      	mov	r3, r0
 801673e:	f104 0018 	add.w	r0, r4, #24
 8016742:	461c      	mov	r4, r3
 8016744:	18e9      	adds	r1, r5, r3
 8016746:	f009 facf 	bl	801fce8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 801674a:	4420      	add	r0, r4
 801674c:	bd38      	pop	{r3, r4, r5, pc}
 801674e:	bf00      	nop

08016750 <_ActuationCommandStamped__cdr_deserialize>:
 8016750:	b570      	push	{r4, r5, r6, lr}
 8016752:	460c      	mov	r4, r1
 8016754:	b199      	cbz	r1, 801677e <_ActuationCommandStamped__cdr_deserialize+0x2e>
 8016756:	4605      	mov	r5, r0
 8016758:	f7ff ff1a 	bl	8016590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801675c:	4603      	mov	r3, r0
 801675e:	4621      	mov	r1, r4
 8016760:	4628      	mov	r0, r5
 8016762:	685b      	ldr	r3, [r3, #4]
 8016764:	68db      	ldr	r3, [r3, #12]
 8016766:	4798      	blx	r3
 8016768:	f009 fb46 	bl	801fdf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 801676c:	4603      	mov	r3, r0
 801676e:	f104 0118 	add.w	r1, r4, #24
 8016772:	4628      	mov	r0, r5
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801677a:	68db      	ldr	r3, [r3, #12]
 801677c:	4718      	bx	r3
 801677e:	4608      	mov	r0, r1
 8016780:	bd70      	pop	{r4, r5, r6, pc}
 8016782:	bf00      	nop

08016784 <_ActuationCommandStamped__cdr_serialize>:
 8016784:	b510      	push	{r4, lr}
 8016786:	b082      	sub	sp, #8
 8016788:	9101      	str	r1, [sp, #4]
 801678a:	b1a0      	cbz	r0, 80167b6 <_ActuationCommandStamped__cdr_serialize+0x32>
 801678c:	4604      	mov	r4, r0
 801678e:	f7ff feff 	bl	8016590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016792:	4603      	mov	r3, r0
 8016794:	9901      	ldr	r1, [sp, #4]
 8016796:	4620      	mov	r0, r4
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	689b      	ldr	r3, [r3, #8]
 801679c:	4798      	blx	r3
 801679e:	f009 fb2b 	bl	801fdf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80167a2:	4603      	mov	r3, r0
 80167a4:	9901      	ldr	r1, [sp, #4]
 80167a6:	f104 0018 	add.w	r0, r4, #24
 80167aa:	685b      	ldr	r3, [r3, #4]
 80167ac:	689b      	ldr	r3, [r3, #8]
 80167ae:	b002      	add	sp, #8
 80167b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167b4:	4718      	bx	r3
 80167b6:	b002      	add	sp, #8
 80167b8:	bd10      	pop	{r4, pc}
 80167ba:	bf00      	nop

080167bc <_ActuationCommandStamped__get_serialized_size>:
 80167bc:	b510      	push	{r4, lr}
 80167be:	4604      	mov	r4, r0
 80167c0:	b148      	cbz	r0, 80167d6 <_ActuationCommandStamped__get_serialized_size+0x1a>
 80167c2:	2100      	movs	r1, #0
 80167c4:	f7ff fe60 	bl	8016488 <get_serialized_size_std_msgs__msg__Header>
 80167c8:	4601      	mov	r1, r0
 80167ca:	f104 0018 	add.w	r0, r4, #24
 80167ce:	460c      	mov	r4, r1
 80167d0:	f009 fa8a 	bl	801fce8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80167d4:	4420      	add	r0, r4
 80167d6:	bd10      	pop	{r4, pc}

080167d8 <_ActuationCommandStamped__max_serialized_size>:
 80167d8:	b510      	push	{r4, lr}
 80167da:	b082      	sub	sp, #8
 80167dc:	2301      	movs	r3, #1
 80167de:	2100      	movs	r1, #0
 80167e0:	f10d 0007 	add.w	r0, sp, #7
 80167e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80167e8:	f7ff fec8 	bl	801657c <max_serialized_size_std_msgs__msg__Header>
 80167ec:	4604      	mov	r4, r0
 80167ee:	f10d 0007 	add.w	r0, sp, #7
 80167f2:	4621      	mov	r1, r4
 80167f4:	f009 fae6 	bl	801fdc4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80167f8:	4420      	add	r0, r4
 80167fa:	b002      	add	sp, #8
 80167fc:	bd10      	pop	{r4, pc}
 80167fe:	bf00      	nop

08016800 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8016800:	4800      	ldr	r0, [pc, #0]	@ (8016804 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 8016802:	4770      	bx	lr
 8016804:	24001040 	.word	0x24001040

08016808 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8016808:	b538      	push	{r3, r4, r5, lr}
 801680a:	4604      	mov	r4, r0
 801680c:	b150      	cbz	r0, 8016824 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 801680e:	460d      	mov	r5, r1
 8016810:	f7ff fe3a 	bl	8016488 <get_serialized_size_std_msgs__msg__Header>
 8016814:	4603      	mov	r3, r0
 8016816:	f104 0018 	add.w	r0, r4, #24
 801681a:	461c      	mov	r4, r3
 801681c:	18e9      	adds	r1, r5, r3
 801681e:	f009 faef 	bl	801fe00 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 8016822:	4420      	add	r0, r4
 8016824:	bd38      	pop	{r3, r4, r5, pc}
 8016826:	bf00      	nop

08016828 <_ActuationStatusStamped__cdr_deserialize>:
 8016828:	b570      	push	{r4, r5, r6, lr}
 801682a:	460c      	mov	r4, r1
 801682c:	b199      	cbz	r1, 8016856 <_ActuationStatusStamped__cdr_deserialize+0x2e>
 801682e:	4605      	mov	r5, r0
 8016830:	f7ff feae 	bl	8016590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8016834:	4603      	mov	r3, r0
 8016836:	4621      	mov	r1, r4
 8016838:	4628      	mov	r0, r5
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	68db      	ldr	r3, [r3, #12]
 801683e:	4798      	blx	r3
 8016840:	f009 fb66 	bl	801ff10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 8016844:	4603      	mov	r3, r0
 8016846:	f104 0118 	add.w	r1, r4, #24
 801684a:	4628      	mov	r0, r5
 801684c:	685b      	ldr	r3, [r3, #4]
 801684e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016852:	68db      	ldr	r3, [r3, #12]
 8016854:	4718      	bx	r3
 8016856:	4608      	mov	r0, r1
 8016858:	bd70      	pop	{r4, r5, r6, pc}
 801685a:	bf00      	nop

0801685c <_ActuationStatusStamped__cdr_serialize>:
 801685c:	b510      	push	{r4, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	9101      	str	r1, [sp, #4]
 8016862:	b1a0      	cbz	r0, 801688e <_ActuationStatusStamped__cdr_serialize+0x32>
 8016864:	4604      	mov	r4, r0
 8016866:	f7ff fe93 	bl	8016590 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801686a:	4603      	mov	r3, r0
 801686c:	9901      	ldr	r1, [sp, #4]
 801686e:	4620      	mov	r0, r4
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	689b      	ldr	r3, [r3, #8]
 8016874:	4798      	blx	r3
 8016876:	f009 fb4b 	bl	801ff10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801687a:	4603      	mov	r3, r0
 801687c:	9901      	ldr	r1, [sp, #4]
 801687e:	f104 0018 	add.w	r0, r4, #24
 8016882:	685b      	ldr	r3, [r3, #4]
 8016884:	689b      	ldr	r3, [r3, #8]
 8016886:	b002      	add	sp, #8
 8016888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801688c:	4718      	bx	r3
 801688e:	b002      	add	sp, #8
 8016890:	bd10      	pop	{r4, pc}
 8016892:	bf00      	nop

08016894 <_ActuationStatusStamped__get_serialized_size>:
 8016894:	b510      	push	{r4, lr}
 8016896:	4604      	mov	r4, r0
 8016898:	b148      	cbz	r0, 80168ae <_ActuationStatusStamped__get_serialized_size+0x1a>
 801689a:	2100      	movs	r1, #0
 801689c:	f7ff fdf4 	bl	8016488 <get_serialized_size_std_msgs__msg__Header>
 80168a0:	4601      	mov	r1, r0
 80168a2:	f104 0018 	add.w	r0, r4, #24
 80168a6:	460c      	mov	r4, r1
 80168a8:	f009 faaa 	bl	801fe00 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80168ac:	4420      	add	r0, r4
 80168ae:	bd10      	pop	{r4, pc}

080168b0 <_ActuationStatusStamped__max_serialized_size>:
 80168b0:	b510      	push	{r4, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	2301      	movs	r3, #1
 80168b6:	2100      	movs	r1, #0
 80168b8:	f10d 0007 	add.w	r0, sp, #7
 80168bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80168c0:	f7ff fe5c 	bl	801657c <max_serialized_size_std_msgs__msg__Header>
 80168c4:	4604      	mov	r4, r0
 80168c6:	f10d 0007 	add.w	r0, sp, #7
 80168ca:	4621      	mov	r1, r4
 80168cc:	f009 fb06 	bl	801fedc <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80168d0:	4420      	add	r0, r4
 80168d2:	b002      	add	sp, #8
 80168d4:	bd10      	pop	{r4, pc}
 80168d6:	bf00      	nop

080168d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80168d8:	4800      	ldr	r0, [pc, #0]	@ (80168dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 80168da:	4770      	bx	lr
 80168dc:	24001068 	.word	0x24001068

080168e0 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80168e0:	b538      	push	{r3, r4, r5, lr}
 80168e2:	b158      	cbz	r0, 80168fc <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 80168e4:	460d      	mov	r5, r1
 80168e6:	f7fc f94f 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 80168ea:	2104      	movs	r1, #4
 80168ec:	182c      	adds	r4, r5, r0
 80168ee:	f1c5 0504 	rsb	r5, r5, #4
 80168f2:	4620      	mov	r0, r4
 80168f4:	f7fd fc4c 	bl	8014190 <ucdr_alignment>
 80168f8:	4428      	add	r0, r5
 80168fa:	4420      	add	r0, r4
 80168fc:	bd38      	pop	{r3, r4, r5, pc}
 80168fe:	bf00      	nop

08016900 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8016900:	b538      	push	{r3, r4, r5, lr}
 8016902:	460c      	mov	r4, r1
 8016904:	b179      	cbz	r1, 8016926 <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 8016906:	4605      	mov	r5, r0
 8016908:	f7fc f9a2 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801690c:	4603      	mov	r3, r0
 801690e:	4621      	mov	r1, r4
 8016910:	4628      	mov	r0, r5
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	68db      	ldr	r3, [r3, #12]
 8016916:	4798      	blx	r3
 8016918:	f104 0108 	add.w	r1, r4, #8
 801691c:	4628      	mov	r0, r5
 801691e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016922:	f7fd b9b7 	b.w	8013c94 <ucdr_deserialize_float>
 8016926:	4608      	mov	r0, r1
 8016928:	bd38      	pop	{r3, r4, r5, pc}
 801692a:	bf00      	nop

0801692c <_SteeringWheelStatusStamped__cdr_serialize>:
 801692c:	b188      	cbz	r0, 8016952 <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 801692e:	b538      	push	{r3, r4, r5, lr}
 8016930:	4604      	mov	r4, r0
 8016932:	460d      	mov	r5, r1
 8016934:	f7fc f98c 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8016938:	4603      	mov	r3, r0
 801693a:	4629      	mov	r1, r5
 801693c:	4620      	mov	r0, r4
 801693e:	685b      	ldr	r3, [r3, #4]
 8016940:	689b      	ldr	r3, [r3, #8]
 8016942:	4798      	blx	r3
 8016944:	ed94 0a02 	vldr	s0, [r4, #8]
 8016948:	4628      	mov	r0, r5
 801694a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801694e:	f7fd b909 	b.w	8013b64 <ucdr_serialize_float>
 8016952:	4770      	bx	lr

08016954 <_SteeringWheelStatusStamped__get_serialized_size>:
 8016954:	b150      	cbz	r0, 801696c <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 8016956:	2100      	movs	r1, #0
 8016958:	b510      	push	{r4, lr}
 801695a:	f7fc f915 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 801695e:	4604      	mov	r4, r0
 8016960:	2104      	movs	r1, #4
 8016962:	f7fd fc15 	bl	8014190 <ucdr_alignment>
 8016966:	4420      	add	r0, r4
 8016968:	3004      	adds	r0, #4
 801696a:	bd10      	pop	{r4, pc}
 801696c:	4770      	bx	lr
 801696e:	bf00      	nop

08016970 <_SteeringWheelStatusStamped__max_serialized_size>:
 8016970:	b510      	push	{r4, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	2301      	movs	r3, #1
 8016976:	2100      	movs	r1, #0
 8016978:	f10d 0007 	add.w	r0, sp, #7
 801697c:	f88d 3007 	strb.w	r3, [sp, #7]
 8016980:	f7fc f952 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8016984:	4604      	mov	r4, r0
 8016986:	2104      	movs	r1, #4
 8016988:	f7fd fc02 	bl	8014190 <ucdr_alignment>
 801698c:	4420      	add	r0, r4
 801698e:	3004      	adds	r0, #4
 8016990:	b002      	add	sp, #8
 8016992:	bd10      	pop	{r4, pc}

08016994 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8016994:	4800      	ldr	r0, [pc, #0]	@ (8016998 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 8016996:	4770      	bx	lr
 8016998:	24001090 	.word	0x24001090

0801699c <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801699c:	b538      	push	{r3, r4, r5, lr}
 801699e:	b158      	cbz	r0, 80169b8 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 80169a0:	460d      	mov	r5, r1
 80169a2:	f7fc f8f1 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 80169a6:	2101      	movs	r1, #1
 80169a8:	182c      	adds	r4, r5, r0
 80169aa:	f1c5 0501 	rsb	r5, r5, #1
 80169ae:	4620      	mov	r0, r4
 80169b0:	f7fd fbee 	bl	8014190 <ucdr_alignment>
 80169b4:	4428      	add	r0, r5
 80169b6:	4420      	add	r0, r4
 80169b8:	bd38      	pop	{r3, r4, r5, pc}
 80169ba:	bf00      	nop

080169bc <_VehicleEmergencyStamped__cdr_deserialize>:
 80169bc:	b538      	push	{r3, r4, r5, lr}
 80169be:	460c      	mov	r4, r1
 80169c0:	b179      	cbz	r1, 80169e2 <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 80169c2:	4605      	mov	r5, r0
 80169c4:	f7fc f944 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169c8:	4603      	mov	r3, r0
 80169ca:	4621      	mov	r1, r4
 80169cc:	4628      	mov	r0, r5
 80169ce:	685b      	ldr	r3, [r3, #4]
 80169d0:	68db      	ldr	r3, [r3, #12]
 80169d2:	4798      	blx	r3
 80169d4:	f104 0108 	add.w	r1, r4, #8
 80169d8:	4628      	mov	r0, r5
 80169da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169de:	f7fc b951 	b.w	8012c84 <ucdr_deserialize_bool>
 80169e2:	4608      	mov	r0, r1
 80169e4:	bd38      	pop	{r3, r4, r5, pc}
 80169e6:	bf00      	nop

080169e8 <_VehicleEmergencyStamped__cdr_serialize>:
 80169e8:	b180      	cbz	r0, 8016a0c <_VehicleEmergencyStamped__cdr_serialize+0x24>
 80169ea:	b538      	push	{r3, r4, r5, lr}
 80169ec:	4604      	mov	r4, r0
 80169ee:	460d      	mov	r5, r1
 80169f0:	f7fc f92e 	bl	8012c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80169f4:	4603      	mov	r3, r0
 80169f6:	4629      	mov	r1, r5
 80169f8:	4620      	mov	r0, r4
 80169fa:	685b      	ldr	r3, [r3, #4]
 80169fc:	689b      	ldr	r3, [r3, #8]
 80169fe:	4798      	blx	r3
 8016a00:	7a21      	ldrb	r1, [r4, #8]
 8016a02:	4628      	mov	r0, r5
 8016a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a08:	f7fc b926 	b.w	8012c58 <ucdr_serialize_bool>
 8016a0c:	4770      	bx	lr
 8016a0e:	bf00      	nop

08016a10 <_VehicleEmergencyStamped__get_serialized_size>:
 8016a10:	b150      	cbz	r0, 8016a28 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8016a12:	2100      	movs	r1, #0
 8016a14:	b510      	push	{r4, lr}
 8016a16:	f7fc f8b7 	bl	8012b88 <get_serialized_size_builtin_interfaces__msg__Time>
 8016a1a:	4604      	mov	r4, r0
 8016a1c:	2101      	movs	r1, #1
 8016a1e:	f7fd fbb7 	bl	8014190 <ucdr_alignment>
 8016a22:	4420      	add	r0, r4
 8016a24:	3001      	adds	r0, #1
 8016a26:	bd10      	pop	{r4, pc}
 8016a28:	4770      	bx	lr
 8016a2a:	bf00      	nop

08016a2c <_VehicleEmergencyStamped__max_serialized_size>:
 8016a2c:	b510      	push	{r4, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	2401      	movs	r4, #1
 8016a32:	2100      	movs	r1, #0
 8016a34:	f10d 0007 	add.w	r0, sp, #7
 8016a38:	f88d 4007 	strb.w	r4, [sp, #7]
 8016a3c:	f7fc f8f4 	bl	8012c28 <max_serialized_size_builtin_interfaces__msg__Time>
 8016a40:	4621      	mov	r1, r4
 8016a42:	4604      	mov	r4, r0
 8016a44:	f7fd fba4 	bl	8014190 <ucdr_alignment>
 8016a48:	4420      	add	r0, r4
 8016a4a:	3001      	adds	r0, #1
 8016a4c:	b002      	add	sp, #8
 8016a4e:	bd10      	pop	{r4, pc}

08016a50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8016a50:	4800      	ldr	r0, [pc, #0]	@ (8016a54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8016a52:	4770      	bx	lr
 8016a54:	240010b8 	.word	0x240010b8

08016a58 <autoware_auto_control_msgs__msg__AckermannControlCommand__init>:
 8016a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a5a:	4605      	mov	r5, r0
 8016a5c:	b300      	cbz	r0, 8016aa0 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x48>
 8016a5e:	f000 f971 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016a62:	4604      	mov	r4, r0
 8016a64:	b178      	cbz	r0, 8016a86 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2e>
 8016a66:	f105 0608 	add.w	r6, r5, #8
 8016a6a:	4630      	mov	r0, r6
 8016a6c:	f000 f842 	bl	8016af4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>
 8016a70:	4604      	mov	r4, r0
 8016a72:	b1c0      	cbz	r0, 8016aa6 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x4e>
 8016a74:	f105 0718 	add.w	r7, r5, #24
 8016a78:	4638      	mov	r0, r7
 8016a7a:	f000 f853 	bl	8016b24 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>
 8016a7e:	4604      	mov	r4, r0
 8016a80:	b1e8      	cbz	r0, 8016abe <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x66>
 8016a82:	4620      	mov	r0, r4
 8016a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a86:	4628      	mov	r0, r5
 8016a88:	f000 f960 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016a8c:	f105 0008 	add.w	r0, r5, #8
 8016a90:	f000 f844 	bl	8016b1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016a94:	f105 0018 	add.w	r0, r5, #24
 8016a98:	f000 f85a 	bl	8016b50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016a9c:	4620      	mov	r0, r4
 8016a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	f000 f950 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016aac:	4630      	mov	r0, r6
 8016aae:	f000 f835 	bl	8016b1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016ab2:	f105 0018 	add.w	r0, r5, #24
 8016ab6:	f000 f84b 	bl	8016b50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016aba:	4620      	mov	r0, r4
 8016abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016abe:	4628      	mov	r0, r5
 8016ac0:	f000 f944 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016ac4:	4630      	mov	r0, r6
 8016ac6:	f000 f829 	bl	8016b1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016aca:	4638      	mov	r0, r7
 8016acc:	f000 f840 	bl	8016b50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016ad0:	e7d7      	b.n	8016a82 <autoware_auto_control_msgs__msg__AckermannControlCommand__init+0x2a>
 8016ad2:	bf00      	nop

08016ad4 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini>:
 8016ad4:	b168      	cbz	r0, 8016af2 <autoware_auto_control_msgs__msg__AckermannControlCommand__fini+0x1e>
 8016ad6:	b510      	push	{r4, lr}
 8016ad8:	4604      	mov	r4, r0
 8016ada:	f000 f937 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016ade:	f104 0008 	add.w	r0, r4, #8
 8016ae2:	f000 f81b 	bl	8016b1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>
 8016ae6:	f104 0018 	add.w	r0, r4, #24
 8016aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aee:	f000 b82f 	b.w	8016b50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>
 8016af2:	4770      	bx	lr

08016af4 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init>:
 8016af4:	b538      	push	{r3, r4, r5, lr}
 8016af6:	4604      	mov	r4, r0
 8016af8:	b140      	cbz	r0, 8016b0c <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x18>
 8016afa:	f000 f923 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016afe:	4605      	mov	r5, r0
 8016b00:	b138      	cbz	r0, 8016b12 <autoware_auto_control_msgs__msg__AckermannLateralCommand__init+0x1e>
 8016b02:	2300      	movs	r3, #0
 8016b04:	4628      	mov	r0, r5
 8016b06:	60a3      	str	r3, [r4, #8]
 8016b08:	60e3      	str	r3, [r4, #12]
 8016b0a:	bd38      	pop	{r3, r4, r5, pc}
 8016b0c:	4605      	mov	r5, r0
 8016b0e:	4628      	mov	r0, r5
 8016b10:	bd38      	pop	{r3, r4, r5, pc}
 8016b12:	4620      	mov	r0, r4
 8016b14:	f000 f91a 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016b18:	4628      	mov	r0, r5
 8016b1a:	bd38      	pop	{r3, r4, r5, pc}

08016b1c <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini>:
 8016b1c:	b108      	cbz	r0, 8016b22 <autoware_auto_control_msgs__msg__AckermannLateralCommand__fini+0x6>
 8016b1e:	f000 b915 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016b22:	4770      	bx	lr

08016b24 <autoware_auto_control_msgs__msg__LongitudinalCommand__init>:
 8016b24:	b538      	push	{r3, r4, r5, lr}
 8016b26:	4604      	mov	r4, r0
 8016b28:	b148      	cbz	r0, 8016b3e <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x1a>
 8016b2a:	f000 f90b 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016b2e:	4605      	mov	r5, r0
 8016b30:	b140      	cbz	r0, 8016b44 <autoware_auto_control_msgs__msg__LongitudinalCommand__init+0x20>
 8016b32:	2300      	movs	r3, #0
 8016b34:	4628      	mov	r0, r5
 8016b36:	60a3      	str	r3, [r4, #8]
 8016b38:	60e3      	str	r3, [r4, #12]
 8016b3a:	6123      	str	r3, [r4, #16]
 8016b3c:	bd38      	pop	{r3, r4, r5, pc}
 8016b3e:	4605      	mov	r5, r0
 8016b40:	4628      	mov	r0, r5
 8016b42:	bd38      	pop	{r3, r4, r5, pc}
 8016b44:	4620      	mov	r0, r4
 8016b46:	f000 f901 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016b4a:	4628      	mov	r0, r5
 8016b4c:	bd38      	pop	{r3, r4, r5, pc}
 8016b4e:	bf00      	nop

08016b50 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini>:
 8016b50:	b108      	cbz	r0, 8016b56 <autoware_auto_control_msgs__msg__LongitudinalCommand__fini+0x6>
 8016b52:	f000 b8fb 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016b56:	4770      	bx	lr

08016b58 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8016b58:	b538      	push	{r3, r4, r5, lr}
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	b128      	cbz	r0, 8016b6a <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8016b5e:	f000 f8f1 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016b62:	4605      	mov	r5, r0
 8016b64:	b120      	cbz	r0, 8016b70 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8016b66:	4628      	mov	r0, r5
 8016b68:	bd38      	pop	{r3, r4, r5, pc}
 8016b6a:	4605      	mov	r5, r0
 8016b6c:	4628      	mov	r0, r5
 8016b6e:	bd38      	pop	{r3, r4, r5, pc}
 8016b70:	4620      	mov	r0, r4
 8016b72:	f000 f8eb 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016b76:	4628      	mov	r0, r5
 8016b78:	bd38      	pop	{r3, r4, r5, pc}
 8016b7a:	bf00      	nop

08016b7c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8016b7c:	b108      	cbz	r0, 8016b82 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8016b7e:	f000 b8e5 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016b82:	4770      	bx	lr

08016b84 <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8016b84:	3800      	subs	r0, #0
 8016b86:	bf18      	it	ne
 8016b88:	2001      	movne	r0, #1
 8016b8a:	4770      	bx	lr

08016b8c <autoware_auto_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8016b8c:	4770      	bx	lr
 8016b8e:	bf00      	nop

08016b90 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init>:
 8016b90:	b538      	push	{r3, r4, r5, lr}
 8016b92:	4604      	mov	r4, r0
 8016b94:	b138      	cbz	r0, 8016ba6 <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x16>
 8016b96:	f000 f8d5 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016b9a:	4605      	mov	r5, r0
 8016b9c:	b130      	cbz	r0, 8016bac <autoware_auto_vehicle_msgs__msg__ControlModeReport__init+0x1c>
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	4628      	mov	r0, r5
 8016ba2:	7223      	strb	r3, [r4, #8]
 8016ba4:	bd38      	pop	{r3, r4, r5, pc}
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	4628      	mov	r0, r5
 8016baa:	bd38      	pop	{r3, r4, r5, pc}
 8016bac:	4620      	mov	r0, r4
 8016bae:	f000 f8cd 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016bb2:	4628      	mov	r0, r5
 8016bb4:	bd38      	pop	{r3, r4, r5, pc}
 8016bb6:	bf00      	nop

08016bb8 <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini>:
 8016bb8:	b108      	cbz	r0, 8016bbe <autoware_auto_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8016bba:	f000 b8c7 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016bbe:	4770      	bx	lr

08016bc0 <autoware_auto_vehicle_msgs__msg__GearCommand__init>:
 8016bc0:	b538      	push	{r3, r4, r5, lr}
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	b138      	cbz	r0, 8016bd6 <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x16>
 8016bc6:	f000 f8bd 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016bca:	4605      	mov	r5, r0
 8016bcc:	b130      	cbz	r0, 8016bdc <autoware_auto_vehicle_msgs__msg__GearCommand__init+0x1c>
 8016bce:	2300      	movs	r3, #0
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	7223      	strb	r3, [r4, #8]
 8016bd4:	bd38      	pop	{r3, r4, r5, pc}
 8016bd6:	4605      	mov	r5, r0
 8016bd8:	4628      	mov	r0, r5
 8016bda:	bd38      	pop	{r3, r4, r5, pc}
 8016bdc:	4620      	mov	r0, r4
 8016bde:	f000 f8b5 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016be2:	4628      	mov	r0, r5
 8016be4:	bd38      	pop	{r3, r4, r5, pc}
 8016be6:	bf00      	nop

08016be8 <autoware_auto_vehicle_msgs__msg__GearCommand__fini>:
 8016be8:	b108      	cbz	r0, 8016bee <autoware_auto_vehicle_msgs__msg__GearCommand__fini+0x6>
 8016bea:	f000 b8af 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016bee:	4770      	bx	lr

08016bf0 <autoware_auto_vehicle_msgs__msg__GearReport__init>:
 8016bf0:	b538      	push	{r3, r4, r5, lr}
 8016bf2:	4604      	mov	r4, r0
 8016bf4:	b138      	cbz	r0, 8016c06 <autoware_auto_vehicle_msgs__msg__GearReport__init+0x16>
 8016bf6:	f000 f8a5 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016bfa:	4605      	mov	r5, r0
 8016bfc:	b130      	cbz	r0, 8016c0c <autoware_auto_vehicle_msgs__msg__GearReport__init+0x1c>
 8016bfe:	2300      	movs	r3, #0
 8016c00:	4628      	mov	r0, r5
 8016c02:	7223      	strb	r3, [r4, #8]
 8016c04:	bd38      	pop	{r3, r4, r5, pc}
 8016c06:	4605      	mov	r5, r0
 8016c08:	4628      	mov	r0, r5
 8016c0a:	bd38      	pop	{r3, r4, r5, pc}
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	f000 f89d 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016c12:	4628      	mov	r0, r5
 8016c14:	bd38      	pop	{r3, r4, r5, pc}
 8016c16:	bf00      	nop

08016c18 <autoware_auto_vehicle_msgs__msg__GearReport__fini>:
 8016c18:	b108      	cbz	r0, 8016c1e <autoware_auto_vehicle_msgs__msg__GearReport__fini+0x6>
 8016c1a:	f000 b897 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016c1e:	4770      	bx	lr

08016c20 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init>:
 8016c20:	b538      	push	{r3, r4, r5, lr}
 8016c22:	4604      	mov	r4, r0
 8016c24:	b138      	cbz	r0, 8016c36 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x16>
 8016c26:	f000 f88d 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016c2a:	4605      	mov	r5, r0
 8016c2c:	b130      	cbz	r0, 8016c3c <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__init+0x1c>
 8016c2e:	2300      	movs	r3, #0
 8016c30:	4628      	mov	r0, r5
 8016c32:	7223      	strb	r3, [r4, #8]
 8016c34:	bd38      	pop	{r3, r4, r5, pc}
 8016c36:	4605      	mov	r5, r0
 8016c38:	4628      	mov	r0, r5
 8016c3a:	bd38      	pop	{r3, r4, r5, pc}
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	f000 f885 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016c42:	4628      	mov	r0, r5
 8016c44:	bd38      	pop	{r3, r4, r5, pc}
 8016c46:	bf00      	nop

08016c48 <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8016c48:	b108      	cbz	r0, 8016c4e <autoware_auto_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8016c4a:	f000 b87f 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016c4e:	4770      	bx	lr

08016c50 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init>:
 8016c50:	b538      	push	{r3, r4, r5, lr}
 8016c52:	4604      	mov	r4, r0
 8016c54:	b138      	cbz	r0, 8016c66 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x16>
 8016c56:	f000 f875 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	b130      	cbz	r0, 8016c6c <autoware_auto_vehicle_msgs__msg__HazardLightsReport__init+0x1c>
 8016c5e:	2300      	movs	r3, #0
 8016c60:	4628      	mov	r0, r5
 8016c62:	7223      	strb	r3, [r4, #8]
 8016c64:	bd38      	pop	{r3, r4, r5, pc}
 8016c66:	4605      	mov	r5, r0
 8016c68:	4628      	mov	r0, r5
 8016c6a:	bd38      	pop	{r3, r4, r5, pc}
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	f000 f86d 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016c72:	4628      	mov	r0, r5
 8016c74:	bd38      	pop	{r3, r4, r5, pc}
 8016c76:	bf00      	nop

08016c78 <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini>:
 8016c78:	b108      	cbz	r0, 8016c7e <autoware_auto_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8016c7a:	f000 b867 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016c7e:	4770      	bx	lr

08016c80 <autoware_auto_vehicle_msgs__msg__SteeringReport__init>:
 8016c80:	b538      	push	{r3, r4, r5, lr}
 8016c82:	4604      	mov	r4, r0
 8016c84:	b138      	cbz	r0, 8016c96 <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x16>
 8016c86:	f000 f85d 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016c8a:	4605      	mov	r5, r0
 8016c8c:	b130      	cbz	r0, 8016c9c <autoware_auto_vehicle_msgs__msg__SteeringReport__init+0x1c>
 8016c8e:	2300      	movs	r3, #0
 8016c90:	4628      	mov	r0, r5
 8016c92:	60a3      	str	r3, [r4, #8]
 8016c94:	bd38      	pop	{r3, r4, r5, pc}
 8016c96:	4605      	mov	r5, r0
 8016c98:	4628      	mov	r0, r5
 8016c9a:	bd38      	pop	{r3, r4, r5, pc}
 8016c9c:	4620      	mov	r0, r4
 8016c9e:	f000 f855 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	bd38      	pop	{r3, r4, r5, pc}
 8016ca6:	bf00      	nop

08016ca8 <autoware_auto_vehicle_msgs__msg__SteeringReport__fini>:
 8016ca8:	b108      	cbz	r0, 8016cae <autoware_auto_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8016caa:	f000 b84f 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016cae:	4770      	bx	lr

08016cb0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8016cb0:	b538      	push	{r3, r4, r5, lr}
 8016cb2:	4604      	mov	r4, r0
 8016cb4:	b138      	cbz	r0, 8016cc6 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x16>
 8016cb6:	f000 f845 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016cba:	4605      	mov	r5, r0
 8016cbc:	b130      	cbz	r0, 8016ccc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x1c>
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	7223      	strb	r3, [r4, #8]
 8016cc4:	bd38      	pop	{r3, r4, r5, pc}
 8016cc6:	4605      	mov	r5, r0
 8016cc8:	4628      	mov	r0, r5
 8016cca:	bd38      	pop	{r3, r4, r5, pc}
 8016ccc:	4620      	mov	r0, r4
 8016cce:	f000 f83d 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	bd38      	pop	{r3, r4, r5, pc}
 8016cd6:	bf00      	nop

08016cd8 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8016cd8:	b108      	cbz	r0, 8016cde <autoware_auto_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8016cda:	f000 b837 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016cde:	4770      	bx	lr

08016ce0 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8016ce0:	b538      	push	{r3, r4, r5, lr}
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	b138      	cbz	r0, 8016cf6 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x16>
 8016ce6:	f000 f82d 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 8016cea:	4605      	mov	r5, r0
 8016cec:	b130      	cbz	r0, 8016cfc <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__init+0x1c>
 8016cee:	2300      	movs	r3, #0
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	7223      	strb	r3, [r4, #8]
 8016cf4:	bd38      	pop	{r3, r4, r5, pc}
 8016cf6:	4605      	mov	r5, r0
 8016cf8:	4628      	mov	r0, r5
 8016cfa:	bd38      	pop	{r3, r4, r5, pc}
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f000 f825 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 8016d02:	4628      	mov	r0, r5
 8016d04:	bd38      	pop	{r3, r4, r5, pc}
 8016d06:	bf00      	nop

08016d08 <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8016d08:	b108      	cbz	r0, 8016d0e <autoware_auto_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8016d0a:	f000 b81f 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 8016d0e:	4770      	bx	lr

08016d10 <autoware_auto_vehicle_msgs__msg__VelocityReport__init>:
 8016d10:	b538      	push	{r3, r4, r5, lr}
 8016d12:	4604      	mov	r4, r0
 8016d14:	b148      	cbz	r0, 8016d2a <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x1a>
 8016d16:	f008 ff07 	bl	801fb28 <std_msgs__msg__Header__init>
 8016d1a:	4605      	mov	r5, r0
 8016d1c:	b140      	cbz	r0, 8016d30 <autoware_auto_vehicle_msgs__msg__VelocityReport__init+0x20>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	4628      	mov	r0, r5
 8016d22:	6163      	str	r3, [r4, #20]
 8016d24:	61a3      	str	r3, [r4, #24]
 8016d26:	61e3      	str	r3, [r4, #28]
 8016d28:	bd38      	pop	{r3, r4, r5, pc}
 8016d2a:	4605      	mov	r5, r0
 8016d2c:	4628      	mov	r0, r5
 8016d2e:	bd38      	pop	{r3, r4, r5, pc}
 8016d30:	4620      	mov	r0, r4
 8016d32:	f008 ff1d 	bl	801fb70 <std_msgs__msg__Header__fini>
 8016d36:	4628      	mov	r0, r5
 8016d38:	bd38      	pop	{r3, r4, r5, pc}
 8016d3a:	bf00      	nop

08016d3c <autoware_auto_vehicle_msgs__msg__VelocityReport__fini>:
 8016d3c:	b108      	cbz	r0, 8016d42 <autoware_auto_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8016d3e:	f008 bf17 	b.w	801fb70 <std_msgs__msg__Header__fini>
 8016d42:	4770      	bx	lr

08016d44 <builtin_interfaces__msg__Time__init>:
 8016d44:	3800      	subs	r0, #0
 8016d46:	bf18      	it	ne
 8016d48:	2001      	movne	r0, #1
 8016d4a:	4770      	bx	lr

08016d4c <builtin_interfaces__msg__Time__fini>:
 8016d4c:	4770      	bx	lr
 8016d4e:	bf00      	nop

08016d50 <ucdr_serialize_sequence_char>:
 8016d50:	b570      	push	{r4, r5, r6, lr}
 8016d52:	4615      	mov	r5, r2
 8016d54:	460e      	mov	r6, r1
 8016d56:	7d01      	ldrb	r1, [r0, #20]
 8016d58:	4604      	mov	r4, r0
 8016d5a:	f7fc fa59 	bl	8013210 <ucdr_serialize_endian_uint32_t>
 8016d5e:	b90d      	cbnz	r5, 8016d64 <ucdr_serialize_sequence_char+0x14>
 8016d60:	2001      	movs	r0, #1
 8016d62:	bd70      	pop	{r4, r5, r6, pc}
 8016d64:	462b      	mov	r3, r5
 8016d66:	4632      	mov	r2, r6
 8016d68:	7d21      	ldrb	r1, [r4, #20]
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d70:	f009 b8d2 	b.w	801ff18 <ucdr_serialize_endian_array_char>

08016d74 <ucdr_deserialize_sequence_char>:
 8016d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d78:	461d      	mov	r5, r3
 8016d7a:	4616      	mov	r6, r2
 8016d7c:	460f      	mov	r7, r1
 8016d7e:	461a      	mov	r2, r3
 8016d80:	7d01      	ldrb	r1, [r0, #20]
 8016d82:	4604      	mov	r4, r0
 8016d84:	f7fc fb6c 	bl	8013460 <ucdr_deserialize_endian_uint32_t>
 8016d88:	682b      	ldr	r3, [r5, #0]
 8016d8a:	429e      	cmp	r6, r3
 8016d8c:	d201      	bcs.n	8016d92 <ucdr_deserialize_sequence_char+0x1e>
 8016d8e:	2201      	movs	r2, #1
 8016d90:	75a2      	strb	r2, [r4, #22]
 8016d92:	b913      	cbnz	r3, 8016d9a <ucdr_deserialize_sequence_char+0x26>
 8016d94:	2001      	movs	r0, #1
 8016d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d9a:	463a      	mov	r2, r7
 8016d9c:	7d21      	ldrb	r1, [r4, #20]
 8016d9e:	4620      	mov	r0, r4
 8016da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016da4:	f009 b8ea 	b.w	801ff7c <ucdr_deserialize_endian_array_char>

08016da8 <ucdr_serialize_sequence_uint8_t>:
 8016da8:	b570      	push	{r4, r5, r6, lr}
 8016daa:	4615      	mov	r5, r2
 8016dac:	460e      	mov	r6, r1
 8016dae:	7d01      	ldrb	r1, [r0, #20]
 8016db0:	4604      	mov	r4, r0
 8016db2:	f7fc fa2d 	bl	8013210 <ucdr_serialize_endian_uint32_t>
 8016db6:	b90d      	cbnz	r5, 8016dbc <ucdr_serialize_sequence_uint8_t+0x14>
 8016db8:	2001      	movs	r0, #1
 8016dba:	bd70      	pop	{r4, r5, r6, pc}
 8016dbc:	462b      	mov	r3, r5
 8016dbe:	4632      	mov	r2, r6
 8016dc0:	7d21      	ldrb	r1, [r4, #20]
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dc8:	f009 b93e 	b.w	8020048 <ucdr_serialize_endian_array_uint8_t>

08016dcc <ucdr_deserialize_sequence_uint8_t>:
 8016dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dd0:	461d      	mov	r5, r3
 8016dd2:	4616      	mov	r6, r2
 8016dd4:	460f      	mov	r7, r1
 8016dd6:	461a      	mov	r2, r3
 8016dd8:	7d01      	ldrb	r1, [r0, #20]
 8016dda:	4604      	mov	r4, r0
 8016ddc:	f7fc fb40 	bl	8013460 <ucdr_deserialize_endian_uint32_t>
 8016de0:	682b      	ldr	r3, [r5, #0]
 8016de2:	429e      	cmp	r6, r3
 8016de4:	d201      	bcs.n	8016dea <ucdr_deserialize_sequence_uint8_t+0x1e>
 8016de6:	2201      	movs	r2, #1
 8016de8:	75a2      	strb	r2, [r4, #22]
 8016dea:	b913      	cbnz	r3, 8016df2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016dec:	2001      	movs	r0, #1
 8016dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016df2:	463a      	mov	r2, r7
 8016df4:	7d21      	ldrb	r1, [r4, #20]
 8016df6:	4620      	mov	r0, r4
 8016df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dfc:	f009 b98a 	b.w	8020114 <ucdr_deserialize_endian_array_uint8_t>

08016e00 <uxr_buffer_delete_entity>:
 8016e00:	b510      	push	{r4, lr}
 8016e02:	2300      	movs	r3, #0
 8016e04:	b08e      	sub	sp, #56	@ 0x38
 8016e06:	4604      	mov	r4, r0
 8016e08:	9103      	str	r1, [sp, #12]
 8016e0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016e0e:	2303      	movs	r3, #3
 8016e10:	2204      	movs	r2, #4
 8016e12:	9300      	str	r3, [sp, #0]
 8016e14:	ab06      	add	r3, sp, #24
 8016e16:	f001 fbcb 	bl	80185b0 <uxr_prepare_stream_to_write_submessage>
 8016e1a:	b918      	cbnz	r0, 8016e24 <uxr_buffer_delete_entity+0x24>
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	4620      	mov	r0, r4
 8016e20:	b00e      	add	sp, #56	@ 0x38
 8016e22:	bd10      	pop	{r4, pc}
 8016e24:	9902      	ldr	r1, [sp, #8]
 8016e26:	aa05      	add	r2, sp, #20
 8016e28:	4620      	mov	r0, r4
 8016e2a:	f001 fcfd 	bl	8018828 <uxr_init_base_object_request>
 8016e2e:	4604      	mov	r4, r0
 8016e30:	a905      	add	r1, sp, #20
 8016e32:	a806      	add	r0, sp, #24
 8016e34:	f003 fc18 	bl	801a668 <uxr_serialize_DELETE_Payload>
 8016e38:	4620      	mov	r0, r4
 8016e3a:	b00e      	add	sp, #56	@ 0x38
 8016e3c:	bd10      	pop	{r4, pc}
 8016e3e:	bf00      	nop

08016e40 <uxr_common_create_entity>:
 8016e40:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016e44:	b510      	push	{r4, lr}
 8016e46:	f1bc 0f01 	cmp.w	ip, #1
 8016e4a:	b08c      	sub	sp, #48	@ 0x30
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	9202      	str	r2, [sp, #8]
 8016e50:	bf0c      	ite	eq
 8016e52:	f003 0201 	andeq.w	r2, r3, #1
 8016e56:	2200      	movne	r2, #0
 8016e58:	330e      	adds	r3, #14
 8016e5a:	9103      	str	r1, [sp, #12]
 8016e5c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8016e60:	441a      	add	r2, r3
 8016e62:	ab04      	add	r3, sp, #16
 8016e64:	9101      	str	r1, [sp, #4]
 8016e66:	2101      	movs	r1, #1
 8016e68:	b292      	uxth	r2, r2
 8016e6a:	9100      	str	r1, [sp, #0]
 8016e6c:	9903      	ldr	r1, [sp, #12]
 8016e6e:	f001 fb9f 	bl	80185b0 <uxr_prepare_stream_to_write_submessage>
 8016e72:	b918      	cbnz	r0, 8016e7c <uxr_common_create_entity+0x3c>
 8016e74:	4604      	mov	r4, r0
 8016e76:	4620      	mov	r0, r4
 8016e78:	b00c      	add	sp, #48	@ 0x30
 8016e7a:	bd10      	pop	{r4, pc}
 8016e7c:	9902      	ldr	r1, [sp, #8]
 8016e7e:	4620      	mov	r0, r4
 8016e80:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016e82:	f001 fcd1 	bl	8018828 <uxr_init_base_object_request>
 8016e86:	4604      	mov	r4, r0
 8016e88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016e8a:	a804      	add	r0, sp, #16
 8016e8c:	f003 fb30 	bl	801a4f0 <uxr_serialize_CREATE_Payload>
 8016e90:	4620      	mov	r0, r4
 8016e92:	b00c      	add	sp, #48	@ 0x30
 8016e94:	bd10      	pop	{r4, pc}
 8016e96:	bf00      	nop

08016e98 <uxr_buffer_create_participant_bin>:
 8016e98:	b570      	push	{r4, r5, r6, lr}
 8016e9a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8016e9e:	4605      	mov	r5, r0
 8016ea0:	ac11      	add	r4, sp, #68	@ 0x44
 8016ea2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8016ea6:	2303      	movs	r3, #3
 8016ea8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8016eac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016eb0:	7223      	strb	r3, [r4, #8]
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	2201      	movs	r2, #1
 8016eb6:	f88d 3014 	strb.w	r3, [sp, #20]
 8016eba:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8016ebc:	7122      	strb	r2, [r4, #4]
 8016ebe:	b1cb      	cbz	r3, 8016ef4 <uxr_buffer_create_participant_bin+0x5c>
 8016ec0:	f88d 201c 	strb.w	r2, [sp, #28]
 8016ec4:	9308      	str	r3, [sp, #32]
 8016ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016eca:	a915      	add	r1, sp, #84	@ 0x54
 8016ecc:	a809      	add	r0, sp, #36	@ 0x24
 8016ece:	f7fd f95b 	bl	8014188 <ucdr_init_buffer>
 8016ed2:	a905      	add	r1, sp, #20
 8016ed4:	a809      	add	r0, sp, #36	@ 0x24
 8016ed6:	f002 fec1 	bl	8019c5c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8016eda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016edc:	9600      	str	r6, [sp, #0]
 8016ede:	4628      	mov	r0, r5
 8016ee0:	9401      	str	r4, [sp, #4]
 8016ee2:	60e3      	str	r3, [r4, #12]
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016eea:	f7ff ffa9 	bl	8016e40 <uxr_common_create_entity>
 8016eee:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8016ef2:	bd70      	pop	{r4, r5, r6, pc}
 8016ef4:	f88d 301c 	strb.w	r3, [sp, #28]
 8016ef8:	e7e5      	b.n	8016ec6 <uxr_buffer_create_participant_bin+0x2e>
 8016efa:	bf00      	nop

08016efc <uxr_buffer_create_topic_bin>:
 8016efc:	b570      	push	{r4, r5, r6, lr}
 8016efe:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8016f02:	4605      	mov	r5, r0
 8016f04:	4618      	mov	r0, r3
 8016f06:	9105      	str	r1, [sp, #20]
 8016f08:	a997      	add	r1, sp, #604	@ 0x25c
 8016f0a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8016f0e:	ac13      	add	r4, sp, #76	@ 0x4c
 8016f10:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016f14:	2302      	movs	r3, #2
 8016f16:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8016f1a:	f000 fa8d 	bl	8017438 <uxr_object_id_to_raw>
 8016f1e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8016f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016f24:	a917      	add	r1, sp, #92	@ 0x5c
 8016f26:	a80b      	add	r0, sp, #44	@ 0x2c
 8016f28:	9306      	str	r3, [sp, #24]
 8016f2a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8016f2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8016f2e:	2303      	movs	r3, #3
 8016f30:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8016f34:	2301      	movs	r3, #1
 8016f36:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016f40:	f7fd f922 	bl	8014188 <ucdr_init_buffer>
 8016f44:	a906      	add	r1, sp, #24
 8016f46:	a80b      	add	r0, sp, #44	@ 0x2c
 8016f48:	f002 feaa 	bl	8019ca0 <uxr_serialize_OBJK_Topic_Binary>
 8016f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f4e:	4628      	mov	r0, r5
 8016f50:	9600      	str	r6, [sp, #0]
 8016f52:	9316      	str	r3, [sp, #88]	@ 0x58
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	9401      	str	r4, [sp, #4]
 8016f58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016f5c:	f7ff ff70 	bl	8016e40 <uxr_common_create_entity>
 8016f60:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8016f64:	bd70      	pop	{r4, r5, r6, pc}
 8016f66:	bf00      	nop

08016f68 <uxr_buffer_create_publisher_bin>:
 8016f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f6a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8016f6e:	2603      	movs	r6, #3
 8016f70:	4605      	mov	r5, r0
 8016f72:	4618      	mov	r0, r3
 8016f74:	9105      	str	r1, [sp, #20]
 8016f76:	a992      	add	r1, sp, #584	@ 0x248
 8016f78:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8016f7c:	ac0e      	add	r4, sp, #56	@ 0x38
 8016f7e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8016f82:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016f86:	f000 fa57 	bl	8017438 <uxr_object_id_to_raw>
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016f90:	a912      	add	r1, sp, #72	@ 0x48
 8016f92:	a806      	add	r0, sp, #24
 8016f94:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016f98:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8016f9c:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8016fa0:	f7fd f8f2 	bl	8014188 <ucdr_init_buffer>
 8016fa4:	a993      	add	r1, sp, #588	@ 0x24c
 8016fa6:	a806      	add	r0, sp, #24
 8016fa8:	f002 ff2e 	bl	8019e08 <uxr_serialize_OBJK_Publisher_Binary>
 8016fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fae:	4628      	mov	r0, r5
 8016fb0:	9700      	str	r7, [sp, #0]
 8016fb2:	9311      	str	r3, [sp, #68]	@ 0x44
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	9401      	str	r4, [sp, #4]
 8016fb8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016fbc:	f7ff ff40 	bl	8016e40 <uxr_common_create_entity>
 8016fc0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8016fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fc6:	bf00      	nop

08016fc8 <uxr_buffer_create_subscriber_bin>:
 8016fc8:	b570      	push	{r4, r5, r6, lr}
 8016fca:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8016fce:	4605      	mov	r5, r0
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	9105      	str	r1, [sp, #20]
 8016fd4:	a992      	add	r1, sp, #584	@ 0x248
 8016fd6:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8016fda:	ac0e      	add	r4, sp, #56	@ 0x38
 8016fdc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016fe0:	2304      	movs	r3, #4
 8016fe2:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8016fe6:	f000 fa27 	bl	8017438 <uxr_object_id_to_raw>
 8016fea:	2300      	movs	r3, #0
 8016fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016ff0:	a912      	add	r1, sp, #72	@ 0x48
 8016ff2:	a806      	add	r0, sp, #24
 8016ff4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016ff8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8016ffc:	2303      	movs	r3, #3
 8016ffe:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8017002:	f7fd f8c1 	bl	8014188 <ucdr_init_buffer>
 8017006:	a993      	add	r1, sp, #588	@ 0x24c
 8017008:	a806      	add	r0, sp, #24
 801700a:	f002 ffad 	bl	8019f68 <uxr_serialize_OBJK_Subscriber_Binary>
 801700e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017010:	4628      	mov	r0, r5
 8017012:	9600      	str	r6, [sp, #0]
 8017014:	9311      	str	r3, [sp, #68]	@ 0x44
 8017016:	b29b      	uxth	r3, r3
 8017018:	9401      	str	r4, [sp, #4]
 801701a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801701e:	f7ff ff0f 	bl	8016e40 <uxr_common_create_entity>
 8017022:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8017026:	bd70      	pop	{r4, r5, r6, pc}

08017028 <uxr_buffer_create_datawriter_bin>:
 8017028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801702c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8017030:	4606      	mov	r6, r0
 8017032:	4618      	mov	r0, r3
 8017034:	2703      	movs	r7, #3
 8017036:	ac1d      	add	r4, sp, #116	@ 0x74
 8017038:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801703c:	9105      	str	r1, [sp, #20]
 801703e:	a9a1      	add	r1, sp, #644	@ 0x284
 8017040:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8017044:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017048:	2305      	movs	r3, #5
 801704a:	7123      	strb	r3, [r4, #4]
 801704c:	f000 f9f4 	bl	8017438 <uxr_object_id_to_raw>
 8017050:	a90e      	add	r1, sp, #56	@ 0x38
 8017052:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8017054:	7227      	strb	r7, [r4, #8]
 8017056:	f000 f9ef 	bl	8017438 <uxr_object_id_to_raw>
 801705a:	2300      	movs	r3, #0
 801705c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8017060:	3d00      	subs	r5, #0
 8017062:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8017066:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801706a:	bf18      	it	ne
 801706c:	2501      	movne	r5, #1
 801706e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017072:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017076:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801707a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801707e:	2301      	movs	r3, #1
 8017080:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017084:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017088:	bb8a      	cbnz	r2, 80170ee <uxr_buffer_create_datawriter_bin+0xc6>
 801708a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801708e:	f04f 0c13 	mov.w	ip, #19
 8017092:	250b      	movs	r5, #11
 8017094:	2221      	movs	r2, #33	@ 0x21
 8017096:	2111      	movs	r1, #17
 8017098:	2009      	movs	r0, #9
 801709a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801709e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80170a2:	b923      	cbnz	r3, 80170ae <uxr_buffer_create_datawriter_bin+0x86>
 80170a4:	4672      	mov	r2, lr
 80170a6:	4661      	mov	r1, ip
 80170a8:	4628      	mov	r0, r5
 80170aa:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80170ae:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d025      	beq.n	8017102 <uxr_buffer_create_datawriter_bin+0xda>
 80170b6:	2b03      	cmp	r3, #3
 80170b8:	d029      	beq.n	801710e <uxr_buffer_create_datawriter_bin+0xe6>
 80170ba:	b32b      	cbz	r3, 8017108 <uxr_buffer_create_datawriter_bin+0xe0>
 80170bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80170c0:	a921      	add	r1, sp, #132	@ 0x84
 80170c2:	a806      	add	r0, sp, #24
 80170c4:	f7fd f860 	bl	8014188 <ucdr_init_buffer>
 80170c8:	a90e      	add	r1, sp, #56	@ 0x38
 80170ca:	a806      	add	r0, sp, #24
 80170cc:	f002 fffe 	bl	801a0cc <uxr_serialize_OBJK_DataWriter_Binary>
 80170d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170d2:	f8cd 8000 	str.w	r8, [sp]
 80170d6:	4630      	mov	r0, r6
 80170d8:	9401      	str	r4, [sp, #4]
 80170da:	60e3      	str	r3, [r4, #12]
 80170dc:	b29b      	uxth	r3, r3
 80170de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80170e2:	f7ff fead 	bl	8016e40 <uxr_common_create_entity>
 80170e6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80170ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ee:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80170f2:	f04f 0c12 	mov.w	ip, #18
 80170f6:	250a      	movs	r5, #10
 80170f8:	2220      	movs	r2, #32
 80170fa:	2110      	movs	r1, #16
 80170fc:	2008      	movs	r0, #8
 80170fe:	2702      	movs	r7, #2
 8017100:	e7cd      	b.n	801709e <uxr_buffer_create_datawriter_bin+0x76>
 8017102:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8017106:	e7d9      	b.n	80170bc <uxr_buffer_create_datawriter_bin+0x94>
 8017108:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801710c:	e7d6      	b.n	80170bc <uxr_buffer_create_datawriter_bin+0x94>
 801710e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017112:	e7d3      	b.n	80170bc <uxr_buffer_create_datawriter_bin+0x94>

08017114 <uxr_buffer_create_datareader_bin>:
 8017114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017118:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801711c:	4606      	mov	r6, r0
 801711e:	4618      	mov	r0, r3
 8017120:	2703      	movs	r7, #3
 8017122:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017124:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8017128:	9105      	str	r1, [sp, #20]
 801712a:	a9a3      	add	r1, sp, #652	@ 0x28c
 801712c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8017130:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017134:	2306      	movs	r3, #6
 8017136:	7123      	strb	r3, [r4, #4]
 8017138:	f000 f97e 	bl	8017438 <uxr_object_id_to_raw>
 801713c:	a90e      	add	r1, sp, #56	@ 0x38
 801713e:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8017140:	7227      	strb	r7, [r4, #8]
 8017142:	f000 f979 	bl	8017438 <uxr_object_id_to_raw>
 8017146:	2300      	movs	r3, #0
 8017148:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801714c:	3d00      	subs	r5, #0
 801714e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8017152:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8017156:	bf18      	it	ne
 8017158:	2501      	movne	r5, #1
 801715a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801715e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8017162:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8017166:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801716a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801716e:	2301      	movs	r3, #1
 8017170:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8017174:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017178:	bb8a      	cbnz	r2, 80171de <uxr_buffer_create_datareader_bin+0xca>
 801717a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801717e:	f04f 0c13 	mov.w	ip, #19
 8017182:	250b      	movs	r5, #11
 8017184:	2221      	movs	r2, #33	@ 0x21
 8017186:	2111      	movs	r1, #17
 8017188:	2009      	movs	r0, #9
 801718a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801718e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8017192:	b923      	cbnz	r3, 801719e <uxr_buffer_create_datareader_bin+0x8a>
 8017194:	4672      	mov	r2, lr
 8017196:	4661      	mov	r1, ip
 8017198:	4628      	mov	r0, r5
 801719a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801719e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80171a2:	2b01      	cmp	r3, #1
 80171a4:	d025      	beq.n	80171f2 <uxr_buffer_create_datareader_bin+0xde>
 80171a6:	2b03      	cmp	r3, #3
 80171a8:	d029      	beq.n	80171fe <uxr_buffer_create_datareader_bin+0xea>
 80171aa:	b32b      	cbz	r3, 80171f8 <uxr_buffer_create_datareader_bin+0xe4>
 80171ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80171b0:	a923      	add	r1, sp, #140	@ 0x8c
 80171b2:	a806      	add	r0, sp, #24
 80171b4:	f7fc ffe8 	bl	8014188 <ucdr_init_buffer>
 80171b8:	a90e      	add	r1, sp, #56	@ 0x38
 80171ba:	a806      	add	r0, sp, #24
 80171bc:	f002 ff4a 	bl	801a054 <uxr_serialize_OBJK_DataReader_Binary>
 80171c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80171c2:	f8cd 8000 	str.w	r8, [sp]
 80171c6:	4630      	mov	r0, r6
 80171c8:	9401      	str	r4, [sp, #4]
 80171ca:	60e3      	str	r3, [r4, #12]
 80171cc:	b29b      	uxth	r3, r3
 80171ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80171d2:	f7ff fe35 	bl	8016e40 <uxr_common_create_entity>
 80171d6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80171da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171de:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80171e2:	f04f 0c12 	mov.w	ip, #18
 80171e6:	250a      	movs	r5, #10
 80171e8:	2220      	movs	r2, #32
 80171ea:	2110      	movs	r1, #16
 80171ec:	2008      	movs	r0, #8
 80171ee:	2702      	movs	r7, #2
 80171f0:	e7cd      	b.n	801718e <uxr_buffer_create_datareader_bin+0x7a>
 80171f2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80171f6:	e7d9      	b.n	80171ac <uxr_buffer_create_datareader_bin+0x98>
 80171f8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80171fc:	e7d6      	b.n	80171ac <uxr_buffer_create_datareader_bin+0x98>
 80171fe:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8017202:	e7d3      	b.n	80171ac <uxr_buffer_create_datareader_bin+0x98>

08017204 <uxr_buffer_create_replier_bin>:
 8017204:	b570      	push	{r4, r5, r6, lr}
 8017206:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801720a:	4605      	mov	r5, r0
 801720c:	4618      	mov	r0, r3
 801720e:	9105      	str	r1, [sp, #20]
 8017210:	a999      	add	r1, sp, #612	@ 0x264
 8017212:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8017216:	ac15      	add	r4, sp, #84	@ 0x54
 8017218:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801721c:	2308      	movs	r3, #8
 801721e:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8017222:	f000 f909 	bl	8017438 <uxr_object_id_to_raw>
 8017226:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8017228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801722c:	a919      	add	r1, sp, #100	@ 0x64
 801722e:	a80d      	add	r0, sp, #52	@ 0x34
 8017230:	9306      	str	r3, [sp, #24]
 8017232:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8017234:	9307      	str	r3, [sp, #28]
 8017236:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8017238:	9308      	str	r3, [sp, #32]
 801723a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 801723c:	930c      	str	r3, [sp, #48]	@ 0x30
 801723e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8017240:	930a      	str	r3, [sp, #40]	@ 0x28
 8017242:	2301      	movs	r3, #1
 8017244:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017248:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801724c:	2303      	movs	r3, #3
 801724e:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8017252:	f7fc ff99 	bl	8014188 <ucdr_init_buffer>
 8017256:	a906      	add	r1, sp, #24
 8017258:	a80d      	add	r0, sp, #52	@ 0x34
 801725a:	f002 ff63 	bl	801a124 <uxr_serialize_OBJK_Replier_Binary>
 801725e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017260:	4628      	mov	r0, r5
 8017262:	9600      	str	r6, [sp, #0]
 8017264:	9318      	str	r3, [sp, #96]	@ 0x60
 8017266:	b29b      	uxth	r3, r3
 8017268:	9401      	str	r4, [sp, #4]
 801726a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801726e:	f7ff fde7 	bl	8016e40 <uxr_common_create_entity>
 8017272:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8017276:	bd70      	pop	{r4, r5, r6, pc}

08017278 <get_custom_error>:
 8017278:	4b01      	ldr	r3, [pc, #4]	@ (8017280 <get_custom_error+0x8>)
 801727a:	7818      	ldrb	r0, [r3, #0]
 801727c:	4770      	bx	lr
 801727e:	bf00      	nop
 8017280:	24069274 	.word	0x24069274

08017284 <recv_custom_msg>:
 8017284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017288:	4693      	mov	fp, r2
 801728a:	b089      	sub	sp, #36	@ 0x24
 801728c:	2200      	movs	r2, #0
 801728e:	4604      	mov	r4, r0
 8017290:	468a      	mov	sl, r1
 8017292:	9305      	str	r3, [sp, #20]
 8017294:	f88d 201e 	strb.w	r2, [sp, #30]
 8017298:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801729c:	b322      	cbz	r2, 80172e8 <recv_custom_msg+0x64>
 801729e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80172a2:	f10d 081f 	add.w	r8, sp, #31
 80172a6:	af05      	add	r7, sp, #20
 80172a8:	f10d 061e 	add.w	r6, sp, #30
 80172ac:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80172b0:	e002      	b.n	80172b8 <recv_custom_msg+0x34>
 80172b2:	9b05      	ldr	r3, [sp, #20]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	dd0f      	ble.n	80172d8 <recv_custom_msg+0x54>
 80172b8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80172bc:	4623      	mov	r3, r4
 80172be:	4622      	mov	r2, r4
 80172c0:	4648      	mov	r0, r9
 80172c2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80172c6:	e9cd 5600 	strd	r5, r6, [sp]
 80172ca:	f001 fcc3 	bl	8018c54 <uxr_read_framed_msg>
 80172ce:	2800      	cmp	r0, #0
 80172d0:	d0ef      	beq.n	80172b2 <recv_custom_msg+0x2e>
 80172d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80172d6:	b1b3      	cbz	r3, 8017306 <recv_custom_msg+0x82>
 80172d8:	4b0f      	ldr	r3, [pc, #60]	@ (8017318 <recv_custom_msg+0x94>)
 80172da:	2000      	movs	r0, #0
 80172dc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80172e0:	701a      	strb	r2, [r3, #0]
 80172e2:	b009      	add	sp, #36	@ 0x24
 80172e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172e8:	f10d 021f 	add.w	r2, sp, #31
 80172ec:	4601      	mov	r1, r0
 80172ee:	9200      	str	r2, [sp, #0]
 80172f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80172f4:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80172f8:	47a8      	blx	r5
 80172fa:	2800      	cmp	r0, #0
 80172fc:	d0ec      	beq.n	80172d8 <recv_custom_msg+0x54>
 80172fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d1e8      	bne.n	80172d8 <recv_custom_msg+0x54>
 8017306:	f8cb 0000 	str.w	r0, [fp]
 801730a:	2001      	movs	r0, #1
 801730c:	f8ca 4000 	str.w	r4, [sl]
 8017310:	b009      	add	sp, #36	@ 0x24
 8017312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017316:	bf00      	nop
 8017318:	24069274 	.word	0x24069274

0801731c <send_custom_msg>:
 801731c:	b530      	push	{r4, r5, lr}
 801731e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8017322:	b087      	sub	sp, #28
 8017324:	4614      	mov	r4, r2
 8017326:	b995      	cbnz	r5, 801734e <send_custom_msg+0x32>
 8017328:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 801732c:	f10d 0317 	add.w	r3, sp, #23
 8017330:	47a8      	blx	r5
 8017332:	1e03      	subs	r3, r0, #0
 8017334:	bf18      	it	ne
 8017336:	2301      	movne	r3, #1
 8017338:	42a0      	cmp	r0, r4
 801733a:	bf18      	it	ne
 801733c:	2300      	movne	r3, #0
 801733e:	b91b      	cbnz	r3, 8017348 <send_custom_msg+0x2c>
 8017340:	4a0a      	ldr	r2, [pc, #40]	@ (801736c <send_custom_msg+0x50>)
 8017342:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017346:	7011      	strb	r1, [r2, #0]
 8017348:	4618      	mov	r0, r3
 801734a:	b007      	add	sp, #28
 801734c:	bd30      	pop	{r4, r5, pc}
 801734e:	460b      	mov	r3, r1
 8017350:	2200      	movs	r2, #0
 8017352:	f10d 0117 	add.w	r1, sp, #23
 8017356:	9400      	str	r4, [sp, #0]
 8017358:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801735c:	4602      	mov	r2, r0
 801735e:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017362:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017366:	f001 fa97 	bl	8018898 <uxr_write_framed_msg>
 801736a:	e7e2      	b.n	8017332 <send_custom_msg+0x16>
 801736c:	24069274 	.word	0x24069274

08017370 <uxr_set_custom_transport_callbacks>:
 8017370:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8017374:	9901      	ldr	r1, [sp, #4]
 8017376:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801737a:	9b00      	ldr	r3, [sp, #0]
 801737c:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8017380:	4770      	bx	lr
 8017382:	bf00      	nop

08017384 <uxr_init_custom_transport>:
 8017384:	b538      	push	{r3, r4, r5, lr}
 8017386:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801738a:	b303      	cbz	r3, 80173ce <uxr_init_custom_transport+0x4a>
 801738c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8017390:	4604      	mov	r4, r0
 8017392:	b1e2      	cbz	r2, 80173ce <uxr_init_custom_transport+0x4a>
 8017394:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8017398:	b1ca      	cbz	r2, 80173ce <uxr_init_custom_transport+0x4a>
 801739a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801739e:	b1b2      	cbz	r2, 80173ce <uxr_init_custom_transport+0x4a>
 80173a0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80173a4:	4798      	blx	r3
 80173a6:	4605      	mov	r5, r0
 80173a8:	b188      	cbz	r0, 80173ce <uxr_init_custom_transport+0x4a>
 80173aa:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80173ae:	b98b      	cbnz	r3, 80173d4 <uxr_init_custom_transport+0x50>
 80173b0:	4b0b      	ldr	r3, [pc, #44]	@ (80173e0 <uxr_init_custom_transport+0x5c>)
 80173b2:	4628      	mov	r0, r5
 80173b4:	490b      	ldr	r1, [pc, #44]	@ (80173e4 <uxr_init_custom_transport+0x60>)
 80173b6:	4a0c      	ldr	r2, [pc, #48]	@ (80173e8 <uxr_init_custom_transport+0x64>)
 80173b8:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80173bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80173c0:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80173c4:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80173c8:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80173cc:	bd38      	pop	{r3, r4, r5, pc}
 80173ce:	2500      	movs	r5, #0
 80173d0:	4628      	mov	r0, r5
 80173d2:	bd38      	pop	{r3, r4, r5, pc}
 80173d4:	2100      	movs	r1, #0
 80173d6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80173da:	f001 fa57 	bl	801888c <uxr_init_framing_io>
 80173de:	e7e7      	b.n	80173b0 <uxr_init_custom_transport+0x2c>
 80173e0:	08017285 	.word	0x08017285
 80173e4:	0801731d 	.word	0x0801731d
 80173e8:	08017279 	.word	0x08017279

080173ec <uxr_close_custom_transport>:
 80173ec:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80173f0:	4718      	bx	r3
 80173f2:	bf00      	nop

080173f4 <uxr_object_id>:
 80173f4:	b082      	sub	sp, #8
 80173f6:	2300      	movs	r3, #0
 80173f8:	f88d 1006 	strb.w	r1, [sp, #6]
 80173fc:	f360 030f 	bfi	r3, r0, #0, #16
 8017400:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017404:	f362 431f 	bfi	r3, r2, #16, #16
 8017408:	4618      	mov	r0, r3
 801740a:	b002      	add	sp, #8
 801740c:	4770      	bx	lr
 801740e:	bf00      	nop

08017410 <uxr_object_id_from_raw>:
 8017410:	7843      	ldrb	r3, [r0, #1]
 8017412:	b082      	sub	sp, #8
 8017414:	7801      	ldrb	r1, [r0, #0]
 8017416:	2000      	movs	r0, #0
 8017418:	091a      	lsrs	r2, r3, #4
 801741a:	f003 030f 	and.w	r3, r3, #15
 801741e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017422:	f88d 3006 	strb.w	r3, [sp, #6]
 8017426:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801742a:	f362 000f 	bfi	r0, r2, #0, #16
 801742e:	f363 401f 	bfi	r0, r3, #16, #16
 8017432:	b002      	add	sp, #8
 8017434:	4770      	bx	lr
 8017436:	bf00      	nop

08017438 <uxr_object_id_to_raw>:
 8017438:	4602      	mov	r2, r0
 801743a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801743e:	b082      	sub	sp, #8
 8017440:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017444:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017448:	f881 c000 	strb.w	ip, [r1]
 801744c:	7048      	strb	r0, [r1, #1]
 801744e:	b002      	add	sp, #8
 8017450:	4770      	bx	lr
 8017452:	bf00      	nop

08017454 <uxr_ping_agent_session>:
 8017454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017458:	4617      	mov	r7, r2
 801745a:	b091      	sub	sp, #68	@ 0x44
 801745c:	2210      	movs	r2, #16
 801745e:	4606      	mov	r6, r0
 8017460:	4688      	mov	r8, r1
 8017462:	a808      	add	r0, sp, #32
 8017464:	eb0d 0102 	add.w	r1, sp, r2
 8017468:	2500      	movs	r5, #0
 801746a:	f7fc fe8d 	bl	8014188 <ucdr_init_buffer>
 801746e:	4b1e      	ldr	r3, [pc, #120]	@ (80174e8 <uxr_ping_agent_session+0x94>)
 8017470:	2402      	movs	r4, #2
 8017472:	462a      	mov	r2, r5
 8017474:	881b      	ldrh	r3, [r3, #0]
 8017476:	a808      	add	r0, sp, #32
 8017478:	9500      	str	r5, [sp, #0]
 801747a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801747e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8017482:	7831      	ldrb	r1, [r6, #0]
 8017484:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017488:	462b      	mov	r3, r5
 801748a:	9403      	str	r4, [sp, #12]
 801748c:	f002 f9b4 	bl	80197f8 <uxr_serialize_message_header>
 8017490:	4621      	mov	r1, r4
 8017492:	462b      	mov	r3, r5
 8017494:	2208      	movs	r2, #8
 8017496:	a808      	add	r0, sp, #32
 8017498:	f001 ffb2 	bl	8019400 <uxr_buffer_submessage_header>
 801749c:	4604      	mov	r4, r0
 801749e:	a902      	add	r1, sp, #8
 80174a0:	a808      	add	r0, sp, #32
 80174a2:	f003 f8b5 	bl	801a610 <uxr_serialize_GET_INFO_Payload>
 80174a6:	b104      	cbz	r4, 80174aa <uxr_ping_agent_session+0x56>
 80174a8:	b918      	cbnz	r0, 80174b2 <uxr_ping_agent_session+0x5e>
 80174aa:	2000      	movs	r0, #0
 80174ac:	b011      	add	sp, #68	@ 0x44
 80174ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174b2:	a808      	add	r0, sp, #32
 80174b4:	f7fc fe96 	bl	80141e4 <ucdr_buffer_length>
 80174b8:	4681      	mov	r9, r0
 80174ba:	e00d      	b.n	80174d8 <uxr_ping_agent_session+0x84>
 80174bc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80174be:	e9d3 0400 	ldrd	r0, r4, [r3]
 80174c2:	47a0      	blx	r4
 80174c4:	4604      	mov	r4, r0
 80174c6:	4641      	mov	r1, r8
 80174c8:	4630      	mov	r0, r6
 80174ca:	f000 fe71 	bl	80181b0 <uxr_run_session_until_pong>
 80174ce:	ea04 0c00 	and.w	ip, r4, r0
 80174d2:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80174d6:	d1e9      	bne.n	80174ac <uxr_ping_agent_session+0x58>
 80174d8:	42af      	cmp	r7, r5
 80174da:	464a      	mov	r2, r9
 80174dc:	a904      	add	r1, sp, #16
 80174de:	f105 0501 	add.w	r5, r5, #1
 80174e2:	d1eb      	bne.n	80174bc <uxr_ping_agent_session+0x68>
 80174e4:	e7e1      	b.n	80174aa <uxr_ping_agent_session+0x56>
 80174e6:	bf00      	nop
 80174e8:	08023440 	.word	0x08023440

080174ec <uxr_ping_agent_attempts>:
 80174ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f0:	ed2d 8b02 	vpush	{d8}
 80174f4:	b0d3      	sub	sp, #332	@ 0x14c
 80174f6:	4606      	mov	r6, r0
 80174f8:	468a      	mov	sl, r1
 80174fa:	2400      	movs	r4, #0
 80174fc:	a90c      	add	r1, sp, #48	@ 0x30
 80174fe:	a810      	add	r0, sp, #64	@ 0x40
 8017500:	9205      	str	r2, [sp, #20]
 8017502:	2210      	movs	r2, #16
 8017504:	f7fc fe40 	bl	8014188 <ucdr_init_buffer>
 8017508:	4b53      	ldr	r3, [pc, #332]	@ (8017658 <uxr_ping_agent_attempts+0x16c>)
 801750a:	2502      	movs	r5, #2
 801750c:	4622      	mov	r2, r4
 801750e:	881b      	ldrh	r3, [r3, #0]
 8017510:	2180      	movs	r1, #128	@ 0x80
 8017512:	a810      	add	r0, sp, #64	@ 0x40
 8017514:	9400      	str	r4, [sp, #0]
 8017516:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 801751a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801751e:	9521      	str	r5, [sp, #132]	@ 0x84
 8017520:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8017524:	4623      	mov	r3, r4
 8017526:	f002 f967 	bl	80197f8 <uxr_serialize_message_header>
 801752a:	4623      	mov	r3, r4
 801752c:	4629      	mov	r1, r5
 801752e:	2208      	movs	r2, #8
 8017530:	a810      	add	r0, sp, #64	@ 0x40
 8017532:	f001 ff65 	bl	8019400 <uxr_buffer_submessage_header>
 8017536:	4681      	mov	r9, r0
 8017538:	a920      	add	r1, sp, #128	@ 0x80
 801753a:	a810      	add	r0, sp, #64	@ 0x40
 801753c:	f003 f868 	bl	801a610 <uxr_serialize_GET_INFO_Payload>
 8017540:	ea09 0000 	and.w	r0, r9, r0
 8017544:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
 8017548:	d107      	bne.n	801755a <uxr_ping_agent_attempts+0x6e>
 801754a:	f04f 0b00 	mov.w	fp, #0
 801754e:	4658      	mov	r0, fp
 8017550:	b053      	add	sp, #332	@ 0x14c
 8017552:	ecbd 8b02 	vpop	{d8}
 8017556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801755a:	a810      	add	r0, sp, #64	@ 0x40
 801755c:	9404      	str	r4, [sp, #16]
 801755e:	f7fc fe41 	bl	80141e4 <ucdr_buffer_length>
 8017562:	ee08 0a10 	vmov	s16, r0
 8017566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801756a:	4293      	cmp	r3, r2
 801756c:	d0ed      	beq.n	801754a <uxr_ping_agent_attempts+0x5e>
 801756e:	ee18 2a10 	vmov	r2, s16
 8017572:	a90c      	add	r1, sp, #48	@ 0x30
 8017574:	4655      	mov	r5, sl
 8017576:	f04f 0800 	mov.w	r8, #0
 801757a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801757e:	4798      	blx	r3
 8017580:	f001 ff84 	bl	801948c <uxr_millis>
 8017584:	9003      	str	r0, [sp, #12]
 8017586:	e00b      	b.n	80175a0 <uxr_ping_agent_attempts+0xb4>
 8017588:	f001 ff80 	bl	801948c <uxr_millis>
 801758c:	9b03      	ldr	r3, [sp, #12]
 801758e:	1ac0      	subs	r0, r0, r3
 8017590:	1a2d      	subs	r5, r5, r0
 8017592:	f001 ff7b 	bl	801948c <uxr_millis>
 8017596:	9003      	str	r0, [sp, #12]
 8017598:	2d00      	cmp	r5, #0
 801759a:	dd30      	ble.n	80175fe <uxr_ping_agent_attempts+0x112>
 801759c:	2f00      	cmp	r7, #0
 801759e:	d02e      	beq.n	80175fe <uxr_ping_agent_attempts+0x112>
 80175a0:	4653      	mov	r3, sl
 80175a2:	aa09      	add	r2, sp, #36	@ 0x24
 80175a4:	a908      	add	r1, sp, #32
 80175a6:	6830      	ldr	r0, [r6, #0]
 80175a8:	68b4      	ldr	r4, [r6, #8]
 80175aa:	464f      	mov	r7, r9
 80175ac:	f8cd 8020 	str.w	r8, [sp, #32]
 80175b0:	47a0      	blx	r4
 80175b2:	4683      	mov	fp, r0
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d0e7      	beq.n	8017588 <uxr_ping_agent_attempts+0x9c>
 80175b8:	a818      	add	r0, sp, #96	@ 0x60
 80175ba:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80175be:	f7fc fde3 	bl	8014188 <ucdr_init_buffer>
 80175c2:	ab07      	add	r3, sp, #28
 80175c4:	f10d 0219 	add.w	r2, sp, #25
 80175c8:	a918      	add	r1, sp, #96	@ 0x60
 80175ca:	a80a      	add	r0, sp, #40	@ 0x28
 80175cc:	e9cd 880a 	strd	r8, r8, [sp, #40]	@ 0x28
 80175d0:	f001 f8e2 	bl	8018798 <uxr_read_session_header>
 80175d4:	22c8      	movs	r2, #200	@ 0xc8
 80175d6:	2100      	movs	r1, #0
 80175d8:	a820      	add	r0, sp, #128	@ 0x80
 80175da:	f00a fe79 	bl	80222d0 <memset>
 80175de:	a818      	add	r0, sp, #96	@ 0x60
 80175e0:	f7fc fe04 	bl	80141ec <ucdr_buffer_remaining>
 80175e4:	2804      	cmp	r0, #4
 80175e6:	d816      	bhi.n	8017616 <uxr_ping_agent_attempts+0x12a>
 80175e8:	f89d 3135 	ldrb.w	r3, [sp, #309]	@ 0x135
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	bf13      	iteet	ne
 80175f0:	f04f 0b01 	movne.w	fp, #1
 80175f4:	f04f 0b00 	moveq.w	fp, #0
 80175f8:	2701      	moveq	r7, #1
 80175fa:	2700      	movne	r7, #0
 80175fc:	e7c4      	b.n	8017588 <uxr_ping_agent_attempts+0x9c>
 80175fe:	9b04      	ldr	r3, [sp, #16]
 8017600:	3301      	adds	r3, #1
 8017602:	9304      	str	r3, [sp, #16]
 8017604:	f1bb 0f00 	cmp.w	fp, #0
 8017608:	d0ad      	beq.n	8017566 <uxr_ping_agent_attempts+0x7a>
 801760a:	4658      	mov	r0, fp
 801760c:	b053      	add	sp, #332	@ 0x14c
 801760e:	ecbd 8b02 	vpop	{d8}
 8017612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017616:	f10d 031e 	add.w	r3, sp, #30
 801761a:	f10d 021b 	add.w	r2, sp, #27
 801761e:	f10d 011a 	add.w	r1, sp, #26
 8017622:	a818      	add	r0, sp, #96	@ 0x60
 8017624:	f88d 801a 	strb.w	r8, [sp, #26]
 8017628:	f8ad 801e 	strh.w	r8, [sp, #30]
 801762c:	f88d 801b 	strb.w	r8, [sp, #27]
 8017630:	f002 f934 	bl	801989c <uxr_deserialize_submessage_header>
 8017634:	a818      	add	r0, sp, #96	@ 0x60
 8017636:	f7fc fdd9 	bl	80141ec <ucdr_buffer_remaining>
 801763a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801763e:	4298      	cmp	r0, r3
 8017640:	d3d2      	bcc.n	80175e8 <uxr_ping_agent_attempts+0xfc>
 8017642:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8017646:	2b06      	cmp	r3, #6
 8017648:	d1ce      	bne.n	80175e8 <uxr_ping_agent_attempts+0xfc>
 801764a:	a918      	add	r1, sp, #96	@ 0x60
 801764c:	a820      	add	r0, sp, #128	@ 0x80
 801764e:	f88d 8135 	strb.w	r8, [sp, #309]	@ 0x135
 8017652:	f000 f997 	bl	8017984 <read_submessage_info>
 8017656:	e7c7      	b.n	80175e8 <uxr_ping_agent_attempts+0xfc>
 8017658:	08023440 	.word	0x08023440

0801765c <on_get_fragmentation_info>:
 801765c:	b500      	push	{lr}
 801765e:	b08b      	sub	sp, #44	@ 0x2c
 8017660:	4601      	mov	r1, r0
 8017662:	2204      	movs	r2, #4
 8017664:	a802      	add	r0, sp, #8
 8017666:	f7fc fd8f 	bl	8014188 <ucdr_init_buffer>
 801766a:	f10d 0305 	add.w	r3, sp, #5
 801766e:	f10d 0206 	add.w	r2, sp, #6
 8017672:	a901      	add	r1, sp, #4
 8017674:	a802      	add	r0, sp, #8
 8017676:	f001 fedd 	bl	8019434 <uxr_read_submessage_header>
 801767a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801767e:	2b0d      	cmp	r3, #13
 8017680:	d003      	beq.n	801768a <on_get_fragmentation_info+0x2e>
 8017682:	2000      	movs	r0, #0
 8017684:	b00b      	add	sp, #44	@ 0x2c
 8017686:	f85d fb04 	ldr.w	pc, [sp], #4
 801768a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801768e:	f013 0f02 	tst.w	r3, #2
 8017692:	bf14      	ite	ne
 8017694:	2002      	movne	r0, #2
 8017696:	2001      	moveq	r0, #1
 8017698:	b00b      	add	sp, #44	@ 0x2c
 801769a:	f85d fb04 	ldr.w	pc, [sp], #4
 801769e:	bf00      	nop

080176a0 <read_submessage_get_info>:
 80176a0:	b570      	push	{r4, r5, r6, lr}
 80176a2:	2500      	movs	r5, #0
 80176a4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80176a8:	460e      	mov	r6, r1
 80176aa:	4604      	mov	r4, r0
 80176ac:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80176b0:	4629      	mov	r1, r5
 80176b2:	a810      	add	r0, sp, #64	@ 0x40
 80176b4:	9503      	str	r5, [sp, #12]
 80176b6:	9504      	str	r5, [sp, #16]
 80176b8:	f00a fe0a 	bl	80222d0 <memset>
 80176bc:	a903      	add	r1, sp, #12
 80176be:	4630      	mov	r0, r6
 80176c0:	f002 ffbc 	bl	801a63c <uxr_deserialize_GET_INFO_Payload>
 80176c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80176c8:	4620      	mov	r0, r4
 80176ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80176ce:	f001 f8a3 	bl	8018818 <uxr_session_header_offset>
 80176d2:	462b      	mov	r3, r5
 80176d4:	220c      	movs	r2, #12
 80176d6:	a905      	add	r1, sp, #20
 80176d8:	9000      	str	r0, [sp, #0]
 80176da:	a808      	add	r0, sp, #32
 80176dc:	f7fc fd42 	bl	8014164 <ucdr_init_buffer_origin_offset>
 80176e0:	a910      	add	r1, sp, #64	@ 0x40
 80176e2:	a808      	add	r0, sp, #32
 80176e4:	f003 f81e 	bl	801a724 <uxr_serialize_INFO_Payload>
 80176e8:	9b08      	ldr	r3, [sp, #32]
 80176ea:	462a      	mov	r2, r5
 80176ec:	4629      	mov	r1, r5
 80176ee:	4620      	mov	r0, r4
 80176f0:	f001 f83e 	bl	8018770 <uxr_stamp_session_header>
 80176f4:	a808      	add	r0, sp, #32
 80176f6:	f7fc fd75 	bl	80141e4 <ucdr_buffer_length>
 80176fa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80176fc:	4602      	mov	r2, r0
 80176fe:	a905      	add	r1, sp, #20
 8017700:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017704:	47a0      	blx	r4
 8017706:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801770a:	bd70      	pop	{r4, r5, r6, pc}

0801770c <write_submessage_acknack.isra.0>:
 801770c:	b570      	push	{r4, r5, r6, lr}
 801770e:	b092      	sub	sp, #72	@ 0x48
 8017710:	4605      	mov	r5, r0
 8017712:	460e      	mov	r6, r1
 8017714:	4614      	mov	r4, r2
 8017716:	f001 f87f 	bl	8018818 <uxr_session_header_offset>
 801771a:	a905      	add	r1, sp, #20
 801771c:	9000      	str	r0, [sp, #0]
 801771e:	2300      	movs	r3, #0
 8017720:	a80a      	add	r0, sp, #40	@ 0x28
 8017722:	2211      	movs	r2, #17
 8017724:	f7fc fd1e 	bl	8014164 <ucdr_init_buffer_origin_offset>
 8017728:	2218      	movs	r2, #24
 801772a:	2300      	movs	r3, #0
 801772c:	210a      	movs	r1, #10
 801772e:	fb02 5404 	mla	r4, r2, r4, r5
 8017732:	a80a      	add	r0, sp, #40	@ 0x28
 8017734:	2205      	movs	r2, #5
 8017736:	3450      	adds	r4, #80	@ 0x50
 8017738:	f001 fe62 	bl	8019400 <uxr_buffer_submessage_header>
 801773c:	a903      	add	r1, sp, #12
 801773e:	4620      	mov	r0, r4
 8017740:	f008 fece 	bl	80204e0 <uxr_compute_acknack>
 8017744:	ba40      	rev16	r0, r0
 8017746:	a903      	add	r1, sp, #12
 8017748:	f88d 6010 	strb.w	r6, [sp, #16]
 801774c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017750:	a80a      	add	r0, sp, #40	@ 0x28
 8017752:	f003 f859 	bl	801a808 <uxr_serialize_ACKNACK_Payload>
 8017756:	2200      	movs	r2, #0
 8017758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801775a:	4628      	mov	r0, r5
 801775c:	4611      	mov	r1, r2
 801775e:	f001 f807 	bl	8018770 <uxr_stamp_session_header>
 8017762:	a80a      	add	r0, sp, #40	@ 0x28
 8017764:	f7fc fd3e 	bl	80141e4 <ucdr_buffer_length>
 8017768:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801776a:	4602      	mov	r2, r0
 801776c:	a905      	add	r1, sp, #20
 801776e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017772:	47a0      	blx	r4
 8017774:	b012      	add	sp, #72	@ 0x48
 8017776:	bd70      	pop	{r4, r5, r6, pc}

08017778 <uxr_init_session>:
 8017778:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80177b0 <uxr_init_session+0x38>
 801777c:	2300      	movs	r3, #0
 801777e:	b510      	push	{r4, lr}
 8017780:	4604      	mov	r4, r0
 8017782:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8017786:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801778a:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801778e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8017792:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8017796:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801779a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801779e:	2181      	movs	r1, #129	@ 0x81
 80177a0:	f000 ff4a 	bl	8018638 <uxr_init_session_info>
 80177a4:	f104 0008 	add.w	r0, r4, #8
 80177a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177ac:	f001 bd44 	b.w	8019238 <uxr_init_stream_storage>
	...

080177b8 <uxr_set_status_callback>:
 80177b8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80177bc:	4770      	bx	lr
 80177be:	bf00      	nop

080177c0 <uxr_set_topic_callback>:
 80177c0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80177c4:	4770      	bx	lr
 80177c6:	bf00      	nop

080177c8 <uxr_set_request_callback>:
 80177c8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80177cc:	4770      	bx	lr
 80177ce:	bf00      	nop

080177d0 <uxr_set_reply_callback>:
 80177d0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80177d4:	4770      	bx	lr
 80177d6:	bf00      	nop

080177d8 <uxr_create_output_best_effort_stream>:
 80177d8:	b510      	push	{r4, lr}
 80177da:	4604      	mov	r4, r0
 80177dc:	b084      	sub	sp, #16
 80177de:	e9cd 2100 	strd	r2, r1, [sp]
 80177e2:	f001 f819 	bl	8018818 <uxr_session_header_offset>
 80177e6:	4603      	mov	r3, r0
 80177e8:	f104 0008 	add.w	r0, r4, #8
 80177ec:	e9dd 2100 	ldrd	r2, r1, [sp]
 80177f0:	b004      	add	sp, #16
 80177f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177f6:	f001 bd65 	b.w	80192c4 <uxr_add_output_best_effort_buffer>
 80177fa:	bf00      	nop

080177fc <uxr_create_output_reliable_stream>:
 80177fc:	b530      	push	{r4, r5, lr}
 80177fe:	b089      	sub	sp, #36	@ 0x24
 8017800:	4604      	mov	r4, r0
 8017802:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017806:	9303      	str	r3, [sp, #12]
 8017808:	f001 f806 	bl	8018818 <uxr_session_header_offset>
 801780c:	4605      	mov	r5, r0
 801780e:	9905      	ldr	r1, [sp, #20]
 8017810:	f104 0008 	add.w	r0, r4, #8
 8017814:	9500      	str	r5, [sp, #0]
 8017816:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801781a:	f001 fd67 	bl	80192ec <uxr_add_output_reliable_buffer>
 801781e:	2200      	movs	r2, #0
 8017820:	fa5f fc80 	uxtb.w	ip, r0
 8017824:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8017828:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801782c:	0e03      	lsrs	r3, r0, #24
 801782e:	f36c 0207 	bfi	r2, ip, #0, #8
 8017832:	f364 220f 	bfi	r2, r4, #8, #8
 8017836:	f361 4217 	bfi	r2, r1, #16, #8
 801783a:	f363 621f 	bfi	r2, r3, #24, #8
 801783e:	4610      	mov	r0, r2
 8017840:	b009      	add	sp, #36	@ 0x24
 8017842:	bd30      	pop	{r4, r5, pc}

08017844 <uxr_create_input_best_effort_stream>:
 8017844:	b082      	sub	sp, #8
 8017846:	3008      	adds	r0, #8
 8017848:	b002      	add	sp, #8
 801784a:	f001 bd69 	b.w	8019320 <uxr_add_input_best_effort_buffer>
 801784e:	bf00      	nop

08017850 <uxr_create_input_reliable_stream>:
 8017850:	b510      	push	{r4, lr}
 8017852:	4c0c      	ldr	r4, [pc, #48]	@ (8017884 <uxr_create_input_reliable_stream+0x34>)
 8017854:	b084      	sub	sp, #16
 8017856:	3008      	adds	r0, #8
 8017858:	9400      	str	r4, [sp, #0]
 801785a:	f001 fd77 	bl	801934c <uxr_add_input_reliable_buffer>
 801785e:	2200      	movs	r2, #0
 8017860:	fa5f fe80 	uxtb.w	lr, r0
 8017864:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8017868:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801786c:	0e03      	lsrs	r3, r0, #24
 801786e:	f36e 0207 	bfi	r2, lr, #0, #8
 8017872:	f36c 220f 	bfi	r2, ip, #8, #8
 8017876:	f361 4217 	bfi	r2, r1, #16, #8
 801787a:	f363 621f 	bfi	r2, r3, #24, #8
 801787e:	4610      	mov	r0, r2
 8017880:	b004      	add	sp, #16
 8017882:	bd10      	pop	{r4, pc}
 8017884:	0801765d 	.word	0x0801765d

08017888 <uxr_epoch_nanos>:
 8017888:	b510      	push	{r4, lr}
 801788a:	4604      	mov	r4, r0
 801788c:	f001 fe1a 	bl	80194c4 <uxr_nanos>
 8017890:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8017894:	1ac0      	subs	r0, r0, r3
 8017896:	eb61 0102 	sbc.w	r1, r1, r2
 801789a:	bd10      	pop	{r4, pc}

0801789c <uxr_flash_output_streams>:
 801789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178a0:	7e03      	ldrb	r3, [r0, #24]
 80178a2:	b084      	sub	sp, #16
 80178a4:	4604      	mov	r4, r0
 80178a6:	b1fb      	cbz	r3, 80178e8 <uxr_flash_output_streams+0x4c>
 80178a8:	f04f 0900 	mov.w	r9, #0
 80178ac:	f10d 0802 	add.w	r8, sp, #2
 80178b0:	af03      	add	r7, sp, #12
 80178b2:	ae02      	add	r6, sp, #8
 80178b4:	4648      	mov	r0, r9
 80178b6:	2201      	movs	r2, #1
 80178b8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80178bc:	4611      	mov	r1, r2
 80178be:	3508      	adds	r5, #8
 80178c0:	f001 fc60 	bl	8019184 <uxr_stream_id>
 80178c4:	4684      	mov	ip, r0
 80178c6:	4643      	mov	r3, r8
 80178c8:	463a      	mov	r2, r7
 80178ca:	4631      	mov	r1, r6
 80178cc:	4628      	mov	r0, r5
 80178ce:	f8cd c004 	str.w	ip, [sp, #4]
 80178d2:	f008 fe8f 	bl	80205f4 <uxr_prepare_best_effort_buffer_to_send>
 80178d6:	2800      	cmp	r0, #0
 80178d8:	d13d      	bne.n	8017956 <uxr_flash_output_streams+0xba>
 80178da:	f109 0901 	add.w	r9, r9, #1
 80178de:	7e23      	ldrb	r3, [r4, #24]
 80178e0:	fa5f f089 	uxtb.w	r0, r9
 80178e4:	4283      	cmp	r3, r0
 80178e6:	d8e6      	bhi.n	80178b6 <uxr_flash_output_streams+0x1a>
 80178e8:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80178ec:	b383      	cbz	r3, 8017950 <uxr_flash_output_streams+0xb4>
 80178ee:	f04f 0900 	mov.w	r9, #0
 80178f2:	f10d 0802 	add.w	r8, sp, #2
 80178f6:	af03      	add	r7, sp, #12
 80178f8:	ae02      	add	r6, sp, #8
 80178fa:	4648      	mov	r0, r9
 80178fc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8017900:	2201      	movs	r2, #1
 8017902:	2102      	movs	r1, #2
 8017904:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017908:	f001 fc3c 	bl	8019184 <uxr_stream_id>
 801790c:	9001      	str	r0, [sp, #4]
 801790e:	3520      	adds	r5, #32
 8017910:	e00c      	b.n	801792c <uxr_flash_output_streams+0x90>
 8017912:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017916:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801791a:	9b02      	ldr	r3, [sp, #8]
 801791c:	f000 ff28 	bl	8018770 <uxr_stamp_session_header>
 8017920:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017922:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017926:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801792a:	47d0      	blx	sl
 801792c:	4643      	mov	r3, r8
 801792e:	463a      	mov	r2, r7
 8017930:	4631      	mov	r1, r6
 8017932:	4628      	mov	r0, r5
 8017934:	f009 f880 	bl	8020a38 <uxr_prepare_next_reliable_buffer_to_send>
 8017938:	4603      	mov	r3, r0
 801793a:	4620      	mov	r0, r4
 801793c:	2b00      	cmp	r3, #0
 801793e:	d1e8      	bne.n	8017912 <uxr_flash_output_streams+0x76>
 8017940:	f109 0901 	add.w	r9, r9, #1
 8017944:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8017948:	fa5f f089 	uxtb.w	r0, r9
 801794c:	4283      	cmp	r3, r0
 801794e:	d8d5      	bhi.n	80178fc <uxr_flash_output_streams+0x60>
 8017950:	b004      	add	sp, #16
 8017952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017956:	9b02      	ldr	r3, [sp, #8]
 8017958:	4620      	mov	r0, r4
 801795a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801795e:	f109 0901 	add.w	r9, r9, #1
 8017962:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8017966:	f000 ff03 	bl	8018770 <uxr_stamp_session_header>
 801796a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801796c:	9a03      	ldr	r2, [sp, #12]
 801796e:	685d      	ldr	r5, [r3, #4]
 8017970:	6818      	ldr	r0, [r3, #0]
 8017972:	9902      	ldr	r1, [sp, #8]
 8017974:	47a8      	blx	r5
 8017976:	7e23      	ldrb	r3, [r4, #24]
 8017978:	fa5f f089 	uxtb.w	r0, r9
 801797c:	4283      	cmp	r3, r0
 801797e:	d89a      	bhi.n	80178b6 <uxr_flash_output_streams+0x1a>
 8017980:	e7b2      	b.n	80178e8 <uxr_flash_output_streams+0x4c>
 8017982:	bf00      	nop

08017984 <read_submessage_info>:
 8017984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017988:	460d      	mov	r5, r1
 801798a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801798e:	4606      	mov	r6, r0
 8017990:	4669      	mov	r1, sp
 8017992:	4628      	mov	r0, r5
 8017994:	f002 fd4e 	bl	801a434 <uxr_deserialize_BaseObjectReply>
 8017998:	4604      	mov	r4, r0
 801799a:	a902      	add	r1, sp, #8
 801799c:	4628      	mov	r0, r5
 801799e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80179a2:	f7fb f96f 	bl	8012c84 <ucdr_deserialize_bool>
 80179a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80179aa:	4004      	ands	r4, r0
 80179ac:	b2e4      	uxtb	r4, r4
 80179ae:	b95b      	cbnz	r3, 80179c8 <read_submessage_info+0x44>
 80179b0:	a987      	add	r1, sp, #540	@ 0x21c
 80179b2:	4628      	mov	r0, r5
 80179b4:	f7fb f966 	bl	8012c84 <ucdr_deserialize_bool>
 80179b8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80179bc:	4680      	mov	r8, r0
 80179be:	b94b      	cbnz	r3, 80179d4 <read_submessage_info+0x50>
 80179c0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80179c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c8:	a903      	add	r1, sp, #12
 80179ca:	4628      	mov	r0, r5
 80179cc:	f002 fbde 	bl	801a18c <uxr_deserialize_ObjectVariant>
 80179d0:	4004      	ands	r4, r0
 80179d2:	e7ed      	b.n	80179b0 <read_submessage_info+0x2c>
 80179d4:	a988      	add	r1, sp, #544	@ 0x220
 80179d6:	4628      	mov	r0, r5
 80179d8:	f7fb f982 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 80179dc:	ea14 0f08 	tst.w	r4, r8
 80179e0:	d0ee      	beq.n	80179c0 <read_submessage_info+0x3c>
 80179e2:	2800      	cmp	r0, #0
 80179e4:	d0ec      	beq.n	80179c0 <read_submessage_info+0x3c>
 80179e6:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80179ea:	2b0d      	cmp	r3, #13
 80179ec:	d1e8      	bne.n	80179c0 <read_submessage_info+0x3c>
 80179ee:	a98a      	add	r1, sp, #552	@ 0x228
 80179f0:	4628      	mov	r0, r5
 80179f2:	f7fb ff1b 	bl	801382c <ucdr_deserialize_int16_t>
 80179f6:	b138      	cbz	r0, 8017a08 <read_submessage_info+0x84>
 80179f8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	dd06      	ble.n	8017a0e <read_submessage_info+0x8a>
 8017a00:	2f00      	cmp	r7, #0
 8017a02:	bf14      	ite	ne
 8017a04:	2001      	movne	r0, #1
 8017a06:	2002      	moveq	r0, #2
 8017a08:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8017a0c:	e7d8      	b.n	80179c0 <read_submessage_info+0x3c>
 8017a0e:	2000      	movs	r0, #0
 8017a10:	e7fa      	b.n	8017a08 <read_submessage_info+0x84>
 8017a12:	bf00      	nop

08017a14 <read_submessage_list>:
 8017a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a18:	4604      	mov	r4, r0
 8017a1a:	b097      	sub	sp, #92	@ 0x5c
 8017a1c:	460d      	mov	r5, r1
 8017a1e:	4ec1      	ldr	r6, [pc, #772]	@ (8017d24 <read_submessage_list+0x310>)
 8017a20:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a22:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8017a26:	aa0c      	add	r2, sp, #48	@ 0x30
 8017a28:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8017a2c:	4628      	mov	r0, r5
 8017a2e:	f001 fd01 	bl	8019434 <uxr_read_submessage_header>
 8017a32:	2800      	cmp	r0, #0
 8017a34:	f000 8142 	beq.w	8017cbc <read_submessage_list+0x2a8>
 8017a38:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8017a3c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8017a40:	3b02      	subs	r3, #2
 8017a42:	2b0d      	cmp	r3, #13
 8017a44:	d8ed      	bhi.n	8017a22 <read_submessage_list+0xe>
 8017a46:	a101      	add	r1, pc, #4	@ (adr r1, 8017a4c <read_submessage_list+0x38>)
 8017a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a4c:	08017cb3 	.word	0x08017cb3
 8017a50:	08017a23 	.word	0x08017a23
 8017a54:	08017ca3 	.word	0x08017ca3
 8017a58:	08017c41 	.word	0x08017c41
 8017a5c:	08017c37 	.word	0x08017c37
 8017a60:	08017a23 	.word	0x08017a23
 8017a64:	08017a23 	.word	0x08017a23
 8017a68:	08017b8d 	.word	0x08017b8d
 8017a6c:	08017b1f 	.word	0x08017b1f
 8017a70:	08017adf 	.word	0x08017adf
 8017a74:	08017a23 	.word	0x08017a23
 8017a78:	08017a23 	.word	0x08017a23
 8017a7c:	08017a23 	.word	0x08017a23
 8017a80:	08017a85 	.word	0x08017a85
 8017a84:	a910      	add	r1, sp, #64	@ 0x40
 8017a86:	4628      	mov	r0, r5
 8017a88:	f002 ff20 	bl	801a8cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8017a8c:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8017a90:	f1b8 0f00 	cmp.w	r8, #0
 8017a94:	f000 811a 	beq.w	8017ccc <read_submessage_list+0x2b8>
 8017a98:	f001 fd14 	bl	80194c4 <uxr_nanos>
 8017a9c:	4602      	mov	r2, r0
 8017a9e:	460b      	mov	r3, r1
 8017aa0:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8017aa4:	2100      	movs	r1, #0
 8017aa6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017aa8:	9006      	str	r0, [sp, #24]
 8017aaa:	468c      	mov	ip, r1
 8017aac:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8017aae:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017ab2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017ab4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8017ab8:	468c      	mov	ip, r1
 8017aba:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017abc:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8017ac0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8017ac4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8017ac8:	fbc7 0106 	smlal	r0, r1, r7, r6
 8017acc:	e9cd 0100 	strd	r0, r1, [sp]
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	47c0      	blx	r8
 8017ad4:	f04f 0301 	mov.w	r3, #1
 8017ad8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8017adc:	e7a1      	b.n	8017a22 <read_submessage_list+0xe>
 8017ade:	a910      	add	r1, sp, #64	@ 0x40
 8017ae0:	4628      	mov	r0, r5
 8017ae2:	f002 fed1 	bl	801a888 <uxr_deserialize_HEARTBEAT_Payload>
 8017ae6:	2100      	movs	r1, #0
 8017ae8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017aec:	f001 fb78 	bl	80191e0 <uxr_stream_id_from_raw>
 8017af0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8017af4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017af6:	f104 0008 	add.w	r0, r4, #8
 8017afa:	4641      	mov	r1, r8
 8017afc:	f001 fc5e 	bl	80193bc <uxr_get_input_reliable_stream>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d08e      	beq.n	8017a22 <read_submessage_list+0xe>
 8017b04:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8017b08:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8017b0c:	f008 fcdc 	bl	80204c8 <uxr_process_heartbeat>
 8017b10:	4642      	mov	r2, r8
 8017b12:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8017b16:	4620      	mov	r0, r4
 8017b18:	f7ff fdf8 	bl	801770c <write_submessage_acknack.isra.0>
 8017b1c:	e781      	b.n	8017a22 <read_submessage_list+0xe>
 8017b1e:	a910      	add	r1, sp, #64	@ 0x40
 8017b20:	4628      	mov	r0, r5
 8017b22:	f002 fe89 	bl	801a838 <uxr_deserialize_ACKNACK_Payload>
 8017b26:	2100      	movs	r1, #0
 8017b28:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8017b2c:	f001 fb58 	bl	80191e0 <uxr_stream_id_from_raw>
 8017b30:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8017b34:	900d      	str	r0, [sp, #52]	@ 0x34
 8017b36:	f104 0008 	add.w	r0, r4, #8
 8017b3a:	f001 fc29 	bl	8019390 <uxr_get_output_reliable_stream>
 8017b3e:	4680      	mov	r8, r0
 8017b40:	2800      	cmp	r0, #0
 8017b42:	f43f af6e 	beq.w	8017a22 <read_submessage_list+0xe>
 8017b46:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8017b4a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017b4e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8017b52:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8017b56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8017b5a:	b289      	uxth	r1, r1
 8017b5c:	f009 f814 	bl	8020b88 <uxr_process_acknack>
 8017b60:	4640      	mov	r0, r8
 8017b62:	f008 ffd5 	bl	8020b10 <uxr_begin_output_nack_buffer_it>
 8017b66:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8017b6a:	e005      	b.n	8017b78 <read_submessage_list+0x164>
 8017b6c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8017b6e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8017b72:	e9d3 0900 	ldrd	r0, r9, [r3]
 8017b76:	47c8      	blx	r9
 8017b78:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8017b7c:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017b7e:	4651      	mov	r1, sl
 8017b80:	4640      	mov	r0, r8
 8017b82:	f008 ffc7 	bl	8020b14 <uxr_next_reliable_nack_buffer_to_send>
 8017b86:	2800      	cmp	r0, #0
 8017b88:	d1f0      	bne.n	8017b6c <read_submessage_list+0x158>
 8017b8a:	e74a      	b.n	8017a22 <read_submessage_list+0xe>
 8017b8c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8017b90:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8017b94:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8017b98:	4628      	mov	r0, r5
 8017b9a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8017b9e:	4651      	mov	r1, sl
 8017ba0:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8017ba4:	f1a8 0804 	sub.w	r8, r8, #4
 8017ba8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8017bac:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8017bb0:	fa1f f888 	uxth.w	r8, r8
 8017bb4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017bb8:	f009 090e 	and.w	r9, r9, #14
 8017bbc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8017bc0:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8017bc4:	f002 fb84 	bl	801a2d0 <uxr_deserialize_BaseObjectRequest>
 8017bc8:	4650      	mov	r0, sl
 8017bca:	a90f      	add	r1, sp, #60	@ 0x3c
 8017bcc:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8017bd0:	f000 fe4a 	bl	8018868 <uxr_parse_base_object_request>
 8017bd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017bd6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8017bda:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8017bde:	9110      	str	r1, [sp, #64]	@ 0x40
 8017be0:	f1bb 0f00 	cmp.w	fp, #0
 8017be4:	d006      	beq.n	8017bf4 <read_submessage_list+0x1e0>
 8017be6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017bea:	4652      	mov	r2, sl
 8017bec:	4620      	mov	r0, r4
 8017bee:	9300      	str	r3, [sp, #0]
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	47d8      	blx	fp
 8017bf4:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017bf6:	b182      	cbz	r2, 8017c1a <read_submessage_list+0x206>
 8017bf8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017bfa:	f04f 0c00 	mov.w	ip, #0
 8017bfe:	3902      	subs	r1, #2
 8017c00:	e003      	b.n	8017c0a <read_submessage_list+0x1f6>
 8017c02:	f10c 0c01 	add.w	ip, ip, #1
 8017c06:	4594      	cmp	ip, r2
 8017c08:	d007      	beq.n	8017c1a <read_submessage_list+0x206>
 8017c0a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8017c0e:	4553      	cmp	r3, sl
 8017c10:	d1f7      	bne.n	8017c02 <read_submessage_list+0x1ee>
 8017c12:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017c14:	2200      	movs	r2, #0
 8017c16:	f803 200c 	strb.w	r2, [r3, ip]
 8017c1a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8017c1e:	464b      	mov	r3, r9
 8017c20:	4642      	mov	r2, r8
 8017c22:	4620      	mov	r0, r4
 8017c24:	9102      	str	r1, [sp, #8]
 8017c26:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017c28:	9101      	str	r1, [sp, #4]
 8017c2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8017c2c:	9100      	str	r1, [sp, #0]
 8017c2e:	4629      	mov	r1, r5
 8017c30:	f009 f86c 	bl	8020d0c <read_submessage_format>
 8017c34:	e6f5      	b.n	8017a22 <read_submessage_list+0xe>
 8017c36:	4629      	mov	r1, r5
 8017c38:	4620      	mov	r0, r4
 8017c3a:	f7ff fea3 	bl	8017984 <read_submessage_info>
 8017c3e:	e6f0      	b.n	8017a22 <read_submessage_list+0xe>
 8017c40:	2a00      	cmp	r2, #0
 8017c42:	d03e      	beq.n	8017cc2 <read_submessage_list+0x2ae>
 8017c44:	a910      	add	r1, sp, #64	@ 0x40
 8017c46:	4628      	mov	r0, r5
 8017c48:	f002 fd4e 	bl	801a6e8 <uxr_deserialize_STATUS_Payload>
 8017c4c:	a90e      	add	r1, sp, #56	@ 0x38
 8017c4e:	aa0d      	add	r2, sp, #52	@ 0x34
 8017c50:	a810      	add	r0, sp, #64	@ 0x40
 8017c52:	f000 fe09 	bl	8018868 <uxr_parse_base_object_request>
 8017c56:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017c58:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8017c5c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8017c60:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8017c64:	910f      	str	r1, [sp, #60]	@ 0x3c
 8017c66:	f1ba 0f00 	cmp.w	sl, #0
 8017c6a:	d006      	beq.n	8017c7a <read_submessage_list+0x266>
 8017c6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8017c70:	4642      	mov	r2, r8
 8017c72:	4620      	mov	r0, r4
 8017c74:	9300      	str	r3, [sp, #0]
 8017c76:	464b      	mov	r3, r9
 8017c78:	47d0      	blx	sl
 8017c7a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8017c7c:	2a00      	cmp	r2, #0
 8017c7e:	f43f aed0 	beq.w	8017a22 <read_submessage_list+0xe>
 8017c82:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8017c84:	2100      	movs	r1, #0
 8017c86:	3802      	subs	r0, #2
 8017c88:	e003      	b.n	8017c92 <read_submessage_list+0x27e>
 8017c8a:	3101      	adds	r1, #1
 8017c8c:	4291      	cmp	r1, r2
 8017c8e:	f43f aec8 	beq.w	8017a22 <read_submessage_list+0xe>
 8017c92:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8017c96:	4543      	cmp	r3, r8
 8017c98:	d1f7      	bne.n	8017c8a <read_submessage_list+0x276>
 8017c9a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8017c9c:	f803 9001 	strb.w	r9, [r3, r1]
 8017ca0:	e6bf      	b.n	8017a22 <read_submessage_list+0xe>
 8017ca2:	2a00      	cmp	r2, #0
 8017ca4:	f47f aebd 	bne.w	8017a22 <read_submessage_list+0xe>
 8017ca8:	4629      	mov	r1, r5
 8017caa:	4620      	mov	r0, r4
 8017cac:	f000 fd20 	bl	80186f0 <uxr_read_create_session_status>
 8017cb0:	e6b7      	b.n	8017a22 <read_submessage_list+0xe>
 8017cb2:	4629      	mov	r1, r5
 8017cb4:	4620      	mov	r0, r4
 8017cb6:	f7ff fcf3 	bl	80176a0 <read_submessage_get_info>
 8017cba:	e6b2      	b.n	8017a22 <read_submessage_list+0xe>
 8017cbc:	b017      	add	sp, #92	@ 0x5c
 8017cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc2:	4629      	mov	r1, r5
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	f000 fd21 	bl	801870c <uxr_read_delete_session_status>
 8017cca:	e6aa      	b.n	8017a22 <read_submessage_list+0xe>
 8017ccc:	f001 fbfa 	bl	80194c4 <uxr_nanos>
 8017cd0:	4642      	mov	r2, r8
 8017cd2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8017cd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017cd6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017cda:	1818      	adds	r0, r3, r0
 8017cdc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017cde:	eb42 0101 	adc.w	r1, r2, r1
 8017ce2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017ce4:	4642      	mov	r2, r8
 8017ce6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8017cea:	469c      	mov	ip, r3
 8017cec:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8017cf0:	fbc3 7806 	smlal	r7, r8, r3, r6
 8017cf4:	4643      	mov	r3, r8
 8017cf6:	eb1c 0c07 	adds.w	ip, ip, r7
 8017cfa:	eb42 0203 	adc.w	r2, r2, r3
 8017cfe:	ebb0 030c 	subs.w	r3, r0, ip
 8017d02:	eb61 0202 	sbc.w	r2, r1, r2
 8017d06:	2a00      	cmp	r2, #0
 8017d08:	db08      	blt.n	8017d1c <read_submessage_list+0x308>
 8017d0a:	085b      	lsrs	r3, r3, #1
 8017d0c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8017d10:	1052      	asrs	r2, r2, #1
 8017d12:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8017d16:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8017d1a:	e6db      	b.n	8017ad4 <read_submessage_list+0xc0>
 8017d1c:	3301      	adds	r3, #1
 8017d1e:	f142 0200 	adc.w	r2, r2, #0
 8017d22:	e7f2      	b.n	8017d0a <read_submessage_list+0x2f6>
 8017d24:	3b9aca00 	.word	0x3b9aca00

08017d28 <listen_message_reliably>:
 8017d28:	1e0b      	subs	r3, r1, #0
 8017d2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d2e:	bfb8      	it	lt
 8017d30:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8017d34:	b09d      	sub	sp, #116	@ 0x74
 8017d36:	4680      	mov	r8, r0
 8017d38:	9305      	str	r3, [sp, #20]
 8017d3a:	f001 fba7 	bl	801948c <uxr_millis>
 8017d3e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8017d42:	4681      	mov	r9, r0
 8017d44:	2a00      	cmp	r2, #0
 8017d46:	f000 809a 	beq.w	8017e7e <listen_message_reliably+0x156>
 8017d4a:	2600      	movs	r6, #0
 8017d4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017d50:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8017d54:	460f      	mov	r7, r1
 8017d56:	4630      	mov	r0, r6
 8017d58:	9303      	str	r3, [sp, #12]
 8017d5a:	e00e      	b.n	8017d7a <listen_message_reliably+0x52>
 8017d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017d5e:	3601      	adds	r6, #1
 8017d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d62:	455a      	cmp	r2, fp
 8017d64:	9903      	ldr	r1, [sp, #12]
 8017d66:	b2f0      	uxtb	r0, r6
 8017d68:	eb73 0101 	sbcs.w	r1, r3, r1
 8017d6c:	da01      	bge.n	8017d72 <listen_message_reliably+0x4a>
 8017d6e:	4693      	mov	fp, r2
 8017d70:	9303      	str	r3, [sp, #12]
 8017d72:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017d76:	4283      	cmp	r3, r0
 8017d78:	d95f      	bls.n	8017e3a <listen_message_reliably+0x112>
 8017d7a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8017d7e:	2102      	movs	r1, #2
 8017d80:	2201      	movs	r2, #1
 8017d82:	00e4      	lsls	r4, r4, #3
 8017d84:	f001 f9fe 	bl	8019184 <uxr_stream_id>
 8017d88:	4601      	mov	r1, r0
 8017d8a:	f104 0520 	add.w	r5, r4, #32
 8017d8e:	463b      	mov	r3, r7
 8017d90:	464a      	mov	r2, r9
 8017d92:	9109      	str	r1, [sp, #36]	@ 0x24
 8017d94:	4445      	add	r5, r8
 8017d96:	4628      	mov	r0, r5
 8017d98:	f008 fe8e 	bl	8020ab8 <uxr_update_output_stream_heartbeat_timestamp>
 8017d9c:	eb08 0304 	add.w	r3, r8, r4
 8017da0:	2800      	cmp	r0, #0
 8017da2:	d0db      	beq.n	8017d5c <listen_message_reliably+0x34>
 8017da4:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8017da8:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8017dac:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017db0:	4640      	mov	r0, r8
 8017db2:	3501      	adds	r5, #1
 8017db4:	4444      	add	r4, r8
 8017db6:	9304      	str	r3, [sp, #16]
 8017db8:	f000 fd2e 	bl	8018818 <uxr_session_header_offset>
 8017dbc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	2211      	movs	r2, #17
 8017dc4:	a90c      	add	r1, sp, #48	@ 0x30
 8017dc6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8017dca:	9000      	str	r0, [sp, #0]
 8017dcc:	4650      	mov	r0, sl
 8017dce:	3601      	adds	r6, #1
 8017dd0:	f7fc f9c8 	bl	8014164 <ucdr_init_buffer_origin_offset>
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	2205      	movs	r2, #5
 8017dd8:	210b      	movs	r1, #11
 8017dda:	4650      	mov	r0, sl
 8017ddc:	f001 fb10 	bl	8019400 <uxr_buffer_submessage_header>
 8017de0:	2101      	movs	r1, #1
 8017de2:	8968      	ldrh	r0, [r5, #10]
 8017de4:	f009 f85c 	bl	8020ea0 <uxr_seq_num_add>
 8017de8:	892b      	ldrh	r3, [r5, #8]
 8017dea:	4602      	mov	r2, r0
 8017dec:	a90a      	add	r1, sp, #40	@ 0x28
 8017dee:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017df2:	4650      	mov	r0, sl
 8017df4:	9b04      	ldr	r3, [sp, #16]
 8017df6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017dfa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8017dfe:	f002 fd2f 	bl	801a860 <uxr_serialize_HEARTBEAT_Payload>
 8017e02:	2200      	movs	r2, #0
 8017e04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017e06:	4640      	mov	r0, r8
 8017e08:	4611      	mov	r1, r2
 8017e0a:	f000 fcb1 	bl	8018770 <uxr_stamp_session_header>
 8017e0e:	4650      	mov	r0, sl
 8017e10:	f7fc f9e8 	bl	80141e4 <ucdr_buffer_length>
 8017e14:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8017e18:	4602      	mov	r2, r0
 8017e1a:	a90c      	add	r1, sp, #48	@ 0x30
 8017e1c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8017e20:	47a8      	blx	r5
 8017e22:	9903      	ldr	r1, [sp, #12]
 8017e24:	b2f0      	uxtb	r0, r6
 8017e26:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8017e2a:	455a      	cmp	r2, fp
 8017e2c:	eb73 0101 	sbcs.w	r1, r3, r1
 8017e30:	db9d      	blt.n	8017d6e <listen_message_reliably+0x46>
 8017e32:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8017e36:	4283      	cmp	r3, r0
 8017e38:	d89f      	bhi.n	8017d7a <listen_message_reliably+0x52>
 8017e3a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e3e:	9a03      	ldr	r2, [sp, #12]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	bf08      	it	eq
 8017e44:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8017e48:	d019      	beq.n	8017e7e <listen_message_reliably+0x156>
 8017e4a:	ebab 0309 	sub.w	r3, fp, r9
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	9d05      	ldr	r5, [sp, #20]
 8017e52:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8017e56:	aa08      	add	r2, sp, #32
 8017e58:	bf08      	it	eq
 8017e5a:	2301      	moveq	r3, #1
 8017e5c:	a907      	add	r1, sp, #28
 8017e5e:	6884      	ldr	r4, [r0, #8]
 8017e60:	429d      	cmp	r5, r3
 8017e62:	6800      	ldr	r0, [r0, #0]
 8017e64:	bfa8      	it	ge
 8017e66:	461d      	movge	r5, r3
 8017e68:	462b      	mov	r3, r5
 8017e6a:	47a0      	blx	r4
 8017e6c:	b948      	cbnz	r0, 8017e82 <listen_message_reliably+0x15a>
 8017e6e:	9b05      	ldr	r3, [sp, #20]
 8017e70:	1b5b      	subs	r3, r3, r5
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	9305      	str	r3, [sp, #20]
 8017e76:	f73f af60 	bgt.w	8017d3a <listen_message_reliably+0x12>
 8017e7a:	4604      	mov	r4, r0
 8017e7c:	e012      	b.n	8017ea4 <listen_message_reliably+0x17c>
 8017e7e:	9b05      	ldr	r3, [sp, #20]
 8017e80:	e7e5      	b.n	8017e4e <listen_message_reliably+0x126>
 8017e82:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017e86:	4604      	mov	r4, r0
 8017e88:	2500      	movs	r5, #0
 8017e8a:	a80c      	add	r0, sp, #48	@ 0x30
 8017e8c:	f7fc f97c 	bl	8014188 <ucdr_init_buffer>
 8017e90:	f10d 031a 	add.w	r3, sp, #26
 8017e94:	aa06      	add	r2, sp, #24
 8017e96:	a90c      	add	r1, sp, #48	@ 0x30
 8017e98:	4640      	mov	r0, r8
 8017e9a:	f88d 5018 	strb.w	r5, [sp, #24]
 8017e9e:	f000 fc7b 	bl	8018798 <uxr_read_session_header>
 8017ea2:	b918      	cbnz	r0, 8017eac <listen_message_reliably+0x184>
 8017ea4:	4620      	mov	r0, r4
 8017ea6:	b01d      	add	sp, #116	@ 0x74
 8017ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eac:	4629      	mov	r1, r5
 8017eae:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017eb2:	f001 f995 	bl	80191e0 <uxr_stream_id_from_raw>
 8017eb6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8017eba:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8017ebe:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8017ec2:	2e01      	cmp	r6, #1
 8017ec4:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8017ec8:	d04b      	beq.n	8017f62 <listen_message_reliably+0x23a>
 8017eca:	2e02      	cmp	r6, #2
 8017ecc:	d00f      	beq.n	8017eee <listen_message_reliably+0x1c6>
 8017ece:	2e00      	cmp	r6, #0
 8017ed0:	d1e8      	bne.n	8017ea4 <listen_message_reliably+0x17c>
 8017ed2:	4631      	mov	r1, r6
 8017ed4:	4630      	mov	r0, r6
 8017ed6:	f001 f983 	bl	80191e0 <uxr_stream_id_from_raw>
 8017eda:	4602      	mov	r2, r0
 8017edc:	a90c      	add	r1, sp, #48	@ 0x30
 8017ede:	4640      	mov	r0, r8
 8017ee0:	920a      	str	r2, [sp, #40]	@ 0x28
 8017ee2:	f7ff fd97 	bl	8017a14 <read_submessage_list>
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	b01d      	add	sp, #116	@ 0x74
 8017eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eee:	4629      	mov	r1, r5
 8017ef0:	f108 0008 	add.w	r0, r8, #8
 8017ef4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8017ef8:	f001 fa60 	bl	80193bc <uxr_get_input_reliable_stream>
 8017efc:	4607      	mov	r7, r0
 8017efe:	b338      	cbz	r0, 8017f50 <listen_message_reliably+0x228>
 8017f00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017f02:	a80c      	add	r0, sp, #48	@ 0x30
 8017f04:	9203      	str	r2, [sp, #12]
 8017f06:	f7fc f971 	bl	80141ec <ucdr_buffer_remaining>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	f10d 0019 	add.w	r0, sp, #25
 8017f10:	9a03      	ldr	r2, [sp, #12]
 8017f12:	4651      	mov	r1, sl
 8017f14:	9000      	str	r0, [sp, #0]
 8017f16:	4638      	mov	r0, r7
 8017f18:	f008 f9da 	bl	80202d0 <uxr_receive_reliable_message>
 8017f1c:	b1c0      	cbz	r0, 8017f50 <listen_message_reliably+0x228>
 8017f1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017f22:	b393      	cbz	r3, 8017f8a <listen_message_reliably+0x262>
 8017f24:	ae14      	add	r6, sp, #80	@ 0x50
 8017f26:	f04f 0a02 	mov.w	sl, #2
 8017f2a:	e00a      	b.n	8017f42 <listen_message_reliably+0x21a>
 8017f2c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8017f30:	4631      	mov	r1, r6
 8017f32:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8017f36:	4640      	mov	r0, r8
 8017f38:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8017f3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f3e:	f7ff fd69 	bl	8017a14 <read_submessage_list>
 8017f42:	2204      	movs	r2, #4
 8017f44:	4631      	mov	r1, r6
 8017f46:	4638      	mov	r0, r7
 8017f48:	f008 fa44 	bl	80203d4 <uxr_next_input_reliable_buffer_available>
 8017f4c:	2800      	cmp	r0, #0
 8017f4e:	d1ed      	bne.n	8017f2c <listen_message_reliably+0x204>
 8017f50:	4640      	mov	r0, r8
 8017f52:	462a      	mov	r2, r5
 8017f54:	4649      	mov	r1, r9
 8017f56:	f7ff fbd9 	bl	801770c <write_submessage_acknack.isra.0>
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	b01d      	add	sp, #116	@ 0x74
 8017f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f62:	4629      	mov	r1, r5
 8017f64:	f108 0008 	add.w	r0, r8, #8
 8017f68:	f001 fa1e 	bl	80193a8 <uxr_get_input_best_effort_stream>
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	d099      	beq.n	8017ea4 <listen_message_reliably+0x17c>
 8017f70:	4651      	mov	r1, sl
 8017f72:	f008 f923 	bl	80201bc <uxr_receive_best_effort_message>
 8017f76:	2800      	cmp	r0, #0
 8017f78:	d094      	beq.n	8017ea4 <listen_message_reliably+0x17c>
 8017f7a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017f7e:	a90c      	add	r1, sp, #48	@ 0x30
 8017f80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f82:	4640      	mov	r0, r8
 8017f84:	f7ff fd46 	bl	8017a14 <read_submessage_list>
 8017f88:	e78c      	b.n	8017ea4 <listen_message_reliably+0x17c>
 8017f8a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017f8e:	a90c      	add	r1, sp, #48	@ 0x30
 8017f90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017f92:	4640      	mov	r0, r8
 8017f94:	f7ff fd3e 	bl	8017a14 <read_submessage_list>
 8017f98:	e7c4      	b.n	8017f24 <listen_message_reliably+0x1fc>
 8017f9a:	bf00      	nop

08017f9c <uxr_run_session_timeout>:
 8017f9c:	b570      	push	{r4, r5, r6, lr}
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	460d      	mov	r5, r1
 8017fa2:	f001 fa73 	bl	801948c <uxr_millis>
 8017fa6:	4606      	mov	r6, r0
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f7ff fc77 	bl	801789c <uxr_flash_output_streams>
 8017fae:	4629      	mov	r1, r5
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f7ff feb9 	bl	8017d28 <listen_message_reliably>
 8017fb6:	f001 fa69 	bl	801948c <uxr_millis>
 8017fba:	1b83      	subs	r3, r0, r6
 8017fbc:	1ae9      	subs	r1, r5, r3
 8017fbe:	2900      	cmp	r1, #0
 8017fc0:	dcf6      	bgt.n	8017fb0 <uxr_run_session_timeout+0x14>
 8017fc2:	f104 0008 	add.w	r0, r4, #8
 8017fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fca:	f001 ba03 	b.w	80193d4 <uxr_output_streams_confirmed>
 8017fce:	bf00      	nop

08017fd0 <uxr_run_session_until_data>:
 8017fd0:	b570      	push	{r4, r5, r6, lr}
 8017fd2:	4604      	mov	r4, r0
 8017fd4:	460d      	mov	r5, r1
 8017fd6:	f001 fa59 	bl	801948c <uxr_millis>
 8017fda:	4606      	mov	r6, r0
 8017fdc:	4620      	mov	r0, r4
 8017fde:	f7ff fc5d 	bl	801789c <uxr_flash_output_streams>
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	4629      	mov	r1, r5
 8017fe6:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8017fea:	e005      	b.n	8017ff8 <uxr_run_session_until_data+0x28>
 8017fec:	f001 fa4e 	bl	801948c <uxr_millis>
 8017ff0:	1b83      	subs	r3, r0, r6
 8017ff2:	1ae9      	subs	r1, r5, r3
 8017ff4:	2900      	cmp	r1, #0
 8017ff6:	dd07      	ble.n	8018008 <uxr_run_session_until_data+0x38>
 8017ff8:	4620      	mov	r0, r4
 8017ffa:	f7ff fe95 	bl	8017d28 <listen_message_reliably>
 8017ffe:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8018002:	2800      	cmp	r0, #0
 8018004:	d0f2      	beq.n	8017fec <uxr_run_session_until_data+0x1c>
 8018006:	bd70      	pop	{r4, r5, r6, pc}
 8018008:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801800c:	bd70      	pop	{r4, r5, r6, pc}
 801800e:	bf00      	nop

08018010 <uxr_run_session_until_confirm_delivery>:
 8018010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018014:	4606      	mov	r6, r0
 8018016:	460d      	mov	r5, r1
 8018018:	f001 fa38 	bl	801948c <uxr_millis>
 801801c:	4607      	mov	r7, r0
 801801e:	4630      	mov	r0, r6
 8018020:	f106 0808 	add.w	r8, r6, #8
 8018024:	f7ff fc3a 	bl	801789c <uxr_flash_output_streams>
 8018028:	2d00      	cmp	r5, #0
 801802a:	db10      	blt.n	801804e <uxr_run_session_until_confirm_delivery+0x3e>
 801802c:	462c      	mov	r4, r5
 801802e:	e006      	b.n	801803e <uxr_run_session_until_confirm_delivery+0x2e>
 8018030:	f7ff fe7a 	bl	8017d28 <listen_message_reliably>
 8018034:	f001 fa2a 	bl	801948c <uxr_millis>
 8018038:	1bc3      	subs	r3, r0, r7
 801803a:	1aec      	subs	r4, r5, r3
 801803c:	d407      	bmi.n	801804e <uxr_run_session_until_confirm_delivery+0x3e>
 801803e:	4640      	mov	r0, r8
 8018040:	f001 f9c8 	bl	80193d4 <uxr_output_streams_confirmed>
 8018044:	4603      	mov	r3, r0
 8018046:	4621      	mov	r1, r4
 8018048:	4630      	mov	r0, r6
 801804a:	2b00      	cmp	r3, #0
 801804c:	d0f0      	beq.n	8018030 <uxr_run_session_until_confirm_delivery+0x20>
 801804e:	4640      	mov	r0, r8
 8018050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018054:	f001 b9be 	b.w	80193d4 <uxr_output_streams_confirmed>

08018058 <uxr_run_session_until_all_status>:
 8018058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801805c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8018060:	4606      	mov	r6, r0
 8018062:	4688      	mov	r8, r1
 8018064:	4692      	mov	sl, r2
 8018066:	461f      	mov	r7, r3
 8018068:	f7ff fc18 	bl	801789c <uxr_flash_output_streams>
 801806c:	f1bb 0f00 	cmp.w	fp, #0
 8018070:	d004      	beq.n	801807c <uxr_run_session_until_all_status+0x24>
 8018072:	465a      	mov	r2, fp
 8018074:	21ff      	movs	r1, #255	@ 0xff
 8018076:	4638      	mov	r0, r7
 8018078:	f00a f92a 	bl	80222d0 <memset>
 801807c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018080:	1e7d      	subs	r5, r7, #1
 8018082:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8018086:	f001 fa01 	bl	801948c <uxr_millis>
 801808a:	4641      	mov	r1, r8
 801808c:	4681      	mov	r9, r0
 801808e:	4630      	mov	r0, r6
 8018090:	f7ff fe4a 	bl	8017d28 <listen_message_reliably>
 8018094:	f001 f9fa 	bl	801948c <uxr_millis>
 8018098:	eba0 0009 	sub.w	r0, r0, r9
 801809c:	eba8 0100 	sub.w	r1, r8, r0
 80180a0:	f1bb 0f00 	cmp.w	fp, #0
 80180a4:	d029      	beq.n	80180fa <uxr_run_session_until_all_status+0xa2>
 80180a6:	46ae      	mov	lr, r5
 80180a8:	f04f 0c00 	mov.w	ip, #0
 80180ac:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80180b0:	2cff      	cmp	r4, #255	@ 0xff
 80180b2:	d015      	beq.n	80180e0 <uxr_run_session_until_all_status+0x88>
 80180b4:	f10c 0c01 	add.w	ip, ip, #1
 80180b8:	45e3      	cmp	fp, ip
 80180ba:	d8f7      	bhi.n	80180ac <uxr_run_session_until_all_status+0x54>
 80180bc:	2300      	movs	r3, #0
 80180be:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80180c0:	e000      	b.n	80180c4 <uxr_run_session_until_all_status+0x6c>
 80180c2:	b158      	cbz	r0, 80180dc <uxr_run_session_until_all_status+0x84>
 80180c4:	462b      	mov	r3, r5
 80180c6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80180ca:	3302      	adds	r3, #2
 80180cc:	2801      	cmp	r0, #1
 80180ce:	eba3 0307 	sub.w	r3, r3, r7
 80180d2:	bf8c      	ite	hi
 80180d4:	2000      	movhi	r0, #0
 80180d6:	2001      	movls	r0, #1
 80180d8:	459b      	cmp	fp, r3
 80180da:	d8f2      	bhi.n	80180c2 <uxr_run_session_until_all_status+0x6a>
 80180dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180e0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80180e4:	f10c 0c01 	add.w	ip, ip, #1
 80180e8:	45dc      	cmp	ip, fp
 80180ea:	d201      	bcs.n	80180f0 <uxr_run_session_until_all_status+0x98>
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d0dd      	beq.n	80180ac <uxr_run_session_until_all_status+0x54>
 80180f0:	2900      	cmp	r1, #0
 80180f2:	dde3      	ble.n	80180bc <uxr_run_session_until_all_status+0x64>
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d1ca      	bne.n	801808e <uxr_run_session_until_all_status+0x36>
 80180f8:	e7e0      	b.n	80180bc <uxr_run_session_until_all_status+0x64>
 80180fa:	2001      	movs	r0, #1
 80180fc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8018100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018104:	0000      	movs	r0, r0
	...

08018108 <uxr_sync_session>:
 8018108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801810a:	b093      	sub	sp, #76	@ 0x4c
 801810c:	4604      	mov	r4, r0
 801810e:	460d      	mov	r5, r1
 8018110:	f000 fb82 	bl	8018818 <uxr_session_header_offset>
 8018114:	2214      	movs	r2, #20
 8018116:	2300      	movs	r3, #0
 8018118:	9000      	str	r0, [sp, #0]
 801811a:	a80a      	add	r0, sp, #40	@ 0x28
 801811c:	eb0d 0102 	add.w	r1, sp, r2
 8018120:	f7fc f820 	bl	8014164 <ucdr_init_buffer_origin_offset>
 8018124:	2300      	movs	r3, #0
 8018126:	2208      	movs	r2, #8
 8018128:	210e      	movs	r1, #14
 801812a:	a80a      	add	r0, sp, #40	@ 0x28
 801812c:	f001 f968 	bl	8019400 <uxr_buffer_submessage_header>
 8018130:	f001 f9c8 	bl	80194c4 <uxr_nanos>
 8018134:	460e      	mov	r6, r1
 8018136:	4607      	mov	r7, r0
 8018138:	a31b      	add	r3, pc, #108	@ (adr r3, 80181a8 <uxr_sync_session+0xa0>)
 801813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801813e:	f7e8 f937 	bl	80003b0 <__aeabi_ldivmod>
 8018142:	4631      	mov	r1, r6
 8018144:	9003      	str	r0, [sp, #12]
 8018146:	4638      	mov	r0, r7
 8018148:	a317      	add	r3, pc, #92	@ (adr r3, 80181a8 <uxr_sync_session+0xa0>)
 801814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801814e:	f7e8 f92f 	bl	80003b0 <__aeabi_ldivmod>
 8018152:	a903      	add	r1, sp, #12
 8018154:	a80a      	add	r0, sp, #40	@ 0x28
 8018156:	9204      	str	r2, [sp, #16]
 8018158:	f002 fbaa 	bl	801a8b0 <uxr_serialize_TIMESTAMP_Payload>
 801815c:	2200      	movs	r2, #0
 801815e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018160:	4620      	mov	r0, r4
 8018162:	4611      	mov	r1, r2
 8018164:	f000 fb04 	bl	8018770 <uxr_stamp_session_header>
 8018168:	a80a      	add	r0, sp, #40	@ 0x28
 801816a:	f7fc f83b 	bl	80141e4 <ucdr_buffer_length>
 801816e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018170:	4602      	mov	r2, r0
 8018172:	a905      	add	r1, sp, #20
 8018174:	e9d3 0600 	ldrd	r0, r6, [r3]
 8018178:	47b0      	blx	r6
 801817a:	f001 f987 	bl	801948c <uxr_millis>
 801817e:	2300      	movs	r3, #0
 8018180:	4606      	mov	r6, r0
 8018182:	4629      	mov	r1, r5
 8018184:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8018188:	e000      	b.n	801818c <uxr_sync_session+0x84>
 801818a:	b950      	cbnz	r0, 80181a2 <uxr_sync_session+0x9a>
 801818c:	4620      	mov	r0, r4
 801818e:	f7ff fdcb 	bl	8017d28 <listen_message_reliably>
 8018192:	f001 f97b 	bl	801948c <uxr_millis>
 8018196:	1b83      	subs	r3, r0, r6
 8018198:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 801819c:	1ae9      	subs	r1, r5, r3
 801819e:	2900      	cmp	r1, #0
 80181a0:	dcf3      	bgt.n	801818a <uxr_sync_session+0x82>
 80181a2:	b013      	add	sp, #76	@ 0x4c
 80181a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181a6:	bf00      	nop
 80181a8:	3b9aca00 	.word	0x3b9aca00
 80181ac:	00000000 	.word	0x00000000

080181b0 <uxr_run_session_until_pong>:
 80181b0:	b570      	push	{r4, r5, r6, lr}
 80181b2:	4604      	mov	r4, r0
 80181b4:	460d      	mov	r5, r1
 80181b6:	f001 f969 	bl	801948c <uxr_millis>
 80181ba:	4606      	mov	r6, r0
 80181bc:	4620      	mov	r0, r4
 80181be:	f7ff fb6d 	bl	801789c <uxr_flash_output_streams>
 80181c2:	2300      	movs	r3, #0
 80181c4:	4629      	mov	r1, r5
 80181c6:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 80181ca:	e005      	b.n	80181d8 <uxr_run_session_until_pong+0x28>
 80181cc:	f001 f95e 	bl	801948c <uxr_millis>
 80181d0:	1b83      	subs	r3, r0, r6
 80181d2:	1ae9      	subs	r1, r5, r3
 80181d4:	2900      	cmp	r1, #0
 80181d6:	dd0c      	ble.n	80181f2 <uxr_run_session_until_pong+0x42>
 80181d8:	4620      	mov	r0, r4
 80181da:	f7ff fda5 	bl	8017d28 <listen_message_reliably>
 80181de:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80181e2:	2800      	cmp	r0, #0
 80181e4:	d0f2      	beq.n	80181cc <uxr_run_session_until_pong+0x1c>
 80181e6:	f1a0 0001 	sub.w	r0, r0, #1
 80181ea:	fab0 f080 	clz	r0, r0
 80181ee:	0940      	lsrs	r0, r0, #5
 80181f0:	bd70      	pop	{r4, r5, r6, pc}
 80181f2:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80181f6:	f1a0 0001 	sub.w	r0, r0, #1
 80181fa:	fab0 f080 	clz	r0, r0
 80181fe:	0940      	lsrs	r0, r0, #5
 8018200:	bd70      	pop	{r4, r5, r6, pc}
 8018202:	bf00      	nop

08018204 <wait_session_status>:
 8018204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018208:	4604      	mov	r4, r0
 801820a:	b09d      	sub	sp, #116	@ 0x74
 801820c:	20ff      	movs	r0, #255	@ 0xff
 801820e:	9303      	str	r3, [sp, #12]
 8018210:	7160      	strb	r0, [r4, #5]
 8018212:	2b00      	cmp	r3, #0
 8018214:	f000 80b6 	beq.w	8018384 <wait_session_status+0x180>
 8018218:	4689      	mov	r9, r1
 801821a:	4692      	mov	sl, r2
 801821c:	f04f 0b00 	mov.w	fp, #0
 8018220:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018222:	4652      	mov	r2, sl
 8018224:	4649      	mov	r1, r9
 8018226:	e9d3 0500 	ldrd	r0, r5, [r3]
 801822a:	47a8      	blx	r5
 801822c:	f001 f92e 	bl	801948c <uxr_millis>
 8018230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018234:	4605      	mov	r5, r0
 8018236:	e009      	b.n	801824c <wait_session_status+0x48>
 8018238:	f001 f928 	bl	801948c <uxr_millis>
 801823c:	1b40      	subs	r0, r0, r5
 801823e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018242:	2b00      	cmp	r3, #0
 8018244:	dd40      	ble.n	80182c8 <wait_session_status+0xc4>
 8018246:	7960      	ldrb	r0, [r4, #5]
 8018248:	28ff      	cmp	r0, #255	@ 0xff
 801824a:	d145      	bne.n	80182d8 <wait_session_status+0xd4>
 801824c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801824e:	a908      	add	r1, sp, #32
 8018250:	6896      	ldr	r6, [r2, #8]
 8018252:	6810      	ldr	r0, [r2, #0]
 8018254:	aa09      	add	r2, sp, #36	@ 0x24
 8018256:	47b0      	blx	r6
 8018258:	2800      	cmp	r0, #0
 801825a:	d0ed      	beq.n	8018238 <wait_session_status+0x34>
 801825c:	a80c      	add	r0, sp, #48	@ 0x30
 801825e:	2600      	movs	r6, #0
 8018260:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018264:	f7fb ff90 	bl	8014188 <ucdr_init_buffer>
 8018268:	f10d 031e 	add.w	r3, sp, #30
 801826c:	aa07      	add	r2, sp, #28
 801826e:	a90c      	add	r1, sp, #48	@ 0x30
 8018270:	4620      	mov	r0, r4
 8018272:	f88d 601c 	strb.w	r6, [sp, #28]
 8018276:	f000 fa8f 	bl	8018798 <uxr_read_session_header>
 801827a:	2800      	cmp	r0, #0
 801827c:	d0dc      	beq.n	8018238 <wait_session_status+0x34>
 801827e:	4631      	mov	r1, r6
 8018280:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018284:	f000 ffac 	bl	80191e0 <uxr_stream_id_from_raw>
 8018288:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801828c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018290:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018294:	2f01      	cmp	r7, #1
 8018296:	9302      	str	r3, [sp, #8]
 8018298:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801829c:	d05c      	beq.n	8018358 <wait_session_status+0x154>
 801829e:	2f02      	cmp	r7, #2
 80182a0:	d020      	beq.n	80182e4 <wait_session_status+0xe0>
 80182a2:	2f00      	cmp	r7, #0
 80182a4:	d1c8      	bne.n	8018238 <wait_session_status+0x34>
 80182a6:	4639      	mov	r1, r7
 80182a8:	4638      	mov	r0, r7
 80182aa:	f000 ff99 	bl	80191e0 <uxr_stream_id_from_raw>
 80182ae:	a90c      	add	r1, sp, #48	@ 0x30
 80182b0:	4602      	mov	r2, r0
 80182b2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80182b4:	4620      	mov	r0, r4
 80182b6:	f7ff fbad 	bl	8017a14 <read_submessage_list>
 80182ba:	f001 f8e7 	bl	801948c <uxr_millis>
 80182be:	1b40      	subs	r0, r0, r5
 80182c0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	dcbe      	bgt.n	8018246 <wait_session_status+0x42>
 80182c8:	f10b 0b01 	add.w	fp, fp, #1
 80182cc:	9b03      	ldr	r3, [sp, #12]
 80182ce:	7960      	ldrb	r0, [r4, #5]
 80182d0:	455b      	cmp	r3, fp
 80182d2:	d001      	beq.n	80182d8 <wait_session_status+0xd4>
 80182d4:	28ff      	cmp	r0, #255	@ 0xff
 80182d6:	d0a3      	beq.n	8018220 <wait_session_status+0x1c>
 80182d8:	38ff      	subs	r0, #255	@ 0xff
 80182da:	bf18      	it	ne
 80182dc:	2001      	movne	r0, #1
 80182de:	b01d      	add	sp, #116	@ 0x74
 80182e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80182e8:	4631      	mov	r1, r6
 80182ea:	f104 0008 	add.w	r0, r4, #8
 80182ee:	9304      	str	r3, [sp, #16]
 80182f0:	f001 f864 	bl	80193bc <uxr_get_input_reliable_stream>
 80182f4:	4680      	mov	r8, r0
 80182f6:	b348      	cbz	r0, 801834c <wait_session_status+0x148>
 80182f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80182fa:	a80c      	add	r0, sp, #48	@ 0x30
 80182fc:	9205      	str	r2, [sp, #20]
 80182fe:	f7fb ff75 	bl	80141ec <ucdr_buffer_remaining>
 8018302:	4603      	mov	r3, r0
 8018304:	f10d 001d 	add.w	r0, sp, #29
 8018308:	9a05      	ldr	r2, [sp, #20]
 801830a:	9000      	str	r0, [sp, #0]
 801830c:	4640      	mov	r0, r8
 801830e:	9902      	ldr	r1, [sp, #8]
 8018310:	f007 ffde 	bl	80202d0 <uxr_receive_reliable_message>
 8018314:	b1d0      	cbz	r0, 801834c <wait_session_status+0x148>
 8018316:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d03a      	beq.n	8018394 <wait_session_status+0x190>
 801831e:	9f04      	ldr	r7, [sp, #16]
 8018320:	e00a      	b.n	8018338 <wait_session_status+0x134>
 8018322:	f04f 0302 	mov.w	r3, #2
 8018326:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801832a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801832e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8018332:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018334:	f7ff fb6e 	bl	8017a14 <read_submessage_list>
 8018338:	a914      	add	r1, sp, #80	@ 0x50
 801833a:	2204      	movs	r2, #4
 801833c:	4640      	mov	r0, r8
 801833e:	f008 f849 	bl	80203d4 <uxr_next_input_reliable_buffer_available>
 8018342:	4603      	mov	r3, r0
 8018344:	a914      	add	r1, sp, #80	@ 0x50
 8018346:	4620      	mov	r0, r4
 8018348:	2b00      	cmp	r3, #0
 801834a:	d1ea      	bne.n	8018322 <wait_session_status+0x11e>
 801834c:	4632      	mov	r2, r6
 801834e:	9904      	ldr	r1, [sp, #16]
 8018350:	4620      	mov	r0, r4
 8018352:	f7ff f9db 	bl	801770c <write_submessage_acknack.isra.0>
 8018356:	e76f      	b.n	8018238 <wait_session_status+0x34>
 8018358:	4631      	mov	r1, r6
 801835a:	f104 0008 	add.w	r0, r4, #8
 801835e:	f001 f823 	bl	80193a8 <uxr_get_input_best_effort_stream>
 8018362:	2800      	cmp	r0, #0
 8018364:	f43f af68 	beq.w	8018238 <wait_session_status+0x34>
 8018368:	9902      	ldr	r1, [sp, #8]
 801836a:	f007 ff27 	bl	80201bc <uxr_receive_best_effort_message>
 801836e:	2800      	cmp	r0, #0
 8018370:	f43f af62 	beq.w	8018238 <wait_session_status+0x34>
 8018374:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018378:	a90c      	add	r1, sp, #48	@ 0x30
 801837a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801837c:	4620      	mov	r0, r4
 801837e:	f7ff fb49 	bl	8017a14 <read_submessage_list>
 8018382:	e759      	b.n	8018238 <wait_session_status+0x34>
 8018384:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018386:	e9d3 0400 	ldrd	r0, r4, [r3]
 801838a:	47a0      	blx	r4
 801838c:	2001      	movs	r0, #1
 801838e:	b01d      	add	sp, #116	@ 0x74
 8018390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018394:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8018398:	a90c      	add	r1, sp, #48	@ 0x30
 801839a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801839c:	4620      	mov	r0, r4
 801839e:	f7ff fb39 	bl	8017a14 <read_submessage_list>
 80183a2:	e7bc      	b.n	801831e <wait_session_status+0x11a>

080183a4 <uxr_delete_session_retries>:
 80183a4:	b530      	push	{r4, r5, lr}
 80183a6:	b08f      	sub	sp, #60	@ 0x3c
 80183a8:	4604      	mov	r4, r0
 80183aa:	460d      	mov	r5, r1
 80183ac:	f000 fa34 	bl	8018818 <uxr_session_header_offset>
 80183b0:	2300      	movs	r3, #0
 80183b2:	2210      	movs	r2, #16
 80183b4:	a902      	add	r1, sp, #8
 80183b6:	9000      	str	r0, [sp, #0]
 80183b8:	a806      	add	r0, sp, #24
 80183ba:	f7fb fed3 	bl	8014164 <ucdr_init_buffer_origin_offset>
 80183be:	a906      	add	r1, sp, #24
 80183c0:	4620      	mov	r0, r4
 80183c2:	f000 f979 	bl	80186b8 <uxr_buffer_delete_session>
 80183c6:	2200      	movs	r2, #0
 80183c8:	9b06      	ldr	r3, [sp, #24]
 80183ca:	4620      	mov	r0, r4
 80183cc:	4611      	mov	r1, r2
 80183ce:	f000 f9cf 	bl	8018770 <uxr_stamp_session_header>
 80183d2:	a806      	add	r0, sp, #24
 80183d4:	f7fb ff06 	bl	80141e4 <ucdr_buffer_length>
 80183d8:	462b      	mov	r3, r5
 80183da:	4602      	mov	r2, r0
 80183dc:	a902      	add	r1, sp, #8
 80183de:	4620      	mov	r0, r4
 80183e0:	f7ff ff10 	bl	8018204 <wait_session_status>
 80183e4:	b118      	cbz	r0, 80183ee <uxr_delete_session_retries+0x4a>
 80183e6:	7960      	ldrb	r0, [r4, #5]
 80183e8:	fab0 f080 	clz	r0, r0
 80183ec:	0940      	lsrs	r0, r0, #5
 80183ee:	b00f      	add	sp, #60	@ 0x3c
 80183f0:	bd30      	pop	{r4, r5, pc}
 80183f2:	bf00      	nop

080183f4 <uxr_create_session>:
 80183f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183f8:	f100 0b08 	add.w	fp, r0, #8
 80183fc:	4604      	mov	r4, r0
 80183fe:	b0ab      	sub	sp, #172	@ 0xac
 8018400:	4658      	mov	r0, fp
 8018402:	465e      	mov	r6, fp
 8018404:	f000 ff22 	bl	801924c <uxr_reset_stream_storage>
 8018408:	4620      	mov	r0, r4
 801840a:	f000 fa05 	bl	8018818 <uxr_session_header_offset>
 801840e:	2300      	movs	r3, #0
 8018410:	221c      	movs	r2, #28
 8018412:	a90b      	add	r1, sp, #44	@ 0x2c
 8018414:	9000      	str	r0, [sp, #0]
 8018416:	a812      	add	r0, sp, #72	@ 0x48
 8018418:	f7fb fea4 	bl	8014164 <ucdr_init_buffer_origin_offset>
 801841c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801841e:	a912      	add	r1, sp, #72	@ 0x48
 8018420:	4620      	mov	r0, r4
 8018422:	8a1a      	ldrh	r2, [r3, #16]
 8018424:	3a04      	subs	r2, #4
 8018426:	b292      	uxth	r2, r2
 8018428:	f000 f91c 	bl	8018664 <uxr_buffer_create_session>
 801842c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801842e:	4620      	mov	r0, r4
 8018430:	f000 f98a 	bl	8018748 <uxr_stamp_create_session_header>
 8018434:	a812      	add	r0, sp, #72	@ 0x48
 8018436:	f7fb fed5 	bl	80141e4 <ucdr_buffer_length>
 801843a:	23ff      	movs	r3, #255	@ 0xff
 801843c:	4681      	mov	r9, r0
 801843e:	7163      	strb	r3, [r4, #5]
 8018440:	230a      	movs	r3, #10
 8018442:	9303      	str	r3, [sp, #12]
 8018444:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018446:	464a      	mov	r2, r9
 8018448:	a90b      	add	r1, sp, #44	@ 0x2c
 801844a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801844e:	47a8      	blx	r5
 8018450:	f001 f81c 	bl	801948c <uxr_millis>
 8018454:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018458:	4605      	mov	r5, r0
 801845a:	e009      	b.n	8018470 <uxr_create_session+0x7c>
 801845c:	f001 f816 	bl	801948c <uxr_millis>
 8018460:	1b40      	subs	r0, r0, r5
 8018462:	7962      	ldrb	r2, [r4, #5]
 8018464:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8018468:	2b00      	cmp	r3, #0
 801846a:	dd38      	ble.n	80184de <uxr_create_session+0xea>
 801846c:	2aff      	cmp	r2, #255	@ 0xff
 801846e:	d13c      	bne.n	80184ea <uxr_create_session+0xf6>
 8018470:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8018472:	a907      	add	r1, sp, #28
 8018474:	6897      	ldr	r7, [r2, #8]
 8018476:	6810      	ldr	r0, [r2, #0]
 8018478:	aa08      	add	r2, sp, #32
 801847a:	47b8      	blx	r7
 801847c:	2800      	cmp	r0, #0
 801847e:	d0ed      	beq.n	801845c <uxr_create_session+0x68>
 8018480:	a81a      	add	r0, sp, #104	@ 0x68
 8018482:	2700      	movs	r7, #0
 8018484:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018488:	f7fb fe7e 	bl	8014188 <ucdr_init_buffer>
 801848c:	f10d 031a 	add.w	r3, sp, #26
 8018490:	aa06      	add	r2, sp, #24
 8018492:	a91a      	add	r1, sp, #104	@ 0x68
 8018494:	4620      	mov	r0, r4
 8018496:	f88d 7018 	strb.w	r7, [sp, #24]
 801849a:	f000 f97d 	bl	8018798 <uxr_read_session_header>
 801849e:	2800      	cmp	r0, #0
 80184a0:	d0dc      	beq.n	801845c <uxr_create_session+0x68>
 80184a2:	4639      	mov	r1, r7
 80184a4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80184a8:	f000 fe9a 	bl	80191e0 <uxr_stream_id_from_raw>
 80184ac:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80184b0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80184b4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80184b8:	2f01      	cmp	r7, #1
 80184ba:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80184be:	d053      	beq.n	8018568 <uxr_create_session+0x174>
 80184c0:	2f02      	cmp	r7, #2
 80184c2:	d018      	beq.n	80184f6 <uxr_create_session+0x102>
 80184c4:	2f00      	cmp	r7, #0
 80184c6:	d1c9      	bne.n	801845c <uxr_create_session+0x68>
 80184c8:	4639      	mov	r1, r7
 80184ca:	4638      	mov	r0, r7
 80184cc:	f000 fe88 	bl	80191e0 <uxr_stream_id_from_raw>
 80184d0:	a91a      	add	r1, sp, #104	@ 0x68
 80184d2:	4602      	mov	r2, r0
 80184d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80184d6:	4620      	mov	r0, r4
 80184d8:	f7ff fa9c 	bl	8017a14 <read_submessage_list>
 80184dc:	e7be      	b.n	801845c <uxr_create_session+0x68>
 80184de:	9b03      	ldr	r3, [sp, #12]
 80184e0:	3b01      	subs	r3, #1
 80184e2:	9303      	str	r3, [sp, #12]
 80184e4:	d001      	beq.n	80184ea <uxr_create_session+0xf6>
 80184e6:	2aff      	cmp	r2, #255	@ 0xff
 80184e8:	d0ac      	beq.n	8018444 <uxr_create_session+0x50>
 80184ea:	2a00      	cmp	r2, #0
 80184ec:	d051      	beq.n	8018592 <uxr_create_session+0x19e>
 80184ee:	2000      	movs	r0, #0
 80184f0:	b02b      	add	sp, #172	@ 0xac
 80184f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184f6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80184fa:	4641      	mov	r1, r8
 80184fc:	4630      	mov	r0, r6
 80184fe:	9304      	str	r3, [sp, #16]
 8018500:	f000 ff5c 	bl	80193bc <uxr_get_input_reliable_stream>
 8018504:	4682      	mov	sl, r0
 8018506:	b348      	cbz	r0, 801855c <uxr_create_session+0x168>
 8018508:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801850a:	a81a      	add	r0, sp, #104	@ 0x68
 801850c:	9205      	str	r2, [sp, #20]
 801850e:	f7fb fe6d 	bl	80141ec <ucdr_buffer_remaining>
 8018512:	4603      	mov	r3, r0
 8018514:	f10d 0019 	add.w	r0, sp, #25
 8018518:	9a05      	ldr	r2, [sp, #20]
 801851a:	4659      	mov	r1, fp
 801851c:	9000      	str	r0, [sp, #0]
 801851e:	4650      	mov	r0, sl
 8018520:	f007 fed6 	bl	80202d0 <uxr_receive_reliable_message>
 8018524:	b1d0      	cbz	r0, 801855c <uxr_create_session+0x168>
 8018526:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d038      	beq.n	80185a0 <uxr_create_session+0x1ac>
 801852e:	9f04      	ldr	r7, [sp, #16]
 8018530:	e00a      	b.n	8018548 <uxr_create_session+0x154>
 8018532:	f04f 0302 	mov.w	r3, #2
 8018536:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 801853a:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801853e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018544:	f7ff fa66 	bl	8017a14 <read_submessage_list>
 8018548:	a922      	add	r1, sp, #136	@ 0x88
 801854a:	2204      	movs	r2, #4
 801854c:	4650      	mov	r0, sl
 801854e:	f007 ff41 	bl	80203d4 <uxr_next_input_reliable_buffer_available>
 8018552:	4603      	mov	r3, r0
 8018554:	a922      	add	r1, sp, #136	@ 0x88
 8018556:	4620      	mov	r0, r4
 8018558:	2b00      	cmp	r3, #0
 801855a:	d1ea      	bne.n	8018532 <uxr_create_session+0x13e>
 801855c:	4642      	mov	r2, r8
 801855e:	9904      	ldr	r1, [sp, #16]
 8018560:	4620      	mov	r0, r4
 8018562:	f7ff f8d3 	bl	801770c <write_submessage_acknack.isra.0>
 8018566:	e779      	b.n	801845c <uxr_create_session+0x68>
 8018568:	4641      	mov	r1, r8
 801856a:	4630      	mov	r0, r6
 801856c:	f000 ff1c 	bl	80193a8 <uxr_get_input_best_effort_stream>
 8018570:	2800      	cmp	r0, #0
 8018572:	f43f af73 	beq.w	801845c <uxr_create_session+0x68>
 8018576:	4659      	mov	r1, fp
 8018578:	f007 fe20 	bl	80201bc <uxr_receive_best_effort_message>
 801857c:	2800      	cmp	r0, #0
 801857e:	f43f af6d 	beq.w	801845c <uxr_create_session+0x68>
 8018582:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8018586:	a91a      	add	r1, sp, #104	@ 0x68
 8018588:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801858a:	4620      	mov	r0, r4
 801858c:	f7ff fa42 	bl	8017a14 <read_submessage_list>
 8018590:	e764      	b.n	801845c <uxr_create_session+0x68>
 8018592:	4630      	mov	r0, r6
 8018594:	f000 fe5a 	bl	801924c <uxr_reset_stream_storage>
 8018598:	2001      	movs	r0, #1
 801859a:	b02b      	add	sp, #172	@ 0xac
 801859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185a0:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80185a4:	a91a      	add	r1, sp, #104	@ 0x68
 80185a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185a8:	4620      	mov	r0, r4
 80185aa:	f7ff fa33 	bl	8017a14 <read_submessage_list>
 80185ae:	e7be      	b.n	801852e <uxr_create_session+0x13a>

080185b0 <uxr_prepare_stream_to_write_submessage>:
 80185b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185b4:	b082      	sub	sp, #8
 80185b6:	4604      	mov	r4, r0
 80185b8:	4610      	mov	r0, r2
 80185ba:	4615      	mov	r5, r2
 80185bc:	461e      	mov	r6, r3
 80185be:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80185c2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80185c6:	f105 0904 	add.w	r9, r5, #4
 80185ca:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80185ce:	9101      	str	r1, [sp, #4]
 80185d0:	f000 ff56 	bl	8019480 <uxr_submessage_padding>
 80185d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80185d8:	4481      	add	r9, r0
 80185da:	2b01      	cmp	r3, #1
 80185dc:	d01d      	beq.n	801861a <uxr_prepare_stream_to_write_submessage+0x6a>
 80185de:	2b02      	cmp	r3, #2
 80185e0:	d116      	bne.n	8018610 <uxr_prepare_stream_to_write_submessage+0x60>
 80185e2:	f104 0008 	add.w	r0, r4, #8
 80185e6:	4651      	mov	r1, sl
 80185e8:	f000 fed2 	bl	8019390 <uxr_get_output_reliable_stream>
 80185ec:	4604      	mov	r4, r0
 80185ee:	b158      	cbz	r0, 8018608 <uxr_prepare_stream_to_write_submessage+0x58>
 80185f0:	4649      	mov	r1, r9
 80185f2:	4632      	mov	r2, r6
 80185f4:	f008 f8b2 	bl	802075c <uxr_prepare_reliable_buffer_to_write>
 80185f8:	4604      	mov	r4, r0
 80185fa:	b12c      	cbz	r4, 8018608 <uxr_prepare_stream_to_write_submessage+0x58>
 80185fc:	4643      	mov	r3, r8
 80185fe:	b2aa      	uxth	r2, r5
 8018600:	4639      	mov	r1, r7
 8018602:	4630      	mov	r0, r6
 8018604:	f000 fefc 	bl	8019400 <uxr_buffer_submessage_header>
 8018608:	4620      	mov	r0, r4
 801860a:	b002      	add	sp, #8
 801860c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018610:	2400      	movs	r4, #0
 8018612:	4620      	mov	r0, r4
 8018614:	b002      	add	sp, #8
 8018616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801861a:	f104 0008 	add.w	r0, r4, #8
 801861e:	4651      	mov	r1, sl
 8018620:	f000 feae 	bl	8019380 <uxr_get_output_best_effort_stream>
 8018624:	4604      	mov	r4, r0
 8018626:	2800      	cmp	r0, #0
 8018628:	d0ee      	beq.n	8018608 <uxr_prepare_stream_to_write_submessage+0x58>
 801862a:	4649      	mov	r1, r9
 801862c:	4632      	mov	r2, r6
 801862e:	f007 ffc1 	bl	80205b4 <uxr_prepare_best_effort_buffer_to_write>
 8018632:	4604      	mov	r4, r0
 8018634:	e7e1      	b.n	80185fa <uxr_prepare_stream_to_write_submessage+0x4a>
 8018636:	bf00      	nop

08018638 <uxr_init_session_info>:
 8018638:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801863c:	23ff      	movs	r3, #255	@ 0xff
 801863e:	7102      	strb	r2, [r0, #4]
 8018640:	f880 c001 	strb.w	ip, [r0, #1]
 8018644:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018648:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801864c:	7001      	strb	r1, [r0, #0]
 801864e:	f880 c002 	strb.w	ip, [r0, #2]
 8018652:	7143      	strb	r3, [r0, #5]
 8018654:	70c2      	strb	r2, [r0, #3]
 8018656:	b500      	push	{lr}
 8018658:	f04f 0e09 	mov.w	lr, #9
 801865c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018660:	f85d fb04 	ldr.w	pc, [sp], #4

08018664 <uxr_buffer_create_session>:
 8018664:	b530      	push	{r4, r5, lr}
 8018666:	2300      	movs	r3, #0
 8018668:	b089      	sub	sp, #36	@ 0x24
 801866a:	4d12      	ldr	r5, [pc, #72]	@ (80186b4 <uxr_buffer_create_session+0x50>)
 801866c:	460c      	mov	r4, r1
 801866e:	9307      	str	r3, [sp, #28]
 8018670:	4619      	mov	r1, r3
 8018672:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018676:	2201      	movs	r2, #1
 8018678:	9301      	str	r3, [sp, #4]
 801867a:	80c2      	strh	r2, [r0, #6]
 801867c:	f88d 2004 	strb.w	r2, [sp, #4]
 8018680:	682a      	ldr	r2, [r5, #0]
 8018682:	9303      	str	r3, [sp, #12]
 8018684:	9200      	str	r2, [sp, #0]
 8018686:	88aa      	ldrh	r2, [r5, #4]
 8018688:	9306      	str	r3, [sp, #24]
 801868a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801868e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8018692:	9202      	str	r2, [sp, #8]
 8018694:	7802      	ldrb	r2, [r0, #0]
 8018696:	4620      	mov	r0, r4
 8018698:	f88d 200c 	strb.w	r2, [sp, #12]
 801869c:	2210      	movs	r2, #16
 801869e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80186a2:	f000 fead 	bl	8019400 <uxr_buffer_submessage_header>
 80186a6:	4669      	mov	r1, sp
 80186a8:	4620      	mov	r0, r4
 80186aa:	f001 ff1f 	bl	801a4ec <uxr_serialize_CREATE_CLIENT_Payload>
 80186ae:	b009      	add	sp, #36	@ 0x24
 80186b0:	bd30      	pop	{r4, r5, pc}
 80186b2:	bf00      	nop
 80186b4:	08023444 	.word	0x08023444

080186b8 <uxr_buffer_delete_session>:
 80186b8:	4a0c      	ldr	r2, [pc, #48]	@ (80186ec <uxr_buffer_delete_session+0x34>)
 80186ba:	2302      	movs	r3, #2
 80186bc:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80186c0:	b510      	push	{r4, lr}
 80186c2:	460c      	mov	r4, r1
 80186c4:	b082      	sub	sp, #8
 80186c6:	8911      	ldrh	r1, [r2, #8]
 80186c8:	2204      	movs	r2, #4
 80186ca:	80c3      	strh	r3, [r0, #6]
 80186cc:	2300      	movs	r3, #0
 80186ce:	f8ad 1006 	strh.w	r1, [sp, #6]
 80186d2:	4620      	mov	r0, r4
 80186d4:	2103      	movs	r1, #3
 80186d6:	f8ad c004 	strh.w	ip, [sp, #4]
 80186da:	f000 fe91 	bl	8019400 <uxr_buffer_submessage_header>
 80186de:	a901      	add	r1, sp, #4
 80186e0:	4620      	mov	r0, r4
 80186e2:	f001 ffc1 	bl	801a668 <uxr_serialize_DELETE_Payload>
 80186e6:	b002      	add	sp, #8
 80186e8:	bd10      	pop	{r4, pc}
 80186ea:	bf00      	nop
 80186ec:	08023444 	.word	0x08023444

080186f0 <uxr_read_create_session_status>:
 80186f0:	b510      	push	{r4, lr}
 80186f2:	460b      	mov	r3, r1
 80186f4:	b088      	sub	sp, #32
 80186f6:	4604      	mov	r4, r0
 80186f8:	a901      	add	r1, sp, #4
 80186fa:	4618      	mov	r0, r3
 80186fc:	f001 ffc4 	bl	801a688 <uxr_deserialize_STATUS_AGENT_Payload>
 8018700:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018704:	7163      	strb	r3, [r4, #5]
 8018706:	b008      	add	sp, #32
 8018708:	bd10      	pop	{r4, pc}
 801870a:	bf00      	nop

0801870c <uxr_read_delete_session_status>:
 801870c:	b510      	push	{r4, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	4604      	mov	r4, r0
 8018712:	4608      	mov	r0, r1
 8018714:	a902      	add	r1, sp, #8
 8018716:	f001 ffe7 	bl	801a6e8 <uxr_deserialize_STATUS_Payload>
 801871a:	88e3      	ldrh	r3, [r4, #6]
 801871c:	2b02      	cmp	r3, #2
 801871e:	d001      	beq.n	8018724 <uxr_read_delete_session_status+0x18>
 8018720:	b004      	add	sp, #16
 8018722:	bd10      	pop	{r4, pc}
 8018724:	f10d 000a 	add.w	r0, sp, #10
 8018728:	f7fe fe72 	bl	8017410 <uxr_object_id_from_raw>
 801872c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018730:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8018734:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018738:	b29b      	uxth	r3, r3
 801873a:	2b02      	cmp	r3, #2
 801873c:	d1f0      	bne.n	8018720 <uxr_read_delete_session_status+0x14>
 801873e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018742:	7163      	strb	r3, [r4, #5]
 8018744:	e7ec      	b.n	8018720 <uxr_read_delete_session_status+0x14>
 8018746:	bf00      	nop

08018748 <uxr_stamp_create_session_header>:
 8018748:	b510      	push	{r4, lr}
 801874a:	2208      	movs	r2, #8
 801874c:	b08a      	sub	sp, #40	@ 0x28
 801874e:	4604      	mov	r4, r0
 8018750:	eb0d 0002 	add.w	r0, sp, r2
 8018754:	f7fb fd18 	bl	8014188 <ucdr_init_buffer>
 8018758:	f814 1b01 	ldrb.w	r1, [r4], #1
 801875c:	2300      	movs	r3, #0
 801875e:	a802      	add	r0, sp, #8
 8018760:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8018764:	9400      	str	r4, [sp, #0]
 8018766:	461a      	mov	r2, r3
 8018768:	f001 f846 	bl	80197f8 <uxr_serialize_message_header>
 801876c:	b00a      	add	sp, #40	@ 0x28
 801876e:	bd10      	pop	{r4, pc}

08018770 <uxr_stamp_session_header>:
 8018770:	b530      	push	{r4, r5, lr}
 8018772:	b08d      	sub	sp, #52	@ 0x34
 8018774:	4604      	mov	r4, r0
 8018776:	460d      	mov	r5, r1
 8018778:	4619      	mov	r1, r3
 801877a:	a804      	add	r0, sp, #16
 801877c:	9203      	str	r2, [sp, #12]
 801877e:	2208      	movs	r2, #8
 8018780:	f7fb fd02 	bl	8014188 <ucdr_init_buffer>
 8018784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018788:	9b03      	ldr	r3, [sp, #12]
 801878a:	462a      	mov	r2, r5
 801878c:	a804      	add	r0, sp, #16
 801878e:	9400      	str	r4, [sp, #0]
 8018790:	f001 f832 	bl	80197f8 <uxr_serialize_message_header>
 8018794:	b00d      	add	sp, #52	@ 0x34
 8018796:	bd30      	pop	{r4, r5, pc}

08018798 <uxr_read_session_header>:
 8018798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801879c:	4607      	mov	r7, r0
 801879e:	b084      	sub	sp, #16
 80187a0:	4608      	mov	r0, r1
 80187a2:	460c      	mov	r4, r1
 80187a4:	4615      	mov	r5, r2
 80187a6:	461e      	mov	r6, r3
 80187a8:	f7fb fd20 	bl	80141ec <ucdr_buffer_remaining>
 80187ac:	2808      	cmp	r0, #8
 80187ae:	d803      	bhi.n	80187b8 <uxr_read_session_header+0x20>
 80187b0:	2000      	movs	r0, #0
 80187b2:	b004      	add	sp, #16
 80187b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187b8:	f10d 080c 	add.w	r8, sp, #12
 80187bc:	4633      	mov	r3, r6
 80187be:	462a      	mov	r2, r5
 80187c0:	4620      	mov	r0, r4
 80187c2:	f10d 010b 	add.w	r1, sp, #11
 80187c6:	f8cd 8000 	str.w	r8, [sp]
 80187ca:	f001 f833 	bl	8019834 <uxr_deserialize_message_header>
 80187ce:	783a      	ldrb	r2, [r7, #0]
 80187d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80187d4:	4293      	cmp	r3, r2
 80187d6:	d1eb      	bne.n	80187b0 <uxr_read_session_header+0x18>
 80187d8:	061b      	lsls	r3, r3, #24
 80187da:	d41b      	bmi.n	8018814 <uxr_read_session_header+0x7c>
 80187dc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80187e0:	787b      	ldrb	r3, [r7, #1]
 80187e2:	429a      	cmp	r2, r3
 80187e4:	d003      	beq.n	80187ee <uxr_read_session_header+0x56>
 80187e6:	2001      	movs	r0, #1
 80187e8:	f080 0001 	eor.w	r0, r0, #1
 80187ec:	e7e1      	b.n	80187b2 <uxr_read_session_header+0x1a>
 80187ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80187f2:	1cb8      	adds	r0, r7, #2
 80187f4:	78bb      	ldrb	r3, [r7, #2]
 80187f6:	429a      	cmp	r2, r3
 80187f8:	d1f5      	bne.n	80187e6 <uxr_read_session_header+0x4e>
 80187fa:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80187fe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8018802:	429a      	cmp	r2, r3
 8018804:	d1ef      	bne.n	80187e6 <uxr_read_session_header+0x4e>
 8018806:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801880a:	7843      	ldrb	r3, [r0, #1]
 801880c:	429a      	cmp	r2, r3
 801880e:	d1ea      	bne.n	80187e6 <uxr_read_session_header+0x4e>
 8018810:	2000      	movs	r0, #0
 8018812:	e7e9      	b.n	80187e8 <uxr_read_session_header+0x50>
 8018814:	2001      	movs	r0, #1
 8018816:	e7cc      	b.n	80187b2 <uxr_read_session_header+0x1a>

08018818 <uxr_session_header_offset>:
 8018818:	f990 3000 	ldrsb.w	r3, [r0]
 801881c:	2b00      	cmp	r3, #0
 801881e:	bfac      	ite	ge
 8018820:	2008      	movge	r0, #8
 8018822:	2004      	movlt	r0, #4
 8018824:	4770      	bx	lr
 8018826:	bf00      	nop

08018828 <uxr_init_base_object_request>:
 8018828:	b510      	push	{r4, lr}
 801882a:	b082      	sub	sp, #8
 801882c:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8018830:	9101      	str	r1, [sp, #4]
 8018832:	88c3      	ldrh	r3, [r0, #6]
 8018834:	f1a3 010a 	sub.w	r1, r3, #10
 8018838:	b289      	uxth	r1, r1
 801883a:	42a1      	cmp	r1, r4
 801883c:	d80f      	bhi.n	801885e <uxr_init_base_object_request+0x36>
 801883e:	3301      	adds	r3, #1
 8018840:	b29c      	uxth	r4, r3
 8018842:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8018846:	b2db      	uxtb	r3, r3
 8018848:	80c4      	strh	r4, [r0, #6]
 801884a:	1c91      	adds	r1, r2, #2
 801884c:	9801      	ldr	r0, [sp, #4]
 801884e:	f882 c000 	strb.w	ip, [r2]
 8018852:	7053      	strb	r3, [r2, #1]
 8018854:	f7fe fdf0 	bl	8017438 <uxr_object_id_to_raw>
 8018858:	4620      	mov	r0, r4
 801885a:	b002      	add	sp, #8
 801885c:	bd10      	pop	{r4, pc}
 801885e:	230a      	movs	r3, #10
 8018860:	f04f 0c00 	mov.w	ip, #0
 8018864:	461c      	mov	r4, r3
 8018866:	e7ef      	b.n	8018848 <uxr_init_base_object_request+0x20>

08018868 <uxr_parse_base_object_request>:
 8018868:	b570      	push	{r4, r5, r6, lr}
 801886a:	4604      	mov	r4, r0
 801886c:	3002      	adds	r0, #2
 801886e:	460d      	mov	r5, r1
 8018870:	4616      	mov	r6, r2
 8018872:	f7fe fdcd 	bl	8017410 <uxr_object_id_from_raw>
 8018876:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801887a:	8028      	strh	r0, [r5, #0]
 801887c:	806b      	strh	r3, [r5, #2]
 801887e:	7822      	ldrb	r2, [r4, #0]
 8018880:	7863      	ldrb	r3, [r4, #1]
 8018882:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018886:	8033      	strh	r3, [r6, #0]
 8018888:	bd70      	pop	{r4, r5, r6, pc}
 801888a:	bf00      	nop

0801888c <uxr_init_framing_io>:
 801888c:	2300      	movs	r3, #0
 801888e:	7041      	strb	r1, [r0, #1]
 8018890:	7003      	strb	r3, [r0, #0]
 8018892:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018894:	4770      	bx	lr
 8018896:	bf00      	nop

08018898 <uxr_write_framed_msg>:
 8018898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801889c:	4617      	mov	r7, r2
 801889e:	7842      	ldrb	r2, [r0, #1]
 80188a0:	460e      	mov	r6, r1
 80188a2:	b083      	sub	sp, #12
 80188a4:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80188a8:	469b      	mov	fp, r3
 80188aa:	237e      	movs	r3, #126	@ 0x7e
 80188ac:	4604      	mov	r4, r0
 80188ae:	2901      	cmp	r1, #1
 80188b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80188b4:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80188b8:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80188bc:	f240 8115 	bls.w	8018aea <uxr_write_framed_msg+0x252>
 80188c0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80188c4:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80188c8:	2202      	movs	r2, #2
 80188ca:	2901      	cmp	r1, #1
 80188cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80188d0:	d952      	bls.n	8018978 <uxr_write_framed_msg+0xe0>
 80188d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80188d4:	2103      	movs	r1, #3
 80188d6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80188da:	b2dd      	uxtb	r5, r3
 80188dc:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80188e0:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80188e4:	2a01      	cmp	r2, #1
 80188e6:	d95c      	bls.n	80189a2 <uxr_write_framed_msg+0x10a>
 80188e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80188ea:	1862      	adds	r2, r4, r1
 80188ec:	3101      	adds	r1, #1
 80188ee:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80188f2:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 80188f6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80188fa:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80188fe:	2a01      	cmp	r2, #1
 8018900:	d961      	bls.n	80189c6 <uxr_write_framed_msg+0x12e>
 8018902:	1c4a      	adds	r2, r1, #1
 8018904:	4421      	add	r1, r4
 8018906:	b2d2      	uxtb	r2, r2
 8018908:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801890c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018910:	2b00      	cmp	r3, #0
 8018912:	d06a      	beq.n	80189ea <uxr_write_framed_msg+0x152>
 8018914:	f04f 0800 	mov.w	r8, #0
 8018918:	46c1      	mov	r9, r8
 801891a:	e016      	b.n	801894a <uxr_write_framed_msg+0xb2>
 801891c:	2a29      	cmp	r2, #41	@ 0x29
 801891e:	d868      	bhi.n	80189f2 <uxr_write_framed_msg+0x15a>
 8018920:	18a0      	adds	r0, r4, r2
 8018922:	3201      	adds	r2, #1
 8018924:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018928:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801892c:	ea88 0101 	eor.w	r1, r8, r1
 8018930:	4b7d      	ldr	r3, [pc, #500]	@ (8018b28 <uxr_write_framed_msg+0x290>)
 8018932:	f109 0901 	add.w	r9, r9, #1
 8018936:	b2c9      	uxtb	r1, r1
 8018938:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801893c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8018940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018942:	454b      	cmp	r3, r9
 8018944:	d969      	bls.n	8018a1a <uxr_write_framed_msg+0x182>
 8018946:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801894a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801894e:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018952:	2801      	cmp	r0, #1
 8018954:	d8e2      	bhi.n	801891c <uxr_write_framed_msg+0x84>
 8018956:	1c50      	adds	r0, r2, #1
 8018958:	b2c0      	uxtb	r0, r0
 801895a:	2829      	cmp	r0, #41	@ 0x29
 801895c:	d849      	bhi.n	80189f2 <uxr_write_framed_msg+0x15a>
 801895e:	18a0      	adds	r0, r4, r2
 8018960:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8018964:	3202      	adds	r2, #2
 8018966:	f081 0520 	eor.w	r5, r1, #32
 801896a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801896e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8018972:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018976:	e7d9      	b.n	801892c <uxr_write_framed_msg+0x94>
 8018978:	2104      	movs	r1, #4
 801897a:	f04f 0c03 	mov.w	ip, #3
 801897e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018980:	4422      	add	r2, r4
 8018982:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8018986:	44a4      	add	ip, r4
 8018988:	b2dd      	uxtb	r5, r3
 801898a:	f080 0020 	eor.w	r0, r0, #32
 801898e:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8018992:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018996:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801899a:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801899e:	2a01      	cmp	r2, #1
 80189a0:	d8a2      	bhi.n	80188e8 <uxr_write_framed_msg+0x50>
 80189a2:	1862      	adds	r2, r4, r1
 80189a4:	207d      	movs	r0, #125	@ 0x7d
 80189a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189a8:	f085 0520 	eor.w	r5, r5, #32
 80189ac:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80189b0:	3102      	adds	r1, #2
 80189b2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80189b6:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80189ba:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80189be:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80189c2:	2a01      	cmp	r2, #1
 80189c4:	d89d      	bhi.n	8018902 <uxr_write_framed_msg+0x6a>
 80189c6:	1c4d      	adds	r5, r1, #1
 80189c8:	1c8a      	adds	r2, r1, #2
 80189ca:	f080 0020 	eor.w	r0, r0, #32
 80189ce:	4421      	add	r1, r4
 80189d0:	fa54 f585 	uxtab	r5, r4, r5
 80189d4:	b2d2      	uxtb	r2, r2
 80189d6:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80189da:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80189de:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80189e2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d194      	bne.n	8018914 <uxr_write_framed_msg+0x7c>
 80189ea:	4619      	mov	r1, r3
 80189ec:	f8ad 3004 	strh.w	r3, [sp, #4]
 80189f0:	e019      	b.n	8018a26 <uxr_write_framed_msg+0x18e>
 80189f2:	2500      	movs	r5, #0
 80189f4:	e000      	b.n	80189f8 <uxr_write_framed_msg+0x160>
 80189f6:	b160      	cbz	r0, 8018a12 <uxr_write_framed_msg+0x17a>
 80189f8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80189fc:	1b52      	subs	r2, r2, r5
 80189fe:	4653      	mov	r3, sl
 8018a00:	4638      	mov	r0, r7
 8018a02:	4421      	add	r1, r4
 8018a04:	47b0      	blx	r6
 8018a06:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a0a:	4405      	add	r5, r0
 8018a0c:	4295      	cmp	r5, r2
 8018a0e:	d3f2      	bcc.n	80189f6 <uxr_write_framed_msg+0x15e>
 8018a10:	d066      	beq.n	8018ae0 <uxr_write_framed_msg+0x248>
 8018a12:	2000      	movs	r0, #0
 8018a14:	b003      	add	sp, #12
 8018a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a1a:	fa5f f188 	uxtb.w	r1, r8
 8018a1e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a22:	f8ad 8004 	strh.w	r8, [sp, #4]
 8018a26:	f04f 0900 	mov.w	r9, #0
 8018a2a:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8018a2e:	46c8      	mov	r8, r9
 8018a30:	e013      	b.n	8018a5a <uxr_write_framed_msg+0x1c2>
 8018a32:	2a29      	cmp	r2, #41	@ 0x29
 8018a34:	d824      	bhi.n	8018a80 <uxr_write_framed_msg+0x1e8>
 8018a36:	18a3      	adds	r3, r4, r2
 8018a38:	3201      	adds	r2, #1
 8018a3a:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8018a3e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a42:	f109 0901 	add.w	r9, r9, #1
 8018a46:	f1b9 0f02 	cmp.w	r9, #2
 8018a4a:	d02d      	beq.n	8018aa8 <uxr_write_framed_msg+0x210>
 8018a4c:	f109 0308 	add.w	r3, r9, #8
 8018a50:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a54:	446b      	add	r3, sp
 8018a56:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8018a5a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8018a5e:	2b01      	cmp	r3, #1
 8018a60:	d8e7      	bhi.n	8018a32 <uxr_write_framed_msg+0x19a>
 8018a62:	1c53      	adds	r3, r2, #1
 8018a64:	b2db      	uxtb	r3, r3
 8018a66:	2b29      	cmp	r3, #41	@ 0x29
 8018a68:	d80a      	bhi.n	8018a80 <uxr_write_framed_msg+0x1e8>
 8018a6a:	18a3      	adds	r3, r4, r2
 8018a6c:	f081 0120 	eor.w	r1, r1, #32
 8018a70:	3202      	adds	r2, #2
 8018a72:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8018a76:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8018a7a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018a7e:	e7e0      	b.n	8018a42 <uxr_write_framed_msg+0x1aa>
 8018a80:	2500      	movs	r5, #0
 8018a82:	e001      	b.n	8018a88 <uxr_write_framed_msg+0x1f0>
 8018a84:	2800      	cmp	r0, #0
 8018a86:	d0c4      	beq.n	8018a12 <uxr_write_framed_msg+0x17a>
 8018a88:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018a8c:	1b52      	subs	r2, r2, r5
 8018a8e:	4653      	mov	r3, sl
 8018a90:	4638      	mov	r0, r7
 8018a92:	4421      	add	r1, r4
 8018a94:	47b0      	blx	r6
 8018a96:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018a9a:	4405      	add	r5, r0
 8018a9c:	4295      	cmp	r5, r2
 8018a9e:	d3f1      	bcc.n	8018a84 <uxr_write_framed_msg+0x1ec>
 8018aa0:	d1b7      	bne.n	8018a12 <uxr_write_framed_msg+0x17a>
 8018aa2:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8018aa6:	e7d1      	b.n	8018a4c <uxr_write_framed_msg+0x1b4>
 8018aa8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018aac:	b19a      	cbz	r2, 8018ad6 <uxr_write_framed_msg+0x23e>
 8018aae:	2500      	movs	r5, #0
 8018ab0:	e001      	b.n	8018ab6 <uxr_write_framed_msg+0x21e>
 8018ab2:	2800      	cmp	r0, #0
 8018ab4:	d0ad      	beq.n	8018a12 <uxr_write_framed_msg+0x17a>
 8018ab6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018aba:	1b52      	subs	r2, r2, r5
 8018abc:	4653      	mov	r3, sl
 8018abe:	4638      	mov	r0, r7
 8018ac0:	4421      	add	r1, r4
 8018ac2:	47b0      	blx	r6
 8018ac4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018ac8:	4405      	add	r5, r0
 8018aca:	4295      	cmp	r5, r2
 8018acc:	d3f1      	bcc.n	8018ab2 <uxr_write_framed_msg+0x21a>
 8018ace:	d1a0      	bne.n	8018a12 <uxr_write_framed_msg+0x17a>
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018ad6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018ad8:	b298      	uxth	r0, r3
 8018ada:	b003      	add	sp, #12
 8018adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ae0:	f04f 0300 	mov.w	r3, #0
 8018ae4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018ae8:	e72a      	b.n	8018940 <uxr_write_framed_msg+0xa8>
 8018aea:	217d      	movs	r1, #125	@ 0x7d
 8018aec:	f082 0220 	eor.w	r2, r2, #32
 8018af0:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8018af4:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8018af8:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8018afc:	2203      	movs	r2, #3
 8018afe:	2901      	cmp	r1, #1
 8018b00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018b04:	d803      	bhi.n	8018b0e <uxr_write_framed_msg+0x276>
 8018b06:	2105      	movs	r1, #5
 8018b08:	f04f 0c04 	mov.w	ip, #4
 8018b0c:	e737      	b.n	801897e <uxr_write_framed_msg+0xe6>
 8018b0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b10:	2104      	movs	r1, #4
 8018b12:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8018b16:	b2dd      	uxtb	r5, r3
 8018b18:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018b1c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018b20:	2a01      	cmp	r2, #1
 8018b22:	f63f aee1 	bhi.w	80188e8 <uxr_write_framed_msg+0x50>
 8018b26:	e73c      	b.n	80189a2 <uxr_write_framed_msg+0x10a>
 8018b28:	08025134 	.word	0x08025134

08018b2c <uxr_framing_read_transport>:
 8018b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b30:	4604      	mov	r4, r0
 8018b32:	b085      	sub	sp, #20
 8018b34:	4692      	mov	sl, r2
 8018b36:	4689      	mov	r9, r1
 8018b38:	461d      	mov	r5, r3
 8018b3a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018b3c:	f000 fca6 	bl	801948c <uxr_millis>
 8018b40:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018b44:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8018b48:	4680      	mov	r8, r0
 8018b4a:	42ba      	cmp	r2, r7
 8018b4c:	d05f      	beq.n	8018c0e <uxr_framing_read_transport+0xe2>
 8018b4e:	d817      	bhi.n	8018b80 <uxr_framing_read_transport+0x54>
 8018b50:	3f01      	subs	r7, #1
 8018b52:	1aba      	subs	r2, r7, r2
 8018b54:	2700      	movs	r7, #0
 8018b56:	b2d2      	uxtb	r2, r2
 8018b58:	42b2      	cmp	r2, r6
 8018b5a:	d81a      	bhi.n	8018b92 <uxr_framing_read_transport+0x66>
 8018b5c:	19d3      	adds	r3, r2, r7
 8018b5e:	42b3      	cmp	r3, r6
 8018b60:	d852      	bhi.n	8018c08 <uxr_framing_read_transport+0xdc>
 8018b62:	b9d2      	cbnz	r2, 8018b9a <uxr_framing_read_transport+0x6e>
 8018b64:	2600      	movs	r6, #0
 8018b66:	f000 fc91 	bl	801948c <uxr_millis>
 8018b6a:	682b      	ldr	r3, [r5, #0]
 8018b6c:	eba0 0008 	sub.w	r0, r0, r8
 8018b70:	1a1b      	subs	r3, r3, r0
 8018b72:	4630      	mov	r0, r6
 8018b74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b78:	602b      	str	r3, [r5, #0]
 8018b7a:	b005      	add	sp, #20
 8018b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b80:	2f00      	cmp	r7, #0
 8018b82:	d060      	beq.n	8018c46 <uxr_framing_read_transport+0x11a>
 8018b84:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8018b88:	3f01      	subs	r7, #1
 8018b8a:	b2d2      	uxtb	r2, r2
 8018b8c:	b2ff      	uxtb	r7, r7
 8018b8e:	42b2      	cmp	r2, r6
 8018b90:	d9e4      	bls.n	8018b5c <uxr_framing_read_transport+0x30>
 8018b92:	b2f2      	uxtb	r2, r6
 8018b94:	2700      	movs	r7, #0
 8018b96:	2a00      	cmp	r2, #0
 8018b98:	d0e4      	beq.n	8018b64 <uxr_framing_read_transport+0x38>
 8018b9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b9c:	4650      	mov	r0, sl
 8018b9e:	9203      	str	r2, [sp, #12]
 8018ba0:	9300      	str	r3, [sp, #0]
 8018ba2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018ba6:	682b      	ldr	r3, [r5, #0]
 8018ba8:	3102      	adds	r1, #2
 8018baa:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8018c50 <uxr_framing_read_transport+0x124>
 8018bae:	4421      	add	r1, r4
 8018bb0:	47c8      	blx	r9
 8018bb2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018bb6:	4606      	mov	r6, r0
 8018bb8:	4403      	add	r3, r0
 8018bba:	0859      	lsrs	r1, r3, #1
 8018bbc:	fbab 2101 	umull	r2, r1, fp, r1
 8018bc0:	222a      	movs	r2, #42	@ 0x2a
 8018bc2:	0889      	lsrs	r1, r1, #2
 8018bc4:	fb02 3111 	mls	r1, r2, r1, r3
 8018bc8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	d0c9      	beq.n	8018b64 <uxr_framing_read_transport+0x38>
 8018bd0:	9a03      	ldr	r2, [sp, #12]
 8018bd2:	4290      	cmp	r0, r2
 8018bd4:	d1c7      	bne.n	8018b66 <uxr_framing_read_transport+0x3a>
 8018bd6:	2f00      	cmp	r7, #0
 8018bd8:	d0c5      	beq.n	8018b66 <uxr_framing_read_transport+0x3a>
 8018bda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bdc:	3102      	adds	r1, #2
 8018bde:	463a      	mov	r2, r7
 8018be0:	4650      	mov	r0, sl
 8018be2:	4421      	add	r1, r4
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	2300      	movs	r3, #0
 8018be8:	47c8      	blx	r9
 8018bea:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8018bee:	4406      	add	r6, r0
 8018bf0:	1813      	adds	r3, r2, r0
 8018bf2:	085a      	lsrs	r2, r3, #1
 8018bf4:	fbab 1b02 	umull	r1, fp, fp, r2
 8018bf8:	222a      	movs	r2, #42	@ 0x2a
 8018bfa:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8018bfe:	fb02 331b 	mls	r3, r2, fp, r3
 8018c02:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018c06:	e7ae      	b.n	8018b66 <uxr_framing_read_transport+0x3a>
 8018c08:	1ab6      	subs	r6, r6, r2
 8018c0a:	b2f7      	uxtb	r7, r6
 8018c0c:	e7a9      	b.n	8018b62 <uxr_framing_read_transport+0x36>
 8018c0e:	2300      	movs	r3, #0
 8018c10:	2e28      	cmp	r6, #40	@ 0x28
 8018c12:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8018c14:	d9bd      	bls.n	8018b92 <uxr_framing_read_transport+0x66>
 8018c16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c18:	2229      	movs	r2, #41	@ 0x29
 8018c1a:	1ca1      	adds	r1, r4, #2
 8018c1c:	4650      	mov	r0, sl
 8018c1e:	9300      	str	r3, [sp, #0]
 8018c20:	682b      	ldr	r3, [r5, #0]
 8018c22:	47c8      	blx	r9
 8018c24:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018c28:	4606      	mov	r6, r0
 8018c2a:	212a      	movs	r1, #42	@ 0x2a
 8018c2c:	4403      	add	r3, r0
 8018c2e:	4808      	ldr	r0, [pc, #32]	@ (8018c50 <uxr_framing_read_transport+0x124>)
 8018c30:	085a      	lsrs	r2, r3, #1
 8018c32:	fba0 0202 	umull	r0, r2, r0, r2
 8018c36:	0892      	lsrs	r2, r2, #2
 8018c38:	fb01 3312 	mls	r3, r1, r2, r3
 8018c3c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018c40:	2e00      	cmp	r6, #0
 8018c42:	d08f      	beq.n	8018b64 <uxr_framing_read_transport+0x38>
 8018c44:	e78f      	b.n	8018b66 <uxr_framing_read_transport+0x3a>
 8018c46:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8018c4a:	b2d2      	uxtb	r2, r2
 8018c4c:	e784      	b.n	8018b58 <uxr_framing_read_transport+0x2c>
 8018c4e:	bf00      	nop
 8018c50:	30c30c31 	.word	0x30c30c31

08018c54 <uxr_read_framed_msg>:
 8018c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c58:	461e      	mov	r6, r3
 8018c5a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8018c5e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8018c62:	b083      	sub	sp, #12
 8018c64:	4604      	mov	r4, r0
 8018c66:	4688      	mov	r8, r1
 8018c68:	429d      	cmp	r5, r3
 8018c6a:	4691      	mov	r9, r2
 8018c6c:	f000 818c 	beq.w	8018f88 <uxr_read_framed_msg+0x334>
 8018c70:	7823      	ldrb	r3, [r4, #0]
 8018c72:	4dc3      	ldr	r5, [pc, #780]	@ (8018f80 <uxr_read_framed_msg+0x32c>)
 8018c74:	4fc3      	ldr	r7, [pc, #780]	@ (8018f84 <uxr_read_framed_msg+0x330>)
 8018c76:	2b07      	cmp	r3, #7
 8018c78:	d8fd      	bhi.n	8018c76 <uxr_read_framed_msg+0x22>
 8018c7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018c7e:	011c      	.short	0x011c
 8018c80:	00d900fb 	.word	0x00d900fb
 8018c84:	008f00ba 	.word	0x008f00ba
 8018c88:	00320051 	.word	0x00320051
 8018c8c:	0008      	.short	0x0008
 8018c8e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018c92:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018c96:	4299      	cmp	r1, r3
 8018c98:	f000 814d 	beq.w	8018f36 <uxr_read_framed_msg+0x2e2>
 8018c9c:	18e2      	adds	r2, r4, r3
 8018c9e:	7892      	ldrb	r2, [r2, #2]
 8018ca0:	2a7d      	cmp	r2, #125	@ 0x7d
 8018ca2:	f000 81b8 	beq.w	8019016 <uxr_read_framed_msg+0x3c2>
 8018ca6:	3301      	adds	r3, #1
 8018ca8:	212a      	movs	r1, #42	@ 0x2a
 8018caa:	2a7e      	cmp	r2, #126	@ 0x7e
 8018cac:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018cb0:	fba5 c000 	umull	ip, r0, r5, r0
 8018cb4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018cb8:	fb01 3310 	mls	r3, r1, r0, r3
 8018cbc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018cc0:	f000 8257 	beq.w	8019172 <uxr_read_framed_msg+0x51e>
 8018cc4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018cc6:	2000      	movs	r0, #0
 8018cc8:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8018cca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018cce:	7020      	strb	r0, [r4, #0]
 8018cd0:	b29b      	uxth	r3, r3
 8018cd2:	4299      	cmp	r1, r3
 8018cd4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018cd6:	f000 8178 	beq.w	8018fca <uxr_read_framed_msg+0x376>
 8018cda:	2000      	movs	r0, #0
 8018cdc:	b003      	add	sp, #12
 8018cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ce2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018ce6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018cea:	4298      	cmp	r0, r3
 8018cec:	f000 8132 	beq.w	8018f54 <uxr_read_framed_msg+0x300>
 8018cf0:	18e2      	adds	r2, r4, r3
 8018cf2:	7891      	ldrb	r1, [r2, #2]
 8018cf4:	297d      	cmp	r1, #125	@ 0x7d
 8018cf6:	f000 8170 	beq.w	8018fda <uxr_read_framed_msg+0x386>
 8018cfa:	3301      	adds	r3, #1
 8018cfc:	202a      	movs	r0, #42	@ 0x2a
 8018cfe:	297e      	cmp	r1, #126	@ 0x7e
 8018d00:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018d04:	fba5 c202 	umull	ip, r2, r5, r2
 8018d08:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018d0c:	fb00 3312 	mls	r3, r0, r2, r3
 8018d10:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018d14:	f000 821d 	beq.w	8019152 <uxr_read_framed_msg+0x4fe>
 8018d18:	2307      	movs	r3, #7
 8018d1a:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8018d1c:	7023      	strb	r3, [r4, #0]
 8018d1e:	e7aa      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018d20:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018d22:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018d26:	459e      	cmp	lr, r3
 8018d28:	d827      	bhi.n	8018d7a <uxr_read_framed_msg+0x126>
 8018d2a:	e032      	b.n	8018d92 <uxr_read_framed_msg+0x13e>
 8018d2c:	fba5 b101 	umull	fp, r1, r5, r1
 8018d30:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018d34:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018d38:	0889      	lsrs	r1, r1, #2
 8018d3a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8018d3e:	fb0b 0111 	mls	r1, fp, r1, r0
 8018d42:	f000 80d4 	beq.w	8018eee <uxr_read_framed_msg+0x29a>
 8018d46:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018d4a:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8018d4e:	f000 80cb 	beq.w	8018ee8 <uxr_read_framed_msg+0x294>
 8018d52:	f806 c003 	strb.w	ip, [r6, r3]
 8018d56:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8018d58:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018d5a:	ea80 010c 	eor.w	r1, r0, ip
 8018d5e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8018d62:	3301      	adds	r3, #1
 8018d64:	b2c9      	uxtb	r1, r1
 8018d66:	b29b      	uxth	r3, r3
 8018d68:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8018d6c:	4573      	cmp	r3, lr
 8018d6e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8018d70:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8018d74:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8018d76:	f080 811d 	bcs.w	8018fb4 <uxr_read_framed_msg+0x360>
 8018d7a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018d7e:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8018d82:	1c50      	adds	r0, r2, #1
 8018d84:	eb04 0c02 	add.w	ip, r4, r2
 8018d88:	4592      	cmp	sl, r2
 8018d8a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8018d8e:	d1cd      	bne.n	8018d2c <uxr_read_framed_msg+0xd8>
 8018d90:	459e      	cmp	lr, r3
 8018d92:	f040 8114 	bne.w	8018fbe <uxr_read_framed_msg+0x36a>
 8018d96:	2306      	movs	r3, #6
 8018d98:	7023      	strb	r3, [r4, #0]
 8018d9a:	e76c      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018d9c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018da0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018da4:	4298      	cmp	r0, r3
 8018da6:	f000 80c6 	beq.w	8018f36 <uxr_read_framed_msg+0x2e2>
 8018daa:	18e2      	adds	r2, r4, r3
 8018dac:	7891      	ldrb	r1, [r2, #2]
 8018dae:	297d      	cmp	r1, #125	@ 0x7d
 8018db0:	f000 8193 	beq.w	80190da <uxr_read_framed_msg+0x486>
 8018db4:	3301      	adds	r3, #1
 8018db6:	202a      	movs	r0, #42	@ 0x2a
 8018db8:	297e      	cmp	r1, #126	@ 0x7e
 8018dba:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018dbe:	fba5 c202 	umull	ip, r2, r5, r2
 8018dc2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018dc6:	fb00 3312 	mls	r3, r0, r2, r3
 8018dca:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018dce:	f000 81d0 	beq.w	8019172 <uxr_read_framed_msg+0x51e>
 8018dd2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8018dd4:	2000      	movs	r0, #0
 8018dd6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018dda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018ddc:	8660      	strh	r0, [r4, #50]	@ 0x32
 8018dde:	b29b      	uxth	r3, r3
 8018de0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018de2:	428b      	cmp	r3, r1
 8018de4:	8623      	strh	r3, [r4, #48]	@ 0x30
 8018de6:	f240 80e2 	bls.w	8018fae <uxr_read_framed_msg+0x35a>
 8018dea:	7020      	strb	r0, [r4, #0]
 8018dec:	b003      	add	sp, #12
 8018dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018df2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018df6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018dfa:	4298      	cmp	r0, r3
 8018dfc:	f000 80aa 	beq.w	8018f54 <uxr_read_framed_msg+0x300>
 8018e00:	18e2      	adds	r2, r4, r3
 8018e02:	7891      	ldrb	r1, [r2, #2]
 8018e04:	297d      	cmp	r1, #125	@ 0x7d
 8018e06:	f000 8186 	beq.w	8019116 <uxr_read_framed_msg+0x4c2>
 8018e0a:	3301      	adds	r3, #1
 8018e0c:	202a      	movs	r0, #42	@ 0x2a
 8018e0e:	297e      	cmp	r1, #126	@ 0x7e
 8018e10:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018e14:	fba5 c202 	umull	ip, r2, r5, r2
 8018e18:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018e1c:	fb00 3312 	mls	r3, r0, r2, r3
 8018e20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018e24:	f000 8195 	beq.w	8019152 <uxr_read_framed_msg+0x4fe>
 8018e28:	2304      	movs	r3, #4
 8018e2a:	8621      	strh	r1, [r4, #48]	@ 0x30
 8018e2c:	7023      	strb	r3, [r4, #0]
 8018e2e:	e722      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018e30:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018e34:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018e38:	4290      	cmp	r0, r2
 8018e3a:	f000 80b4 	beq.w	8018fa6 <uxr_read_framed_msg+0x352>
 8018e3e:	18a3      	adds	r3, r4, r2
 8018e40:	7899      	ldrb	r1, [r3, #2]
 8018e42:	297d      	cmp	r1, #125	@ 0x7d
 8018e44:	f000 8107 	beq.w	8019056 <uxr_read_framed_msg+0x402>
 8018e48:	3201      	adds	r2, #1
 8018e4a:	232a      	movs	r3, #42	@ 0x2a
 8018e4c:	297e      	cmp	r1, #126	@ 0x7e
 8018e4e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8018e52:	fba5 c000 	umull	ip, r0, r5, r0
 8018e56:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8018e5a:	fb03 2210 	mls	r2, r3, r0, r2
 8018e5e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018e62:	f000 818a 	beq.w	801917a <uxr_read_framed_msg+0x526>
 8018e66:	7863      	ldrb	r3, [r4, #1]
 8018e68:	428b      	cmp	r3, r1
 8018e6a:	bf0c      	ite	eq
 8018e6c:	2303      	moveq	r3, #3
 8018e6e:	2300      	movne	r3, #0
 8018e70:	7023      	strb	r3, [r4, #0]
 8018e72:	e700      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018e74:	2300      	movs	r3, #0
 8018e76:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018e7a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8018e7e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018e82:	4299      	cmp	r1, r3
 8018e84:	d06a      	beq.n	8018f5c <uxr_read_framed_msg+0x308>
 8018e86:	18e2      	adds	r2, r4, r3
 8018e88:	7890      	ldrb	r0, [r2, #2]
 8018e8a:	287d      	cmp	r0, #125	@ 0x7d
 8018e8c:	f000 8100 	beq.w	8019090 <uxr_read_framed_msg+0x43c>
 8018e90:	3301      	adds	r3, #1
 8018e92:	212a      	movs	r1, #42	@ 0x2a
 8018e94:	287e      	cmp	r0, #126	@ 0x7e
 8018e96:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8018e9a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8018e9e:	fba5 c202 	umull	ip, r2, r5, r2
 8018ea2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8018ea6:	fb01 3312 	mls	r3, r1, r2, r3
 8018eaa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018eae:	d055      	beq.n	8018f5c <uxr_read_framed_msg+0x308>
 8018eb0:	2302      	movs	r3, #2
 8018eb2:	7023      	strb	r3, [r4, #0]
 8018eb4:	e6df      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018eb6:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8018eba:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018ebe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018ec2:	1c5a      	adds	r2, r3, #1
 8018ec4:	459c      	cmp	ip, r3
 8018ec6:	eb04 0103 	add.w	r1, r4, r3
 8018eca:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8018ece:	f43f af04 	beq.w	8018cda <uxr_read_framed_msg+0x86>
 8018ed2:	fba5 0303 	umull	r0, r3, r5, r3
 8018ed6:	7889      	ldrb	r1, [r1, #2]
 8018ed8:	089b      	lsrs	r3, r3, #2
 8018eda:	297e      	cmp	r1, #126	@ 0x7e
 8018edc:	fb0e 2313 	mls	r3, lr, r3, r2
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018ee6:	d1ec      	bne.n	8018ec2 <uxr_read_framed_msg+0x26e>
 8018ee8:	2301      	movs	r3, #1
 8018eea:	7023      	strb	r3, [r4, #0]
 8018eec:	e6c3      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018eee:	1c50      	adds	r0, r2, #1
 8018ef0:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018ef4:	3202      	adds	r2, #2
 8018ef6:	0841      	lsrs	r1, r0, #1
 8018ef8:	fba5 c101 	umull	ip, r1, r5, r1
 8018efc:	0889      	lsrs	r1, r1, #2
 8018efe:	fb0b 0111 	mls	r1, fp, r1, r0
 8018f02:	1860      	adds	r0, r4, r1
 8018f04:	b2c9      	uxtb	r1, r1
 8018f06:	458a      	cmp	sl, r1
 8018f08:	f43f af42 	beq.w	8018d90 <uxr_read_framed_msg+0x13c>
 8018f0c:	0851      	lsrs	r1, r2, #1
 8018f0e:	7880      	ldrb	r0, [r0, #2]
 8018f10:	fba5 a101 	umull	sl, r1, r5, r1
 8018f14:	287e      	cmp	r0, #126	@ 0x7e
 8018f16:	f080 0c20 	eor.w	ip, r0, #32
 8018f1a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8018f1e:	fb0b 2211 	mls	r2, fp, r1, r2
 8018f22:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018f26:	f47f af14 	bne.w	8018d52 <uxr_read_framed_msg+0xfe>
 8018f2a:	459e      	cmp	lr, r3
 8018f2c:	f43f af33 	beq.w	8018d96 <uxr_read_framed_msg+0x142>
 8018f30:	2301      	movs	r3, #1
 8018f32:	7023      	strb	r3, [r4, #0]
 8018f34:	e69f      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018f36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f38:	9300      	str	r3, [sp, #0]
 8018f3a:	2301      	movs	r3, #1
 8018f3c:	9301      	str	r3, [sp, #4]
 8018f3e:	464a      	mov	r2, r9
 8018f40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f42:	4641      	mov	r1, r8
 8018f44:	4620      	mov	r0, r4
 8018f46:	f7ff fdf1 	bl	8018b2c <uxr_framing_read_transport>
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	f43f aec5 	beq.w	8018cda <uxr_read_framed_msg+0x86>
 8018f50:	7823      	ldrb	r3, [r4, #0]
 8018f52:	e690      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f56:	9300      	str	r3, [sp, #0]
 8018f58:	2302      	movs	r3, #2
 8018f5a:	e7ef      	b.n	8018f3c <uxr_read_framed_msg+0x2e8>
 8018f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f5e:	464a      	mov	r2, r9
 8018f60:	4641      	mov	r1, r8
 8018f62:	4620      	mov	r0, r4
 8018f64:	9300      	str	r3, [sp, #0]
 8018f66:	2304      	movs	r3, #4
 8018f68:	9301      	str	r3, [sp, #4]
 8018f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f6c:	f7ff fdde 	bl	8018b2c <uxr_framing_read_transport>
 8018f70:	2800      	cmp	r0, #0
 8018f72:	d1ed      	bne.n	8018f50 <uxr_read_framed_msg+0x2fc>
 8018f74:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018f78:	2b7e      	cmp	r3, #126	@ 0x7e
 8018f7a:	d0e9      	beq.n	8018f50 <uxr_read_framed_msg+0x2fc>
 8018f7c:	e6ad      	b.n	8018cda <uxr_read_framed_msg+0x86>
 8018f7e:	bf00      	nop
 8018f80:	30c30c31 	.word	0x30c30c31
 8018f84:	08025134 	.word	0x08025134
 8018f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f8a:	9300      	str	r3, [sp, #0]
 8018f8c:	2305      	movs	r3, #5
 8018f8e:	9301      	str	r3, [sp, #4]
 8018f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f92:	f7ff fdcb 	bl	8018b2c <uxr_framing_read_transport>
 8018f96:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018f9a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018f9e:	429a      	cmp	r2, r3
 8018fa0:	f43f ae9b 	beq.w	8018cda <uxr_read_framed_msg+0x86>
 8018fa4:	e664      	b.n	8018c70 <uxr_read_framed_msg+0x1c>
 8018fa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fa8:	9300      	str	r3, [sp, #0]
 8018faa:	2303      	movs	r3, #3
 8018fac:	e7c6      	b.n	8018f3c <uxr_read_framed_msg+0x2e8>
 8018fae:	2305      	movs	r3, #5
 8018fb0:	7023      	strb	r3, [r4, #0]
 8018fb2:	e660      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8018fb4:	f43f aeef 	beq.w	8018d96 <uxr_read_framed_msg+0x142>
 8018fb8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018fbc:	d094      	beq.n	8018ee8 <uxr_read_framed_msg+0x294>
 8018fbe:	ebae 0303 	sub.w	r3, lr, r3
 8018fc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018fc4:	3302      	adds	r3, #2
 8018fc6:	9200      	str	r2, [sp, #0]
 8018fc8:	e7b8      	b.n	8018f3c <uxr_read_framed_msg+0x2e8>
 8018fca:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8018fce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018fd0:	7013      	strb	r3, [r2, #0]
 8018fd2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8018fd4:	b003      	add	sp, #12
 8018fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fda:	1c59      	adds	r1, r3, #1
 8018fdc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018fe0:	084a      	lsrs	r2, r1, #1
 8018fe2:	fba5 e202 	umull	lr, r2, r5, r2
 8018fe6:	0892      	lsrs	r2, r2, #2
 8018fe8:	fb0c 1212 	mls	r2, ip, r2, r1
 8018fec:	b2d1      	uxtb	r1, r2
 8018fee:	4288      	cmp	r0, r1
 8018ff0:	d0b0      	beq.n	8018f54 <uxr_read_framed_msg+0x300>
 8018ff2:	3302      	adds	r3, #2
 8018ff4:	4422      	add	r2, r4
 8018ff6:	7891      	ldrb	r1, [r2, #2]
 8018ff8:	085a      	lsrs	r2, r3, #1
 8018ffa:	fba5 0202 	umull	r0, r2, r5, r2
 8018ffe:	297e      	cmp	r1, #126	@ 0x7e
 8019000:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019004:	fb0c 3312 	mls	r3, ip, r2, r3
 8019008:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801900c:	f000 80a1 	beq.w	8019152 <uxr_read_framed_msg+0x4fe>
 8019010:	f081 0120 	eor.w	r1, r1, #32
 8019014:	e680      	b.n	8018d18 <uxr_read_framed_msg+0xc4>
 8019016:	f103 0c01 	add.w	ip, r3, #1
 801901a:	202a      	movs	r0, #42	@ 0x2a
 801901c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019020:	fba5 e202 	umull	lr, r2, r5, r2
 8019024:	0892      	lsrs	r2, r2, #2
 8019026:	fb00 c212 	mls	r2, r0, r2, ip
 801902a:	fa5f fc82 	uxtb.w	ip, r2
 801902e:	4561      	cmp	r1, ip
 8019030:	d081      	beq.n	8018f36 <uxr_read_framed_msg+0x2e2>
 8019032:	3302      	adds	r3, #2
 8019034:	4422      	add	r2, r4
 8019036:	0859      	lsrs	r1, r3, #1
 8019038:	7892      	ldrb	r2, [r2, #2]
 801903a:	fba5 c101 	umull	ip, r1, r5, r1
 801903e:	2a7e      	cmp	r2, #126	@ 0x7e
 8019040:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019044:	fb00 3311 	mls	r3, r0, r1, r3
 8019048:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801904c:	f000 8091 	beq.w	8019172 <uxr_read_framed_msg+0x51e>
 8019050:	f082 0220 	eor.w	r2, r2, #32
 8019054:	e636      	b.n	8018cc4 <uxr_read_framed_msg+0x70>
 8019056:	1c51      	adds	r1, r2, #1
 8019058:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801905c:	084b      	lsrs	r3, r1, #1
 801905e:	fba5 e303 	umull	lr, r3, r5, r3
 8019062:	089b      	lsrs	r3, r3, #2
 8019064:	fb0c 1313 	mls	r3, ip, r3, r1
 8019068:	b2d9      	uxtb	r1, r3
 801906a:	4288      	cmp	r0, r1
 801906c:	d09b      	beq.n	8018fa6 <uxr_read_framed_msg+0x352>
 801906e:	3202      	adds	r2, #2
 8019070:	4423      	add	r3, r4
 8019072:	0850      	lsrs	r0, r2, #1
 8019074:	789b      	ldrb	r3, [r3, #2]
 8019076:	fba5 1000 	umull	r1, r0, r5, r0
 801907a:	2b7e      	cmp	r3, #126	@ 0x7e
 801907c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019080:	fb0c 2210 	mls	r2, ip, r0, r2
 8019084:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019088:	d077      	beq.n	801917a <uxr_read_framed_msg+0x526>
 801908a:	f083 0120 	eor.w	r1, r3, #32
 801908e:	e6ea      	b.n	8018e66 <uxr_read_framed_msg+0x212>
 8019090:	f103 0c01 	add.w	ip, r3, #1
 8019094:	202a      	movs	r0, #42	@ 0x2a
 8019096:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801909a:	fba5 e202 	umull	lr, r2, r5, r2
 801909e:	0892      	lsrs	r2, r2, #2
 80190a0:	fb00 c212 	mls	r2, r0, r2, ip
 80190a4:	fa5f fc82 	uxtb.w	ip, r2
 80190a8:	4561      	cmp	r1, ip
 80190aa:	f43f af57 	beq.w	8018f5c <uxr_read_framed_msg+0x308>
 80190ae:	3302      	adds	r3, #2
 80190b0:	4422      	add	r2, r4
 80190b2:	7891      	ldrb	r1, [r2, #2]
 80190b4:	085a      	lsrs	r2, r3, #1
 80190b6:	fba5 c202 	umull	ip, r2, r5, r2
 80190ba:	297e      	cmp	r1, #126	@ 0x7e
 80190bc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80190c0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80190c4:	fb00 3312 	mls	r3, r0, r2, r3
 80190c8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80190cc:	f43f af46 	beq.w	8018f5c <uxr_read_framed_msg+0x308>
 80190d0:	f081 0120 	eor.w	r1, r1, #32
 80190d4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80190d8:	e6ea      	b.n	8018eb0 <uxr_read_framed_msg+0x25c>
 80190da:	1c59      	adds	r1, r3, #1
 80190dc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80190e0:	084a      	lsrs	r2, r1, #1
 80190e2:	fba5 e202 	umull	lr, r2, r5, r2
 80190e6:	0892      	lsrs	r2, r2, #2
 80190e8:	fb0c 1212 	mls	r2, ip, r2, r1
 80190ec:	b2d1      	uxtb	r1, r2
 80190ee:	4288      	cmp	r0, r1
 80190f0:	f43f af21 	beq.w	8018f36 <uxr_read_framed_msg+0x2e2>
 80190f4:	3302      	adds	r3, #2
 80190f6:	4422      	add	r2, r4
 80190f8:	7891      	ldrb	r1, [r2, #2]
 80190fa:	085a      	lsrs	r2, r3, #1
 80190fc:	fba5 0202 	umull	r0, r2, r5, r2
 8019100:	297e      	cmp	r1, #126	@ 0x7e
 8019102:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019106:	fb0c 3312 	mls	r3, ip, r2, r3
 801910a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801910e:	d030      	beq.n	8019172 <uxr_read_framed_msg+0x51e>
 8019110:	f081 0120 	eor.w	r1, r1, #32
 8019114:	e65d      	b.n	8018dd2 <uxr_read_framed_msg+0x17e>
 8019116:	1c59      	adds	r1, r3, #1
 8019118:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801911c:	084a      	lsrs	r2, r1, #1
 801911e:	fba5 e202 	umull	lr, r2, r5, r2
 8019122:	0892      	lsrs	r2, r2, #2
 8019124:	fb0c 1212 	mls	r2, ip, r2, r1
 8019128:	b2d1      	uxtb	r1, r2
 801912a:	4288      	cmp	r0, r1
 801912c:	f43f af12 	beq.w	8018f54 <uxr_read_framed_msg+0x300>
 8019130:	3302      	adds	r3, #2
 8019132:	4422      	add	r2, r4
 8019134:	7891      	ldrb	r1, [r2, #2]
 8019136:	085a      	lsrs	r2, r3, #1
 8019138:	fba5 0202 	umull	r0, r2, r5, r2
 801913c:	297e      	cmp	r1, #126	@ 0x7e
 801913e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019142:	fb0c 3312 	mls	r3, ip, r2, r3
 8019146:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801914a:	d002      	beq.n	8019152 <uxr_read_framed_msg+0x4fe>
 801914c:	f081 0120 	eor.w	r1, r1, #32
 8019150:	e66a      	b.n	8018e28 <uxr_read_framed_msg+0x1d4>
 8019152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019154:	9300      	str	r3, [sp, #0]
 8019156:	2302      	movs	r3, #2
 8019158:	9301      	str	r3, [sp, #4]
 801915a:	464a      	mov	r2, r9
 801915c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801915e:	4641      	mov	r1, r8
 8019160:	4620      	mov	r0, r4
 8019162:	f7ff fce3 	bl	8018b2c <uxr_framing_read_transport>
 8019166:	2800      	cmp	r0, #0
 8019168:	f47f aef2 	bne.w	8018f50 <uxr_read_framed_msg+0x2fc>
 801916c:	2301      	movs	r3, #1
 801916e:	7023      	strb	r3, [r4, #0]
 8019170:	e581      	b.n	8018c76 <uxr_read_framed_msg+0x22>
 8019172:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019174:	9300      	str	r3, [sp, #0]
 8019176:	2301      	movs	r3, #1
 8019178:	e7ee      	b.n	8019158 <uxr_read_framed_msg+0x504>
 801917a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801917c:	9300      	str	r3, [sp, #0]
 801917e:	2303      	movs	r3, #3
 8019180:	e7ea      	b.n	8019158 <uxr_read_framed_msg+0x504>
 8019182:	bf00      	nop

08019184 <uxr_stream_id>:
 8019184:	2901      	cmp	r1, #1
 8019186:	4684      	mov	ip, r0
 8019188:	b500      	push	{lr}
 801918a:	b083      	sub	sp, #12
 801918c:	d01f      	beq.n	80191ce <uxr_stream_id+0x4a>
 801918e:	2902      	cmp	r1, #2
 8019190:	f04f 0e00 	mov.w	lr, #0
 8019194:	d020      	beq.n	80191d8 <uxr_stream_id+0x54>
 8019196:	2300      	movs	r3, #0
 8019198:	2000      	movs	r0, #0
 801919a:	f36e 0307 	bfi	r3, lr, #0, #8
 801919e:	f36c 230f 	bfi	r3, ip, #8, #8
 80191a2:	f361 4317 	bfi	r3, r1, #16, #8
 80191a6:	f362 631f 	bfi	r3, r2, #24, #8
 80191aa:	fa5f fc83 	uxtb.w	ip, r3
 80191ae:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80191b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80191b6:	0e1b      	lsrs	r3, r3, #24
 80191b8:	f36c 0007 	bfi	r0, ip, #0, #8
 80191bc:	f361 200f 	bfi	r0, r1, #8, #8
 80191c0:	f362 4017 	bfi	r0, r2, #16, #8
 80191c4:	f363 601f 	bfi	r0, r3, #24, #8
 80191c8:	b003      	add	sp, #12
 80191ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80191ce:	f100 0e01 	add.w	lr, r0, #1
 80191d2:	fa5f fe8e 	uxtb.w	lr, lr
 80191d6:	e7de      	b.n	8019196 <uxr_stream_id+0x12>
 80191d8:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 80191dc:	e7db      	b.n	8019196 <uxr_stream_id+0x12>
 80191de:	bf00      	nop

080191e0 <uxr_stream_id_from_raw>:
 80191e0:	b082      	sub	sp, #8
 80191e2:	b130      	cbz	r0, 80191f2 <uxr_stream_id_from_raw+0x12>
 80191e4:	0603      	lsls	r3, r0, #24
 80191e6:	d421      	bmi.n	801922c <uxr_stream_id_from_raw+0x4c>
 80191e8:	1e42      	subs	r2, r0, #1
 80191ea:	f04f 0c01 	mov.w	ip, #1
 80191ee:	b2d2      	uxtb	r2, r2
 80191f0:	e001      	b.n	80191f6 <uxr_stream_id_from_raw+0x16>
 80191f2:	4684      	mov	ip, r0
 80191f4:	4602      	mov	r2, r0
 80191f6:	2300      	movs	r3, #0
 80191f8:	f360 0307 	bfi	r3, r0, #0, #8
 80191fc:	2000      	movs	r0, #0
 80191fe:	f362 230f 	bfi	r3, r2, #8, #8
 8019202:	f36c 4317 	bfi	r3, ip, #16, #8
 8019206:	f361 631f 	bfi	r3, r1, #24, #8
 801920a:	fa5f fc83 	uxtb.w	ip, r3
 801920e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019212:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019216:	0e1b      	lsrs	r3, r3, #24
 8019218:	f36c 0007 	bfi	r0, ip, #0, #8
 801921c:	f361 200f 	bfi	r0, r1, #8, #8
 8019220:	f362 4017 	bfi	r0, r2, #16, #8
 8019224:	f363 601f 	bfi	r0, r3, #24, #8
 8019228:	b002      	add	sp, #8
 801922a:	4770      	bx	lr
 801922c:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8019230:	f04f 0c02 	mov.w	ip, #2
 8019234:	e7df      	b.n	80191f6 <uxr_stream_id_from_raw+0x16>
 8019236:	bf00      	nop

08019238 <uxr_init_stream_storage>:
 8019238:	2300      	movs	r3, #0
 801923a:	7403      	strb	r3, [r0, #16]
 801923c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8019240:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8019244:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8019248:	4770      	bx	lr
 801924a:	bf00      	nop

0801924c <uxr_reset_stream_storage>:
 801924c:	b570      	push	{r4, r5, r6, lr}
 801924e:	7c03      	ldrb	r3, [r0, #16]
 8019250:	4604      	mov	r4, r0
 8019252:	b14b      	cbz	r3, 8019268 <uxr_reset_stream_storage+0x1c>
 8019254:	4606      	mov	r6, r0
 8019256:	2500      	movs	r5, #0
 8019258:	4630      	mov	r0, r6
 801925a:	3501      	adds	r5, #1
 801925c:	f007 f9a4 	bl	80205a8 <uxr_reset_output_best_effort_stream>
 8019260:	7c23      	ldrb	r3, [r4, #16]
 8019262:	3610      	adds	r6, #16
 8019264:	42ab      	cmp	r3, r5
 8019266:	d8f7      	bhi.n	8019258 <uxr_reset_stream_storage+0xc>
 8019268:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801926c:	b15b      	cbz	r3, 8019286 <uxr_reset_stream_storage+0x3a>
 801926e:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019272:	2500      	movs	r5, #0
 8019274:	4630      	mov	r0, r6
 8019276:	3501      	adds	r5, #1
 8019278:	f006 ff9c 	bl	80201b4 <uxr_reset_input_best_effort_stream>
 801927c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8019280:	3602      	adds	r6, #2
 8019282:	42ab      	cmp	r3, r5
 8019284:	d8f6      	bhi.n	8019274 <uxr_reset_stream_storage+0x28>
 8019286:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801928a:	b15b      	cbz	r3, 80192a4 <uxr_reset_stream_storage+0x58>
 801928c:	f104 0618 	add.w	r6, r4, #24
 8019290:	2500      	movs	r5, #0
 8019292:	4630      	mov	r0, r6
 8019294:	3501      	adds	r5, #1
 8019296:	f007 fa33 	bl	8020700 <uxr_reset_output_reliable_stream>
 801929a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801929e:	3628      	adds	r6, #40	@ 0x28
 80192a0:	42ab      	cmp	r3, r5
 80192a2:	d8f6      	bhi.n	8019292 <uxr_reset_stream_storage+0x46>
 80192a4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80192a8:	b15b      	cbz	r3, 80192c2 <uxr_reset_stream_storage+0x76>
 80192aa:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80192ae:	2500      	movs	r5, #0
 80192b0:	4630      	mov	r0, r6
 80192b2:	3501      	adds	r5, #1
 80192b4:	f006 ffea 	bl	802028c <uxr_reset_input_reliable_stream>
 80192b8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80192bc:	3618      	adds	r6, #24
 80192be:	42ab      	cmp	r3, r5
 80192c0:	d8f6      	bhi.n	80192b0 <uxr_reset_stream_storage+0x64>
 80192c2:	bd70      	pop	{r4, r5, r6, pc}

080192c4 <uxr_add_output_best_effort_buffer>:
 80192c4:	b510      	push	{r4, lr}
 80192c6:	7c04      	ldrb	r4, [r0, #16]
 80192c8:	b082      	sub	sp, #8
 80192ca:	f104 0c01 	add.w	ip, r4, #1
 80192ce:	f880 c010 	strb.w	ip, [r0, #16]
 80192d2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80192d6:	f007 f95d 	bl	8020594 <uxr_init_output_best_effort_stream>
 80192da:	2201      	movs	r2, #1
 80192dc:	4620      	mov	r0, r4
 80192de:	4611      	mov	r1, r2
 80192e0:	b002      	add	sp, #8
 80192e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192e6:	f7ff bf4d 	b.w	8019184 <uxr_stream_id>
 80192ea:	bf00      	nop

080192ec <uxr_add_output_reliable_buffer>:
 80192ec:	b510      	push	{r4, lr}
 80192ee:	b084      	sub	sp, #16
 80192f0:	4684      	mov	ip, r0
 80192f2:	2028      	movs	r0, #40	@ 0x28
 80192f4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80192f8:	9400      	str	r4, [sp, #0]
 80192fa:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80192fe:	fb00 c004 	mla	r0, r0, r4, ip
 8019302:	f104 0e01 	add.w	lr, r4, #1
 8019306:	3018      	adds	r0, #24
 8019308:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801930c:	f007 f9c2 	bl	8020694 <uxr_init_output_reliable_stream>
 8019310:	2201      	movs	r2, #1
 8019312:	2102      	movs	r1, #2
 8019314:	4620      	mov	r0, r4
 8019316:	b004      	add	sp, #16
 8019318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801931c:	f7ff bf32 	b.w	8019184 <uxr_stream_id>

08019320 <uxr_add_input_best_effort_buffer>:
 8019320:	b510      	push	{r4, lr}
 8019322:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8019326:	b082      	sub	sp, #8
 8019328:	1c62      	adds	r2, r4, #1
 801932a:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801932e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8019332:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019336:	f006 ff39 	bl	80201ac <uxr_init_input_best_effort_stream>
 801933a:	2200      	movs	r2, #0
 801933c:	2101      	movs	r1, #1
 801933e:	4620      	mov	r0, r4
 8019340:	b002      	add	sp, #8
 8019342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019346:	f7ff bf1d 	b.w	8019184 <uxr_stream_id>
 801934a:	bf00      	nop

0801934c <uxr_add_input_reliable_buffer>:
 801934c:	b510      	push	{r4, lr}
 801934e:	b084      	sub	sp, #16
 8019350:	4684      	mov	ip, r0
 8019352:	2018      	movs	r0, #24
 8019354:	9c06      	ldr	r4, [sp, #24]
 8019356:	9400      	str	r4, [sp, #0]
 8019358:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801935c:	fb00 c004 	mla	r0, r0, r4, ip
 8019360:	f104 0e01 	add.w	lr, r4, #1
 8019364:	3048      	adds	r0, #72	@ 0x48
 8019366:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801936a:	f006 ff69 	bl	8020240 <uxr_init_input_reliable_stream>
 801936e:	2200      	movs	r2, #0
 8019370:	2102      	movs	r1, #2
 8019372:	4620      	mov	r0, r4
 8019374:	b004      	add	sp, #16
 8019376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801937a:	f7ff bf03 	b.w	8019184 <uxr_stream_id>
 801937e:	bf00      	nop

08019380 <uxr_get_output_best_effort_stream>:
 8019380:	7c03      	ldrb	r3, [r0, #16]
 8019382:	428b      	cmp	r3, r1
 8019384:	bf8c      	ite	hi
 8019386:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801938a:	2000      	movls	r0, #0
 801938c:	4770      	bx	lr
 801938e:	bf00      	nop

08019390 <uxr_get_output_reliable_stream>:
 8019390:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8019394:	428b      	cmp	r3, r1
 8019396:	d904      	bls.n	80193a2 <uxr_get_output_reliable_stream+0x12>
 8019398:	2328      	movs	r3, #40	@ 0x28
 801939a:	fb03 0001 	mla	r0, r3, r1, r0
 801939e:	3018      	adds	r0, #24
 80193a0:	4770      	bx	lr
 80193a2:	2000      	movs	r0, #0
 80193a4:	4770      	bx	lr
 80193a6:	bf00      	nop

080193a8 <uxr_get_input_best_effort_stream>:
 80193a8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80193ac:	428b      	cmp	r3, r1
 80193ae:	d903      	bls.n	80193b8 <uxr_get_input_best_effort_stream+0x10>
 80193b0:	3121      	adds	r1, #33	@ 0x21
 80193b2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80193b6:	4770      	bx	lr
 80193b8:	2000      	movs	r0, #0
 80193ba:	4770      	bx	lr

080193bc <uxr_get_input_reliable_stream>:
 80193bc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80193c0:	428b      	cmp	r3, r1
 80193c2:	d904      	bls.n	80193ce <uxr_get_input_reliable_stream+0x12>
 80193c4:	2318      	movs	r3, #24
 80193c6:	fb03 0001 	mla	r0, r3, r1, r0
 80193ca:	3048      	adds	r0, #72	@ 0x48
 80193cc:	4770      	bx	lr
 80193ce:	2000      	movs	r0, #0
 80193d0:	4770      	bx	lr
 80193d2:	bf00      	nop

080193d4 <uxr_output_streams_confirmed>:
 80193d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80193d8:	b183      	cbz	r3, 80193fc <uxr_output_streams_confirmed+0x28>
 80193da:	b570      	push	{r4, r5, r6, lr}
 80193dc:	4606      	mov	r6, r0
 80193de:	f100 0518 	add.w	r5, r0, #24
 80193e2:	2400      	movs	r4, #0
 80193e4:	e000      	b.n	80193e8 <uxr_output_streams_confirmed+0x14>
 80193e6:	b140      	cbz	r0, 80193fa <uxr_output_streams_confirmed+0x26>
 80193e8:	4628      	mov	r0, r5
 80193ea:	3401      	adds	r4, #1
 80193ec:	f007 fbfc 	bl	8020be8 <uxr_is_output_up_to_date>
 80193f0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80193f4:	3528      	adds	r5, #40	@ 0x28
 80193f6:	42a3      	cmp	r3, r4
 80193f8:	d8f5      	bhi.n	80193e6 <uxr_output_streams_confirmed+0x12>
 80193fa:	bd70      	pop	{r4, r5, r6, pc}
 80193fc:	2001      	movs	r0, #1
 80193fe:	4770      	bx	lr

08019400 <uxr_buffer_submessage_header>:
 8019400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019402:	460e      	mov	r6, r1
 8019404:	2104      	movs	r1, #4
 8019406:	4604      	mov	r4, r0
 8019408:	4615      	mov	r5, r2
 801940a:	461f      	mov	r7, r3
 801940c:	f7fa fed8 	bl	80141c0 <ucdr_align_to>
 8019410:	2301      	movs	r3, #1
 8019412:	4631      	mov	r1, r6
 8019414:	4620      	mov	r0, r4
 8019416:	ea47 0203 	orr.w	r2, r7, r3
 801941a:	7523      	strb	r3, [r4, #20]
 801941c:	462b      	mov	r3, r5
 801941e:	f000 fa29 	bl	8019874 <uxr_serialize_submessage_header>
 8019422:	4620      	mov	r0, r4
 8019424:	f7fa fee2 	bl	80141ec <ucdr_buffer_remaining>
 8019428:	42a8      	cmp	r0, r5
 801942a:	bf34      	ite	cc
 801942c:	2000      	movcc	r0, #0
 801942e:	2001      	movcs	r0, #1
 8019430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019432:	bf00      	nop

08019434 <uxr_read_submessage_header>:
 8019434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019438:	4604      	mov	r4, r0
 801943a:	460d      	mov	r5, r1
 801943c:	2104      	movs	r1, #4
 801943e:	4616      	mov	r6, r2
 8019440:	4698      	mov	r8, r3
 8019442:	f7fa febd 	bl	80141c0 <ucdr_align_to>
 8019446:	4620      	mov	r0, r4
 8019448:	f7fa fed0 	bl	80141ec <ucdr_buffer_remaining>
 801944c:	2803      	cmp	r0, #3
 801944e:	bf8c      	ite	hi
 8019450:	2701      	movhi	r7, #1
 8019452:	2700      	movls	r7, #0
 8019454:	d802      	bhi.n	801945c <uxr_read_submessage_header+0x28>
 8019456:	4638      	mov	r0, r7
 8019458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801945c:	4633      	mov	r3, r6
 801945e:	4642      	mov	r2, r8
 8019460:	4620      	mov	r0, r4
 8019462:	4629      	mov	r1, r5
 8019464:	f000 fa1a 	bl	801989c <uxr_deserialize_submessage_header>
 8019468:	f898 3000 	ldrb.w	r3, [r8]
 801946c:	4638      	mov	r0, r7
 801946e:	f003 0201 	and.w	r2, r3, #1
 8019472:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8019476:	f888 3000 	strb.w	r3, [r8]
 801947a:	7522      	strb	r2, [r4, #20]
 801947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019480 <uxr_submessage_padding>:
 8019480:	f010 0003 	ands.w	r0, r0, #3
 8019484:	bf18      	it	ne
 8019486:	f1c0 0004 	rsbne	r0, r0, #4
 801948a:	4770      	bx	lr

0801948c <uxr_millis>:
 801948c:	b510      	push	{r4, lr}
 801948e:	b084      	sub	sp, #16
 8019490:	2001      	movs	r0, #1
 8019492:	4669      	mov	r1, sp
 8019494:	f7e8 ff18 	bl	80022c8 <clock_gettime>
 8019498:	4908      	ldr	r1, [pc, #32]	@ (80194bc <uxr_millis+0x30>)
 801949a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801949e:	fba0 0301 	umull	r0, r3, r0, r1
 80194a2:	1900      	adds	r0, r0, r4
 80194a4:	fb01 3102 	mla	r1, r1, r2, r3
 80194a8:	4a05      	ldr	r2, [pc, #20]	@ (80194c0 <uxr_millis+0x34>)
 80194aa:	f04f 0300 	mov.w	r3, #0
 80194ae:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80194b2:	f7e6 ff7d 	bl	80003b0 <__aeabi_ldivmod>
 80194b6:	b004      	add	sp, #16
 80194b8:	bd10      	pop	{r4, pc}
 80194ba:	bf00      	nop
 80194bc:	3b9aca00 	.word	0x3b9aca00
 80194c0:	000f4240 	.word	0x000f4240

080194c4 <uxr_nanos>:
 80194c4:	b510      	push	{r4, lr}
 80194c6:	b084      	sub	sp, #16
 80194c8:	2001      	movs	r0, #1
 80194ca:	4669      	mov	r1, sp
 80194cc:	f7e8 fefc 	bl	80022c8 <clock_gettime>
 80194d0:	4a06      	ldr	r2, [pc, #24]	@ (80194ec <uxr_nanos+0x28>)
 80194d2:	9800      	ldr	r0, [sp, #0]
 80194d4:	9902      	ldr	r1, [sp, #8]
 80194d6:	fba0 0302 	umull	r0, r3, r0, r2
 80194da:	9c01      	ldr	r4, [sp, #4]
 80194dc:	1840      	adds	r0, r0, r1
 80194de:	fb02 3304 	mla	r3, r2, r4, r3
 80194e2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80194e6:	b004      	add	sp, #16
 80194e8:	bd10      	pop	{r4, pc}
 80194ea:	bf00      	nop
 80194ec:	3b9aca00 	.word	0x3b9aca00

080194f0 <on_full_output_buffer_fragmented>:
 80194f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194f4:	460c      	mov	r4, r1
 80194f6:	b08a      	sub	sp, #40	@ 0x28
 80194f8:	4606      	mov	r6, r0
 80194fa:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80194fe:	f104 0008 	add.w	r0, r4, #8
 8019502:	f7ff ff45 	bl	8019390 <uxr_get_output_reliable_stream>
 8019506:	4605      	mov	r5, r0
 8019508:	f007 fb78 	bl	8020bfc <get_available_free_slots>
 801950c:	b968      	cbnz	r0, 801952a <on_full_output_buffer_fragmented+0x3a>
 801950e:	4620      	mov	r0, r4
 8019510:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8019514:	4798      	blx	r3
 8019516:	b918      	cbnz	r0, 8019520 <on_full_output_buffer_fragmented+0x30>
 8019518:	2001      	movs	r0, #1
 801951a:	b00a      	add	sp, #40	@ 0x28
 801951c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019520:	4628      	mov	r0, r5
 8019522:	f007 fb6b 	bl	8020bfc <get_available_free_slots>
 8019526:	2800      	cmp	r0, #0
 8019528:	d0f6      	beq.n	8019518 <on_full_output_buffer_fragmented+0x28>
 801952a:	8929      	ldrh	r1, [r5, #8]
 801952c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019530:	89eb      	ldrh	r3, [r5, #14]
 8019532:	7b28      	ldrb	r0, [r5, #12]
 8019534:	686f      	ldr	r7, [r5, #4]
 8019536:	1a12      	subs	r2, r2, r0
 8019538:	fbb3 f0f1 	udiv	r0, r3, r1
 801953c:	fbb7 f7f1 	udiv	r7, r7, r1
 8019540:	fb01 3110 	mls	r1, r1, r0, r3
 8019544:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8019548:	b289      	uxth	r1, r1
 801954a:	fb07 f101 	mul.w	r1, r7, r1
 801954e:	3f04      	subs	r7, #4
 8019550:	443a      	add	r2, r7
 8019552:	3104      	adds	r1, #4
 8019554:	fa1f f882 	uxth.w	r8, r2
 8019558:	463a      	mov	r2, r7
 801955a:	eba3 0308 	sub.w	r3, r3, r8
 801955e:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8019562:	682b      	ldr	r3, [r5, #0]
 8019564:	4419      	add	r1, r3
 8019566:	2300      	movs	r3, #0
 8019568:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801956c:	9000      	str	r0, [sp, #0]
 801956e:	a802      	add	r0, sp, #8
 8019570:	f7fa fdf8 	bl	8014164 <ucdr_init_buffer_origin_offset>
 8019574:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8019578:	f102 0308 	add.w	r3, r2, #8
 801957c:	42bb      	cmp	r3, r7
 801957e:	d927      	bls.n	80195d0 <on_full_output_buffer_fragmented+0xe0>
 8019580:	4642      	mov	r2, r8
 8019582:	2300      	movs	r3, #0
 8019584:	210d      	movs	r1, #13
 8019586:	a802      	add	r0, sp, #8
 8019588:	f7ff ff3a 	bl	8019400 <uxr_buffer_submessage_header>
 801958c:	8929      	ldrh	r1, [r5, #8]
 801958e:	89eb      	ldrh	r3, [r5, #14]
 8019590:	686a      	ldr	r2, [r5, #4]
 8019592:	fbb3 f0f1 	udiv	r0, r3, r1
 8019596:	fbb2 f2f1 	udiv	r2, r2, r1
 801959a:	fb01 3310 	mls	r3, r1, r0, r3
 801959e:	b29b      	uxth	r3, r3
 80195a0:	fb02 f303 	mul.w	r3, r2, r3
 80195a4:	682a      	ldr	r2, [r5, #0]
 80195a6:	50d7      	str	r7, [r2, r3]
 80195a8:	2101      	movs	r1, #1
 80195aa:	89e8      	ldrh	r0, [r5, #14]
 80195ac:	f007 fc78 	bl	8020ea0 <uxr_seq_num_add>
 80195b0:	9904      	ldr	r1, [sp, #16]
 80195b2:	9a03      	ldr	r2, [sp, #12]
 80195b4:	81e8      	strh	r0, [r5, #14]
 80195b6:	4630      	mov	r0, r6
 80195b8:	1a52      	subs	r2, r2, r1
 80195ba:	f7fa fde5 	bl	8014188 <ucdr_init_buffer>
 80195be:	4630      	mov	r0, r6
 80195c0:	4622      	mov	r2, r4
 80195c2:	490f      	ldr	r1, [pc, #60]	@ (8019600 <on_full_output_buffer_fragmented+0x110>)
 80195c4:	f7fa fdb4 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 80195c8:	2000      	movs	r0, #0
 80195ca:	b00a      	add	sp, #40	@ 0x28
 80195cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195d0:	b292      	uxth	r2, r2
 80195d2:	2302      	movs	r3, #2
 80195d4:	210d      	movs	r1, #13
 80195d6:	a802      	add	r0, sp, #8
 80195d8:	f7ff ff12 	bl	8019400 <uxr_buffer_submessage_header>
 80195dc:	8928      	ldrh	r0, [r5, #8]
 80195de:	89eb      	ldrh	r3, [r5, #14]
 80195e0:	6869      	ldr	r1, [r5, #4]
 80195e2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80195e6:	fbb3 f7f0 	udiv	r7, r3, r0
 80195ea:	fbb1 f1f0 	udiv	r1, r1, r0
 80195ee:	fb00 3317 	mls	r3, r0, r7, r3
 80195f2:	3208      	adds	r2, #8
 80195f4:	b29b      	uxth	r3, r3
 80195f6:	fb01 f303 	mul.w	r3, r1, r3
 80195fa:	6829      	ldr	r1, [r5, #0]
 80195fc:	50ca      	str	r2, [r1, r3]
 80195fe:	e7d3      	b.n	80195a8 <on_full_output_buffer_fragmented+0xb8>
 8019600:	080194f1 	.word	0x080194f1

08019604 <uxr_prepare_output_stream>:
 8019604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019606:	b087      	sub	sp, #28
 8019608:	2707      	movs	r7, #7
 801960a:	2500      	movs	r5, #0
 801960c:	461c      	mov	r4, r3
 801960e:	4606      	mov	r6, r0
 8019610:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019614:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019616:	e9cd 7500 	strd	r7, r5, [sp]
 801961a:	3204      	adds	r2, #4
 801961c:	f7fe ffc8 	bl	80185b0 <uxr_prepare_stream_to_write_submessage>
 8019620:	f080 0201 	eor.w	r2, r0, #1
 8019624:	b2d2      	uxtb	r2, r2
 8019626:	75a2      	strb	r2, [r4, #22]
 8019628:	b112      	cbz	r2, 8019630 <uxr_prepare_output_stream+0x2c>
 801962a:	4628      	mov	r0, r5
 801962c:	b007      	add	sp, #28
 801962e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019630:	aa05      	add	r2, sp, #20
 8019632:	9902      	ldr	r1, [sp, #8]
 8019634:	4630      	mov	r0, r6
 8019636:	f7ff f8f7 	bl	8018828 <uxr_init_base_object_request>
 801963a:	a905      	add	r1, sp, #20
 801963c:	4605      	mov	r5, r0
 801963e:	4620      	mov	r0, r4
 8019640:	f001 f8d2 	bl	801a7e8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019644:	69a6      	ldr	r6, [r4, #24]
 8019646:	69e7      	ldr	r7, [r4, #28]
 8019648:	4620      	mov	r0, r4
 801964a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801964e:	1a52      	subs	r2, r2, r1
 8019650:	f7fa fd9a 	bl	8014188 <ucdr_init_buffer>
 8019654:	4620      	mov	r0, r4
 8019656:	463a      	mov	r2, r7
 8019658:	4631      	mov	r1, r6
 801965a:	f7fa fd69 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 801965e:	4628      	mov	r0, r5
 8019660:	b007      	add	sp, #28
 8019662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019664 <uxr_prepare_output_stream_fragmented>:
 8019664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019668:	b091      	sub	sp, #68	@ 0x44
 801966a:	4605      	mov	r5, r0
 801966c:	3008      	adds	r0, #8
 801966e:	461e      	mov	r6, r3
 8019670:	9105      	str	r1, [sp, #20]
 8019672:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019676:	9204      	str	r2, [sp, #16]
 8019678:	f7ff fe8a 	bl	8019390 <uxr_get_output_reliable_stream>
 801967c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8019680:	2b01      	cmp	r3, #1
 8019682:	f000 8093 	beq.w	80197ac <uxr_prepare_output_stream_fragmented+0x148>
 8019686:	4604      	mov	r4, r0
 8019688:	2800      	cmp	r0, #0
 801968a:	f000 808f 	beq.w	80197ac <uxr_prepare_output_stream_fragmented+0x148>
 801968e:	f007 fab5 	bl	8020bfc <get_available_free_slots>
 8019692:	2800      	cmp	r0, #0
 8019694:	f000 8085 	beq.w	80197a2 <uxr_prepare_output_stream_fragmented+0x13e>
 8019698:	8923      	ldrh	r3, [r4, #8]
 801969a:	89e7      	ldrh	r7, [r4, #14]
 801969c:	6862      	ldr	r2, [r4, #4]
 801969e:	fbb7 f9f3 	udiv	r9, r7, r3
 80196a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80196a6:	fb03 7919 	mls	r9, r3, r9, r7
 80196aa:	6823      	ldr	r3, [r4, #0]
 80196ac:	f1a2 0b04 	sub.w	fp, r2, #4
 80196b0:	9203      	str	r2, [sp, #12]
 80196b2:	fa1f f989 	uxth.w	r9, r9
 80196b6:	fb02 f909 	mul.w	r9, r2, r9
 80196ba:	f109 0904 	add.w	r9, r9, #4
 80196be:	4499      	add	r9, r3
 80196c0:	7b23      	ldrb	r3, [r4, #12]
 80196c2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80196c6:	4543      	cmp	r3, r8
 80196c8:	d37c      	bcc.n	80197c4 <uxr_prepare_output_stream_fragmented+0x160>
 80196ca:	f1ab 0a04 	sub.w	sl, fp, #4
 80196ce:	465a      	mov	r2, fp
 80196d0:	4649      	mov	r1, r9
 80196d2:	a808      	add	r0, sp, #32
 80196d4:	ebaa 0a03 	sub.w	sl, sl, r3
 80196d8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80196da:	f8cd 8000 	str.w	r8, [sp]
 80196de:	3308      	adds	r3, #8
 80196e0:	fa1f fa8a 	uxth.w	sl, sl
 80196e4:	9302      	str	r3, [sp, #8]
 80196e6:	2300      	movs	r3, #0
 80196e8:	f7fa fd3c 	bl	8014164 <ucdr_init_buffer_origin_offset>
 80196ec:	9b02      	ldr	r3, [sp, #8]
 80196ee:	4652      	mov	r2, sl
 80196f0:	210d      	movs	r1, #13
 80196f2:	455b      	cmp	r3, fp
 80196f4:	bf34      	ite	cc
 80196f6:	2302      	movcc	r3, #2
 80196f8:	2300      	movcs	r3, #0
 80196fa:	a808      	add	r0, sp, #32
 80196fc:	f7ff fe80 	bl	8019400 <uxr_buffer_submessage_header>
 8019700:	8921      	ldrh	r1, [r4, #8]
 8019702:	6863      	ldr	r3, [r4, #4]
 8019704:	4638      	mov	r0, r7
 8019706:	fbb7 f2f1 	udiv	r2, r7, r1
 801970a:	fbb3 f3f1 	udiv	r3, r3, r1
 801970e:	fb01 7212 	mls	r2, r1, r2, r7
 8019712:	2101      	movs	r1, #1
 8019714:	b292      	uxth	r2, r2
 8019716:	fb02 f303 	mul.w	r3, r2, r3
 801971a:	6822      	ldr	r2, [r4, #0]
 801971c:	f842 b003 	str.w	fp, [r2, r3]
 8019720:	f007 fbbe 	bl	8020ea0 <uxr_seq_num_add>
 8019724:	9b03      	ldr	r3, [sp, #12]
 8019726:	f108 0104 	add.w	r1, r8, #4
 801972a:	4607      	mov	r7, r0
 801972c:	f1a3 0208 	sub.w	r2, r3, #8
 8019730:	4630      	mov	r0, r6
 8019732:	4449      	add	r1, r9
 8019734:	eba2 0208 	sub.w	r2, r2, r8
 8019738:	f7fa fd26 	bl	8014188 <ucdr_init_buffer>
 801973c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801973e:	2107      	movs	r1, #7
 8019740:	81e7      	strh	r7, [r4, #14]
 8019742:	1d1a      	adds	r2, r3, #4
 8019744:	2300      	movs	r3, #0
 8019746:	4630      	mov	r0, r6
 8019748:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801974c:	bf28      	it	cs
 801974e:	461a      	movcs	r2, r3
 8019750:	b292      	uxth	r2, r2
 8019752:	f7ff fe55 	bl	8019400 <uxr_buffer_submessage_header>
 8019756:	aa07      	add	r2, sp, #28
 8019758:	9904      	ldr	r1, [sp, #16]
 801975a:	4628      	mov	r0, r5
 801975c:	f7ff f864 	bl	8018828 <uxr_init_base_object_request>
 8019760:	4604      	mov	r4, r0
 8019762:	b320      	cbz	r0, 80197ae <uxr_prepare_output_stream_fragmented+0x14a>
 8019764:	a907      	add	r1, sp, #28
 8019766:	4630      	mov	r0, r6
 8019768:	f001 f83e 	bl	801a7e8 <uxr_serialize_WRITE_DATA_Payload_Data>
 801976c:	4630      	mov	r0, r6
 801976e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8019772:	1a52      	subs	r2, r2, r1
 8019774:	f7fa fd08 	bl	8014188 <ucdr_init_buffer>
 8019778:	9b05      	ldr	r3, [sp, #20]
 801977a:	9a02      	ldr	r2, [sp, #8]
 801977c:	4630      	mov	r0, r6
 801977e:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8019782:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8019784:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8019788:	462a      	mov	r2, r5
 801978a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801978e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8019790:	4918      	ldr	r1, [pc, #96]	@ (80197f4 <uxr_prepare_output_stream_fragmented+0x190>)
 8019792:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8019796:	f7fa fccb 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 801979a:	4620      	mov	r0, r4
 801979c:	b011      	add	sp, #68	@ 0x44
 801979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197a2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80197a4:	4628      	mov	r0, r5
 80197a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80197a8:	4798      	blx	r3
 80197aa:	b920      	cbnz	r0, 80197b6 <uxr_prepare_output_stream_fragmented+0x152>
 80197ac:	2400      	movs	r4, #0
 80197ae:	4620      	mov	r0, r4
 80197b0:	b011      	add	sp, #68	@ 0x44
 80197b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197b6:	4620      	mov	r0, r4
 80197b8:	f007 fa20 	bl	8020bfc <get_available_free_slots>
 80197bc:	2800      	cmp	r0, #0
 80197be:	f47f af6b 	bne.w	8019698 <uxr_prepare_output_stream_fragmented+0x34>
 80197c2:	e7f3      	b.n	80197ac <uxr_prepare_output_stream_fragmented+0x148>
 80197c4:	4638      	mov	r0, r7
 80197c6:	2101      	movs	r1, #1
 80197c8:	f007 fb6a 	bl	8020ea0 <uxr_seq_num_add>
 80197cc:	8922      	ldrh	r2, [r4, #8]
 80197ce:	6863      	ldr	r3, [r4, #4]
 80197d0:	4607      	mov	r7, r0
 80197d2:	fbb3 f9f2 	udiv	r9, r3, r2
 80197d6:	fbb0 f3f2 	udiv	r3, r0, r2
 80197da:	fb02 0313 	mls	r3, r2, r3, r0
 80197de:	b29b      	uxth	r3, r3
 80197e0:	fb03 f909 	mul.w	r9, r3, r9
 80197e4:	6823      	ldr	r3, [r4, #0]
 80197e6:	f109 0904 	add.w	r9, r9, #4
 80197ea:	4499      	add	r9, r3
 80197ec:	7b23      	ldrb	r3, [r4, #12]
 80197ee:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80197f2:	e76a      	b.n	80196ca <uxr_prepare_output_stream_fragmented+0x66>
 80197f4:	080194f1 	.word	0x080194f1

080197f8 <uxr_serialize_message_header>:
 80197f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197fa:	4616      	mov	r6, r2
 80197fc:	b083      	sub	sp, #12
 80197fe:	4604      	mov	r4, r0
 8019800:	460d      	mov	r5, r1
 8019802:	9301      	str	r3, [sp, #4]
 8019804:	9f08      	ldr	r7, [sp, #32]
 8019806:	f7f9 fa55 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801980a:	4631      	mov	r1, r6
 801980c:	4620      	mov	r0, r4
 801980e:	f7f9 fa51 	bl	8012cb4 <ucdr_serialize_uint8_t>
 8019812:	9a01      	ldr	r2, [sp, #4]
 8019814:	2101      	movs	r1, #1
 8019816:	4620      	mov	r0, r4
 8019818:	f7f9 faf8 	bl	8012e0c <ucdr_serialize_endian_uint16_t>
 801981c:	062b      	lsls	r3, r5, #24
 801981e:	d501      	bpl.n	8019824 <uxr_serialize_message_header+0x2c>
 8019820:	b003      	add	sp, #12
 8019822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019824:	2204      	movs	r2, #4
 8019826:	4639      	mov	r1, r7
 8019828:	4620      	mov	r0, r4
 801982a:	b003      	add	sp, #12
 801982c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019830:	f006 bbd8 	b.w	801ffe4 <ucdr_serialize_array_uint8_t>

08019834 <uxr_deserialize_message_header>:
 8019834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019836:	4616      	mov	r6, r2
 8019838:	b083      	sub	sp, #12
 801983a:	4604      	mov	r4, r0
 801983c:	460d      	mov	r5, r1
 801983e:	9301      	str	r3, [sp, #4]
 8019840:	9f08      	ldr	r7, [sp, #32]
 8019842:	f7f9 fa4d 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 8019846:	4631      	mov	r1, r6
 8019848:	4620      	mov	r0, r4
 801984a:	f7f9 fa49 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801984e:	9a01      	ldr	r2, [sp, #4]
 8019850:	2101      	movs	r1, #1
 8019852:	4620      	mov	r0, r4
 8019854:	f7f9 fbce 	bl	8012ff4 <ucdr_deserialize_endian_uint16_t>
 8019858:	f995 3000 	ldrsb.w	r3, [r5]
 801985c:	2b00      	cmp	r3, #0
 801985e:	da01      	bge.n	8019864 <uxr_deserialize_message_header+0x30>
 8019860:	b003      	add	sp, #12
 8019862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019864:	2204      	movs	r2, #4
 8019866:	4639      	mov	r1, r7
 8019868:	4620      	mov	r0, r4
 801986a:	b003      	add	sp, #12
 801986c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019870:	f006 bc1c 	b.w	80200ac <ucdr_deserialize_array_uint8_t>

08019874 <uxr_serialize_submessage_header>:
 8019874:	b530      	push	{r4, r5, lr}
 8019876:	4615      	mov	r5, r2
 8019878:	b083      	sub	sp, #12
 801987a:	4604      	mov	r4, r0
 801987c:	9301      	str	r3, [sp, #4]
 801987e:	f7f9 fa19 	bl	8012cb4 <ucdr_serialize_uint8_t>
 8019882:	4629      	mov	r1, r5
 8019884:	4620      	mov	r0, r4
 8019886:	f7f9 fa15 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801988a:	9a01      	ldr	r2, [sp, #4]
 801988c:	2101      	movs	r1, #1
 801988e:	4620      	mov	r0, r4
 8019890:	b003      	add	sp, #12
 8019892:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019896:	f7f9 bab9 	b.w	8012e0c <ucdr_serialize_endian_uint16_t>
 801989a:	bf00      	nop

0801989c <uxr_deserialize_submessage_header>:
 801989c:	b530      	push	{r4, r5, lr}
 801989e:	4615      	mov	r5, r2
 80198a0:	b083      	sub	sp, #12
 80198a2:	4604      	mov	r4, r0
 80198a4:	9301      	str	r3, [sp, #4]
 80198a6:	f7f9 fa1b 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 80198aa:	4629      	mov	r1, r5
 80198ac:	4620      	mov	r0, r4
 80198ae:	f7f9 fa17 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 80198b2:	9a01      	ldr	r2, [sp, #4]
 80198b4:	2101      	movs	r1, #1
 80198b6:	4620      	mov	r0, r4
 80198b8:	b003      	add	sp, #12
 80198ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198be:	f7f9 bb99 	b.w	8012ff4 <ucdr_deserialize_endian_uint16_t>
 80198c2:	bf00      	nop

080198c4 <uxr_serialize_CLIENT_Representation>:
 80198c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198c8:	2204      	movs	r2, #4
 80198ca:	460e      	mov	r6, r1
 80198cc:	4605      	mov	r5, r0
 80198ce:	f006 fb89 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 80198d2:	4607      	mov	r7, r0
 80198d4:	2202      	movs	r2, #2
 80198d6:	1d31      	adds	r1, r6, #4
 80198d8:	4628      	mov	r0, r5
 80198da:	f006 fb83 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 80198de:	4038      	ands	r0, r7
 80198e0:	2202      	movs	r2, #2
 80198e2:	1db1      	adds	r1, r6, #6
 80198e4:	b2c7      	uxtb	r7, r0
 80198e6:	4628      	mov	r0, r5
 80198e8:	f006 fb7c 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 80198ec:	2204      	movs	r2, #4
 80198ee:	4007      	ands	r7, r0
 80198f0:	f106 0108 	add.w	r1, r6, #8
 80198f4:	4628      	mov	r0, r5
 80198f6:	f006 fb75 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 80198fa:	4007      	ands	r7, r0
 80198fc:	7b31      	ldrb	r1, [r6, #12]
 80198fe:	4628      	mov	r0, r5
 8019900:	f7f9 f9d8 	bl	8012cb4 <ucdr_serialize_uint8_t>
 8019904:	7b71      	ldrb	r1, [r6, #13]
 8019906:	4007      	ands	r7, r0
 8019908:	4628      	mov	r0, r5
 801990a:	f7f9 f9a5 	bl	8012c58 <ucdr_serialize_bool>
 801990e:	7b73      	ldrb	r3, [r6, #13]
 8019910:	ea07 0800 	and.w	r8, r7, r0
 8019914:	b93b      	cbnz	r3, 8019926 <uxr_serialize_CLIENT_Representation+0x62>
 8019916:	8bb1      	ldrh	r1, [r6, #28]
 8019918:	4628      	mov	r0, r5
 801991a:	f7f9 f9f7 	bl	8012d0c <ucdr_serialize_uint16_t>
 801991e:	ea08 0000 	and.w	r0, r8, r0
 8019922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019926:	6931      	ldr	r1, [r6, #16]
 8019928:	4628      	mov	r0, r5
 801992a:	f7f9 fbd9 	bl	80130e0 <ucdr_serialize_uint32_t>
 801992e:	6933      	ldr	r3, [r6, #16]
 8019930:	b1e3      	cbz	r3, 801996c <uxr_serialize_CLIENT_Representation+0xa8>
 8019932:	b1c0      	cbz	r0, 8019966 <uxr_serialize_CLIENT_Representation+0xa2>
 8019934:	4637      	mov	r7, r6
 8019936:	f04f 0900 	mov.w	r9, #0
 801993a:	e000      	b.n	801993e <uxr_serialize_CLIENT_Representation+0x7a>
 801993c:	b19c      	cbz	r4, 8019966 <uxr_serialize_CLIENT_Representation+0xa2>
 801993e:	6979      	ldr	r1, [r7, #20]
 8019940:	4628      	mov	r0, r5
 8019942:	f006 fc1b 	bl	802017c <ucdr_serialize_string>
 8019946:	69b9      	ldr	r1, [r7, #24]
 8019948:	4604      	mov	r4, r0
 801994a:	4628      	mov	r0, r5
 801994c:	f006 fc16 	bl	802017c <ucdr_serialize_string>
 8019950:	f109 0901 	add.w	r9, r9, #1
 8019954:	6933      	ldr	r3, [r6, #16]
 8019956:	4004      	ands	r4, r0
 8019958:	3708      	adds	r7, #8
 801995a:	4599      	cmp	r9, r3
 801995c:	b2e4      	uxtb	r4, r4
 801995e:	d3ed      	bcc.n	801993c <uxr_serialize_CLIENT_Representation+0x78>
 8019960:	ea08 0804 	and.w	r8, r8, r4
 8019964:	e7d7      	b.n	8019916 <uxr_serialize_CLIENT_Representation+0x52>
 8019966:	f04f 0800 	mov.w	r8, #0
 801996a:	e7d4      	b.n	8019916 <uxr_serialize_CLIENT_Representation+0x52>
 801996c:	ea08 0800 	and.w	r8, r8, r0
 8019970:	e7d1      	b.n	8019916 <uxr_serialize_CLIENT_Representation+0x52>
 8019972:	bf00      	nop

08019974 <uxr_deserialize_CLIENT_Representation>:
 8019974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019978:	2204      	movs	r2, #4
 801997a:	460c      	mov	r4, r1
 801997c:	4605      	mov	r5, r0
 801997e:	f006 fb95 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 8019982:	4607      	mov	r7, r0
 8019984:	2202      	movs	r2, #2
 8019986:	1d21      	adds	r1, r4, #4
 8019988:	4628      	mov	r0, r5
 801998a:	f006 fb8f 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801998e:	4038      	ands	r0, r7
 8019990:	2202      	movs	r2, #2
 8019992:	1da1      	adds	r1, r4, #6
 8019994:	b2c6      	uxtb	r6, r0
 8019996:	4628      	mov	r0, r5
 8019998:	f006 fb88 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801999c:	2204      	movs	r2, #4
 801999e:	4006      	ands	r6, r0
 80199a0:	f104 0108 	add.w	r1, r4, #8
 80199a4:	4628      	mov	r0, r5
 80199a6:	f006 fb81 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 80199aa:	4006      	ands	r6, r0
 80199ac:	f104 010c 	add.w	r1, r4, #12
 80199b0:	4628      	mov	r0, r5
 80199b2:	f7f9 f995 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 80199b6:	f104 010d 	add.w	r1, r4, #13
 80199ba:	ea06 0700 	and.w	r7, r6, r0
 80199be:	4628      	mov	r0, r5
 80199c0:	f7f9 f960 	bl	8012c84 <ucdr_deserialize_bool>
 80199c4:	7b63      	ldrb	r3, [r4, #13]
 80199c6:	4007      	ands	r7, r0
 80199c8:	b93b      	cbnz	r3, 80199da <uxr_deserialize_CLIENT_Representation+0x66>
 80199ca:	f104 011c 	add.w	r1, r4, #28
 80199ce:	4628      	mov	r0, r5
 80199d0:	f7f9 fa9c 	bl	8012f0c <ucdr_deserialize_uint16_t>
 80199d4:	4038      	ands	r0, r7
 80199d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199da:	f104 0110 	add.w	r1, r4, #16
 80199de:	4628      	mov	r0, r5
 80199e0:	f7f9 fcae 	bl	8013340 <ucdr_deserialize_uint32_t>
 80199e4:	6923      	ldr	r3, [r4, #16]
 80199e6:	2b01      	cmp	r3, #1
 80199e8:	d903      	bls.n	80199f2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80199ea:	2301      	movs	r3, #1
 80199ec:	2700      	movs	r7, #0
 80199ee:	75ab      	strb	r3, [r5, #22]
 80199f0:	e7eb      	b.n	80199ca <uxr_deserialize_CLIENT_Representation+0x56>
 80199f2:	b30b      	cbz	r3, 8019a38 <uxr_deserialize_CLIENT_Representation+0xc4>
 80199f4:	b1f0      	cbz	r0, 8019a34 <uxr_deserialize_CLIENT_Representation+0xc0>
 80199f6:	46a0      	mov	r8, r4
 80199f8:	f04f 0900 	mov.w	r9, #0
 80199fc:	e000      	b.n	8019a00 <uxr_deserialize_CLIENT_Representation+0x8c>
 80199fe:	b1ce      	cbz	r6, 8019a34 <uxr_deserialize_CLIENT_Representation+0xc0>
 8019a00:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8019a04:	f108 0808 	add.w	r8, r8, #8
 8019a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a0c:	4628      	mov	r0, r5
 8019a0e:	f006 fbc5 	bl	802019c <ucdr_deserialize_string>
 8019a12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019a16:	4606      	mov	r6, r0
 8019a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a1c:	4628      	mov	r0, r5
 8019a1e:	f109 0901 	add.w	r9, r9, #1
 8019a22:	f006 fbbb 	bl	802019c <ucdr_deserialize_string>
 8019a26:	6923      	ldr	r3, [r4, #16]
 8019a28:	4006      	ands	r6, r0
 8019a2a:	4599      	cmp	r9, r3
 8019a2c:	b2f6      	uxtb	r6, r6
 8019a2e:	d3e6      	bcc.n	80199fe <uxr_deserialize_CLIENT_Representation+0x8a>
 8019a30:	4037      	ands	r7, r6
 8019a32:	e7ca      	b.n	80199ca <uxr_deserialize_CLIENT_Representation+0x56>
 8019a34:	2700      	movs	r7, #0
 8019a36:	e7c8      	b.n	80199ca <uxr_deserialize_CLIENT_Representation+0x56>
 8019a38:	4007      	ands	r7, r0
 8019a3a:	e7c6      	b.n	80199ca <uxr_deserialize_CLIENT_Representation+0x56>

08019a3c <uxr_serialize_AGENT_Representation>:
 8019a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a40:	2204      	movs	r2, #4
 8019a42:	460f      	mov	r7, r1
 8019a44:	4605      	mov	r5, r0
 8019a46:	f006 facd 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 8019a4a:	4604      	mov	r4, r0
 8019a4c:	2202      	movs	r2, #2
 8019a4e:	1d39      	adds	r1, r7, #4
 8019a50:	4628      	mov	r0, r5
 8019a52:	f006 fac7 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 8019a56:	4020      	ands	r0, r4
 8019a58:	2202      	movs	r2, #2
 8019a5a:	1db9      	adds	r1, r7, #6
 8019a5c:	b2c4      	uxtb	r4, r0
 8019a5e:	4628      	mov	r0, r5
 8019a60:	f006 fac0 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 8019a64:	7a39      	ldrb	r1, [r7, #8]
 8019a66:	4004      	ands	r4, r0
 8019a68:	4628      	mov	r0, r5
 8019a6a:	f7f9 f8f5 	bl	8012c58 <ucdr_serialize_bool>
 8019a6e:	7a3b      	ldrb	r3, [r7, #8]
 8019a70:	ea00 0804 	and.w	r8, r0, r4
 8019a74:	b913      	cbnz	r3, 8019a7c <uxr_serialize_AGENT_Representation+0x40>
 8019a76:	4640      	mov	r0, r8
 8019a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a7c:	68f9      	ldr	r1, [r7, #12]
 8019a7e:	4628      	mov	r0, r5
 8019a80:	f7f9 fb2e 	bl	80130e0 <ucdr_serialize_uint32_t>
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	b303      	cbz	r3, 8019aca <uxr_serialize_AGENT_Representation+0x8e>
 8019a88:	b1d0      	cbz	r0, 8019ac0 <uxr_serialize_AGENT_Representation+0x84>
 8019a8a:	463e      	mov	r6, r7
 8019a8c:	f04f 0900 	mov.w	r9, #0
 8019a90:	e000      	b.n	8019a94 <uxr_serialize_AGENT_Representation+0x58>
 8019a92:	b1ac      	cbz	r4, 8019ac0 <uxr_serialize_AGENT_Representation+0x84>
 8019a94:	6931      	ldr	r1, [r6, #16]
 8019a96:	4628      	mov	r0, r5
 8019a98:	f006 fb70 	bl	802017c <ucdr_serialize_string>
 8019a9c:	6971      	ldr	r1, [r6, #20]
 8019a9e:	4604      	mov	r4, r0
 8019aa0:	4628      	mov	r0, r5
 8019aa2:	f006 fb6b 	bl	802017c <ucdr_serialize_string>
 8019aa6:	f109 0901 	add.w	r9, r9, #1
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	4004      	ands	r4, r0
 8019aae:	3608      	adds	r6, #8
 8019ab0:	4599      	cmp	r9, r3
 8019ab2:	b2e4      	uxtb	r4, r4
 8019ab4:	d3ed      	bcc.n	8019a92 <uxr_serialize_AGENT_Representation+0x56>
 8019ab6:	ea08 0804 	and.w	r8, r8, r4
 8019aba:	4640      	mov	r0, r8
 8019abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ac0:	f04f 0800 	mov.w	r8, #0
 8019ac4:	4640      	mov	r0, r8
 8019ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019aca:	ea08 0800 	and.w	r8, r8, r0
 8019ace:	e7d2      	b.n	8019a76 <uxr_serialize_AGENT_Representation+0x3a>

08019ad0 <uxr_serialize_DATAWRITER_Representation>:
 8019ad0:	b570      	push	{r4, r5, r6, lr}
 8019ad2:	460d      	mov	r5, r1
 8019ad4:	7809      	ldrb	r1, [r1, #0]
 8019ad6:	4606      	mov	r6, r0
 8019ad8:	f7f9 f8ec 	bl	8012cb4 <ucdr_serialize_uint8_t>
 8019adc:	4604      	mov	r4, r0
 8019ade:	b130      	cbz	r0, 8019aee <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019ae0:	782b      	ldrb	r3, [r5, #0]
 8019ae2:	2b02      	cmp	r3, #2
 8019ae4:	d00c      	beq.n	8019b00 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019ae6:	2b03      	cmp	r3, #3
 8019ae8:	d010      	beq.n	8019b0c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8019aea:	2b01      	cmp	r3, #1
 8019aec:	d008      	beq.n	8019b00 <uxr_serialize_DATAWRITER_Representation+0x30>
 8019aee:	2202      	movs	r2, #2
 8019af0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019af4:	4630      	mov	r0, r6
 8019af6:	f006 fa75 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 8019afa:	4020      	ands	r0, r4
 8019afc:	b2c0      	uxtb	r0, r0
 8019afe:	bd70      	pop	{r4, r5, r6, pc}
 8019b00:	6869      	ldr	r1, [r5, #4]
 8019b02:	4630      	mov	r0, r6
 8019b04:	f006 fb3a 	bl	802017c <ucdr_serialize_string>
 8019b08:	4604      	mov	r4, r0
 8019b0a:	e7f0      	b.n	8019aee <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019b0c:	4629      	mov	r1, r5
 8019b0e:	4630      	mov	r0, r6
 8019b10:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019b14:	3104      	adds	r1, #4
 8019b16:	f7fd f947 	bl	8016da8 <ucdr_serialize_sequence_uint8_t>
 8019b1a:	4604      	mov	r4, r0
 8019b1c:	e7e7      	b.n	8019aee <uxr_serialize_DATAWRITER_Representation+0x1e>
 8019b1e:	bf00      	nop

08019b20 <uxr_serialize_ObjectVariant.part.0>:
 8019b20:	b570      	push	{r4, r5, r6, lr}
 8019b22:	780b      	ldrb	r3, [r1, #0]
 8019b24:	460c      	mov	r4, r1
 8019b26:	4605      	mov	r5, r0
 8019b28:	3b01      	subs	r3, #1
 8019b2a:	2b0d      	cmp	r3, #13
 8019b2c:	d854      	bhi.n	8019bd8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019b2e:	e8df f003 	tbb	[pc, r3]
 8019b32:	0730      	.short	0x0730
 8019b34:	07071b1b 	.word	0x07071b1b
 8019b38:	0c530707 	.word	0x0c530707
 8019b3c:	494e0c0c 	.word	0x494e0c0c
 8019b40:	3104      	adds	r1, #4
 8019b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b46:	f7ff bfc3 	b.w	8019ad0 <uxr_serialize_DATAWRITER_Representation>
 8019b4a:	7909      	ldrb	r1, [r1, #4]
 8019b4c:	f7f9 f8b2 	bl	8012cb4 <ucdr_serialize_uint8_t>
 8019b50:	b1e8      	cbz	r0, 8019b8e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8019b52:	7923      	ldrb	r3, [r4, #4]
 8019b54:	2b01      	cmp	r3, #1
 8019b56:	d001      	beq.n	8019b5c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8019b58:	2b02      	cmp	r3, #2
 8019b5a:	d13d      	bne.n	8019bd8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8019b5c:	68a1      	ldr	r1, [r4, #8]
 8019b5e:	4628      	mov	r0, r5
 8019b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b64:	f006 bb0a 	b.w	802017c <ucdr_serialize_string>
 8019b68:	7909      	ldrb	r1, [r1, #4]
 8019b6a:	f7f9 f8a3 	bl	8012cb4 <ucdr_serialize_uint8_t>
 8019b6e:	4606      	mov	r6, r0
 8019b70:	b120      	cbz	r0, 8019b7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019b72:	7923      	ldrb	r3, [r4, #4]
 8019b74:	2b02      	cmp	r3, #2
 8019b76:	d039      	beq.n	8019bec <uxr_serialize_ObjectVariant.part.0+0xcc>
 8019b78:	2b03      	cmp	r3, #3
 8019b7a:	d02f      	beq.n	8019bdc <uxr_serialize_ObjectVariant.part.0+0xbc>
 8019b7c:	2202      	movs	r2, #2
 8019b7e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8019b82:	4628      	mov	r0, r5
 8019b84:	f006 fa2e 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 8019b88:	4030      	ands	r0, r6
 8019b8a:	b2c0      	uxtb	r0, r0
 8019b8c:	bd70      	pop	{r4, r5, r6, pc}
 8019b8e:	2000      	movs	r0, #0
 8019b90:	bd70      	pop	{r4, r5, r6, pc}
 8019b92:	7909      	ldrb	r1, [r1, #4]
 8019b94:	f7f9 f88e 	bl	8012cb4 <ucdr_serialize_uint8_t>
 8019b98:	4606      	mov	r6, r0
 8019b9a:	b158      	cbz	r0, 8019bb4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019b9c:	7923      	ldrb	r3, [r4, #4]
 8019b9e:	2b02      	cmp	r3, #2
 8019ba0:	d003      	beq.n	8019baa <uxr_serialize_ObjectVariant.part.0+0x8a>
 8019ba2:	2b03      	cmp	r3, #3
 8019ba4:	d028      	beq.n	8019bf8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8019ba6:	2b01      	cmp	r3, #1
 8019ba8:	d104      	bne.n	8019bb4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8019baa:	68a1      	ldr	r1, [r4, #8]
 8019bac:	4628      	mov	r0, r5
 8019bae:	f006 fae5 	bl	802017c <ucdr_serialize_string>
 8019bb2:	4606      	mov	r6, r0
 8019bb4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8019bb8:	4628      	mov	r0, r5
 8019bba:	f7f9 fdb7 	bl	801372c <ucdr_serialize_int16_t>
 8019bbe:	4030      	ands	r0, r6
 8019bc0:	b2c0      	uxtb	r0, r0
 8019bc2:	bd70      	pop	{r4, r5, r6, pc}
 8019bc4:	3104      	adds	r1, #4
 8019bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bca:	f7ff be7b 	b.w	80198c4 <uxr_serialize_CLIENT_Representation>
 8019bce:	3104      	adds	r1, #4
 8019bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bd4:	f7ff bf32 	b.w	8019a3c <uxr_serialize_AGENT_Representation>
 8019bd8:	2001      	movs	r0, #1
 8019bda:	bd70      	pop	{r4, r5, r6, pc}
 8019bdc:	68a2      	ldr	r2, [r4, #8]
 8019bde:	f104 010c 	add.w	r1, r4, #12
 8019be2:	4628      	mov	r0, r5
 8019be4:	f7fd f8e0 	bl	8016da8 <ucdr_serialize_sequence_uint8_t>
 8019be8:	4606      	mov	r6, r0
 8019bea:	e7c7      	b.n	8019b7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019bec:	68a1      	ldr	r1, [r4, #8]
 8019bee:	4628      	mov	r0, r5
 8019bf0:	f006 fac4 	bl	802017c <ucdr_serialize_string>
 8019bf4:	4606      	mov	r6, r0
 8019bf6:	e7c1      	b.n	8019b7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8019bf8:	68a2      	ldr	r2, [r4, #8]
 8019bfa:	f104 010c 	add.w	r1, r4, #12
 8019bfe:	4628      	mov	r0, r5
 8019c00:	f7fd f8d2 	bl	8016da8 <ucdr_serialize_sequence_uint8_t>
 8019c04:	4606      	mov	r6, r0
 8019c06:	e7d5      	b.n	8019bb4 <uxr_serialize_ObjectVariant.part.0+0x94>

08019c08 <uxr_deserialize_DATAWRITER_Representation>:
 8019c08:	b570      	push	{r4, r5, r6, lr}
 8019c0a:	4606      	mov	r6, r0
 8019c0c:	460d      	mov	r5, r1
 8019c0e:	f7f9 f867 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 8019c12:	4604      	mov	r4, r0
 8019c14:	b130      	cbz	r0, 8019c24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c16:	782b      	ldrb	r3, [r5, #0]
 8019c18:	2b02      	cmp	r3, #2
 8019c1a:	d00c      	beq.n	8019c36 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019c1c:	2b03      	cmp	r3, #3
 8019c1e:	d012      	beq.n	8019c46 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8019c20:	2b01      	cmp	r3, #1
 8019c22:	d008      	beq.n	8019c36 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8019c24:	2202      	movs	r2, #2
 8019c26:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8019c2a:	4630      	mov	r0, r6
 8019c2c:	f006 fa3e 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 8019c30:	4020      	ands	r0, r4
 8019c32:	b2c0      	uxtb	r0, r0
 8019c34:	bd70      	pop	{r4, r5, r6, pc}
 8019c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019c3a:	6869      	ldr	r1, [r5, #4]
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	f006 faad 	bl	802019c <ucdr_deserialize_string>
 8019c42:	4604      	mov	r4, r0
 8019c44:	e7ee      	b.n	8019c24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c46:	1d2b      	adds	r3, r5, #4
 8019c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019c4c:	f105 0108 	add.w	r1, r5, #8
 8019c50:	4630      	mov	r0, r6
 8019c52:	f7fd f8bb 	bl	8016dcc <ucdr_deserialize_sequence_uint8_t>
 8019c56:	4604      	mov	r4, r0
 8019c58:	e7e4      	b.n	8019c24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8019c5a:	bf00      	nop

08019c5c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8019c5c:	b570      	push	{r4, r5, r6, lr}
 8019c5e:	460d      	mov	r5, r1
 8019c60:	7809      	ldrb	r1, [r1, #0]
 8019c62:	4606      	mov	r6, r0
 8019c64:	f7f8 fff8 	bl	8012c58 <ucdr_serialize_bool>
 8019c68:	782b      	ldrb	r3, [r5, #0]
 8019c6a:	4604      	mov	r4, r0
 8019c6c:	b94b      	cbnz	r3, 8019c82 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8019c6e:	7a29      	ldrb	r1, [r5, #8]
 8019c70:	4630      	mov	r0, r6
 8019c72:	f7f8 fff1 	bl	8012c58 <ucdr_serialize_bool>
 8019c76:	7a2b      	ldrb	r3, [r5, #8]
 8019c78:	4004      	ands	r4, r0
 8019c7a:	b2e4      	uxtb	r4, r4
 8019c7c:	b943      	cbnz	r3, 8019c90 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8019c7e:	4620      	mov	r0, r4
 8019c80:	bd70      	pop	{r4, r5, r6, pc}
 8019c82:	6869      	ldr	r1, [r5, #4]
 8019c84:	4630      	mov	r0, r6
 8019c86:	f006 fa79 	bl	802017c <ucdr_serialize_string>
 8019c8a:	4004      	ands	r4, r0
 8019c8c:	b2e4      	uxtb	r4, r4
 8019c8e:	e7ee      	b.n	8019c6e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8019c90:	68e9      	ldr	r1, [r5, #12]
 8019c92:	4630      	mov	r0, r6
 8019c94:	f006 fa72 	bl	802017c <ucdr_serialize_string>
 8019c98:	4004      	ands	r4, r0
 8019c9a:	4620      	mov	r0, r4
 8019c9c:	bd70      	pop	{r4, r5, r6, pc}
 8019c9e:	bf00      	nop

08019ca0 <uxr_serialize_OBJK_Topic_Binary>:
 8019ca0:	b570      	push	{r4, r5, r6, lr}
 8019ca2:	460d      	mov	r5, r1
 8019ca4:	4606      	mov	r6, r0
 8019ca6:	6809      	ldr	r1, [r1, #0]
 8019ca8:	f006 fa68 	bl	802017c <ucdr_serialize_string>
 8019cac:	4604      	mov	r4, r0
 8019cae:	7929      	ldrb	r1, [r5, #4]
 8019cb0:	4630      	mov	r0, r6
 8019cb2:	f7f8 ffd1 	bl	8012c58 <ucdr_serialize_bool>
 8019cb6:	792b      	ldrb	r3, [r5, #4]
 8019cb8:	4004      	ands	r4, r0
 8019cba:	b2e4      	uxtb	r4, r4
 8019cbc:	b943      	cbnz	r3, 8019cd0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8019cbe:	7b29      	ldrb	r1, [r5, #12]
 8019cc0:	4630      	mov	r0, r6
 8019cc2:	f7f8 ffc9 	bl	8012c58 <ucdr_serialize_bool>
 8019cc6:	7b2b      	ldrb	r3, [r5, #12]
 8019cc8:	4004      	ands	r4, r0
 8019cca:	b93b      	cbnz	r3, 8019cdc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8019ccc:	4620      	mov	r0, r4
 8019cce:	bd70      	pop	{r4, r5, r6, pc}
 8019cd0:	68a9      	ldr	r1, [r5, #8]
 8019cd2:	4630      	mov	r0, r6
 8019cd4:	f006 fa52 	bl	802017c <ucdr_serialize_string>
 8019cd8:	4004      	ands	r4, r0
 8019cda:	e7f0      	b.n	8019cbe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8019cdc:	6929      	ldr	r1, [r5, #16]
 8019cde:	4630      	mov	r0, r6
 8019ce0:	f006 fa4c 	bl	802017c <ucdr_serialize_string>
 8019ce4:	4004      	ands	r4, r0
 8019ce6:	b2e4      	uxtb	r4, r4
 8019ce8:	4620      	mov	r0, r4
 8019cea:	bd70      	pop	{r4, r5, r6, pc}

08019cec <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8019cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cf0:	460c      	mov	r4, r1
 8019cf2:	7809      	ldrb	r1, [r1, #0]
 8019cf4:	4606      	mov	r6, r0
 8019cf6:	f7f8 ffaf 	bl	8012c58 <ucdr_serialize_bool>
 8019cfa:	7823      	ldrb	r3, [r4, #0]
 8019cfc:	4605      	mov	r5, r0
 8019cfe:	b96b      	cbnz	r3, 8019d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8019d00:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019d04:	4630      	mov	r0, r6
 8019d06:	f7f8 ffa7 	bl	8012c58 <ucdr_serialize_bool>
 8019d0a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019d0e:	4005      	ands	r5, r0
 8019d10:	b2ed      	uxtb	r5, r5
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d169      	bne.n	8019dea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8019d16:	4628      	mov	r0, r5
 8019d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d1c:	6861      	ldr	r1, [r4, #4]
 8019d1e:	4630      	mov	r0, r6
 8019d20:	f7f9 f9de 	bl	80130e0 <ucdr_serialize_uint32_t>
 8019d24:	6863      	ldr	r3, [r4, #4]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d06b      	beq.n	8019e02 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8019d2a:	2800      	cmp	r0, #0
 8019d2c:	d067      	beq.n	8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d2e:	68a1      	ldr	r1, [r4, #8]
 8019d30:	4630      	mov	r0, r6
 8019d32:	f006 fa23 	bl	802017c <ucdr_serialize_string>
 8019d36:	6863      	ldr	r3, [r4, #4]
 8019d38:	2b01      	cmp	r3, #1
 8019d3a:	d953      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	d05e      	beq.n	8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d40:	68e1      	ldr	r1, [r4, #12]
 8019d42:	4630      	mov	r0, r6
 8019d44:	f006 fa1a 	bl	802017c <ucdr_serialize_string>
 8019d48:	6863      	ldr	r3, [r4, #4]
 8019d4a:	2b02      	cmp	r3, #2
 8019d4c:	d94a      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d4e:	2800      	cmp	r0, #0
 8019d50:	d055      	beq.n	8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d52:	6921      	ldr	r1, [r4, #16]
 8019d54:	4630      	mov	r0, r6
 8019d56:	f006 fa11 	bl	802017c <ucdr_serialize_string>
 8019d5a:	6863      	ldr	r3, [r4, #4]
 8019d5c:	2b03      	cmp	r3, #3
 8019d5e:	d941      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d60:	2800      	cmp	r0, #0
 8019d62:	d04c      	beq.n	8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d64:	6961      	ldr	r1, [r4, #20]
 8019d66:	4630      	mov	r0, r6
 8019d68:	f006 fa08 	bl	802017c <ucdr_serialize_string>
 8019d6c:	6863      	ldr	r3, [r4, #4]
 8019d6e:	2b04      	cmp	r3, #4
 8019d70:	d938      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d72:	2800      	cmp	r0, #0
 8019d74:	d043      	beq.n	8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d76:	69a1      	ldr	r1, [r4, #24]
 8019d78:	4630      	mov	r0, r6
 8019d7a:	f006 f9ff 	bl	802017c <ucdr_serialize_string>
 8019d7e:	6863      	ldr	r3, [r4, #4]
 8019d80:	2b05      	cmp	r3, #5
 8019d82:	d92f      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d84:	2800      	cmp	r0, #0
 8019d86:	d03a      	beq.n	8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d88:	69e1      	ldr	r1, [r4, #28]
 8019d8a:	4630      	mov	r0, r6
 8019d8c:	f006 f9f6 	bl	802017c <ucdr_serialize_string>
 8019d90:	6863      	ldr	r3, [r4, #4]
 8019d92:	2b06      	cmp	r3, #6
 8019d94:	d926      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019d96:	b390      	cbz	r0, 8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019d98:	6a21      	ldr	r1, [r4, #32]
 8019d9a:	4630      	mov	r0, r6
 8019d9c:	f006 f9ee 	bl	802017c <ucdr_serialize_string>
 8019da0:	6863      	ldr	r3, [r4, #4]
 8019da2:	2b07      	cmp	r3, #7
 8019da4:	d91e      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019da6:	b350      	cbz	r0, 8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019da8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019daa:	4630      	mov	r0, r6
 8019dac:	f006 f9e6 	bl	802017c <ucdr_serialize_string>
 8019db0:	6863      	ldr	r3, [r4, #4]
 8019db2:	2b08      	cmp	r3, #8
 8019db4:	d916      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019db6:	b310      	cbz	r0, 8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019db8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019dba:	4630      	mov	r0, r6
 8019dbc:	f006 f9de 	bl	802017c <ucdr_serialize_string>
 8019dc0:	6863      	ldr	r3, [r4, #4]
 8019dc2:	2b09      	cmp	r3, #9
 8019dc4:	d90e      	bls.n	8019de4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8019dc6:	b1d0      	cbz	r0, 8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019dc8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019dcc:	2709      	movs	r7, #9
 8019dce:	e000      	b.n	8019dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8019dd0:	b1a8      	cbz	r0, 8019dfe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8019dd2:	f858 1b04 	ldr.w	r1, [r8], #4
 8019dd6:	4630      	mov	r0, r6
 8019dd8:	f006 f9d0 	bl	802017c <ucdr_serialize_string>
 8019ddc:	3701      	adds	r7, #1
 8019dde:	6862      	ldr	r2, [r4, #4]
 8019de0:	4297      	cmp	r7, r2
 8019de2:	d3f5      	bcc.n	8019dd0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8019de4:	4005      	ands	r5, r0
 8019de6:	b2ed      	uxtb	r5, r5
 8019de8:	e78a      	b.n	8019d00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019dea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019dec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019df0:	4630      	mov	r0, r6
 8019df2:	f7fc ffd9 	bl	8016da8 <ucdr_serialize_sequence_uint8_t>
 8019df6:	4005      	ands	r5, r0
 8019df8:	4628      	mov	r0, r5
 8019dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dfe:	2500      	movs	r5, #0
 8019e00:	e77e      	b.n	8019d00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8019e02:	4028      	ands	r0, r5
 8019e04:	b2c5      	uxtb	r5, r0
 8019e06:	e77b      	b.n	8019d00 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08019e08 <uxr_serialize_OBJK_Publisher_Binary>:
 8019e08:	b570      	push	{r4, r5, r6, lr}
 8019e0a:	460d      	mov	r5, r1
 8019e0c:	7809      	ldrb	r1, [r1, #0]
 8019e0e:	4606      	mov	r6, r0
 8019e10:	f7f8 ff22 	bl	8012c58 <ucdr_serialize_bool>
 8019e14:	782b      	ldrb	r3, [r5, #0]
 8019e16:	4604      	mov	r4, r0
 8019e18:	b94b      	cbnz	r3, 8019e2e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8019e1a:	7a29      	ldrb	r1, [r5, #8]
 8019e1c:	4630      	mov	r0, r6
 8019e1e:	f7f8 ff1b 	bl	8012c58 <ucdr_serialize_bool>
 8019e22:	7a2b      	ldrb	r3, [r5, #8]
 8019e24:	4004      	ands	r4, r0
 8019e26:	b2e4      	uxtb	r4, r4
 8019e28:	b943      	cbnz	r3, 8019e3c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8019e2a:	4620      	mov	r0, r4
 8019e2c:	bd70      	pop	{r4, r5, r6, pc}
 8019e2e:	6869      	ldr	r1, [r5, #4]
 8019e30:	4630      	mov	r0, r6
 8019e32:	f006 f9a3 	bl	802017c <ucdr_serialize_string>
 8019e36:	4004      	ands	r4, r0
 8019e38:	b2e4      	uxtb	r4, r4
 8019e3a:	e7ee      	b.n	8019e1a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8019e3c:	f105 010c 	add.w	r1, r5, #12
 8019e40:	4630      	mov	r0, r6
 8019e42:	f7ff ff53 	bl	8019cec <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8019e46:	4004      	ands	r4, r0
 8019e48:	4620      	mov	r0, r4
 8019e4a:	bd70      	pop	{r4, r5, r6, pc}

08019e4c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8019e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e50:	460c      	mov	r4, r1
 8019e52:	7809      	ldrb	r1, [r1, #0]
 8019e54:	4606      	mov	r6, r0
 8019e56:	f7f8 feff 	bl	8012c58 <ucdr_serialize_bool>
 8019e5a:	7823      	ldrb	r3, [r4, #0]
 8019e5c:	4605      	mov	r5, r0
 8019e5e:	b96b      	cbnz	r3, 8019e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8019e60:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8019e64:	4630      	mov	r0, r6
 8019e66:	f7f8 fef7 	bl	8012c58 <ucdr_serialize_bool>
 8019e6a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019e6e:	4005      	ands	r5, r0
 8019e70:	b2ed      	uxtb	r5, r5
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d169      	bne.n	8019f4a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8019e76:	4628      	mov	r0, r5
 8019e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e7c:	6861      	ldr	r1, [r4, #4]
 8019e7e:	4630      	mov	r0, r6
 8019e80:	f7f9 f92e 	bl	80130e0 <ucdr_serialize_uint32_t>
 8019e84:	6863      	ldr	r3, [r4, #4]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d06b      	beq.n	8019f62 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8019e8a:	2800      	cmp	r0, #0
 8019e8c:	d067      	beq.n	8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019e8e:	68a1      	ldr	r1, [r4, #8]
 8019e90:	4630      	mov	r0, r6
 8019e92:	f006 f973 	bl	802017c <ucdr_serialize_string>
 8019e96:	6863      	ldr	r3, [r4, #4]
 8019e98:	2b01      	cmp	r3, #1
 8019e9a:	d953      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019e9c:	2800      	cmp	r0, #0
 8019e9e:	d05e      	beq.n	8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ea0:	68e1      	ldr	r1, [r4, #12]
 8019ea2:	4630      	mov	r0, r6
 8019ea4:	f006 f96a 	bl	802017c <ucdr_serialize_string>
 8019ea8:	6863      	ldr	r3, [r4, #4]
 8019eaa:	2b02      	cmp	r3, #2
 8019eac:	d94a      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019eae:	2800      	cmp	r0, #0
 8019eb0:	d055      	beq.n	8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019eb2:	6921      	ldr	r1, [r4, #16]
 8019eb4:	4630      	mov	r0, r6
 8019eb6:	f006 f961 	bl	802017c <ucdr_serialize_string>
 8019eba:	6863      	ldr	r3, [r4, #4]
 8019ebc:	2b03      	cmp	r3, #3
 8019ebe:	d941      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ec0:	2800      	cmp	r0, #0
 8019ec2:	d04c      	beq.n	8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ec4:	6961      	ldr	r1, [r4, #20]
 8019ec6:	4630      	mov	r0, r6
 8019ec8:	f006 f958 	bl	802017c <ucdr_serialize_string>
 8019ecc:	6863      	ldr	r3, [r4, #4]
 8019ece:	2b04      	cmp	r3, #4
 8019ed0:	d938      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ed2:	2800      	cmp	r0, #0
 8019ed4:	d043      	beq.n	8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ed6:	69a1      	ldr	r1, [r4, #24]
 8019ed8:	4630      	mov	r0, r6
 8019eda:	f006 f94f 	bl	802017c <ucdr_serialize_string>
 8019ede:	6863      	ldr	r3, [r4, #4]
 8019ee0:	2b05      	cmp	r3, #5
 8019ee2:	d92f      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ee4:	2800      	cmp	r0, #0
 8019ee6:	d03a      	beq.n	8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ee8:	69e1      	ldr	r1, [r4, #28]
 8019eea:	4630      	mov	r0, r6
 8019eec:	f006 f946 	bl	802017c <ucdr_serialize_string>
 8019ef0:	6863      	ldr	r3, [r4, #4]
 8019ef2:	2b06      	cmp	r3, #6
 8019ef4:	d926      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019ef6:	b390      	cbz	r0, 8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019ef8:	6a21      	ldr	r1, [r4, #32]
 8019efa:	4630      	mov	r0, r6
 8019efc:	f006 f93e 	bl	802017c <ucdr_serialize_string>
 8019f00:	6863      	ldr	r3, [r4, #4]
 8019f02:	2b07      	cmp	r3, #7
 8019f04:	d91e      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f06:	b350      	cbz	r0, 8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019f0a:	4630      	mov	r0, r6
 8019f0c:	f006 f936 	bl	802017c <ucdr_serialize_string>
 8019f10:	6863      	ldr	r3, [r4, #4]
 8019f12:	2b08      	cmp	r3, #8
 8019f14:	d916      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f16:	b310      	cbz	r0, 8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f18:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8019f1a:	4630      	mov	r0, r6
 8019f1c:	f006 f92e 	bl	802017c <ucdr_serialize_string>
 8019f20:	6863      	ldr	r3, [r4, #4]
 8019f22:	2b09      	cmp	r3, #9
 8019f24:	d90e      	bls.n	8019f44 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8019f26:	b1d0      	cbz	r0, 8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f28:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8019f2c:	2709      	movs	r7, #9
 8019f2e:	e000      	b.n	8019f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8019f30:	b1a8      	cbz	r0, 8019f5e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8019f32:	f858 1b04 	ldr.w	r1, [r8], #4
 8019f36:	4630      	mov	r0, r6
 8019f38:	f006 f920 	bl	802017c <ucdr_serialize_string>
 8019f3c:	3701      	adds	r7, #1
 8019f3e:	6862      	ldr	r2, [r4, #4]
 8019f40:	4297      	cmp	r7, r2
 8019f42:	d3f5      	bcc.n	8019f30 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8019f44:	4005      	ands	r5, r0
 8019f46:	b2ed      	uxtb	r5, r5
 8019f48:	e78a      	b.n	8019e60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019f4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019f4c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019f50:	4630      	mov	r0, r6
 8019f52:	f7fc ff29 	bl	8016da8 <ucdr_serialize_sequence_uint8_t>
 8019f56:	4005      	ands	r5, r0
 8019f58:	4628      	mov	r0, r5
 8019f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f5e:	2500      	movs	r5, #0
 8019f60:	e77e      	b.n	8019e60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8019f62:	4028      	ands	r0, r5
 8019f64:	b2c5      	uxtb	r5, r0
 8019f66:	e77b      	b.n	8019e60 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08019f68 <uxr_serialize_OBJK_Subscriber_Binary>:
 8019f68:	b570      	push	{r4, r5, r6, lr}
 8019f6a:	460d      	mov	r5, r1
 8019f6c:	7809      	ldrb	r1, [r1, #0]
 8019f6e:	4606      	mov	r6, r0
 8019f70:	f7f8 fe72 	bl	8012c58 <ucdr_serialize_bool>
 8019f74:	782b      	ldrb	r3, [r5, #0]
 8019f76:	4604      	mov	r4, r0
 8019f78:	b94b      	cbnz	r3, 8019f8e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8019f7a:	7a29      	ldrb	r1, [r5, #8]
 8019f7c:	4630      	mov	r0, r6
 8019f7e:	f7f8 fe6b 	bl	8012c58 <ucdr_serialize_bool>
 8019f82:	7a2b      	ldrb	r3, [r5, #8]
 8019f84:	4004      	ands	r4, r0
 8019f86:	b2e4      	uxtb	r4, r4
 8019f88:	b943      	cbnz	r3, 8019f9c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8019f8a:	4620      	mov	r0, r4
 8019f8c:	bd70      	pop	{r4, r5, r6, pc}
 8019f8e:	6869      	ldr	r1, [r5, #4]
 8019f90:	4630      	mov	r0, r6
 8019f92:	f006 f8f3 	bl	802017c <ucdr_serialize_string>
 8019f96:	4004      	ands	r4, r0
 8019f98:	b2e4      	uxtb	r4, r4
 8019f9a:	e7ee      	b.n	8019f7a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8019f9c:	f105 010c 	add.w	r1, r5, #12
 8019fa0:	4630      	mov	r0, r6
 8019fa2:	f7ff ff53 	bl	8019e4c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8019fa6:	4004      	ands	r4, r0
 8019fa8:	4620      	mov	r0, r4
 8019faa:	bd70      	pop	{r4, r5, r6, pc}

08019fac <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8019fac:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8019fb0:	4688      	mov	r8, r1
 8019fb2:	4681      	mov	r9, r0
 8019fb4:	8809      	ldrh	r1, [r1, #0]
 8019fb6:	f7f8 fea9 	bl	8012d0c <ucdr_serialize_uint16_t>
 8019fba:	4606      	mov	r6, r0
 8019fbc:	f898 1002 	ldrb.w	r1, [r8, #2]
 8019fc0:	4648      	mov	r0, r9
 8019fc2:	f7f8 fe49 	bl	8012c58 <ucdr_serialize_bool>
 8019fc6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8019fca:	4006      	ands	r6, r0
 8019fcc:	b2f5      	uxtb	r5, r6
 8019fce:	b9eb      	cbnz	r3, 801a00c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8019fd0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019fd4:	4648      	mov	r0, r9
 8019fd6:	f7f8 fe3f 	bl	8012c58 <ucdr_serialize_bool>
 8019fda:	f898 3006 	ldrb.w	r3, [r8, #6]
 8019fde:	4005      	ands	r5, r0
 8019fe0:	bb7b      	cbnz	r3, 801a042 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8019fe2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8019fe6:	4648      	mov	r0, r9
 8019fe8:	f7f8 fe36 	bl	8012c58 <ucdr_serialize_bool>
 8019fec:	f898 300c 	ldrb.w	r3, [r8, #12]
 8019ff0:	4005      	ands	r5, r0
 8019ff2:	b9f3      	cbnz	r3, 801a032 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8019ff4:	f898 1014 	ldrb.w	r1, [r8, #20]
 8019ff8:	4648      	mov	r0, r9
 8019ffa:	f7f8 fe2d 	bl	8012c58 <ucdr_serialize_bool>
 8019ffe:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a002:	4005      	ands	r5, r0
 801a004:	b94b      	cbnz	r3, 801a01a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a006:	4628      	mov	r0, r5
 801a008:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a00c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a010:	4648      	mov	r0, r9
 801a012:	f7f8 fe7b 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a016:	4005      	ands	r5, r0
 801a018:	e7da      	b.n	8019fd0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a01a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a01e:	f108 011c 	add.w	r1, r8, #28
 801a022:	4648      	mov	r0, r9
 801a024:	f7fc fec0 	bl	8016da8 <ucdr_serialize_sequence_uint8_t>
 801a028:	4028      	ands	r0, r5
 801a02a:	b2c5      	uxtb	r5, r0
 801a02c:	4628      	mov	r0, r5
 801a02e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a032:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a036:	4648      	mov	r0, r9
 801a038:	f7f9 f852 	bl	80130e0 <ucdr_serialize_uint32_t>
 801a03c:	4028      	ands	r0, r5
 801a03e:	b2c5      	uxtb	r5, r0
 801a040:	e7d8      	b.n	8019ff4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a042:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a046:	4648      	mov	r0, r9
 801a048:	f7f9 f84a 	bl	80130e0 <ucdr_serialize_uint32_t>
 801a04c:	4028      	ands	r0, r5
 801a04e:	b2c5      	uxtb	r5, r0
 801a050:	e7c7      	b.n	8019fe2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a052:	bf00      	nop

0801a054 <uxr_serialize_OBJK_DataReader_Binary>:
 801a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a056:	2202      	movs	r2, #2
 801a058:	460c      	mov	r4, r1
 801a05a:	4606      	mov	r6, r0
 801a05c:	f005 ffc2 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a060:	4605      	mov	r5, r0
 801a062:	78a1      	ldrb	r1, [r4, #2]
 801a064:	4630      	mov	r0, r6
 801a066:	f7f8 fdf7 	bl	8012c58 <ucdr_serialize_bool>
 801a06a:	78a3      	ldrb	r3, [r4, #2]
 801a06c:	4005      	ands	r5, r0
 801a06e:	b2ed      	uxtb	r5, r5
 801a070:	b90b      	cbnz	r3, 801a076 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a072:	4628      	mov	r0, r5
 801a074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a076:	f104 0108 	add.w	r1, r4, #8
 801a07a:	4630      	mov	r0, r6
 801a07c:	f7ff ff96 	bl	8019fac <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a080:	4607      	mov	r7, r0
 801a082:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801a086:	4630      	mov	r0, r6
 801a088:	f7f8 fde6 	bl	8012c58 <ucdr_serialize_bool>
 801a08c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801a090:	4038      	ands	r0, r7
 801a092:	b2c7      	uxtb	r7, r0
 801a094:	b95b      	cbnz	r3, 801a0ae <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a096:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801a09a:	4630      	mov	r0, r6
 801a09c:	f7f8 fddc 	bl	8012c58 <ucdr_serialize_bool>
 801a0a0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a0a4:	4007      	ands	r7, r0
 801a0a6:	b94b      	cbnz	r3, 801a0bc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a0a8:	403d      	ands	r5, r7
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ae:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801a0b2:	4630      	mov	r0, r6
 801a0b4:	f7f9 fa6a 	bl	801358c <ucdr_serialize_uint64_t>
 801a0b8:	4007      	ands	r7, r0
 801a0ba:	e7ec      	b.n	801a096 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a0bc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801a0be:	4630      	mov	r0, r6
 801a0c0:	f006 f85c 	bl	802017c <ucdr_serialize_string>
 801a0c4:	4007      	ands	r7, r0
 801a0c6:	b2ff      	uxtb	r7, r7
 801a0c8:	e7ee      	b.n	801a0a8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a0ca:	bf00      	nop

0801a0cc <uxr_serialize_OBJK_DataWriter_Binary>:
 801a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0ce:	2202      	movs	r2, #2
 801a0d0:	460d      	mov	r5, r1
 801a0d2:	4606      	mov	r6, r0
 801a0d4:	f005 ff86 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a0d8:	4604      	mov	r4, r0
 801a0da:	78a9      	ldrb	r1, [r5, #2]
 801a0dc:	4630      	mov	r0, r6
 801a0de:	f7f8 fdbb 	bl	8012c58 <ucdr_serialize_bool>
 801a0e2:	78ab      	ldrb	r3, [r5, #2]
 801a0e4:	4004      	ands	r4, r0
 801a0e6:	b2e4      	uxtb	r4, r4
 801a0e8:	b90b      	cbnz	r3, 801a0ee <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0ee:	f105 0108 	add.w	r1, r5, #8
 801a0f2:	4630      	mov	r0, r6
 801a0f4:	f7ff ff5a 	bl	8019fac <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a0f8:	4607      	mov	r7, r0
 801a0fa:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801a0fe:	4630      	mov	r0, r6
 801a100:	f7f8 fdaa 	bl	8012c58 <ucdr_serialize_bool>
 801a104:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801a108:	4038      	ands	r0, r7
 801a10a:	b2c7      	uxtb	r7, r0
 801a10c:	b913      	cbnz	r3, 801a114 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a10e:	403c      	ands	r4, r7
 801a110:	4620      	mov	r0, r4
 801a112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a114:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801a118:	4630      	mov	r0, r6
 801a11a:	f7f9 fa37 	bl	801358c <ucdr_serialize_uint64_t>
 801a11e:	4007      	ands	r7, r0
 801a120:	e7f5      	b.n	801a10e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a122:	bf00      	nop

0801a124 <uxr_serialize_OBJK_Replier_Binary>:
 801a124:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a128:	460f      	mov	r7, r1
 801a12a:	4680      	mov	r8, r0
 801a12c:	6809      	ldr	r1, [r1, #0]
 801a12e:	f006 f825 	bl	802017c <ucdr_serialize_string>
 801a132:	4605      	mov	r5, r0
 801a134:	6879      	ldr	r1, [r7, #4]
 801a136:	4640      	mov	r0, r8
 801a138:	f006 f820 	bl	802017c <ucdr_serialize_string>
 801a13c:	4005      	ands	r5, r0
 801a13e:	68b9      	ldr	r1, [r7, #8]
 801a140:	4640      	mov	r0, r8
 801a142:	b2ec      	uxtb	r4, r5
 801a144:	f006 f81a 	bl	802017c <ucdr_serialize_string>
 801a148:	7b39      	ldrb	r1, [r7, #12]
 801a14a:	4004      	ands	r4, r0
 801a14c:	4640      	mov	r0, r8
 801a14e:	f7f8 fd83 	bl	8012c58 <ucdr_serialize_bool>
 801a152:	7b3b      	ldrb	r3, [r7, #12]
 801a154:	4004      	ands	r4, r0
 801a156:	b94b      	cbnz	r3, 801a16c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801a158:	7d39      	ldrb	r1, [r7, #20]
 801a15a:	4640      	mov	r0, r8
 801a15c:	f7f8 fd7c 	bl	8012c58 <ucdr_serialize_bool>
 801a160:	7d3b      	ldrb	r3, [r7, #20]
 801a162:	4004      	ands	r4, r0
 801a164:	b943      	cbnz	r3, 801a178 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801a166:	4620      	mov	r0, r4
 801a168:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a16c:	6939      	ldr	r1, [r7, #16]
 801a16e:	4640      	mov	r0, r8
 801a170:	f006 f804 	bl	802017c <ucdr_serialize_string>
 801a174:	4004      	ands	r4, r0
 801a176:	e7ef      	b.n	801a158 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801a178:	69b9      	ldr	r1, [r7, #24]
 801a17a:	4640      	mov	r0, r8
 801a17c:	f005 fffe 	bl	802017c <ucdr_serialize_string>
 801a180:	4004      	ands	r4, r0
 801a182:	b2e4      	uxtb	r4, r4
 801a184:	4620      	mov	r0, r4
 801a186:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a18a:	bf00      	nop

0801a18c <uxr_deserialize_ObjectVariant>:
 801a18c:	b570      	push	{r4, r5, r6, lr}
 801a18e:	4605      	mov	r5, r0
 801a190:	460e      	mov	r6, r1
 801a192:	f7f8 fda5 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a196:	b168      	cbz	r0, 801a1b4 <uxr_deserialize_ObjectVariant+0x28>
 801a198:	7833      	ldrb	r3, [r6, #0]
 801a19a:	4604      	mov	r4, r0
 801a19c:	3b01      	subs	r3, #1
 801a19e:	2b0d      	cmp	r3, #13
 801a1a0:	d809      	bhi.n	801a1b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a1a2:	e8df f003 	tbb	[pc, r3]
 801a1a6:	0a41      	.short	0x0a41
 801a1a8:	0a0a2323 	.word	0x0a0a2323
 801a1ac:	10080a0a 	.word	0x10080a0a
 801a1b0:	565c1010 	.word	0x565c1010
 801a1b4:	2400      	movs	r4, #0
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	bd70      	pop	{r4, r5, r6, pc}
 801a1ba:	1d31      	adds	r1, r6, #4
 801a1bc:	4628      	mov	r0, r5
 801a1be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1c2:	f7ff bd21 	b.w	8019c08 <uxr_deserialize_DATAWRITER_Representation>
 801a1c6:	1d31      	adds	r1, r6, #4
 801a1c8:	4628      	mov	r0, r5
 801a1ca:	f7f8 fd89 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a1ce:	2800      	cmp	r0, #0
 801a1d0:	d0f0      	beq.n	801a1b4 <uxr_deserialize_ObjectVariant+0x28>
 801a1d2:	7933      	ldrb	r3, [r6, #4]
 801a1d4:	2b01      	cmp	r3, #1
 801a1d6:	d001      	beq.n	801a1dc <uxr_deserialize_ObjectVariant+0x50>
 801a1d8:	2b02      	cmp	r3, #2
 801a1da:	d1ec      	bne.n	801a1b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a1dc:	68b1      	ldr	r1, [r6, #8]
 801a1de:	4628      	mov	r0, r5
 801a1e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a1e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1e8:	f005 bfd8 	b.w	802019c <ucdr_deserialize_string>
 801a1ec:	1d31      	adds	r1, r6, #4
 801a1ee:	4628      	mov	r0, r5
 801a1f0:	f7f8 fd76 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	b170      	cbz	r0, 801a216 <uxr_deserialize_ObjectVariant+0x8a>
 801a1f8:	7933      	ldrb	r3, [r6, #4]
 801a1fa:	2b02      	cmp	r3, #2
 801a1fc:	d04c      	beq.n	801a298 <uxr_deserialize_ObjectVariant+0x10c>
 801a1fe:	2b03      	cmp	r3, #3
 801a200:	d109      	bne.n	801a216 <uxr_deserialize_ObjectVariant+0x8a>
 801a202:	f106 0308 	add.w	r3, r6, #8
 801a206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a20a:	f106 010c 	add.w	r1, r6, #12
 801a20e:	4628      	mov	r0, r5
 801a210:	f7fc fddc 	bl	8016dcc <ucdr_deserialize_sequence_uint8_t>
 801a214:	4604      	mov	r4, r0
 801a216:	2202      	movs	r2, #2
 801a218:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a21c:	4628      	mov	r0, r5
 801a21e:	f005 ff45 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a222:	4020      	ands	r0, r4
 801a224:	b2c4      	uxtb	r4, r0
 801a226:	e7c6      	b.n	801a1b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a228:	1d31      	adds	r1, r6, #4
 801a22a:	4628      	mov	r0, r5
 801a22c:	f7f8 fd58 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a230:	4604      	mov	r4, r0
 801a232:	b130      	cbz	r0, 801a242 <uxr_deserialize_ObjectVariant+0xb6>
 801a234:	7933      	ldrb	r3, [r6, #4]
 801a236:	2b02      	cmp	r3, #2
 801a238:	d036      	beq.n	801a2a8 <uxr_deserialize_ObjectVariant+0x11c>
 801a23a:	2b03      	cmp	r3, #3
 801a23c:	d03c      	beq.n	801a2b8 <uxr_deserialize_ObjectVariant+0x12c>
 801a23e:	2b01      	cmp	r3, #1
 801a240:	d032      	beq.n	801a2a8 <uxr_deserialize_ObjectVariant+0x11c>
 801a242:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801a246:	4628      	mov	r0, r5
 801a248:	f7f9 faf0 	bl	801382c <ucdr_deserialize_int16_t>
 801a24c:	4020      	ands	r0, r4
 801a24e:	b2c4      	uxtb	r4, r0
 801a250:	e7b1      	b.n	801a1b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a252:	1d31      	adds	r1, r6, #4
 801a254:	4628      	mov	r0, r5
 801a256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a25a:	f7ff bb8b 	b.w	8019974 <uxr_deserialize_CLIENT_Representation>
 801a25e:	2204      	movs	r2, #4
 801a260:	4628      	mov	r0, r5
 801a262:	18b1      	adds	r1, r6, r2
 801a264:	f005 ff22 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a268:	4604      	mov	r4, r0
 801a26a:	2202      	movs	r2, #2
 801a26c:	f106 0108 	add.w	r1, r6, #8
 801a270:	4628      	mov	r0, r5
 801a272:	f005 ff1b 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a276:	4004      	ands	r4, r0
 801a278:	2202      	movs	r2, #2
 801a27a:	f106 010a 	add.w	r1, r6, #10
 801a27e:	4628      	mov	r0, r5
 801a280:	b2e4      	uxtb	r4, r4
 801a282:	f005 ff13 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a286:	4603      	mov	r3, r0
 801a288:	f106 010c 	add.w	r1, r6, #12
 801a28c:	4628      	mov	r0, r5
 801a28e:	401c      	ands	r4, r3
 801a290:	f7f8 fcf8 	bl	8012c84 <ucdr_deserialize_bool>
 801a294:	4004      	ands	r4, r0
 801a296:	e78e      	b.n	801a1b6 <uxr_deserialize_ObjectVariant+0x2a>
 801a298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a29c:	68b1      	ldr	r1, [r6, #8]
 801a29e:	4628      	mov	r0, r5
 801a2a0:	f005 ff7c 	bl	802019c <ucdr_deserialize_string>
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	e7b6      	b.n	801a216 <uxr_deserialize_ObjectVariant+0x8a>
 801a2a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a2ac:	68b1      	ldr	r1, [r6, #8]
 801a2ae:	4628      	mov	r0, r5
 801a2b0:	f005 ff74 	bl	802019c <ucdr_deserialize_string>
 801a2b4:	4604      	mov	r4, r0
 801a2b6:	e7c4      	b.n	801a242 <uxr_deserialize_ObjectVariant+0xb6>
 801a2b8:	f106 0308 	add.w	r3, r6, #8
 801a2bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a2c0:	f106 010c 	add.w	r1, r6, #12
 801a2c4:	4628      	mov	r0, r5
 801a2c6:	f7fc fd81 	bl	8016dcc <ucdr_deserialize_sequence_uint8_t>
 801a2ca:	4604      	mov	r4, r0
 801a2cc:	e7b9      	b.n	801a242 <uxr_deserialize_ObjectVariant+0xb6>
 801a2ce:	bf00      	nop

0801a2d0 <uxr_deserialize_BaseObjectRequest>:
 801a2d0:	b570      	push	{r4, r5, r6, lr}
 801a2d2:	2202      	movs	r2, #2
 801a2d4:	4605      	mov	r5, r0
 801a2d6:	460e      	mov	r6, r1
 801a2d8:	f005 fee8 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a2dc:	2202      	movs	r2, #2
 801a2de:	4604      	mov	r4, r0
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	18b1      	adds	r1, r6, r2
 801a2e4:	f005 fee2 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a2e8:	4020      	ands	r0, r4
 801a2ea:	b2c0      	uxtb	r0, r0
 801a2ec:	bd70      	pop	{r4, r5, r6, pc}
 801a2ee:	bf00      	nop

0801a2f0 <uxr_serialize_ActivityInfoVariant>:
 801a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2f4:	460e      	mov	r6, r1
 801a2f6:	7809      	ldrb	r1, [r1, #0]
 801a2f8:	4680      	mov	r8, r0
 801a2fa:	f7f8 fcdb 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a2fe:	4607      	mov	r7, r0
 801a300:	b138      	cbz	r0, 801a312 <uxr_serialize_ActivityInfoVariant+0x22>
 801a302:	7833      	ldrb	r3, [r6, #0]
 801a304:	2b06      	cmp	r3, #6
 801a306:	f000 8081 	beq.w	801a40c <uxr_serialize_ActivityInfoVariant+0x11c>
 801a30a:	2b0d      	cmp	r3, #13
 801a30c:	d014      	beq.n	801a338 <uxr_serialize_ActivityInfoVariant+0x48>
 801a30e:	2b05      	cmp	r3, #5
 801a310:	d002      	beq.n	801a318 <uxr_serialize_ActivityInfoVariant+0x28>
 801a312:	4638      	mov	r0, r7
 801a314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a318:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a31c:	4640      	mov	r0, r8
 801a31e:	f7f9 fa05 	bl	801372c <ucdr_serialize_int16_t>
 801a322:	4607      	mov	r7, r0
 801a324:	4640      	mov	r0, r8
 801a326:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801a32a:	f7f9 f92f 	bl	801358c <ucdr_serialize_uint64_t>
 801a32e:	4038      	ands	r0, r7
 801a330:	b2c7      	uxtb	r7, r0
 801a332:	4638      	mov	r0, r7
 801a334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a338:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a33c:	4640      	mov	r0, r8
 801a33e:	f7f9 f9f5 	bl	801372c <ucdr_serialize_int16_t>
 801a342:	68f1      	ldr	r1, [r6, #12]
 801a344:	4607      	mov	r7, r0
 801a346:	4640      	mov	r0, r8
 801a348:	f7f8 feca 	bl	80130e0 <ucdr_serialize_uint32_t>
 801a34c:	68f3      	ldr	r3, [r6, #12]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d0ed      	beq.n	801a32e <uxr_serialize_ActivityInfoVariant+0x3e>
 801a352:	b318      	cbz	r0, 801a39c <uxr_serialize_ActivityInfoVariant+0xac>
 801a354:	f106 090c 	add.w	r9, r6, #12
 801a358:	2400      	movs	r4, #0
 801a35a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801a35e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801a362:	7c29      	ldrb	r1, [r5, #16]
 801a364:	4640      	mov	r0, r8
 801a366:	f7f8 fca5 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a36a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801a36e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a372:	2800      	cmp	r0, #0
 801a374:	d051      	beq.n	801a41a <uxr_serialize_ActivityInfoVariant+0x12a>
 801a376:	7c2b      	ldrb	r3, [r5, #16]
 801a378:	00c9      	lsls	r1, r1, #3
 801a37a:	2b03      	cmp	r3, #3
 801a37c:	d854      	bhi.n	801a428 <uxr_serialize_ActivityInfoVariant+0x138>
 801a37e:	e8df f003 	tbb	[pc, r3]
 801a382:	2133      	.short	0x2133
 801a384:	020f      	.short	0x020f
 801a386:	4449      	add	r1, r9
 801a388:	4640      	mov	r0, r8
 801a38a:	6889      	ldr	r1, [r1, #8]
 801a38c:	f005 fef6 	bl	802017c <ucdr_serialize_string>
 801a390:	3401      	adds	r4, #1
 801a392:	68f2      	ldr	r2, [r6, #12]
 801a394:	4294      	cmp	r4, r2
 801a396:	d244      	bcs.n	801a422 <uxr_serialize_ActivityInfoVariant+0x132>
 801a398:	2800      	cmp	r0, #0
 801a39a:	d1de      	bne.n	801a35a <uxr_serialize_ActivityInfoVariant+0x6a>
 801a39c:	2700      	movs	r7, #0
 801a39e:	e7b8      	b.n	801a312 <uxr_serialize_ActivityInfoVariant+0x22>
 801a3a0:	3108      	adds	r1, #8
 801a3a2:	44a2      	add	sl, r4
 801a3a4:	2210      	movs	r2, #16
 801a3a6:	4640      	mov	r0, r8
 801a3a8:	4449      	add	r1, r9
 801a3aa:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a3ae:	f005 fe19 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a3b2:	4605      	mov	r5, r0
 801a3b4:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801a3b8:	4640      	mov	r0, r8
 801a3ba:	f7f8 fe91 	bl	80130e0 <ucdr_serialize_uint32_t>
 801a3be:	4028      	ands	r0, r5
 801a3c0:	b2c0      	uxtb	r0, r0
 801a3c2:	e7e5      	b.n	801a390 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a3c4:	3108      	adds	r1, #8
 801a3c6:	44a2      	add	sl, r4
 801a3c8:	2204      	movs	r2, #4
 801a3ca:	4640      	mov	r0, r8
 801a3cc:	4449      	add	r1, r9
 801a3ce:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a3d2:	f005 fe07 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a3d6:	4605      	mov	r5, r0
 801a3d8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801a3dc:	4640      	mov	r0, r8
 801a3de:	f7f8 fc95 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a3e2:	4028      	ands	r0, r5
 801a3e4:	b2c0      	uxtb	r0, r0
 801a3e6:	e7d3      	b.n	801a390 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a3e8:	3108      	adds	r1, #8
 801a3ea:	44a2      	add	sl, r4
 801a3ec:	2202      	movs	r2, #2
 801a3ee:	4640      	mov	r0, r8
 801a3f0:	4449      	add	r1, r9
 801a3f2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801a3f6:	f005 fdf5 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a3fa:	4605      	mov	r5, r0
 801a3fc:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801a400:	4640      	mov	r0, r8
 801a402:	f7f8 fc57 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a406:	4028      	ands	r0, r5
 801a408:	b2c0      	uxtb	r0, r0
 801a40a:	e7c1      	b.n	801a390 <uxr_serialize_ActivityInfoVariant+0xa0>
 801a40c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a410:	4640      	mov	r0, r8
 801a412:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a416:	f7f9 b989 	b.w	801372c <ucdr_serialize_int16_t>
 801a41a:	3401      	adds	r4, #1
 801a41c:	68f2      	ldr	r2, [r6, #12]
 801a41e:	42a2      	cmp	r2, r4
 801a420:	d8bc      	bhi.n	801a39c <uxr_serialize_ActivityInfoVariant+0xac>
 801a422:	4007      	ands	r7, r0
 801a424:	b2ff      	uxtb	r7, r7
 801a426:	e774      	b.n	801a312 <uxr_serialize_ActivityInfoVariant+0x22>
 801a428:	3401      	adds	r4, #1
 801a42a:	68f3      	ldr	r3, [r6, #12]
 801a42c:	3518      	adds	r5, #24
 801a42e:	429c      	cmp	r4, r3
 801a430:	d397      	bcc.n	801a362 <uxr_serialize_ActivityInfoVariant+0x72>
 801a432:	e76e      	b.n	801a312 <uxr_serialize_ActivityInfoVariant+0x22>

0801a434 <uxr_deserialize_BaseObjectReply>:
 801a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a438:	2202      	movs	r2, #2
 801a43a:	4606      	mov	r6, r0
 801a43c:	460f      	mov	r7, r1
 801a43e:	f005 fe35 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a442:	2202      	movs	r2, #2
 801a444:	4605      	mov	r5, r0
 801a446:	4630      	mov	r0, r6
 801a448:	18b9      	adds	r1, r7, r2
 801a44a:	f005 fe2f 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a44e:	4680      	mov	r8, r0
 801a450:	1d39      	adds	r1, r7, #4
 801a452:	4630      	mov	r0, r6
 801a454:	f7f8 fc44 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a458:	ea05 0508 	and.w	r5, r5, r8
 801a45c:	4604      	mov	r4, r0
 801a45e:	1d79      	adds	r1, r7, #5
 801a460:	4630      	mov	r0, r6
 801a462:	402c      	ands	r4, r5
 801a464:	f7f8 fc3c 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a468:	4020      	ands	r0, r4
 801a46a:	b2c0      	uxtb	r0, r0
 801a46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a470 <uxr_serialize_ReadSpecification>:
 801a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a472:	460e      	mov	r6, r1
 801a474:	4607      	mov	r7, r0
 801a476:	7809      	ldrb	r1, [r1, #0]
 801a478:	f7f8 fc1c 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a47c:	4604      	mov	r4, r0
 801a47e:	7871      	ldrb	r1, [r6, #1]
 801a480:	4638      	mov	r0, r7
 801a482:	f7f8 fc17 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a486:	4004      	ands	r4, r0
 801a488:	78b1      	ldrb	r1, [r6, #2]
 801a48a:	4638      	mov	r0, r7
 801a48c:	f7f8 fbe4 	bl	8012c58 <ucdr_serialize_bool>
 801a490:	78b3      	ldrb	r3, [r6, #2]
 801a492:	b2e4      	uxtb	r4, r4
 801a494:	4004      	ands	r4, r0
 801a496:	b943      	cbnz	r3, 801a4aa <uxr_serialize_ReadSpecification+0x3a>
 801a498:	7a31      	ldrb	r1, [r6, #8]
 801a49a:	4638      	mov	r0, r7
 801a49c:	f7f8 fbdc 	bl	8012c58 <ucdr_serialize_bool>
 801a4a0:	7a33      	ldrb	r3, [r6, #8]
 801a4a2:	4004      	ands	r4, r0
 801a4a4:	b93b      	cbnz	r3, 801a4b6 <uxr_serialize_ReadSpecification+0x46>
 801a4a6:	4620      	mov	r0, r4
 801a4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4aa:	6871      	ldr	r1, [r6, #4]
 801a4ac:	4638      	mov	r0, r7
 801a4ae:	f005 fe65 	bl	802017c <ucdr_serialize_string>
 801a4b2:	4004      	ands	r4, r0
 801a4b4:	e7f0      	b.n	801a498 <uxr_serialize_ReadSpecification+0x28>
 801a4b6:	8971      	ldrh	r1, [r6, #10]
 801a4b8:	4638      	mov	r0, r7
 801a4ba:	f7f8 fc27 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a4be:	4605      	mov	r5, r0
 801a4c0:	89b1      	ldrh	r1, [r6, #12]
 801a4c2:	4638      	mov	r0, r7
 801a4c4:	f7f8 fc22 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a4c8:	4005      	ands	r5, r0
 801a4ca:	89f1      	ldrh	r1, [r6, #14]
 801a4cc:	4638      	mov	r0, r7
 801a4ce:	b2ed      	uxtb	r5, r5
 801a4d0:	f7f8 fc1c 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a4d4:	8a31      	ldrh	r1, [r6, #16]
 801a4d6:	4025      	ands	r5, r4
 801a4d8:	4604      	mov	r4, r0
 801a4da:	4638      	mov	r0, r7
 801a4dc:	4025      	ands	r5, r4
 801a4de:	f7f8 fc15 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a4e2:	ea00 0405 	and.w	r4, r0, r5
 801a4e6:	4620      	mov	r0, r4
 801a4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4ea:	bf00      	nop

0801a4ec <uxr_serialize_CREATE_CLIENT_Payload>:
 801a4ec:	f7ff b9ea 	b.w	80198c4 <uxr_serialize_CLIENT_Representation>

0801a4f0 <uxr_serialize_CREATE_Payload>:
 801a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4f2:	2202      	movs	r2, #2
 801a4f4:	4607      	mov	r7, r0
 801a4f6:	460e      	mov	r6, r1
 801a4f8:	f005 fd74 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a4fc:	2202      	movs	r2, #2
 801a4fe:	4605      	mov	r5, r0
 801a500:	4638      	mov	r0, r7
 801a502:	18b1      	adds	r1, r6, r2
 801a504:	f005 fd6e 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a508:	7931      	ldrb	r1, [r6, #4]
 801a50a:	4604      	mov	r4, r0
 801a50c:	4638      	mov	r0, r7
 801a50e:	f7f8 fbd1 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a512:	b170      	cbz	r0, 801a532 <uxr_serialize_CREATE_Payload+0x42>
 801a514:	7933      	ldrb	r3, [r6, #4]
 801a516:	402c      	ands	r4, r5
 801a518:	3b01      	subs	r3, #1
 801a51a:	b2e4      	uxtb	r4, r4
 801a51c:	2b0d      	cmp	r3, #13
 801a51e:	d809      	bhi.n	801a534 <uxr_serialize_CREATE_Payload+0x44>
 801a520:	e8df f003 	tbb	[pc, r3]
 801a524:	23230a4c 	.word	0x23230a4c
 801a528:	0a0a0a0a 	.word	0x0a0a0a0a
 801a52c:	12121208 	.word	0x12121208
 801a530:	3e45      	.short	0x3e45
 801a532:	2400      	movs	r4, #0
 801a534:	4620      	mov	r0, r4
 801a536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a538:	f106 0108 	add.w	r1, r6, #8
 801a53c:	4638      	mov	r0, r7
 801a53e:	f7ff fac7 	bl	8019ad0 <uxr_serialize_DATAWRITER_Representation>
 801a542:	4004      	ands	r4, r0
 801a544:	4620      	mov	r0, r4
 801a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a548:	7a31      	ldrb	r1, [r6, #8]
 801a54a:	4638      	mov	r0, r7
 801a54c:	f7f8 fbb2 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a550:	2800      	cmp	r0, #0
 801a552:	d0ee      	beq.n	801a532 <uxr_serialize_CREATE_Payload+0x42>
 801a554:	7a33      	ldrb	r3, [r6, #8]
 801a556:	2b01      	cmp	r3, #1
 801a558:	d001      	beq.n	801a55e <uxr_serialize_CREATE_Payload+0x6e>
 801a55a:	2b02      	cmp	r3, #2
 801a55c:	d1ea      	bne.n	801a534 <uxr_serialize_CREATE_Payload+0x44>
 801a55e:	68f1      	ldr	r1, [r6, #12]
 801a560:	4638      	mov	r0, r7
 801a562:	f005 fe0b 	bl	802017c <ucdr_serialize_string>
 801a566:	4004      	ands	r4, r0
 801a568:	e7e4      	b.n	801a534 <uxr_serialize_CREATE_Payload+0x44>
 801a56a:	7a31      	ldrb	r1, [r6, #8]
 801a56c:	4638      	mov	r0, r7
 801a56e:	f7f8 fba1 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a572:	4605      	mov	r5, r0
 801a574:	b158      	cbz	r0, 801a58e <uxr_serialize_CREATE_Payload+0x9e>
 801a576:	7a33      	ldrb	r3, [r6, #8]
 801a578:	2b02      	cmp	r3, #2
 801a57a:	d034      	beq.n	801a5e6 <uxr_serialize_CREATE_Payload+0xf6>
 801a57c:	2b03      	cmp	r3, #3
 801a57e:	d106      	bne.n	801a58e <uxr_serialize_CREATE_Payload+0x9e>
 801a580:	68f2      	ldr	r2, [r6, #12]
 801a582:	f106 0110 	add.w	r1, r6, #16
 801a586:	4638      	mov	r0, r7
 801a588:	f7fc fc0e 	bl	8016da8 <ucdr_serialize_sequence_uint8_t>
 801a58c:	4605      	mov	r5, r0
 801a58e:	2202      	movs	r2, #2
 801a590:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801a594:	4638      	mov	r0, r7
 801a596:	f005 fd25 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a59a:	4028      	ands	r0, r5
 801a59c:	4004      	ands	r4, r0
 801a59e:	e7c9      	b.n	801a534 <uxr_serialize_CREATE_Payload+0x44>
 801a5a0:	f106 0108 	add.w	r1, r6, #8
 801a5a4:	4638      	mov	r0, r7
 801a5a6:	f7ff f98d 	bl	80198c4 <uxr_serialize_CLIENT_Representation>
 801a5aa:	4004      	ands	r4, r0
 801a5ac:	e7c2      	b.n	801a534 <uxr_serialize_CREATE_Payload+0x44>
 801a5ae:	f106 0108 	add.w	r1, r6, #8
 801a5b2:	4638      	mov	r0, r7
 801a5b4:	f7ff fa42 	bl	8019a3c <uxr_serialize_AGENT_Representation>
 801a5b8:	4004      	ands	r4, r0
 801a5ba:	e7bb      	b.n	801a534 <uxr_serialize_CREATE_Payload+0x44>
 801a5bc:	7a31      	ldrb	r1, [r6, #8]
 801a5be:	4638      	mov	r0, r7
 801a5c0:	f7f8 fb78 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a5c4:	4605      	mov	r5, r0
 801a5c6:	b130      	cbz	r0, 801a5d6 <uxr_serialize_CREATE_Payload+0xe6>
 801a5c8:	7a33      	ldrb	r3, [r6, #8]
 801a5ca:	2b02      	cmp	r3, #2
 801a5cc:	d011      	beq.n	801a5f2 <uxr_serialize_CREATE_Payload+0x102>
 801a5ce:	2b03      	cmp	r3, #3
 801a5d0:	d015      	beq.n	801a5fe <uxr_serialize_CREATE_Payload+0x10e>
 801a5d2:	2b01      	cmp	r3, #1
 801a5d4:	d00d      	beq.n	801a5f2 <uxr_serialize_CREATE_Payload+0x102>
 801a5d6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801a5da:	4638      	mov	r0, r7
 801a5dc:	f7f9 f8a6 	bl	801372c <ucdr_serialize_int16_t>
 801a5e0:	4028      	ands	r0, r5
 801a5e2:	4004      	ands	r4, r0
 801a5e4:	e7a6      	b.n	801a534 <uxr_serialize_CREATE_Payload+0x44>
 801a5e6:	68f1      	ldr	r1, [r6, #12]
 801a5e8:	4638      	mov	r0, r7
 801a5ea:	f005 fdc7 	bl	802017c <ucdr_serialize_string>
 801a5ee:	4605      	mov	r5, r0
 801a5f0:	e7cd      	b.n	801a58e <uxr_serialize_CREATE_Payload+0x9e>
 801a5f2:	68f1      	ldr	r1, [r6, #12]
 801a5f4:	4638      	mov	r0, r7
 801a5f6:	f005 fdc1 	bl	802017c <ucdr_serialize_string>
 801a5fa:	4605      	mov	r5, r0
 801a5fc:	e7eb      	b.n	801a5d6 <uxr_serialize_CREATE_Payload+0xe6>
 801a5fe:	68f2      	ldr	r2, [r6, #12]
 801a600:	f106 0110 	add.w	r1, r6, #16
 801a604:	4638      	mov	r0, r7
 801a606:	f7fc fbcf 	bl	8016da8 <ucdr_serialize_sequence_uint8_t>
 801a60a:	4605      	mov	r5, r0
 801a60c:	e7e3      	b.n	801a5d6 <uxr_serialize_CREATE_Payload+0xe6>
 801a60e:	bf00      	nop

0801a610 <uxr_serialize_GET_INFO_Payload>:
 801a610:	b570      	push	{r4, r5, r6, lr}
 801a612:	2202      	movs	r2, #2
 801a614:	4605      	mov	r5, r0
 801a616:	460e      	mov	r6, r1
 801a618:	f005 fce4 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a61c:	2202      	movs	r2, #2
 801a61e:	4604      	mov	r4, r0
 801a620:	4628      	mov	r0, r5
 801a622:	18b1      	adds	r1, r6, r2
 801a624:	f005 fcde 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a628:	4603      	mov	r3, r0
 801a62a:	6871      	ldr	r1, [r6, #4]
 801a62c:	4628      	mov	r0, r5
 801a62e:	401c      	ands	r4, r3
 801a630:	f7f8 fd56 	bl	80130e0 <ucdr_serialize_uint32_t>
 801a634:	b2e4      	uxtb	r4, r4
 801a636:	4020      	ands	r0, r4
 801a638:	bd70      	pop	{r4, r5, r6, pc}
 801a63a:	bf00      	nop

0801a63c <uxr_deserialize_GET_INFO_Payload>:
 801a63c:	b570      	push	{r4, r5, r6, lr}
 801a63e:	2202      	movs	r2, #2
 801a640:	4605      	mov	r5, r0
 801a642:	460e      	mov	r6, r1
 801a644:	f005 fd32 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a648:	2202      	movs	r2, #2
 801a64a:	4604      	mov	r4, r0
 801a64c:	4628      	mov	r0, r5
 801a64e:	18b1      	adds	r1, r6, r2
 801a650:	f005 fd2c 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a654:	4603      	mov	r3, r0
 801a656:	1d31      	adds	r1, r6, #4
 801a658:	4628      	mov	r0, r5
 801a65a:	401c      	ands	r4, r3
 801a65c:	f7f8 fe70 	bl	8013340 <ucdr_deserialize_uint32_t>
 801a660:	b2e4      	uxtb	r4, r4
 801a662:	4020      	ands	r0, r4
 801a664:	bd70      	pop	{r4, r5, r6, pc}
 801a666:	bf00      	nop

0801a668 <uxr_serialize_DELETE_Payload>:
 801a668:	b570      	push	{r4, r5, r6, lr}
 801a66a:	2202      	movs	r2, #2
 801a66c:	4605      	mov	r5, r0
 801a66e:	460e      	mov	r6, r1
 801a670:	f005 fcb8 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a674:	2202      	movs	r2, #2
 801a676:	4604      	mov	r4, r0
 801a678:	4628      	mov	r0, r5
 801a67a:	18b1      	adds	r1, r6, r2
 801a67c:	f005 fcb2 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a680:	4020      	ands	r0, r4
 801a682:	b2c0      	uxtb	r0, r0
 801a684:	bd70      	pop	{r4, r5, r6, pc}
 801a686:	bf00      	nop

0801a688 <uxr_deserialize_STATUS_AGENT_Payload>:
 801a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a68c:	460e      	mov	r6, r1
 801a68e:	4605      	mov	r5, r0
 801a690:	f7f8 fb26 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a694:	4604      	mov	r4, r0
 801a696:	1c71      	adds	r1, r6, #1
 801a698:	4628      	mov	r0, r5
 801a69a:	f7f8 fb21 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a69e:	2204      	movs	r2, #4
 801a6a0:	4681      	mov	r9, r0
 801a6a2:	4628      	mov	r0, r5
 801a6a4:	18b1      	adds	r1, r6, r2
 801a6a6:	f005 fd01 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a6aa:	f106 0108 	add.w	r1, r6, #8
 801a6ae:	4680      	mov	r8, r0
 801a6b0:	2202      	movs	r2, #2
 801a6b2:	4628      	mov	r0, r5
 801a6b4:	f005 fcfa 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a6b8:	ea04 0309 	and.w	r3, r4, r9
 801a6bc:	4607      	mov	r7, r0
 801a6be:	2202      	movs	r2, #2
 801a6c0:	b2db      	uxtb	r3, r3
 801a6c2:	f106 010a 	add.w	r1, r6, #10
 801a6c6:	4628      	mov	r0, r5
 801a6c8:	ea03 0408 	and.w	r4, r3, r8
 801a6cc:	f005 fcee 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a6d0:	4603      	mov	r3, r0
 801a6d2:	4628      	mov	r0, r5
 801a6d4:	403c      	ands	r4, r7
 801a6d6:	f106 010c 	add.w	r1, r6, #12
 801a6da:	461d      	mov	r5, r3
 801a6dc:	f7f8 fad2 	bl	8012c84 <ucdr_deserialize_bool>
 801a6e0:	4025      	ands	r5, r4
 801a6e2:	4028      	ands	r0, r5
 801a6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a6e8 <uxr_deserialize_STATUS_Payload>:
 801a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ec:	2202      	movs	r2, #2
 801a6ee:	4606      	mov	r6, r0
 801a6f0:	460f      	mov	r7, r1
 801a6f2:	f005 fcdb 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a6f6:	2202      	movs	r2, #2
 801a6f8:	4605      	mov	r5, r0
 801a6fa:	4630      	mov	r0, r6
 801a6fc:	18b9      	adds	r1, r7, r2
 801a6fe:	f005 fcd5 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a702:	4680      	mov	r8, r0
 801a704:	1d39      	adds	r1, r7, #4
 801a706:	4630      	mov	r0, r6
 801a708:	f7f8 faea 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a70c:	ea05 0508 	and.w	r5, r5, r8
 801a710:	4604      	mov	r4, r0
 801a712:	1d79      	adds	r1, r7, #5
 801a714:	4630      	mov	r0, r6
 801a716:	402c      	ands	r4, r5
 801a718:	f7f8 fae2 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a71c:	4020      	ands	r0, r4
 801a71e:	b2c0      	uxtb	r0, r0
 801a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a724 <uxr_serialize_INFO_Payload>:
 801a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a728:	2202      	movs	r2, #2
 801a72a:	460c      	mov	r4, r1
 801a72c:	4605      	mov	r5, r0
 801a72e:	f005 fc59 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a732:	2202      	movs	r2, #2
 801a734:	4680      	mov	r8, r0
 801a736:	4628      	mov	r0, r5
 801a738:	18a1      	adds	r1, r4, r2
 801a73a:	f005 fc53 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a73e:	4607      	mov	r7, r0
 801a740:	7921      	ldrb	r1, [r4, #4]
 801a742:	4628      	mov	r0, r5
 801a744:	f7f8 fab6 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a748:	ea08 0807 	and.w	r8, r8, r7
 801a74c:	4606      	mov	r6, r0
 801a74e:	7961      	ldrb	r1, [r4, #5]
 801a750:	4628      	mov	r0, r5
 801a752:	ea06 0608 	and.w	r6, r6, r8
 801a756:	f7f8 faad 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a75a:	7a21      	ldrb	r1, [r4, #8]
 801a75c:	4030      	ands	r0, r6
 801a75e:	b2c7      	uxtb	r7, r0
 801a760:	4628      	mov	r0, r5
 801a762:	f7f8 fa79 	bl	8012c58 <ucdr_serialize_bool>
 801a766:	7a23      	ldrb	r3, [r4, #8]
 801a768:	4606      	mov	r6, r0
 801a76a:	b96b      	cbnz	r3, 801a788 <uxr_serialize_INFO_Payload+0x64>
 801a76c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801a770:	4628      	mov	r0, r5
 801a772:	f7f8 fa71 	bl	8012c58 <ucdr_serialize_bool>
 801a776:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801a77a:	4030      	ands	r0, r6
 801a77c:	b2c6      	uxtb	r6, r0
 801a77e:	b983      	cbnz	r3, 801a7a2 <uxr_serialize_INFO_Payload+0x7e>
 801a780:	ea06 0007 	and.w	r0, r6, r7
 801a784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a788:	7b21      	ldrb	r1, [r4, #12]
 801a78a:	4628      	mov	r0, r5
 801a78c:	f7f8 fa92 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a790:	b188      	cbz	r0, 801a7b6 <uxr_serialize_INFO_Payload+0x92>
 801a792:	f104 010c 	add.w	r1, r4, #12
 801a796:	4628      	mov	r0, r5
 801a798:	f7ff f9c2 	bl	8019b20 <uxr_serialize_ObjectVariant.part.0>
 801a79c:	4030      	ands	r0, r6
 801a79e:	b2c6      	uxtb	r6, r0
 801a7a0:	e7e4      	b.n	801a76c <uxr_serialize_INFO_Payload+0x48>
 801a7a2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801a7a6:	4628      	mov	r0, r5
 801a7a8:	f7ff fda2 	bl	801a2f0 <uxr_serialize_ActivityInfoVariant>
 801a7ac:	4006      	ands	r6, r0
 801a7ae:	ea06 0007 	and.w	r0, r6, r7
 801a7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7b6:	4606      	mov	r6, r0
 801a7b8:	e7d8      	b.n	801a76c <uxr_serialize_INFO_Payload+0x48>
 801a7ba:	bf00      	nop

0801a7bc <uxr_serialize_READ_DATA_Payload>:
 801a7bc:	b570      	push	{r4, r5, r6, lr}
 801a7be:	2202      	movs	r2, #2
 801a7c0:	4605      	mov	r5, r0
 801a7c2:	460e      	mov	r6, r1
 801a7c4:	f005 fc0e 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a7c8:	2202      	movs	r2, #2
 801a7ca:	4604      	mov	r4, r0
 801a7cc:	4628      	mov	r0, r5
 801a7ce:	18b1      	adds	r1, r6, r2
 801a7d0:	f005 fc08 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	1d31      	adds	r1, r6, #4
 801a7d8:	4628      	mov	r0, r5
 801a7da:	401c      	ands	r4, r3
 801a7dc:	f7ff fe48 	bl	801a470 <uxr_serialize_ReadSpecification>
 801a7e0:	b2e4      	uxtb	r4, r4
 801a7e2:	4020      	ands	r0, r4
 801a7e4:	bd70      	pop	{r4, r5, r6, pc}
 801a7e6:	bf00      	nop

0801a7e8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801a7e8:	b570      	push	{r4, r5, r6, lr}
 801a7ea:	2202      	movs	r2, #2
 801a7ec:	4605      	mov	r5, r0
 801a7ee:	460e      	mov	r6, r1
 801a7f0:	f005 fbf8 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a7f4:	2202      	movs	r2, #2
 801a7f6:	4604      	mov	r4, r0
 801a7f8:	4628      	mov	r0, r5
 801a7fa:	18b1      	adds	r1, r6, r2
 801a7fc:	f005 fbf2 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a800:	4020      	ands	r0, r4
 801a802:	b2c0      	uxtb	r0, r0
 801a804:	bd70      	pop	{r4, r5, r6, pc}
 801a806:	bf00      	nop

0801a808 <uxr_serialize_ACKNACK_Payload>:
 801a808:	b570      	push	{r4, r5, r6, lr}
 801a80a:	460c      	mov	r4, r1
 801a80c:	4605      	mov	r5, r0
 801a80e:	460e      	mov	r6, r1
 801a810:	f834 1b02 	ldrh.w	r1, [r4], #2
 801a814:	f7f8 fa7a 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a818:	2202      	movs	r2, #2
 801a81a:	4621      	mov	r1, r4
 801a81c:	4604      	mov	r4, r0
 801a81e:	4628      	mov	r0, r5
 801a820:	f005 fbe0 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a824:	4603      	mov	r3, r0
 801a826:	7931      	ldrb	r1, [r6, #4]
 801a828:	4628      	mov	r0, r5
 801a82a:	401c      	ands	r4, r3
 801a82c:	f7f8 fa42 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a830:	b2e4      	uxtb	r4, r4
 801a832:	4020      	ands	r0, r4
 801a834:	bd70      	pop	{r4, r5, r6, pc}
 801a836:	bf00      	nop

0801a838 <uxr_deserialize_ACKNACK_Payload>:
 801a838:	b570      	push	{r4, r5, r6, lr}
 801a83a:	460e      	mov	r6, r1
 801a83c:	4605      	mov	r5, r0
 801a83e:	f7f8 fb65 	bl	8012f0c <ucdr_deserialize_uint16_t>
 801a842:	2202      	movs	r2, #2
 801a844:	4604      	mov	r4, r0
 801a846:	4628      	mov	r0, r5
 801a848:	18b1      	adds	r1, r6, r2
 801a84a:	f005 fc2f 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a84e:	4603      	mov	r3, r0
 801a850:	1d31      	adds	r1, r6, #4
 801a852:	4628      	mov	r0, r5
 801a854:	401c      	ands	r4, r3
 801a856:	f7f8 fa43 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a85a:	b2e4      	uxtb	r4, r4
 801a85c:	4020      	ands	r0, r4
 801a85e:	bd70      	pop	{r4, r5, r6, pc}

0801a860 <uxr_serialize_HEARTBEAT_Payload>:
 801a860:	b570      	push	{r4, r5, r6, lr}
 801a862:	460d      	mov	r5, r1
 801a864:	4606      	mov	r6, r0
 801a866:	8809      	ldrh	r1, [r1, #0]
 801a868:	f7f8 fa50 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a86c:	8869      	ldrh	r1, [r5, #2]
 801a86e:	4604      	mov	r4, r0
 801a870:	4630      	mov	r0, r6
 801a872:	f7f8 fa4b 	bl	8012d0c <ucdr_serialize_uint16_t>
 801a876:	4603      	mov	r3, r0
 801a878:	7929      	ldrb	r1, [r5, #4]
 801a87a:	4630      	mov	r0, r6
 801a87c:	401c      	ands	r4, r3
 801a87e:	f7f8 fa19 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a882:	b2e4      	uxtb	r4, r4
 801a884:	4020      	ands	r0, r4
 801a886:	bd70      	pop	{r4, r5, r6, pc}

0801a888 <uxr_deserialize_HEARTBEAT_Payload>:
 801a888:	b570      	push	{r4, r5, r6, lr}
 801a88a:	460e      	mov	r6, r1
 801a88c:	4605      	mov	r5, r0
 801a88e:	f7f8 fb3d 	bl	8012f0c <ucdr_deserialize_uint16_t>
 801a892:	4604      	mov	r4, r0
 801a894:	1cb1      	adds	r1, r6, #2
 801a896:	4628      	mov	r0, r5
 801a898:	f7f8 fb38 	bl	8012f0c <ucdr_deserialize_uint16_t>
 801a89c:	4603      	mov	r3, r0
 801a89e:	1d31      	adds	r1, r6, #4
 801a8a0:	4628      	mov	r0, r5
 801a8a2:	401c      	ands	r4, r3
 801a8a4:	f7f8 fa1c 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a8a8:	b2e4      	uxtb	r4, r4
 801a8aa:	4020      	ands	r0, r4
 801a8ac:	bd70      	pop	{r4, r5, r6, pc}
 801a8ae:	bf00      	nop

0801a8b0 <uxr_serialize_TIMESTAMP_Payload>:
 801a8b0:	b570      	push	{r4, r5, r6, lr}
 801a8b2:	460d      	mov	r5, r1
 801a8b4:	4606      	mov	r6, r0
 801a8b6:	6809      	ldr	r1, [r1, #0]
 801a8b8:	f7f9 f82c 	bl	8013914 <ucdr_serialize_int32_t>
 801a8bc:	4604      	mov	r4, r0
 801a8be:	6869      	ldr	r1, [r5, #4]
 801a8c0:	4630      	mov	r0, r6
 801a8c2:	f7f8 fc0d 	bl	80130e0 <ucdr_serialize_uint32_t>
 801a8c6:	4020      	ands	r0, r4
 801a8c8:	b2c0      	uxtb	r0, r0
 801a8ca:	bd70      	pop	{r4, r5, r6, pc}

0801a8cc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8d0:	460e      	mov	r6, r1
 801a8d2:	4605      	mov	r5, r0
 801a8d4:	f7f9 f8b6 	bl	8013a44 <ucdr_deserialize_int32_t>
 801a8d8:	4607      	mov	r7, r0
 801a8da:	1d31      	adds	r1, r6, #4
 801a8dc:	4628      	mov	r0, r5
 801a8de:	f7f8 fd2f 	bl	8013340 <ucdr_deserialize_uint32_t>
 801a8e2:	4680      	mov	r8, r0
 801a8e4:	f106 0108 	add.w	r1, r6, #8
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	f7f9 f8ab 	bl	8013a44 <ucdr_deserialize_int32_t>
 801a8ee:	ea07 0708 	and.w	r7, r7, r8
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	f106 010c 	add.w	r1, r6, #12
 801a8f8:	4628      	mov	r0, r5
 801a8fa:	403c      	ands	r4, r7
 801a8fc:	f7f8 fd20 	bl	8013340 <ucdr_deserialize_uint32_t>
 801a900:	f106 0110 	add.w	r1, r6, #16
 801a904:	4004      	ands	r4, r0
 801a906:	4628      	mov	r0, r5
 801a908:	f7f9 f89c 	bl	8013a44 <ucdr_deserialize_int32_t>
 801a90c:	4603      	mov	r3, r0
 801a90e:	b2e4      	uxtb	r4, r4
 801a910:	4628      	mov	r0, r5
 801a912:	461d      	mov	r5, r3
 801a914:	f106 0114 	add.w	r1, r6, #20
 801a918:	f7f8 fd12 	bl	8013340 <ucdr_deserialize_uint32_t>
 801a91c:	402c      	ands	r4, r5
 801a91e:	4020      	ands	r0, r4
 801a920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a924 <uxr_serialize_SampleIdentity>:
 801a924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a928:	4604      	mov	r4, r0
 801a92a:	460d      	mov	r5, r1
 801a92c:	220c      	movs	r2, #12
 801a92e:	f005 fb59 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a932:	2203      	movs	r2, #3
 801a934:	f105 010c 	add.w	r1, r5, #12
 801a938:	4607      	mov	r7, r0
 801a93a:	4620      	mov	r0, r4
 801a93c:	f005 fb52 	bl	801ffe4 <ucdr_serialize_array_uint8_t>
 801a940:	7be9      	ldrb	r1, [r5, #15]
 801a942:	4680      	mov	r8, r0
 801a944:	4620      	mov	r0, r4
 801a946:	f7f8 f9b5 	bl	8012cb4 <ucdr_serialize_uint8_t>
 801a94a:	6929      	ldr	r1, [r5, #16]
 801a94c:	4606      	mov	r6, r0
 801a94e:	4620      	mov	r0, r4
 801a950:	f7f8 ffe0 	bl	8013914 <ucdr_serialize_int32_t>
 801a954:	ea07 0708 	and.w	r7, r7, r8
 801a958:	4603      	mov	r3, r0
 801a95a:	4620      	mov	r0, r4
 801a95c:	403e      	ands	r6, r7
 801a95e:	6969      	ldr	r1, [r5, #20]
 801a960:	461c      	mov	r4, r3
 801a962:	f7f8 fbbd 	bl	80130e0 <ucdr_serialize_uint32_t>
 801a966:	4034      	ands	r4, r6
 801a968:	4020      	ands	r0, r4
 801a96a:	b2c0      	uxtb	r0, r0
 801a96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a970 <uxr_deserialize_SampleIdentity>:
 801a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a974:	4604      	mov	r4, r0
 801a976:	460d      	mov	r5, r1
 801a978:	220c      	movs	r2, #12
 801a97a:	f005 fb97 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a97e:	2203      	movs	r2, #3
 801a980:	f105 010c 	add.w	r1, r5, #12
 801a984:	4607      	mov	r7, r0
 801a986:	4620      	mov	r0, r4
 801a988:	f005 fb90 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 801a98c:	f105 010f 	add.w	r1, r5, #15
 801a990:	4680      	mov	r8, r0
 801a992:	4620      	mov	r0, r4
 801a994:	f7f8 f9a4 	bl	8012ce0 <ucdr_deserialize_uint8_t>
 801a998:	f105 0110 	add.w	r1, r5, #16
 801a99c:	4606      	mov	r6, r0
 801a99e:	4620      	mov	r0, r4
 801a9a0:	f7f9 f850 	bl	8013a44 <ucdr_deserialize_int32_t>
 801a9a4:	ea07 0708 	and.w	r7, r7, r8
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	4620      	mov	r0, r4
 801a9ac:	403e      	ands	r6, r7
 801a9ae:	f105 0114 	add.w	r1, r5, #20
 801a9b2:	461c      	mov	r4, r3
 801a9b4:	f7f8 fcc4 	bl	8013340 <ucdr_deserialize_uint32_t>
 801a9b8:	4034      	ands	r4, r6
 801a9ba:	4020      	ands	r0, r4
 801a9bc:	b2c0      	uxtb	r0, r0
 801a9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9c2:	bf00      	nop

0801a9c4 <rcl_client_get_rmw_handle>:
 801a9c4:	b118      	cbz	r0, 801a9ce <rcl_client_get_rmw_handle+0xa>
 801a9c6:	6800      	ldr	r0, [r0, #0]
 801a9c8:	b108      	cbz	r0, 801a9ce <rcl_client_get_rmw_handle+0xa>
 801a9ca:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801a9ce:	4770      	bx	lr

0801a9d0 <rcl_send_request>:
 801a9d0:	b570      	push	{r4, r5, r6, lr}
 801a9d2:	b082      	sub	sp, #8
 801a9d4:	b1f8      	cbz	r0, 801aa16 <rcl_send_request+0x46>
 801a9d6:	4604      	mov	r4, r0
 801a9d8:	6800      	ldr	r0, [r0, #0]
 801a9da:	b1e0      	cbz	r0, 801aa16 <rcl_send_request+0x46>
 801a9dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801a9e0:	b1cb      	cbz	r3, 801aa16 <rcl_send_request+0x46>
 801a9e2:	460e      	mov	r6, r1
 801a9e4:	b1e1      	cbz	r1, 801aa20 <rcl_send_request+0x50>
 801a9e6:	4615      	mov	r5, r2
 801a9e8:	b1d2      	cbz	r2, 801aa20 <rcl_send_request+0x50>
 801a9ea:	2105      	movs	r1, #5
 801a9ec:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801a9f0:	f003 f8b6 	bl	801db60 <__atomic_load_8>
 801a9f4:	4602      	mov	r2, r0
 801a9f6:	460b      	mov	r3, r1
 801a9f8:	4631      	mov	r1, r6
 801a9fa:	e9c5 2300 	strd	r2, r3, [r5]
 801a9fe:	6823      	ldr	r3, [r4, #0]
 801aa00:	462a      	mov	r2, r5
 801aa02:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801aa06:	f004 faa1 	bl	801ef4c <rmw_send_request>
 801aa0a:	4606      	mov	r6, r0
 801aa0c:	b160      	cbz	r0, 801aa28 <rcl_send_request+0x58>
 801aa0e:	2601      	movs	r6, #1
 801aa10:	4630      	mov	r0, r6
 801aa12:	b002      	add	sp, #8
 801aa14:	bd70      	pop	{r4, r5, r6, pc}
 801aa16:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801aa1a:	4630      	mov	r0, r6
 801aa1c:	b002      	add	sp, #8
 801aa1e:	bd70      	pop	{r4, r5, r6, pc}
 801aa20:	260b      	movs	r6, #11
 801aa22:	4630      	mov	r0, r6
 801aa24:	b002      	add	sp, #8
 801aa26:	bd70      	pop	{r4, r5, r6, pc}
 801aa28:	6820      	ldr	r0, [r4, #0]
 801aa2a:	2105      	movs	r1, #5
 801aa2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aa30:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801aa34:	9100      	str	r1, [sp, #0]
 801aa36:	f003 f8ff 	bl	801dc38 <__atomic_exchange_8>
 801aa3a:	4630      	mov	r0, r6
 801aa3c:	b002      	add	sp, #8
 801aa3e:	bd70      	pop	{r4, r5, r6, pc}

0801aa40 <rcl_take_response>:
 801aa40:	b570      	push	{r4, r5, r6, lr}
 801aa42:	468e      	mov	lr, r1
 801aa44:	b08c      	sub	sp, #48	@ 0x30
 801aa46:	460c      	mov	r4, r1
 801aa48:	4616      	mov	r6, r2
 801aa4a:	f10d 0c18 	add.w	ip, sp, #24
 801aa4e:	4605      	mov	r5, r0
 801aa50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aa54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aa58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aa5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aa60:	b35d      	cbz	r5, 801aaba <rcl_take_response+0x7a>
 801aa62:	682b      	ldr	r3, [r5, #0]
 801aa64:	b34b      	cbz	r3, 801aaba <rcl_take_response+0x7a>
 801aa66:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801aa6a:	b330      	cbz	r0, 801aaba <rcl_take_response+0x7a>
 801aa6c:	b346      	cbz	r6, 801aac0 <rcl_take_response+0x80>
 801aa6e:	2300      	movs	r3, #0
 801aa70:	4632      	mov	r2, r6
 801aa72:	a902      	add	r1, sp, #8
 801aa74:	f88d 3007 	strb.w	r3, [sp, #7]
 801aa78:	f10d 0307 	add.w	r3, sp, #7
 801aa7c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 801aac8 <rcl_take_response+0x88>
 801aa80:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aa84:	ed8d 7b04 	vstr	d7, [sp, #16]
 801aa88:	f004 fb68 	bl	801f15c <rmw_take_response>
 801aa8c:	4605      	mov	r5, r0
 801aa8e:	b9c8      	cbnz	r0, 801aac4 <rcl_take_response+0x84>
 801aa90:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801aa94:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801aa98:	2a00      	cmp	r2, #0
 801aa9a:	bf08      	it	eq
 801aa9c:	461d      	moveq	r5, r3
 801aa9e:	f10d 0e18 	add.w	lr, sp, #24
 801aaa2:	46a4      	mov	ip, r4
 801aaa4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aaa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aaac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801aab0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aab4:	4628      	mov	r0, r5
 801aab6:	b00c      	add	sp, #48	@ 0x30
 801aab8:	bd70      	pop	{r4, r5, r6, pc}
 801aaba:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801aabe:	e7ee      	b.n	801aa9e <rcl_take_response+0x5e>
 801aac0:	250b      	movs	r5, #11
 801aac2:	e7ec      	b.n	801aa9e <rcl_take_response+0x5e>
 801aac4:	2501      	movs	r5, #1
 801aac6:	e7ea      	b.n	801aa9e <rcl_take_response+0x5e>
	...

0801aad0 <rcl_client_is_valid>:
 801aad0:	b130      	cbz	r0, 801aae0 <rcl_client_is_valid+0x10>
 801aad2:	6800      	ldr	r0, [r0, #0]
 801aad4:	b120      	cbz	r0, 801aae0 <rcl_client_is_valid+0x10>
 801aad6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801aada:	3800      	subs	r0, #0
 801aadc:	bf18      	it	ne
 801aade:	2001      	movne	r0, #1
 801aae0:	4770      	bx	lr
 801aae2:	bf00      	nop

0801aae4 <rcl_convert_rmw_ret_to_rcl_ret>:
 801aae4:	280b      	cmp	r0, #11
 801aae6:	dc0d      	bgt.n	801ab04 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801aae8:	2800      	cmp	r0, #0
 801aaea:	db09      	blt.n	801ab00 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801aaec:	280b      	cmp	r0, #11
 801aaee:	d807      	bhi.n	801ab00 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801aaf0:	e8df f000 	tbb	[pc, r0]
 801aaf4:	07060607 	.word	0x07060607
 801aaf8:	06060606 	.word	0x06060606
 801aafc:	07070606 	.word	0x07070606
 801ab00:	2001      	movs	r0, #1
 801ab02:	4770      	bx	lr
 801ab04:	28cb      	cmp	r0, #203	@ 0xcb
 801ab06:	bf18      	it	ne
 801ab08:	2001      	movne	r0, #1
 801ab0a:	4770      	bx	lr

0801ab0c <rcl_get_zero_initialized_context>:
 801ab0c:	4a03      	ldr	r2, [pc, #12]	@ (801ab1c <rcl_get_zero_initialized_context+0x10>)
 801ab0e:	4603      	mov	r3, r0
 801ab10:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ab14:	e883 0003 	stmia.w	r3, {r0, r1}
 801ab18:	4618      	mov	r0, r3
 801ab1a:	4770      	bx	lr
 801ab1c:	08025334 	.word	0x08025334

0801ab20 <rcl_context_is_valid>:
 801ab20:	b118      	cbz	r0, 801ab2a <rcl_context_is_valid+0xa>
 801ab22:	6840      	ldr	r0, [r0, #4]
 801ab24:	3800      	subs	r0, #0
 801ab26:	bf18      	it	ne
 801ab28:	2001      	movne	r0, #1
 801ab2a:	4770      	bx	lr

0801ab2c <__cleanup_context>:
 801ab2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab30:	4606      	mov	r6, r0
 801ab32:	2300      	movs	r3, #0
 801ab34:	6800      	ldr	r0, [r0, #0]
 801ab36:	6073      	str	r3, [r6, #4]
 801ab38:	2800      	cmp	r0, #0
 801ab3a:	d049      	beq.n	801abd0 <__cleanup_context+0xa4>
 801ab3c:	6947      	ldr	r7, [r0, #20]
 801ab3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ab42:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801ab46:	b137      	cbz	r7, 801ab56 <__cleanup_context+0x2a>
 801ab48:	3014      	adds	r0, #20
 801ab4a:	f000 f9bd 	bl	801aec8 <rcl_init_options_fini>
 801ab4e:	4607      	mov	r7, r0
 801ab50:	2800      	cmp	r0, #0
 801ab52:	d144      	bne.n	801abde <__cleanup_context+0xb2>
 801ab54:	6830      	ldr	r0, [r6, #0]
 801ab56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ab58:	b143      	cbz	r3, 801ab6c <__cleanup_context+0x40>
 801ab5a:	3028      	adds	r0, #40	@ 0x28
 801ab5c:	f004 f83c 	bl	801ebd8 <rmw_context_fini>
 801ab60:	b118      	cbz	r0, 801ab6a <__cleanup_context+0x3e>
 801ab62:	2f00      	cmp	r7, #0
 801ab64:	d03e      	beq.n	801abe4 <__cleanup_context+0xb8>
 801ab66:	f7fa fcd3 	bl	8015510 <rcutils_reset_error>
 801ab6a:	6830      	ldr	r0, [r6, #0]
 801ab6c:	6a03      	ldr	r3, [r0, #32]
 801ab6e:	b1db      	cbz	r3, 801aba8 <__cleanup_context+0x7c>
 801ab70:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801ab74:	2a01      	cmp	r2, #1
 801ab76:	f17c 0100 	sbcs.w	r1, ip, #0
 801ab7a:	db11      	blt.n	801aba0 <__cleanup_context+0x74>
 801ab7c:	2400      	movs	r4, #0
 801ab7e:	4625      	mov	r5, r4
 801ab80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ab84:	4649      	mov	r1, r9
 801ab86:	b1b8      	cbz	r0, 801abb8 <__cleanup_context+0x8c>
 801ab88:	47c0      	blx	r8
 801ab8a:	6833      	ldr	r3, [r6, #0]
 801ab8c:	3401      	adds	r4, #1
 801ab8e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801ab92:	f145 0500 	adc.w	r5, r5, #0
 801ab96:	6a1b      	ldr	r3, [r3, #32]
 801ab98:	4294      	cmp	r4, r2
 801ab9a:	eb75 010c 	sbcs.w	r1, r5, ip
 801ab9e:	dbef      	blt.n	801ab80 <__cleanup_context+0x54>
 801aba0:	4618      	mov	r0, r3
 801aba2:	4649      	mov	r1, r9
 801aba4:	47c0      	blx	r8
 801aba6:	6830      	ldr	r0, [r6, #0]
 801aba8:	4649      	mov	r1, r9
 801abaa:	47c0      	blx	r8
 801abac:	2300      	movs	r3, #0
 801abae:	4638      	mov	r0, r7
 801abb0:	e9c6 3300 	strd	r3, r3, [r6]
 801abb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abb8:	3401      	adds	r4, #1
 801abba:	f145 0500 	adc.w	r5, r5, #0
 801abbe:	4294      	cmp	r4, r2
 801abc0:	eb75 010c 	sbcs.w	r1, r5, ip
 801abc4:	dbdc      	blt.n	801ab80 <__cleanup_context+0x54>
 801abc6:	4618      	mov	r0, r3
 801abc8:	4649      	mov	r1, r9
 801abca:	47c0      	blx	r8
 801abcc:	6830      	ldr	r0, [r6, #0]
 801abce:	e7eb      	b.n	801aba8 <__cleanup_context+0x7c>
 801abd0:	4607      	mov	r7, r0
 801abd2:	2300      	movs	r3, #0
 801abd4:	4638      	mov	r0, r7
 801abd6:	e9c6 3300 	strd	r3, r3, [r6]
 801abda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abde:	f7fa fc97 	bl	8015510 <rcutils_reset_error>
 801abe2:	e7b7      	b.n	801ab54 <__cleanup_context+0x28>
 801abe4:	f7ff ff7e 	bl	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>
 801abe8:	4607      	mov	r7, r0
 801abea:	e7bc      	b.n	801ab66 <__cleanup_context+0x3a>

0801abec <rcl_init>:
 801abec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abf0:	1e05      	subs	r5, r0, #0
 801abf2:	b09e      	sub	sp, #120	@ 0x78
 801abf4:	460e      	mov	r6, r1
 801abf6:	4690      	mov	r8, r2
 801abf8:	461f      	mov	r7, r3
 801abfa:	f340 809f 	ble.w	801ad3c <rcl_init+0x150>
 801abfe:	2900      	cmp	r1, #0
 801ac00:	f000 809f 	beq.w	801ad42 <rcl_init+0x156>
 801ac04:	f1a1 0e04 	sub.w	lr, r1, #4
 801ac08:	f04f 0c00 	mov.w	ip, #0
 801ac0c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801ac10:	f10c 0c01 	add.w	ip, ip, #1
 801ac14:	2c00      	cmp	r4, #0
 801ac16:	f000 8094 	beq.w	801ad42 <rcl_init+0x156>
 801ac1a:	4565      	cmp	r5, ip
 801ac1c:	d1f6      	bne.n	801ac0c <rcl_init+0x20>
 801ac1e:	f1b8 0f00 	cmp.w	r8, #0
 801ac22:	f000 808e 	beq.w	801ad42 <rcl_init+0x156>
 801ac26:	f8d8 4000 	ldr.w	r4, [r8]
 801ac2a:	2c00      	cmp	r4, #0
 801ac2c:	f000 8089 	beq.w	801ad42 <rcl_init+0x156>
 801ac30:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801ac34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ac3a:	6823      	ldr	r3, [r4, #0]
 801ac3c:	a819      	add	r0, sp, #100	@ 0x64
 801ac3e:	f8cc 3000 	str.w	r3, [ip]
 801ac42:	f7fa fc41 	bl	80154c8 <rcutils_allocator_is_valid>
 801ac46:	f080 0001 	eor.w	r0, r0, #1
 801ac4a:	b2c0      	uxtb	r0, r0
 801ac4c:	2800      	cmp	r0, #0
 801ac4e:	d178      	bne.n	801ad42 <rcl_init+0x156>
 801ac50:	2f00      	cmp	r7, #0
 801ac52:	d076      	beq.n	801ad42 <rcl_init+0x156>
 801ac54:	683b      	ldr	r3, [r7, #0]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d178      	bne.n	801ad4c <rcl_init+0x160>
 801ac5a:	2178      	movs	r1, #120	@ 0x78
 801ac5c:	2001      	movs	r0, #1
 801ac5e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801ac62:	4798      	blx	r3
 801ac64:	4604      	mov	r4, r0
 801ac66:	6038      	str	r0, [r7, #0]
 801ac68:	2800      	cmp	r0, #0
 801ac6a:	f000 80b6 	beq.w	801adda <rcl_init+0x1ee>
 801ac6e:	a802      	add	r0, sp, #8
 801ac70:	f003 faea 	bl	801e248 <rmw_get_zero_initialized_context>
 801ac74:	a902      	add	r1, sp, #8
 801ac76:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801ac7a:	2250      	movs	r2, #80	@ 0x50
 801ac7c:	f007 fc47 	bl	802250e <memcpy>
 801ac80:	ac19      	add	r4, sp, #100	@ 0x64
 801ac82:	f8d7 e000 	ldr.w	lr, [r7]
 801ac86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac88:	46f4      	mov	ip, lr
 801ac8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ac8e:	6823      	ldr	r3, [r4, #0]
 801ac90:	f10e 0114 	add.w	r1, lr, #20
 801ac94:	4640      	mov	r0, r8
 801ac96:	f8cc 3000 	str.w	r3, [ip]
 801ac9a:	f000 f93f 	bl	801af1c <rcl_init_options_copy>
 801ac9e:	4604      	mov	r4, r0
 801aca0:	2800      	cmp	r0, #0
 801aca2:	d144      	bne.n	801ad2e <rcl_init+0x142>
 801aca4:	f8d7 9000 	ldr.w	r9, [r7]
 801aca8:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801acac:	f8c9 0020 	str.w	r0, [r9, #32]
 801acb0:	f8c9 5018 	str.w	r5, [r9, #24]
 801acb4:	f8c9 801c 	str.w	r8, [r9, #28]
 801acb8:	2d00      	cmp	r5, #0
 801acba:	d04e      	beq.n	801ad5a <rcl_init+0x16e>
 801acbc:	2e00      	cmp	r6, #0
 801acbe:	d04c      	beq.n	801ad5a <rcl_init+0x16e>
 801acc0:	2104      	movs	r1, #4
 801acc2:	4628      	mov	r0, r5
 801acc4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801acc8:	4798      	blx	r3
 801acca:	f8c9 0020 	str.w	r0, [r9, #32]
 801acce:	f8d7 9000 	ldr.w	r9, [r7]
 801acd2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801acd6:	46ca      	mov	sl, r9
 801acd8:	b343      	cbz	r3, 801ad2c <rcl_init+0x140>
 801acda:	2d01      	cmp	r5, #1
 801acdc:	f178 0300 	sbcs.w	r3, r8, #0
 801ace0:	db3b      	blt.n	801ad5a <rcl_init+0x16e>
 801ace2:	2400      	movs	r4, #0
 801ace4:	3e04      	subs	r6, #4
 801ace6:	46a1      	mov	r9, r4
 801ace8:	e00b      	b.n	801ad02 <rcl_init+0x116>
 801acea:	6831      	ldr	r1, [r6, #0]
 801acec:	f007 fc0f 	bl	802250e <memcpy>
 801acf0:	3401      	adds	r4, #1
 801acf2:	f149 0900 	adc.w	r9, r9, #0
 801acf6:	45c8      	cmp	r8, r9
 801acf8:	bf08      	it	eq
 801acfa:	42a5      	cmpeq	r5, r4
 801acfc:	d02b      	beq.n	801ad56 <rcl_init+0x16a>
 801acfe:	f8d7 a000 	ldr.w	sl, [r7]
 801ad02:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801ad06:	f7e5 faf5 	bl	80002f4 <strlen>
 801ad0a:	1c42      	adds	r2, r0, #1
 801ad0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad0e:	4610      	mov	r0, r2
 801ad10:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801ad12:	f8da a020 	ldr.w	sl, [sl, #32]
 801ad16:	9201      	str	r2, [sp, #4]
 801ad18:	4798      	blx	r3
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801ad20:	6a1b      	ldr	r3, [r3, #32]
 801ad22:	9a01      	ldr	r2, [sp, #4]
 801ad24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ad28:	2800      	cmp	r0, #0
 801ad2a:	d1de      	bne.n	801acea <rcl_init+0xfe>
 801ad2c:	240a      	movs	r4, #10
 801ad2e:	4638      	mov	r0, r7
 801ad30:	f7ff fefc 	bl	801ab2c <__cleanup_context>
 801ad34:	4620      	mov	r0, r4
 801ad36:	b01e      	add	sp, #120	@ 0x78
 801ad38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad3c:	2900      	cmp	r1, #0
 801ad3e:	f43f af6e 	beq.w	801ac1e <rcl_init+0x32>
 801ad42:	240b      	movs	r4, #11
 801ad44:	4620      	mov	r0, r4
 801ad46:	b01e      	add	sp, #120	@ 0x78
 801ad48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad4c:	2464      	movs	r4, #100	@ 0x64
 801ad4e:	4620      	mov	r0, r4
 801ad50:	b01e      	add	sp, #120	@ 0x78
 801ad52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad56:	f8d7 9000 	ldr.w	r9, [r7]
 801ad5a:	4926      	ldr	r1, [pc, #152]	@ (801adf4 <rcl_init+0x208>)
 801ad5c:	680b      	ldr	r3, [r1, #0]
 801ad5e:	3301      	adds	r3, #1
 801ad60:	d036      	beq.n	801add0 <rcl_init+0x1e4>
 801ad62:	461a      	mov	r2, r3
 801ad64:	2400      	movs	r4, #0
 801ad66:	600b      	str	r3, [r1, #0]
 801ad68:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801ad6c:	607b      	str	r3, [r7, #4]
 801ad6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ad70:	3301      	adds	r3, #1
 801ad72:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801ad76:	d034      	beq.n	801ade2 <rcl_init+0x1f6>
 801ad78:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801ad7c:	b93b      	cbnz	r3, 801ad8e <rcl_init+0x1a2>
 801ad7e:	3030      	adds	r0, #48	@ 0x30
 801ad80:	f000 f93a 	bl	801aff8 <rcl_get_localhost_only>
 801ad84:	4604      	mov	r4, r0
 801ad86:	2800      	cmp	r0, #0
 801ad88:	d1d1      	bne.n	801ad2e <rcl_init+0x142>
 801ad8a:	683b      	ldr	r3, [r7, #0]
 801ad8c:	6958      	ldr	r0, [r3, #20]
 801ad8e:	aa18      	add	r2, sp, #96	@ 0x60
 801ad90:	a917      	add	r1, sp, #92	@ 0x5c
 801ad92:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801ad94:	f001 fb6e 	bl	801c474 <rcl_validate_enclave_name>
 801ad98:	4604      	mov	r4, r0
 801ad9a:	2800      	cmp	r0, #0
 801ad9c:	d1c7      	bne.n	801ad2e <rcl_init+0x142>
 801ad9e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ada0:	b9eb      	cbnz	r3, 801adde <rcl_init+0x1f2>
 801ada2:	6839      	ldr	r1, [r7, #0]
 801ada4:	694b      	ldr	r3, [r1, #20]
 801ada6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801adaa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801adac:	f000 fc72 	bl	801b694 <rcl_get_security_options_from_environment>
 801adb0:	4604      	mov	r4, r0
 801adb2:	2800      	cmp	r0, #0
 801adb4:	d1bb      	bne.n	801ad2e <rcl_init+0x142>
 801adb6:	6839      	ldr	r1, [r7, #0]
 801adb8:	6948      	ldr	r0, [r1, #20]
 801adba:	3128      	adds	r1, #40	@ 0x28
 801adbc:	3018      	adds	r0, #24
 801adbe:	f003 fdd5 	bl	801e96c <rmw_init>
 801adc2:	4604      	mov	r4, r0
 801adc4:	2800      	cmp	r0, #0
 801adc6:	d0bd      	beq.n	801ad44 <rcl_init+0x158>
 801adc8:	f7ff fe8c 	bl	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>
 801adcc:	4604      	mov	r4, r0
 801adce:	e7ae      	b.n	801ad2e <rcl_init+0x142>
 801add0:	2201      	movs	r2, #1
 801add2:	461c      	mov	r4, r3
 801add4:	600a      	str	r2, [r1, #0]
 801add6:	4613      	mov	r3, r2
 801add8:	e7c6      	b.n	801ad68 <rcl_init+0x17c>
 801adda:	240a      	movs	r4, #10
 801addc:	e7b2      	b.n	801ad44 <rcl_init+0x158>
 801adde:	2401      	movs	r4, #1
 801ade0:	e7a5      	b.n	801ad2e <rcl_init+0x142>
 801ade2:	3024      	adds	r0, #36	@ 0x24
 801ade4:	f006 f87c 	bl	8020ee0 <rcl_get_default_domain_id>
 801ade8:	4604      	mov	r4, r0
 801adea:	2800      	cmp	r0, #0
 801adec:	d19f      	bne.n	801ad2e <rcl_init+0x142>
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	6958      	ldr	r0, [r3, #20]
 801adf2:	e7c1      	b.n	801ad78 <rcl_init+0x18c>
 801adf4:	24069278 	.word	0x24069278

0801adf8 <rcl_get_zero_initialized_init_options>:
 801adf8:	2000      	movs	r0, #0
 801adfa:	4770      	bx	lr

0801adfc <rcl_init_options_init>:
 801adfc:	b084      	sub	sp, #16
 801adfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae00:	b097      	sub	sp, #92	@ 0x5c
 801ae02:	ae1d      	add	r6, sp, #116	@ 0x74
 801ae04:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801ae08:	2800      	cmp	r0, #0
 801ae0a:	d058      	beq.n	801aebe <rcl_init_options_init+0xc2>
 801ae0c:	6803      	ldr	r3, [r0, #0]
 801ae0e:	4605      	mov	r5, r0
 801ae10:	b133      	cbz	r3, 801ae20 <rcl_init_options_init+0x24>
 801ae12:	2464      	movs	r4, #100	@ 0x64
 801ae14:	4620      	mov	r0, r4
 801ae16:	b017      	add	sp, #92	@ 0x5c
 801ae18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ae1c:	b004      	add	sp, #16
 801ae1e:	4770      	bx	lr
 801ae20:	4630      	mov	r0, r6
 801ae22:	f7fa fb51 	bl	80154c8 <rcutils_allocator_is_valid>
 801ae26:	2800      	cmp	r0, #0
 801ae28:	d049      	beq.n	801aebe <rcl_init_options_init+0xc2>
 801ae2a:	46b4      	mov	ip, r6
 801ae2c:	ac11      	add	r4, sp, #68	@ 0x44
 801ae2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ae34:	f8dc 3000 	ldr.w	r3, [ip]
 801ae38:	2050      	movs	r0, #80	@ 0x50
 801ae3a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801ae3c:	6023      	str	r3, [r4, #0]
 801ae3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae40:	4798      	blx	r3
 801ae42:	4604      	mov	r4, r0
 801ae44:	6028      	str	r0, [r5, #0]
 801ae46:	2800      	cmp	r0, #0
 801ae48:	d03b      	beq.n	801aec2 <rcl_init_options_init+0xc6>
 801ae4a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801ae4e:	4686      	mov	lr, r0
 801ae50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ae54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ae58:	f8dc 3000 	ldr.w	r3, [ip]
 801ae5c:	a802      	add	r0, sp, #8
 801ae5e:	f8ce 3000 	str.w	r3, [lr]
 801ae62:	f003 fa05 	bl	801e270 <rmw_get_zero_initialized_init_options>
 801ae66:	f10d 0e08 	add.w	lr, sp, #8
 801ae6a:	f104 0c18 	add.w	ip, r4, #24
 801ae6e:	682f      	ldr	r7, [r5, #0]
 801ae70:	ac20      	add	r4, sp, #128	@ 0x80
 801ae72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae8a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801ae8e:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ae92:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ae96:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ae9a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801ae9e:	f107 0018 	add.w	r0, r7, #24
 801aea2:	f003 fc65 	bl	801e770 <rmw_init_options_init>
 801aea6:	4604      	mov	r4, r0
 801aea8:	2800      	cmp	r0, #0
 801aeaa:	d0b3      	beq.n	801ae14 <rcl_init_options_init+0x18>
 801aeac:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801aeae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801aeb0:	6828      	ldr	r0, [r5, #0]
 801aeb2:	4798      	blx	r3
 801aeb4:	4620      	mov	r0, r4
 801aeb6:	f7ff fe15 	bl	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>
 801aeba:	4604      	mov	r4, r0
 801aebc:	e7aa      	b.n	801ae14 <rcl_init_options_init+0x18>
 801aebe:	240b      	movs	r4, #11
 801aec0:	e7a8      	b.n	801ae14 <rcl_init_options_init+0x18>
 801aec2:	240a      	movs	r4, #10
 801aec4:	e7a6      	b.n	801ae14 <rcl_init_options_init+0x18>
 801aec6:	bf00      	nop

0801aec8 <rcl_init_options_fini>:
 801aec8:	b530      	push	{r4, r5, lr}
 801aeca:	b087      	sub	sp, #28
 801aecc:	b1f0      	cbz	r0, 801af0c <rcl_init_options_fini+0x44>
 801aece:	6803      	ldr	r3, [r0, #0]
 801aed0:	4604      	mov	r4, r0
 801aed2:	b1db      	cbz	r3, 801af0c <rcl_init_options_fini+0x44>
 801aed4:	469c      	mov	ip, r3
 801aed6:	f10d 0e04 	add.w	lr, sp, #4
 801aeda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aede:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801aee2:	f8dc 3000 	ldr.w	r3, [ip]
 801aee6:	a801      	add	r0, sp, #4
 801aee8:	f8ce 3000 	str.w	r3, [lr]
 801aeec:	f7fa faec 	bl	80154c8 <rcutils_allocator_is_valid>
 801aef0:	b160      	cbz	r0, 801af0c <rcl_init_options_fini+0x44>
 801aef2:	6820      	ldr	r0, [r4, #0]
 801aef4:	3018      	adds	r0, #24
 801aef6:	f003 fcf5 	bl	801e8e4 <rmw_init_options_fini>
 801aefa:	4605      	mov	r5, r0
 801aefc:	b950      	cbnz	r0, 801af14 <rcl_init_options_fini+0x4c>
 801aefe:	6820      	ldr	r0, [r4, #0]
 801af00:	9b02      	ldr	r3, [sp, #8]
 801af02:	9905      	ldr	r1, [sp, #20]
 801af04:	4798      	blx	r3
 801af06:	4628      	mov	r0, r5
 801af08:	b007      	add	sp, #28
 801af0a:	bd30      	pop	{r4, r5, pc}
 801af0c:	250b      	movs	r5, #11
 801af0e:	4628      	mov	r0, r5
 801af10:	b007      	add	sp, #28
 801af12:	bd30      	pop	{r4, r5, pc}
 801af14:	f7ff fde6 	bl	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>
 801af18:	4605      	mov	r5, r0
 801af1a:	e7f8      	b.n	801af0e <rcl_init_options_fini+0x46>

0801af1c <rcl_init_options_copy>:
 801af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af20:	b094      	sub	sp, #80	@ 0x50
 801af22:	2800      	cmp	r0, #0
 801af24:	d05b      	beq.n	801afde <rcl_init_options_copy+0xc2>
 801af26:	4604      	mov	r4, r0
 801af28:	6800      	ldr	r0, [r0, #0]
 801af2a:	2800      	cmp	r0, #0
 801af2c:	d057      	beq.n	801afde <rcl_init_options_copy+0xc2>
 801af2e:	460e      	mov	r6, r1
 801af30:	f7fa faca 	bl	80154c8 <rcutils_allocator_is_valid>
 801af34:	2e00      	cmp	r6, #0
 801af36:	d052      	beq.n	801afde <rcl_init_options_copy+0xc2>
 801af38:	f080 0001 	eor.w	r0, r0, #1
 801af3c:	b2c0      	uxtb	r0, r0
 801af3e:	2800      	cmp	r0, #0
 801af40:	d14d      	bne.n	801afde <rcl_init_options_copy+0xc2>
 801af42:	6833      	ldr	r3, [r6, #0]
 801af44:	b123      	cbz	r3, 801af50 <rcl_init_options_copy+0x34>
 801af46:	2464      	movs	r4, #100	@ 0x64
 801af48:	4620      	mov	r0, r4
 801af4a:	b014      	add	sp, #80	@ 0x50
 801af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af50:	6827      	ldr	r7, [r4, #0]
 801af52:	ad0f      	add	r5, sp, #60	@ 0x3c
 801af54:	46bc      	mov	ip, r7
 801af56:	f8d7 8000 	ldr.w	r8, [r7]
 801af5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801af60:	f8dc 3000 	ldr.w	r3, [ip]
 801af64:	2050      	movs	r0, #80	@ 0x50
 801af66:	4619      	mov	r1, r3
 801af68:	602b      	str	r3, [r5, #0]
 801af6a:	47c0      	blx	r8
 801af6c:	4605      	mov	r5, r0
 801af6e:	6030      	str	r0, [r6, #0]
 801af70:	b3d0      	cbz	r0, 801afe8 <rcl_init_options_copy+0xcc>
 801af72:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801af76:	4686      	mov	lr, r0
 801af78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801af7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801af80:	f8dc 3000 	ldr.w	r3, [ip]
 801af84:	4668      	mov	r0, sp
 801af86:	f8ce 3000 	str.w	r3, [lr]
 801af8a:	f003 f971 	bl	801e270 <rmw_get_zero_initialized_init_options>
 801af8e:	46ee      	mov	lr, sp
 801af90:	f105 0c18 	add.w	ip, r5, #24
 801af94:	6824      	ldr	r4, [r4, #0]
 801af96:	6835      	ldr	r5, [r6, #0]
 801af98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801af9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801afa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801afac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afb0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801afb4:	e88c 0003 	stmia.w	ip, {r0, r1}
 801afb8:	f104 0018 	add.w	r0, r4, #24
 801afbc:	f105 0118 	add.w	r1, r5, #24
 801afc0:	f003 fc3e 	bl	801e840 <rmw_init_options_copy>
 801afc4:	4604      	mov	r4, r0
 801afc6:	2800      	cmp	r0, #0
 801afc8:	d0be      	beq.n	801af48 <rcl_init_options_copy+0x2c>
 801afca:	f7fa fa8b 	bl	80154e4 <rcutils_get_error_string>
 801afce:	f7fa fa9f 	bl	8015510 <rcutils_reset_error>
 801afd2:	4630      	mov	r0, r6
 801afd4:	f7ff ff78 	bl	801aec8 <rcl_init_options_fini>
 801afd8:	b140      	cbz	r0, 801afec <rcl_init_options_copy+0xd0>
 801afda:	4604      	mov	r4, r0
 801afdc:	e7b4      	b.n	801af48 <rcl_init_options_copy+0x2c>
 801afde:	240b      	movs	r4, #11
 801afe0:	4620      	mov	r0, r4
 801afe2:	b014      	add	sp, #80	@ 0x50
 801afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afe8:	240a      	movs	r4, #10
 801afea:	e7ad      	b.n	801af48 <rcl_init_options_copy+0x2c>
 801afec:	4620      	mov	r0, r4
 801afee:	b014      	add	sp, #80	@ 0x50
 801aff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aff4:	f7ff bd76 	b.w	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>

0801aff8 <rcl_get_localhost_only>:
 801aff8:	b510      	push	{r4, lr}
 801affa:	2300      	movs	r3, #0
 801affc:	b082      	sub	sp, #8
 801affe:	9301      	str	r3, [sp, #4]
 801b000:	b1b8      	cbz	r0, 801b032 <rcl_get_localhost_only+0x3a>
 801b002:	4604      	mov	r4, r0
 801b004:	a901      	add	r1, sp, #4
 801b006:	480c      	ldr	r0, [pc, #48]	@ (801b038 <rcl_get_localhost_only+0x40>)
 801b008:	f002 fe4e 	bl	801dca8 <rcutils_get_env>
 801b00c:	b110      	cbz	r0, 801b014 <rcl_get_localhost_only+0x1c>
 801b00e:	2001      	movs	r0, #1
 801b010:	b002      	add	sp, #8
 801b012:	bd10      	pop	{r4, pc}
 801b014:	9b01      	ldr	r3, [sp, #4]
 801b016:	b113      	cbz	r3, 801b01e <rcl_get_localhost_only+0x26>
 801b018:	781a      	ldrb	r2, [r3, #0]
 801b01a:	2a31      	cmp	r2, #49	@ 0x31
 801b01c:	d004      	beq.n	801b028 <rcl_get_localhost_only+0x30>
 801b01e:	2302      	movs	r3, #2
 801b020:	2000      	movs	r0, #0
 801b022:	7023      	strb	r3, [r4, #0]
 801b024:	b002      	add	sp, #8
 801b026:	bd10      	pop	{r4, pc}
 801b028:	785b      	ldrb	r3, [r3, #1]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d1f7      	bne.n	801b01e <rcl_get_localhost_only+0x26>
 801b02e:	2301      	movs	r3, #1
 801b030:	e7f6      	b.n	801b020 <rcl_get_localhost_only+0x28>
 801b032:	200b      	movs	r0, #11
 801b034:	b002      	add	sp, #8
 801b036:	bd10      	pop	{r4, pc}
 801b038:	0802533c 	.word	0x0802533c

0801b03c <rcl_get_zero_initialized_node>:
 801b03c:	4a03      	ldr	r2, [pc, #12]	@ (801b04c <rcl_get_zero_initialized_node+0x10>)
 801b03e:	4603      	mov	r3, r0
 801b040:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b044:	e883 0003 	stmia.w	r3, {r0, r1}
 801b048:	4618      	mov	r0, r3
 801b04a:	4770      	bx	lr
 801b04c:	08025364 	.word	0x08025364

0801b050 <rcl_node_init>:
 801b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b054:	b0a9      	sub	sp, #164	@ 0xa4
 801b056:	4604      	mov	r4, r0
 801b058:	460e      	mov	r6, r1
 801b05a:	4615      	mov	r5, r2
 801b05c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801b060:	a823      	add	r0, sp, #140	@ 0x8c
 801b062:	461f      	mov	r7, r3
 801b064:	f006 f9b0 	bl	80213c8 <rcl_guard_condition_get_default_options>
 801b068:	f1b8 0f00 	cmp.w	r8, #0
 801b06c:	f000 80f3 	beq.w	801b256 <rcl_node_init+0x206>
 801b070:	4640      	mov	r0, r8
 801b072:	f7fa fa29 	bl	80154c8 <rcutils_allocator_is_valid>
 801b076:	2d00      	cmp	r5, #0
 801b078:	bf18      	it	ne
 801b07a:	2c00      	cmpne	r4, #0
 801b07c:	f080 0001 	eor.w	r0, r0, #1
 801b080:	bf0c      	ite	eq
 801b082:	f04f 0c01 	moveq.w	ip, #1
 801b086:	f04f 0c00 	movne.w	ip, #0
 801b08a:	2e00      	cmp	r6, #0
 801b08c:	bf08      	it	eq
 801b08e:	f04c 0c01 	orreq.w	ip, ip, #1
 801b092:	ea4c 0c00 	orr.w	ip, ip, r0
 801b096:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801b09a:	f040 80dc 	bne.w	801b256 <rcl_node_init+0x206>
 801b09e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b0a2:	f1ba 0f00 	cmp.w	sl, #0
 801b0a6:	f040 80fc 	bne.w	801b2a2 <rcl_node_init+0x252>
 801b0aa:	2f00      	cmp	r7, #0
 801b0ac:	f000 80d3 	beq.w	801b256 <rcl_node_init+0x206>
 801b0b0:	4638      	mov	r0, r7
 801b0b2:	f7ff fd35 	bl	801ab20 <rcl_context_is_valid>
 801b0b6:	4683      	mov	fp, r0
 801b0b8:	2800      	cmp	r0, #0
 801b0ba:	f000 80d2 	beq.w	801b262 <rcl_node_init+0x212>
 801b0be:	4652      	mov	r2, sl
 801b0c0:	4630      	mov	r0, r6
 801b0c2:	a922      	add	r1, sp, #136	@ 0x88
 801b0c4:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 801b0c8:	f003 fa84 	bl	801e5d4 <rmw_validate_node_name>
 801b0cc:	4682      	mov	sl, r0
 801b0ce:	2800      	cmp	r0, #0
 801b0d0:	f040 80c3 	bne.w	801b25a <rcl_node_init+0x20a>
 801b0d4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b0d6:	2800      	cmp	r0, #0
 801b0d8:	f040 80f1 	bne.w	801b2be <rcl_node_init+0x26e>
 801b0dc:	4628      	mov	r0, r5
 801b0de:	f7e5 f909 	bl	80002f4 <strlen>
 801b0e2:	2800      	cmp	r0, #0
 801b0e4:	f040 80c0 	bne.w	801b268 <rcl_node_init+0x218>
 801b0e8:	4d79      	ldr	r5, [pc, #484]	@ (801b2d0 <rcl_node_init+0x280>)
 801b0ea:	a922      	add	r1, sp, #136	@ 0x88
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	f003 fa52 	bl	801e598 <rmw_validate_namespace>
 801b0f4:	4682      	mov	sl, r0
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	f040 80af 	bne.w	801b25a <rcl_node_init+0x20a>
 801b0fc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801b0fe:	2800      	cmp	r0, #0
 801b100:	f040 80d5 	bne.w	801b2ae <rcl_node_init+0x25e>
 801b104:	f8d8 3000 	ldr.w	r3, [r8]
 801b108:	2078      	movs	r0, #120	@ 0x78
 801b10a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b10e:	4798      	blx	r3
 801b110:	4682      	mov	sl, r0
 801b112:	6060      	str	r0, [r4, #4]
 801b114:	2800      	cmp	r0, #0
 801b116:	f000 80cf 	beq.w	801b2b8 <rcl_node_init+0x268>
 801b11a:	2200      	movs	r2, #0
 801b11c:	2300      	movs	r3, #0
 801b11e:	a808      	add	r0, sp, #32
 801b120:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 801b124:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 801b128:	f000 f902 	bl	801b330 <rcl_node_get_default_options>
 801b12c:	a908      	add	r1, sp, #32
 801b12e:	4650      	mov	r0, sl
 801b130:	2268      	movs	r2, #104	@ 0x68
 801b132:	f007 f9ec 	bl	802250e <memcpy>
 801b136:	6861      	ldr	r1, [r4, #4]
 801b138:	4640      	mov	r0, r8
 801b13a:	6027      	str	r7, [r4, #0]
 801b13c:	f000 f906 	bl	801b34c <rcl_node_options_copy>
 801b140:	2800      	cmp	r0, #0
 801b142:	d158      	bne.n	801b1f6 <rcl_node_init+0x1a6>
 801b144:	4628      	mov	r0, r5
 801b146:	f7e5 f8d5 	bl	80002f4 <strlen>
 801b14a:	4428      	add	r0, r5
 801b14c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801b150:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801b154:	2b2f      	cmp	r3, #47	@ 0x2f
 801b156:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b15a:	9300      	str	r3, [sp, #0]
 801b15c:	bf0c      	ite	eq
 801b15e:	4b5d      	ldreq	r3, [pc, #372]	@ (801b2d4 <rcl_node_init+0x284>)
 801b160:	4b5d      	ldrne	r3, [pc, #372]	@ (801b2d8 <rcl_node_init+0x288>)
 801b162:	9302      	str	r3, [sp, #8]
 801b164:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b168:	9301      	str	r3, [sp, #4]
 801b16a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801b16e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b172:	f002 fdc1 	bl	801dcf8 <rcutils_format_string_limit>
 801b176:	6823      	ldr	r3, [r4, #0]
 801b178:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801b17c:	4631      	mov	r1, r6
 801b17e:	6818      	ldr	r0, [r3, #0]
 801b180:	462a      	mov	r2, r5
 801b182:	6866      	ldr	r6, [r4, #4]
 801b184:	3028      	adds	r0, #40	@ 0x28
 801b186:	f003 fe4b 	bl	801ee20 <rmw_create_node>
 801b18a:	6863      	ldr	r3, [r4, #4]
 801b18c:	66b0      	str	r0, [r6, #104]	@ 0x68
 801b18e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b190:	2800      	cmp	r0, #0
 801b192:	d032      	beq.n	801b1fa <rcl_node_init+0x1aa>
 801b194:	f003 fed4 	bl	801ef40 <rmw_node_get_graph_guard_condition>
 801b198:	4682      	mov	sl, r0
 801b19a:	b360      	cbz	r0, 801b1f6 <rcl_node_init+0x1a6>
 801b19c:	f8d8 3000 	ldr.w	r3, [r8]
 801b1a0:	2008      	movs	r0, #8
 801b1a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b1a6:	6866      	ldr	r6, [r4, #4]
 801b1a8:	4798      	blx	r3
 801b1aa:	6863      	ldr	r3, [r4, #4]
 801b1ac:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801b1ae:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801b1b2:	f1bb 0f00 	cmp.w	fp, #0
 801b1b6:	d020      	beq.n	801b1fa <rcl_node_init+0x1aa>
 801b1b8:	a806      	add	r0, sp, #24
 801b1ba:	ae23      	add	r6, sp, #140	@ 0x8c
 801b1bc:	f006 f82a 	bl	8021214 <rcl_get_zero_initialized_guard_condition>
 801b1c0:	a806      	add	r0, sp, #24
 801b1c2:	6863      	ldr	r3, [r4, #4]
 801b1c4:	46c4      	mov	ip, r8
 801b1c6:	c803      	ldmia	r0, {r0, r1}
 801b1c8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801b1cc:	e88b 0003 	stmia.w	fp, {r0, r1}
 801b1d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b1d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b1d6:	f8dc 3000 	ldr.w	r3, [ip]
 801b1da:	6033      	str	r3, [r6, #0]
 801b1dc:	ab28      	add	r3, sp, #160	@ 0xa0
 801b1de:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801b1e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b1e6:	4651      	mov	r1, sl
 801b1e8:	463a      	mov	r2, r7
 801b1ea:	4670      	mov	r0, lr
 801b1ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b1ee:	f006 f869 	bl	80212c4 <rcl_guard_condition_init_from_rmw>
 801b1f2:	4682      	mov	sl, r0
 801b1f4:	b328      	cbz	r0, 801b242 <rcl_node_init+0x1f2>
 801b1f6:	6863      	ldr	r3, [r4, #4]
 801b1f8:	b1f3      	cbz	r3, 801b238 <rcl_node_init+0x1e8>
 801b1fa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801b1fc:	b128      	cbz	r0, 801b20a <rcl_node_init+0x1ba>
 801b1fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b202:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b206:	4798      	blx	r3
 801b208:	6863      	ldr	r3, [r4, #4]
 801b20a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801b20c:	b110      	cbz	r0, 801b214 <rcl_node_init+0x1c4>
 801b20e:	f003 fe19 	bl	801ee44 <rmw_destroy_node>
 801b212:	6863      	ldr	r3, [r4, #4]
 801b214:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b216:	b148      	cbz	r0, 801b22c <rcl_node_init+0x1dc>
 801b218:	f006 f8b0 	bl	802137c <rcl_guard_condition_fini>
 801b21c:	6863      	ldr	r3, [r4, #4]
 801b21e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b222:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801b224:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b228:	4798      	blx	r3
 801b22a:	6863      	ldr	r3, [r4, #4]
 801b22c:	4618      	mov	r0, r3
 801b22e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b232:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b236:	4798      	blx	r3
 801b238:	2300      	movs	r3, #0
 801b23a:	f04f 0a01 	mov.w	sl, #1
 801b23e:	e9c4 3300 	strd	r3, r3, [r4]
 801b242:	f1b9 0f00 	cmp.w	r9, #0
 801b246:	d008      	beq.n	801b25a <rcl_node_init+0x20a>
 801b248:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b24c:	4628      	mov	r0, r5
 801b24e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b252:	4798      	blx	r3
 801b254:	e001      	b.n	801b25a <rcl_node_init+0x20a>
 801b256:	f04f 0a0b 	mov.w	sl, #11
 801b25a:	4650      	mov	r0, sl
 801b25c:	b029      	add	sp, #164	@ 0xa4
 801b25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b262:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 801b266:	e7f8      	b.n	801b25a <rcl_node_init+0x20a>
 801b268:	782b      	ldrb	r3, [r5, #0]
 801b26a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b26c:	f43f af3d 	beq.w	801b0ea <rcl_node_init+0x9a>
 801b270:	9503      	str	r5, [sp, #12]
 801b272:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b276:	9300      	str	r3, [sp, #0]
 801b278:	4b18      	ldr	r3, [pc, #96]	@ (801b2dc <rcl_node_init+0x28c>)
 801b27a:	9302      	str	r3, [sp, #8]
 801b27c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b280:	9301      	str	r3, [sp, #4]
 801b282:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801b286:	f002 fd37 	bl	801dcf8 <rcutils_format_string_limit>
 801b28a:	4605      	mov	r5, r0
 801b28c:	b1e0      	cbz	r0, 801b2c8 <rcl_node_init+0x278>
 801b28e:	2200      	movs	r2, #0
 801b290:	a922      	add	r1, sp, #136	@ 0x88
 801b292:	9222      	str	r2, [sp, #136]	@ 0x88
 801b294:	f003 f980 	bl	801e598 <rmw_validate_namespace>
 801b298:	4682      	mov	sl, r0
 801b29a:	2800      	cmp	r0, #0
 801b29c:	d1d4      	bne.n	801b248 <rcl_node_init+0x1f8>
 801b29e:	46d9      	mov	r9, fp
 801b2a0:	e72c      	b.n	801b0fc <rcl_node_init+0xac>
 801b2a2:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 801b2a6:	4650      	mov	r0, sl
 801b2a8:	b029      	add	sp, #164	@ 0xa4
 801b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2ae:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 801b2b2:	f003 f983 	bl	801e5bc <rmw_namespace_validation_result_string>
 801b2b6:	e7c4      	b.n	801b242 <rcl_node_init+0x1f2>
 801b2b8:	f04f 0a0a 	mov.w	sl, #10
 801b2bc:	e7c1      	b.n	801b242 <rcl_node_init+0x1f2>
 801b2be:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 801b2c2:	f003 f9db 	bl	801e67c <rmw_node_name_validation_result_string>
 801b2c6:	e7c8      	b.n	801b25a <rcl_node_init+0x20a>
 801b2c8:	f04f 0a0a 	mov.w	sl, #10
 801b2cc:	e7c5      	b.n	801b25a <rcl_node_init+0x20a>
 801b2ce:	bf00      	nop
 801b2d0:	08025354 	.word	0x08025354
 801b2d4:	080249d8 	.word	0x080249d8
 801b2d8:	0802535c 	.word	0x0802535c
 801b2dc:	08025358 	.word	0x08025358

0801b2e0 <rcl_node_is_valid>:
 801b2e0:	b130      	cbz	r0, 801b2f0 <rcl_node_is_valid+0x10>
 801b2e2:	6843      	ldr	r3, [r0, #4]
 801b2e4:	b123      	cbz	r3, 801b2f0 <rcl_node_is_valid+0x10>
 801b2e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b2e8:	b113      	cbz	r3, 801b2f0 <rcl_node_is_valid+0x10>
 801b2ea:	6800      	ldr	r0, [r0, #0]
 801b2ec:	f7ff bc18 	b.w	801ab20 <rcl_context_is_valid>
 801b2f0:	2000      	movs	r0, #0
 801b2f2:	4770      	bx	lr

0801b2f4 <rcl_node_get_name>:
 801b2f4:	b120      	cbz	r0, 801b300 <rcl_node_get_name+0xc>
 801b2f6:	6840      	ldr	r0, [r0, #4]
 801b2f8:	b110      	cbz	r0, 801b300 <rcl_node_get_name+0xc>
 801b2fa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b2fc:	b100      	cbz	r0, 801b300 <rcl_node_get_name+0xc>
 801b2fe:	6880      	ldr	r0, [r0, #8]
 801b300:	4770      	bx	lr
 801b302:	bf00      	nop

0801b304 <rcl_node_get_namespace>:
 801b304:	b120      	cbz	r0, 801b310 <rcl_node_get_namespace+0xc>
 801b306:	6840      	ldr	r0, [r0, #4]
 801b308:	b110      	cbz	r0, 801b310 <rcl_node_get_namespace+0xc>
 801b30a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b30c:	b100      	cbz	r0, 801b310 <rcl_node_get_namespace+0xc>
 801b30e:	68c0      	ldr	r0, [r0, #12]
 801b310:	4770      	bx	lr
 801b312:	bf00      	nop

0801b314 <rcl_node_get_options>:
 801b314:	b128      	cbz	r0, 801b322 <rcl_node_get_options+0xe>
 801b316:	6840      	ldr	r0, [r0, #4]
 801b318:	b118      	cbz	r0, 801b322 <rcl_node_get_options+0xe>
 801b31a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	bf08      	it	eq
 801b320:	2000      	moveq	r0, #0
 801b322:	4770      	bx	lr

0801b324 <rcl_node_get_rmw_handle>:
 801b324:	b110      	cbz	r0, 801b32c <rcl_node_get_rmw_handle+0x8>
 801b326:	6840      	ldr	r0, [r0, #4]
 801b328:	b100      	cbz	r0, 801b32c <rcl_node_get_rmw_handle+0x8>
 801b32a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b32c:	4770      	bx	lr
 801b32e:	bf00      	nop

0801b330 <rcl_node_get_default_options>:
 801b330:	b510      	push	{r4, lr}
 801b332:	4604      	mov	r4, r0
 801b334:	2268      	movs	r2, #104	@ 0x68
 801b336:	2100      	movs	r1, #0
 801b338:	f006 ffca 	bl	80222d0 <memset>
 801b33c:	4620      	mov	r0, r4
 801b33e:	f7fa f8b5 	bl	80154ac <rcutils_get_default_allocator>
 801b342:	2301      	movs	r3, #1
 801b344:	4620      	mov	r0, r4
 801b346:	7523      	strb	r3, [r4, #20]
 801b348:	bd10      	pop	{r4, pc}
 801b34a:	bf00      	nop

0801b34c <rcl_node_options_copy>:
 801b34c:	2800      	cmp	r0, #0
 801b34e:	bf18      	it	ne
 801b350:	4288      	cmpne	r0, r1
 801b352:	d01b      	beq.n	801b38c <rcl_node_options_copy+0x40>
 801b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b356:	fab1 f681 	clz	r6, r1
 801b35a:	460c      	mov	r4, r1
 801b35c:	0976      	lsrs	r6, r6, #5
 801b35e:	b199      	cbz	r1, 801b388 <rcl_node_options_copy+0x3c>
 801b360:	4605      	mov	r5, r0
 801b362:	8a87      	ldrh	r7, [r0, #20]
 801b364:	4684      	mov	ip, r0
 801b366:	468e      	mov	lr, r1
 801b368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b36a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b36e:	682b      	ldr	r3, [r5, #0]
 801b370:	2250      	movs	r2, #80	@ 0x50
 801b372:	f10c 0118 	add.w	r1, ip, #24
 801b376:	f104 0018 	add.w	r0, r4, #24
 801b37a:	f8ce 3000 	str.w	r3, [lr]
 801b37e:	82a7      	strh	r7, [r4, #20]
 801b380:	f007 f8c5 	bl	802250e <memcpy>
 801b384:	4630      	mov	r0, r6
 801b386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b388:	200b      	movs	r0, #11
 801b38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b38c:	200b      	movs	r0, #11
 801b38e:	4770      	bx	lr

0801b390 <rcl_node_resolve_name>:
 801b390:	b082      	sub	sp, #8
 801b392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b396:	b091      	sub	sp, #68	@ 0x44
 801b398:	ac1a      	add	r4, sp, #104	@ 0x68
 801b39a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801b39e:	e884 000c 	stmia.w	r4, {r2, r3}
 801b3a2:	2800      	cmp	r0, #0
 801b3a4:	d03d      	beq.n	801b422 <rcl_node_resolve_name+0x92>
 801b3a6:	460c      	mov	r4, r1
 801b3a8:	4605      	mov	r5, r0
 801b3aa:	f7ff ffb3 	bl	801b314 <rcl_node_get_options>
 801b3ae:	2800      	cmp	r0, #0
 801b3b0:	d03a      	beq.n	801b428 <rcl_node_resolve_name+0x98>
 801b3b2:	4628      	mov	r0, r5
 801b3b4:	f7ff ff9e 	bl	801b2f4 <rcl_node_get_name>
 801b3b8:	4606      	mov	r6, r0
 801b3ba:	4628      	mov	r0, r5
 801b3bc:	ad0b      	add	r5, sp, #44	@ 0x2c
 801b3be:	f7ff ffa1 	bl	801b304 <rcl_node_get_namespace>
 801b3c2:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801b3c6:	4607      	mov	r7, r0
 801b3c8:	46ac      	mov	ip, r5
 801b3ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3d2:	f8de 3000 	ldr.w	r3, [lr]
 801b3d6:	f8cc 3000 	str.w	r3, [ip]
 801b3da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b3dc:	b30b      	cbz	r3, 801b422 <rcl_node_resolve_name+0x92>
 801b3de:	4689      	mov	r9, r1
 801b3e0:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 801b3e4:	f002 fe00 	bl	801dfe8 <rcutils_get_zero_initialized_string_map>
 801b3e8:	ab10      	add	r3, sp, #64	@ 0x40
 801b3ea:	9008      	str	r0, [sp, #32]
 801b3ec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b3f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b3f4:	2100      	movs	r1, #0
 801b3f6:	a808      	add	r0, sp, #32
 801b3f8:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b3fc:	f002 fe6a 	bl	801e0d4 <rcutils_string_map_init>
 801b400:	4683      	mov	fp, r0
 801b402:	b1a0      	cbz	r0, 801b42e <rcl_node_resolve_name+0x9e>
 801b404:	f7fa f86e 	bl	80154e4 <rcutils_get_error_string>
 801b408:	f7fa f882 	bl	8015510 <rcutils_reset_error>
 801b40c:	f1bb 0f0a 	cmp.w	fp, #10
 801b410:	bf18      	it	ne
 801b412:	f04f 0b01 	movne.w	fp, #1
 801b416:	4658      	mov	r0, fp
 801b418:	b011      	add	sp, #68	@ 0x44
 801b41a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b41e:	b002      	add	sp, #8
 801b420:	4770      	bx	lr
 801b422:	f04f 0b0b 	mov.w	fp, #11
 801b426:	e7f6      	b.n	801b416 <rcl_node_resolve_name+0x86>
 801b428:	f04f 0b01 	mov.w	fp, #1
 801b42c:	e7f3      	b.n	801b416 <rcl_node_resolve_name+0x86>
 801b42e:	9009      	str	r0, [sp, #36]	@ 0x24
 801b430:	9007      	str	r0, [sp, #28]
 801b432:	a808      	add	r0, sp, #32
 801b434:	f005 fee8 	bl	8021208 <rcl_get_default_topic_name_substitutions>
 801b438:	4683      	mov	fp, r0
 801b43a:	b180      	cbz	r0, 801b45e <rcl_node_resolve_name+0xce>
 801b43c:	280a      	cmp	r0, #10
 801b43e:	a808      	add	r0, sp, #32
 801b440:	bf18      	it	ne
 801b442:	f04f 0b01 	movne.w	fp, #1
 801b446:	f002 fe85 	bl	801e154 <rcutils_string_map_fini>
 801b44a:	4604      	mov	r4, r0
 801b44c:	2800      	cmp	r0, #0
 801b44e:	d15b      	bne.n	801b508 <rcl_node_resolve_name+0x178>
 801b450:	4651      	mov	r1, sl
 801b452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b454:	47c8      	blx	r9
 801b456:	4651      	mov	r1, sl
 801b458:	4620      	mov	r0, r4
 801b45a:	47c8      	blx	r9
 801b45c:	e7db      	b.n	801b416 <rcl_node_resolve_name+0x86>
 801b45e:	ab09      	add	r3, sp, #36	@ 0x24
 801b460:	46ec      	mov	ip, sp
 801b462:	9305      	str	r3, [sp, #20]
 801b464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b466:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b46a:	682b      	ldr	r3, [r5, #0]
 801b46c:	463a      	mov	r2, r7
 801b46e:	4631      	mov	r1, r6
 801b470:	4620      	mov	r0, r4
 801b472:	f8cc 3000 	str.w	r3, [ip]
 801b476:	ab08      	add	r3, sp, #32
 801b478:	f005 fd66 	bl	8020f48 <rcl_expand_topic_name>
 801b47c:	4683      	mov	fp, r0
 801b47e:	b9d8      	cbnz	r0, 801b4b8 <rcl_node_resolve_name+0x128>
 801b480:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b482:	4602      	mov	r2, r0
 801b484:	9009      	str	r0, [sp, #36]	@ 0x24
 801b486:	a90a      	add	r1, sp, #40	@ 0x28
 801b488:	4620      	mov	r0, r4
 801b48a:	f002 ffb5 	bl	801e3f8 <rmw_validate_full_topic_name>
 801b48e:	bb50      	cbnz	r0, 801b4e6 <rcl_node_resolve_name+0x156>
 801b490:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801b492:	2d00      	cmp	r5, #0
 801b494:	d140      	bne.n	801b518 <rcl_node_resolve_name+0x188>
 801b496:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b498:	a808      	add	r0, sp, #32
 801b49a:	601c      	str	r4, [r3, #0]
 801b49c:	f002 fe5a 	bl	801e154 <rcutils_string_map_fini>
 801b4a0:	4683      	mov	fp, r0
 801b4a2:	2800      	cmp	r0, #0
 801b4a4:	d043      	beq.n	801b52e <rcl_node_resolve_name+0x19e>
 801b4a6:	f7fa f81d 	bl	80154e4 <rcutils_get_error_string>
 801b4aa:	46a8      	mov	r8, r5
 801b4ac:	f04f 0b01 	mov.w	fp, #1
 801b4b0:	462c      	mov	r4, r5
 801b4b2:	f7fa f82d 	bl	8015510 <rcutils_reset_error>
 801b4b6:	e00a      	b.n	801b4ce <rcl_node_resolve_name+0x13e>
 801b4b8:	2867      	cmp	r0, #103	@ 0x67
 801b4ba:	bf14      	ite	ne
 801b4bc:	f04f 0800 	movne.w	r8, #0
 801b4c0:	f008 0801 	andeq.w	r8, r8, #1
 801b4c4:	9c07      	ldr	r4, [sp, #28]
 801b4c6:	a808      	add	r0, sp, #32
 801b4c8:	f002 fe44 	bl	801e154 <rcutils_string_map_fini>
 801b4cc:	bb50      	cbnz	r0, 801b524 <rcl_node_resolve_name+0x194>
 801b4ce:	4651      	mov	r1, sl
 801b4d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4d2:	47c8      	blx	r9
 801b4d4:	4651      	mov	r1, sl
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	47c8      	blx	r9
 801b4da:	f1b8 0f00 	cmp.w	r8, #0
 801b4de:	bf18      	it	ne
 801b4e0:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 801b4e4:	e797      	b.n	801b416 <rcl_node_resolve_name+0x86>
 801b4e6:	f7f9 fffd 	bl	80154e4 <rcutils_get_error_string>
 801b4ea:	f7fa f811 	bl	8015510 <rcutils_reset_error>
 801b4ee:	a808      	add	r0, sp, #32
 801b4f0:	f002 fe30 	bl	801e154 <rcutils_string_map_fini>
 801b4f4:	b998      	cbnz	r0, 801b51e <rcl_node_resolve_name+0x18e>
 801b4f6:	4651      	mov	r1, sl
 801b4f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4fa:	47c8      	blx	r9
 801b4fc:	4651      	mov	r1, sl
 801b4fe:	4620      	mov	r0, r4
 801b500:	f04f 0b01 	mov.w	fp, #1
 801b504:	47c8      	blx	r9
 801b506:	e786      	b.n	801b416 <rcl_node_resolve_name+0x86>
 801b508:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b50c:	f7f9 ffea 	bl	80154e4 <rcutils_get_error_string>
 801b510:	f7f9 fffe 	bl	8015510 <rcutils_reset_error>
 801b514:	4644      	mov	r4, r8
 801b516:	e7da      	b.n	801b4ce <rcl_node_resolve_name+0x13e>
 801b518:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 801b51c:	e7d3      	b.n	801b4c6 <rcl_node_resolve_name+0x136>
 801b51e:	46d8      	mov	r8, fp
 801b520:	f04f 0b01 	mov.w	fp, #1
 801b524:	f7f9 ffde 	bl	80154e4 <rcutils_get_error_string>
 801b528:	f7f9 fff2 	bl	8015510 <rcutils_reset_error>
 801b52c:	e7cf      	b.n	801b4ce <rcl_node_resolve_name+0x13e>
 801b52e:	4651      	mov	r1, sl
 801b530:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b532:	47c8      	blx	r9
 801b534:	4651      	mov	r1, sl
 801b536:	4658      	mov	r0, fp
 801b538:	47c8      	blx	r9
 801b53a:	e76c      	b.n	801b416 <rcl_node_resolve_name+0x86>

0801b53c <exact_match_lookup>:
 801b53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b53e:	f102 0708 	add.w	r7, r2, #8
 801b542:	460b      	mov	r3, r1
 801b544:	b085      	sub	sp, #20
 801b546:	4614      	mov	r4, r2
 801b548:	4606      	mov	r6, r0
 801b54a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b54e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b552:	4618      	mov	r0, r3
 801b554:	4919      	ldr	r1, [pc, #100]	@ (801b5bc <exact_match_lookup+0x80>)
 801b556:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b55a:	f002 fbbf 	bl	801dcdc <rcutils_join_path>
 801b55e:	7833      	ldrb	r3, [r6, #0]
 801b560:	4605      	mov	r5, r0
 801b562:	2b2f      	cmp	r3, #47	@ 0x2f
 801b564:	d023      	beq.n	801b5ae <exact_match_lookup+0x72>
 801b566:	f104 030c 	add.w	r3, r4, #12
 801b56a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b56e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b572:	1c70      	adds	r0, r6, #1
 801b574:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b578:	f002 fbb6 	bl	801dce8 <rcutils_to_native_path>
 801b57c:	4606      	mov	r6, r0
 801b57e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b582:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b586:	4631      	mov	r1, r6
 801b588:	4628      	mov	r0, r5
 801b58a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b58e:	f002 fba5 	bl	801dcdc <rcutils_join_path>
 801b592:	4603      	mov	r3, r0
 801b594:	4630      	mov	r0, r6
 801b596:	6862      	ldr	r2, [r4, #4]
 801b598:	461e      	mov	r6, r3
 801b59a:	6921      	ldr	r1, [r4, #16]
 801b59c:	4790      	blx	r2
 801b59e:	4628      	mov	r0, r5
 801b5a0:	4635      	mov	r5, r6
 801b5a2:	6863      	ldr	r3, [r4, #4]
 801b5a4:	6921      	ldr	r1, [r4, #16]
 801b5a6:	4798      	blx	r3
 801b5a8:	4628      	mov	r0, r5
 801b5aa:	b005      	add	sp, #20
 801b5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5ae:	7873      	ldrb	r3, [r6, #1]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d1d8      	bne.n	801b566 <exact_match_lookup+0x2a>
 801b5b4:	4628      	mov	r0, r5
 801b5b6:	b005      	add	sp, #20
 801b5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5ba:	bf00      	nop
 801b5bc:	080253a8 	.word	0x080253a8

0801b5c0 <rcl_get_secure_root>:
 801b5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5c4:	b085      	sub	sp, #20
 801b5c6:	b168      	cbz	r0, 801b5e4 <rcl_get_secure_root+0x24>
 801b5c8:	4607      	mov	r7, r0
 801b5ca:	4608      	mov	r0, r1
 801b5cc:	460c      	mov	r4, r1
 801b5ce:	f7f9 ff7b 	bl	80154c8 <rcutils_allocator_is_valid>
 801b5d2:	b138      	cbz	r0, 801b5e4 <rcl_get_secure_root+0x24>
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	482d      	ldr	r0, [pc, #180]	@ (801b68c <rcl_get_secure_root+0xcc>)
 801b5d8:	a903      	add	r1, sp, #12
 801b5da:	9303      	str	r3, [sp, #12]
 801b5dc:	f002 fb64 	bl	801dca8 <rcutils_get_env>
 801b5e0:	4605      	mov	r5, r0
 801b5e2:	b120      	cbz	r0, 801b5ee <rcl_get_secure_root+0x2e>
 801b5e4:	2500      	movs	r5, #0
 801b5e6:	4628      	mov	r0, r5
 801b5e8:	b005      	add	sp, #20
 801b5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5ee:	9b03      	ldr	r3, [sp, #12]
 801b5f0:	781a      	ldrb	r2, [r3, #0]
 801b5f2:	2a00      	cmp	r2, #0
 801b5f4:	d0f6      	beq.n	801b5e4 <rcl_get_secure_root+0x24>
 801b5f6:	f104 090c 	add.w	r9, r4, #12
 801b5fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b5fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b602:	4618      	mov	r0, r3
 801b604:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b608:	f002 fcb0 	bl	801df6c <rcutils_strdup>
 801b60c:	4680      	mov	r8, r0
 801b60e:	2800      	cmp	r0, #0
 801b610:	d0e8      	beq.n	801b5e4 <rcl_get_secure_root+0x24>
 801b612:	a903      	add	r1, sp, #12
 801b614:	481e      	ldr	r0, [pc, #120]	@ (801b690 <rcl_get_secure_root+0xd0>)
 801b616:	9503      	str	r5, [sp, #12]
 801b618:	f002 fb46 	bl	801dca8 <rcutils_get_env>
 801b61c:	b160      	cbz	r0, 801b638 <rcl_get_secure_root+0x78>
 801b61e:	2600      	movs	r6, #0
 801b620:	4630      	mov	r0, r6
 801b622:	6863      	ldr	r3, [r4, #4]
 801b624:	6921      	ldr	r1, [r4, #16]
 801b626:	4798      	blx	r3
 801b628:	4640      	mov	r0, r8
 801b62a:	6863      	ldr	r3, [r4, #4]
 801b62c:	6921      	ldr	r1, [r4, #16]
 801b62e:	4798      	blx	r3
 801b630:	4628      	mov	r0, r5
 801b632:	b005      	add	sp, #20
 801b634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b638:	9b03      	ldr	r3, [sp, #12]
 801b63a:	781e      	ldrb	r6, [r3, #0]
 801b63c:	b1f6      	cbz	r6, 801b67c <rcl_get_secure_root+0xbc>
 801b63e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b642:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b646:	4618      	mov	r0, r3
 801b648:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b64c:	f002 fc8e 	bl	801df6c <rcutils_strdup>
 801b650:	4606      	mov	r6, r0
 801b652:	2800      	cmp	r0, #0
 801b654:	d0e3      	beq.n	801b61e <rcl_get_secure_root+0x5e>
 801b656:	4622      	mov	r2, r4
 801b658:	4641      	mov	r1, r8
 801b65a:	f7ff ff6f 	bl	801b53c <exact_match_lookup>
 801b65e:	4605      	mov	r5, r0
 801b660:	2d00      	cmp	r5, #0
 801b662:	d0dd      	beq.n	801b620 <rcl_get_secure_root+0x60>
 801b664:	4628      	mov	r0, r5
 801b666:	f002 fb37 	bl	801dcd8 <rcutils_is_directory>
 801b66a:	4603      	mov	r3, r0
 801b66c:	2800      	cmp	r0, #0
 801b66e:	d1d7      	bne.n	801b620 <rcl_get_secure_root+0x60>
 801b670:	4628      	mov	r0, r5
 801b672:	6921      	ldr	r1, [r4, #16]
 801b674:	461d      	mov	r5, r3
 801b676:	6863      	ldr	r3, [r4, #4]
 801b678:	4798      	blx	r3
 801b67a:	e7d1      	b.n	801b620 <rcl_get_secure_root+0x60>
 801b67c:	4622      	mov	r2, r4
 801b67e:	4638      	mov	r0, r7
 801b680:	4641      	mov	r1, r8
 801b682:	f7ff ff5b 	bl	801b53c <exact_match_lookup>
 801b686:	4605      	mov	r5, r0
 801b688:	e7ea      	b.n	801b660 <rcl_get_secure_root+0xa0>
 801b68a:	bf00      	nop
 801b68c:	080253b4 	.word	0x080253b4
 801b690:	080253cc 	.word	0x080253cc

0801b694 <rcl_get_security_options_from_environment>:
 801b694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b698:	b082      	sub	sp, #8
 801b69a:	2300      	movs	r3, #0
 801b69c:	4606      	mov	r6, r0
 801b69e:	460f      	mov	r7, r1
 801b6a0:	4821      	ldr	r0, [pc, #132]	@ (801b728 <rcl_get_security_options_from_environment+0x94>)
 801b6a2:	a901      	add	r1, sp, #4
 801b6a4:	4690      	mov	r8, r2
 801b6a6:	9301      	str	r3, [sp, #4]
 801b6a8:	f002 fafe 	bl	801dca8 <rcutils_get_env>
 801b6ac:	b120      	cbz	r0, 801b6b8 <rcl_get_security_options_from_environment+0x24>
 801b6ae:	2501      	movs	r5, #1
 801b6b0:	4628      	mov	r0, r5
 801b6b2:	b002      	add	sp, #8
 801b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6b8:	4604      	mov	r4, r0
 801b6ba:	491c      	ldr	r1, [pc, #112]	@ (801b72c <rcl_get_security_options_from_environment+0x98>)
 801b6bc:	9801      	ldr	r0, [sp, #4]
 801b6be:	f7e4 fe0f 	bl	80002e0 <strcmp>
 801b6c2:	4605      	mov	r5, r0
 801b6c4:	b9f0      	cbnz	r0, 801b704 <rcl_get_security_options_from_environment+0x70>
 801b6c6:	9001      	str	r0, [sp, #4]
 801b6c8:	f1b8 0f00 	cmp.w	r8, #0
 801b6cc:	d021      	beq.n	801b712 <rcl_get_security_options_from_environment+0x7e>
 801b6ce:	a901      	add	r1, sp, #4
 801b6d0:	4817      	ldr	r0, [pc, #92]	@ (801b730 <rcl_get_security_options_from_environment+0x9c>)
 801b6d2:	f002 fae9 	bl	801dca8 <rcutils_get_env>
 801b6d6:	2800      	cmp	r0, #0
 801b6d8:	d1e9      	bne.n	801b6ae <rcl_get_security_options_from_environment+0x1a>
 801b6da:	4916      	ldr	r1, [pc, #88]	@ (801b734 <rcl_get_security_options_from_environment+0xa0>)
 801b6dc:	9801      	ldr	r0, [sp, #4]
 801b6de:	f7e4 fdff 	bl	80002e0 <strcmp>
 801b6e2:	4603      	mov	r3, r0
 801b6e4:	4639      	mov	r1, r7
 801b6e6:	4630      	mov	r0, r6
 801b6e8:	fab3 f383 	clz	r3, r3
 801b6ec:	095b      	lsrs	r3, r3, #5
 801b6ee:	f888 3000 	strb.w	r3, [r8]
 801b6f2:	f7ff ff65 	bl	801b5c0 <rcl_get_secure_root>
 801b6f6:	b170      	cbz	r0, 801b716 <rcl_get_security_options_from_environment+0x82>
 801b6f8:	f8c8 0004 	str.w	r0, [r8, #4]
 801b6fc:	4628      	mov	r0, r5
 801b6fe:	b002      	add	sp, #8
 801b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b704:	4625      	mov	r5, r4
 801b706:	f888 4000 	strb.w	r4, [r8]
 801b70a:	4628      	mov	r0, r5
 801b70c:	b002      	add	sp, #8
 801b70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b712:	250b      	movs	r5, #11
 801b714:	e7cc      	b.n	801b6b0 <rcl_get_security_options_from_environment+0x1c>
 801b716:	f898 5000 	ldrb.w	r5, [r8]
 801b71a:	f1a5 0501 	sub.w	r5, r5, #1
 801b71e:	fab5 f585 	clz	r5, r5
 801b722:	096d      	lsrs	r5, r5, #5
 801b724:	e7c4      	b.n	801b6b0 <rcl_get_security_options_from_environment+0x1c>
 801b726:	bf00      	nop
 801b728:	0802536c 	.word	0x0802536c
 801b72c:	08025380 	.word	0x08025380
 801b730:	08025388 	.word	0x08025388
 801b734:	080253a0 	.word	0x080253a0

0801b738 <rcl_get_zero_initialized_service>:
 801b738:	4b01      	ldr	r3, [pc, #4]	@ (801b740 <rcl_get_zero_initialized_service+0x8>)
 801b73a:	6818      	ldr	r0, [r3, #0]
 801b73c:	4770      	bx	lr
 801b73e:	bf00      	nop
 801b740:	080253ec 	.word	0x080253ec

0801b744 <rcl_service_init>:
 801b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b748:	b088      	sub	sp, #32
 801b74a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b74c:	b1ff      	cbz	r7, 801b78e <rcl_service_init+0x4a>
 801b74e:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b752:	4605      	mov	r5, r0
 801b754:	460e      	mov	r6, r1
 801b756:	4691      	mov	r9, r2
 801b758:	4650      	mov	r0, sl
 801b75a:	4698      	mov	r8, r3
 801b75c:	f7f9 feb4 	bl	80154c8 <rcutils_allocator_is_valid>
 801b760:	f080 0401 	eor.w	r4, r0, #1
 801b764:	b2e4      	uxtb	r4, r4
 801b766:	b994      	cbnz	r4, 801b78e <rcl_service_init+0x4a>
 801b768:	b18d      	cbz	r5, 801b78e <rcl_service_init+0x4a>
 801b76a:	4630      	mov	r0, r6
 801b76c:	f7ff fdb8 	bl	801b2e0 <rcl_node_is_valid>
 801b770:	2800      	cmp	r0, #0
 801b772:	d05d      	beq.n	801b830 <rcl_service_init+0xec>
 801b774:	f1b8 0f00 	cmp.w	r8, #0
 801b778:	d009      	beq.n	801b78e <rcl_service_init+0x4a>
 801b77a:	f1b9 0f00 	cmp.w	r9, #0
 801b77e:	d006      	beq.n	801b78e <rcl_service_init+0x4a>
 801b780:	682b      	ldr	r3, [r5, #0]
 801b782:	b14b      	cbz	r3, 801b798 <rcl_service_init+0x54>
 801b784:	2464      	movs	r4, #100	@ 0x64
 801b786:	4620      	mov	r0, r4
 801b788:	b008      	add	sp, #32
 801b78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b78e:	240b      	movs	r4, #11
 801b790:	4620      	mov	r0, r4
 801b792:	b008      	add	sp, #32
 801b794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b798:	aa07      	add	r2, sp, #28
 801b79a:	9304      	str	r3, [sp, #16]
 801b79c:	9307      	str	r3, [sp, #28]
 801b79e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b7a2:	9205      	str	r2, [sp, #20]
 801b7a4:	2201      	movs	r2, #1
 801b7a6:	9203      	str	r2, [sp, #12]
 801b7a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b7ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b7b0:	4641      	mov	r1, r8
 801b7b2:	4630      	mov	r0, r6
 801b7b4:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b7b8:	f7ff fdea 	bl	801b390 <rcl_node_resolve_name>
 801b7bc:	2800      	cmp	r0, #0
 801b7be:	d146      	bne.n	801b84e <rcl_service_init+0x10a>
 801b7c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b7c2:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801b7c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b7c8:	4798      	blx	r3
 801b7ca:	6028      	str	r0, [r5, #0]
 801b7cc:	2800      	cmp	r0, #0
 801b7ce:	d046      	beq.n	801b85e <rcl_service_init+0x11a>
 801b7d0:	4630      	mov	r0, r6
 801b7d2:	f7ff fda7 	bl	801b324 <rcl_node_get_rmw_handle>
 801b7d6:	463b      	mov	r3, r7
 801b7d8:	4649      	mov	r1, r9
 801b7da:	9a07      	ldr	r2, [sp, #28]
 801b7dc:	682c      	ldr	r4, [r5, #0]
 801b7de:	f003 fd05 	bl	801f1ec <rmw_create_service>
 801b7e2:	682b      	ldr	r3, [r5, #0]
 801b7e4:	f8c4 0108 	str.w	r0, [r4, #264]	@ 0x108
 801b7e8:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b7ec:	b338      	cbz	r0, 801b83e <rcl_service_init+0xfa>
 801b7ee:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801b7f2:	f003 fe2d 	bl	801f450 <rmw_service_request_subscription_get_actual_qos>
 801b7f6:	bb00      	cbnz	r0, 801b83a <rcl_service_init+0xf6>
 801b7f8:	682b      	ldr	r3, [r5, #0]
 801b7fa:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 801b7fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b802:	f003 fe11 	bl	801f428 <rmw_service_response_publisher_get_actual_qos>
 801b806:	4604      	mov	r4, r0
 801b808:	b9b8      	cbnz	r0, 801b83a <rcl_service_init+0xf6>
 801b80a:	6828      	ldr	r0, [r5, #0]
 801b80c:	2268      	movs	r2, #104	@ 0x68
 801b80e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801b812:	4639      	mov	r1, r7
 801b814:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 801b818:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 801b81c:	f006 fe77 	bl	802250e <memcpy>
 801b820:	9807      	ldr	r0, [sp, #28]
 801b822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b824:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b826:	4798      	blx	r3
 801b828:	4620      	mov	r0, r4
 801b82a:	b008      	add	sp, #32
 801b82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b830:	24c8      	movs	r4, #200	@ 0xc8
 801b832:	4620      	mov	r0, r4
 801b834:	b008      	add	sp, #32
 801b836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b83a:	682b      	ldr	r3, [r5, #0]
 801b83c:	b16b      	cbz	r3, 801b85a <rcl_service_init+0x116>
 801b83e:	4618      	mov	r0, r3
 801b840:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b842:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b844:	2401      	movs	r4, #1
 801b846:	4790      	blx	r2
 801b848:	2300      	movs	r3, #0
 801b84a:	602b      	str	r3, [r5, #0]
 801b84c:	e7e8      	b.n	801b820 <rcl_service_init+0xdc>
 801b84e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 801b852:	2b01      	cmp	r3, #1
 801b854:	d905      	bls.n	801b862 <rcl_service_init+0x11e>
 801b856:	280a      	cmp	r0, #10
 801b858:	d001      	beq.n	801b85e <rcl_service_init+0x11a>
 801b85a:	2401      	movs	r4, #1
 801b85c:	e7e0      	b.n	801b820 <rcl_service_init+0xdc>
 801b85e:	240a      	movs	r4, #10
 801b860:	e7de      	b.n	801b820 <rcl_service_init+0xdc>
 801b862:	2468      	movs	r4, #104	@ 0x68
 801b864:	e7dc      	b.n	801b820 <rcl_service_init+0xdc>
 801b866:	bf00      	nop

0801b868 <rcl_service_get_default_options>:
 801b868:	b530      	push	{r4, r5, lr}
 801b86a:	4d0f      	ldr	r5, [pc, #60]	@ (801b8a8 <rcl_service_get_default_options+0x40>)
 801b86c:	b087      	sub	sp, #28
 801b86e:	4604      	mov	r4, r0
 801b870:	2250      	movs	r2, #80	@ 0x50
 801b872:	490e      	ldr	r1, [pc, #56]	@ (801b8ac <rcl_service_get_default_options+0x44>)
 801b874:	4628      	mov	r0, r5
 801b876:	f006 fe4a 	bl	802250e <memcpy>
 801b87a:	4668      	mov	r0, sp
 801b87c:	f7f9 fe16 	bl	80154ac <rcutils_get_default_allocator>
 801b880:	46ec      	mov	ip, sp
 801b882:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801b886:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b88a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b88e:	f8dc 3000 	ldr.w	r3, [ip]
 801b892:	2268      	movs	r2, #104	@ 0x68
 801b894:	4629      	mov	r1, r5
 801b896:	4620      	mov	r0, r4
 801b898:	f8ce 3000 	str.w	r3, [lr]
 801b89c:	f006 fe37 	bl	802250e <memcpy>
 801b8a0:	4620      	mov	r0, r4
 801b8a2:	b007      	add	sp, #28
 801b8a4:	bd30      	pop	{r4, r5, pc}
 801b8a6:	bf00      	nop
 801b8a8:	24069280 	.word	0x24069280
 801b8ac:	080253f0 	.word	0x080253f0

0801b8b0 <rcl_service_get_rmw_handle>:
 801b8b0:	b118      	cbz	r0, 801b8ba <rcl_service_get_rmw_handle+0xa>
 801b8b2:	6800      	ldr	r0, [r0, #0]
 801b8b4:	b108      	cbz	r0, 801b8ba <rcl_service_get_rmw_handle+0xa>
 801b8b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b8ba:	4770      	bx	lr

0801b8bc <rcl_take_request>:
 801b8bc:	b570      	push	{r4, r5, r6, lr}
 801b8be:	468e      	mov	lr, r1
 801b8c0:	b08c      	sub	sp, #48	@ 0x30
 801b8c2:	460c      	mov	r4, r1
 801b8c4:	4616      	mov	r6, r2
 801b8c6:	f10d 0c18 	add.w	ip, sp, #24
 801b8ca:	4605      	mov	r5, r0
 801b8cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b8d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8d4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b8d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b8dc:	b30d      	cbz	r5, 801b922 <rcl_take_request+0x66>
 801b8de:	682b      	ldr	r3, [r5, #0]
 801b8e0:	b1fb      	cbz	r3, 801b922 <rcl_take_request+0x66>
 801b8e2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801b8e6:	b1e0      	cbz	r0, 801b922 <rcl_take_request+0x66>
 801b8e8:	b336      	cbz	r6, 801b938 <rcl_take_request+0x7c>
 801b8ea:	2300      	movs	r3, #0
 801b8ec:	4632      	mov	r2, r6
 801b8ee:	a902      	add	r1, sp, #8
 801b8f0:	f88d 3007 	strb.w	r3, [sp, #7]
 801b8f4:	f10d 0307 	add.w	r3, sp, #7
 801b8f8:	f003 fb76 	bl	801efe8 <rmw_take_request>
 801b8fc:	4605      	mov	r5, r0
 801b8fe:	b198      	cbz	r0, 801b928 <rcl_take_request+0x6c>
 801b900:	280a      	cmp	r0, #10
 801b902:	bf18      	it	ne
 801b904:	2501      	movne	r5, #1
 801b906:	f10d 0e18 	add.w	lr, sp, #24
 801b90a:	46a4      	mov	ip, r4
 801b90c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b910:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b914:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b918:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b91c:	4628      	mov	r0, r5
 801b91e:	b00c      	add	sp, #48	@ 0x30
 801b920:	bd70      	pop	{r4, r5, r6, pc}
 801b922:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801b926:	e7ee      	b.n	801b906 <rcl_take_request+0x4a>
 801b928:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b92c:	f240 2359 	movw	r3, #601	@ 0x259
 801b930:	2a00      	cmp	r2, #0
 801b932:	bf08      	it	eq
 801b934:	461d      	moveq	r5, r3
 801b936:	e7e6      	b.n	801b906 <rcl_take_request+0x4a>
 801b938:	250b      	movs	r5, #11
 801b93a:	e7e4      	b.n	801b906 <rcl_take_request+0x4a>

0801b93c <rcl_send_response>:
 801b93c:	b170      	cbz	r0, 801b95c <rcl_send_response+0x20>
 801b93e:	6800      	ldr	r0, [r0, #0]
 801b940:	b160      	cbz	r0, 801b95c <rcl_send_response+0x20>
 801b942:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b946:	b148      	cbz	r0, 801b95c <rcl_send_response+0x20>
 801b948:	b169      	cbz	r1, 801b966 <rcl_send_response+0x2a>
 801b94a:	b510      	push	{r4, lr}
 801b94c:	b14a      	cbz	r2, 801b962 <rcl_send_response+0x26>
 801b94e:	f003 fba9 	bl	801f0a4 <rmw_send_response>
 801b952:	b110      	cbz	r0, 801b95a <rcl_send_response+0x1e>
 801b954:	2802      	cmp	r0, #2
 801b956:	bf18      	it	ne
 801b958:	2001      	movne	r0, #1
 801b95a:	bd10      	pop	{r4, pc}
 801b95c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801b960:	4770      	bx	lr
 801b962:	200b      	movs	r0, #11
 801b964:	bd10      	pop	{r4, pc}
 801b966:	200b      	movs	r0, #11
 801b968:	4770      	bx	lr
 801b96a:	bf00      	nop

0801b96c <rcl_service_is_valid>:
 801b96c:	b130      	cbz	r0, 801b97c <rcl_service_is_valid+0x10>
 801b96e:	6800      	ldr	r0, [r0, #0]
 801b970:	b120      	cbz	r0, 801b97c <rcl_service_is_valid+0x10>
 801b972:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801b976:	3800      	subs	r0, #0
 801b978:	bf18      	it	ne
 801b97a:	2001      	movne	r0, #1
 801b97c:	4770      	bx	lr
 801b97e:	bf00      	nop

0801b980 <rcl_get_zero_initialized_subscription>:
 801b980:	4b01      	ldr	r3, [pc, #4]	@ (801b988 <rcl_get_zero_initialized_subscription+0x8>)
 801b982:	6818      	ldr	r0, [r3, #0]
 801b984:	4770      	bx	lr
 801b986:	bf00      	nop
 801b988:	08025440 	.word	0x08025440

0801b98c <rcl_subscription_init>:
 801b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b990:	b088      	sub	sp, #32
 801b992:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b994:	b1ff      	cbz	r7, 801b9d6 <rcl_subscription_init+0x4a>
 801b996:	f107 0a50 	add.w	sl, r7, #80	@ 0x50
 801b99a:	4605      	mov	r5, r0
 801b99c:	460e      	mov	r6, r1
 801b99e:	4691      	mov	r9, r2
 801b9a0:	4650      	mov	r0, sl
 801b9a2:	4698      	mov	r8, r3
 801b9a4:	f7f9 fd90 	bl	80154c8 <rcutils_allocator_is_valid>
 801b9a8:	f080 0401 	eor.w	r4, r0, #1
 801b9ac:	b2e4      	uxtb	r4, r4
 801b9ae:	b994      	cbnz	r4, 801b9d6 <rcl_subscription_init+0x4a>
 801b9b0:	b18d      	cbz	r5, 801b9d6 <rcl_subscription_init+0x4a>
 801b9b2:	4630      	mov	r0, r6
 801b9b4:	f7ff fc94 	bl	801b2e0 <rcl_node_is_valid>
 801b9b8:	2800      	cmp	r0, #0
 801b9ba:	d055      	beq.n	801ba68 <rcl_subscription_init+0xdc>
 801b9bc:	f1b9 0f00 	cmp.w	r9, #0
 801b9c0:	d009      	beq.n	801b9d6 <rcl_subscription_init+0x4a>
 801b9c2:	f1b8 0f00 	cmp.w	r8, #0
 801b9c6:	d006      	beq.n	801b9d6 <rcl_subscription_init+0x4a>
 801b9c8:	682b      	ldr	r3, [r5, #0]
 801b9ca:	b14b      	cbz	r3, 801b9e0 <rcl_subscription_init+0x54>
 801b9cc:	2464      	movs	r4, #100	@ 0x64
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	b008      	add	sp, #32
 801b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9d6:	240b      	movs	r4, #11
 801b9d8:	4620      	mov	r0, r4
 801b9da:	b008      	add	sp, #32
 801b9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801b9e4:	aa07      	add	r2, sp, #28
 801b9e6:	9307      	str	r3, [sp, #28]
 801b9e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b9ec:	9205      	str	r2, [sp, #20]
 801b9ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b9f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b9f6:	4641      	mov	r1, r8
 801b9f8:	4630      	mov	r0, r6
 801b9fa:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801b9fe:	f7ff fcc7 	bl	801b390 <rcl_node_resolve_name>
 801ba02:	2800      	cmp	r0, #0
 801ba04:	d15f      	bne.n	801bac6 <rcl_subscription_init+0x13a>
 801ba06:	21c8      	movs	r1, #200	@ 0xc8
 801ba08:	2001      	movs	r0, #1
 801ba0a:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	@ 0x5c
 801ba0e:	4798      	blx	r3
 801ba10:	6028      	str	r0, [r5, #0]
 801ba12:	2800      	cmp	r0, #0
 801ba14:	d05f      	beq.n	801bad6 <rcl_subscription_init+0x14a>
 801ba16:	4630      	mov	r0, r6
 801ba18:	f7ff fc84 	bl	801b324 <rcl_node_get_rmw_handle>
 801ba1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801ba20:	4649      	mov	r1, r9
 801ba22:	9a07      	ldr	r2, [sp, #28]
 801ba24:	9300      	str	r3, [sp, #0]
 801ba26:	463b      	mov	r3, r7
 801ba28:	682c      	ldr	r4, [r5, #0]
 801ba2a:	f003 fd25 	bl	801f478 <rmw_create_subscription>
 801ba2e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801ba32:	682c      	ldr	r4, [r5, #0]
 801ba34:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801ba38:	b348      	cbz	r0, 801ba8e <rcl_subscription_init+0x102>
 801ba3a:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 801ba3e:	f003 fe11 	bl	801f664 <rmw_subscription_get_actual_qos>
 801ba42:	4604      	mov	r4, r0
 801ba44:	b9a8      	cbnz	r0, 801ba72 <rcl_subscription_init+0xe6>
 801ba46:	6828      	ldr	r0, [r5, #0]
 801ba48:	2270      	movs	r2, #112	@ 0x70
 801ba4a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801ba4e:	4639      	mov	r1, r7
 801ba50:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801ba54:	f006 fd5b 	bl	802250e <memcpy>
 801ba58:	9807      	ldr	r0, [sp, #28]
 801ba5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba5c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801ba5e:	4798      	blx	r3
 801ba60:	4620      	mov	r0, r4
 801ba62:	b008      	add	sp, #32
 801ba64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba68:	24c8      	movs	r4, #200	@ 0xc8
 801ba6a:	4620      	mov	r0, r4
 801ba6c:	b008      	add	sp, #32
 801ba6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba72:	682c      	ldr	r4, [r5, #0]
 801ba74:	b36c      	cbz	r4, 801bad2 <rcl_subscription_init+0x146>
 801ba76:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 801ba7a:	b14b      	cbz	r3, 801ba90 <rcl_subscription_init+0x104>
 801ba7c:	4630      	mov	r0, r6
 801ba7e:	f7ff fc51 	bl	801b324 <rcl_node_get_rmw_handle>
 801ba82:	682b      	ldr	r3, [r5, #0]
 801ba84:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 801ba88:	f003 fe00 	bl	801f68c <rmw_destroy_subscription>
 801ba8c:	682c      	ldr	r4, [r5, #0]
 801ba8e:	b194      	cbz	r4, 801bab6 <rcl_subscription_init+0x12a>
 801ba90:	f104 0650 	add.w	r6, r4, #80	@ 0x50
 801ba94:	4630      	mov	r0, r6
 801ba96:	f7f9 fd17 	bl	80154c8 <rcutils_allocator_is_valid>
 801ba9a:	b158      	cbz	r0, 801bab4 <rcl_subscription_init+0x128>
 801ba9c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801ba9e:	b148      	cbz	r0, 801bab4 <rcl_subscription_init+0x128>
 801baa0:	4631      	mov	r1, r6
 801baa2:	f002 fbf9 	bl	801e298 <rmw_subscription_content_filter_options_fini>
 801baa6:	4606      	mov	r6, r0
 801baa8:	b9c8      	cbnz	r0, 801bade <rcl_subscription_init+0x152>
 801baaa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801baac:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801baae:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801bab0:	4798      	blx	r3
 801bab2:	66e6      	str	r6, [r4, #108]	@ 0x6c
 801bab4:	682c      	ldr	r4, [r5, #0]
 801bab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bab8:	4620      	mov	r0, r4
 801baba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801babc:	2401      	movs	r4, #1
 801babe:	4798      	blx	r3
 801bac0:	2300      	movs	r3, #0
 801bac2:	602b      	str	r3, [r5, #0]
 801bac4:	e7c8      	b.n	801ba58 <rcl_subscription_init+0xcc>
 801bac6:	2867      	cmp	r0, #103	@ 0x67
 801bac8:	d007      	beq.n	801bada <rcl_subscription_init+0x14e>
 801baca:	2869      	cmp	r0, #105	@ 0x69
 801bacc:	d005      	beq.n	801bada <rcl_subscription_init+0x14e>
 801bace:	280a      	cmp	r0, #10
 801bad0:	d001      	beq.n	801bad6 <rcl_subscription_init+0x14a>
 801bad2:	2401      	movs	r4, #1
 801bad4:	e7c0      	b.n	801ba58 <rcl_subscription_init+0xcc>
 801bad6:	240a      	movs	r4, #10
 801bad8:	e7be      	b.n	801ba58 <rcl_subscription_init+0xcc>
 801bada:	2467      	movs	r4, #103	@ 0x67
 801badc:	e7bc      	b.n	801ba58 <rcl_subscription_init+0xcc>
 801bade:	f7ff f801 	bl	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>
 801bae2:	682c      	ldr	r4, [r5, #0]
 801bae4:	e7e7      	b.n	801bab6 <rcl_subscription_init+0x12a>
 801bae6:	bf00      	nop

0801bae8 <rcl_subscription_get_default_options>:
 801bae8:	b570      	push	{r4, r5, r6, lr}
 801baea:	4d14      	ldr	r5, [pc, #80]	@ (801bb3c <rcl_subscription_get_default_options+0x54>)
 801baec:	b08a      	sub	sp, #40	@ 0x28
 801baee:	4604      	mov	r4, r0
 801baf0:	2250      	movs	r2, #80	@ 0x50
 801baf2:	4913      	ldr	r1, [pc, #76]	@ (801bb40 <rcl_subscription_get_default_options+0x58>)
 801baf4:	4628      	mov	r0, r5
 801baf6:	f006 fd0a 	bl	802250e <memcpy>
 801bafa:	a804      	add	r0, sp, #16
 801bafc:	f7f9 fcd6 	bl	80154ac <rcutils_get_default_allocator>
 801bb00:	f10d 0c10 	add.w	ip, sp, #16
 801bb04:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801bb08:	466e      	mov	r6, sp
 801bb0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb12:	f8dc 3000 	ldr.w	r3, [ip]
 801bb16:	4630      	mov	r0, r6
 801bb18:	f8ce 3000 	str.w	r3, [lr]
 801bb1c:	f002 fbd6 	bl	801e2cc <rmw_get_default_subscription_options>
 801bb20:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801bb24:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801bb28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bb2c:	2270      	movs	r2, #112	@ 0x70
 801bb2e:	4629      	mov	r1, r5
 801bb30:	4620      	mov	r0, r4
 801bb32:	f006 fcec 	bl	802250e <memcpy>
 801bb36:	4620      	mov	r0, r4
 801bb38:	b00a      	add	sp, #40	@ 0x28
 801bb3a:	bd70      	pop	{r4, r5, r6, pc}
 801bb3c:	240692e8 	.word	0x240692e8
 801bb40:	08025448 	.word	0x08025448

0801bb44 <rcl_take>:
 801bb44:	2800      	cmp	r0, #0
 801bb46:	d049      	beq.n	801bbdc <rcl_take+0x98>
 801bb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb4c:	4615      	mov	r5, r2
 801bb4e:	6802      	ldr	r2, [r0, #0]
 801bb50:	b0a4      	sub	sp, #144	@ 0x90
 801bb52:	4604      	mov	r4, r0
 801bb54:	2a00      	cmp	r2, #0
 801bb56:	d039      	beq.n	801bbcc <rcl_take+0x88>
 801bb58:	461f      	mov	r7, r3
 801bb5a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 801bb5e:	b3ab      	cbz	r3, 801bbcc <rcl_take+0x88>
 801bb60:	460e      	mov	r6, r1
 801bb62:	2900      	cmp	r1, #0
 801bb64:	d038      	beq.n	801bbd8 <rcl_take+0x94>
 801bb66:	2d00      	cmp	r5, #0
 801bb68:	d03c      	beq.n	801bbe4 <rcl_take+0xa0>
 801bb6a:	a802      	add	r0, sp, #8
 801bb6c:	f04f 0800 	mov.w	r8, #0
 801bb70:	f002 fc3a 	bl	801e3e8 <rmw_get_zero_initialized_message_info>
 801bb74:	f10d 0c08 	add.w	ip, sp, #8
 801bb78:	46ae      	mov	lr, r5
 801bb7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb7e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb92:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801bb96:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801bb9a:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801bb9e:	462b      	mov	r3, r5
 801bba0:	6820      	ldr	r0, [r4, #0]
 801bba2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801bba6:	4631      	mov	r1, r6
 801bba8:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bbac:	9700      	str	r7, [sp, #0]
 801bbae:	f003 fdcf 	bl	801f750 <rmw_take_with_info>
 801bbb2:	4603      	mov	r3, r0
 801bbb4:	b9c0      	cbnz	r0, 801bbe8 <rcl_take+0xa4>
 801bbb6:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801bbba:	f240 1291 	movw	r2, #401	@ 0x191
 801bbbe:	2900      	cmp	r1, #0
 801bbc0:	bf08      	it	eq
 801bbc2:	4613      	moveq	r3, r2
 801bbc4:	4618      	mov	r0, r3
 801bbc6:	b024      	add	sp, #144	@ 0x90
 801bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbcc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	b024      	add	sp, #144	@ 0x90
 801bbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbd8:	230b      	movs	r3, #11
 801bbda:	e7f3      	b.n	801bbc4 <rcl_take+0x80>
 801bbdc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	4770      	bx	lr
 801bbe4:	ad14      	add	r5, sp, #80	@ 0x50
 801bbe6:	e7c0      	b.n	801bb6a <rcl_take+0x26>
 801bbe8:	f7fe ff7c 	bl	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>
 801bbec:	4603      	mov	r3, r0
 801bbee:	e7e9      	b.n	801bbc4 <rcl_take+0x80>

0801bbf0 <rcl_subscription_get_rmw_handle>:
 801bbf0:	b118      	cbz	r0, 801bbfa <rcl_subscription_get_rmw_handle+0xa>
 801bbf2:	6800      	ldr	r0, [r0, #0]
 801bbf4:	b108      	cbz	r0, 801bbfa <rcl_subscription_get_rmw_handle+0xa>
 801bbf6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bbfa:	4770      	bx	lr

0801bbfc <rcl_subscription_is_valid>:
 801bbfc:	b130      	cbz	r0, 801bc0c <rcl_subscription_is_valid+0x10>
 801bbfe:	6800      	ldr	r0, [r0, #0]
 801bc00:	b120      	cbz	r0, 801bc0c <rcl_subscription_is_valid+0x10>
 801bc02:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801bc06:	3800      	subs	r0, #0
 801bc08:	bf18      	it	ne
 801bc0a:	2001      	movne	r0, #1
 801bc0c:	4770      	bx	lr
 801bc0e:	bf00      	nop

0801bc10 <rcl_get_system_time>:
 801bc10:	4608      	mov	r0, r1
 801bc12:	f7f9 bc99 	b.w	8015548 <rcutils_system_time_now>
 801bc16:	bf00      	nop

0801bc18 <rcl_get_steady_time>:
 801bc18:	4608      	mov	r0, r1
 801bc1a:	f7f9 bcbb 	b.w	8015594 <rcutils_steady_time_now>
 801bc1e:	bf00      	nop

0801bc20 <rcl_get_ros_time>:
 801bc20:	7a03      	ldrb	r3, [r0, #8]
 801bc22:	b510      	push	{r4, lr}
 801bc24:	460c      	mov	r4, r1
 801bc26:	b143      	cbz	r3, 801bc3a <rcl_get_ros_time+0x1a>
 801bc28:	2105      	movs	r1, #5
 801bc2a:	f001 ff99 	bl	801db60 <__atomic_load_8>
 801bc2e:	4602      	mov	r2, r0
 801bc30:	460b      	mov	r3, r1
 801bc32:	2000      	movs	r0, #0
 801bc34:	e9c4 2300 	strd	r2, r3, [r4]
 801bc38:	bd10      	pop	{r4, pc}
 801bc3a:	4608      	mov	r0, r1
 801bc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc40:	f7f9 bc82 	b.w	8015548 <rcutils_system_time_now>

0801bc44 <rcl_clock_init>:
 801bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc46:	4605      	mov	r5, r0
 801bc48:	4610      	mov	r0, r2
 801bc4a:	4614      	mov	r4, r2
 801bc4c:	460e      	mov	r6, r1
 801bc4e:	f7f9 fc3b 	bl	80154c8 <rcutils_allocator_is_valid>
 801bc52:	b128      	cbz	r0, 801bc60 <rcl_clock_init+0x1c>
 801bc54:	2d03      	cmp	r5, #3
 801bc56:	d803      	bhi.n	801bc60 <rcl_clock_init+0x1c>
 801bc58:	e8df f005 	tbb	[pc, r5]
 801bc5c:	0659301f 	.word	0x0659301f
 801bc60:	f04f 0c0b 	mov.w	ip, #11
 801bc64:	4660      	mov	r0, ip
 801bc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc68:	2c00      	cmp	r4, #0
 801bc6a:	d0f9      	beq.n	801bc60 <rcl_clock_init+0x1c>
 801bc6c:	fab6 f386 	clz	r3, r6
 801bc70:	095b      	lsrs	r3, r3, #5
 801bc72:	2e00      	cmp	r6, #0
 801bc74:	d0f4      	beq.n	801bc60 <rcl_clock_init+0x1c>
 801bc76:	6133      	str	r3, [r6, #16]
 801bc78:	469c      	mov	ip, r3
 801bc7a:	f106 0514 	add.w	r5, r6, #20
 801bc7e:	4f32      	ldr	r7, [pc, #200]	@ (801bd48 <rcl_clock_init+0x104>)
 801bc80:	f04f 0e03 	mov.w	lr, #3
 801bc84:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bc88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bc8c:	6823      	ldr	r3, [r4, #0]
 801bc8e:	4660      	mov	r0, ip
 801bc90:	602b      	str	r3, [r5, #0]
 801bc92:	60f7      	str	r7, [r6, #12]
 801bc94:	f886 e000 	strb.w	lr, [r6]
 801bc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc9a:	2e00      	cmp	r6, #0
 801bc9c:	d0e0      	beq.n	801bc60 <rcl_clock_init+0x1c>
 801bc9e:	2300      	movs	r3, #0
 801bca0:	f106 0514 	add.w	r5, r6, #20
 801bca4:	7033      	strb	r3, [r6, #0]
 801bca6:	469c      	mov	ip, r3
 801bca8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bcac:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bcb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bcb4:	6823      	ldr	r3, [r4, #0]
 801bcb6:	4660      	mov	r0, ip
 801bcb8:	602b      	str	r3, [r5, #0]
 801bcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcbc:	2c00      	cmp	r4, #0
 801bcbe:	d0cf      	beq.n	801bc60 <rcl_clock_init+0x1c>
 801bcc0:	fab6 f586 	clz	r5, r6
 801bcc4:	096d      	lsrs	r5, r5, #5
 801bcc6:	2e00      	cmp	r6, #0
 801bcc8:	d0ca      	beq.n	801bc60 <rcl_clock_init+0x1c>
 801bcca:	46a6      	mov	lr, r4
 801bccc:	7035      	strb	r5, [r6, #0]
 801bcce:	f106 0c14 	add.w	ip, r6, #20
 801bcd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bcd6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bcda:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bcde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bce2:	f8de 3000 	ldr.w	r3, [lr]
 801bce6:	2010      	movs	r0, #16
 801bce8:	f8cc 3000 	str.w	r3, [ip]
 801bcec:	6823      	ldr	r3, [r4, #0]
 801bcee:	6921      	ldr	r1, [r4, #16]
 801bcf0:	4798      	blx	r3
 801bcf2:	6130      	str	r0, [r6, #16]
 801bcf4:	b320      	cbz	r0, 801bd40 <rcl_clock_init+0xfc>
 801bcf6:	2200      	movs	r2, #0
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	46ac      	mov	ip, r5
 801bcfc:	7205      	strb	r5, [r0, #8]
 801bcfe:	e9c0 2300 	strd	r2, r3, [r0]
 801bd02:	4a12      	ldr	r2, [pc, #72]	@ (801bd4c <rcl_clock_init+0x108>)
 801bd04:	2301      	movs	r3, #1
 801bd06:	4660      	mov	r0, ip
 801bd08:	60f2      	str	r2, [r6, #12]
 801bd0a:	7033      	strb	r3, [r6, #0]
 801bd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd0e:	2c00      	cmp	r4, #0
 801bd10:	d0a6      	beq.n	801bc60 <rcl_clock_init+0x1c>
 801bd12:	fab6 f386 	clz	r3, r6
 801bd16:	095b      	lsrs	r3, r3, #5
 801bd18:	2e00      	cmp	r6, #0
 801bd1a:	d0a1      	beq.n	801bc60 <rcl_clock_init+0x1c>
 801bd1c:	6133      	str	r3, [r6, #16]
 801bd1e:	469c      	mov	ip, r3
 801bd20:	f106 0514 	add.w	r5, r6, #20
 801bd24:	f8df e028 	ldr.w	lr, [pc, #40]	@ 801bd50 <rcl_clock_init+0x10c>
 801bd28:	2702      	movs	r7, #2
 801bd2a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bd2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bd32:	6823      	ldr	r3, [r4, #0]
 801bd34:	4660      	mov	r0, ip
 801bd36:	602b      	str	r3, [r5, #0]
 801bd38:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bd3c:	7037      	strb	r7, [r6, #0]
 801bd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd40:	f04f 0c0a 	mov.w	ip, #10
 801bd44:	e78e      	b.n	801bc64 <rcl_clock_init+0x20>
 801bd46:	bf00      	nop
 801bd48:	0801bc19 	.word	0x0801bc19
 801bd4c:	0801bc21 	.word	0x0801bc21
 801bd50:	0801bc11 	.word	0x0801bc11

0801bd54 <rcl_clock_get_now>:
 801bd54:	b140      	cbz	r0, 801bd68 <rcl_clock_get_now+0x14>
 801bd56:	b139      	cbz	r1, 801bd68 <rcl_clock_get_now+0x14>
 801bd58:	7803      	ldrb	r3, [r0, #0]
 801bd5a:	b11b      	cbz	r3, 801bd64 <rcl_clock_get_now+0x10>
 801bd5c:	68c3      	ldr	r3, [r0, #12]
 801bd5e:	b10b      	cbz	r3, 801bd64 <rcl_clock_get_now+0x10>
 801bd60:	6900      	ldr	r0, [r0, #16]
 801bd62:	4718      	bx	r3
 801bd64:	2001      	movs	r0, #1
 801bd66:	4770      	bx	lr
 801bd68:	200b      	movs	r0, #11
 801bd6a:	4770      	bx	lr

0801bd6c <rcl_clock_add_jump_callback>:
 801bd6c:	b082      	sub	sp, #8
 801bd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd72:	a906      	add	r1, sp, #24
 801bd74:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 801bd78:	e881 000c 	stmia.w	r1, {r2, r3}
 801bd7c:	b330      	cbz	r0, 801bdcc <rcl_clock_add_jump_callback+0x60>
 801bd7e:	4604      	mov	r4, r0
 801bd80:	3014      	adds	r0, #20
 801bd82:	f7f9 fba1 	bl	80154c8 <rcutils_allocator_is_valid>
 801bd86:	b30d      	cbz	r5, 801bdcc <rcl_clock_add_jump_callback+0x60>
 801bd88:	f080 0301 	eor.w	r3, r0, #1
 801bd8c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801bd90:	d11c      	bne.n	801bdcc <rcl_clock_add_jump_callback+0x60>
 801bd92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bd94:	2a00      	cmp	r2, #0
 801bd96:	db19      	blt.n	801bdcc <rcl_clock_add_jump_callback+0x60>
 801bd98:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801bd9c:	2901      	cmp	r1, #1
 801bd9e:	f172 0200 	sbcs.w	r2, r2, #0
 801bda2:	da13      	bge.n	801bdcc <rcl_clock_add_jump_callback+0x60>
 801bda4:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801bda8:	2f00      	cmp	r7, #0
 801bdaa:	d040      	beq.n	801be2e <rcl_clock_add_jump_callback+0xc2>
 801bdac:	4602      	mov	r2, r0
 801bdae:	e003      	b.n	801bdb8 <rcl_clock_add_jump_callback+0x4c>
 801bdb0:	42bb      	cmp	r3, r7
 801bdb2:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801bdb6:	d010      	beq.n	801bdda <rcl_clock_add_jump_callback+0x6e>
 801bdb8:	6811      	ldr	r1, [r2, #0]
 801bdba:	3301      	adds	r3, #1
 801bdbc:	42a9      	cmp	r1, r5
 801bdbe:	d1f7      	bne.n	801bdb0 <rcl_clock_add_jump_callback+0x44>
 801bdc0:	6a11      	ldr	r1, [r2, #32]
 801bdc2:	42b1      	cmp	r1, r6
 801bdc4:	d1f4      	bne.n	801bdb0 <rcl_clock_add_jump_callback+0x44>
 801bdc6:	f04f 0e01 	mov.w	lr, #1
 801bdca:	e001      	b.n	801bdd0 <rcl_clock_add_jump_callback+0x64>
 801bdcc:	f04f 0e0b 	mov.w	lr, #11
 801bdd0:	4670      	mov	r0, lr
 801bdd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bdd6:	b002      	add	sp, #8
 801bdd8:	4770      	bx	lr
 801bdda:	3301      	adds	r3, #1
 801bddc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801bde0:	00d9      	lsls	r1, r3, #3
 801bde2:	69e3      	ldr	r3, [r4, #28]
 801bde4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801bde6:	4798      	blx	r3
 801bde8:	b1f0      	cbz	r0, 801be28 <rcl_clock_add_jump_callback+0xbc>
 801bdea:	68a3      	ldr	r3, [r4, #8]
 801bdec:	f10d 0c18 	add.w	ip, sp, #24
 801bdf0:	6060      	str	r0, [r4, #4]
 801bdf2:	f04f 0e00 	mov.w	lr, #0
 801bdf6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801bdfa:	f103 0801 	add.w	r8, r3, #1
 801bdfe:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801be02:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801be06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801be0a:	f105 0708 	add.w	r7, r5, #8
 801be0e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801be10:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801be14:	e887 0003 	stmia.w	r7, {r0, r1}
 801be18:	4670      	mov	r0, lr
 801be1a:	622e      	str	r6, [r5, #32]
 801be1c:	f8c4 8008 	str.w	r8, [r4, #8]
 801be20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be24:	b002      	add	sp, #8
 801be26:	4770      	bx	lr
 801be28:	f04f 0e0a 	mov.w	lr, #10
 801be2c:	e7d0      	b.n	801bdd0 <rcl_clock_add_jump_callback+0x64>
 801be2e:	2128      	movs	r1, #40	@ 0x28
 801be30:	e7d7      	b.n	801bde2 <rcl_clock_add_jump_callback+0x76>
 801be32:	bf00      	nop

0801be34 <rcl_clock_remove_jump_callback>:
 801be34:	2800      	cmp	r0, #0
 801be36:	d05f      	beq.n	801bef8 <rcl_clock_remove_jump_callback+0xc4>
 801be38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be3c:	4605      	mov	r5, r0
 801be3e:	3014      	adds	r0, #20
 801be40:	460f      	mov	r7, r1
 801be42:	4692      	mov	sl, r2
 801be44:	f7f9 fb40 	bl	80154c8 <rcutils_allocator_is_valid>
 801be48:	f080 0001 	eor.w	r0, r0, #1
 801be4c:	b2c0      	uxtb	r0, r0
 801be4e:	2800      	cmp	r0, #0
 801be50:	d13f      	bne.n	801bed2 <rcl_clock_remove_jump_callback+0x9e>
 801be52:	2f00      	cmp	r7, #0
 801be54:	d03d      	beq.n	801bed2 <rcl_clock_remove_jump_callback+0x9e>
 801be56:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801be5a:	f1b8 0f00 	cmp.w	r8, #0
 801be5e:	d00c      	beq.n	801be7a <rcl_clock_remove_jump_callback+0x46>
 801be60:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801be64:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801be68:	464c      	mov	r4, r9
 801be6a:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801be6e:	6823      	ldr	r3, [r4, #0]
 801be70:	42bb      	cmp	r3, r7
 801be72:	d005      	beq.n	801be80 <rcl_clock_remove_jump_callback+0x4c>
 801be74:	3428      	adds	r4, #40	@ 0x28
 801be76:	42a6      	cmp	r6, r4
 801be78:	d1f9      	bne.n	801be6e <rcl_clock_remove_jump_callback+0x3a>
 801be7a:	2001      	movs	r0, #1
 801be7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be80:	6a23      	ldr	r3, [r4, #32]
 801be82:	3428      	adds	r4, #40	@ 0x28
 801be84:	42a6      	cmp	r6, r4
 801be86:	d02f      	beq.n	801bee8 <rcl_clock_remove_jump_callback+0xb4>
 801be88:	4553      	cmp	r3, sl
 801be8a:	d1f0      	bne.n	801be6e <rcl_clock_remove_jump_callback+0x3a>
 801be8c:	46a6      	mov	lr, r4
 801be8e:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801be92:	3428      	adds	r4, #40	@ 0x28
 801be94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801be98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bea0:	42a6      	cmp	r6, r4
 801bea2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bea6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801beaa:	e88c 0003 	stmia.w	ip, {r0, r1}
 801beae:	d1ed      	bne.n	801be8c <rcl_clock_remove_jump_callback+0x58>
 801beb0:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801beb4:	60ac      	str	r4, [r5, #8]
 801beb6:	b17c      	cbz	r4, 801bed8 <rcl_clock_remove_jump_callback+0xa4>
 801beb8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801bebc:	69eb      	ldr	r3, [r5, #28]
 801bebe:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801bec0:	4648      	mov	r0, r9
 801bec2:	00e1      	lsls	r1, r4, #3
 801bec4:	4798      	blx	r3
 801bec6:	4603      	mov	r3, r0
 801bec8:	b1c0      	cbz	r0, 801befc <rcl_clock_remove_jump_callback+0xc8>
 801beca:	2000      	movs	r0, #0
 801becc:	606b      	str	r3, [r5, #4]
 801bece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bed2:	200b      	movs	r0, #11
 801bed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bed8:	4648      	mov	r0, r9
 801beda:	69ab      	ldr	r3, [r5, #24]
 801bedc:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801bede:	4798      	blx	r3
 801bee0:	4620      	mov	r0, r4
 801bee2:	606c      	str	r4, [r5, #4]
 801bee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bee8:	4553      	cmp	r3, sl
 801beea:	d1c6      	bne.n	801be7a <rcl_clock_remove_jump_callback+0x46>
 801beec:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 801bef0:	60ac      	str	r4, [r5, #8]
 801bef2:	2c00      	cmp	r4, #0
 801bef4:	d1e0      	bne.n	801beb8 <rcl_clock_remove_jump_callback+0x84>
 801bef6:	e7ef      	b.n	801bed8 <rcl_clock_remove_jump_callback+0xa4>
 801bef8:	200b      	movs	r0, #11
 801befa:	4770      	bx	lr
 801befc:	200a      	movs	r0, #10
 801befe:	e7e9      	b.n	801bed4 <rcl_clock_remove_jump_callback+0xa0>

0801bf00 <_rcl_timer_time_jump>:
 801bf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf04:	4605      	mov	r5, r0
 801bf06:	b084      	sub	sp, #16
 801bf08:	4614      	mov	r4, r2
 801bf0a:	b131      	cbz	r1, 801bf1a <_rcl_timer_time_jump+0x1a>
 801bf0c:	7803      	ldrb	r3, [r0, #0]
 801bf0e:	3b02      	subs	r3, #2
 801bf10:	2b01      	cmp	r3, #1
 801bf12:	d93f      	bls.n	801bf94 <_rcl_timer_time_jump+0x94>
 801bf14:	b004      	add	sp, #16
 801bf16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf1a:	6813      	ldr	r3, [r2, #0]
 801bf1c:	a902      	add	r1, sp, #8
 801bf1e:	6818      	ldr	r0, [r3, #0]
 801bf20:	f7ff ff18 	bl	801bd54 <rcl_clock_get_now>
 801bf24:	2800      	cmp	r0, #0
 801bf26:	d1f5      	bne.n	801bf14 <_rcl_timer_time_jump+0x14>
 801bf28:	6820      	ldr	r0, [r4, #0]
 801bf2a:	2105      	movs	r1, #5
 801bf2c:	3020      	adds	r0, #32
 801bf2e:	f001 fe17 	bl	801db60 <__atomic_load_8>
 801bf32:	6823      	ldr	r3, [r4, #0]
 801bf34:	4681      	mov	r9, r0
 801bf36:	4688      	mov	r8, r1
 801bf38:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801bf3c:	2105      	movs	r1, #5
 801bf3e:	f001 fe0f 	bl	801db60 <__atomic_load_8>
 801bf42:	4607      	mov	r7, r0
 801bf44:	6820      	ldr	r0, [r4, #0]
 801bf46:	460e      	mov	r6, r1
 801bf48:	2105      	movs	r1, #5
 801bf4a:	3018      	adds	r0, #24
 801bf4c:	f001 fe08 	bl	801db60 <__atomic_load_8>
 801bf50:	782b      	ldrb	r3, [r5, #0]
 801bf52:	4682      	mov	sl, r0
 801bf54:	460d      	mov	r5, r1
 801bf56:	3b02      	subs	r3, #2
 801bf58:	9a02      	ldr	r2, [sp, #8]
 801bf5a:	2b01      	cmp	r3, #1
 801bf5c:	9b03      	ldr	r3, [sp, #12]
 801bf5e:	d937      	bls.n	801bfd0 <_rcl_timer_time_jump+0xd0>
 801bf60:	42ba      	cmp	r2, r7
 801bf62:	eb73 0106 	sbcs.w	r1, r3, r6
 801bf66:	da60      	bge.n	801c02a <_rcl_timer_time_jump+0x12a>
 801bf68:	454a      	cmp	r2, r9
 801bf6a:	eb73 0108 	sbcs.w	r1, r3, r8
 801bf6e:	dad1      	bge.n	801bf14 <_rcl_timer_time_jump+0x14>
 801bf70:	eb1a 0202 	adds.w	r2, sl, r2
 801bf74:	6820      	ldr	r0, [r4, #0]
 801bf76:	eb43 0305 	adc.w	r3, r3, r5
 801bf7a:	2505      	movs	r5, #5
 801bf7c:	3028      	adds	r0, #40	@ 0x28
 801bf7e:	9500      	str	r5, [sp, #0]
 801bf80:	f001 fe24 	bl	801dbcc <__atomic_store_8>
 801bf84:	6820      	ldr	r0, [r4, #0]
 801bf86:	9500      	str	r5, [sp, #0]
 801bf88:	3020      	adds	r0, #32
 801bf8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf8e:	f001 fe1d 	bl	801dbcc <__atomic_store_8>
 801bf92:	e7bf      	b.n	801bf14 <_rcl_timer_time_jump+0x14>
 801bf94:	6813      	ldr	r3, [r2, #0]
 801bf96:	a902      	add	r1, sp, #8
 801bf98:	6818      	ldr	r0, [r3, #0]
 801bf9a:	f7ff fedb 	bl	801bd54 <rcl_clock_get_now>
 801bf9e:	2800      	cmp	r0, #0
 801bfa0:	d1b8      	bne.n	801bf14 <_rcl_timer_time_jump+0x14>
 801bfa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bfa6:	4313      	orrs	r3, r2
 801bfa8:	d0b4      	beq.n	801bf14 <_rcl_timer_time_jump+0x14>
 801bfaa:	6820      	ldr	r0, [r4, #0]
 801bfac:	2105      	movs	r1, #5
 801bfae:	3028      	adds	r0, #40	@ 0x28
 801bfb0:	f001 fdd6 	bl	801db60 <__atomic_load_8>
 801bfb4:	9d02      	ldr	r5, [sp, #8]
 801bfb6:	4602      	mov	r2, r0
 801bfb8:	9b03      	ldr	r3, [sp, #12]
 801bfba:	6820      	ldr	r0, [r4, #0]
 801bfbc:	1b52      	subs	r2, r2, r5
 801bfbe:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 801bfc2:	eb61 0303 	sbc.w	r3, r1, r3
 801bfc6:	2105      	movs	r1, #5
 801bfc8:	9100      	str	r1, [sp, #0]
 801bfca:	f001 fdff 	bl	801dbcc <__atomic_store_8>
 801bfce:	e7a1      	b.n	801bf14 <_rcl_timer_time_jump+0x14>
 801bfd0:	4313      	orrs	r3, r2
 801bfd2:	d09f      	beq.n	801bf14 <_rcl_timer_time_jump+0x14>
 801bfd4:	6820      	ldr	r0, [r4, #0]
 801bfd6:	f04f 0805 	mov.w	r8, #5
 801bfda:	2300      	movs	r3, #0
 801bfdc:	2200      	movs	r2, #0
 801bfde:	3030      	adds	r0, #48	@ 0x30
 801bfe0:	f8cd 8000 	str.w	r8, [sp]
 801bfe4:	f001 fe28 	bl	801dc38 <__atomic_exchange_8>
 801bfe8:	ea51 0300 	orrs.w	r3, r1, r0
 801bfec:	4606      	mov	r6, r0
 801bfee:	460f      	mov	r7, r1
 801bff0:	d090      	beq.n	801bf14 <_rcl_timer_time_jump+0x14>
 801bff2:	9a02      	ldr	r2, [sp, #8]
 801bff4:	9b03      	ldr	r3, [sp, #12]
 801bff6:	1a12      	subs	r2, r2, r0
 801bff8:	f8cd 8000 	str.w	r8, [sp]
 801bffc:	6820      	ldr	r0, [r4, #0]
 801bffe:	eb63 0301 	sbc.w	r3, r3, r1
 801c002:	eb12 020a 	adds.w	r2, r2, sl
 801c006:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 801c00a:	eb43 0305 	adc.w	r3, r3, r5
 801c00e:	f001 fddd 	bl	801dbcc <__atomic_store_8>
 801c012:	f8cd 8000 	str.w	r8, [sp]
 801c016:	6820      	ldr	r0, [r4, #0]
 801c018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c01c:	3020      	adds	r0, #32
 801c01e:	1b92      	subs	r2, r2, r6
 801c020:	eb63 0307 	sbc.w	r3, r3, r7
 801c024:	f001 fdd2 	bl	801dbcc <__atomic_store_8>
 801c028:	e774      	b.n	801bf14 <_rcl_timer_time_jump+0x14>
 801c02a:	6820      	ldr	r0, [r4, #0]
 801c02c:	3008      	adds	r0, #8
 801c02e:	f005 f9e7 	bl	8021400 <rcl_trigger_guard_condition>
 801c032:	e76f      	b.n	801bf14 <_rcl_timer_time_jump+0x14>

0801c034 <rcl_get_zero_initialized_timer>:
 801c034:	4b01      	ldr	r3, [pc, #4]	@ (801c03c <rcl_get_zero_initialized_timer+0x8>)
 801c036:	6818      	ldr	r0, [r3, #0]
 801c038:	4770      	bx	lr
 801c03a:	bf00      	nop
 801c03c:	08025498 	.word	0x08025498

0801c040 <rcl_timer_init>:
 801c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c044:	b0ab      	sub	sp, #172	@ 0xac
 801c046:	460d      	mov	r5, r1
 801c048:	4604      	mov	r4, r0
 801c04a:	4692      	mov	sl, r2
 801c04c:	a837      	add	r0, sp, #220	@ 0xdc
 801c04e:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 801c050:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 801c054:	f7f9 fa38 	bl	80154c8 <rcutils_allocator_is_valid>
 801c058:	fab5 f385 	clz	r3, r5
 801c05c:	095b      	lsrs	r3, r3, #5
 801c05e:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 801c062:	2c00      	cmp	r4, #0
 801c064:	bf08      	it	eq
 801c066:	f043 0301 	orreq.w	r3, r3, #1
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d164      	bne.n	801c138 <rcl_timer_init+0xf8>
 801c06e:	f080 0001 	eor.w	r0, r0, #1
 801c072:	b2c0      	uxtb	r0, r0
 801c074:	2800      	cmp	r0, #0
 801c076:	d15f      	bne.n	801c138 <rcl_timer_init+0xf8>
 801c078:	6823      	ldr	r3, [r4, #0]
 801c07a:	b123      	cbz	r3, 801c086 <rcl_timer_init+0x46>
 801c07c:	2664      	movs	r6, #100	@ 0x64
 801c07e:	4630      	mov	r0, r6
 801c080:	b02b      	add	sp, #172	@ 0xac
 801c082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c086:	a908      	add	r1, sp, #32
 801c088:	4628      	mov	r0, r5
 801c08a:	f7ff fe63 	bl	801bd54 <rcl_clock_get_now>
 801c08e:	4606      	mov	r6, r0
 801c090:	2800      	cmp	r0, #0
 801c092:	d1f4      	bne.n	801c07e <rcl_timer_init+0x3e>
 801c094:	f10d 0b18 	add.w	fp, sp, #24
 801c098:	ae0b      	add	r6, sp, #44	@ 0x2c
 801c09a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801c09e:	4658      	mov	r0, fp
 801c0a0:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801c0a4:	f005 f8b6 	bl	8021214 <rcl_get_zero_initialized_guard_condition>
 801c0a8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801c0ac:	e889 0003 	stmia.w	r9, {r0, r1}
 801c0b0:	4630      	mov	r0, r6
 801c0b2:	f005 f989 	bl	80213c8 <rcl_guard_condition_get_default_options>
 801c0b6:	ab0d      	add	r3, sp, #52	@ 0x34
 801c0b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c0bc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c0c0:	4651      	mov	r1, sl
 801c0c2:	4648      	mov	r0, r9
 801c0c4:	e896 000c 	ldmia.w	r6, {r2, r3}
 801c0c8:	f005 f8ae 	bl	8021228 <rcl_guard_condition_init>
 801c0cc:	4606      	mov	r6, r0
 801c0ce:	2800      	cmp	r0, #0
 801c0d0:	d1d5      	bne.n	801c07e <rcl_timer_init+0x3e>
 801c0d2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c0d4:	781b      	ldrb	r3, [r3, #0]
 801c0d6:	2b01      	cmp	r3, #1
 801c0d8:	d033      	beq.n	801c142 <rcl_timer_init+0x102>
 801c0da:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801c0dc:	4642      	mov	r2, r8
 801c0de:	463b      	mov	r3, r7
 801c0e0:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801c0e4:	911a      	str	r1, [sp, #104]	@ 0x68
 801c0e6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801c0ea:	f04f 0a00 	mov.w	sl, #0
 801c0ee:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801c0f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c0f6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801c1a0 <rcl_timer_init+0x160>
 801c0fa:	eb12 0008 	adds.w	r0, r2, r8
 801c0fe:	eb47 0103 	adc.w	r1, r7, r3
 801c102:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801c106:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801c10a:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801c10e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c112:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c116:	f8de 3000 	ldr.w	r3, [lr]
 801c11a:	2050      	movs	r0, #80	@ 0x50
 801c11c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 801c120:	4619      	mov	r1, r3
 801c122:	f8cc 3000 	str.w	r3, [ip]
 801c126:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801c128:	4798      	blx	r3
 801c12a:	6020      	str	r0, [r4, #0]
 801c12c:	b358      	cbz	r0, 801c186 <rcl_timer_init+0x146>
 801c12e:	2250      	movs	r2, #80	@ 0x50
 801c130:	a916      	add	r1, sp, #88	@ 0x58
 801c132:	f006 f9ec 	bl	802250e <memcpy>
 801c136:	e7a2      	b.n	801c07e <rcl_timer_init+0x3e>
 801c138:	260b      	movs	r6, #11
 801c13a:	4630      	mov	r0, r6
 801c13c:	b02b      	add	sp, #172	@ 0xac
 801c13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c142:	2001      	movs	r0, #1
 801c144:	2100      	movs	r1, #0
 801c146:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 801c14a:	ab12      	add	r3, sp, #72	@ 0x48
 801c14c:	4a16      	ldr	r2, [pc, #88]	@ (801c1a8 <rcl_timer_init+0x168>)
 801c14e:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801c152:	9405      	str	r4, [sp, #20]
 801c154:	9204      	str	r2, [sp, #16]
 801c156:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801c15a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c15e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c162:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801c166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c168:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c16c:	4628      	mov	r0, r5
 801c16e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801c172:	f7ff fdfb 	bl	801bd6c <rcl_clock_add_jump_callback>
 801c176:	4603      	mov	r3, r0
 801c178:	2800      	cmp	r0, #0
 801c17a:	d0ae      	beq.n	801c0da <rcl_timer_init+0x9a>
 801c17c:	4648      	mov	r0, r9
 801c17e:	461e      	mov	r6, r3
 801c180:	f005 f8fc 	bl	802137c <rcl_guard_condition_fini>
 801c184:	e77b      	b.n	801c07e <rcl_timer_init+0x3e>
 801c186:	4648      	mov	r0, r9
 801c188:	260a      	movs	r6, #10
 801c18a:	f005 f8f7 	bl	802137c <rcl_guard_condition_fini>
 801c18e:	4622      	mov	r2, r4
 801c190:	4905      	ldr	r1, [pc, #20]	@ (801c1a8 <rcl_timer_init+0x168>)
 801c192:	4628      	mov	r0, r5
 801c194:	f7ff fe4e 	bl	801be34 <rcl_clock_remove_jump_callback>
 801c198:	e771      	b.n	801c07e <rcl_timer_init+0x3e>
 801c19a:	bf00      	nop
 801c19c:	f3af 8000 	nop.w
	...
 801c1a8:	0801bf01 	.word	0x0801bf01

0801c1ac <rcl_timer_call>:
 801c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1b0:	b087      	sub	sp, #28
 801c1b2:	2800      	cmp	r0, #0
 801c1b4:	d06c      	beq.n	801c290 <rcl_timer_call+0xe4>
 801c1b6:	6803      	ldr	r3, [r0, #0]
 801c1b8:	4604      	mov	r4, r0
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d062      	beq.n	801c284 <rcl_timer_call+0xd8>
 801c1be:	f3bf 8f5b 	dmb	ish
 801c1c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c1c6:	f3bf 8f5b 	dmb	ish
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d14f      	bne.n	801c26e <rcl_timer_call+0xc2>
 801c1ce:	6803      	ldr	r3, [r0, #0]
 801c1d0:	a904      	add	r1, sp, #16
 801c1d2:	6818      	ldr	r0, [r3, #0]
 801c1d4:	f7ff fdbe 	bl	801bd54 <rcl_clock_get_now>
 801c1d8:	4605      	mov	r5, r0
 801c1da:	2800      	cmp	r0, #0
 801c1dc:	d149      	bne.n	801c272 <rcl_timer_call+0xc6>
 801c1de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	db49      	blt.n	801c27a <rcl_timer_call+0xce>
 801c1e6:	2605      	movs	r6, #5
 801c1e8:	6820      	ldr	r0, [r4, #0]
 801c1ea:	9600      	str	r6, [sp, #0]
 801c1ec:	3020      	adds	r0, #32
 801c1ee:	f001 fd23 	bl	801dc38 <__atomic_exchange_8>
 801c1f2:	6823      	ldr	r3, [r4, #0]
 801c1f4:	4680      	mov	r8, r0
 801c1f6:	f3bf 8f5b 	dmb	ish
 801c1fa:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c1fe:	f3bf 8f5b 	dmb	ish
 801c202:	6820      	ldr	r0, [r4, #0]
 801c204:	4689      	mov	r9, r1
 801c206:	4631      	mov	r1, r6
 801c208:	3028      	adds	r0, #40	@ 0x28
 801c20a:	f001 fca9 	bl	801db60 <__atomic_load_8>
 801c20e:	460f      	mov	r7, r1
 801c210:	4631      	mov	r1, r6
 801c212:	4606      	mov	r6, r0
 801c214:	6820      	ldr	r0, [r4, #0]
 801c216:	3018      	adds	r0, #24
 801c218:	f001 fca2 	bl	801db60 <__atomic_load_8>
 801c21c:	4602      	mov	r2, r0
 801c21e:	9804      	ldr	r0, [sp, #16]
 801c220:	460b      	mov	r3, r1
 801c222:	18b6      	adds	r6, r6, r2
 801c224:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c228:	4692      	mov	sl, r2
 801c22a:	eb47 0701 	adc.w	r7, r7, r1
 801c22e:	4286      	cmp	r6, r0
 801c230:	eb77 010c 	sbcs.w	r1, r7, ip
 801c234:	da04      	bge.n	801c240 <rcl_timer_call+0x94>
 801c236:	ea53 0102 	orrs.w	r1, r3, r2
 801c23a:	d12e      	bne.n	801c29a <rcl_timer_call+0xee>
 801c23c:	4606      	mov	r6, r0
 801c23e:	4667      	mov	r7, ip
 801c240:	6820      	ldr	r0, [r4, #0]
 801c242:	2105      	movs	r1, #5
 801c244:	4632      	mov	r2, r6
 801c246:	463b      	mov	r3, r7
 801c248:	3028      	adds	r0, #40	@ 0x28
 801c24a:	9100      	str	r1, [sp, #0]
 801c24c:	f001 fcbe 	bl	801dbcc <__atomic_store_8>
 801c250:	f1bb 0f00 	cmp.w	fp, #0
 801c254:	d00d      	beq.n	801c272 <rcl_timer_call+0xc6>
 801c256:	9a04      	ldr	r2, [sp, #16]
 801c258:	4620      	mov	r0, r4
 801c25a:	9b05      	ldr	r3, [sp, #20]
 801c25c:	ebb2 0208 	subs.w	r2, r2, r8
 801c260:	eb63 0309 	sbc.w	r3, r3, r9
 801c264:	47d8      	blx	fp
 801c266:	4628      	mov	r0, r5
 801c268:	b007      	add	sp, #28
 801c26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c26e:	f240 3521 	movw	r5, #801	@ 0x321
 801c272:	4628      	mov	r0, r5
 801c274:	b007      	add	sp, #28
 801c276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c27a:	2501      	movs	r5, #1
 801c27c:	4628      	mov	r0, r5
 801c27e:	b007      	add	sp, #28
 801c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c284:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801c288:	4628      	mov	r0, r5
 801c28a:	b007      	add	sp, #28
 801c28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c290:	250b      	movs	r5, #11
 801c292:	4628      	mov	r0, r5
 801c294:	b007      	add	sp, #28
 801c296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c29a:	1b80      	subs	r0, r0, r6
 801c29c:	eb6c 0107 	sbc.w	r1, ip, r7
 801c2a0:	3801      	subs	r0, #1
 801c2a2:	f161 0100 	sbc.w	r1, r1, #0
 801c2a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c2aa:	f7e4 f881 	bl	80003b0 <__aeabi_ldivmod>
 801c2ae:	9b02      	ldr	r3, [sp, #8]
 801c2b0:	3001      	adds	r0, #1
 801c2b2:	f141 0100 	adc.w	r1, r1, #0
 801c2b6:	fb00 f303 	mul.w	r3, r0, r3
 801c2ba:	fb01 330a 	mla	r3, r1, sl, r3
 801c2be:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c2c2:	1986      	adds	r6, r0, r6
 801c2c4:	4453      	add	r3, sl
 801c2c6:	eb43 0707 	adc.w	r7, r3, r7
 801c2ca:	e7b9      	b.n	801c240 <rcl_timer_call+0x94>

0801c2cc <rcl_timer_is_ready>:
 801c2cc:	b570      	push	{r4, r5, r6, lr}
 801c2ce:	b082      	sub	sp, #8
 801c2d0:	b380      	cbz	r0, 801c334 <rcl_timer_is_ready+0x68>
 801c2d2:	6803      	ldr	r3, [r0, #0]
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	b38b      	cbz	r3, 801c33c <rcl_timer_is_ready+0x70>
 801c2d8:	460d      	mov	r5, r1
 801c2da:	b359      	cbz	r1, 801c334 <rcl_timer_is_ready+0x68>
 801c2dc:	f3bf 8f5b 	dmb	ish
 801c2e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c2e4:	f3bf 8f5b 	dmb	ish
 801c2e8:	b953      	cbnz	r3, 801c300 <rcl_timer_is_ready+0x34>
 801c2ea:	6803      	ldr	r3, [r0, #0]
 801c2ec:	4669      	mov	r1, sp
 801c2ee:	6818      	ldr	r0, [r3, #0]
 801c2f0:	f7ff fd30 	bl	801bd54 <rcl_clock_get_now>
 801c2f4:	4606      	mov	r6, r0
 801c2f6:	b148      	cbz	r0, 801c30c <rcl_timer_is_ready+0x40>
 801c2f8:	f240 3321 	movw	r3, #801	@ 0x321
 801c2fc:	4298      	cmp	r0, r3
 801c2fe:	d102      	bne.n	801c306 <rcl_timer_is_ready+0x3a>
 801c300:	2300      	movs	r3, #0
 801c302:	461e      	mov	r6, r3
 801c304:	702b      	strb	r3, [r5, #0]
 801c306:	4630      	mov	r0, r6
 801c308:	b002      	add	sp, #8
 801c30a:	bd70      	pop	{r4, r5, r6, pc}
 801c30c:	6820      	ldr	r0, [r4, #0]
 801c30e:	2105      	movs	r1, #5
 801c310:	3028      	adds	r0, #40	@ 0x28
 801c312:	f001 fc25 	bl	801db60 <__atomic_load_8>
 801c316:	9b00      	ldr	r3, [sp, #0]
 801c318:	1ac0      	subs	r0, r0, r3
 801c31a:	9b01      	ldr	r3, [sp, #4]
 801c31c:	eb61 0103 	sbc.w	r1, r1, r3
 801c320:	2801      	cmp	r0, #1
 801c322:	4630      	mov	r0, r6
 801c324:	f171 0300 	sbcs.w	r3, r1, #0
 801c328:	bfb4      	ite	lt
 801c32a:	2301      	movlt	r3, #1
 801c32c:	2300      	movge	r3, #0
 801c32e:	702b      	strb	r3, [r5, #0]
 801c330:	b002      	add	sp, #8
 801c332:	bd70      	pop	{r4, r5, r6, pc}
 801c334:	260b      	movs	r6, #11
 801c336:	4630      	mov	r0, r6
 801c338:	b002      	add	sp, #8
 801c33a:	bd70      	pop	{r4, r5, r6, pc}
 801c33c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c340:	e7e1      	b.n	801c306 <rcl_timer_is_ready+0x3a>
 801c342:	bf00      	nop

0801c344 <rcl_timer_get_time_until_next_call>:
 801c344:	b570      	push	{r4, r5, r6, lr}
 801c346:	b082      	sub	sp, #8
 801c348:	b330      	cbz	r0, 801c398 <rcl_timer_get_time_until_next_call+0x54>
 801c34a:	6803      	ldr	r3, [r0, #0]
 801c34c:	4604      	mov	r4, r0
 801c34e:	b33b      	cbz	r3, 801c3a0 <rcl_timer_get_time_until_next_call+0x5c>
 801c350:	460d      	mov	r5, r1
 801c352:	b309      	cbz	r1, 801c398 <rcl_timer_get_time_until_next_call+0x54>
 801c354:	f3bf 8f5b 	dmb	ish
 801c358:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c35c:	f3bf 8f5b 	dmb	ish
 801c360:	b9ab      	cbnz	r3, 801c38e <rcl_timer_get_time_until_next_call+0x4a>
 801c362:	6803      	ldr	r3, [r0, #0]
 801c364:	4669      	mov	r1, sp
 801c366:	6818      	ldr	r0, [r3, #0]
 801c368:	f7ff fcf4 	bl	801bd54 <rcl_clock_get_now>
 801c36c:	4606      	mov	r6, r0
 801c36e:	b958      	cbnz	r0, 801c388 <rcl_timer_get_time_until_next_call+0x44>
 801c370:	6820      	ldr	r0, [r4, #0]
 801c372:	2105      	movs	r1, #5
 801c374:	3028      	adds	r0, #40	@ 0x28
 801c376:	f001 fbf3 	bl	801db60 <__atomic_load_8>
 801c37a:	9b00      	ldr	r3, [sp, #0]
 801c37c:	1ac0      	subs	r0, r0, r3
 801c37e:	9b01      	ldr	r3, [sp, #4]
 801c380:	eb61 0103 	sbc.w	r1, r1, r3
 801c384:	6028      	str	r0, [r5, #0]
 801c386:	6069      	str	r1, [r5, #4]
 801c388:	4630      	mov	r0, r6
 801c38a:	b002      	add	sp, #8
 801c38c:	bd70      	pop	{r4, r5, r6, pc}
 801c38e:	f240 3621 	movw	r6, #801	@ 0x321
 801c392:	4630      	mov	r0, r6
 801c394:	b002      	add	sp, #8
 801c396:	bd70      	pop	{r4, r5, r6, pc}
 801c398:	260b      	movs	r6, #11
 801c39a:	4630      	mov	r0, r6
 801c39c:	b002      	add	sp, #8
 801c39e:	bd70      	pop	{r4, r5, r6, pc}
 801c3a0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801c3a4:	e7f0      	b.n	801c388 <rcl_timer_get_time_until_next_call+0x44>
 801c3a6:	bf00      	nop

0801c3a8 <rcl_timer_get_guard_condition>:
 801c3a8:	b130      	cbz	r0, 801c3b8 <rcl_timer_get_guard_condition+0x10>
 801c3aa:	6800      	ldr	r0, [r0, #0]
 801c3ac:	b120      	cbz	r0, 801c3b8 <rcl_timer_get_guard_condition+0x10>
 801c3ae:	68c3      	ldr	r3, [r0, #12]
 801c3b0:	b10b      	cbz	r3, 801c3b6 <rcl_timer_get_guard_condition+0xe>
 801c3b2:	3008      	adds	r0, #8
 801c3b4:	4770      	bx	lr
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	4770      	bx	lr
 801c3ba:	bf00      	nop

0801c3bc <rcl_validate_enclave_name_with_size>:
 801c3bc:	2800      	cmp	r0, #0
 801c3be:	d049      	beq.n	801c454 <rcl_validate_enclave_name_with_size+0x98>
 801c3c0:	b570      	push	{r4, r5, r6, lr}
 801c3c2:	4615      	mov	r5, r2
 801c3c4:	b0c2      	sub	sp, #264	@ 0x108
 801c3c6:	b19a      	cbz	r2, 801c3f0 <rcl_validate_enclave_name_with_size+0x34>
 801c3c8:	461e      	mov	r6, r3
 801c3ca:	466a      	mov	r2, sp
 801c3cc:	ab01      	add	r3, sp, #4
 801c3ce:	460c      	mov	r4, r1
 801c3d0:	f002 f88e 	bl	801e4f0 <rmw_validate_namespace_with_size>
 801c3d4:	4684      	mov	ip, r0
 801c3d6:	b9b8      	cbnz	r0, 801c408 <rcl_validate_enclave_name_with_size+0x4c>
 801c3d8:	9900      	ldr	r1, [sp, #0]
 801c3da:	b171      	cbz	r1, 801c3fa <rcl_validate_enclave_name_with_size+0x3e>
 801c3dc:	2907      	cmp	r1, #7
 801c3de:	d019      	beq.n	801c414 <rcl_validate_enclave_name_with_size+0x58>
 801c3e0:	1e4b      	subs	r3, r1, #1
 801c3e2:	2b05      	cmp	r3, #5
 801c3e4:	d83a      	bhi.n	801c45c <rcl_validate_enclave_name_with_size+0xa0>
 801c3e6:	e8df f003 	tbb	[pc, r3]
 801c3ea:	2926      	.short	0x2926
 801c3ec:	1d322f2c 	.word	0x1d322f2c
 801c3f0:	f04f 0c0b 	mov.w	ip, #11
 801c3f4:	4660      	mov	r0, ip
 801c3f6:	b042      	add	sp, #264	@ 0x108
 801c3f8:	bd70      	pop	{r4, r5, r6, pc}
 801c3fa:	2907      	cmp	r1, #7
 801c3fc:	d00a      	beq.n	801c414 <rcl_validate_enclave_name_with_size+0x58>
 801c3fe:	2300      	movs	r3, #0
 801c400:	4660      	mov	r0, ip
 801c402:	602b      	str	r3, [r5, #0]
 801c404:	b042      	add	sp, #264	@ 0x108
 801c406:	bd70      	pop	{r4, r5, r6, pc}
 801c408:	f7fe fb6c 	bl	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>
 801c40c:	4684      	mov	ip, r0
 801c40e:	4660      	mov	r0, ip
 801c410:	b042      	add	sp, #264	@ 0x108
 801c412:	bd70      	pop	{r4, r5, r6, pc}
 801c414:	2cff      	cmp	r4, #255	@ 0xff
 801c416:	d9f2      	bls.n	801c3fe <rcl_validate_enclave_name_with_size+0x42>
 801c418:	6029      	str	r1, [r5, #0]
 801c41a:	2e00      	cmp	r6, #0
 801c41c:	d0ea      	beq.n	801c3f4 <rcl_validate_enclave_name_with_size+0x38>
 801c41e:	23fe      	movs	r3, #254	@ 0xfe
 801c420:	6033      	str	r3, [r6, #0]
 801c422:	e7e7      	b.n	801c3f4 <rcl_validate_enclave_name_with_size+0x38>
 801c424:	2306      	movs	r3, #6
 801c426:	602b      	str	r3, [r5, #0]
 801c428:	2e00      	cmp	r6, #0
 801c42a:	d0e3      	beq.n	801c3f4 <rcl_validate_enclave_name_with_size+0x38>
 801c42c:	9b01      	ldr	r3, [sp, #4]
 801c42e:	4660      	mov	r0, ip
 801c430:	6033      	str	r3, [r6, #0]
 801c432:	b042      	add	sp, #264	@ 0x108
 801c434:	bd70      	pop	{r4, r5, r6, pc}
 801c436:	2301      	movs	r3, #1
 801c438:	602b      	str	r3, [r5, #0]
 801c43a:	e7f5      	b.n	801c428 <rcl_validate_enclave_name_with_size+0x6c>
 801c43c:	2302      	movs	r3, #2
 801c43e:	602b      	str	r3, [r5, #0]
 801c440:	e7f2      	b.n	801c428 <rcl_validate_enclave_name_with_size+0x6c>
 801c442:	2303      	movs	r3, #3
 801c444:	602b      	str	r3, [r5, #0]
 801c446:	e7ef      	b.n	801c428 <rcl_validate_enclave_name_with_size+0x6c>
 801c448:	2304      	movs	r3, #4
 801c44a:	602b      	str	r3, [r5, #0]
 801c44c:	e7ec      	b.n	801c428 <rcl_validate_enclave_name_with_size+0x6c>
 801c44e:	2305      	movs	r3, #5
 801c450:	602b      	str	r3, [r5, #0]
 801c452:	e7e9      	b.n	801c428 <rcl_validate_enclave_name_with_size+0x6c>
 801c454:	f04f 0c0b 	mov.w	ip, #11
 801c458:	4660      	mov	r0, ip
 801c45a:	4770      	bx	lr
 801c45c:	460b      	mov	r3, r1
 801c45e:	4a04      	ldr	r2, [pc, #16]	@ (801c470 <rcl_validate_enclave_name_with_size+0xb4>)
 801c460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c464:	a802      	add	r0, sp, #8
 801c466:	f001 fd33 	bl	801ded0 <rcutils_snprintf>
 801c46a:	f04f 0c01 	mov.w	ip, #1
 801c46e:	e7c1      	b.n	801c3f4 <rcl_validate_enclave_name_with_size+0x38>
 801c470:	0802549c 	.word	0x0802549c

0801c474 <rcl_validate_enclave_name>:
 801c474:	b168      	cbz	r0, 801c492 <rcl_validate_enclave_name+0x1e>
 801c476:	b570      	push	{r4, r5, r6, lr}
 801c478:	460d      	mov	r5, r1
 801c47a:	4616      	mov	r6, r2
 801c47c:	4604      	mov	r4, r0
 801c47e:	f7e3 ff39 	bl	80002f4 <strlen>
 801c482:	4633      	mov	r3, r6
 801c484:	4601      	mov	r1, r0
 801c486:	462a      	mov	r2, r5
 801c488:	4620      	mov	r0, r4
 801c48a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c48e:	f7ff bf95 	b.w	801c3bc <rcl_validate_enclave_name_with_size>
 801c492:	200b      	movs	r0, #11
 801c494:	4770      	bx	lr
 801c496:	bf00      	nop

0801c498 <rcl_get_zero_initialized_wait_set>:
 801c498:	b510      	push	{r4, lr}
 801c49a:	4c08      	ldr	r4, [pc, #32]	@ (801c4bc <rcl_get_zero_initialized_wait_set+0x24>)
 801c49c:	4686      	mov	lr, r0
 801c49e:	4684      	mov	ip, r0
 801c4a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c4a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c4ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c4b2:	6823      	ldr	r3, [r4, #0]
 801c4b4:	4670      	mov	r0, lr
 801c4b6:	f8cc 3000 	str.w	r3, [ip]
 801c4ba:	bd10      	pop	{r4, pc}
 801c4bc:	080254fc 	.word	0x080254fc

0801c4c0 <rcl_wait_set_is_valid>:
 801c4c0:	b118      	cbz	r0, 801c4ca <rcl_wait_set_is_valid+0xa>
 801c4c2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801c4c4:	3800      	subs	r0, #0
 801c4c6:	bf18      	it	ne
 801c4c8:	2001      	movne	r0, #1
 801c4ca:	4770      	bx	lr

0801c4cc <rcl_wait_set_fini>:
 801c4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4d0:	b082      	sub	sp, #8
 801c4d2:	2800      	cmp	r0, #0
 801c4d4:	f000 8095 	beq.w	801c602 <rcl_wait_set_fini+0x136>
 801c4d8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801c4da:	4604      	mov	r4, r0
 801c4dc:	2e00      	cmp	r6, #0
 801c4de:	f000 808c 	beq.w	801c5fa <rcl_wait_set_fini+0x12e>
 801c4e2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801c4e4:	f003 faf6 	bl	801fad4 <rmw_destroy_wait_set>
 801c4e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c4ea:	1e06      	subs	r6, r0, #0
 801c4ec:	bf18      	it	ne
 801c4ee:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801c4f2:	2d00      	cmp	r5, #0
 801c4f4:	f000 8081 	beq.w	801c5fa <rcl_wait_set_fini+0x12e>
 801c4f8:	2700      	movs	r7, #0
 801c4fa:	6820      	ldr	r0, [r4, #0]
 801c4fc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c500:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c502:	6067      	str	r7, [r4, #4]
 801c504:	602f      	str	r7, [r5, #0]
 801c506:	b120      	cbz	r0, 801c512 <rcl_wait_set_fini+0x46>
 801c508:	9101      	str	r1, [sp, #4]
 801c50a:	47c0      	blx	r8
 801c50c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c50e:	9901      	ldr	r1, [sp, #4]
 801c510:	6027      	str	r7, [r4, #0]
 801c512:	68a8      	ldr	r0, [r5, #8]
 801c514:	b120      	cbz	r0, 801c520 <rcl_wait_set_fini+0x54>
 801c516:	47c0      	blx	r8
 801c518:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c51a:	2300      	movs	r3, #0
 801c51c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c520:	f04f 0800 	mov.w	r8, #0
 801c524:	68a0      	ldr	r0, [r4, #8]
 801c526:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c528:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c52a:	f8c4 800c 	str.w	r8, [r4, #12]
 801c52e:	f8c5 800c 	str.w	r8, [r5, #12]
 801c532:	b128      	cbz	r0, 801c540 <rcl_wait_set_fini+0x74>
 801c534:	47b8      	blx	r7
 801c536:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c538:	f8c4 8008 	str.w	r8, [r4, #8]
 801c53c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c53e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c540:	f04f 0800 	mov.w	r8, #0
 801c544:	6968      	ldr	r0, [r5, #20]
 801c546:	f8c5 8010 	str.w	r8, [r5, #16]
 801c54a:	b128      	cbz	r0, 801c558 <rcl_wait_set_fini+0x8c>
 801c54c:	47b8      	blx	r7
 801c54e:	f8c5 8014 	str.w	r8, [r5, #20]
 801c552:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c554:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c556:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c558:	f04f 0800 	mov.w	r8, #0
 801c55c:	6920      	ldr	r0, [r4, #16]
 801c55e:	f8c4 8014 	str.w	r8, [r4, #20]
 801c562:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801c566:	b128      	cbz	r0, 801c574 <rcl_wait_set_fini+0xa8>
 801c568:	47b8      	blx	r7
 801c56a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c56c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c570:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801c572:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c574:	f04f 0800 	mov.w	r8, #0
 801c578:	69a0      	ldr	r0, [r4, #24]
 801c57a:	f8c4 801c 	str.w	r8, [r4, #28]
 801c57e:	f8c5 8018 	str.w	r8, [r5, #24]
 801c582:	b128      	cbz	r0, 801c590 <rcl_wait_set_fini+0xc4>
 801c584:	9101      	str	r1, [sp, #4]
 801c586:	47b8      	blx	r7
 801c588:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c58a:	9901      	ldr	r1, [sp, #4]
 801c58c:	f8c4 8018 	str.w	r8, [r4, #24]
 801c590:	6a28      	ldr	r0, [r5, #32]
 801c592:	b120      	cbz	r0, 801c59e <rcl_wait_set_fini+0xd2>
 801c594:	47b8      	blx	r7
 801c596:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c598:	2300      	movs	r3, #0
 801c59a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c59e:	2700      	movs	r7, #0
 801c5a0:	6a20      	ldr	r0, [r4, #32]
 801c5a2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c5a6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5a8:	6267      	str	r7, [r4, #36]	@ 0x24
 801c5aa:	626f      	str	r7, [r5, #36]	@ 0x24
 801c5ac:	b120      	cbz	r0, 801c5b8 <rcl_wait_set_fini+0xec>
 801c5ae:	9101      	str	r1, [sp, #4]
 801c5b0:	47c0      	blx	r8
 801c5b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5b4:	9901      	ldr	r1, [sp, #4]
 801c5b6:	6227      	str	r7, [r4, #32]
 801c5b8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801c5ba:	b120      	cbz	r0, 801c5c6 <rcl_wait_set_fini+0xfa>
 801c5bc:	47c0      	blx	r8
 801c5be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5c0:	2300      	movs	r3, #0
 801c5c2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801c5c6:	2700      	movs	r7, #0
 801c5c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c5ca:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801c5ce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5d0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801c5d2:	632f      	str	r7, [r5, #48]	@ 0x30
 801c5d4:	b120      	cbz	r0, 801c5e0 <rcl_wait_set_fini+0x114>
 801c5d6:	9101      	str	r1, [sp, #4]
 801c5d8:	47c0      	blx	r8
 801c5da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5dc:	9901      	ldr	r1, [sp, #4]
 801c5de:	62a7      	str	r7, [r4, #40]	@ 0x28
 801c5e0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801c5e2:	b120      	cbz	r0, 801c5ee <rcl_wait_set_fini+0x122>
 801c5e4:	47c0      	blx	r8
 801c5e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801c5ee:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801c5f0:	4628      	mov	r0, r5
 801c5f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801c5f4:	4798      	blx	r3
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	6323      	str	r3, [r4, #48]	@ 0x30
 801c5fa:	4630      	mov	r0, r6
 801c5fc:	b002      	add	sp, #8
 801c5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c602:	260b      	movs	r6, #11
 801c604:	4630      	mov	r0, r6
 801c606:	b002      	add	sp, #8
 801c608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c60c <rcl_wait_set_add_subscription>:
 801c60c:	b318      	cbz	r0, 801c656 <rcl_wait_set_add_subscription+0x4a>
 801c60e:	b538      	push	{r3, r4, r5, lr}
 801c610:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c612:	4604      	mov	r4, r0
 801c614:	b30b      	cbz	r3, 801c65a <rcl_wait_set_add_subscription+0x4e>
 801c616:	b319      	cbz	r1, 801c660 <rcl_wait_set_add_subscription+0x54>
 801c618:	681d      	ldr	r5, [r3, #0]
 801c61a:	6840      	ldr	r0, [r0, #4]
 801c61c:	4285      	cmp	r5, r0
 801c61e:	d217      	bcs.n	801c650 <rcl_wait_set_add_subscription+0x44>
 801c620:	1c68      	adds	r0, r5, #1
 801c622:	6018      	str	r0, [r3, #0]
 801c624:	6823      	ldr	r3, [r4, #0]
 801c626:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c62a:	b102      	cbz	r2, 801c62e <rcl_wait_set_add_subscription+0x22>
 801c62c:	6015      	str	r5, [r2, #0]
 801c62e:	4608      	mov	r0, r1
 801c630:	f7ff fade 	bl	801bbf0 <rcl_subscription_get_rmw_handle>
 801c634:	b150      	cbz	r0, 801c64c <rcl_wait_set_add_subscription+0x40>
 801c636:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c638:	6842      	ldr	r2, [r0, #4]
 801c63a:	2000      	movs	r0, #0
 801c63c:	689b      	ldr	r3, [r3, #8]
 801c63e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c642:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c644:	6853      	ldr	r3, [r2, #4]
 801c646:	3301      	adds	r3, #1
 801c648:	6053      	str	r3, [r2, #4]
 801c64a:	bd38      	pop	{r3, r4, r5, pc}
 801c64c:	2001      	movs	r0, #1
 801c64e:	bd38      	pop	{r3, r4, r5, pc}
 801c650:	f240 3086 	movw	r0, #902	@ 0x386
 801c654:	bd38      	pop	{r3, r4, r5, pc}
 801c656:	200b      	movs	r0, #11
 801c658:	4770      	bx	lr
 801c65a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c65e:	bd38      	pop	{r3, r4, r5, pc}
 801c660:	200b      	movs	r0, #11
 801c662:	bd38      	pop	{r3, r4, r5, pc}

0801c664 <rcl_wait_set_clear>:
 801c664:	2800      	cmp	r0, #0
 801c666:	d074      	beq.n	801c752 <rcl_wait_set_clear+0xee>
 801c668:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801c66a:	b510      	push	{r4, lr}
 801c66c:	4604      	mov	r4, r0
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d071      	beq.n	801c756 <rcl_wait_set_clear+0xf2>
 801c672:	6800      	ldr	r0, [r0, #0]
 801c674:	b138      	cbz	r0, 801c686 <rcl_wait_set_clear+0x22>
 801c676:	6862      	ldr	r2, [r4, #4]
 801c678:	2100      	movs	r1, #0
 801c67a:	0092      	lsls	r2, r2, #2
 801c67c:	f005 fe28 	bl	80222d0 <memset>
 801c680:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c682:	2200      	movs	r2, #0
 801c684:	601a      	str	r2, [r3, #0]
 801c686:	68a0      	ldr	r0, [r4, #8]
 801c688:	b138      	cbz	r0, 801c69a <rcl_wait_set_clear+0x36>
 801c68a:	68e2      	ldr	r2, [r4, #12]
 801c68c:	2100      	movs	r1, #0
 801c68e:	0092      	lsls	r2, r2, #2
 801c690:	f005 fe1e 	bl	80222d0 <memset>
 801c694:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c696:	2200      	movs	r2, #0
 801c698:	60da      	str	r2, [r3, #12]
 801c69a:	69a0      	ldr	r0, [r4, #24]
 801c69c:	b138      	cbz	r0, 801c6ae <rcl_wait_set_clear+0x4a>
 801c69e:	69e2      	ldr	r2, [r4, #28]
 801c6a0:	2100      	movs	r1, #0
 801c6a2:	0092      	lsls	r2, r2, #2
 801c6a4:	f005 fe14 	bl	80222d0 <memset>
 801c6a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	619a      	str	r2, [r3, #24]
 801c6ae:	6a20      	ldr	r0, [r4, #32]
 801c6b0:	b138      	cbz	r0, 801c6c2 <rcl_wait_set_clear+0x5e>
 801c6b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801c6b4:	2100      	movs	r1, #0
 801c6b6:	0092      	lsls	r2, r2, #2
 801c6b8:	f005 fe0a 	bl	80222d0 <memset>
 801c6bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6be:	2200      	movs	r2, #0
 801c6c0:	625a      	str	r2, [r3, #36]	@ 0x24
 801c6c2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801c6c4:	b138      	cbz	r0, 801c6d6 <rcl_wait_set_clear+0x72>
 801c6c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c6c8:	2100      	movs	r1, #0
 801c6ca:	0092      	lsls	r2, r2, #2
 801c6cc:	f005 fe00 	bl	80222d0 <memset>
 801c6d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6d2:	2200      	movs	r2, #0
 801c6d4:	631a      	str	r2, [r3, #48]	@ 0x30
 801c6d6:	6920      	ldr	r0, [r4, #16]
 801c6d8:	b138      	cbz	r0, 801c6ea <rcl_wait_set_clear+0x86>
 801c6da:	6962      	ldr	r2, [r4, #20]
 801c6dc:	2100      	movs	r1, #0
 801c6de:	0092      	lsls	r2, r2, #2
 801c6e0:	f005 fdf6 	bl	80222d0 <memset>
 801c6e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6e6:	2200      	movs	r2, #0
 801c6e8:	641a      	str	r2, [r3, #64]	@ 0x40
 801c6ea:	6898      	ldr	r0, [r3, #8]
 801c6ec:	b138      	cbz	r0, 801c6fe <rcl_wait_set_clear+0x9a>
 801c6ee:	685a      	ldr	r2, [r3, #4]
 801c6f0:	2100      	movs	r1, #0
 801c6f2:	0092      	lsls	r2, r2, #2
 801c6f4:	f005 fdec 	bl	80222d0 <memset>
 801c6f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6fa:	2200      	movs	r2, #0
 801c6fc:	605a      	str	r2, [r3, #4]
 801c6fe:	6958      	ldr	r0, [r3, #20]
 801c700:	b138      	cbz	r0, 801c712 <rcl_wait_set_clear+0xae>
 801c702:	691a      	ldr	r2, [r3, #16]
 801c704:	2100      	movs	r1, #0
 801c706:	0092      	lsls	r2, r2, #2
 801c708:	f005 fde2 	bl	80222d0 <memset>
 801c70c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c70e:	2200      	movs	r2, #0
 801c710:	611a      	str	r2, [r3, #16]
 801c712:	6a18      	ldr	r0, [r3, #32]
 801c714:	b138      	cbz	r0, 801c726 <rcl_wait_set_clear+0xc2>
 801c716:	69da      	ldr	r2, [r3, #28]
 801c718:	2100      	movs	r1, #0
 801c71a:	0092      	lsls	r2, r2, #2
 801c71c:	f005 fdd8 	bl	80222d0 <memset>
 801c720:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c722:	2200      	movs	r2, #0
 801c724:	61da      	str	r2, [r3, #28]
 801c726:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801c728:	b138      	cbz	r0, 801c73a <rcl_wait_set_clear+0xd6>
 801c72a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c72c:	2100      	movs	r1, #0
 801c72e:	0092      	lsls	r2, r2, #2
 801c730:	f005 fdce 	bl	80222d0 <memset>
 801c734:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c736:	2200      	movs	r2, #0
 801c738:	629a      	str	r2, [r3, #40]	@ 0x28
 801c73a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801c73c:	b140      	cbz	r0, 801c750 <rcl_wait_set_clear+0xec>
 801c73e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c740:	2100      	movs	r1, #0
 801c742:	0092      	lsls	r2, r2, #2
 801c744:	f005 fdc4 	bl	80222d0 <memset>
 801c748:	2300      	movs	r3, #0
 801c74a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801c74c:	4618      	mov	r0, r3
 801c74e:	6353      	str	r3, [r2, #52]	@ 0x34
 801c750:	bd10      	pop	{r4, pc}
 801c752:	200b      	movs	r0, #11
 801c754:	4770      	bx	lr
 801c756:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801c75a:	bd10      	pop	{r4, pc}

0801c75c <rcl_wait_set_resize>:
 801c75c:	2800      	cmp	r0, #0
 801c75e:	f000 8180 	beq.w	801ca62 <rcl_wait_set_resize+0x306>
 801c762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c766:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801c768:	b083      	sub	sp, #12
 801c76a:	4605      	mov	r5, r0
 801c76c:	2c00      	cmp	r4, #0
 801c76e:	f000 817a 	beq.w	801ca66 <rcl_wait_set_resize+0x30a>
 801c772:	f04f 0900 	mov.w	r9, #0
 801c776:	461f      	mov	r7, r3
 801c778:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801c77c:	4688      	mov	r8, r1
 801c77e:	4616      	mov	r6, r2
 801c780:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801c784:	f8c0 9004 	str.w	r9, [r0, #4]
 801c788:	f8c4 9000 	str.w	r9, [r4]
 801c78c:	2900      	cmp	r1, #0
 801c78e:	f000 80bf 	beq.w	801c910 <rcl_wait_set_resize+0x1b4>
 801c792:	008c      	lsls	r4, r1, #2
 801c794:	4652      	mov	r2, sl
 801c796:	6800      	ldr	r0, [r0, #0]
 801c798:	4621      	mov	r1, r4
 801c79a:	9301      	str	r3, [sp, #4]
 801c79c:	4798      	blx	r3
 801c79e:	9b01      	ldr	r3, [sp, #4]
 801c7a0:	6028      	str	r0, [r5, #0]
 801c7a2:	2800      	cmp	r0, #0
 801c7a4:	f000 80f6 	beq.w	801c994 <rcl_wait_set_resize+0x238>
 801c7a8:	4622      	mov	r2, r4
 801c7aa:	4649      	mov	r1, r9
 801c7ac:	9301      	str	r3, [sp, #4]
 801c7ae:	f005 fd8f 	bl	80222d0 <memset>
 801c7b2:	f8c5 8004 	str.w	r8, [r5, #4]
 801c7b6:	4652      	mov	r2, sl
 801c7b8:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801c7bc:	4621      	mov	r1, r4
 801c7be:	9b01      	ldr	r3, [sp, #4]
 801c7c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c7c4:	f8c8 9004 	str.w	r9, [r8, #4]
 801c7c8:	4798      	blx	r3
 801c7ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c7cc:	f8c8 0008 	str.w	r0, [r8, #8]
 801c7d0:	689b      	ldr	r3, [r3, #8]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	f000 814a 	beq.w	801ca6c <rcl_wait_set_resize+0x310>
 801c7d8:	4622      	mov	r2, r4
 801c7da:	4649      	mov	r1, r9
 801c7dc:	4618      	mov	r0, r3
 801c7de:	f005 fd77 	bl	80222d0 <memset>
 801c7e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c7e4:	f04f 0800 	mov.w	r8, #0
 801c7e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c7ec:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801c7f0:	f8c5 800c 	str.w	r8, [r5, #12]
 801c7f4:	f8c4 800c 	str.w	r8, [r4, #12]
 801c7f8:	2e00      	cmp	r6, #0
 801c7fa:	f040 809b 	bne.w	801c934 <rcl_wait_set_resize+0x1d8>
 801c7fe:	68a8      	ldr	r0, [r5, #8]
 801c800:	b128      	cbz	r0, 801c80e <rcl_wait_set_resize+0xb2>
 801c802:	4649      	mov	r1, r9
 801c804:	4790      	blx	r2
 801c806:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c808:	60ae      	str	r6, [r5, #8]
 801c80a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c80e:	f04f 0800 	mov.w	r8, #0
 801c812:	19f6      	adds	r6, r6, r7
 801c814:	f8c4 8010 	str.w	r8, [r4, #16]
 801c818:	f040 80a2 	bne.w	801c960 <rcl_wait_set_resize+0x204>
 801c81c:	6960      	ldr	r0, [r4, #20]
 801c81e:	b130      	cbz	r0, 801c82e <rcl_wait_set_resize+0xd2>
 801c820:	4649      	mov	r1, r9
 801c822:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801c824:	4798      	blx	r3
 801c826:	6166      	str	r6, [r4, #20]
 801c828:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c82a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c82e:	2600      	movs	r6, #0
 801c830:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c834:	616e      	str	r6, [r5, #20]
 801c836:	6426      	str	r6, [r4, #64]	@ 0x40
 801c838:	2f00      	cmp	r7, #0
 801c83a:	f040 80af 	bne.w	801c99c <rcl_wait_set_resize+0x240>
 801c83e:	6928      	ldr	r0, [r5, #16]
 801c840:	b138      	cbz	r0, 801c852 <rcl_wait_set_resize+0xf6>
 801c842:	4649      	mov	r1, r9
 801c844:	47d0      	blx	sl
 801c846:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c848:	612f      	str	r7, [r5, #16]
 801c84a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c84e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c852:	2600      	movs	r6, #0
 801c854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c856:	61ee      	str	r6, [r5, #28]
 801c858:	61a6      	str	r6, [r4, #24]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	f040 8093 	bne.w	801c986 <rcl_wait_set_resize+0x22a>
 801c860:	69a8      	ldr	r0, [r5, #24]
 801c862:	b120      	cbz	r0, 801c86e <rcl_wait_set_resize+0x112>
 801c864:	4649      	mov	r1, r9
 801c866:	47d0      	blx	sl
 801c868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c86a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c86c:	61ab      	str	r3, [r5, #24]
 801c86e:	6a20      	ldr	r0, [r4, #32]
 801c870:	b128      	cbz	r0, 801c87e <rcl_wait_set_resize+0x122>
 801c872:	4649      	mov	r1, r9
 801c874:	47d0      	blx	sl
 801c876:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c878:	2300      	movs	r3, #0
 801c87a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c87e:	2600      	movs	r6, #0
 801c880:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c882:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c884:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c888:	626e      	str	r6, [r5, #36]	@ 0x24
 801c88a:	6266      	str	r6, [r4, #36]	@ 0x24
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	f000 8098 	beq.w	801c9c2 <rcl_wait_set_resize+0x266>
 801c892:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c896:	463a      	mov	r2, r7
 801c898:	6a28      	ldr	r0, [r5, #32]
 801c89a:	4651      	mov	r1, sl
 801c89c:	47c8      	blx	r9
 801c89e:	6228      	str	r0, [r5, #32]
 801c8a0:	2800      	cmp	r0, #0
 801c8a2:	d077      	beq.n	801c994 <rcl_wait_set_resize+0x238>
 801c8a4:	4652      	mov	r2, sl
 801c8a6:	4631      	mov	r1, r6
 801c8a8:	f005 fd12 	bl	80222d0 <memset>
 801c8ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8b0:	463a      	mov	r2, r7
 801c8b2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c8b4:	4651      	mov	r1, sl
 801c8b6:	626b      	str	r3, [r5, #36]	@ 0x24
 801c8b8:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c8ba:	47c8      	blx	r9
 801c8bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c8be:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801c8c0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801c8c2:	2c00      	cmp	r4, #0
 801c8c4:	f000 80f2 	beq.w	801caac <rcl_wait_set_resize+0x350>
 801c8c8:	4620      	mov	r0, r4
 801c8ca:	4652      	mov	r2, sl
 801c8cc:	4631      	mov	r1, r6
 801c8ce:	f005 fcff 	bl	80222d0 <memset>
 801c8d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8d4:	2600      	movs	r6, #0
 801c8d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c8d8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801c8da:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801c8de:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801c8e0:	6326      	str	r6, [r4, #48]	@ 0x30
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	f040 8097 	bne.w	801ca16 <rcl_wait_set_resize+0x2ba>
 801c8e8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801c8ea:	b120      	cbz	r0, 801c8f6 <rcl_wait_set_resize+0x19a>
 801c8ec:	4639      	mov	r1, r7
 801c8ee:	47c0      	blx	r8
 801c8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c8f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c8f4:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c8f6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801c8f8:	2800      	cmp	r0, #0
 801c8fa:	d04c      	beq.n	801c996 <rcl_wait_set_resize+0x23a>
 801c8fc:	4639      	mov	r1, r7
 801c8fe:	47c0      	blx	r8
 801c900:	2300      	movs	r3, #0
 801c902:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801c904:	4618      	mov	r0, r3
 801c906:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 801c90a:	b003      	add	sp, #12
 801c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c910:	6800      	ldr	r0, [r0, #0]
 801c912:	b120      	cbz	r0, 801c91e <rcl_wait_set_resize+0x1c2>
 801c914:	4651      	mov	r1, sl
 801c916:	47d8      	blx	fp
 801c918:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c91a:	f8c5 8000 	str.w	r8, [r5]
 801c91e:	68a0      	ldr	r0, [r4, #8]
 801c920:	2800      	cmp	r0, #0
 801c922:	f43f af5f 	beq.w	801c7e4 <rcl_wait_set_resize+0x88>
 801c926:	4651      	mov	r1, sl
 801c928:	47d8      	blx	fp
 801c92a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c92c:	2300      	movs	r3, #0
 801c92e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c932:	e757      	b.n	801c7e4 <rcl_wait_set_resize+0x88>
 801c934:	00b4      	lsls	r4, r6, #2
 801c936:	464a      	mov	r2, r9
 801c938:	68a8      	ldr	r0, [r5, #8]
 801c93a:	4621      	mov	r1, r4
 801c93c:	4798      	blx	r3
 801c93e:	60a8      	str	r0, [r5, #8]
 801c940:	b340      	cbz	r0, 801c994 <rcl_wait_set_resize+0x238>
 801c942:	4622      	mov	r2, r4
 801c944:	4641      	mov	r1, r8
 801c946:	f005 fcc3 	bl	80222d0 <memset>
 801c94a:	f04f 0800 	mov.w	r8, #0
 801c94e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c950:	60ee      	str	r6, [r5, #12]
 801c952:	19f6      	adds	r6, r6, r7
 801c954:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c958:	f8c4 8010 	str.w	r8, [r4, #16]
 801c95c:	f43f af5e 	beq.w	801c81c <rcl_wait_set_resize+0xc0>
 801c960:	00b6      	lsls	r6, r6, #2
 801c962:	464a      	mov	r2, r9
 801c964:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801c966:	6960      	ldr	r0, [r4, #20]
 801c968:	4631      	mov	r1, r6
 801c96a:	4798      	blx	r3
 801c96c:	4681      	mov	r9, r0
 801c96e:	6160      	str	r0, [r4, #20]
 801c970:	2800      	cmp	r0, #0
 801c972:	f000 8084 	beq.w	801ca7e <rcl_wait_set_resize+0x322>
 801c976:	4632      	mov	r2, r6
 801c978:	4641      	mov	r1, r8
 801c97a:	f005 fca9 	bl	80222d0 <memset>
 801c97e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c980:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c984:	e753      	b.n	801c82e <rcl_wait_set_resize+0xd2>
 801c986:	009c      	lsls	r4, r3, #2
 801c988:	464a      	mov	r2, r9
 801c98a:	69a8      	ldr	r0, [r5, #24]
 801c98c:	4621      	mov	r1, r4
 801c98e:	47c0      	blx	r8
 801c990:	61a8      	str	r0, [r5, #24]
 801c992:	bb40      	cbnz	r0, 801c9e6 <rcl_wait_set_resize+0x28a>
 801c994:	200a      	movs	r0, #10
 801c996:	b003      	add	sp, #12
 801c998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c99c:	00bc      	lsls	r4, r7, #2
 801c99e:	464a      	mov	r2, r9
 801c9a0:	6928      	ldr	r0, [r5, #16]
 801c9a2:	4621      	mov	r1, r4
 801c9a4:	47c0      	blx	r8
 801c9a6:	6128      	str	r0, [r5, #16]
 801c9a8:	2800      	cmp	r0, #0
 801c9aa:	d0f3      	beq.n	801c994 <rcl_wait_set_resize+0x238>
 801c9ac:	4622      	mov	r2, r4
 801c9ae:	4631      	mov	r1, r6
 801c9b0:	f005 fc8e 	bl	80222d0 <memset>
 801c9b4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9b6:	616f      	str	r7, [r5, #20]
 801c9b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801c9bc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801c9c0:	e747      	b.n	801c852 <rcl_wait_set_resize+0xf6>
 801c9c2:	6a28      	ldr	r0, [r5, #32]
 801c9c4:	b120      	cbz	r0, 801c9d0 <rcl_wait_set_resize+0x274>
 801c9c6:	4639      	mov	r1, r7
 801c9c8:	47c0      	blx	r8
 801c9ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9ce:	622b      	str	r3, [r5, #32]
 801c9d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801c9d2:	2800      	cmp	r0, #0
 801c9d4:	f43f af7e 	beq.w	801c8d4 <rcl_wait_set_resize+0x178>
 801c9d8:	4639      	mov	r1, r7
 801c9da:	47c0      	blx	r8
 801c9dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801c9de:	2300      	movs	r3, #0
 801c9e0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801c9e4:	e776      	b.n	801c8d4 <rcl_wait_set_resize+0x178>
 801c9e6:	4622      	mov	r2, r4
 801c9e8:	4631      	mov	r1, r6
 801c9ea:	f005 fc71 	bl	80222d0 <memset>
 801c9ee:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801c9f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c9f2:	464a      	mov	r2, r9
 801c9f4:	6a38      	ldr	r0, [r7, #32]
 801c9f6:	4621      	mov	r1, r4
 801c9f8:	61eb      	str	r3, [r5, #28]
 801c9fa:	61fe      	str	r6, [r7, #28]
 801c9fc:	47c0      	blx	r8
 801c9fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca00:	6238      	str	r0, [r7, #32]
 801ca02:	6a1f      	ldr	r7, [r3, #32]
 801ca04:	2f00      	cmp	r7, #0
 801ca06:	d04a      	beq.n	801ca9e <rcl_wait_set_resize+0x342>
 801ca08:	4622      	mov	r2, r4
 801ca0a:	4631      	mov	r1, r6
 801ca0c:	4638      	mov	r0, r7
 801ca0e:	f005 fc5f 	bl	80222d0 <memset>
 801ca12:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801ca14:	e733      	b.n	801c87e <rcl_wait_set_resize+0x122>
 801ca16:	009c      	lsls	r4, r3, #2
 801ca18:	463a      	mov	r2, r7
 801ca1a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801ca1c:	4621      	mov	r1, r4
 801ca1e:	47c8      	blx	r9
 801ca20:	62a8      	str	r0, [r5, #40]	@ 0x28
 801ca22:	2800      	cmp	r0, #0
 801ca24:	d0b6      	beq.n	801c994 <rcl_wait_set_resize+0x238>
 801ca26:	4622      	mov	r2, r4
 801ca28:	4631      	mov	r1, r6
 801ca2a:	f005 fc51 	bl	80222d0 <memset>
 801ca2e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801ca32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca34:	463a      	mov	r2, r7
 801ca36:	4621      	mov	r1, r4
 801ca38:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801ca3c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801ca3e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801ca42:	47c8      	blx	r9
 801ca44:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca46:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801ca4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d034      	beq.n	801caba <rcl_wait_set_resize+0x35e>
 801ca50:	4622      	mov	r2, r4
 801ca52:	4631      	mov	r1, r6
 801ca54:	4618      	mov	r0, r3
 801ca56:	f005 fc3b 	bl	80222d0 <memset>
 801ca5a:	4630      	mov	r0, r6
 801ca5c:	b003      	add	sp, #12
 801ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca62:	200b      	movs	r0, #11
 801ca64:	4770      	bx	lr
 801ca66:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ca6a:	e794      	b.n	801c996 <rcl_wait_set_resize+0x23a>
 801ca6c:	6828      	ldr	r0, [r5, #0]
 801ca6e:	4651      	mov	r1, sl
 801ca70:	9301      	str	r3, [sp, #4]
 801ca72:	47d8      	blx	fp
 801ca74:	9b01      	ldr	r3, [sp, #4]
 801ca76:	200a      	movs	r0, #10
 801ca78:	e9c5 3300 	strd	r3, r3, [r5]
 801ca7c:	e78b      	b.n	801c996 <rcl_wait_set_resize+0x23a>
 801ca7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca80:	68a8      	ldr	r0, [r5, #8]
 801ca82:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801ca84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ca86:	4798      	blx	r3
 801ca88:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ca8a:	6928      	ldr	r0, [r5, #16]
 801ca8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ca8e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801ca90:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801ca94:	4790      	blx	r2
 801ca96:	200a      	movs	r0, #10
 801ca98:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801ca9c:	e77b      	b.n	801c996 <rcl_wait_set_resize+0x23a>
 801ca9e:	69a8      	ldr	r0, [r5, #24]
 801caa0:	4649      	mov	r1, r9
 801caa2:	47d0      	blx	sl
 801caa4:	200a      	movs	r0, #10
 801caa6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801caaa:	e774      	b.n	801c996 <rcl_wait_set_resize+0x23a>
 801caac:	6a28      	ldr	r0, [r5, #32]
 801caae:	4639      	mov	r1, r7
 801cab0:	47c0      	blx	r8
 801cab2:	200a      	movs	r0, #10
 801cab4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801cab8:	e76d      	b.n	801c996 <rcl_wait_set_resize+0x23a>
 801caba:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801cabc:	4639      	mov	r1, r7
 801cabe:	9301      	str	r3, [sp, #4]
 801cac0:	47c0      	blx	r8
 801cac2:	9b01      	ldr	r3, [sp, #4]
 801cac4:	200a      	movs	r0, #10
 801cac6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801caca:	e764      	b.n	801c996 <rcl_wait_set_resize+0x23a>

0801cacc <rcl_wait_set_init>:
 801cacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cad0:	b085      	sub	sp, #20
 801cad2:	4605      	mov	r5, r0
 801cad4:	460e      	mov	r6, r1
 801cad6:	4617      	mov	r7, r2
 801cad8:	a812      	add	r0, sp, #72	@ 0x48
 801cada:	4698      	mov	r8, r3
 801cadc:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 801cae0:	f7f8 fcf2 	bl	80154c8 <rcutils_allocator_is_valid>
 801cae4:	2d00      	cmp	r5, #0
 801cae6:	d072      	beq.n	801cbce <rcl_wait_set_init+0x102>
 801cae8:	f080 0001 	eor.w	r0, r0, #1
 801caec:	b2c0      	uxtb	r0, r0
 801caee:	2800      	cmp	r0, #0
 801caf0:	d16d      	bne.n	801cbce <rcl_wait_set_init+0x102>
 801caf2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801caf6:	f1ba 0f00 	cmp.w	sl, #0
 801cafa:	d004      	beq.n	801cb06 <rcl_wait_set_init+0x3a>
 801cafc:	2464      	movs	r4, #100	@ 0x64
 801cafe:	4620      	mov	r0, r4
 801cb00:	b005      	add	sp, #20
 801cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb06:	f1b9 0f00 	cmp.w	r9, #0
 801cb0a:	d060      	beq.n	801cbce <rcl_wait_set_init+0x102>
 801cb0c:	4648      	mov	r0, r9
 801cb0e:	f7fe f807 	bl	801ab20 <rcl_context_is_valid>
 801cb12:	2800      	cmp	r0, #0
 801cb14:	d068      	beq.n	801cbe8 <rcl_wait_set_init+0x11c>
 801cb16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cb18:	205c      	movs	r0, #92	@ 0x5c
 801cb1a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801cb1c:	4798      	blx	r3
 801cb1e:	6328      	str	r0, [r5, #48]	@ 0x30
 801cb20:	2800      	cmp	r0, #0
 801cb22:	d063      	beq.n	801cbec <rcl_wait_set_init+0x120>
 801cb24:	225c      	movs	r2, #92	@ 0x5c
 801cb26:	4651      	mov	r1, sl
 801cb28:	f005 fbd2 	bl	80222d0 <memset>
 801cb2c:	ac12      	add	r4, sp, #72	@ 0x48
 801cb2e:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801cb32:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801cb36:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 801cb3a:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 801cb3e:	eb03 0e02 	add.w	lr, r3, r2
 801cb42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb44:	f8d9 9000 	ldr.w	r9, [r9]
 801cb48:	449e      	add	lr, r3
 801cb4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cb4c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801cb50:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801cb54:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801cb58:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 801cb5c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 801cb60:	44be      	add	lr, r7
 801cb62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb66:	6823      	ldr	r3, [r4, #0]
 801cb68:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801cb6c:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 801cb70:	f8cc 3000 	str.w	r3, [ip]
 801cb74:	f002 ffa4 	bl	801fac0 <rmw_create_wait_set>
 801cb78:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cb7a:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 801cb7e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cb80:	b350      	cbz	r0, 801cbd8 <rcl_wait_set_init+0x10c>
 801cb82:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cb84:	4643      	mov	r3, r8
 801cb86:	463a      	mov	r2, r7
 801cb88:	4631      	mov	r1, r6
 801cb8a:	9402      	str	r4, [sp, #8]
 801cb8c:	4628      	mov	r0, r5
 801cb8e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801cb90:	9401      	str	r4, [sp, #4]
 801cb92:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801cb94:	9400      	str	r4, [sp, #0]
 801cb96:	f7ff fde1 	bl	801c75c <rcl_wait_set_resize>
 801cb9a:	4604      	mov	r4, r0
 801cb9c:	2800      	cmp	r0, #0
 801cb9e:	d0ae      	beq.n	801cafe <rcl_wait_set_init+0x32>
 801cba0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cba2:	bb2b      	cbnz	r3, 801cbf0 <rcl_wait_set_init+0x124>
 801cba4:	2600      	movs	r6, #0
 801cba6:	4628      	mov	r0, r5
 801cba8:	4633      	mov	r3, r6
 801cbaa:	4632      	mov	r2, r6
 801cbac:	4631      	mov	r1, r6
 801cbae:	9600      	str	r6, [sp, #0]
 801cbb0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801cbb4:	f7ff fdd2 	bl	801c75c <rcl_wait_set_resize>
 801cbb8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801cbba:	2800      	cmp	r0, #0
 801cbbc:	d09f      	beq.n	801cafe <rcl_wait_set_init+0x32>
 801cbbe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801cbc0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801cbc2:	4798      	blx	r3
 801cbc4:	4620      	mov	r0, r4
 801cbc6:	632e      	str	r6, [r5, #48]	@ 0x30
 801cbc8:	b005      	add	sp, #20
 801cbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbce:	240b      	movs	r4, #11
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	b005      	add	sp, #20
 801cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbd8:	2401      	movs	r4, #1
 801cbda:	f002 ff7b 	bl	801fad4 <rmw_destroy_wait_set>
 801cbde:	2800      	cmp	r0, #0
 801cbe0:	bf18      	it	ne
 801cbe2:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801cbe6:	e7dd      	b.n	801cba4 <rcl_wait_set_init+0xd8>
 801cbe8:	2465      	movs	r4, #101	@ 0x65
 801cbea:	e788      	b.n	801cafe <rcl_wait_set_init+0x32>
 801cbec:	240a      	movs	r4, #10
 801cbee:	e786      	b.n	801cafe <rcl_wait_set_init+0x32>
 801cbf0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801cbf2:	e7f2      	b.n	801cbda <rcl_wait_set_init+0x10e>

0801cbf4 <rcl_wait_set_add_guard_condition>:
 801cbf4:	b318      	cbz	r0, 801cc3e <rcl_wait_set_add_guard_condition+0x4a>
 801cbf6:	b538      	push	{r3, r4, r5, lr}
 801cbf8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cbfa:	4604      	mov	r4, r0
 801cbfc:	b30b      	cbz	r3, 801cc42 <rcl_wait_set_add_guard_condition+0x4e>
 801cbfe:	b319      	cbz	r1, 801cc48 <rcl_wait_set_add_guard_condition+0x54>
 801cc00:	68dd      	ldr	r5, [r3, #12]
 801cc02:	68c0      	ldr	r0, [r0, #12]
 801cc04:	4285      	cmp	r5, r0
 801cc06:	d217      	bcs.n	801cc38 <rcl_wait_set_add_guard_condition+0x44>
 801cc08:	1c68      	adds	r0, r5, #1
 801cc0a:	60d8      	str	r0, [r3, #12]
 801cc0c:	68a3      	ldr	r3, [r4, #8]
 801cc0e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cc12:	b102      	cbz	r2, 801cc16 <rcl_wait_set_add_guard_condition+0x22>
 801cc14:	6015      	str	r5, [r2, #0]
 801cc16:	4608      	mov	r0, r1
 801cc18:	f004 fc02 	bl	8021420 <rcl_guard_condition_get_rmw_handle>
 801cc1c:	b150      	cbz	r0, 801cc34 <rcl_wait_set_add_guard_condition+0x40>
 801cc1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc20:	6842      	ldr	r2, [r0, #4]
 801cc22:	2000      	movs	r0, #0
 801cc24:	695b      	ldr	r3, [r3, #20]
 801cc26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc2a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cc2c:	6913      	ldr	r3, [r2, #16]
 801cc2e:	3301      	adds	r3, #1
 801cc30:	6113      	str	r3, [r2, #16]
 801cc32:	bd38      	pop	{r3, r4, r5, pc}
 801cc34:	2001      	movs	r0, #1
 801cc36:	bd38      	pop	{r3, r4, r5, pc}
 801cc38:	f240 3086 	movw	r0, #902	@ 0x386
 801cc3c:	bd38      	pop	{r3, r4, r5, pc}
 801cc3e:	200b      	movs	r0, #11
 801cc40:	4770      	bx	lr
 801cc42:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cc46:	bd38      	pop	{r3, r4, r5, pc}
 801cc48:	200b      	movs	r0, #11
 801cc4a:	bd38      	pop	{r3, r4, r5, pc}

0801cc4c <rcl_wait_set_add_timer>:
 801cc4c:	b328      	cbz	r0, 801cc9a <rcl_wait_set_add_timer+0x4e>
 801cc4e:	b538      	push	{r3, r4, r5, lr}
 801cc50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cc52:	4604      	mov	r4, r0
 801cc54:	b31b      	cbz	r3, 801cc9e <rcl_wait_set_add_timer+0x52>
 801cc56:	b329      	cbz	r1, 801cca4 <rcl_wait_set_add_timer+0x58>
 801cc58:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801cc5a:	6965      	ldr	r5, [r4, #20]
 801cc5c:	42a8      	cmp	r0, r5
 801cc5e:	d219      	bcs.n	801cc94 <rcl_wait_set_add_timer+0x48>
 801cc60:	1c45      	adds	r5, r0, #1
 801cc62:	641d      	str	r5, [r3, #64]	@ 0x40
 801cc64:	6923      	ldr	r3, [r4, #16]
 801cc66:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cc6a:	b102      	cbz	r2, 801cc6e <rcl_wait_set_add_timer+0x22>
 801cc6c:	6010      	str	r0, [r2, #0]
 801cc6e:	4608      	mov	r0, r1
 801cc70:	f7ff fb9a 	bl	801c3a8 <rcl_timer_get_guard_condition>
 801cc74:	b168      	cbz	r0, 801cc92 <rcl_wait_set_add_timer+0x46>
 801cc76:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cc78:	68e3      	ldr	r3, [r4, #12]
 801cc7a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801cc7c:	3b01      	subs	r3, #1
 801cc7e:	441d      	add	r5, r3
 801cc80:	f004 fbce 	bl	8021420 <rcl_guard_condition_get_rmw_handle>
 801cc84:	b180      	cbz	r0, 801cca8 <rcl_wait_set_add_timer+0x5c>
 801cc86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cc88:	6842      	ldr	r2, [r0, #4]
 801cc8a:	2000      	movs	r0, #0
 801cc8c:	695b      	ldr	r3, [r3, #20]
 801cc8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc92:	bd38      	pop	{r3, r4, r5, pc}
 801cc94:	f240 3086 	movw	r0, #902	@ 0x386
 801cc98:	bd38      	pop	{r3, r4, r5, pc}
 801cc9a:	200b      	movs	r0, #11
 801cc9c:	4770      	bx	lr
 801cc9e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cca2:	bd38      	pop	{r3, r4, r5, pc}
 801cca4:	200b      	movs	r0, #11
 801cca6:	bd38      	pop	{r3, r4, r5, pc}
 801cca8:	2001      	movs	r0, #1
 801ccaa:	bd38      	pop	{r3, r4, r5, pc}

0801ccac <rcl_wait_set_add_client>:
 801ccac:	b318      	cbz	r0, 801ccf6 <rcl_wait_set_add_client+0x4a>
 801ccae:	b538      	push	{r3, r4, r5, lr}
 801ccb0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ccb2:	4604      	mov	r4, r0
 801ccb4:	b30b      	cbz	r3, 801ccfa <rcl_wait_set_add_client+0x4e>
 801ccb6:	b319      	cbz	r1, 801cd00 <rcl_wait_set_add_client+0x54>
 801ccb8:	699d      	ldr	r5, [r3, #24]
 801ccba:	69c0      	ldr	r0, [r0, #28]
 801ccbc:	4285      	cmp	r5, r0
 801ccbe:	d217      	bcs.n	801ccf0 <rcl_wait_set_add_client+0x44>
 801ccc0:	1c68      	adds	r0, r5, #1
 801ccc2:	6198      	str	r0, [r3, #24]
 801ccc4:	69a3      	ldr	r3, [r4, #24]
 801ccc6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801ccca:	b102      	cbz	r2, 801ccce <rcl_wait_set_add_client+0x22>
 801cccc:	6015      	str	r5, [r2, #0]
 801ccce:	4608      	mov	r0, r1
 801ccd0:	f7fd fe78 	bl	801a9c4 <rcl_client_get_rmw_handle>
 801ccd4:	b150      	cbz	r0, 801ccec <rcl_wait_set_add_client+0x40>
 801ccd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ccd8:	6842      	ldr	r2, [r0, #4]
 801ccda:	2000      	movs	r0, #0
 801ccdc:	6a1b      	ldr	r3, [r3, #32]
 801ccde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cce2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cce4:	69d3      	ldr	r3, [r2, #28]
 801cce6:	3301      	adds	r3, #1
 801cce8:	61d3      	str	r3, [r2, #28]
 801ccea:	bd38      	pop	{r3, r4, r5, pc}
 801ccec:	2001      	movs	r0, #1
 801ccee:	bd38      	pop	{r3, r4, r5, pc}
 801ccf0:	f240 3086 	movw	r0, #902	@ 0x386
 801ccf4:	bd38      	pop	{r3, r4, r5, pc}
 801ccf6:	200b      	movs	r0, #11
 801ccf8:	4770      	bx	lr
 801ccfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ccfe:	bd38      	pop	{r3, r4, r5, pc}
 801cd00:	200b      	movs	r0, #11
 801cd02:	bd38      	pop	{r3, r4, r5, pc}

0801cd04 <rcl_wait_set_add_service>:
 801cd04:	b318      	cbz	r0, 801cd4e <rcl_wait_set_add_service+0x4a>
 801cd06:	b538      	push	{r3, r4, r5, lr}
 801cd08:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801cd0a:	4604      	mov	r4, r0
 801cd0c:	b30b      	cbz	r3, 801cd52 <rcl_wait_set_add_service+0x4e>
 801cd0e:	b319      	cbz	r1, 801cd58 <rcl_wait_set_add_service+0x54>
 801cd10:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801cd12:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801cd14:	4285      	cmp	r5, r0
 801cd16:	d217      	bcs.n	801cd48 <rcl_wait_set_add_service+0x44>
 801cd18:	1c68      	adds	r0, r5, #1
 801cd1a:	6258      	str	r0, [r3, #36]	@ 0x24
 801cd1c:	6a23      	ldr	r3, [r4, #32]
 801cd1e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cd22:	b102      	cbz	r2, 801cd26 <rcl_wait_set_add_service+0x22>
 801cd24:	6015      	str	r5, [r2, #0]
 801cd26:	4608      	mov	r0, r1
 801cd28:	f7fe fdc2 	bl	801b8b0 <rcl_service_get_rmw_handle>
 801cd2c:	b150      	cbz	r0, 801cd44 <rcl_wait_set_add_service+0x40>
 801cd2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cd30:	6842      	ldr	r2, [r0, #4]
 801cd32:	2000      	movs	r0, #0
 801cd34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd3a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801cd3c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801cd3e:	3301      	adds	r3, #1
 801cd40:	6293      	str	r3, [r2, #40]	@ 0x28
 801cd42:	bd38      	pop	{r3, r4, r5, pc}
 801cd44:	2001      	movs	r0, #1
 801cd46:	bd38      	pop	{r3, r4, r5, pc}
 801cd48:	f240 3086 	movw	r0, #902	@ 0x386
 801cd4c:	bd38      	pop	{r3, r4, r5, pc}
 801cd4e:	200b      	movs	r0, #11
 801cd50:	4770      	bx	lr
 801cd52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cd56:	bd38      	pop	{r3, r4, r5, pc}
 801cd58:	200b      	movs	r0, #11
 801cd5a:	bd38      	pop	{r3, r4, r5, pc}
 801cd5c:	0000      	movs	r0, r0
	...

0801cd60 <rcl_wait>:
 801cd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd64:	ed2d 8b02 	vpush	{d8}
 801cd68:	b08d      	sub	sp, #52	@ 0x34
 801cd6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cd6e:	2800      	cmp	r0, #0
 801cd70:	f000 814f 	beq.w	801d012 <rcl_wait+0x2b2>
 801cd74:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801cd76:	4605      	mov	r5, r0
 801cd78:	2e00      	cmp	r6, #0
 801cd7a:	f000 811a 	beq.w	801cfb2 <rcl_wait+0x252>
 801cd7e:	6843      	ldr	r3, [r0, #4]
 801cd80:	b983      	cbnz	r3, 801cda4 <rcl_wait+0x44>
 801cd82:	68eb      	ldr	r3, [r5, #12]
 801cd84:	b973      	cbnz	r3, 801cda4 <rcl_wait+0x44>
 801cd86:	696b      	ldr	r3, [r5, #20]
 801cd88:	b963      	cbnz	r3, 801cda4 <rcl_wait+0x44>
 801cd8a:	69eb      	ldr	r3, [r5, #28]
 801cd8c:	b953      	cbnz	r3, 801cda4 <rcl_wait+0x44>
 801cd8e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801cd90:	b943      	cbnz	r3, 801cda4 <rcl_wait+0x44>
 801cd92:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801cd94:	b933      	cbnz	r3, 801cda4 <rcl_wait+0x44>
 801cd96:	f240 3085 	movw	r0, #901	@ 0x385
 801cd9a:	b00d      	add	sp, #52	@ 0x34
 801cd9c:	ecbd 8b02 	vpop	{d8}
 801cda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cda4:	9b04      	ldr	r3, [sp, #16]
 801cda6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801cda8:	2b01      	cmp	r3, #1
 801cdaa:	9b05      	ldr	r3, [sp, #20]
 801cdac:	f173 0300 	sbcs.w	r3, r3, #0
 801cdb0:	f2c0 80f8 	blt.w	801cfa4 <rcl_wait+0x244>
 801cdb4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801cdb8:	2a00      	cmp	r2, #0
 801cdba:	f000 810f 	beq.w	801cfdc <rcl_wait+0x27c>
 801cdbe:	2400      	movs	r4, #0
 801cdc0:	4613      	mov	r3, r2
 801cdc2:	f240 3921 	movw	r9, #801	@ 0x321
 801cdc6:	4632      	mov	r2, r6
 801cdc8:	46a2      	mov	sl, r4
 801cdca:	46a3      	mov	fp, r4
 801cdcc:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 801d030 <rcl_wait+0x2d0>
 801cdd0:	e014      	b.n	801cdfc <rcl_wait+0x9c>
 801cdd2:	2800      	cmp	r0, #0
 801cdd4:	d1e1      	bne.n	801cd9a <rcl_wait+0x3a>
 801cdd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cdda:	4542      	cmp	r2, r8
 801cddc:	eb73 0107 	sbcs.w	r1, r3, r7
 801cde0:	da03      	bge.n	801cdea <rcl_wait+0x8a>
 801cde2:	4690      	mov	r8, r2
 801cde4:	461f      	mov	r7, r3
 801cde6:	f04f 0b01 	mov.w	fp, #1
 801cdea:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801cdec:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801cdee:	3401      	adds	r4, #1
 801cdf0:	f14a 0a00 	adc.w	sl, sl, #0
 801cdf4:	429c      	cmp	r4, r3
 801cdf6:	f17a 0100 	sbcs.w	r1, sl, #0
 801cdfa:	d228      	bcs.n	801ce4e <rcl_wait+0xee>
 801cdfc:	6928      	ldr	r0, [r5, #16]
 801cdfe:	a908      	add	r1, sp, #32
 801ce00:	00a6      	lsls	r6, r4, #2
 801ce02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ce06:	2800      	cmp	r0, #0
 801ce08:	d0f1      	beq.n	801cdee <rcl_wait+0x8e>
 801ce0a:	68eb      	ldr	r3, [r5, #12]
 801ce0c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801ce10:	4423      	add	r3, r4
 801ce12:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801ce16:	f1be 0f00 	cmp.w	lr, #0
 801ce1a:	d006      	beq.n	801ce2a <rcl_wait+0xca>
 801ce1c:	6913      	ldr	r3, [r2, #16]
 801ce1e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801ce22:	3301      	adds	r3, #1
 801ce24:	6113      	str	r3, [r2, #16]
 801ce26:	692b      	ldr	r3, [r5, #16]
 801ce28:	5998      	ldr	r0, [r3, r6]
 801ce2a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801ce2e:	f7ff fa89 	bl	801c344 <rcl_timer_get_time_until_next_call>
 801ce32:	4548      	cmp	r0, r9
 801ce34:	d1cd      	bne.n	801cdd2 <rcl_wait+0x72>
 801ce36:	692b      	ldr	r3, [r5, #16]
 801ce38:	2200      	movs	r2, #0
 801ce3a:	3401      	adds	r4, #1
 801ce3c:	519a      	str	r2, [r3, r6]
 801ce3e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801ce40:	f14a 0a00 	adc.w	sl, sl, #0
 801ce44:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801ce46:	429c      	cmp	r4, r3
 801ce48:	f17a 0100 	sbcs.w	r1, sl, #0
 801ce4c:	d3d6      	bcc.n	801cdfc <rcl_wait+0x9c>
 801ce4e:	4659      	mov	r1, fp
 801ce50:	4616      	mov	r6, r2
 801ce52:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ce56:	4313      	orrs	r3, r2
 801ce58:	f040 80b4 	bne.w	801cfc4 <rcl_wait+0x264>
 801ce5c:	2300      	movs	r3, #0
 801ce5e:	2200      	movs	r2, #0
 801ce60:	460c      	mov	r4, r1
 801ce62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ce66:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801ce6a:	ab08      	add	r3, sp, #32
 801ce6c:	9302      	str	r3, [sp, #8]
 801ce6e:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801ce72:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801ce74:	f106 0110 	add.w	r1, r6, #16
 801ce78:	9300      	str	r3, [sp, #0]
 801ce7a:	1d30      	adds	r0, r6, #4
 801ce7c:	f106 031c 	add.w	r3, r6, #28
 801ce80:	9201      	str	r2, [sp, #4]
 801ce82:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801ce86:	f002 fcb7 	bl	801f7f8 <rmw_wait>
 801ce8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ce8c:	4680      	mov	r8, r0
 801ce8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ce90:	b1e2      	cbz	r2, 801cecc <rcl_wait+0x16c>
 801ce92:	f04f 0900 	mov.w	r9, #0
 801ce96:	464f      	mov	r7, r9
 801ce98:	692a      	ldr	r2, [r5, #16]
 801ce9a:	f10d 011f 	add.w	r1, sp, #31
 801ce9e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801cea2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801cea6:	b160      	cbz	r0, 801cec2 <rcl_wait+0x162>
 801cea8:	f88d 701f 	strb.w	r7, [sp, #31]
 801ceac:	f7ff fa0e 	bl	801c2cc <rcl_timer_is_ready>
 801ceb0:	2800      	cmp	r0, #0
 801ceb2:	f47f af72 	bne.w	801cd9a <rcl_wait+0x3a>
 801ceb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801ceba:	b90b      	cbnz	r3, 801cec0 <rcl_wait+0x160>
 801cebc:	692a      	ldr	r2, [r5, #16]
 801cebe:	5193      	str	r3, [r2, r6]
 801cec0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801cec2:	f109 0901 	add.w	r9, r9, #1
 801cec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801cec8:	454a      	cmp	r2, r9
 801ceca:	d8e5      	bhi.n	801ce98 <rcl_wait+0x138>
 801cecc:	f038 0002 	bics.w	r0, r8, #2
 801ced0:	d176      	bne.n	801cfc0 <rcl_wait+0x260>
 801ced2:	686f      	ldr	r7, [r5, #4]
 801ced4:	b17f      	cbz	r7, 801cef6 <rcl_wait+0x196>
 801ced6:	4602      	mov	r2, r0
 801ced8:	e002      	b.n	801cee0 <rcl_wait+0x180>
 801ceda:	3201      	adds	r2, #1
 801cedc:	42ba      	cmp	r2, r7
 801cede:	d00a      	beq.n	801cef6 <rcl_wait+0x196>
 801cee0:	6899      	ldr	r1, [r3, #8]
 801cee2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cee6:	2900      	cmp	r1, #0
 801cee8:	d1f7      	bne.n	801ceda <rcl_wait+0x17a>
 801ceea:	682e      	ldr	r6, [r5, #0]
 801ceec:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cef0:	3201      	adds	r2, #1
 801cef2:	42ba      	cmp	r2, r7
 801cef4:	d1f4      	bne.n	801cee0 <rcl_wait+0x180>
 801cef6:	68ef      	ldr	r7, [r5, #12]
 801cef8:	b17f      	cbz	r7, 801cf1a <rcl_wait+0x1ba>
 801cefa:	2200      	movs	r2, #0
 801cefc:	e002      	b.n	801cf04 <rcl_wait+0x1a4>
 801cefe:	3201      	adds	r2, #1
 801cf00:	42ba      	cmp	r2, r7
 801cf02:	d00a      	beq.n	801cf1a <rcl_wait+0x1ba>
 801cf04:	6959      	ldr	r1, [r3, #20]
 801cf06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf0a:	2900      	cmp	r1, #0
 801cf0c:	d1f7      	bne.n	801cefe <rcl_wait+0x19e>
 801cf0e:	68ae      	ldr	r6, [r5, #8]
 801cf10:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf14:	3201      	adds	r2, #1
 801cf16:	42ba      	cmp	r2, r7
 801cf18:	d1f4      	bne.n	801cf04 <rcl_wait+0x1a4>
 801cf1a:	69ef      	ldr	r7, [r5, #28]
 801cf1c:	b17f      	cbz	r7, 801cf3e <rcl_wait+0x1de>
 801cf1e:	2200      	movs	r2, #0
 801cf20:	e002      	b.n	801cf28 <rcl_wait+0x1c8>
 801cf22:	3201      	adds	r2, #1
 801cf24:	42ba      	cmp	r2, r7
 801cf26:	d00a      	beq.n	801cf3e <rcl_wait+0x1de>
 801cf28:	6a19      	ldr	r1, [r3, #32]
 801cf2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf2e:	2900      	cmp	r1, #0
 801cf30:	d1f7      	bne.n	801cf22 <rcl_wait+0x1c2>
 801cf32:	69ae      	ldr	r6, [r5, #24]
 801cf34:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf38:	3201      	adds	r2, #1
 801cf3a:	42ba      	cmp	r2, r7
 801cf3c:	d1f4      	bne.n	801cf28 <rcl_wait+0x1c8>
 801cf3e:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 801cf40:	b17f      	cbz	r7, 801cf62 <rcl_wait+0x202>
 801cf42:	2200      	movs	r2, #0
 801cf44:	e002      	b.n	801cf4c <rcl_wait+0x1ec>
 801cf46:	3201      	adds	r2, #1
 801cf48:	42ba      	cmp	r2, r7
 801cf4a:	d00a      	beq.n	801cf62 <rcl_wait+0x202>
 801cf4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801cf4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf52:	2900      	cmp	r1, #0
 801cf54:	d1f7      	bne.n	801cf46 <rcl_wait+0x1e6>
 801cf56:	6a2e      	ldr	r6, [r5, #32]
 801cf58:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf5c:	3201      	adds	r2, #1
 801cf5e:	42ba      	cmp	r2, r7
 801cf60:	d1f4      	bne.n	801cf4c <rcl_wait+0x1ec>
 801cf62:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 801cf64:	b17f      	cbz	r7, 801cf86 <rcl_wait+0x226>
 801cf66:	2200      	movs	r2, #0
 801cf68:	e002      	b.n	801cf70 <rcl_wait+0x210>
 801cf6a:	3201      	adds	r2, #1
 801cf6c:	42ba      	cmp	r2, r7
 801cf6e:	d00a      	beq.n	801cf86 <rcl_wait+0x226>
 801cf70:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801cf72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf76:	2900      	cmp	r1, #0
 801cf78:	d1f7      	bne.n	801cf6a <rcl_wait+0x20a>
 801cf7a:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 801cf7c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf80:	3201      	adds	r2, #1
 801cf82:	42ba      	cmp	r2, r7
 801cf84:	d1f4      	bne.n	801cf70 <rcl_wait+0x210>
 801cf86:	f1b8 0f02 	cmp.w	r8, #2
 801cf8a:	f47f af06 	bne.w	801cd9a <rcl_wait+0x3a>
 801cf8e:	f084 0301 	eor.w	r3, r4, #1
 801cf92:	b2db      	uxtb	r3, r3
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	bf18      	it	ne
 801cf98:	2002      	movne	r0, #2
 801cf9a:	b00d      	add	sp, #52	@ 0x34
 801cf9c:	ecbd 8b02 	vpop	{d8}
 801cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfa4:	2a00      	cmp	r2, #0
 801cfa6:	d03a      	beq.n	801d01e <rcl_wait+0x2be>
 801cfa8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801cfac:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801cfb0:	e705      	b.n	801cdbe <rcl_wait+0x5e>
 801cfb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801cfb6:	b00d      	add	sp, #52	@ 0x34
 801cfb8:	ecbd 8b02 	vpop	{d8}
 801cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfc0:	2001      	movs	r0, #1
 801cfc2:	e6ea      	b.n	801cd9a <rcl_wait+0x3a>
 801cfc4:	9b04      	ldr	r3, [sp, #16]
 801cfc6:	460c      	mov	r4, r1
 801cfc8:	2b01      	cmp	r3, #1
 801cfca:	9b05      	ldr	r3, [sp, #20]
 801cfcc:	f173 0300 	sbcs.w	r3, r3, #0
 801cfd0:	bfa8      	it	ge
 801cfd2:	f044 0401 	orrge.w	r4, r4, #1
 801cfd6:	b914      	cbnz	r4, 801cfde <rcl_wait+0x27e>
 801cfd8:	4623      	mov	r3, r4
 801cfda:	e747      	b.n	801ce6c <rcl_wait+0x10c>
 801cfdc:	4611      	mov	r1, r2
 801cfde:	2f00      	cmp	r7, #0
 801cfe0:	da02      	bge.n	801cfe8 <rcl_wait+0x288>
 801cfe2:	f04f 0800 	mov.w	r8, #0
 801cfe6:	4647      	mov	r7, r8
 801cfe8:	460c      	mov	r4, r1
 801cfea:	4640      	mov	r0, r8
 801cfec:	4639      	mov	r1, r7
 801cfee:	a312      	add	r3, pc, #72	@ (adr r3, 801d038 <rcl_wait+0x2d8>)
 801cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cff4:	f7e3 f9dc 	bl	80003b0 <__aeabi_ldivmod>
 801cff8:	a30f      	add	r3, pc, #60	@ (adr r3, 801d038 <rcl_wait+0x2d8>)
 801cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cffe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d002:	4640      	mov	r0, r8
 801d004:	4639      	mov	r1, r7
 801d006:	f7e3 f9d3 	bl	80003b0 <__aeabi_ldivmod>
 801d00a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801d00e:	ab08      	add	r3, sp, #32
 801d010:	e72c      	b.n	801ce6c <rcl_wait+0x10c>
 801d012:	200b      	movs	r0, #11
 801d014:	b00d      	add	sp, #52	@ 0x34
 801d016:	ecbd 8b02 	vpop	{d8}
 801d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d01e:	4611      	mov	r1, r2
 801d020:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d024:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801d028:	e713      	b.n	801ce52 <rcl_wait+0xf2>
 801d02a:	bf00      	nop
 801d02c:	f3af 8000 	nop.w
 801d030:	ffffffff 	.word	0xffffffff
 801d034:	7fffffff 	.word	0x7fffffff
 801d038:	3b9aca00 	.word	0x3b9aca00
 801d03c:	00000000 	.word	0x00000000

0801d040 <rcl_action_take_goal_response>:
 801d040:	2800      	cmp	r0, #0
 801d042:	d039      	beq.n	801d0b8 <rcl_action_take_goal_response+0x78>
 801d044:	b570      	push	{r4, r5, r6, lr}
 801d046:	4604      	mov	r4, r0
 801d048:	6800      	ldr	r0, [r0, #0]
 801d04a:	b380      	cbz	r0, 801d0ae <rcl_action_take_goal_response+0x6e>
 801d04c:	460e      	mov	r6, r1
 801d04e:	4615      	mov	r5, r2
 801d050:	f7fd fd3e 	bl	801aad0 <rcl_client_is_valid>
 801d054:	b330      	cbz	r0, 801d0a4 <rcl_action_take_goal_response+0x64>
 801d056:	6820      	ldr	r0, [r4, #0]
 801d058:	3004      	adds	r0, #4
 801d05a:	f7fd fd39 	bl	801aad0 <rcl_client_is_valid>
 801d05e:	b308      	cbz	r0, 801d0a4 <rcl_action_take_goal_response+0x64>
 801d060:	6820      	ldr	r0, [r4, #0]
 801d062:	3008      	adds	r0, #8
 801d064:	f7fd fd34 	bl	801aad0 <rcl_client_is_valid>
 801d068:	b1e0      	cbz	r0, 801d0a4 <rcl_action_take_goal_response+0x64>
 801d06a:	6820      	ldr	r0, [r4, #0]
 801d06c:	300c      	adds	r0, #12
 801d06e:	f7fe fdc5 	bl	801bbfc <rcl_subscription_is_valid>
 801d072:	b1b8      	cbz	r0, 801d0a4 <rcl_action_take_goal_response+0x64>
 801d074:	6820      	ldr	r0, [r4, #0]
 801d076:	3010      	adds	r0, #16
 801d078:	f7fe fdc0 	bl	801bbfc <rcl_subscription_is_valid>
 801d07c:	b190      	cbz	r0, 801d0a4 <rcl_action_take_goal_response+0x64>
 801d07e:	b1cd      	cbz	r5, 801d0b4 <rcl_action_take_goal_response+0x74>
 801d080:	b1c6      	cbz	r6, 801d0b4 <rcl_action_take_goal_response+0x74>
 801d082:	462a      	mov	r2, r5
 801d084:	4631      	mov	r1, r6
 801d086:	6820      	ldr	r0, [r4, #0]
 801d088:	f7fd fcda 	bl	801aa40 <rcl_take_response>
 801d08c:	b148      	cbz	r0, 801d0a2 <rcl_action_take_goal_response+0x62>
 801d08e:	280a      	cmp	r0, #10
 801d090:	d007      	beq.n	801d0a2 <rcl_action_take_goal_response+0x62>
 801d092:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d096:	f640 0337 	movw	r3, #2103	@ 0x837
 801d09a:	4290      	cmp	r0, r2
 801d09c:	bf0c      	ite	eq
 801d09e:	4618      	moveq	r0, r3
 801d0a0:	2001      	movne	r0, #1
 801d0a2:	bd70      	pop	{r4, r5, r6, pc}
 801d0a4:	f7f8 fa34 	bl	8015510 <rcutils_reset_error>
 801d0a8:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0ac:	bd70      	pop	{r4, r5, r6, pc}
 801d0ae:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0b2:	bd70      	pop	{r4, r5, r6, pc}
 801d0b4:	200b      	movs	r0, #11
 801d0b6:	bd70      	pop	{r4, r5, r6, pc}
 801d0b8:	f640 0036 	movw	r0, #2102	@ 0x836
 801d0bc:	4770      	bx	lr
 801d0be:	bf00      	nop

0801d0c0 <rcl_action_send_result_request>:
 801d0c0:	b390      	cbz	r0, 801d128 <rcl_action_send_result_request+0x68>
 801d0c2:	b570      	push	{r4, r5, r6, lr}
 801d0c4:	4604      	mov	r4, r0
 801d0c6:	6800      	ldr	r0, [r0, #0]
 801d0c8:	b348      	cbz	r0, 801d11e <rcl_action_send_result_request+0x5e>
 801d0ca:	460e      	mov	r6, r1
 801d0cc:	4615      	mov	r5, r2
 801d0ce:	f7fd fcff 	bl	801aad0 <rcl_client_is_valid>
 801d0d2:	b1f8      	cbz	r0, 801d114 <rcl_action_send_result_request+0x54>
 801d0d4:	6820      	ldr	r0, [r4, #0]
 801d0d6:	3004      	adds	r0, #4
 801d0d8:	f7fd fcfa 	bl	801aad0 <rcl_client_is_valid>
 801d0dc:	b1d0      	cbz	r0, 801d114 <rcl_action_send_result_request+0x54>
 801d0de:	6820      	ldr	r0, [r4, #0]
 801d0e0:	3008      	adds	r0, #8
 801d0e2:	f7fd fcf5 	bl	801aad0 <rcl_client_is_valid>
 801d0e6:	b1a8      	cbz	r0, 801d114 <rcl_action_send_result_request+0x54>
 801d0e8:	6820      	ldr	r0, [r4, #0]
 801d0ea:	300c      	adds	r0, #12
 801d0ec:	f7fe fd86 	bl	801bbfc <rcl_subscription_is_valid>
 801d0f0:	b180      	cbz	r0, 801d114 <rcl_action_send_result_request+0x54>
 801d0f2:	6820      	ldr	r0, [r4, #0]
 801d0f4:	3010      	adds	r0, #16
 801d0f6:	f7fe fd81 	bl	801bbfc <rcl_subscription_is_valid>
 801d0fa:	b158      	cbz	r0, 801d114 <rcl_action_send_result_request+0x54>
 801d0fc:	b195      	cbz	r5, 801d124 <rcl_action_send_result_request+0x64>
 801d0fe:	b18e      	cbz	r6, 801d124 <rcl_action_send_result_request+0x64>
 801d100:	6820      	ldr	r0, [r4, #0]
 801d102:	462a      	mov	r2, r5
 801d104:	4631      	mov	r1, r6
 801d106:	3008      	adds	r0, #8
 801d108:	f7fd fc62 	bl	801a9d0 <rcl_send_request>
 801d10c:	3800      	subs	r0, #0
 801d10e:	bf18      	it	ne
 801d110:	2001      	movne	r0, #1
 801d112:	bd70      	pop	{r4, r5, r6, pc}
 801d114:	f7f8 f9fc 	bl	8015510 <rcutils_reset_error>
 801d118:	f640 0036 	movw	r0, #2102	@ 0x836
 801d11c:	bd70      	pop	{r4, r5, r6, pc}
 801d11e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d122:	bd70      	pop	{r4, r5, r6, pc}
 801d124:	200b      	movs	r0, #11
 801d126:	bd70      	pop	{r4, r5, r6, pc}
 801d128:	f640 0036 	movw	r0, #2102	@ 0x836
 801d12c:	4770      	bx	lr
 801d12e:	bf00      	nop

0801d130 <rcl_action_take_result_response>:
 801d130:	2800      	cmp	r0, #0
 801d132:	d03a      	beq.n	801d1aa <rcl_action_take_result_response+0x7a>
 801d134:	b570      	push	{r4, r5, r6, lr}
 801d136:	4604      	mov	r4, r0
 801d138:	6800      	ldr	r0, [r0, #0]
 801d13a:	b388      	cbz	r0, 801d1a0 <rcl_action_take_result_response+0x70>
 801d13c:	460e      	mov	r6, r1
 801d13e:	4615      	mov	r5, r2
 801d140:	f7fd fcc6 	bl	801aad0 <rcl_client_is_valid>
 801d144:	b338      	cbz	r0, 801d196 <rcl_action_take_result_response+0x66>
 801d146:	6820      	ldr	r0, [r4, #0]
 801d148:	3004      	adds	r0, #4
 801d14a:	f7fd fcc1 	bl	801aad0 <rcl_client_is_valid>
 801d14e:	b310      	cbz	r0, 801d196 <rcl_action_take_result_response+0x66>
 801d150:	6820      	ldr	r0, [r4, #0]
 801d152:	3008      	adds	r0, #8
 801d154:	f7fd fcbc 	bl	801aad0 <rcl_client_is_valid>
 801d158:	b1e8      	cbz	r0, 801d196 <rcl_action_take_result_response+0x66>
 801d15a:	6820      	ldr	r0, [r4, #0]
 801d15c:	300c      	adds	r0, #12
 801d15e:	f7fe fd4d 	bl	801bbfc <rcl_subscription_is_valid>
 801d162:	b1c0      	cbz	r0, 801d196 <rcl_action_take_result_response+0x66>
 801d164:	6820      	ldr	r0, [r4, #0]
 801d166:	3010      	adds	r0, #16
 801d168:	f7fe fd48 	bl	801bbfc <rcl_subscription_is_valid>
 801d16c:	b198      	cbz	r0, 801d196 <rcl_action_take_result_response+0x66>
 801d16e:	b1d5      	cbz	r5, 801d1a6 <rcl_action_take_result_response+0x76>
 801d170:	b1ce      	cbz	r6, 801d1a6 <rcl_action_take_result_response+0x76>
 801d172:	6820      	ldr	r0, [r4, #0]
 801d174:	462a      	mov	r2, r5
 801d176:	4631      	mov	r1, r6
 801d178:	3008      	adds	r0, #8
 801d17a:	f7fd fc61 	bl	801aa40 <rcl_take_response>
 801d17e:	b148      	cbz	r0, 801d194 <rcl_action_take_result_response+0x64>
 801d180:	280a      	cmp	r0, #10
 801d182:	d007      	beq.n	801d194 <rcl_action_take_result_response+0x64>
 801d184:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d188:	f640 0337 	movw	r3, #2103	@ 0x837
 801d18c:	4290      	cmp	r0, r2
 801d18e:	bf0c      	ite	eq
 801d190:	4618      	moveq	r0, r3
 801d192:	2001      	movne	r0, #1
 801d194:	bd70      	pop	{r4, r5, r6, pc}
 801d196:	f7f8 f9bb 	bl	8015510 <rcutils_reset_error>
 801d19a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d19e:	bd70      	pop	{r4, r5, r6, pc}
 801d1a0:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1a4:	bd70      	pop	{r4, r5, r6, pc}
 801d1a6:	200b      	movs	r0, #11
 801d1a8:	bd70      	pop	{r4, r5, r6, pc}
 801d1aa:	f640 0036 	movw	r0, #2102	@ 0x836
 801d1ae:	4770      	bx	lr

0801d1b0 <rcl_action_take_cancel_response>:
 801d1b0:	2800      	cmp	r0, #0
 801d1b2:	d03a      	beq.n	801d22a <rcl_action_take_cancel_response+0x7a>
 801d1b4:	b570      	push	{r4, r5, r6, lr}
 801d1b6:	4604      	mov	r4, r0
 801d1b8:	6800      	ldr	r0, [r0, #0]
 801d1ba:	b388      	cbz	r0, 801d220 <rcl_action_take_cancel_response+0x70>
 801d1bc:	460e      	mov	r6, r1
 801d1be:	4615      	mov	r5, r2
 801d1c0:	f7fd fc86 	bl	801aad0 <rcl_client_is_valid>
 801d1c4:	b338      	cbz	r0, 801d216 <rcl_action_take_cancel_response+0x66>
 801d1c6:	6820      	ldr	r0, [r4, #0]
 801d1c8:	3004      	adds	r0, #4
 801d1ca:	f7fd fc81 	bl	801aad0 <rcl_client_is_valid>
 801d1ce:	b310      	cbz	r0, 801d216 <rcl_action_take_cancel_response+0x66>
 801d1d0:	6820      	ldr	r0, [r4, #0]
 801d1d2:	3008      	adds	r0, #8
 801d1d4:	f7fd fc7c 	bl	801aad0 <rcl_client_is_valid>
 801d1d8:	b1e8      	cbz	r0, 801d216 <rcl_action_take_cancel_response+0x66>
 801d1da:	6820      	ldr	r0, [r4, #0]
 801d1dc:	300c      	adds	r0, #12
 801d1de:	f7fe fd0d 	bl	801bbfc <rcl_subscription_is_valid>
 801d1e2:	b1c0      	cbz	r0, 801d216 <rcl_action_take_cancel_response+0x66>
 801d1e4:	6820      	ldr	r0, [r4, #0]
 801d1e6:	3010      	adds	r0, #16
 801d1e8:	f7fe fd08 	bl	801bbfc <rcl_subscription_is_valid>
 801d1ec:	b198      	cbz	r0, 801d216 <rcl_action_take_cancel_response+0x66>
 801d1ee:	b1d5      	cbz	r5, 801d226 <rcl_action_take_cancel_response+0x76>
 801d1f0:	b1ce      	cbz	r6, 801d226 <rcl_action_take_cancel_response+0x76>
 801d1f2:	6820      	ldr	r0, [r4, #0]
 801d1f4:	462a      	mov	r2, r5
 801d1f6:	4631      	mov	r1, r6
 801d1f8:	3004      	adds	r0, #4
 801d1fa:	f7fd fc21 	bl	801aa40 <rcl_take_response>
 801d1fe:	b148      	cbz	r0, 801d214 <rcl_action_take_cancel_response+0x64>
 801d200:	280a      	cmp	r0, #10
 801d202:	d007      	beq.n	801d214 <rcl_action_take_cancel_response+0x64>
 801d204:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801d208:	f640 0337 	movw	r3, #2103	@ 0x837
 801d20c:	4290      	cmp	r0, r2
 801d20e:	bf0c      	ite	eq
 801d210:	4618      	moveq	r0, r3
 801d212:	2001      	movne	r0, #1
 801d214:	bd70      	pop	{r4, r5, r6, pc}
 801d216:	f7f8 f97b 	bl	8015510 <rcutils_reset_error>
 801d21a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d21e:	bd70      	pop	{r4, r5, r6, pc}
 801d220:	f640 0036 	movw	r0, #2102	@ 0x836
 801d224:	bd70      	pop	{r4, r5, r6, pc}
 801d226:	200b      	movs	r0, #11
 801d228:	bd70      	pop	{r4, r5, r6, pc}
 801d22a:	f640 0036 	movw	r0, #2102	@ 0x836
 801d22e:	4770      	bx	lr

0801d230 <rcl_action_take_feedback>:
 801d230:	2800      	cmp	r0, #0
 801d232:	d038      	beq.n	801d2a6 <rcl_action_take_feedback+0x76>
 801d234:	b530      	push	{r4, r5, lr}
 801d236:	4604      	mov	r4, r0
 801d238:	6800      	ldr	r0, [r0, #0]
 801d23a:	b091      	sub	sp, #68	@ 0x44
 801d23c:	b378      	cbz	r0, 801d29e <rcl_action_take_feedback+0x6e>
 801d23e:	460d      	mov	r5, r1
 801d240:	f7fd fc46 	bl	801aad0 <rcl_client_is_valid>
 801d244:	b328      	cbz	r0, 801d292 <rcl_action_take_feedback+0x62>
 801d246:	6820      	ldr	r0, [r4, #0]
 801d248:	3004      	adds	r0, #4
 801d24a:	f7fd fc41 	bl	801aad0 <rcl_client_is_valid>
 801d24e:	b300      	cbz	r0, 801d292 <rcl_action_take_feedback+0x62>
 801d250:	6820      	ldr	r0, [r4, #0]
 801d252:	3008      	adds	r0, #8
 801d254:	f7fd fc3c 	bl	801aad0 <rcl_client_is_valid>
 801d258:	b1d8      	cbz	r0, 801d292 <rcl_action_take_feedback+0x62>
 801d25a:	6820      	ldr	r0, [r4, #0]
 801d25c:	300c      	adds	r0, #12
 801d25e:	f7fe fccd 	bl	801bbfc <rcl_subscription_is_valid>
 801d262:	b1b0      	cbz	r0, 801d292 <rcl_action_take_feedback+0x62>
 801d264:	6820      	ldr	r0, [r4, #0]
 801d266:	3010      	adds	r0, #16
 801d268:	f7fe fcc8 	bl	801bbfc <rcl_subscription_is_valid>
 801d26c:	b188      	cbz	r0, 801d292 <rcl_action_take_feedback+0x62>
 801d26e:	b1ed      	cbz	r5, 801d2ac <rcl_action_take_feedback+0x7c>
 801d270:	6820      	ldr	r0, [r4, #0]
 801d272:	2300      	movs	r3, #0
 801d274:	466a      	mov	r2, sp
 801d276:	4629      	mov	r1, r5
 801d278:	300c      	adds	r0, #12
 801d27a:	f7fe fc63 	bl	801bb44 <rcl_take>
 801d27e:	b160      	cbz	r0, 801d29a <rcl_action_take_feedback+0x6a>
 801d280:	f240 1391 	movw	r3, #401	@ 0x191
 801d284:	4298      	cmp	r0, r3
 801d286:	d014      	beq.n	801d2b2 <rcl_action_take_feedback+0x82>
 801d288:	280a      	cmp	r0, #10
 801d28a:	bf18      	it	ne
 801d28c:	2001      	movne	r0, #1
 801d28e:	b011      	add	sp, #68	@ 0x44
 801d290:	bd30      	pop	{r4, r5, pc}
 801d292:	f7f8 f93d 	bl	8015510 <rcutils_reset_error>
 801d296:	f640 0036 	movw	r0, #2102	@ 0x836
 801d29a:	b011      	add	sp, #68	@ 0x44
 801d29c:	bd30      	pop	{r4, r5, pc}
 801d29e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d2a2:	b011      	add	sp, #68	@ 0x44
 801d2a4:	bd30      	pop	{r4, r5, pc}
 801d2a6:	f640 0036 	movw	r0, #2102	@ 0x836
 801d2aa:	4770      	bx	lr
 801d2ac:	200b      	movs	r0, #11
 801d2ae:	b011      	add	sp, #68	@ 0x44
 801d2b0:	bd30      	pop	{r4, r5, pc}
 801d2b2:	f640 0037 	movw	r0, #2103	@ 0x837
 801d2b6:	e7f0      	b.n	801d29a <rcl_action_take_feedback+0x6a>

0801d2b8 <rcl_action_wait_set_add_action_client>:
 801d2b8:	2800      	cmp	r0, #0
 801d2ba:	d048      	beq.n	801d34e <rcl_action_wait_set_add_action_client+0x96>
 801d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2be:	460c      	mov	r4, r1
 801d2c0:	2900      	cmp	r1, #0
 801d2c2:	d03c      	beq.n	801d33e <rcl_action_wait_set_add_action_client+0x86>
 801d2c4:	4605      	mov	r5, r0
 801d2c6:	6808      	ldr	r0, [r1, #0]
 801d2c8:	2800      	cmp	r0, #0
 801d2ca:	d038      	beq.n	801d33e <rcl_action_wait_set_add_action_client+0x86>
 801d2cc:	4617      	mov	r7, r2
 801d2ce:	461e      	mov	r6, r3
 801d2d0:	f7fd fbfe 	bl	801aad0 <rcl_client_is_valid>
 801d2d4:	b3b0      	cbz	r0, 801d344 <rcl_action_wait_set_add_action_client+0x8c>
 801d2d6:	6820      	ldr	r0, [r4, #0]
 801d2d8:	3004      	adds	r0, #4
 801d2da:	f7fd fbf9 	bl	801aad0 <rcl_client_is_valid>
 801d2de:	b388      	cbz	r0, 801d344 <rcl_action_wait_set_add_action_client+0x8c>
 801d2e0:	6820      	ldr	r0, [r4, #0]
 801d2e2:	3008      	adds	r0, #8
 801d2e4:	f7fd fbf4 	bl	801aad0 <rcl_client_is_valid>
 801d2e8:	b360      	cbz	r0, 801d344 <rcl_action_wait_set_add_action_client+0x8c>
 801d2ea:	6820      	ldr	r0, [r4, #0]
 801d2ec:	300c      	adds	r0, #12
 801d2ee:	f7fe fc85 	bl	801bbfc <rcl_subscription_is_valid>
 801d2f2:	b338      	cbz	r0, 801d344 <rcl_action_wait_set_add_action_client+0x8c>
 801d2f4:	6820      	ldr	r0, [r4, #0]
 801d2f6:	3010      	adds	r0, #16
 801d2f8:	f7fe fc80 	bl	801bbfc <rcl_subscription_is_valid>
 801d2fc:	b310      	cbz	r0, 801d344 <rcl_action_wait_set_add_action_client+0x8c>
 801d2fe:	6821      	ldr	r1, [r4, #0]
 801d300:	4628      	mov	r0, r5
 801d302:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801d306:	f7ff fcd1 	bl	801ccac <rcl_wait_set_add_client>
 801d30a:	b9b8      	cbnz	r0, 801d33c <rcl_action_wait_set_add_action_client+0x84>
 801d30c:	6821      	ldr	r1, [r4, #0]
 801d30e:	4628      	mov	r0, r5
 801d310:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801d314:	3104      	adds	r1, #4
 801d316:	f7ff fcc9 	bl	801ccac <rcl_wait_set_add_client>
 801d31a:	b978      	cbnz	r0, 801d33c <rcl_action_wait_set_add_action_client+0x84>
 801d31c:	6821      	ldr	r1, [r4, #0]
 801d31e:	4628      	mov	r0, r5
 801d320:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801d324:	3108      	adds	r1, #8
 801d326:	f7ff fcc1 	bl	801ccac <rcl_wait_set_add_client>
 801d32a:	b938      	cbnz	r0, 801d33c <rcl_action_wait_set_add_action_client+0x84>
 801d32c:	6821      	ldr	r1, [r4, #0]
 801d32e:	4628      	mov	r0, r5
 801d330:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801d334:	310c      	adds	r1, #12
 801d336:	f7ff f969 	bl	801c60c <rcl_wait_set_add_subscription>
 801d33a:	b158      	cbz	r0, 801d354 <rcl_action_wait_set_add_action_client+0x9c>
 801d33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d33e:	f640 0036 	movw	r0, #2102	@ 0x836
 801d342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d344:	f7f8 f8e4 	bl	8015510 <rcutils_reset_error>
 801d348:	f640 0036 	movw	r0, #2102	@ 0x836
 801d34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d34e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d352:	4770      	bx	lr
 801d354:	6821      	ldr	r1, [r4, #0]
 801d356:	4628      	mov	r0, r5
 801d358:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801d35c:	3110      	adds	r1, #16
 801d35e:	f7ff f955 	bl	801c60c <rcl_wait_set_add_subscription>
 801d362:	2800      	cmp	r0, #0
 801d364:	d1ea      	bne.n	801d33c <rcl_action_wait_set_add_action_client+0x84>
 801d366:	b11f      	cbz	r7, 801d370 <rcl_action_wait_set_add_action_client+0xb8>
 801d368:	6823      	ldr	r3, [r4, #0]
 801d36a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801d36e:	603b      	str	r3, [r7, #0]
 801d370:	2e00      	cmp	r6, #0
 801d372:	d0e3      	beq.n	801d33c <rcl_action_wait_set_add_action_client+0x84>
 801d374:	6823      	ldr	r3, [r4, #0]
 801d376:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801d37a:	6033      	str	r3, [r6, #0]
 801d37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d37e:	bf00      	nop

0801d380 <rcl_action_client_wait_set_get_entities_ready>:
 801d380:	2800      	cmp	r0, #0
 801d382:	d050      	beq.n	801d426 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d388:	460c      	mov	r4, r1
 801d38a:	2900      	cmp	r1, #0
 801d38c:	d03e      	beq.n	801d40c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d38e:	4605      	mov	r5, r0
 801d390:	6808      	ldr	r0, [r1, #0]
 801d392:	2800      	cmp	r0, #0
 801d394:	d03a      	beq.n	801d40c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d396:	4616      	mov	r6, r2
 801d398:	461f      	mov	r7, r3
 801d39a:	f7fd fb99 	bl	801aad0 <rcl_client_is_valid>
 801d39e:	2800      	cmp	r0, #0
 801d3a0:	d038      	beq.n	801d414 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3a2:	6820      	ldr	r0, [r4, #0]
 801d3a4:	3004      	adds	r0, #4
 801d3a6:	f7fd fb93 	bl	801aad0 <rcl_client_is_valid>
 801d3aa:	2800      	cmp	r0, #0
 801d3ac:	d032      	beq.n	801d414 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3ae:	6820      	ldr	r0, [r4, #0]
 801d3b0:	3008      	adds	r0, #8
 801d3b2:	f7fd fb8d 	bl	801aad0 <rcl_client_is_valid>
 801d3b6:	b368      	cbz	r0, 801d414 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3b8:	6820      	ldr	r0, [r4, #0]
 801d3ba:	300c      	adds	r0, #12
 801d3bc:	f7fe fc1e 	bl	801bbfc <rcl_subscription_is_valid>
 801d3c0:	b340      	cbz	r0, 801d414 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3c2:	6820      	ldr	r0, [r4, #0]
 801d3c4:	3010      	adds	r0, #16
 801d3c6:	f7fe fc19 	bl	801bbfc <rcl_subscription_is_valid>
 801d3ca:	b318      	cbz	r0, 801d414 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d3cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 801d3d0:	2a00      	cmp	r2, #0
 801d3d2:	bf18      	it	ne
 801d3d4:	2b00      	cmpne	r3, #0
 801d3d6:	9b08      	ldr	r3, [sp, #32]
 801d3d8:	bf0c      	ite	eq
 801d3da:	2101      	moveq	r1, #1
 801d3dc:	2100      	movne	r1, #0
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	bf08      	it	eq
 801d3e2:	f041 0101 	orreq.w	r1, r1, #1
 801d3e6:	2f00      	cmp	r7, #0
 801d3e8:	bf08      	it	eq
 801d3ea:	f041 0101 	orreq.w	r1, r1, #1
 801d3ee:	b9b9      	cbnz	r1, 801d420 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d3f0:	b1b6      	cbz	r6, 801d420 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d3f2:	6823      	ldr	r3, [r4, #0]
 801d3f4:	686c      	ldr	r4, [r5, #4]
 801d3f6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 801d3fa:	428a      	cmp	r2, r1
 801d3fc:	4610      	mov	r0, r2
 801d3fe:	bf38      	it	cc
 801d400:	4608      	movcc	r0, r1
 801d402:	4284      	cmp	r4, r0
 801d404:	d812      	bhi.n	801d42c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d406:	2001      	movs	r0, #1
 801d408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d40c:	f640 0036 	movw	r0, #2102	@ 0x836
 801d410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d414:	f7f8 f87c 	bl	8015510 <rcutils_reset_error>
 801d418:	f640 0036 	movw	r0, #2102	@ 0x836
 801d41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d420:	200b      	movs	r0, #11
 801d422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d426:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d42a:	4770      	bx	lr
 801d42c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801d430:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801d434:	45f0      	cmp	r8, lr
 801d436:	4640      	mov	r0, r8
 801d438:	69ec      	ldr	r4, [r5, #28]
 801d43a:	bf38      	it	cc
 801d43c:	4670      	movcc	r0, lr
 801d43e:	4560      	cmp	r0, ip
 801d440:	bf38      	it	cc
 801d442:	4660      	movcc	r0, ip
 801d444:	4284      	cmp	r4, r0
 801d446:	d9de      	bls.n	801d406 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d448:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d44c:	682d      	ldr	r5, [r5, #0]
 801d44e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d452:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d456:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d45a:	1a18      	subs	r0, r3, r0
 801d45c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d460:	f103 0c0c 	add.w	ip, r3, #12
 801d464:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d468:	fab0 f080 	clz	r0, r0
 801d46c:	eba5 050c 	sub.w	r5, r5, ip
 801d470:	0940      	lsrs	r0, r0, #5
 801d472:	fab5 f585 	clz	r5, r5
 801d476:	096d      	lsrs	r5, r5, #5
 801d478:	7035      	strb	r5, [r6, #0]
 801d47a:	f103 0510 	add.w	r5, r3, #16
 801d47e:	1b64      	subs	r4, r4, r5
 801d480:	9d08      	ldr	r5, [sp, #32]
 801d482:	fab4 f484 	clz	r4, r4
 801d486:	0964      	lsrs	r4, r4, #5
 801d488:	703c      	strb	r4, [r7, #0]
 801d48a:	1d1c      	adds	r4, r3, #4
 801d48c:	3308      	adds	r3, #8
 801d48e:	7028      	strb	r0, [r5, #0]
 801d490:	1b09      	subs	r1, r1, r4
 801d492:	2000      	movs	r0, #0
 801d494:	1ad3      	subs	r3, r2, r3
 801d496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d498:	fab1 f181 	clz	r1, r1
 801d49c:	fab3 f383 	clz	r3, r3
 801d4a0:	0949      	lsrs	r1, r1, #5
 801d4a2:	095b      	lsrs	r3, r3, #5
 801d4a4:	7011      	strb	r1, [r2, #0]
 801d4a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d4a8:	7013      	strb	r3, [r2, #0]
 801d4aa:	e7b1      	b.n	801d410 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d4ac <rcl_action_take_goal_request>:
 801d4ac:	2800      	cmp	r0, #0
 801d4ae:	d039      	beq.n	801d524 <rcl_action_take_goal_request+0x78>
 801d4b0:	b570      	push	{r4, r5, r6, lr}
 801d4b2:	4604      	mov	r4, r0
 801d4b4:	6800      	ldr	r0, [r0, #0]
 801d4b6:	b380      	cbz	r0, 801d51a <rcl_action_take_goal_request+0x6e>
 801d4b8:	460e      	mov	r6, r1
 801d4ba:	4615      	mov	r5, r2
 801d4bc:	f7fe fa56 	bl	801b96c <rcl_service_is_valid>
 801d4c0:	b330      	cbz	r0, 801d510 <rcl_action_take_goal_request+0x64>
 801d4c2:	6820      	ldr	r0, [r4, #0]
 801d4c4:	3004      	adds	r0, #4
 801d4c6:	f7fe fa51 	bl	801b96c <rcl_service_is_valid>
 801d4ca:	b308      	cbz	r0, 801d510 <rcl_action_take_goal_request+0x64>
 801d4cc:	6820      	ldr	r0, [r4, #0]
 801d4ce:	3008      	adds	r0, #8
 801d4d0:	f7fe fa4c 	bl	801b96c <rcl_service_is_valid>
 801d4d4:	b1e0      	cbz	r0, 801d510 <rcl_action_take_goal_request+0x64>
 801d4d6:	6820      	ldr	r0, [r4, #0]
 801d4d8:	300c      	adds	r0, #12
 801d4da:	f7f6 ffbb 	bl	8014454 <rcl_publisher_is_valid>
 801d4de:	b1b8      	cbz	r0, 801d510 <rcl_action_take_goal_request+0x64>
 801d4e0:	6820      	ldr	r0, [r4, #0]
 801d4e2:	3010      	adds	r0, #16
 801d4e4:	f7f6 ffb6 	bl	8014454 <rcl_publisher_is_valid>
 801d4e8:	b190      	cbz	r0, 801d510 <rcl_action_take_goal_request+0x64>
 801d4ea:	b1cd      	cbz	r5, 801d520 <rcl_action_take_goal_request+0x74>
 801d4ec:	b1c6      	cbz	r6, 801d520 <rcl_action_take_goal_request+0x74>
 801d4ee:	462a      	mov	r2, r5
 801d4f0:	4631      	mov	r1, r6
 801d4f2:	6820      	ldr	r0, [r4, #0]
 801d4f4:	f7fe f9e2 	bl	801b8bc <rcl_take_request>
 801d4f8:	b148      	cbz	r0, 801d50e <rcl_action_take_goal_request+0x62>
 801d4fa:	280a      	cmp	r0, #10
 801d4fc:	d007      	beq.n	801d50e <rcl_action_take_goal_request+0x62>
 801d4fe:	f240 2259 	movw	r2, #601	@ 0x259
 801d502:	f640 0399 	movw	r3, #2201	@ 0x899
 801d506:	4290      	cmp	r0, r2
 801d508:	bf0c      	ite	eq
 801d50a:	4618      	moveq	r0, r3
 801d50c:	2001      	movne	r0, #1
 801d50e:	bd70      	pop	{r4, r5, r6, pc}
 801d510:	f7f7 fffe 	bl	8015510 <rcutils_reset_error>
 801d514:	f640 0098 	movw	r0, #2200	@ 0x898
 801d518:	bd70      	pop	{r4, r5, r6, pc}
 801d51a:	f640 0098 	movw	r0, #2200	@ 0x898
 801d51e:	bd70      	pop	{r4, r5, r6, pc}
 801d520:	200b      	movs	r0, #11
 801d522:	bd70      	pop	{r4, r5, r6, pc}
 801d524:	f640 0098 	movw	r0, #2200	@ 0x898
 801d528:	4770      	bx	lr
 801d52a:	bf00      	nop

0801d52c <rcl_action_send_goal_response>:
 801d52c:	b390      	cbz	r0, 801d594 <rcl_action_send_goal_response+0x68>
 801d52e:	b570      	push	{r4, r5, r6, lr}
 801d530:	4604      	mov	r4, r0
 801d532:	6800      	ldr	r0, [r0, #0]
 801d534:	b348      	cbz	r0, 801d58a <rcl_action_send_goal_response+0x5e>
 801d536:	460e      	mov	r6, r1
 801d538:	4615      	mov	r5, r2
 801d53a:	f7fe fa17 	bl	801b96c <rcl_service_is_valid>
 801d53e:	b1f8      	cbz	r0, 801d580 <rcl_action_send_goal_response+0x54>
 801d540:	6820      	ldr	r0, [r4, #0]
 801d542:	3004      	adds	r0, #4
 801d544:	f7fe fa12 	bl	801b96c <rcl_service_is_valid>
 801d548:	b1d0      	cbz	r0, 801d580 <rcl_action_send_goal_response+0x54>
 801d54a:	6820      	ldr	r0, [r4, #0]
 801d54c:	3008      	adds	r0, #8
 801d54e:	f7fe fa0d 	bl	801b96c <rcl_service_is_valid>
 801d552:	b1a8      	cbz	r0, 801d580 <rcl_action_send_goal_response+0x54>
 801d554:	6820      	ldr	r0, [r4, #0]
 801d556:	300c      	adds	r0, #12
 801d558:	f7f6 ff7c 	bl	8014454 <rcl_publisher_is_valid>
 801d55c:	b180      	cbz	r0, 801d580 <rcl_action_send_goal_response+0x54>
 801d55e:	6820      	ldr	r0, [r4, #0]
 801d560:	3010      	adds	r0, #16
 801d562:	f7f6 ff77 	bl	8014454 <rcl_publisher_is_valid>
 801d566:	b158      	cbz	r0, 801d580 <rcl_action_send_goal_response+0x54>
 801d568:	b195      	cbz	r5, 801d590 <rcl_action_send_goal_response+0x64>
 801d56a:	b18e      	cbz	r6, 801d590 <rcl_action_send_goal_response+0x64>
 801d56c:	462a      	mov	r2, r5
 801d56e:	4631      	mov	r1, r6
 801d570:	6820      	ldr	r0, [r4, #0]
 801d572:	f7fe f9e3 	bl	801b93c <rcl_send_response>
 801d576:	b110      	cbz	r0, 801d57e <rcl_action_send_goal_response+0x52>
 801d578:	2802      	cmp	r0, #2
 801d57a:	bf18      	it	ne
 801d57c:	2001      	movne	r0, #1
 801d57e:	bd70      	pop	{r4, r5, r6, pc}
 801d580:	f7f7 ffc6 	bl	8015510 <rcutils_reset_error>
 801d584:	f640 0098 	movw	r0, #2200	@ 0x898
 801d588:	bd70      	pop	{r4, r5, r6, pc}
 801d58a:	f640 0098 	movw	r0, #2200	@ 0x898
 801d58e:	bd70      	pop	{r4, r5, r6, pc}
 801d590:	200b      	movs	r0, #11
 801d592:	bd70      	pop	{r4, r5, r6, pc}
 801d594:	f640 0098 	movw	r0, #2200	@ 0x898
 801d598:	4770      	bx	lr
 801d59a:	bf00      	nop

0801d59c <rcl_action_take_result_request>:
 801d59c:	2800      	cmp	r0, #0
 801d59e:	d03a      	beq.n	801d616 <rcl_action_take_result_request+0x7a>
 801d5a0:	b570      	push	{r4, r5, r6, lr}
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	6800      	ldr	r0, [r0, #0]
 801d5a6:	b388      	cbz	r0, 801d60c <rcl_action_take_result_request+0x70>
 801d5a8:	460e      	mov	r6, r1
 801d5aa:	4615      	mov	r5, r2
 801d5ac:	f7fe f9de 	bl	801b96c <rcl_service_is_valid>
 801d5b0:	b338      	cbz	r0, 801d602 <rcl_action_take_result_request+0x66>
 801d5b2:	6820      	ldr	r0, [r4, #0]
 801d5b4:	3004      	adds	r0, #4
 801d5b6:	f7fe f9d9 	bl	801b96c <rcl_service_is_valid>
 801d5ba:	b310      	cbz	r0, 801d602 <rcl_action_take_result_request+0x66>
 801d5bc:	6820      	ldr	r0, [r4, #0]
 801d5be:	3008      	adds	r0, #8
 801d5c0:	f7fe f9d4 	bl	801b96c <rcl_service_is_valid>
 801d5c4:	b1e8      	cbz	r0, 801d602 <rcl_action_take_result_request+0x66>
 801d5c6:	6820      	ldr	r0, [r4, #0]
 801d5c8:	300c      	adds	r0, #12
 801d5ca:	f7f6 ff43 	bl	8014454 <rcl_publisher_is_valid>
 801d5ce:	b1c0      	cbz	r0, 801d602 <rcl_action_take_result_request+0x66>
 801d5d0:	6820      	ldr	r0, [r4, #0]
 801d5d2:	3010      	adds	r0, #16
 801d5d4:	f7f6 ff3e 	bl	8014454 <rcl_publisher_is_valid>
 801d5d8:	b198      	cbz	r0, 801d602 <rcl_action_take_result_request+0x66>
 801d5da:	b1d5      	cbz	r5, 801d612 <rcl_action_take_result_request+0x76>
 801d5dc:	b1ce      	cbz	r6, 801d612 <rcl_action_take_result_request+0x76>
 801d5de:	6820      	ldr	r0, [r4, #0]
 801d5e0:	462a      	mov	r2, r5
 801d5e2:	4631      	mov	r1, r6
 801d5e4:	3008      	adds	r0, #8
 801d5e6:	f7fe f969 	bl	801b8bc <rcl_take_request>
 801d5ea:	b148      	cbz	r0, 801d600 <rcl_action_take_result_request+0x64>
 801d5ec:	280a      	cmp	r0, #10
 801d5ee:	d007      	beq.n	801d600 <rcl_action_take_result_request+0x64>
 801d5f0:	f240 2259 	movw	r2, #601	@ 0x259
 801d5f4:	f640 0399 	movw	r3, #2201	@ 0x899
 801d5f8:	4290      	cmp	r0, r2
 801d5fa:	bf0c      	ite	eq
 801d5fc:	4618      	moveq	r0, r3
 801d5fe:	2001      	movne	r0, #1
 801d600:	bd70      	pop	{r4, r5, r6, pc}
 801d602:	f7f7 ff85 	bl	8015510 <rcutils_reset_error>
 801d606:	f640 0098 	movw	r0, #2200	@ 0x898
 801d60a:	bd70      	pop	{r4, r5, r6, pc}
 801d60c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d610:	bd70      	pop	{r4, r5, r6, pc}
 801d612:	200b      	movs	r0, #11
 801d614:	bd70      	pop	{r4, r5, r6, pc}
 801d616:	f640 0098 	movw	r0, #2200	@ 0x898
 801d61a:	4770      	bx	lr

0801d61c <rcl_action_take_cancel_request>:
 801d61c:	2800      	cmp	r0, #0
 801d61e:	d03a      	beq.n	801d696 <rcl_action_take_cancel_request+0x7a>
 801d620:	b570      	push	{r4, r5, r6, lr}
 801d622:	4604      	mov	r4, r0
 801d624:	6800      	ldr	r0, [r0, #0]
 801d626:	b388      	cbz	r0, 801d68c <rcl_action_take_cancel_request+0x70>
 801d628:	460e      	mov	r6, r1
 801d62a:	4615      	mov	r5, r2
 801d62c:	f7fe f99e 	bl	801b96c <rcl_service_is_valid>
 801d630:	b338      	cbz	r0, 801d682 <rcl_action_take_cancel_request+0x66>
 801d632:	6820      	ldr	r0, [r4, #0]
 801d634:	3004      	adds	r0, #4
 801d636:	f7fe f999 	bl	801b96c <rcl_service_is_valid>
 801d63a:	b310      	cbz	r0, 801d682 <rcl_action_take_cancel_request+0x66>
 801d63c:	6820      	ldr	r0, [r4, #0]
 801d63e:	3008      	adds	r0, #8
 801d640:	f7fe f994 	bl	801b96c <rcl_service_is_valid>
 801d644:	b1e8      	cbz	r0, 801d682 <rcl_action_take_cancel_request+0x66>
 801d646:	6820      	ldr	r0, [r4, #0]
 801d648:	300c      	adds	r0, #12
 801d64a:	f7f6 ff03 	bl	8014454 <rcl_publisher_is_valid>
 801d64e:	b1c0      	cbz	r0, 801d682 <rcl_action_take_cancel_request+0x66>
 801d650:	6820      	ldr	r0, [r4, #0]
 801d652:	3010      	adds	r0, #16
 801d654:	f7f6 fefe 	bl	8014454 <rcl_publisher_is_valid>
 801d658:	b198      	cbz	r0, 801d682 <rcl_action_take_cancel_request+0x66>
 801d65a:	b1d5      	cbz	r5, 801d692 <rcl_action_take_cancel_request+0x76>
 801d65c:	b1ce      	cbz	r6, 801d692 <rcl_action_take_cancel_request+0x76>
 801d65e:	6820      	ldr	r0, [r4, #0]
 801d660:	462a      	mov	r2, r5
 801d662:	4631      	mov	r1, r6
 801d664:	3004      	adds	r0, #4
 801d666:	f7fe f929 	bl	801b8bc <rcl_take_request>
 801d66a:	b148      	cbz	r0, 801d680 <rcl_action_take_cancel_request+0x64>
 801d66c:	280a      	cmp	r0, #10
 801d66e:	d007      	beq.n	801d680 <rcl_action_take_cancel_request+0x64>
 801d670:	f240 2259 	movw	r2, #601	@ 0x259
 801d674:	f640 0399 	movw	r3, #2201	@ 0x899
 801d678:	4290      	cmp	r0, r2
 801d67a:	bf0c      	ite	eq
 801d67c:	4618      	moveq	r0, r3
 801d67e:	2001      	movne	r0, #1
 801d680:	bd70      	pop	{r4, r5, r6, pc}
 801d682:	f7f7 ff45 	bl	8015510 <rcutils_reset_error>
 801d686:	f640 0098 	movw	r0, #2200	@ 0x898
 801d68a:	bd70      	pop	{r4, r5, r6, pc}
 801d68c:	f640 0098 	movw	r0, #2200	@ 0x898
 801d690:	bd70      	pop	{r4, r5, r6, pc}
 801d692:	200b      	movs	r0, #11
 801d694:	bd70      	pop	{r4, r5, r6, pc}
 801d696:	f640 0098 	movw	r0, #2200	@ 0x898
 801d69a:	4770      	bx	lr

0801d69c <rcl_action_send_cancel_response>:
 801d69c:	b398      	cbz	r0, 801d706 <rcl_action_send_cancel_response+0x6a>
 801d69e:	b570      	push	{r4, r5, r6, lr}
 801d6a0:	4604      	mov	r4, r0
 801d6a2:	6800      	ldr	r0, [r0, #0]
 801d6a4:	b350      	cbz	r0, 801d6fc <rcl_action_send_cancel_response+0x60>
 801d6a6:	460e      	mov	r6, r1
 801d6a8:	4615      	mov	r5, r2
 801d6aa:	f7fe f95f 	bl	801b96c <rcl_service_is_valid>
 801d6ae:	b300      	cbz	r0, 801d6f2 <rcl_action_send_cancel_response+0x56>
 801d6b0:	6820      	ldr	r0, [r4, #0]
 801d6b2:	3004      	adds	r0, #4
 801d6b4:	f7fe f95a 	bl	801b96c <rcl_service_is_valid>
 801d6b8:	b1d8      	cbz	r0, 801d6f2 <rcl_action_send_cancel_response+0x56>
 801d6ba:	6820      	ldr	r0, [r4, #0]
 801d6bc:	3008      	adds	r0, #8
 801d6be:	f7fe f955 	bl	801b96c <rcl_service_is_valid>
 801d6c2:	b1b0      	cbz	r0, 801d6f2 <rcl_action_send_cancel_response+0x56>
 801d6c4:	6820      	ldr	r0, [r4, #0]
 801d6c6:	300c      	adds	r0, #12
 801d6c8:	f7f6 fec4 	bl	8014454 <rcl_publisher_is_valid>
 801d6cc:	b188      	cbz	r0, 801d6f2 <rcl_action_send_cancel_response+0x56>
 801d6ce:	6820      	ldr	r0, [r4, #0]
 801d6d0:	3010      	adds	r0, #16
 801d6d2:	f7f6 febf 	bl	8014454 <rcl_publisher_is_valid>
 801d6d6:	b160      	cbz	r0, 801d6f2 <rcl_action_send_cancel_response+0x56>
 801d6d8:	b19d      	cbz	r5, 801d702 <rcl_action_send_cancel_response+0x66>
 801d6da:	b196      	cbz	r6, 801d702 <rcl_action_send_cancel_response+0x66>
 801d6dc:	6820      	ldr	r0, [r4, #0]
 801d6de:	462a      	mov	r2, r5
 801d6e0:	4631      	mov	r1, r6
 801d6e2:	3004      	adds	r0, #4
 801d6e4:	f7fe f92a 	bl	801b93c <rcl_send_response>
 801d6e8:	b110      	cbz	r0, 801d6f0 <rcl_action_send_cancel_response+0x54>
 801d6ea:	2802      	cmp	r0, #2
 801d6ec:	bf18      	it	ne
 801d6ee:	2001      	movne	r0, #1
 801d6f0:	bd70      	pop	{r4, r5, r6, pc}
 801d6f2:	f7f7 ff0d 	bl	8015510 <rcutils_reset_error>
 801d6f6:	f640 0098 	movw	r0, #2200	@ 0x898
 801d6fa:	bd70      	pop	{r4, r5, r6, pc}
 801d6fc:	f640 0098 	movw	r0, #2200	@ 0x898
 801d700:	bd70      	pop	{r4, r5, r6, pc}
 801d702:	200b      	movs	r0, #11
 801d704:	bd70      	pop	{r4, r5, r6, pc}
 801d706:	f640 0098 	movw	r0, #2200	@ 0x898
 801d70a:	4770      	bx	lr

0801d70c <rcl_action_wait_set_add_action_server>:
 801d70c:	2800      	cmp	r0, #0
 801d70e:	d04d      	beq.n	801d7ac <rcl_action_wait_set_add_action_server+0xa0>
 801d710:	b570      	push	{r4, r5, r6, lr}
 801d712:	460c      	mov	r4, r1
 801d714:	b159      	cbz	r1, 801d72e <rcl_action_wait_set_add_action_server+0x22>
 801d716:	4605      	mov	r5, r0
 801d718:	6808      	ldr	r0, [r1, #0]
 801d71a:	b140      	cbz	r0, 801d72e <rcl_action_wait_set_add_action_server+0x22>
 801d71c:	4616      	mov	r6, r2
 801d71e:	f7fe f925 	bl	801b96c <rcl_service_is_valid>
 801d722:	b120      	cbz	r0, 801d72e <rcl_action_wait_set_add_action_server+0x22>
 801d724:	6820      	ldr	r0, [r4, #0]
 801d726:	3004      	adds	r0, #4
 801d728:	f7fe f920 	bl	801b96c <rcl_service_is_valid>
 801d72c:	b910      	cbnz	r0, 801d734 <rcl_action_wait_set_add_action_server+0x28>
 801d72e:	f640 0098 	movw	r0, #2200	@ 0x898
 801d732:	bd70      	pop	{r4, r5, r6, pc}
 801d734:	6820      	ldr	r0, [r4, #0]
 801d736:	3008      	adds	r0, #8
 801d738:	f7fe f918 	bl	801b96c <rcl_service_is_valid>
 801d73c:	2800      	cmp	r0, #0
 801d73e:	d0f6      	beq.n	801d72e <rcl_action_wait_set_add_action_server+0x22>
 801d740:	6820      	ldr	r0, [r4, #0]
 801d742:	300c      	adds	r0, #12
 801d744:	f7f6 fe9e 	bl	8014484 <rcl_publisher_is_valid_except_context>
 801d748:	2800      	cmp	r0, #0
 801d74a:	d0f0      	beq.n	801d72e <rcl_action_wait_set_add_action_server+0x22>
 801d74c:	6820      	ldr	r0, [r4, #0]
 801d74e:	3010      	adds	r0, #16
 801d750:	f7f6 fe98 	bl	8014484 <rcl_publisher_is_valid_except_context>
 801d754:	2800      	cmp	r0, #0
 801d756:	d0ea      	beq.n	801d72e <rcl_action_wait_set_add_action_server+0x22>
 801d758:	6821      	ldr	r1, [r4, #0]
 801d75a:	4628      	mov	r0, r5
 801d75c:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801d760:	f7ff fad0 	bl	801cd04 <rcl_wait_set_add_service>
 801d764:	2800      	cmp	r0, #0
 801d766:	d1e4      	bne.n	801d732 <rcl_action_wait_set_add_action_server+0x26>
 801d768:	6821      	ldr	r1, [r4, #0]
 801d76a:	4628      	mov	r0, r5
 801d76c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801d770:	3104      	adds	r1, #4
 801d772:	f7ff fac7 	bl	801cd04 <rcl_wait_set_add_service>
 801d776:	2800      	cmp	r0, #0
 801d778:	d1db      	bne.n	801d732 <rcl_action_wait_set_add_action_server+0x26>
 801d77a:	6821      	ldr	r1, [r4, #0]
 801d77c:	4628      	mov	r0, r5
 801d77e:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801d782:	3108      	adds	r1, #8
 801d784:	f7ff fabe 	bl	801cd04 <rcl_wait_set_add_service>
 801d788:	2800      	cmp	r0, #0
 801d78a:	d1d2      	bne.n	801d732 <rcl_action_wait_set_add_action_server+0x26>
 801d78c:	6821      	ldr	r1, [r4, #0]
 801d78e:	4628      	mov	r0, r5
 801d790:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801d794:	3114      	adds	r1, #20
 801d796:	f7ff fa59 	bl	801cc4c <rcl_wait_set_add_timer>
 801d79a:	2800      	cmp	r0, #0
 801d79c:	d1c9      	bne.n	801d732 <rcl_action_wait_set_add_action_server+0x26>
 801d79e:	2e00      	cmp	r6, #0
 801d7a0:	d0c7      	beq.n	801d732 <rcl_action_wait_set_add_action_server+0x26>
 801d7a2:	6823      	ldr	r3, [r4, #0]
 801d7a4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801d7a8:	6033      	str	r3, [r6, #0]
 801d7aa:	bd70      	pop	{r4, r5, r6, pc}
 801d7ac:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d7b0:	4770      	bx	lr
 801d7b2:	bf00      	nop

0801d7b4 <rcl_action_server_wait_set_get_entities_ready>:
 801d7b4:	2800      	cmp	r0, #0
 801d7b6:	d067      	beq.n	801d888 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7bc:	460c      	mov	r4, r1
 801d7be:	b161      	cbz	r1, 801d7da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7c0:	4605      	mov	r5, r0
 801d7c2:	6808      	ldr	r0, [r1, #0]
 801d7c4:	b148      	cbz	r0, 801d7da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7c6:	4616      	mov	r6, r2
 801d7c8:	4698      	mov	r8, r3
 801d7ca:	f7fe f8cf 	bl	801b96c <rcl_service_is_valid>
 801d7ce:	b120      	cbz	r0, 801d7da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7d0:	6820      	ldr	r0, [r4, #0]
 801d7d2:	3004      	adds	r0, #4
 801d7d4:	f7fe f8ca 	bl	801b96c <rcl_service_is_valid>
 801d7d8:	b918      	cbnz	r0, 801d7e2 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d7da:	f640 0098 	movw	r0, #2200	@ 0x898
 801d7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7e2:	6820      	ldr	r0, [r4, #0]
 801d7e4:	3008      	adds	r0, #8
 801d7e6:	f7fe f8c1 	bl	801b96c <rcl_service_is_valid>
 801d7ea:	2800      	cmp	r0, #0
 801d7ec:	d0f5      	beq.n	801d7da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7ee:	6820      	ldr	r0, [r4, #0]
 801d7f0:	300c      	adds	r0, #12
 801d7f2:	f7f6 fe47 	bl	8014484 <rcl_publisher_is_valid_except_context>
 801d7f6:	2800      	cmp	r0, #0
 801d7f8:	d0ef      	beq.n	801d7da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7fa:	6820      	ldr	r0, [r4, #0]
 801d7fc:	3010      	adds	r0, #16
 801d7fe:	f7f6 fe41 	bl	8014484 <rcl_publisher_is_valid_except_context>
 801d802:	2800      	cmp	r0, #0
 801d804:	d0e9      	beq.n	801d7da <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d80a:	2a00      	cmp	r2, #0
 801d80c:	bf18      	it	ne
 801d80e:	2b00      	cmpne	r3, #0
 801d810:	bf0c      	ite	eq
 801d812:	2101      	moveq	r1, #1
 801d814:	2100      	movne	r1, #0
 801d816:	f1b8 0f00 	cmp.w	r8, #0
 801d81a:	bf08      	it	eq
 801d81c:	f041 0101 	orreq.w	r1, r1, #1
 801d820:	bba9      	cbnz	r1, 801d88e <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d822:	b3a6      	cbz	r6, 801d88e <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d824:	6821      	ldr	r1, [r4, #0]
 801d826:	2000      	movs	r0, #0
 801d828:	692c      	ldr	r4, [r5, #16]
 801d82a:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 801d82e:	6a2f      	ldr	r7, [r5, #32]
 801d830:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d834:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 801d838:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801d83c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d840:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d844:	1a64      	subs	r4, r4, r1
 801d846:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 801d84a:	fab4 f484 	clz	r4, r4
 801d84e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d852:	0964      	lsrs	r4, r4, #5
 801d854:	7034      	strb	r4, [r6, #0]
 801d856:	1d0c      	adds	r4, r1, #4
 801d858:	1b2c      	subs	r4, r5, r4
 801d85a:	fab4 f484 	clz	r4, r4
 801d85e:	0964      	lsrs	r4, r4, #5
 801d860:	f888 4000 	strb.w	r4, [r8]
 801d864:	f101 0408 	add.w	r4, r1, #8
 801d868:	1b1b      	subs	r3, r3, r4
 801d86a:	9c06      	ldr	r4, [sp, #24]
 801d86c:	fab3 f383 	clz	r3, r3
 801d870:	095b      	lsrs	r3, r3, #5
 801d872:	7023      	strb	r3, [r4, #0]
 801d874:	f101 0314 	add.w	r3, r1, #20
 801d878:	1ad3      	subs	r3, r2, r3
 801d87a:	9a07      	ldr	r2, [sp, #28]
 801d87c:	fab3 f383 	clz	r3, r3
 801d880:	095b      	lsrs	r3, r3, #5
 801d882:	7013      	strb	r3, [r2, #0]
 801d884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d888:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801d88c:	4770      	bx	lr
 801d88e:	200b      	movs	r0, #11
 801d890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d894 <_execute_event_handler>:
 801d894:	2002      	movs	r0, #2
 801d896:	4770      	bx	lr

0801d898 <_cancel_goal_event_handler>:
 801d898:	2003      	movs	r0, #3
 801d89a:	4770      	bx	lr

0801d89c <_succeed_event_handler>:
 801d89c:	2004      	movs	r0, #4
 801d89e:	4770      	bx	lr

0801d8a0 <_abort_event_handler>:
 801d8a0:	2006      	movs	r0, #6
 801d8a2:	4770      	bx	lr

0801d8a4 <_canceled_event_handler>:
 801d8a4:	2005      	movs	r0, #5
 801d8a6:	4770      	bx	lr

0801d8a8 <rcl_action_transition_goal_state>:
 801d8a8:	b2c2      	uxtb	r2, r0
 801d8aa:	2a06      	cmp	r2, #6
 801d8ac:	d810      	bhi.n	801d8d0 <rcl_action_transition_goal_state+0x28>
 801d8ae:	2904      	cmp	r1, #4
 801d8b0:	d80e      	bhi.n	801d8d0 <rcl_action_transition_goal_state+0x28>
 801d8b2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d8b6:	b410      	push	{r4}
 801d8b8:	1853      	adds	r3, r2, r1
 801d8ba:	4c06      	ldr	r4, [pc, #24]	@ (801d8d4 <rcl_action_transition_goal_state+0x2c>)
 801d8bc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d8c0:	b113      	cbz	r3, 801d8c8 <rcl_action_transition_goal_state+0x20>
 801d8c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8c6:	4718      	bx	r3
 801d8c8:	2000      	movs	r0, #0
 801d8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8ce:	4770      	bx	lr
 801d8d0:	2000      	movs	r0, #0
 801d8d2:	4770      	bx	lr
 801d8d4:	08025530 	.word	0x08025530

0801d8d8 <rcl_action_get_zero_initialized_cancel_response>:
 801d8d8:	b510      	push	{r4, lr}
 801d8da:	4c07      	ldr	r4, [pc, #28]	@ (801d8f8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d8dc:	4686      	mov	lr, r0
 801d8de:	4684      	mov	ip, r0
 801d8e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d8e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d8e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d8e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d8ec:	6823      	ldr	r3, [r4, #0]
 801d8ee:	4670      	mov	r0, lr
 801d8f0:	f8cc 3000 	str.w	r3, [ip]
 801d8f4:	bd10      	pop	{r4, pc}
 801d8f6:	bf00      	nop
 801d8f8:	080255bc 	.word	0x080255bc

0801d8fc <rclc_action_send_result_request>:
 801d8fc:	b1d0      	cbz	r0, 801d934 <rclc_action_send_result_request+0x38>
 801d8fe:	4684      	mov	ip, r0
 801d900:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d904:	b500      	push	{lr}
 801d906:	b087      	sub	sp, #28
 801d908:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d90c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d910:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d914:	f10d 0e08 	add.w	lr, sp, #8
 801d918:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d91c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d920:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801d924:	a902      	add	r1, sp, #8
 801d926:	3010      	adds	r0, #16
 801d928:	f7ff fbca 	bl	801d0c0 <rcl_action_send_result_request>
 801d92c:	b920      	cbnz	r0, 801d938 <rclc_action_send_result_request+0x3c>
 801d92e:	b007      	add	sp, #28
 801d930:	f85d fb04 	ldr.w	pc, [sp], #4
 801d934:	200b      	movs	r0, #11
 801d936:	4770      	bx	lr
 801d938:	9001      	str	r0, [sp, #4]
 801d93a:	f7f7 fde9 	bl	8015510 <rcutils_reset_error>
 801d93e:	9801      	ldr	r0, [sp, #4]
 801d940:	b007      	add	sp, #28
 801d942:	f85d fb04 	ldr.w	pc, [sp], #4
 801d946:	bf00      	nop

0801d948 <rclc_action_take_goal_handle>:
 801d948:	b160      	cbz	r0, 801d964 <rclc_action_take_goal_handle+0x1c>
 801d94a:	6883      	ldr	r3, [r0, #8]
 801d94c:	b143      	cbz	r3, 801d960 <rclc_action_take_goal_handle+0x18>
 801d94e:	6819      	ldr	r1, [r3, #0]
 801d950:	2200      	movs	r2, #0
 801d952:	6081      	str	r1, [r0, #8]
 801d954:	721a      	strb	r2, [r3, #8]
 801d956:	68c1      	ldr	r1, [r0, #12]
 801d958:	621a      	str	r2, [r3, #32]
 801d95a:	849a      	strh	r2, [r3, #36]	@ 0x24
 801d95c:	6019      	str	r1, [r3, #0]
 801d95e:	60c3      	str	r3, [r0, #12]
 801d960:	4618      	mov	r0, r3
 801d962:	4770      	bx	lr
 801d964:	4603      	mov	r3, r0
 801d966:	e7fb      	b.n	801d960 <rclc_action_take_goal_handle+0x18>

0801d968 <rclc_action_remove_used_goal_handle>:
 801d968:	b180      	cbz	r0, 801d98c <rclc_action_remove_used_goal_handle+0x24>
 801d96a:	b179      	cbz	r1, 801d98c <rclc_action_remove_used_goal_handle+0x24>
 801d96c:	68c3      	ldr	r3, [r0, #12]
 801d96e:	4299      	cmp	r1, r3
 801d970:	d00d      	beq.n	801d98e <rclc_action_remove_used_goal_handle+0x26>
 801d972:	b12b      	cbz	r3, 801d980 <rclc_action_remove_used_goal_handle+0x18>
 801d974:	681a      	ldr	r2, [r3, #0]
 801d976:	4291      	cmp	r1, r2
 801d978:	d003      	beq.n	801d982 <rclc_action_remove_used_goal_handle+0x1a>
 801d97a:	4613      	mov	r3, r2
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d1f9      	bne.n	801d974 <rclc_action_remove_used_goal_handle+0xc>
 801d980:	4770      	bx	lr
 801d982:	680a      	ldr	r2, [r1, #0]
 801d984:	601a      	str	r2, [r3, #0]
 801d986:	6883      	ldr	r3, [r0, #8]
 801d988:	600b      	str	r3, [r1, #0]
 801d98a:	6081      	str	r1, [r0, #8]
 801d98c:	4770      	bx	lr
 801d98e:	680b      	ldr	r3, [r1, #0]
 801d990:	60c3      	str	r3, [r0, #12]
 801d992:	e7f8      	b.n	801d986 <rclc_action_remove_used_goal_handle+0x1e>

0801d994 <rclc_action_find_goal_handle_by_uuid>:
 801d994:	b538      	push	{r3, r4, r5, lr}
 801d996:	b181      	cbz	r1, 801d9ba <rclc_action_find_goal_handle_by_uuid+0x26>
 801d998:	b178      	cbz	r0, 801d9ba <rclc_action_find_goal_handle_by_uuid+0x26>
 801d99a:	68c4      	ldr	r4, [r0, #12]
 801d99c:	460d      	mov	r5, r1
 801d99e:	b914      	cbnz	r4, 801d9a6 <rclc_action_find_goal_handle_by_uuid+0x12>
 801d9a0:	e009      	b.n	801d9b6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d9a2:	6824      	ldr	r4, [r4, #0]
 801d9a4:	b13c      	cbz	r4, 801d9b6 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d9a6:	f104 0009 	add.w	r0, r4, #9
 801d9aa:	2210      	movs	r2, #16
 801d9ac:	4629      	mov	r1, r5
 801d9ae:	f004 fc65 	bl	802227c <memcmp>
 801d9b2:	2800      	cmp	r0, #0
 801d9b4:	d1f5      	bne.n	801d9a2 <rclc_action_find_goal_handle_by_uuid+0xe>
 801d9b6:	4620      	mov	r0, r4
 801d9b8:	bd38      	pop	{r3, r4, r5, pc}
 801d9ba:	2400      	movs	r4, #0
 801d9bc:	4620      	mov	r0, r4
 801d9be:	bd38      	pop	{r3, r4, r5, pc}

0801d9c0 <rclc_action_find_first_handle_by_status>:
 801d9c0:	b140      	cbz	r0, 801d9d4 <rclc_action_find_first_handle_by_status+0x14>
 801d9c2:	68c0      	ldr	r0, [r0, #12]
 801d9c4:	b910      	cbnz	r0, 801d9cc <rclc_action_find_first_handle_by_status+0xc>
 801d9c6:	e005      	b.n	801d9d4 <rclc_action_find_first_handle_by_status+0x14>
 801d9c8:	6800      	ldr	r0, [r0, #0]
 801d9ca:	b118      	cbz	r0, 801d9d4 <rclc_action_find_first_handle_by_status+0x14>
 801d9cc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d9d0:	428b      	cmp	r3, r1
 801d9d2:	d1f9      	bne.n	801d9c8 <rclc_action_find_first_handle_by_status+0x8>
 801d9d4:	4770      	bx	lr
 801d9d6:	bf00      	nop

0801d9d8 <rclc_action_find_first_terminated_handle>:
 801d9d8:	b140      	cbz	r0, 801d9ec <rclc_action_find_first_terminated_handle+0x14>
 801d9da:	68c0      	ldr	r0, [r0, #12]
 801d9dc:	b910      	cbnz	r0, 801d9e4 <rclc_action_find_first_terminated_handle+0xc>
 801d9de:	e005      	b.n	801d9ec <rclc_action_find_first_terminated_handle+0x14>
 801d9e0:	6800      	ldr	r0, [r0, #0]
 801d9e2:	b118      	cbz	r0, 801d9ec <rclc_action_find_first_terminated_handle+0x14>
 801d9e4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d9e8:	2b03      	cmp	r3, #3
 801d9ea:	ddf9      	ble.n	801d9e0 <rclc_action_find_first_terminated_handle+0x8>
 801d9ec:	4770      	bx	lr
 801d9ee:	bf00      	nop

0801d9f0 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d9f0:	b170      	cbz	r0, 801da10 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d9f2:	68c0      	ldr	r0, [r0, #12]
 801d9f4:	b160      	cbz	r0, 801da10 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d9f6:	b410      	push	{r4}
 801d9f8:	e001      	b.n	801d9fe <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d9fa:	6800      	ldr	r0, [r0, #0]
 801d9fc:	b128      	cbz	r0, 801da0a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d9fe:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801da02:	4299      	cmp	r1, r3
 801da04:	bf08      	it	eq
 801da06:	4294      	cmpeq	r4, r2
 801da08:	d1f7      	bne.n	801d9fa <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801da0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da0e:	4770      	bx	lr
 801da10:	4770      	bx	lr
 801da12:	bf00      	nop

0801da14 <rclc_action_find_handle_by_result_request_sequence_number>:
 801da14:	b170      	cbz	r0, 801da34 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801da16:	68c0      	ldr	r0, [r0, #12]
 801da18:	b160      	cbz	r0, 801da34 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801da1a:	b410      	push	{r4}
 801da1c:	e001      	b.n	801da22 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801da1e:	6800      	ldr	r0, [r0, #0]
 801da20:	b128      	cbz	r0, 801da2e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801da22:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801da26:	4299      	cmp	r1, r3
 801da28:	bf08      	it	eq
 801da2a:	4294      	cmpeq	r4, r2
 801da2c:	d1f7      	bne.n	801da1e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801da2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da32:	4770      	bx	lr
 801da34:	4770      	bx	lr
 801da36:	bf00      	nop

0801da38 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801da38:	b170      	cbz	r0, 801da58 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801da3a:	68c0      	ldr	r0, [r0, #12]
 801da3c:	b160      	cbz	r0, 801da58 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801da3e:	b410      	push	{r4}
 801da40:	e001      	b.n	801da46 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801da42:	6800      	ldr	r0, [r0, #0]
 801da44:	b128      	cbz	r0, 801da52 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801da46:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801da4a:	4299      	cmp	r1, r3
 801da4c:	bf08      	it	eq
 801da4e:	4294      	cmpeq	r4, r2
 801da50:	d1f7      	bne.n	801da42 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801da52:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da56:	4770      	bx	lr
 801da58:	4770      	bx	lr
 801da5a:	bf00      	nop

0801da5c <rclc_action_find_first_handle_with_goal_response>:
 801da5c:	b140      	cbz	r0, 801da70 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da5e:	68c0      	ldr	r0, [r0, #12]
 801da60:	b910      	cbnz	r0, 801da68 <rclc_action_find_first_handle_with_goal_response+0xc>
 801da62:	e005      	b.n	801da70 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da64:	6800      	ldr	r0, [r0, #0]
 801da66:	b118      	cbz	r0, 801da70 <rclc_action_find_first_handle_with_goal_response+0x14>
 801da68:	f890 3020 	ldrb.w	r3, [r0, #32]
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d0f9      	beq.n	801da64 <rclc_action_find_first_handle_with_goal_response+0x8>
 801da70:	4770      	bx	lr
 801da72:	bf00      	nop

0801da74 <rclc_action_find_first_handle_with_result_response>:
 801da74:	b140      	cbz	r0, 801da88 <rclc_action_find_first_handle_with_result_response+0x14>
 801da76:	68c0      	ldr	r0, [r0, #12]
 801da78:	b910      	cbnz	r0, 801da80 <rclc_action_find_first_handle_with_result_response+0xc>
 801da7a:	e005      	b.n	801da88 <rclc_action_find_first_handle_with_result_response+0x14>
 801da7c:	6800      	ldr	r0, [r0, #0]
 801da7e:	b118      	cbz	r0, 801da88 <rclc_action_find_first_handle_with_result_response+0x14>
 801da80:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801da84:	2b00      	cmp	r3, #0
 801da86:	d0f9      	beq.n	801da7c <rclc_action_find_first_handle_with_result_response+0x8>
 801da88:	4770      	bx	lr
 801da8a:	bf00      	nop

0801da8c <rclc_action_server_response_goal_request>:
 801da8c:	b198      	cbz	r0, 801dab6 <rclc_action_server_response_goal_request+0x2a>
 801da8e:	2200      	movs	r2, #0
 801da90:	460b      	mov	r3, r1
 801da92:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801da96:	b510      	push	{r4, lr}
 801da98:	6844      	ldr	r4, [r0, #4]
 801da9a:	b086      	sub	sp, #24
 801da9c:	f104 0010 	add.w	r0, r4, #16
 801daa0:	9205      	str	r2, [sp, #20]
 801daa2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801daa6:	aa03      	add	r2, sp, #12
 801daa8:	f88d 300c 	strb.w	r3, [sp, #12]
 801daac:	f7ff fd3e 	bl	801d52c <rcl_action_send_goal_response>
 801dab0:	b918      	cbnz	r0, 801daba <rclc_action_server_response_goal_request+0x2e>
 801dab2:	b006      	add	sp, #24
 801dab4:	bd10      	pop	{r4, pc}
 801dab6:	200b      	movs	r0, #11
 801dab8:	4770      	bx	lr
 801daba:	9001      	str	r0, [sp, #4]
 801dabc:	f7f7 fd28 	bl	8015510 <rcutils_reset_error>
 801dac0:	9801      	ldr	r0, [sp, #4]
 801dac2:	b006      	add	sp, #24
 801dac4:	bd10      	pop	{r4, pc}
 801dac6:	bf00      	nop

0801dac8 <rclc_action_server_goal_cancel_accept>:
 801dac8:	b310      	cbz	r0, 801db10 <rclc_action_server_goal_cancel_accept+0x48>
 801daca:	b510      	push	{r4, lr}
 801dacc:	b090      	sub	sp, #64	@ 0x40
 801dace:	4604      	mov	r4, r0
 801dad0:	a806      	add	r0, sp, #24
 801dad2:	f7ff ff01 	bl	801d8d8 <rcl_action_get_zero_initialized_cancel_response>
 801dad6:	2300      	movs	r3, #0
 801dad8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801dadc:	46ec      	mov	ip, sp
 801dade:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801dae2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801dae6:	f88d 3018 	strb.w	r3, [sp, #24]
 801daea:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801daee:	f8cd d01c 	str.w	sp, [sp, #28]
 801daf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801daf6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801db18 <rclc_action_server_goal_cancel_accept+0x50>
 801dafa:	6860      	ldr	r0, [r4, #4]
 801dafc:	aa06      	add	r2, sp, #24
 801dafe:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801db02:	3010      	adds	r0, #16
 801db04:	ed8d 7b08 	vstr	d7, [sp, #32]
 801db08:	f7ff fdc8 	bl	801d69c <rcl_action_send_cancel_response>
 801db0c:	b010      	add	sp, #64	@ 0x40
 801db0e:	bd10      	pop	{r4, pc}
 801db10:	200b      	movs	r0, #11
 801db12:	4770      	bx	lr
 801db14:	f3af 8000 	nop.w
 801db18:	00000001 	.word	0x00000001
 801db1c:	00000001 	.word	0x00000001

0801db20 <rclc_action_server_goal_cancel_reject>:
 801db20:	b082      	sub	sp, #8
 801db22:	b530      	push	{r4, r5, lr}
 801db24:	b08b      	sub	sp, #44	@ 0x2c
 801db26:	ac0e      	add	r4, sp, #56	@ 0x38
 801db28:	e884 000c 	stmia.w	r4, {r2, r3}
 801db2c:	b188      	cbz	r0, 801db52 <rclc_action_server_goal_cancel_reject+0x32>
 801db2e:	4604      	mov	r4, r0
 801db30:	a801      	add	r0, sp, #4
 801db32:	460d      	mov	r5, r1
 801db34:	f7ff fed0 	bl	801d8d8 <rcl_action_get_zero_initialized_cancel_response>
 801db38:	aa01      	add	r2, sp, #4
 801db3a:	a90e      	add	r1, sp, #56	@ 0x38
 801db3c:	f104 0010 	add.w	r0, r4, #16
 801db40:	f88d 5004 	strb.w	r5, [sp, #4]
 801db44:	f7ff fdaa 	bl	801d69c <rcl_action_send_cancel_response>
 801db48:	b00b      	add	sp, #44	@ 0x2c
 801db4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db4e:	b002      	add	sp, #8
 801db50:	4770      	bx	lr
 801db52:	200b      	movs	r0, #11
 801db54:	b00b      	add	sp, #44	@ 0x2c
 801db56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db5a:	b002      	add	sp, #8
 801db5c:	4770      	bx	lr
 801db5e:	bf00      	nop

0801db60 <__atomic_load_8>:
 801db60:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801db64:	4a16      	ldr	r2, [pc, #88]	@ (801dbc0 <__atomic_load_8+0x60>)
 801db66:	4b17      	ldr	r3, [pc, #92]	@ (801dbc4 <__atomic_load_8+0x64>)
 801db68:	f04f 0c01 	mov.w	ip, #1
 801db6c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801db70:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801db74:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801db78:	fb02 f101 	mul.w	r1, r2, r1
 801db7c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801db80:	fba3 2301 	umull	r2, r3, r3, r1
 801db84:	091b      	lsrs	r3, r3, #4
 801db86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801db8a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801db8e:	b4d0      	push	{r4, r6, r7}
 801db90:	1ac9      	subs	r1, r1, r3
 801db92:	4c0d      	ldr	r4, [pc, #52]	@ (801dbc8 <__atomic_load_8+0x68>)
 801db94:	1862      	adds	r2, r4, r1
 801db96:	e8d2 3f4f 	ldrexb	r3, [r2]
 801db9a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801db9e:	2e00      	cmp	r6, #0
 801dba0:	d1f9      	bne.n	801db96 <__atomic_load_8+0x36>
 801dba2:	b2db      	uxtb	r3, r3
 801dba4:	f3bf 8f5b 	dmb	ish
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	d1f4      	bne.n	801db96 <__atomic_load_8+0x36>
 801dbac:	e9d0 6700 	ldrd	r6, r7, [r0]
 801dbb0:	f3bf 8f5b 	dmb	ish
 801dbb4:	5463      	strb	r3, [r4, r1]
 801dbb6:	4630      	mov	r0, r6
 801dbb8:	4639      	mov	r1, r7
 801dbba:	bcd0      	pop	{r4, r6, r7}
 801dbbc:	4770      	bx	lr
 801dbbe:	bf00      	nop
 801dbc0:	27d4eb2d 	.word	0x27d4eb2d
 801dbc4:	b21642c9 	.word	0xb21642c9
 801dbc8:	24069358 	.word	0x24069358

0801dbcc <__atomic_store_8>:
 801dbcc:	b570      	push	{r4, r5, r6, lr}
 801dbce:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801dbd2:	4916      	ldr	r1, [pc, #88]	@ (801dc2c <__atomic_store_8+0x60>)
 801dbd4:	4c16      	ldr	r4, [pc, #88]	@ (801dc30 <__atomic_store_8+0x64>)
 801dbd6:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801dbda:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801dbde:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801dbe2:	fb01 fe0e 	mul.w	lr, r1, lr
 801dbe6:	4913      	ldr	r1, [pc, #76]	@ (801dc34 <__atomic_store_8+0x68>)
 801dbe8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801dbec:	fba1 510e 	umull	r5, r1, r1, lr
 801dbf0:	f04f 0501 	mov.w	r5, #1
 801dbf4:	0909      	lsrs	r1, r1, #4
 801dbf6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801dbfa:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801dbfe:	ebae 0e01 	sub.w	lr, lr, r1
 801dc02:	eb04 0c0e 	add.w	ip, r4, lr
 801dc06:	e8dc 1f4f 	ldrexb	r1, [ip]
 801dc0a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801dc0e:	2e00      	cmp	r6, #0
 801dc10:	d1f9      	bne.n	801dc06 <__atomic_store_8+0x3a>
 801dc12:	b2c9      	uxtb	r1, r1
 801dc14:	f3bf 8f5b 	dmb	ish
 801dc18:	2900      	cmp	r1, #0
 801dc1a:	d1f4      	bne.n	801dc06 <__atomic_store_8+0x3a>
 801dc1c:	e9c0 2300 	strd	r2, r3, [r0]
 801dc20:	f3bf 8f5b 	dmb	ish
 801dc24:	f804 100e 	strb.w	r1, [r4, lr]
 801dc28:	bd70      	pop	{r4, r5, r6, pc}
 801dc2a:	bf00      	nop
 801dc2c:	27d4eb2d 	.word	0x27d4eb2d
 801dc30:	24069358 	.word	0x24069358
 801dc34:	b21642c9 	.word	0xb21642c9

0801dc38 <__atomic_exchange_8>:
 801dc38:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801dc3c:	4917      	ldr	r1, [pc, #92]	@ (801dc9c <__atomic_exchange_8+0x64>)
 801dc3e:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801dc42:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801dc46:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dc4a:	fb01 fc0c 	mul.w	ip, r1, ip
 801dc4e:	4914      	ldr	r1, [pc, #80]	@ (801dca0 <__atomic_exchange_8+0x68>)
 801dc50:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dc54:	b570      	push	{r4, r5, r6, lr}
 801dc56:	4686      	mov	lr, r0
 801dc58:	fba1 010c 	umull	r0, r1, r1, ip
 801dc5c:	4d11      	ldr	r5, [pc, #68]	@ (801dca4 <__atomic_exchange_8+0x6c>)
 801dc5e:	f04f 0001 	mov.w	r0, #1
 801dc62:	0909      	lsrs	r1, r1, #4
 801dc64:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dc68:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dc6c:	ebac 0c01 	sub.w	ip, ip, r1
 801dc70:	eb05 010c 	add.w	r1, r5, ip
 801dc74:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dc78:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dc7c:	2e00      	cmp	r6, #0
 801dc7e:	d1f9      	bne.n	801dc74 <__atomic_exchange_8+0x3c>
 801dc80:	b2e4      	uxtb	r4, r4
 801dc82:	f3bf 8f5b 	dmb	ish
 801dc86:	2c00      	cmp	r4, #0
 801dc88:	d1f4      	bne.n	801dc74 <__atomic_exchange_8+0x3c>
 801dc8a:	e9de 0100 	ldrd	r0, r1, [lr]
 801dc8e:	e9ce 2300 	strd	r2, r3, [lr]
 801dc92:	f3bf 8f5b 	dmb	ish
 801dc96:	f805 400c 	strb.w	r4, [r5, ip]
 801dc9a:	bd70      	pop	{r4, r5, r6, pc}
 801dc9c:	27d4eb2d 	.word	0x27d4eb2d
 801dca0:	b21642c9 	.word	0xb21642c9
 801dca4:	24069358 	.word	0x24069358

0801dca8 <rcutils_get_env>:
 801dca8:	b168      	cbz	r0, 801dcc6 <rcutils_get_env+0x1e>
 801dcaa:	b510      	push	{r4, lr}
 801dcac:	460c      	mov	r4, r1
 801dcae:	b129      	cbz	r1, 801dcbc <rcutils_get_env+0x14>
 801dcb0:	f003 fe64 	bl	802197c <getenv>
 801dcb4:	b120      	cbz	r0, 801dcc0 <rcutils_get_env+0x18>
 801dcb6:	6020      	str	r0, [r4, #0]
 801dcb8:	2000      	movs	r0, #0
 801dcba:	bd10      	pop	{r4, pc}
 801dcbc:	4803      	ldr	r0, [pc, #12]	@ (801dccc <rcutils_get_env+0x24>)
 801dcbe:	bd10      	pop	{r4, pc}
 801dcc0:	4b03      	ldr	r3, [pc, #12]	@ (801dcd0 <rcutils_get_env+0x28>)
 801dcc2:	6023      	str	r3, [r4, #0]
 801dcc4:	bd10      	pop	{r4, pc}
 801dcc6:	4803      	ldr	r0, [pc, #12]	@ (801dcd4 <rcutils_get_env+0x2c>)
 801dcc8:	4770      	bx	lr
 801dcca:	bf00      	nop
 801dccc:	080255fc 	.word	0x080255fc
 801dcd0:	08025a84 	.word	0x08025a84
 801dcd4:	080255e0 	.word	0x080255e0

0801dcd8 <rcutils_is_directory>:
 801dcd8:	2000      	movs	r0, #0
 801dcda:	4770      	bx	lr

0801dcdc <rcutils_join_path>:
 801dcdc:	b082      	sub	sp, #8
 801dcde:	2000      	movs	r0, #0
 801dce0:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dce4:	b002      	add	sp, #8
 801dce6:	4770      	bx	lr

0801dce8 <rcutils_to_native_path>:
 801dce8:	b084      	sub	sp, #16
 801dcea:	2000      	movs	r0, #0
 801dcec:	f10d 0c04 	add.w	ip, sp, #4
 801dcf0:	b004      	add	sp, #16
 801dcf2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801dcf6:	4770      	bx	lr

0801dcf8 <rcutils_format_string_limit>:
 801dcf8:	b40f      	push	{r0, r1, r2, r3}
 801dcfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcfc:	b083      	sub	sp, #12
 801dcfe:	ac08      	add	r4, sp, #32
 801dd00:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801dd02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801dd06:	b326      	cbz	r6, 801dd52 <rcutils_format_string_limit+0x5a>
 801dd08:	a808      	add	r0, sp, #32
 801dd0a:	f7f7 fbdd 	bl	80154c8 <rcutils_allocator_is_valid>
 801dd0e:	b300      	cbz	r0, 801dd52 <rcutils_format_string_limit+0x5a>
 801dd10:	2100      	movs	r1, #0
 801dd12:	ab0f      	add	r3, sp, #60	@ 0x3c
 801dd14:	4632      	mov	r2, r6
 801dd16:	4608      	mov	r0, r1
 801dd18:	e9cd 3300 	strd	r3, r3, [sp]
 801dd1c:	f000 f906 	bl	801df2c <rcutils_vsnprintf>
 801dd20:	1c43      	adds	r3, r0, #1
 801dd22:	4605      	mov	r5, r0
 801dd24:	d015      	beq.n	801dd52 <rcutils_format_string_limit+0x5a>
 801dd26:	1c47      	adds	r7, r0, #1
 801dd28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd2a:	429f      	cmp	r7, r3
 801dd2c:	d901      	bls.n	801dd32 <rcutils_format_string_limit+0x3a>
 801dd2e:	1e5d      	subs	r5, r3, #1
 801dd30:	461f      	mov	r7, r3
 801dd32:	9b08      	ldr	r3, [sp, #32]
 801dd34:	4638      	mov	r0, r7
 801dd36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dd38:	4798      	blx	r3
 801dd3a:	4604      	mov	r4, r0
 801dd3c:	b148      	cbz	r0, 801dd52 <rcutils_format_string_limit+0x5a>
 801dd3e:	4632      	mov	r2, r6
 801dd40:	4639      	mov	r1, r7
 801dd42:	9b01      	ldr	r3, [sp, #4]
 801dd44:	f000 f8f2 	bl	801df2c <rcutils_vsnprintf>
 801dd48:	2800      	cmp	r0, #0
 801dd4a:	db09      	blt.n	801dd60 <rcutils_format_string_limit+0x68>
 801dd4c:	2300      	movs	r3, #0
 801dd4e:	5563      	strb	r3, [r4, r5]
 801dd50:	e000      	b.n	801dd54 <rcutils_format_string_limit+0x5c>
 801dd52:	2400      	movs	r4, #0
 801dd54:	4620      	mov	r0, r4
 801dd56:	b003      	add	sp, #12
 801dd58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801dd5c:	b004      	add	sp, #16
 801dd5e:	4770      	bx	lr
 801dd60:	4620      	mov	r0, r4
 801dd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd64:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dd66:	2400      	movs	r4, #0
 801dd68:	4798      	blx	r3
 801dd6a:	e7f3      	b.n	801dd54 <rcutils_format_string_limit+0x5c>

0801dd6c <rcutils_repl_str>:
 801dd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd70:	ed2d 8b02 	vpush	{d8}
 801dd74:	b087      	sub	sp, #28
 801dd76:	2600      	movs	r6, #0
 801dd78:	4680      	mov	r8, r0
 801dd7a:	468a      	mov	sl, r1
 801dd7c:	9000      	str	r0, [sp, #0]
 801dd7e:	4608      	mov	r0, r1
 801dd80:	ee08 2a10 	vmov	s16, r2
 801dd84:	4699      	mov	r9, r3
 801dd86:	2510      	movs	r5, #16
 801dd88:	f7e2 fab4 	bl	80002f4 <strlen>
 801dd8c:	4637      	mov	r7, r6
 801dd8e:	46b3      	mov	fp, r6
 801dd90:	9001      	str	r0, [sp, #4]
 801dd92:	e01e      	b.n	801ddd2 <rcutils_repl_str+0x66>
 801dd94:	f10b 0b01 	add.w	fp, fp, #1
 801dd98:	9b01      	ldr	r3, [sp, #4]
 801dd9a:	455e      	cmp	r6, fp
 801dd9c:	eb04 0803 	add.w	r8, r4, r3
 801dda0:	d211      	bcs.n	801ddc6 <rcutils_repl_str+0x5a>
 801dda2:	442e      	add	r6, r5
 801dda4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801dda8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801ddac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ddb0:	00b1      	lsls	r1, r6, #2
 801ddb2:	4798      	blx	r3
 801ddb4:	2800      	cmp	r0, #0
 801ddb6:	f000 8088 	beq.w	801deca <rcutils_repl_str+0x15e>
 801ddba:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801ddbe:	4607      	mov	r7, r0
 801ddc0:	bf28      	it	cs
 801ddc2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801ddc6:	9a00      	ldr	r2, [sp, #0]
 801ddc8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801ddcc:	1aa4      	subs	r4, r4, r2
 801ddce:	f843 4c04 	str.w	r4, [r3, #-4]
 801ddd2:	4651      	mov	r1, sl
 801ddd4:	4640      	mov	r0, r8
 801ddd6:	f004 faa2 	bl	802231e <strstr>
 801ddda:	4604      	mov	r4, r0
 801dddc:	4638      	mov	r0, r7
 801ddde:	2c00      	cmp	r4, #0
 801dde0:	d1d8      	bne.n	801dd94 <rcutils_repl_str+0x28>
 801dde2:	4640      	mov	r0, r8
 801dde4:	f7e2 fa86 	bl	80002f4 <strlen>
 801dde8:	9b00      	ldr	r3, [sp, #0]
 801ddea:	eba8 0803 	sub.w	r8, r8, r3
 801ddee:	eb08 0400 	add.w	r4, r8, r0
 801ddf2:	9402      	str	r4, [sp, #8]
 801ddf4:	f1bb 0f00 	cmp.w	fp, #0
 801ddf8:	d045      	beq.n	801de86 <rcutils_repl_str+0x11a>
 801ddfa:	ee18 0a10 	vmov	r0, s16
 801ddfe:	f7e2 fa79 	bl	80002f4 <strlen>
 801de02:	9a01      	ldr	r2, [sp, #4]
 801de04:	4606      	mov	r6, r0
 801de06:	f8d9 3000 	ldr.w	r3, [r9]
 801de0a:	1a82      	subs	r2, r0, r2
 801de0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801de10:	fb0b 4202 	mla	r2, fp, r2, r4
 801de14:	1c50      	adds	r0, r2, #1
 801de16:	9205      	str	r2, [sp, #20]
 801de18:	4798      	blx	r3
 801de1a:	4682      	mov	sl, r0
 801de1c:	2800      	cmp	r0, #0
 801de1e:	d054      	beq.n	801deca <rcutils_repl_str+0x15e>
 801de20:	683a      	ldr	r2, [r7, #0]
 801de22:	463d      	mov	r5, r7
 801de24:	9900      	ldr	r1, [sp, #0]
 801de26:	2401      	movs	r4, #1
 801de28:	f004 fb71 	bl	802250e <memcpy>
 801de2c:	683b      	ldr	r3, [r7, #0]
 801de2e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801de32:	eb0a 0803 	add.w	r8, sl, r3
 801de36:	ee18 7a10 	vmov	r7, s16
 801de3a:	f8dd a000 	ldr.w	sl, [sp]
 801de3e:	f8cd 9000 	str.w	r9, [sp]
 801de42:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801de46:	4632      	mov	r2, r6
 801de48:	4639      	mov	r1, r7
 801de4a:	4640      	mov	r0, r8
 801de4c:	44b0      	add	r8, r6
 801de4e:	f004 fb5e 	bl	802250e <memcpy>
 801de52:	f855 2b04 	ldr.w	r2, [r5], #4
 801de56:	45a3      	cmp	fp, r4
 801de58:	444a      	add	r2, r9
 801de5a:	eb0a 0102 	add.w	r1, sl, r2
 801de5e:	d02a      	beq.n	801deb6 <rcutils_repl_str+0x14a>
 801de60:	6828      	ldr	r0, [r5, #0]
 801de62:	1a82      	subs	r2, r0, r2
 801de64:	4640      	mov	r0, r8
 801de66:	4490      	add	r8, r2
 801de68:	f004 fb51 	bl	802250e <memcpy>
 801de6c:	1c62      	adds	r2, r4, #1
 801de6e:	45a3      	cmp	fp, r4
 801de70:	4614      	mov	r4, r2
 801de72:	d8e8      	bhi.n	801de46 <rcutils_repl_str+0xda>
 801de74:	f8dd 9000 	ldr.w	r9, [sp]
 801de78:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801de7c:	2300      	movs	r3, #0
 801de7e:	9a05      	ldr	r2, [sp, #20]
 801de80:	f80a 3002 	strb.w	r3, [sl, r2]
 801de84:	e00b      	b.n	801de9e <rcutils_repl_str+0x132>
 801de86:	4620      	mov	r0, r4
 801de88:	f8d9 3000 	ldr.w	r3, [r9]
 801de8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801de90:	3001      	adds	r0, #1
 801de92:	4798      	blx	r3
 801de94:	4682      	mov	sl, r0
 801de96:	b110      	cbz	r0, 801de9e <rcutils_repl_str+0x132>
 801de98:	9900      	ldr	r1, [sp, #0]
 801de9a:	f004 fb30 	bl	80224fe <strcpy>
 801de9e:	4638      	mov	r0, r7
 801dea0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801dea4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801dea8:	4798      	blx	r3
 801deaa:	4650      	mov	r0, sl
 801deac:	b007      	add	sp, #28
 801deae:	ecbd 8b02 	vpop	{d8}
 801deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deb6:	9b02      	ldr	r3, [sp, #8]
 801deb8:	4640      	mov	r0, r8
 801deba:	f8dd 9000 	ldr.w	r9, [sp]
 801debe:	1a9a      	subs	r2, r3, r2
 801dec0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801dec4:	f004 fb23 	bl	802250e <memcpy>
 801dec8:	e7d8      	b.n	801de7c <rcutils_repl_str+0x110>
 801deca:	f04f 0a00 	mov.w	sl, #0
 801dece:	e7e6      	b.n	801de9e <rcutils_repl_str+0x132>

0801ded0 <rcutils_snprintf>:
 801ded0:	b40c      	push	{r2, r3}
 801ded2:	b530      	push	{r4, r5, lr}
 801ded4:	b083      	sub	sp, #12
 801ded6:	ab06      	add	r3, sp, #24
 801ded8:	f853 2b04 	ldr.w	r2, [r3], #4
 801dedc:	9301      	str	r3, [sp, #4]
 801dede:	b1e2      	cbz	r2, 801df1a <rcutils_snprintf+0x4a>
 801dee0:	fab0 f480 	clz	r4, r0
 801dee4:	fab1 f581 	clz	r5, r1
 801dee8:	ea50 0c01 	orrs.w	ip, r0, r1
 801deec:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801def0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801def4:	d008      	beq.n	801df08 <rcutils_snprintf+0x38>
 801def6:	b984      	cbnz	r4, 801df1a <rcutils_snprintf+0x4a>
 801def8:	b97d      	cbnz	r5, 801df1a <rcutils_snprintf+0x4a>
 801defa:	f004 f91d 	bl	8022138 <vsniprintf>
 801defe:	b003      	add	sp, #12
 801df00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df04:	b002      	add	sp, #8
 801df06:	4770      	bx	lr
 801df08:	4661      	mov	r1, ip
 801df0a:	4660      	mov	r0, ip
 801df0c:	f004 f914 	bl	8022138 <vsniprintf>
 801df10:	b003      	add	sp, #12
 801df12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df16:	b002      	add	sp, #8
 801df18:	4770      	bx	lr
 801df1a:	f004 fac3 	bl	80224a4 <__errno>
 801df1e:	2216      	movs	r2, #22
 801df20:	4603      	mov	r3, r0
 801df22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df26:	601a      	str	r2, [r3, #0]
 801df28:	e7e9      	b.n	801defe <rcutils_snprintf+0x2e>
 801df2a:	bf00      	nop

0801df2c <rcutils_vsnprintf>:
 801df2c:	b570      	push	{r4, r5, r6, lr}
 801df2e:	b1b2      	cbz	r2, 801df5e <rcutils_vsnprintf+0x32>
 801df30:	fab0 f480 	clz	r4, r0
 801df34:	fab1 f581 	clz	r5, r1
 801df38:	ea50 0c01 	orrs.w	ip, r0, r1
 801df3c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801df40:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801df44:	d005      	beq.n	801df52 <rcutils_vsnprintf+0x26>
 801df46:	b954      	cbnz	r4, 801df5e <rcutils_vsnprintf+0x32>
 801df48:	b94d      	cbnz	r5, 801df5e <rcutils_vsnprintf+0x32>
 801df4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df4e:	f004 b8f3 	b.w	8022138 <vsniprintf>
 801df52:	4661      	mov	r1, ip
 801df54:	4660      	mov	r0, ip
 801df56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df5a:	f004 b8ed 	b.w	8022138 <vsniprintf>
 801df5e:	f004 faa1 	bl	80224a4 <__errno>
 801df62:	2316      	movs	r3, #22
 801df64:	6003      	str	r3, [r0, #0]
 801df66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801df6a:	bd70      	pop	{r4, r5, r6, pc}

0801df6c <rcutils_strdup>:
 801df6c:	b084      	sub	sp, #16
 801df6e:	b570      	push	{r4, r5, r6, lr}
 801df70:	b082      	sub	sp, #8
 801df72:	4605      	mov	r5, r0
 801df74:	ac07      	add	r4, sp, #28
 801df76:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801df7a:	b1b0      	cbz	r0, 801dfaa <rcutils_strdup+0x3e>
 801df7c:	f7e2 f9ba 	bl	80002f4 <strlen>
 801df80:	1c42      	adds	r2, r0, #1
 801df82:	9b07      	ldr	r3, [sp, #28]
 801df84:	4606      	mov	r6, r0
 801df86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801df88:	4610      	mov	r0, r2
 801df8a:	9201      	str	r2, [sp, #4]
 801df8c:	4798      	blx	r3
 801df8e:	4604      	mov	r4, r0
 801df90:	b128      	cbz	r0, 801df9e <rcutils_strdup+0x32>
 801df92:	9a01      	ldr	r2, [sp, #4]
 801df94:	4629      	mov	r1, r5
 801df96:	f004 faba 	bl	802250e <memcpy>
 801df9a:	2300      	movs	r3, #0
 801df9c:	55a3      	strb	r3, [r4, r6]
 801df9e:	4620      	mov	r0, r4
 801dfa0:	b002      	add	sp, #8
 801dfa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfa6:	b004      	add	sp, #16
 801dfa8:	4770      	bx	lr
 801dfaa:	4604      	mov	r4, r0
 801dfac:	e7f7      	b.n	801df9e <rcutils_strdup+0x32>
 801dfae:	bf00      	nop

0801dfb0 <rcutils_strndup>:
 801dfb0:	b082      	sub	sp, #8
 801dfb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfb4:	ac06      	add	r4, sp, #24
 801dfb6:	4605      	mov	r5, r0
 801dfb8:	e884 000c 	stmia.w	r4, {r2, r3}
 801dfbc:	b188      	cbz	r0, 801dfe2 <rcutils_strndup+0x32>
 801dfbe:	1c4f      	adds	r7, r1, #1
 801dfc0:	460e      	mov	r6, r1
 801dfc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dfc4:	4638      	mov	r0, r7
 801dfc6:	4790      	blx	r2
 801dfc8:	4604      	mov	r4, r0
 801dfca:	b128      	cbz	r0, 801dfd8 <rcutils_strndup+0x28>
 801dfcc:	463a      	mov	r2, r7
 801dfce:	4629      	mov	r1, r5
 801dfd0:	f004 fa9d 	bl	802250e <memcpy>
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	55a3      	strb	r3, [r4, r6]
 801dfd8:	4620      	mov	r0, r4
 801dfda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801dfde:	b002      	add	sp, #8
 801dfe0:	4770      	bx	lr
 801dfe2:	4604      	mov	r4, r0
 801dfe4:	e7f8      	b.n	801dfd8 <rcutils_strndup+0x28>
 801dfe6:	bf00      	nop

0801dfe8 <rcutils_get_zero_initialized_string_map>:
 801dfe8:	2000      	movs	r0, #0
 801dfea:	4b01      	ldr	r3, [pc, #4]	@ (801dff0 <rcutils_get_zero_initialized_string_map+0x8>)
 801dfec:	6018      	str	r0, [r3, #0]
 801dfee:	4770      	bx	lr
 801dff0:	24069370 	.word	0x24069370

0801dff4 <rcutils_string_map_reserve>:
 801dff4:	2800      	cmp	r0, #0
 801dff6:	d05e      	beq.n	801e0b6 <rcutils_string_map_reserve+0xc2>
 801dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dffc:	460c      	mov	r4, r1
 801dffe:	6801      	ldr	r1, [r0, #0]
 801e000:	b082      	sub	sp, #8
 801e002:	4605      	mov	r5, r0
 801e004:	b129      	cbz	r1, 801e012 <rcutils_string_map_reserve+0x1e>
 801e006:	68cb      	ldr	r3, [r1, #12]
 801e008:	42a3      	cmp	r3, r4
 801e00a:	d906      	bls.n	801e01a <rcutils_string_map_reserve+0x26>
 801e00c:	461c      	mov	r4, r3
 801e00e:	2900      	cmp	r1, #0
 801e010:	d1f9      	bne.n	801e006 <rcutils_string_map_reserve+0x12>
 801e012:	201f      	movs	r0, #31
 801e014:	b002      	add	sp, #8
 801e016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e01a:	688b      	ldr	r3, [r1, #8]
 801e01c:	42a3      	cmp	r3, r4
 801e01e:	d046      	beq.n	801e0ae <rcutils_string_map_reserve+0xba>
 801e020:	6a0e      	ldr	r6, [r1, #32]
 801e022:	2c00      	cmp	r4, #0
 801e024:	d033      	beq.n	801e08e <rcutils_string_map_reserve+0x9a>
 801e026:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801e02a:	d242      	bcs.n	801e0b2 <rcutils_string_map_reserve+0xbe>
 801e02c:	00a7      	lsls	r7, r4, #2
 801e02e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801e032:	6808      	ldr	r0, [r1, #0]
 801e034:	4632      	mov	r2, r6
 801e036:	4639      	mov	r1, r7
 801e038:	47c0      	blx	r8
 801e03a:	2800      	cmp	r0, #0
 801e03c:	d039      	beq.n	801e0b2 <rcutils_string_map_reserve+0xbe>
 801e03e:	682b      	ldr	r3, [r5, #0]
 801e040:	4632      	mov	r2, r6
 801e042:	4639      	mov	r1, r7
 801e044:	6018      	str	r0, [r3, #0]
 801e046:	6858      	ldr	r0, [r3, #4]
 801e048:	47c0      	blx	r8
 801e04a:	2800      	cmp	r0, #0
 801e04c:	d031      	beq.n	801e0b2 <rcutils_string_map_reserve+0xbe>
 801e04e:	682d      	ldr	r5, [r5, #0]
 801e050:	68ab      	ldr	r3, [r5, #8]
 801e052:	6068      	str	r0, [r5, #4]
 801e054:	42a3      	cmp	r3, r4
 801e056:	d225      	bcs.n	801e0a4 <rcutils_string_map_reserve+0xb0>
 801e058:	682a      	ldr	r2, [r5, #0]
 801e05a:	eb00 0c07 	add.w	ip, r0, r7
 801e05e:	0099      	lsls	r1, r3, #2
 801e060:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801e064:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801e068:	45e6      	cmp	lr, ip
 801e06a:	d203      	bcs.n	801e074 <rcutils_string_map_reserve+0x80>
 801e06c:	eb02 0c07 	add.w	ip, r2, r7
 801e070:	4566      	cmp	r6, ip
 801e072:	d322      	bcc.n	801e0ba <rcutils_string_map_reserve+0xc6>
 801e074:	1ae3      	subs	r3, r4, r3
 801e076:	4670      	mov	r0, lr
 801e078:	2100      	movs	r1, #0
 801e07a:	009a      	lsls	r2, r3, #2
 801e07c:	9201      	str	r2, [sp, #4]
 801e07e:	f004 f927 	bl	80222d0 <memset>
 801e082:	9a01      	ldr	r2, [sp, #4]
 801e084:	2100      	movs	r1, #0
 801e086:	4630      	mov	r0, r6
 801e088:	f004 f922 	bl	80222d0 <memset>
 801e08c:	e00a      	b.n	801e0a4 <rcutils_string_map_reserve+0xb0>
 801e08e:	694f      	ldr	r7, [r1, #20]
 801e090:	6808      	ldr	r0, [r1, #0]
 801e092:	4631      	mov	r1, r6
 801e094:	47b8      	blx	r7
 801e096:	682b      	ldr	r3, [r5, #0]
 801e098:	4631      	mov	r1, r6
 801e09a:	6858      	ldr	r0, [r3, #4]
 801e09c:	601c      	str	r4, [r3, #0]
 801e09e:	47b8      	blx	r7
 801e0a0:	682d      	ldr	r5, [r5, #0]
 801e0a2:	606c      	str	r4, [r5, #4]
 801e0a4:	2000      	movs	r0, #0
 801e0a6:	60ac      	str	r4, [r5, #8]
 801e0a8:	b002      	add	sp, #8
 801e0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0ae:	2000      	movs	r0, #0
 801e0b0:	e7b0      	b.n	801e014 <rcutils_string_map_reserve+0x20>
 801e0b2:	200a      	movs	r0, #10
 801e0b4:	e7ae      	b.n	801e014 <rcutils_string_map_reserve+0x20>
 801e0b6:	200b      	movs	r0, #11
 801e0b8:	4770      	bx	lr
 801e0ba:	1f0b      	subs	r3, r1, #4
 801e0bc:	4418      	add	r0, r3
 801e0be:	4413      	add	r3, r2
 801e0c0:	3a04      	subs	r2, #4
 801e0c2:	4417      	add	r7, r2
 801e0c4:	2200      	movs	r2, #0
 801e0c6:	f843 2f04 	str.w	r2, [r3, #4]!
 801e0ca:	42bb      	cmp	r3, r7
 801e0cc:	f840 2f04 	str.w	r2, [r0, #4]!
 801e0d0:	d1f9      	bne.n	801e0c6 <rcutils_string_map_reserve+0xd2>
 801e0d2:	e7e7      	b.n	801e0a4 <rcutils_string_map_reserve+0xb0>

0801e0d4 <rcutils_string_map_init>:
 801e0d4:	b082      	sub	sp, #8
 801e0d6:	b570      	push	{r4, r5, r6, lr}
 801e0d8:	ac04      	add	r4, sp, #16
 801e0da:	e884 000c 	stmia.w	r4, {r2, r3}
 801e0de:	b380      	cbz	r0, 801e142 <rcutils_string_map_init+0x6e>
 801e0e0:	6806      	ldr	r6, [r0, #0]
 801e0e2:	4604      	mov	r4, r0
 801e0e4:	b12e      	cbz	r6, 801e0f2 <rcutils_string_map_init+0x1e>
 801e0e6:	251e      	movs	r5, #30
 801e0e8:	4628      	mov	r0, r5
 801e0ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e0ee:	b002      	add	sp, #8
 801e0f0:	4770      	bx	lr
 801e0f2:	a804      	add	r0, sp, #16
 801e0f4:	460d      	mov	r5, r1
 801e0f6:	f7f7 f9e7 	bl	80154c8 <rcutils_allocator_is_valid>
 801e0fa:	b310      	cbz	r0, 801e142 <rcutils_string_map_init+0x6e>
 801e0fc:	9b04      	ldr	r3, [sp, #16]
 801e0fe:	2024      	movs	r0, #36	@ 0x24
 801e100:	9908      	ldr	r1, [sp, #32]
 801e102:	4798      	blx	r3
 801e104:	6020      	str	r0, [r4, #0]
 801e106:	b310      	cbz	r0, 801e14e <rcutils_string_map_init+0x7a>
 801e108:	f10d 0e10 	add.w	lr, sp, #16
 801e10c:	f100 0c10 	add.w	ip, r0, #16
 801e110:	e9c0 6600 	strd	r6, r6, [r0]
 801e114:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801e118:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e11c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e120:	f8de 3000 	ldr.w	r3, [lr]
 801e124:	4629      	mov	r1, r5
 801e126:	4620      	mov	r0, r4
 801e128:	f8cc 3000 	str.w	r3, [ip]
 801e12c:	f7ff ff62 	bl	801dff4 <rcutils_string_map_reserve>
 801e130:	4605      	mov	r5, r0
 801e132:	2800      	cmp	r0, #0
 801e134:	d0d8      	beq.n	801e0e8 <rcutils_string_map_init+0x14>
 801e136:	9b05      	ldr	r3, [sp, #20]
 801e138:	9908      	ldr	r1, [sp, #32]
 801e13a:	6820      	ldr	r0, [r4, #0]
 801e13c:	4798      	blx	r3
 801e13e:	6026      	str	r6, [r4, #0]
 801e140:	e7d2      	b.n	801e0e8 <rcutils_string_map_init+0x14>
 801e142:	250b      	movs	r5, #11
 801e144:	4628      	mov	r0, r5
 801e146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e14a:	b002      	add	sp, #8
 801e14c:	4770      	bx	lr
 801e14e:	250a      	movs	r5, #10
 801e150:	e7ca      	b.n	801e0e8 <rcutils_string_map_init+0x14>
 801e152:	bf00      	nop

0801e154 <rcutils_string_map_fini>:
 801e154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e158:	b082      	sub	sp, #8
 801e15a:	2800      	cmp	r0, #0
 801e15c:	d03a      	beq.n	801e1d4 <rcutils_string_map_fini+0x80>
 801e15e:	6804      	ldr	r4, [r0, #0]
 801e160:	4606      	mov	r6, r0
 801e162:	2c00      	cmp	r4, #0
 801e164:	d032      	beq.n	801e1cc <rcutils_string_map_fini+0x78>
 801e166:	68a3      	ldr	r3, [r4, #8]
 801e168:	b32b      	cbz	r3, 801e1b6 <rcutils_string_map_fini+0x62>
 801e16a:	2500      	movs	r5, #0
 801e16c:	6822      	ldr	r2, [r4, #0]
 801e16e:	462f      	mov	r7, r5
 801e170:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e174:	b1e0      	cbz	r0, 801e1b0 <rcutils_string_map_fini+0x5c>
 801e176:	6a21      	ldr	r1, [r4, #32]
 801e178:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801e17c:	9101      	str	r1, [sp, #4]
 801e17e:	47c0      	blx	r8
 801e180:	9901      	ldr	r1, [sp, #4]
 801e182:	e9d4 3200 	ldrd	r3, r2, [r4]
 801e186:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801e18a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e18e:	47c0      	blx	r8
 801e190:	68e3      	ldr	r3, [r4, #12]
 801e192:	6862      	ldr	r2, [r4, #4]
 801e194:	3b01      	subs	r3, #1
 801e196:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801e19a:	3501      	adds	r5, #1
 801e19c:	60e3      	str	r3, [r4, #12]
 801e19e:	6834      	ldr	r4, [r6, #0]
 801e1a0:	68a3      	ldr	r3, [r4, #8]
 801e1a2:	429d      	cmp	r5, r3
 801e1a4:	d207      	bcs.n	801e1b6 <rcutils_string_map_fini+0x62>
 801e1a6:	6822      	ldr	r2, [r4, #0]
 801e1a8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801e1ac:	2800      	cmp	r0, #0
 801e1ae:	d1e2      	bne.n	801e176 <rcutils_string_map_fini+0x22>
 801e1b0:	3501      	adds	r5, #1
 801e1b2:	429d      	cmp	r5, r3
 801e1b4:	d3dc      	bcc.n	801e170 <rcutils_string_map_fini+0x1c>
 801e1b6:	2100      	movs	r1, #0
 801e1b8:	4630      	mov	r0, r6
 801e1ba:	f7ff ff1b 	bl	801dff4 <rcutils_string_map_reserve>
 801e1be:	4604      	mov	r4, r0
 801e1c0:	b920      	cbnz	r0, 801e1cc <rcutils_string_map_fini+0x78>
 801e1c2:	6830      	ldr	r0, [r6, #0]
 801e1c4:	6943      	ldr	r3, [r0, #20]
 801e1c6:	6a01      	ldr	r1, [r0, #32]
 801e1c8:	4798      	blx	r3
 801e1ca:	6034      	str	r4, [r6, #0]
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	b002      	add	sp, #8
 801e1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1d4:	240b      	movs	r4, #11
 801e1d6:	4620      	mov	r0, r4
 801e1d8:	b002      	add	sp, #8
 801e1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1de:	bf00      	nop

0801e1e0 <rcutils_string_map_getn>:
 801e1e0:	b378      	cbz	r0, 801e242 <rcutils_string_map_getn+0x62>
 801e1e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1e6:	f8d0 b000 	ldr.w	fp, [r0]
 801e1ea:	f1bb 0f00 	cmp.w	fp, #0
 801e1ee:	d01f      	beq.n	801e230 <rcutils_string_map_getn+0x50>
 801e1f0:	fab1 f481 	clz	r4, r1
 801e1f4:	4688      	mov	r8, r1
 801e1f6:	0964      	lsrs	r4, r4, #5
 801e1f8:	b1d1      	cbz	r1, 801e230 <rcutils_string_map_getn+0x50>
 801e1fa:	f8db 7008 	ldr.w	r7, [fp, #8]
 801e1fe:	f8db 6000 	ldr.w	r6, [fp]
 801e202:	b1af      	cbz	r7, 801e230 <rcutils_string_map_getn+0x50>
 801e204:	4691      	mov	r9, r2
 801e206:	3e04      	subs	r6, #4
 801e208:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801e20c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e210:	3401      	adds	r4, #1
 801e212:	4628      	mov	r0, r5
 801e214:	b155      	cbz	r5, 801e22c <rcutils_string_map_getn+0x4c>
 801e216:	f7e2 f86d 	bl	80002f4 <strlen>
 801e21a:	4602      	mov	r2, r0
 801e21c:	4629      	mov	r1, r5
 801e21e:	4640      	mov	r0, r8
 801e220:	454a      	cmp	r2, r9
 801e222:	bf38      	it	cc
 801e224:	464a      	movcc	r2, r9
 801e226:	f004 f868 	bl	80222fa <strncmp>
 801e22a:	b120      	cbz	r0, 801e236 <rcutils_string_map_getn+0x56>
 801e22c:	42a7      	cmp	r7, r4
 801e22e:	d1eb      	bne.n	801e208 <rcutils_string_map_getn+0x28>
 801e230:	2000      	movs	r0, #0
 801e232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e236:	f8db 3004 	ldr.w	r3, [fp, #4]
 801e23a:	f853 000a 	ldr.w	r0, [r3, sl]
 801e23e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e242:	4770      	bx	lr
 801e244:	0000      	movs	r0, r0
	...

0801e248 <rmw_get_zero_initialized_context>:
 801e248:	b510      	push	{r4, lr}
 801e24a:	4604      	mov	r4, r0
 801e24c:	3010      	adds	r0, #16
 801e24e:	f000 f80f 	bl	801e270 <rmw_get_zero_initialized_init_options>
 801e252:	2300      	movs	r3, #0
 801e254:	4620      	mov	r0, r4
 801e256:	60a3      	str	r3, [r4, #8]
 801e258:	64a3      	str	r3, [r4, #72]	@ 0x48
 801e25a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801e25c:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801e268 <rmw_get_zero_initialized_context+0x20>
 801e260:	ed84 7b00 	vstr	d7, [r4]
 801e264:	bd10      	pop	{r4, pc}
 801e266:	bf00      	nop
	...

0801e270 <rmw_get_zero_initialized_init_options>:
 801e270:	b510      	push	{r4, lr}
 801e272:	4604      	mov	r4, r0
 801e274:	2238      	movs	r2, #56	@ 0x38
 801e276:	2100      	movs	r1, #0
 801e278:	f004 f82a 	bl	80222d0 <memset>
 801e27c:	f104 0010 	add.w	r0, r4, #16
 801e280:	f000 f806 	bl	801e290 <rmw_get_default_security_options>
 801e284:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e288:	4620      	mov	r0, r4
 801e28a:	60e3      	str	r3, [r4, #12]
 801e28c:	bd10      	pop	{r4, pc}
 801e28e:	bf00      	nop

0801e290 <rmw_get_default_security_options>:
 801e290:	2200      	movs	r2, #0
 801e292:	7002      	strb	r2, [r0, #0]
 801e294:	6042      	str	r2, [r0, #4]
 801e296:	4770      	bx	lr

0801e298 <rmw_subscription_content_filter_options_fini>:
 801e298:	b1b0      	cbz	r0, 801e2c8 <rmw_subscription_content_filter_options_fini+0x30>
 801e29a:	b538      	push	{r3, r4, r5, lr}
 801e29c:	4604      	mov	r4, r0
 801e29e:	4608      	mov	r0, r1
 801e2a0:	460d      	mov	r5, r1
 801e2a2:	f7f7 f911 	bl	80154c8 <rcutils_allocator_is_valid>
 801e2a6:	b168      	cbz	r0, 801e2c4 <rmw_subscription_content_filter_options_fini+0x2c>
 801e2a8:	6820      	ldr	r0, [r4, #0]
 801e2aa:	b120      	cbz	r0, 801e2b6 <rmw_subscription_content_filter_options_fini+0x1e>
 801e2ac:	686b      	ldr	r3, [r5, #4]
 801e2ae:	6929      	ldr	r1, [r5, #16]
 801e2b0:	4798      	blx	r3
 801e2b2:	2300      	movs	r3, #0
 801e2b4:	6023      	str	r3, [r4, #0]
 801e2b6:	1d20      	adds	r0, r4, #4
 801e2b8:	f003 f97c 	bl	80215b4 <rcutils_string_array_fini>
 801e2bc:	3800      	subs	r0, #0
 801e2be:	bf18      	it	ne
 801e2c0:	2001      	movne	r0, #1
 801e2c2:	bd38      	pop	{r3, r4, r5, pc}
 801e2c4:	200b      	movs	r0, #11
 801e2c6:	bd38      	pop	{r3, r4, r5, pc}
 801e2c8:	200b      	movs	r0, #11
 801e2ca:	4770      	bx	lr

0801e2cc <rmw_get_default_subscription_options>:
 801e2cc:	2200      	movs	r2, #0
 801e2ce:	e9c0 2200 	strd	r2, r2, [r0]
 801e2d2:	6082      	str	r2, [r0, #8]
 801e2d4:	4770      	bx	lr
 801e2d6:	bf00      	nop

0801e2d8 <rmw_time_equal>:
 801e2d8:	b4f0      	push	{r4, r5, r6, r7}
 801e2da:	b084      	sub	sp, #16
 801e2dc:	ac04      	add	r4, sp, #16
 801e2de:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e2e2:	4603      	mov	r3, r0
 801e2e4:	4925      	ldr	r1, [pc, #148]	@ (801e37c <rmw_time_equal+0xa4>)
 801e2e6:	9d01      	ldr	r5, [sp, #4]
 801e2e8:	4610      	mov	r0, r2
 801e2ea:	4299      	cmp	r1, r3
 801e2ec:	f04f 0202 	mov.w	r2, #2
 801e2f0:	9e03      	ldr	r6, [sp, #12]
 801e2f2:	41aa      	sbcs	r2, r5
 801e2f4:	d330      	bcc.n	801e358 <rmw_time_equal+0x80>
 801e2f6:	4c22      	ldr	r4, [pc, #136]	@ (801e380 <rmw_time_equal+0xa8>)
 801e2f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e2fc:	fba3 3204 	umull	r3, r2, r3, r4
 801e300:	fb04 2205 	mla	r2, r4, r5, r2
 801e304:	43dd      	mvns	r5, r3
 801e306:	1a8c      	subs	r4, r1, r2
 801e308:	4285      	cmp	r5, r0
 801e30a:	41b4      	sbcs	r4, r6
 801e30c:	d332      	bcc.n	801e374 <rmw_time_equal+0x9c>
 801e30e:	eb10 0c03 	adds.w	ip, r0, r3
 801e312:	eb42 0106 	adc.w	r1, r2, r6
 801e316:	4819      	ldr	r0, [pc, #100]	@ (801e37c <rmw_time_equal+0xa4>)
 801e318:	2202      	movs	r2, #2
 801e31a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e31c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e31e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801e322:	4298      	cmp	r0, r3
 801e324:	41b2      	sbcs	r2, r6
 801e326:	d31c      	bcc.n	801e362 <rmw_time_equal+0x8a>
 801e328:	4c15      	ldr	r4, [pc, #84]	@ (801e380 <rmw_time_equal+0xa8>)
 801e32a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801e32e:	fba3 3204 	umull	r3, r2, r3, r4
 801e332:	fb04 2206 	mla	r2, r4, r6, r2
 801e336:	43de      	mvns	r6, r3
 801e338:	1a84      	subs	r4, r0, r2
 801e33a:	42ae      	cmp	r6, r5
 801e33c:	41bc      	sbcs	r4, r7
 801e33e:	d315      	bcc.n	801e36c <rmw_time_equal+0x94>
 801e340:	195b      	adds	r3, r3, r5
 801e342:	eb42 0207 	adc.w	r2, r2, r7
 801e346:	428a      	cmp	r2, r1
 801e348:	bf08      	it	eq
 801e34a:	4563      	cmpeq	r3, ip
 801e34c:	bf0c      	ite	eq
 801e34e:	2001      	moveq	r0, #1
 801e350:	2000      	movne	r0, #0
 801e352:	b004      	add	sp, #16
 801e354:	bcf0      	pop	{r4, r5, r6, r7}
 801e356:	4770      	bx	lr
 801e358:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e35c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e360:	e7d9      	b.n	801e316 <rmw_time_equal+0x3e>
 801e362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e366:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801e36a:	e7ec      	b.n	801e346 <rmw_time_equal+0x6e>
 801e36c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e370:	4602      	mov	r2, r0
 801e372:	e7e8      	b.n	801e346 <rmw_time_equal+0x6e>
 801e374:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801e378:	e7cd      	b.n	801e316 <rmw_time_equal+0x3e>
 801e37a:	bf00      	nop
 801e37c:	25c17d04 	.word	0x25c17d04
 801e380:	3b9aca00 	.word	0x3b9aca00

0801e384 <rmw_time_total_nsec>:
 801e384:	b470      	push	{r4, r5, r6}
 801e386:	b085      	sub	sp, #20
 801e388:	ac04      	add	r4, sp, #16
 801e38a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e38e:	4603      	mov	r3, r0
 801e390:	4913      	ldr	r1, [pc, #76]	@ (801e3e0 <rmw_time_total_nsec+0x5c>)
 801e392:	9d01      	ldr	r5, [sp, #4]
 801e394:	4610      	mov	r0, r2
 801e396:	4299      	cmp	r1, r3
 801e398:	f04f 0202 	mov.w	r2, #2
 801e39c:	9e03      	ldr	r6, [sp, #12]
 801e39e:	41aa      	sbcs	r2, r5
 801e3a0:	d311      	bcc.n	801e3c6 <rmw_time_total_nsec+0x42>
 801e3a2:	4c10      	ldr	r4, [pc, #64]	@ (801e3e4 <rmw_time_total_nsec+0x60>)
 801e3a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e3a8:	fba3 3204 	umull	r3, r2, r3, r4
 801e3ac:	fb04 2205 	mla	r2, r4, r5, r2
 801e3b0:	43dd      	mvns	r5, r3
 801e3b2:	1a8c      	subs	r4, r1, r2
 801e3b4:	4285      	cmp	r5, r0
 801e3b6:	41b4      	sbcs	r4, r6
 801e3b8:	d30c      	bcc.n	801e3d4 <rmw_time_total_nsec+0x50>
 801e3ba:	1818      	adds	r0, r3, r0
 801e3bc:	eb42 0106 	adc.w	r1, r2, r6
 801e3c0:	b005      	add	sp, #20
 801e3c2:	bc70      	pop	{r4, r5, r6}
 801e3c4:	4770      	bx	lr
 801e3c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e3ce:	b005      	add	sp, #20
 801e3d0:	bc70      	pop	{r4, r5, r6}
 801e3d2:	4770      	bx	lr
 801e3d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e3d8:	b005      	add	sp, #20
 801e3da:	bc70      	pop	{r4, r5, r6}
 801e3dc:	4770      	bx	lr
 801e3de:	bf00      	nop
 801e3e0:	25c17d04 	.word	0x25c17d04
 801e3e4:	3b9aca00 	.word	0x3b9aca00

0801e3e8 <rmw_get_zero_initialized_message_info>:
 801e3e8:	b510      	push	{r4, lr}
 801e3ea:	4604      	mov	r4, r0
 801e3ec:	2240      	movs	r2, #64	@ 0x40
 801e3ee:	2100      	movs	r1, #0
 801e3f0:	f003 ff6e 	bl	80222d0 <memset>
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	bd10      	pop	{r4, pc}

0801e3f8 <rmw_validate_full_topic_name>:
 801e3f8:	2800      	cmp	r0, #0
 801e3fa:	d05d      	beq.n	801e4b8 <rmw_validate_full_topic_name+0xc0>
 801e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e400:	460d      	mov	r5, r1
 801e402:	2900      	cmp	r1, #0
 801e404:	d05a      	beq.n	801e4bc <rmw_validate_full_topic_name+0xc4>
 801e406:	4604      	mov	r4, r0
 801e408:	4616      	mov	r6, r2
 801e40a:	f7e1 ff73 	bl	80002f4 <strlen>
 801e40e:	b150      	cbz	r0, 801e426 <rmw_validate_full_topic_name+0x2e>
 801e410:	7823      	ldrb	r3, [r4, #0]
 801e412:	2b2f      	cmp	r3, #47	@ 0x2f
 801e414:	d00e      	beq.n	801e434 <rmw_validate_full_topic_name+0x3c>
 801e416:	2302      	movs	r3, #2
 801e418:	602b      	str	r3, [r5, #0]
 801e41a:	b146      	cbz	r6, 801e42e <rmw_validate_full_topic_name+0x36>
 801e41c:	2300      	movs	r3, #0
 801e41e:	4618      	mov	r0, r3
 801e420:	6033      	str	r3, [r6, #0]
 801e422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e426:	2301      	movs	r3, #1
 801e428:	602b      	str	r3, [r5, #0]
 801e42a:	2e00      	cmp	r6, #0
 801e42c:	d1f6      	bne.n	801e41c <rmw_validate_full_topic_name+0x24>
 801e42e:	2000      	movs	r0, #0
 801e430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e434:	1e43      	subs	r3, r0, #1
 801e436:	5ce2      	ldrb	r2, [r4, r3]
 801e438:	2a2f      	cmp	r2, #47	@ 0x2f
 801e43a:	d041      	beq.n	801e4c0 <rmw_validate_full_topic_name+0xc8>
 801e43c:	1e62      	subs	r2, r4, #1
 801e43e:	f1c4 0e01 	rsb	lr, r4, #1
 801e442:	eb02 0800 	add.w	r8, r2, r0
 801e446:	eb0e 0702 	add.w	r7, lr, r2
 801e44a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e44e:	f023 0120 	bic.w	r1, r3, #32
 801e452:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801e456:	3941      	subs	r1, #65	@ 0x41
 801e458:	2919      	cmp	r1, #25
 801e45a:	d90f      	bls.n	801e47c <rmw_validate_full_topic_name+0x84>
 801e45c:	f1bc 0f0a 	cmp.w	ip, #10
 801e460:	d90c      	bls.n	801e47c <rmw_validate_full_topic_name+0x84>
 801e462:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801e466:	fab3 f383 	clz	r3, r3
 801e46a:	095b      	lsrs	r3, r3, #5
 801e46c:	b933      	cbnz	r3, 801e47c <rmw_validate_full_topic_name+0x84>
 801e46e:	2204      	movs	r2, #4
 801e470:	602a      	str	r2, [r5, #0]
 801e472:	2e00      	cmp	r6, #0
 801e474:	d0db      	beq.n	801e42e <rmw_validate_full_topic_name+0x36>
 801e476:	4618      	mov	r0, r3
 801e478:	6037      	str	r7, [r6, #0]
 801e47a:	e7d2      	b.n	801e422 <rmw_validate_full_topic_name+0x2a>
 801e47c:	4542      	cmp	r2, r8
 801e47e:	d1e2      	bne.n	801e446 <rmw_validate_full_topic_name+0x4e>
 801e480:	2301      	movs	r3, #1
 801e482:	4f1a      	ldr	r7, [pc, #104]	@ (801e4ec <rmw_validate_full_topic_name+0xf4>)
 801e484:	e004      	b.n	801e490 <rmw_validate_full_topic_name+0x98>
 801e486:	4298      	cmp	r0, r3
 801e488:	f104 0401 	add.w	r4, r4, #1
 801e48c:	4613      	mov	r3, r2
 801e48e:	d91c      	bls.n	801e4ca <rmw_validate_full_topic_name+0xd2>
 801e490:	4298      	cmp	r0, r3
 801e492:	f103 0201 	add.w	r2, r3, #1
 801e496:	d0f6      	beq.n	801e486 <rmw_validate_full_topic_name+0x8e>
 801e498:	7821      	ldrb	r1, [r4, #0]
 801e49a:	292f      	cmp	r1, #47	@ 0x2f
 801e49c:	d1f3      	bne.n	801e486 <rmw_validate_full_topic_name+0x8e>
 801e49e:	7861      	ldrb	r1, [r4, #1]
 801e4a0:	292f      	cmp	r1, #47	@ 0x2f
 801e4a2:	d01e      	beq.n	801e4e2 <rmw_validate_full_topic_name+0xea>
 801e4a4:	5dc9      	ldrb	r1, [r1, r7]
 801e4a6:	0749      	lsls	r1, r1, #29
 801e4a8:	d5ed      	bpl.n	801e486 <rmw_validate_full_topic_name+0x8e>
 801e4aa:	2206      	movs	r2, #6
 801e4ac:	602a      	str	r2, [r5, #0]
 801e4ae:	2e00      	cmp	r6, #0
 801e4b0:	d0bd      	beq.n	801e42e <rmw_validate_full_topic_name+0x36>
 801e4b2:	2000      	movs	r0, #0
 801e4b4:	6033      	str	r3, [r6, #0]
 801e4b6:	e7b4      	b.n	801e422 <rmw_validate_full_topic_name+0x2a>
 801e4b8:	200b      	movs	r0, #11
 801e4ba:	4770      	bx	lr
 801e4bc:	200b      	movs	r0, #11
 801e4be:	e7b0      	b.n	801e422 <rmw_validate_full_topic_name+0x2a>
 801e4c0:	2203      	movs	r2, #3
 801e4c2:	602a      	str	r2, [r5, #0]
 801e4c4:	2e00      	cmp	r6, #0
 801e4c6:	d1f4      	bne.n	801e4b2 <rmw_validate_full_topic_name+0xba>
 801e4c8:	e7b1      	b.n	801e42e <rmw_validate_full_topic_name+0x36>
 801e4ca:	28f7      	cmp	r0, #247	@ 0xf7
 801e4cc:	d803      	bhi.n	801e4d6 <rmw_validate_full_topic_name+0xde>
 801e4ce:	2300      	movs	r3, #0
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	602b      	str	r3, [r5, #0]
 801e4d4:	e7a5      	b.n	801e422 <rmw_validate_full_topic_name+0x2a>
 801e4d6:	2307      	movs	r3, #7
 801e4d8:	602b      	str	r3, [r5, #0]
 801e4da:	2e00      	cmp	r6, #0
 801e4dc:	d0a7      	beq.n	801e42e <rmw_validate_full_topic_name+0x36>
 801e4de:	23f6      	movs	r3, #246	@ 0xf6
 801e4e0:	e7e7      	b.n	801e4b2 <rmw_validate_full_topic_name+0xba>
 801e4e2:	2205      	movs	r2, #5
 801e4e4:	602a      	str	r2, [r5, #0]
 801e4e6:	2e00      	cmp	r6, #0
 801e4e8:	d1e3      	bne.n	801e4b2 <rmw_validate_full_topic_name+0xba>
 801e4ea:	e7a0      	b.n	801e42e <rmw_validate_full_topic_name+0x36>
 801e4ec:	08025b9a 	.word	0x08025b9a

0801e4f0 <rmw_validate_namespace_with_size>:
 801e4f0:	2800      	cmp	r0, #0
 801e4f2:	d043      	beq.n	801e57c <rmw_validate_namespace_with_size+0x8c>
 801e4f4:	b570      	push	{r4, r5, r6, lr}
 801e4f6:	4614      	mov	r4, r2
 801e4f8:	b0c2      	sub	sp, #264	@ 0x108
 801e4fa:	b32a      	cbz	r2, 801e548 <rmw_validate_namespace_with_size+0x58>
 801e4fc:	2901      	cmp	r1, #1
 801e4fe:	460d      	mov	r5, r1
 801e500:	461e      	mov	r6, r3
 801e502:	d102      	bne.n	801e50a <rmw_validate_namespace_with_size+0x1a>
 801e504:	7803      	ldrb	r3, [r0, #0]
 801e506:	2b2f      	cmp	r3, #47	@ 0x2f
 801e508:	d012      	beq.n	801e530 <rmw_validate_namespace_with_size+0x40>
 801e50a:	aa01      	add	r2, sp, #4
 801e50c:	4669      	mov	r1, sp
 801e50e:	f7ff ff73 	bl	801e3f8 <rmw_validate_full_topic_name>
 801e512:	b980      	cbnz	r0, 801e536 <rmw_validate_namespace_with_size+0x46>
 801e514:	9a00      	ldr	r2, [sp, #0]
 801e516:	b14a      	cbz	r2, 801e52c <rmw_validate_namespace_with_size+0x3c>
 801e518:	2a07      	cmp	r2, #7
 801e51a:	d007      	beq.n	801e52c <rmw_validate_namespace_with_size+0x3c>
 801e51c:	1e53      	subs	r3, r2, #1
 801e51e:	2b05      	cmp	r3, #5
 801e520:	d82e      	bhi.n	801e580 <rmw_validate_namespace_with_size+0x90>
 801e522:	e8df f003 	tbb	[pc, r3]
 801e526:	1f1c      	.short	0x1f1c
 801e528:	14282522 	.word	0x14282522
 801e52c:	2df5      	cmp	r5, #245	@ 0xf5
 801e52e:	d804      	bhi.n	801e53a <rmw_validate_namespace_with_size+0x4a>
 801e530:	2300      	movs	r3, #0
 801e532:	4618      	mov	r0, r3
 801e534:	6023      	str	r3, [r4, #0]
 801e536:	b042      	add	sp, #264	@ 0x108
 801e538:	bd70      	pop	{r4, r5, r6, pc}
 801e53a:	2307      	movs	r3, #7
 801e53c:	6023      	str	r3, [r4, #0]
 801e53e:	2e00      	cmp	r6, #0
 801e540:	d0f9      	beq.n	801e536 <rmw_validate_namespace_with_size+0x46>
 801e542:	23f4      	movs	r3, #244	@ 0xf4
 801e544:	6033      	str	r3, [r6, #0]
 801e546:	e7f6      	b.n	801e536 <rmw_validate_namespace_with_size+0x46>
 801e548:	200b      	movs	r0, #11
 801e54a:	b042      	add	sp, #264	@ 0x108
 801e54c:	bd70      	pop	{r4, r5, r6, pc}
 801e54e:	2306      	movs	r3, #6
 801e550:	6023      	str	r3, [r4, #0]
 801e552:	2e00      	cmp	r6, #0
 801e554:	d0ef      	beq.n	801e536 <rmw_validate_namespace_with_size+0x46>
 801e556:	9b01      	ldr	r3, [sp, #4]
 801e558:	6033      	str	r3, [r6, #0]
 801e55a:	b042      	add	sp, #264	@ 0x108
 801e55c:	bd70      	pop	{r4, r5, r6, pc}
 801e55e:	2301      	movs	r3, #1
 801e560:	6023      	str	r3, [r4, #0]
 801e562:	e7f6      	b.n	801e552 <rmw_validate_namespace_with_size+0x62>
 801e564:	2302      	movs	r3, #2
 801e566:	6023      	str	r3, [r4, #0]
 801e568:	e7f3      	b.n	801e552 <rmw_validate_namespace_with_size+0x62>
 801e56a:	2303      	movs	r3, #3
 801e56c:	6023      	str	r3, [r4, #0]
 801e56e:	e7f0      	b.n	801e552 <rmw_validate_namespace_with_size+0x62>
 801e570:	2304      	movs	r3, #4
 801e572:	6023      	str	r3, [r4, #0]
 801e574:	e7ed      	b.n	801e552 <rmw_validate_namespace_with_size+0x62>
 801e576:	2305      	movs	r3, #5
 801e578:	6023      	str	r3, [r4, #0]
 801e57a:	e7ea      	b.n	801e552 <rmw_validate_namespace_with_size+0x62>
 801e57c:	200b      	movs	r0, #11
 801e57e:	4770      	bx	lr
 801e580:	4613      	mov	r3, r2
 801e582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e586:	4a03      	ldr	r2, [pc, #12]	@ (801e594 <rmw_validate_namespace_with_size+0xa4>)
 801e588:	a802      	add	r0, sp, #8
 801e58a:	f7ff fca1 	bl	801ded0 <rcutils_snprintf>
 801e58e:	2001      	movs	r0, #1
 801e590:	e7d1      	b.n	801e536 <rmw_validate_namespace_with_size+0x46>
 801e592:	bf00      	nop
 801e594:	08025618 	.word	0x08025618

0801e598 <rmw_validate_namespace>:
 801e598:	b168      	cbz	r0, 801e5b6 <rmw_validate_namespace+0x1e>
 801e59a:	b570      	push	{r4, r5, r6, lr}
 801e59c:	460d      	mov	r5, r1
 801e59e:	4616      	mov	r6, r2
 801e5a0:	4604      	mov	r4, r0
 801e5a2:	f7e1 fea7 	bl	80002f4 <strlen>
 801e5a6:	4633      	mov	r3, r6
 801e5a8:	4601      	mov	r1, r0
 801e5aa:	462a      	mov	r2, r5
 801e5ac:	4620      	mov	r0, r4
 801e5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e5b2:	f7ff bf9d 	b.w	801e4f0 <rmw_validate_namespace_with_size>
 801e5b6:	200b      	movs	r0, #11
 801e5b8:	4770      	bx	lr
 801e5ba:	bf00      	nop

0801e5bc <rmw_namespace_validation_result_string>:
 801e5bc:	2807      	cmp	r0, #7
 801e5be:	d803      	bhi.n	801e5c8 <rmw_namespace_validation_result_string+0xc>
 801e5c0:	4b02      	ldr	r3, [pc, #8]	@ (801e5cc <rmw_namespace_validation_result_string+0x10>)
 801e5c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e5c6:	4770      	bx	lr
 801e5c8:	4801      	ldr	r0, [pc, #4]	@ (801e5d0 <rmw_namespace_validation_result_string+0x14>)
 801e5ca:	4770      	bx	lr
 801e5cc:	08025810 	.word	0x08025810
 801e5d0:	08025668 	.word	0x08025668

0801e5d4 <rmw_validate_node_name>:
 801e5d4:	2800      	cmp	r0, #0
 801e5d6:	d042      	beq.n	801e65e <rmw_validate_node_name+0x8a>
 801e5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5dc:	460d      	mov	r5, r1
 801e5de:	2900      	cmp	r1, #0
 801e5e0:	d03f      	beq.n	801e662 <rmw_validate_node_name+0x8e>
 801e5e2:	4604      	mov	r4, r0
 801e5e4:	4616      	mov	r6, r2
 801e5e6:	f7e1 fe85 	bl	80002f4 <strlen>
 801e5ea:	b310      	cbz	r0, 801e632 <rmw_validate_node_name+0x5e>
 801e5ec:	1e63      	subs	r3, r4, #1
 801e5ee:	f1c4 0101 	rsb	r1, r4, #1
 801e5f2:	eb03 0800 	add.w	r8, r3, r0
 801e5f6:	18cf      	adds	r7, r1, r3
 801e5f8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801e5fc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801e600:	f02e 0c20 	bic.w	ip, lr, #32
 801e604:	2a09      	cmp	r2, #9
 801e606:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801e60a:	d905      	bls.n	801e618 <rmw_validate_node_name+0x44>
 801e60c:	f1bc 0f19 	cmp.w	ip, #25
 801e610:	d902      	bls.n	801e618 <rmw_validate_node_name+0x44>
 801e612:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801e616:	d114      	bne.n	801e642 <rmw_validate_node_name+0x6e>
 801e618:	4598      	cmp	r8, r3
 801e61a:	d1ec      	bne.n	801e5f6 <rmw_validate_node_name+0x22>
 801e61c:	7822      	ldrb	r2, [r4, #0]
 801e61e:	4b16      	ldr	r3, [pc, #88]	@ (801e678 <rmw_validate_node_name+0xa4>)
 801e620:	5cd3      	ldrb	r3, [r2, r3]
 801e622:	f013 0304 	ands.w	r3, r3, #4
 801e626:	d113      	bne.n	801e650 <rmw_validate_node_name+0x7c>
 801e628:	28ff      	cmp	r0, #255	@ 0xff
 801e62a:	d81c      	bhi.n	801e666 <rmw_validate_node_name+0x92>
 801e62c:	4618      	mov	r0, r3
 801e62e:	602b      	str	r3, [r5, #0]
 801e630:	e00c      	b.n	801e64c <rmw_validate_node_name+0x78>
 801e632:	2301      	movs	r3, #1
 801e634:	602b      	str	r3, [r5, #0]
 801e636:	b17e      	cbz	r6, 801e658 <rmw_validate_node_name+0x84>
 801e638:	2300      	movs	r3, #0
 801e63a:	4618      	mov	r0, r3
 801e63c:	6033      	str	r3, [r6, #0]
 801e63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e642:	2302      	movs	r3, #2
 801e644:	602b      	str	r3, [r5, #0]
 801e646:	b13e      	cbz	r6, 801e658 <rmw_validate_node_name+0x84>
 801e648:	2000      	movs	r0, #0
 801e64a:	6037      	str	r7, [r6, #0]
 801e64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e650:	2303      	movs	r3, #3
 801e652:	602b      	str	r3, [r5, #0]
 801e654:	2e00      	cmp	r6, #0
 801e656:	d1ef      	bne.n	801e638 <rmw_validate_node_name+0x64>
 801e658:	2000      	movs	r0, #0
 801e65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e65e:	200b      	movs	r0, #11
 801e660:	4770      	bx	lr
 801e662:	200b      	movs	r0, #11
 801e664:	e7f2      	b.n	801e64c <rmw_validate_node_name+0x78>
 801e666:	2204      	movs	r2, #4
 801e668:	602a      	str	r2, [r5, #0]
 801e66a:	2e00      	cmp	r6, #0
 801e66c:	d0f4      	beq.n	801e658 <rmw_validate_node_name+0x84>
 801e66e:	22fe      	movs	r2, #254	@ 0xfe
 801e670:	4618      	mov	r0, r3
 801e672:	6032      	str	r2, [r6, #0]
 801e674:	e7ea      	b.n	801e64c <rmw_validate_node_name+0x78>
 801e676:	bf00      	nop
 801e678:	08025b9a 	.word	0x08025b9a

0801e67c <rmw_node_name_validation_result_string>:
 801e67c:	2804      	cmp	r0, #4
 801e67e:	d803      	bhi.n	801e688 <rmw_node_name_validation_result_string+0xc>
 801e680:	4b02      	ldr	r3, [pc, #8]	@ (801e68c <rmw_node_name_validation_result_string+0x10>)
 801e682:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e686:	4770      	bx	lr
 801e688:	4801      	ldr	r0, [pc, #4]	@ (801e690 <rmw_node_name_validation_result_string+0x14>)
 801e68a:	4770      	bx	lr
 801e68c:	0802591c 	.word	0x0802591c
 801e690:	08025830 	.word	0x08025830

0801e694 <get_memory>:
 801e694:	4603      	mov	r3, r0
 801e696:	6840      	ldr	r0, [r0, #4]
 801e698:	b158      	cbz	r0, 801e6b2 <get_memory+0x1e>
 801e69a:	6842      	ldr	r2, [r0, #4]
 801e69c:	605a      	str	r2, [r3, #4]
 801e69e:	b10a      	cbz	r2, 801e6a4 <get_memory+0x10>
 801e6a0:	2100      	movs	r1, #0
 801e6a2:	6011      	str	r1, [r2, #0]
 801e6a4:	681a      	ldr	r2, [r3, #0]
 801e6a6:	6042      	str	r2, [r0, #4]
 801e6a8:	b102      	cbz	r2, 801e6ac <get_memory+0x18>
 801e6aa:	6010      	str	r0, [r2, #0]
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	6002      	str	r2, [r0, #0]
 801e6b0:	6018      	str	r0, [r3, #0]
 801e6b2:	4770      	bx	lr

0801e6b4 <put_memory>:
 801e6b4:	680b      	ldr	r3, [r1, #0]
 801e6b6:	b10b      	cbz	r3, 801e6bc <put_memory+0x8>
 801e6b8:	684a      	ldr	r2, [r1, #4]
 801e6ba:	605a      	str	r2, [r3, #4]
 801e6bc:	684a      	ldr	r2, [r1, #4]
 801e6be:	b102      	cbz	r2, 801e6c2 <put_memory+0xe>
 801e6c0:	6013      	str	r3, [r2, #0]
 801e6c2:	6803      	ldr	r3, [r0, #0]
 801e6c4:	428b      	cmp	r3, r1
 801e6c6:	6843      	ldr	r3, [r0, #4]
 801e6c8:	bf08      	it	eq
 801e6ca:	6002      	streq	r2, [r0, #0]
 801e6cc:	604b      	str	r3, [r1, #4]
 801e6ce:	b103      	cbz	r3, 801e6d2 <put_memory+0x1e>
 801e6d0:	6019      	str	r1, [r3, #0]
 801e6d2:	2300      	movs	r3, #0
 801e6d4:	600b      	str	r3, [r1, #0]
 801e6d6:	6041      	str	r1, [r0, #4]
 801e6d8:	4770      	bx	lr
 801e6da:	bf00      	nop

0801e6dc <rmw_destroy_client>:
 801e6dc:	b570      	push	{r4, r5, r6, lr}
 801e6de:	b128      	cbz	r0, 801e6ec <rmw_destroy_client+0x10>
 801e6e0:	4604      	mov	r4, r0
 801e6e2:	6800      	ldr	r0, [r0, #0]
 801e6e4:	460d      	mov	r5, r1
 801e6e6:	f7f7 fdb7 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 801e6ea:	b910      	cbnz	r0, 801e6f2 <rmw_destroy_client+0x16>
 801e6ec:	2401      	movs	r4, #1
 801e6ee:	4620      	mov	r0, r4
 801e6f0:	bd70      	pop	{r4, r5, r6, pc}
 801e6f2:	6863      	ldr	r3, [r4, #4]
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d0f9      	beq.n	801e6ec <rmw_destroy_client+0x10>
 801e6f8:	2d00      	cmp	r5, #0
 801e6fa:	d0f7      	beq.n	801e6ec <rmw_destroy_client+0x10>
 801e6fc:	6828      	ldr	r0, [r5, #0]
 801e6fe:	f7f7 fdab 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 801e702:	2800      	cmp	r0, #0
 801e704:	d0f2      	beq.n	801e6ec <rmw_destroy_client+0x10>
 801e706:	686e      	ldr	r6, [r5, #4]
 801e708:	2e00      	cmp	r6, #0
 801e70a:	d0ef      	beq.n	801e6ec <rmw_destroy_client+0x10>
 801e70c:	6864      	ldr	r4, [r4, #4]
 801e70e:	6932      	ldr	r2, [r6, #16]
 801e710:	6920      	ldr	r0, [r4, #16]
 801e712:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e716:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e71a:	6819      	ldr	r1, [r3, #0]
 801e71c:	f002 faca 	bl	8020cb4 <uxr_buffer_cancel_data>
 801e720:	4602      	mov	r2, r0
 801e722:	6920      	ldr	r0, [r4, #16]
 801e724:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e728:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e72c:	f7f7 fc82 	bl	8016034 <run_xrce_session>
 801e730:	6920      	ldr	r0, [r4, #16]
 801e732:	6932      	ldr	r2, [r6, #16]
 801e734:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801e738:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e73c:	6819      	ldr	r1, [r3, #0]
 801e73e:	f7f8 fb5f 	bl	8016e00 <uxr_buffer_delete_entity>
 801e742:	4602      	mov	r2, r0
 801e744:	6920      	ldr	r0, [r4, #16]
 801e746:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801e74a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801e74e:	f7f7 fc71 	bl	8016034 <run_xrce_session>
 801e752:	4603      	mov	r3, r0
 801e754:	4628      	mov	r0, r5
 801e756:	2b00      	cmp	r3, #0
 801e758:	bf14      	ite	ne
 801e75a:	2400      	movne	r4, #0
 801e75c:	2402      	moveq	r4, #2
 801e75e:	f7f7 fb45 	bl	8015dec <rmw_uxrce_fini_client_memory>
 801e762:	e7c4      	b.n	801e6ee <rmw_destroy_client+0x12>

0801e764 <rmw_get_implementation_identifier>:
 801e764:	4b01      	ldr	r3, [pc, #4]	@ (801e76c <rmw_get_implementation_identifier+0x8>)
 801e766:	6818      	ldr	r0, [r3, #0]
 801e768:	4770      	bx	lr
 801e76a:	bf00      	nop
 801e76c:	08025948 	.word	0x08025948

0801e770 <rmw_init_options_init>:
 801e770:	b084      	sub	sp, #16
 801e772:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e774:	b083      	sub	sp, #12
 801e776:	ad09      	add	r5, sp, #36	@ 0x24
 801e778:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801e77c:	b130      	cbz	r0, 801e78c <rmw_init_options_init+0x1c>
 801e77e:	4604      	mov	r4, r0
 801e780:	4628      	mov	r0, r5
 801e782:	f7f6 fea1 	bl	80154c8 <rcutils_allocator_is_valid>
 801e786:	b108      	cbz	r0, 801e78c <rmw_init_options_init+0x1c>
 801e788:	68a6      	ldr	r6, [r4, #8]
 801e78a:	b12e      	cbz	r6, 801e798 <rmw_init_options_init+0x28>
 801e78c:	200b      	movs	r0, #11
 801e78e:	b003      	add	sp, #12
 801e790:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e794:	b004      	add	sp, #16
 801e796:	4770      	bx	lr
 801e798:	2200      	movs	r2, #0
 801e79a:	2300      	movs	r3, #0
 801e79c:	f104 0c20 	add.w	ip, r4, #32
 801e7a0:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801e83c <rmw_init_options_init+0xcc>
 801e7a4:	466f      	mov	r7, sp
 801e7a6:	e9c4 2300 	strd	r2, r3, [r4]
 801e7aa:	4b20      	ldr	r3, [pc, #128]	@ (801e82c <rmw_init_options_init+0xbc>)
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	60a3      	str	r3, [r4, #8]
 801e7b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e7b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e7b6:	682b      	ldr	r3, [r5, #0]
 801e7b8:	4638      	mov	r0, r7
 801e7ba:	f8cc 3000 	str.w	r3, [ip]
 801e7be:	f8c4 e01c 	str.w	lr, [r4, #28]
 801e7c2:	60e6      	str	r6, [r4, #12]
 801e7c4:	f7ff fd64 	bl	801e290 <rmw_get_default_security_options>
 801e7c8:	f104 0310 	add.w	r3, r4, #16
 801e7cc:	2203      	movs	r2, #3
 801e7ce:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e7d2:	e883 0003 	stmia.w	r3, {r0, r1}
 801e7d6:	4816      	ldr	r0, [pc, #88]	@ (801e830 <rmw_init_options_init+0xc0>)
 801e7d8:	4916      	ldr	r1, [pc, #88]	@ (801e834 <rmw_init_options_init+0xc4>)
 801e7da:	7626      	strb	r6, [r4, #24]
 801e7dc:	f7f7 fa46 	bl	8015c6c <rmw_uxrce_init_init_options_impl_memory>
 801e7e0:	4813      	ldr	r0, [pc, #76]	@ (801e830 <rmw_init_options_init+0xc0>)
 801e7e2:	f7ff ff57 	bl	801e694 <get_memory>
 801e7e6:	b1f0      	cbz	r0, 801e826 <rmw_init_options_init+0xb6>
 801e7e8:	4a13      	ldr	r2, [pc, #76]	@ (801e838 <rmw_init_options_init+0xc8>)
 801e7ea:	6883      	ldr	r3, [r0, #8]
 801e7ec:	6851      	ldr	r1, [r2, #4]
 801e7ee:	6363      	str	r3, [r4, #52]	@ 0x34
 801e7f0:	7810      	ldrb	r0, [r2, #0]
 801e7f2:	6159      	str	r1, [r3, #20]
 801e7f4:	68d1      	ldr	r1, [r2, #12]
 801e7f6:	7418      	strb	r0, [r3, #16]
 801e7f8:	61d9      	str	r1, [r3, #28]
 801e7fa:	6911      	ldr	r1, [r2, #16]
 801e7fc:	6219      	str	r1, [r3, #32]
 801e7fe:	6951      	ldr	r1, [r2, #20]
 801e800:	6892      	ldr	r2, [r2, #8]
 801e802:	6259      	str	r1, [r3, #36]	@ 0x24
 801e804:	619a      	str	r2, [r3, #24]
 801e806:	f7fa fe5d 	bl	80194c4 <uxr_nanos>
 801e80a:	f003 f9bd 	bl	8021b88 <srand>
 801e80e:	f003 f9e9 	bl	8021be4 <rand>
 801e812:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e814:	6298      	str	r0, [r3, #40]	@ 0x28
 801e816:	2800      	cmp	r0, #0
 801e818:	d0f9      	beq.n	801e80e <rmw_init_options_init+0x9e>
 801e81a:	2000      	movs	r0, #0
 801e81c:	b003      	add	sp, #12
 801e81e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e822:	b004      	add	sp, #16
 801e824:	4770      	bx	lr
 801e826:	2001      	movs	r0, #1
 801e828:	e7b1      	b.n	801e78e <rmw_init_options_init+0x1e>
 801e82a:	bf00      	nop
 801e82c:	08025948 	.word	0x08025948
 801e830:	240691e4 	.word	0x240691e4
 801e834:	24064a80 	.word	0x24064a80
 801e838:	2406490c 	.word	0x2406490c
 801e83c:	08025354 	.word	0x08025354

0801e840 <rmw_init_options_copy>:
 801e840:	2800      	cmp	r0, #0
 801e842:	d047      	beq.n	801e8d4 <rmw_init_options_copy+0x94>
 801e844:	b570      	push	{r4, r5, r6, lr}
 801e846:	460d      	mov	r5, r1
 801e848:	b149      	cbz	r1, 801e85e <rmw_init_options_copy+0x1e>
 801e84a:	4604      	mov	r4, r0
 801e84c:	6880      	ldr	r0, [r0, #8]
 801e84e:	b120      	cbz	r0, 801e85a <rmw_init_options_copy+0x1a>
 801e850:	4b22      	ldr	r3, [pc, #136]	@ (801e8dc <rmw_init_options_copy+0x9c>)
 801e852:	6819      	ldr	r1, [r3, #0]
 801e854:	f7e1 fd44 	bl	80002e0 <strcmp>
 801e858:	bba8      	cbnz	r0, 801e8c6 <rmw_init_options_copy+0x86>
 801e85a:	68ab      	ldr	r3, [r5, #8]
 801e85c:	b11b      	cbz	r3, 801e866 <rmw_init_options_copy+0x26>
 801e85e:	f04f 0c0b 	mov.w	ip, #11
 801e862:	4660      	mov	r0, ip
 801e864:	bd70      	pop	{r4, r5, r6, pc}
 801e866:	4623      	mov	r3, r4
 801e868:	462a      	mov	r2, r5
 801e86a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801e86e:	f8d3 e000 	ldr.w	lr, [r3]
 801e872:	3310      	adds	r3, #16
 801e874:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 801e878:	3210      	adds	r2, #16
 801e87a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801e87e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801e882:	42b3      	cmp	r3, r6
 801e884:	f842 ec10 	str.w	lr, [r2, #-16]
 801e888:	f842 cc0c 	str.w	ip, [r2, #-12]
 801e88c:	f842 0c08 	str.w	r0, [r2, #-8]
 801e890:	f842 1c04 	str.w	r1, [r2, #-4]
 801e894:	d1eb      	bne.n	801e86e <rmw_init_options_copy+0x2e>
 801e896:	6819      	ldr	r1, [r3, #0]
 801e898:	685b      	ldr	r3, [r3, #4]
 801e89a:	4811      	ldr	r0, [pc, #68]	@ (801e8e0 <rmw_init_options_copy+0xa0>)
 801e89c:	6011      	str	r1, [r2, #0]
 801e89e:	6053      	str	r3, [r2, #4]
 801e8a0:	f7ff fef8 	bl	801e694 <get_memory>
 801e8a4:	b198      	cbz	r0, 801e8ce <rmw_init_options_copy+0x8e>
 801e8a6:	6883      	ldr	r3, [r0, #8]
 801e8a8:	f04f 0c00 	mov.w	ip, #0
 801e8ac:	636b      	str	r3, [r5, #52]	@ 0x34
 801e8ae:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801e8b0:	f103 0410 	add.w	r4, r3, #16
 801e8b4:	3510      	adds	r5, #16
 801e8b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e8b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e8ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e8be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e8c2:	4660      	mov	r0, ip
 801e8c4:	bd70      	pop	{r4, r5, r6, pc}
 801e8c6:	f04f 0c0c 	mov.w	ip, #12
 801e8ca:	4660      	mov	r0, ip
 801e8cc:	bd70      	pop	{r4, r5, r6, pc}
 801e8ce:	f04f 0c01 	mov.w	ip, #1
 801e8d2:	e7c6      	b.n	801e862 <rmw_init_options_copy+0x22>
 801e8d4:	f04f 0c0b 	mov.w	ip, #11
 801e8d8:	4660      	mov	r0, ip
 801e8da:	4770      	bx	lr
 801e8dc:	08025948 	.word	0x08025948
 801e8e0:	240691e4 	.word	0x240691e4

0801e8e4 <rmw_init_options_fini>:
 801e8e4:	b510      	push	{r4, lr}
 801e8e6:	b08e      	sub	sp, #56	@ 0x38
 801e8e8:	b388      	cbz	r0, 801e94e <rmw_init_options_fini+0x6a>
 801e8ea:	4604      	mov	r4, r0
 801e8ec:	3020      	adds	r0, #32
 801e8ee:	f7f6 fdeb 	bl	80154c8 <rcutils_allocator_is_valid>
 801e8f2:	b360      	cbz	r0, 801e94e <rmw_init_options_fini+0x6a>
 801e8f4:	68a0      	ldr	r0, [r4, #8]
 801e8f6:	b120      	cbz	r0, 801e902 <rmw_init_options_fini+0x1e>
 801e8f8:	4b1a      	ldr	r3, [pc, #104]	@ (801e964 <rmw_init_options_fini+0x80>)
 801e8fa:	6819      	ldr	r1, [r3, #0]
 801e8fc:	f7e1 fcf0 	bl	80002e0 <strcmp>
 801e900:	bb68      	cbnz	r0, 801e95e <rmw_init_options_fini+0x7a>
 801e902:	4b19      	ldr	r3, [pc, #100]	@ (801e968 <rmw_init_options_fini+0x84>)
 801e904:	6819      	ldr	r1, [r3, #0]
 801e906:	b331      	cbz	r1, 801e956 <rmw_init_options_fini+0x72>
 801e908:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801e90a:	e001      	b.n	801e910 <rmw_init_options_fini+0x2c>
 801e90c:	6849      	ldr	r1, [r1, #4]
 801e90e:	b311      	cbz	r1, 801e956 <rmw_init_options_fini+0x72>
 801e910:	688b      	ldr	r3, [r1, #8]
 801e912:	429a      	cmp	r2, r3
 801e914:	d1fa      	bne.n	801e90c <rmw_init_options_fini+0x28>
 801e916:	4814      	ldr	r0, [pc, #80]	@ (801e968 <rmw_init_options_fini+0x84>)
 801e918:	f7ff fecc 	bl	801e6b4 <put_memory>
 801e91c:	4668      	mov	r0, sp
 801e91e:	f7ff fca7 	bl	801e270 <rmw_get_zero_initialized_init_options>
 801e922:	46ee      	mov	lr, sp
 801e924:	46a4      	mov	ip, r4
 801e926:	2400      	movs	r4, #0
 801e928:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e92c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e930:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e938:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801e93c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e940:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801e944:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e948:	4620      	mov	r0, r4
 801e94a:	b00e      	add	sp, #56	@ 0x38
 801e94c:	bd10      	pop	{r4, pc}
 801e94e:	240b      	movs	r4, #11
 801e950:	4620      	mov	r0, r4
 801e952:	b00e      	add	sp, #56	@ 0x38
 801e954:	bd10      	pop	{r4, pc}
 801e956:	2401      	movs	r4, #1
 801e958:	4620      	mov	r0, r4
 801e95a:	b00e      	add	sp, #56	@ 0x38
 801e95c:	bd10      	pop	{r4, pc}
 801e95e:	240c      	movs	r4, #12
 801e960:	e7f2      	b.n	801e948 <rmw_init_options_fini+0x64>
 801e962:	bf00      	nop
 801e964:	08025948 	.word	0x08025948
 801e968:	240691e4 	.word	0x240691e4

0801e96c <rmw_init>:
 801e96c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e970:	b083      	sub	sp, #12
 801e972:	2800      	cmp	r0, #0
 801e974:	f000 80d3 	beq.w	801eb1e <rmw_init+0x1b2>
 801e978:	460e      	mov	r6, r1
 801e97a:	2900      	cmp	r1, #0
 801e97c:	f000 80cf 	beq.w	801eb1e <rmw_init+0x1b2>
 801e980:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801e982:	4605      	mov	r5, r0
 801e984:	2b00      	cmp	r3, #0
 801e986:	f000 80ca 	beq.w	801eb1e <rmw_init+0x1b2>
 801e98a:	4b78      	ldr	r3, [pc, #480]	@ (801eb6c <rmw_init+0x200>)
 801e98c:	6880      	ldr	r0, [r0, #8]
 801e98e:	681f      	ldr	r7, [r3, #0]
 801e990:	b128      	cbz	r0, 801e99e <rmw_init+0x32>
 801e992:	4639      	mov	r1, r7
 801e994:	f7e1 fca4 	bl	80002e0 <strcmp>
 801e998:	2800      	cmp	r0, #0
 801e99a:	f040 80ca 	bne.w	801eb32 <rmw_init+0x1c6>
 801e99e:	4c74      	ldr	r4, [pc, #464]	@ (801eb70 <rmw_init+0x204>)
 801e9a0:	f04f 0800 	mov.w	r8, #0
 801e9a4:	4973      	ldr	r1, [pc, #460]	@ (801eb74 <rmw_init+0x208>)
 801e9a6:	4874      	ldr	r0, [pc, #464]	@ (801eb78 <rmw_init+0x20c>)
 801e9a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e9ac:	60b7      	str	r7, [r6, #8]
 801e9ae:	e9c6 2300 	strd	r2, r3, [r6]
 801e9b2:	68eb      	ldr	r3, [r5, #12]
 801e9b4:	2201      	movs	r2, #1
 801e9b6:	64b3      	str	r3, [r6, #72]	@ 0x48
 801e9b8:	f7f7 f8f8 	bl	8015bac <rmw_uxrce_init_session_memory>
 801e9bc:	4620      	mov	r0, r4
 801e9be:	2204      	movs	r2, #4
 801e9c0:	496e      	ldr	r1, [pc, #440]	@ (801eb7c <rmw_init+0x210>)
 801e9c2:	f7f7 f933 	bl	8015c2c <rmw_uxrce_init_static_input_buffer_memory>
 801e9c6:	486c      	ldr	r0, [pc, #432]	@ (801eb78 <rmw_init+0x20c>)
 801e9c8:	f884 800d 	strb.w	r8, [r4, #13]
 801e9cc:	f7ff fe62 	bl	801e694 <get_memory>
 801e9d0:	2800      	cmp	r0, #0
 801e9d2:	f000 80a9 	beq.w	801eb28 <rmw_init+0x1bc>
 801e9d6:	6884      	ldr	r4, [r0, #8]
 801e9d8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801e9da:	f104 0910 	add.w	r9, r4, #16
 801e9de:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801e9e0:	f890 c010 	ldrb.w	ip, [r0, #16]
 801e9e4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801e9e8:	9101      	str	r1, [sp, #4]
 801e9ea:	4661      	mov	r1, ip
 801e9ec:	6a00      	ldr	r0, [r0, #32]
 801e9ee:	9000      	str	r0, [sp, #0]
 801e9f0:	4648      	mov	r0, r9
 801e9f2:	f7f8 fcbd 	bl	8017370 <uxr_set_custom_transport_callbacks>
 801e9f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801e9fa:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801e9fe:	4960      	ldr	r1, [pc, #384]	@ (801eb80 <rmw_init+0x214>)
 801ea00:	4860      	ldr	r0, [pc, #384]	@ (801eb84 <rmw_init+0x218>)
 801ea02:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801ea06:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801ea0a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801ea0e:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801ea12:	2201      	movs	r2, #1
 801ea14:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801ea18:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801ea1c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801ea20:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801ea24:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801ea26:	f7f7 f8a1 	bl	8015b6c <rmw_uxrce_init_node_memory>
 801ea2a:	2205      	movs	r2, #5
 801ea2c:	4956      	ldr	r1, [pc, #344]	@ (801eb88 <rmw_init+0x21c>)
 801ea2e:	4857      	ldr	r0, [pc, #348]	@ (801eb8c <rmw_init+0x220>)
 801ea30:	f7f7 f87c 	bl	8015b2c <rmw_uxrce_init_subscription_memory>
 801ea34:	220a      	movs	r2, #10
 801ea36:	4956      	ldr	r1, [pc, #344]	@ (801eb90 <rmw_init+0x224>)
 801ea38:	4856      	ldr	r0, [pc, #344]	@ (801eb94 <rmw_init+0x228>)
 801ea3a:	f7f7 f857 	bl	8015aec <rmw_uxrce_init_publisher_memory>
 801ea3e:	2201      	movs	r2, #1
 801ea40:	4955      	ldr	r1, [pc, #340]	@ (801eb98 <rmw_init+0x22c>)
 801ea42:	4856      	ldr	r0, [pc, #344]	@ (801eb9c <rmw_init+0x230>)
 801ea44:	f7f7 f812 	bl	8015a6c <rmw_uxrce_init_service_memory>
 801ea48:	2201      	movs	r2, #1
 801ea4a:	4955      	ldr	r1, [pc, #340]	@ (801eba0 <rmw_init+0x234>)
 801ea4c:	4855      	ldr	r0, [pc, #340]	@ (801eba4 <rmw_init+0x238>)
 801ea4e:	f7f7 f82d 	bl	8015aac <rmw_uxrce_init_client_memory>
 801ea52:	220f      	movs	r2, #15
 801ea54:	4954      	ldr	r1, [pc, #336]	@ (801eba8 <rmw_init+0x23c>)
 801ea56:	4855      	ldr	r0, [pc, #340]	@ (801ebac <rmw_init+0x240>)
 801ea58:	f7f7 f8c8 	bl	8015bec <rmw_uxrce_init_topic_memory>
 801ea5c:	2203      	movs	r2, #3
 801ea5e:	4954      	ldr	r1, [pc, #336]	@ (801ebb0 <rmw_init+0x244>)
 801ea60:	4854      	ldr	r0, [pc, #336]	@ (801ebb4 <rmw_init+0x248>)
 801ea62:	f7f7 f903 	bl	8015c6c <rmw_uxrce_init_init_options_impl_memory>
 801ea66:	2204      	movs	r2, #4
 801ea68:	4953      	ldr	r1, [pc, #332]	@ (801ebb8 <rmw_init+0x24c>)
 801ea6a:	4854      	ldr	r0, [pc, #336]	@ (801ebbc <rmw_init+0x250>)
 801ea6c:	f7f7 f91e 	bl	8015cac <rmw_uxrce_init_wait_set_memory>
 801ea70:	4953      	ldr	r1, [pc, #332]	@ (801ebc0 <rmw_init+0x254>)
 801ea72:	4854      	ldr	r0, [pc, #336]	@ (801ebc4 <rmw_init+0x258>)
 801ea74:	2204      	movs	r2, #4
 801ea76:	f7f7 f939 	bl	8015cec <rmw_uxrce_init_guard_condition_memory>
 801ea7a:	4642      	mov	r2, r8
 801ea7c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801ea7e:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801ea80:	f7f6 ffbc 	bl	80159fc <rmw_uxrce_transport_init>
 801ea84:	4607      	mov	r7, r0
 801ea86:	2800      	cmp	r0, #0
 801ea88:	d158      	bne.n	801eb3c <rmw_init+0x1d0>
 801ea8a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801ea8c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801ea90:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801ea94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ea96:	4628      	mov	r0, r5
 801ea98:	f7f8 fe6e 	bl	8017778 <uxr_init_session>
 801ea9c:	4622      	mov	r2, r4
 801ea9e:	494a      	ldr	r1, [pc, #296]	@ (801ebc8 <rmw_init+0x25c>)
 801eaa0:	4628      	mov	r0, r5
 801eaa2:	f7f8 fe8d 	bl	80177c0 <uxr_set_topic_callback>
 801eaa6:	463a      	mov	r2, r7
 801eaa8:	4948      	ldr	r1, [pc, #288]	@ (801ebcc <rmw_init+0x260>)
 801eaaa:	4628      	mov	r0, r5
 801eaac:	f7f8 fe84 	bl	80177b8 <uxr_set_status_callback>
 801eab0:	463a      	mov	r2, r7
 801eab2:	4947      	ldr	r1, [pc, #284]	@ (801ebd0 <rmw_init+0x264>)
 801eab4:	4628      	mov	r0, r5
 801eab6:	f7f8 fe87 	bl	80177c8 <uxr_set_request_callback>
 801eaba:	463a      	mov	r2, r7
 801eabc:	4945      	ldr	r1, [pc, #276]	@ (801ebd4 <rmw_init+0x268>)
 801eabe:	4628      	mov	r0, r5
 801eac0:	f7f8 fe86 	bl	80177d0 <uxr_set_reply_callback>
 801eac4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eac8:	2304      	movs	r3, #4
 801eaca:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801eace:	0092      	lsls	r2, r2, #2
 801ead0:	4628      	mov	r0, r5
 801ead2:	f7f8 febd 	bl	8017850 <uxr_create_input_reliable_stream>
 801ead6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eada:	2304      	movs	r3, #4
 801eadc:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801eae0:	0092      	lsls	r2, r2, #2
 801eae2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801eae6:	4628      	mov	r0, r5
 801eae8:	f7f8 fe88 	bl	80177fc <uxr_create_output_reliable_stream>
 801eaec:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801eaf0:	4628      	mov	r0, r5
 801eaf2:	f7f8 fea7 	bl	8017844 <uxr_create_input_best_effort_stream>
 801eaf6:	f241 3194 	movw	r1, #5012	@ 0x1394
 801eafa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801eafe:	4628      	mov	r0, r5
 801eb00:	4421      	add	r1, r4
 801eb02:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801eb06:	f7f8 fe67 	bl	80177d8 <uxr_create_output_best_effort_stream>
 801eb0a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801eb0e:	4628      	mov	r0, r5
 801eb10:	f7f9 fc70 	bl	80183f4 <uxr_create_session>
 801eb14:	b1f8      	cbz	r0, 801eb56 <rmw_init+0x1ea>
 801eb16:	4638      	mov	r0, r7
 801eb18:	b003      	add	sp, #12
 801eb1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb1e:	270b      	movs	r7, #11
 801eb20:	4638      	mov	r0, r7
 801eb22:	b003      	add	sp, #12
 801eb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb28:	2701      	movs	r7, #1
 801eb2a:	4638      	mov	r0, r7
 801eb2c:	b003      	add	sp, #12
 801eb2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb32:	270c      	movs	r7, #12
 801eb34:	4638      	mov	r0, r7
 801eb36:	b003      	add	sp, #12
 801eb38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb3c:	4648      	mov	r0, r9
 801eb3e:	f7f8 fc55 	bl	80173ec <uxr_close_custom_transport>
 801eb42:	4621      	mov	r1, r4
 801eb44:	480c      	ldr	r0, [pc, #48]	@ (801eb78 <rmw_init+0x20c>)
 801eb46:	f7ff fdb5 	bl	801e6b4 <put_memory>
 801eb4a:	4638      	mov	r0, r7
 801eb4c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801eb50:	b003      	add	sp, #12
 801eb52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb56:	4648      	mov	r0, r9
 801eb58:	f7f8 fc48 	bl	80173ec <uxr_close_custom_transport>
 801eb5c:	4621      	mov	r1, r4
 801eb5e:	4806      	ldr	r0, [pc, #24]	@ (801eb78 <rmw_init+0x20c>)
 801eb60:	f7ff fda8 	bl	801e6b4 <put_memory>
 801eb64:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801eb66:	2701      	movs	r7, #1
 801eb68:	e7d5      	b.n	801eb16 <rmw_init+0x1aa>
 801eb6a:	bf00      	nop
 801eb6c:	08025948 	.word	0x08025948
 801eb70:	24069234 	.word	0x24069234
 801eb74:	240654e0 	.word	0x240654e0
 801eb78:	24069224 	.word	0x24069224
 801eb7c:	24066a88 	.word	0x24066a88
 801eb80:	24064b04 	.word	0x24064b04
 801eb84:	240691f4 	.word	0x240691f4
 801eb88:	24068b88 	.word	0x24068b88
 801eb8c:	24069244 	.word	0x24069244
 801eb90:	24064ba8 	.word	0x24064ba8
 801eb94:	24069204 	.word	0x24069204
 801eb98:	24065418 	.word	0x24065418
 801eb9c:	24069214 	.word	0x24069214
 801eba0:	24064938 	.word	0x24064938
 801eba4:	24064928 	.word	0x24064928
 801eba8:	24068fc0 	.word	0x24068fc0
 801ebac:	24069254 	.word	0x24069254
 801ebb0:	24064a80 	.word	0x24064a80
 801ebb4:	240691e4 	.word	0x240691e4
 801ebb8:	24069164 	.word	0x24069164
 801ebbc:	24069264 	.word	0x24069264
 801ebc0:	24064a00 	.word	0x24064a00
 801ebc4:	240691d4 	.word	0x240691d4
 801ebc8:	08021611 	.word	0x08021611
 801ebcc:	08021609 	.word	0x08021609
 801ebd0:	080216a9 	.word	0x080216a9
 801ebd4:	08021745 	.word	0x08021745

0801ebd8 <rmw_context_fini>:
 801ebd8:	4b17      	ldr	r3, [pc, #92]	@ (801ec38 <rmw_context_fini+0x60>)
 801ebda:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801ebdc:	b570      	push	{r4, r5, r6, lr}
 801ebde:	681c      	ldr	r4, [r3, #0]
 801ebe0:	4605      	mov	r5, r0
 801ebe2:	b334      	cbz	r4, 801ec32 <rmw_context_fini+0x5a>
 801ebe4:	2600      	movs	r6, #0
 801ebe6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801ebea:	6902      	ldr	r2, [r0, #16]
 801ebec:	428a      	cmp	r2, r1
 801ebee:	d018      	beq.n	801ec22 <rmw_context_fini+0x4a>
 801ebf0:	2c00      	cmp	r4, #0
 801ebf2:	d1f8      	bne.n	801ebe6 <rmw_context_fini+0xe>
 801ebf4:	b189      	cbz	r1, 801ec1a <rmw_context_fini+0x42>
 801ebf6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801ebfa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801ebfe:	789b      	ldrb	r3, [r3, #2]
 801ec00:	2b01      	cmp	r3, #1
 801ec02:	bf14      	ite	ne
 801ec04:	210a      	movne	r1, #10
 801ec06:	2100      	moveq	r1, #0
 801ec08:	f7f9 fbcc 	bl	80183a4 <uxr_delete_session_retries>
 801ec0c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ec0e:	f7f7 f88d 	bl	8015d2c <rmw_uxrce_fini_session_memory>
 801ec12:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801ec14:	3010      	adds	r0, #16
 801ec16:	f7f8 fbe9 	bl	80173ec <uxr_close_custom_transport>
 801ec1a:	2300      	movs	r3, #0
 801ec1c:	4630      	mov	r0, r6
 801ec1e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801ec20:	bd70      	pop	{r4, r5, r6, pc}
 801ec22:	3018      	adds	r0, #24
 801ec24:	f000 f90e 	bl	801ee44 <rmw_destroy_node>
 801ec28:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ec2a:	4606      	mov	r6, r0
 801ec2c:	2c00      	cmp	r4, #0
 801ec2e:	d1da      	bne.n	801ebe6 <rmw_context_fini+0xe>
 801ec30:	e7e0      	b.n	801ebf4 <rmw_context_fini+0x1c>
 801ec32:	4626      	mov	r6, r4
 801ec34:	e7de      	b.n	801ebf4 <rmw_context_fini+0x1c>
 801ec36:	bf00      	nop
 801ec38:	240691f4 	.word	0x240691f4

0801ec3c <create_topic>:
 801ec3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec40:	4605      	mov	r5, r0
 801ec42:	b084      	sub	sp, #16
 801ec44:	4822      	ldr	r0, [pc, #136]	@ (801ecd0 <create_topic+0x94>)
 801ec46:	460f      	mov	r7, r1
 801ec48:	4616      	mov	r6, r2
 801ec4a:	f7ff fd23 	bl	801e694 <get_memory>
 801ec4e:	4604      	mov	r4, r0
 801ec50:	2800      	cmp	r0, #0
 801ec52:	d039      	beq.n	801ecc8 <create_topic+0x8c>
 801ec54:	692b      	ldr	r3, [r5, #16]
 801ec56:	2102      	movs	r1, #2
 801ec58:	6884      	ldr	r4, [r0, #8]
 801ec5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ec5e:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801ecd8 <create_topic+0x9c>
 801ec62:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801ec66:	1c42      	adds	r2, r0, #1
 801ec68:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801ec6c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801ec70:	f7f8 fbc0 	bl	80173f4 <uxr_object_id>
 801ec74:	223c      	movs	r2, #60	@ 0x3c
 801ec76:	6120      	str	r0, [r4, #16]
 801ec78:	4641      	mov	r1, r8
 801ec7a:	4638      	mov	r0, r7
 801ec7c:	f7f7 fad4 	bl	8016228 <generate_topic_name>
 801ec80:	b1f0      	cbz	r0, 801ecc0 <create_topic+0x84>
 801ec82:	4f14      	ldr	r7, [pc, #80]	@ (801ecd4 <create_topic+0x98>)
 801ec84:	4630      	mov	r0, r6
 801ec86:	2264      	movs	r2, #100	@ 0x64
 801ec88:	4639      	mov	r1, r7
 801ec8a:	f7f7 fa9f 	bl	80161cc <generate_type_name>
 801ec8e:	b1b8      	cbz	r0, 801ecc0 <create_topic+0x84>
 801ec90:	6928      	ldr	r0, [r5, #16]
 801ec92:	2106      	movs	r1, #6
 801ec94:	696b      	ldr	r3, [r5, #20]
 801ec96:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801ec9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ec9e:	f8cd 8000 	str.w	r8, [sp]
 801eca2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801eca6:	6811      	ldr	r1, [r2, #0]
 801eca8:	6922      	ldr	r2, [r4, #16]
 801ecaa:	f7f8 f927 	bl	8016efc <uxr_buffer_create_topic_bin>
 801ecae:	4602      	mov	r2, r0
 801ecb0:	6928      	ldr	r0, [r5, #16]
 801ecb2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ecb6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ecba:	f7f7 f9bb 	bl	8016034 <run_xrce_session>
 801ecbe:	b918      	cbnz	r0, 801ecc8 <create_topic+0x8c>
 801ecc0:	4620      	mov	r0, r4
 801ecc2:	2400      	movs	r4, #0
 801ecc4:	f7f7 f8a8 	bl	8015e18 <rmw_uxrce_fini_topic_memory>
 801ecc8:	4620      	mov	r0, r4
 801ecca:	b004      	add	sp, #16
 801eccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ecd0:	24069254 	.word	0x24069254
 801ecd4:	240693b0 	.word	0x240693b0
 801ecd8:	24069374 	.word	0x24069374

0801ecdc <destroy_topic>:
 801ecdc:	b538      	push	{r3, r4, r5, lr}
 801ecde:	6985      	ldr	r5, [r0, #24]
 801ece0:	b1dd      	cbz	r5, 801ed1a <destroy_topic+0x3e>
 801ece2:	4604      	mov	r4, r0
 801ece4:	6928      	ldr	r0, [r5, #16]
 801ece6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801ecea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ecee:	6922      	ldr	r2, [r4, #16]
 801ecf0:	6819      	ldr	r1, [r3, #0]
 801ecf2:	f7f8 f885 	bl	8016e00 <uxr_buffer_delete_entity>
 801ecf6:	4602      	mov	r2, r0
 801ecf8:	6928      	ldr	r0, [r5, #16]
 801ecfa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ecfe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ed02:	f7f7 f997 	bl	8016034 <run_xrce_session>
 801ed06:	4603      	mov	r3, r0
 801ed08:	4620      	mov	r0, r4
 801ed0a:	2b00      	cmp	r3, #0
 801ed0c:	bf14      	ite	ne
 801ed0e:	2400      	movne	r4, #0
 801ed10:	2402      	moveq	r4, #2
 801ed12:	f7f7 f881 	bl	8015e18 <rmw_uxrce_fini_topic_memory>
 801ed16:	4620      	mov	r0, r4
 801ed18:	bd38      	pop	{r3, r4, r5, pc}
 801ed1a:	2401      	movs	r4, #1
 801ed1c:	4620      	mov	r0, r4
 801ed1e:	bd38      	pop	{r3, r4, r5, pc}

0801ed20 <create_node>:
 801ed20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed24:	b083      	sub	sp, #12
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d064      	beq.n	801edf4 <create_node+0xd4>
 801ed2a:	4606      	mov	r6, r0
 801ed2c:	4838      	ldr	r0, [pc, #224]	@ (801ee10 <create_node+0xf0>)
 801ed2e:	460f      	mov	r7, r1
 801ed30:	4690      	mov	r8, r2
 801ed32:	461d      	mov	r5, r3
 801ed34:	f7ff fcae 	bl	801e694 <get_memory>
 801ed38:	2800      	cmp	r0, #0
 801ed3a:	d05b      	beq.n	801edf4 <create_node+0xd4>
 801ed3c:	6884      	ldr	r4, [r0, #8]
 801ed3e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801ed40:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801ed44:	f104 0518 	add.w	r5, r4, #24
 801ed48:	6123      	str	r3, [r4, #16]
 801ed4a:	f7ff fd0b 	bl	801e764 <rmw_get_implementation_identifier>
 801ed4e:	f8c4 9020 	str.w	r9, [r4, #32]
 801ed52:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801ed56:	4630      	mov	r0, r6
 801ed58:	f7e1 facc 	bl	80002f4 <strlen>
 801ed5c:	1c42      	adds	r2, r0, #1
 801ed5e:	2a3c      	cmp	r2, #60	@ 0x3c
 801ed60:	d840      	bhi.n	801ede4 <create_node+0xc4>
 801ed62:	4648      	mov	r0, r9
 801ed64:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801ed68:	4631      	mov	r1, r6
 801ed6a:	f003 fbd0 	bl	802250e <memcpy>
 801ed6e:	4638      	mov	r0, r7
 801ed70:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801ed74:	f7e1 fabe 	bl	80002f4 <strlen>
 801ed78:	1c42      	adds	r2, r0, #1
 801ed7a:	2a3c      	cmp	r2, #60	@ 0x3c
 801ed7c:	d832      	bhi.n	801ede4 <create_node+0xc4>
 801ed7e:	4639      	mov	r1, r7
 801ed80:	4648      	mov	r0, r9
 801ed82:	f003 fbc4 	bl	802250e <memcpy>
 801ed86:	6923      	ldr	r3, [r4, #16]
 801ed88:	2101      	movs	r1, #1
 801ed8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ed8e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801ed92:	1842      	adds	r2, r0, r1
 801ed94:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801ed98:	f7f8 fb2c 	bl	80173f4 <uxr_object_id>
 801ed9c:	6160      	str	r0, [r4, #20]
 801ed9e:	783b      	ldrb	r3, [r7, #0]
 801eda0:	2b2f      	cmp	r3, #47	@ 0x2f
 801eda2:	d12c      	bne.n	801edfe <create_node+0xde>
 801eda4:	787b      	ldrb	r3, [r7, #1]
 801eda6:	bb53      	cbnz	r3, 801edfe <create_node+0xde>
 801eda8:	4633      	mov	r3, r6
 801edaa:	4a1a      	ldr	r2, [pc, #104]	@ (801ee14 <create_node+0xf4>)
 801edac:	213c      	movs	r1, #60	@ 0x3c
 801edae:	481a      	ldr	r0, [pc, #104]	@ (801ee18 <create_node+0xf8>)
 801edb0:	f003 f920 	bl	8021ff4 <sniprintf>
 801edb4:	6920      	ldr	r0, [r4, #16]
 801edb6:	2106      	movs	r1, #6
 801edb8:	fa1f f388 	uxth.w	r3, r8
 801edbc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801edc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801edc4:	9101      	str	r1, [sp, #4]
 801edc6:	4914      	ldr	r1, [pc, #80]	@ (801ee18 <create_node+0xf8>)
 801edc8:	9100      	str	r1, [sp, #0]
 801edca:	6811      	ldr	r1, [r2, #0]
 801edcc:	6962      	ldr	r2, [r4, #20]
 801edce:	f7f8 f863 	bl	8016e98 <uxr_buffer_create_participant_bin>
 801edd2:	4602      	mov	r2, r0
 801edd4:	6920      	ldr	r0, [r4, #16]
 801edd6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801edda:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801edde:	f7f7 f929 	bl	8016034 <run_xrce_session>
 801ede2:	b918      	cbnz	r0, 801edec <create_node+0xcc>
 801ede4:	4628      	mov	r0, r5
 801ede6:	2500      	movs	r5, #0
 801ede8:	f7f6 ffa6 	bl	8015d38 <rmw_uxrce_fini_node_memory>
 801edec:	4628      	mov	r0, r5
 801edee:	b003      	add	sp, #12
 801edf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edf4:	2500      	movs	r5, #0
 801edf6:	4628      	mov	r0, r5
 801edf8:	b003      	add	sp, #12
 801edfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edfe:	463b      	mov	r3, r7
 801ee00:	4a06      	ldr	r2, [pc, #24]	@ (801ee1c <create_node+0xfc>)
 801ee02:	213c      	movs	r1, #60	@ 0x3c
 801ee04:	9600      	str	r6, [sp, #0]
 801ee06:	4804      	ldr	r0, [pc, #16]	@ (801ee18 <create_node+0xf8>)
 801ee08:	f003 f8f4 	bl	8021ff4 <sniprintf>
 801ee0c:	e7d2      	b.n	801edb4 <create_node+0x94>
 801ee0e:	bf00      	nop
 801ee10:	240691f4 	.word	0x240691f4
 801ee14:	080249cc 	.word	0x080249cc
 801ee18:	24069414 	.word	0x24069414
 801ee1c:	0802535c 	.word	0x0802535c

0801ee20 <rmw_create_node>:
 801ee20:	468c      	mov	ip, r1
 801ee22:	4611      	mov	r1, r2
 801ee24:	f1bc 0f00 	cmp.w	ip, #0
 801ee28:	d00a      	beq.n	801ee40 <rmw_create_node+0x20>
 801ee2a:	f89c 3000 	ldrb.w	r3, [ip]
 801ee2e:	b13b      	cbz	r3, 801ee40 <rmw_create_node+0x20>
 801ee30:	b132      	cbz	r2, 801ee40 <rmw_create_node+0x20>
 801ee32:	7813      	ldrb	r3, [r2, #0]
 801ee34:	b123      	cbz	r3, 801ee40 <rmw_create_node+0x20>
 801ee36:	4603      	mov	r3, r0
 801ee38:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801ee3a:	4660      	mov	r0, ip
 801ee3c:	f7ff bf70 	b.w	801ed20 <create_node>
 801ee40:	2000      	movs	r0, #0
 801ee42:	4770      	bx	lr

0801ee44 <rmw_destroy_node>:
 801ee44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee46:	b328      	cbz	r0, 801ee94 <rmw_destroy_node+0x50>
 801ee48:	4607      	mov	r7, r0
 801ee4a:	6800      	ldr	r0, [r0, #0]
 801ee4c:	b120      	cbz	r0, 801ee58 <rmw_destroy_node+0x14>
 801ee4e:	4b37      	ldr	r3, [pc, #220]	@ (801ef2c <rmw_destroy_node+0xe8>)
 801ee50:	6819      	ldr	r1, [r3, #0]
 801ee52:	f7e1 fa45 	bl	80002e0 <strcmp>
 801ee56:	b9e8      	cbnz	r0, 801ee94 <rmw_destroy_node+0x50>
 801ee58:	687d      	ldr	r5, [r7, #4]
 801ee5a:	b1dd      	cbz	r5, 801ee94 <rmw_destroy_node+0x50>
 801ee5c:	4b34      	ldr	r3, [pc, #208]	@ (801ef30 <rmw_destroy_node+0xec>)
 801ee5e:	681c      	ldr	r4, [r3, #0]
 801ee60:	2c00      	cmp	r4, #0
 801ee62:	d060      	beq.n	801ef26 <rmw_destroy_node+0xe2>
 801ee64:	2600      	movs	r6, #0
 801ee66:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ee6a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801ee6e:	429d      	cmp	r5, r3
 801ee70:	d013      	beq.n	801ee9a <rmw_destroy_node+0x56>
 801ee72:	2c00      	cmp	r4, #0
 801ee74:	d1f7      	bne.n	801ee66 <rmw_destroy_node+0x22>
 801ee76:	4b2f      	ldr	r3, [pc, #188]	@ (801ef34 <rmw_destroy_node+0xf0>)
 801ee78:	681c      	ldr	r4, [r3, #0]
 801ee7a:	b1c4      	cbz	r4, 801eeae <rmw_destroy_node+0x6a>
 801ee7c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801ee80:	6a0b      	ldr	r3, [r1, #32]
 801ee82:	429d      	cmp	r5, r3
 801ee84:	d1f9      	bne.n	801ee7a <rmw_destroy_node+0x36>
 801ee86:	317c      	adds	r1, #124	@ 0x7c
 801ee88:	4638      	mov	r0, r7
 801ee8a:	f000 fbff 	bl	801f68c <rmw_destroy_subscription>
 801ee8e:	2801      	cmp	r0, #1
 801ee90:	4606      	mov	r6, r0
 801ee92:	d1f2      	bne.n	801ee7a <rmw_destroy_node+0x36>
 801ee94:	2601      	movs	r6, #1
 801ee96:	4630      	mov	r0, r6
 801ee98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee9a:	3184      	adds	r1, #132	@ 0x84
 801ee9c:	4638      	mov	r0, r7
 801ee9e:	f7f6 fd59 	bl	8015954 <rmw_destroy_publisher>
 801eea2:	2801      	cmp	r0, #1
 801eea4:	4606      	mov	r6, r0
 801eea6:	d0f5      	beq.n	801ee94 <rmw_destroy_node+0x50>
 801eea8:	2c00      	cmp	r4, #0
 801eeaa:	d1dc      	bne.n	801ee66 <rmw_destroy_node+0x22>
 801eeac:	e7e3      	b.n	801ee76 <rmw_destroy_node+0x32>
 801eeae:	4b22      	ldr	r3, [pc, #136]	@ (801ef38 <rmw_destroy_node+0xf4>)
 801eeb0:	681c      	ldr	r4, [r3, #0]
 801eeb2:	b16c      	cbz	r4, 801eed0 <rmw_destroy_node+0x8c>
 801eeb4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801eeb8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801eeba:	429d      	cmp	r5, r3
 801eebc:	d1f9      	bne.n	801eeb2 <rmw_destroy_node+0x6e>
 801eebe:	317c      	adds	r1, #124	@ 0x7c
 801eec0:	4638      	mov	r0, r7
 801eec2:	f000 fa6d 	bl	801f3a0 <rmw_destroy_service>
 801eec6:	2801      	cmp	r0, #1
 801eec8:	4606      	mov	r6, r0
 801eeca:	d0e3      	beq.n	801ee94 <rmw_destroy_node+0x50>
 801eecc:	2c00      	cmp	r4, #0
 801eece:	d1f1      	bne.n	801eeb4 <rmw_destroy_node+0x70>
 801eed0:	4b1a      	ldr	r3, [pc, #104]	@ (801ef3c <rmw_destroy_node+0xf8>)
 801eed2:	681c      	ldr	r4, [r3, #0]
 801eed4:	b16c      	cbz	r4, 801eef2 <rmw_destroy_node+0xae>
 801eed6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801eeda:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801eedc:	429d      	cmp	r5, r3
 801eede:	d1f9      	bne.n	801eed4 <rmw_destroy_node+0x90>
 801eee0:	317c      	adds	r1, #124	@ 0x7c
 801eee2:	4638      	mov	r0, r7
 801eee4:	f7ff fbfa 	bl	801e6dc <rmw_destroy_client>
 801eee8:	2801      	cmp	r0, #1
 801eeea:	4606      	mov	r6, r0
 801eeec:	d0d2      	beq.n	801ee94 <rmw_destroy_node+0x50>
 801eeee:	2c00      	cmp	r4, #0
 801eef0:	d1f1      	bne.n	801eed6 <rmw_destroy_node+0x92>
 801eef2:	6928      	ldr	r0, [r5, #16]
 801eef4:	696a      	ldr	r2, [r5, #20]
 801eef6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801eefa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801eefe:	6819      	ldr	r1, [r3, #0]
 801ef00:	f7f7 ff7e 	bl	8016e00 <uxr_buffer_delete_entity>
 801ef04:	4602      	mov	r2, r0
 801ef06:	6928      	ldr	r0, [r5, #16]
 801ef08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801ef0c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801ef10:	f7f7 f890 	bl	8016034 <run_xrce_session>
 801ef14:	4603      	mov	r3, r0
 801ef16:	4638      	mov	r0, r7
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	bf08      	it	eq
 801ef1c:	2602      	moveq	r6, #2
 801ef1e:	f7f6 ff0b 	bl	8015d38 <rmw_uxrce_fini_node_memory>
 801ef22:	4630      	mov	r0, r6
 801ef24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef26:	4626      	mov	r6, r4
 801ef28:	e7a5      	b.n	801ee76 <rmw_destroy_node+0x32>
 801ef2a:	bf00      	nop
 801ef2c:	08025948 	.word	0x08025948
 801ef30:	24069204 	.word	0x24069204
 801ef34:	24069244 	.word	0x24069244
 801ef38:	24069214 	.word	0x24069214
 801ef3c:	24064928 	.word	0x24064928

0801ef40 <rmw_node_get_graph_guard_condition>:
 801ef40:	6843      	ldr	r3, [r0, #4]
 801ef42:	6918      	ldr	r0, [r3, #16]
 801ef44:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801ef48:	4770      	bx	lr
 801ef4a:	bf00      	nop

0801ef4c <rmw_send_request>:
 801ef4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef50:	4604      	mov	r4, r0
 801ef52:	6800      	ldr	r0, [r0, #0]
 801ef54:	b08b      	sub	sp, #44	@ 0x2c
 801ef56:	460e      	mov	r6, r1
 801ef58:	4615      	mov	r5, r2
 801ef5a:	b128      	cbz	r0, 801ef68 <rmw_send_request+0x1c>
 801ef5c:	4b21      	ldr	r3, [pc, #132]	@ (801efe4 <rmw_send_request+0x98>)
 801ef5e:	6819      	ldr	r1, [r3, #0]
 801ef60:	f7e1 f9be 	bl	80002e0 <strcmp>
 801ef64:	2800      	cmp	r0, #0
 801ef66:	d139      	bne.n	801efdc <rmw_send_request+0x90>
 801ef68:	6864      	ldr	r4, [r4, #4]
 801ef6a:	2700      	movs	r7, #0
 801ef6c:	6963      	ldr	r3, [r4, #20]
 801ef6e:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801ef72:	689b      	ldr	r3, [r3, #8]
 801ef74:	4798      	blx	r3
 801ef76:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801ef7a:	4630      	mov	r0, r6
 801ef7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ef80:	4798      	blx	r3
 801ef82:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ef86:	9000      	str	r0, [sp, #0]
 801ef88:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801ef8c:	6922      	ldr	r2, [r4, #16]
 801ef8e:	ab02      	add	r3, sp, #8
 801ef90:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801ef92:	f7fa fb37 	bl	8019604 <uxr_prepare_output_stream>
 801ef96:	e9c5 0700 	strd	r0, r7, [r5]
 801ef9a:	b198      	cbz	r0, 801efc4 <rmw_send_request+0x78>
 801ef9c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801efa0:	a902      	add	r1, sp, #8
 801efa2:	4630      	mov	r0, r6
 801efa4:	4798      	blx	r3
 801efa6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801efaa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801efae:	2b01      	cmp	r3, #1
 801efb0:	d00c      	beq.n	801efcc <rmw_send_request+0x80>
 801efb2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801efb4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801efb8:	f7f9 f82a 	bl	8018010 <uxr_run_session_until_confirm_delivery>
 801efbc:	4638      	mov	r0, r7
 801efbe:	b00b      	add	sp, #44	@ 0x2c
 801efc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efc4:	2001      	movs	r0, #1
 801efc6:	b00b      	add	sp, #44	@ 0x2c
 801efc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efcc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801efd0:	f7f8 fc64 	bl	801789c <uxr_flash_output_streams>
 801efd4:	4638      	mov	r0, r7
 801efd6:	b00b      	add	sp, #44	@ 0x2c
 801efd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efdc:	200c      	movs	r0, #12
 801efde:	b00b      	add	sp, #44	@ 0x2c
 801efe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801efe4:	08025948 	.word	0x08025948

0801efe8 <rmw_take_request>:
 801efe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801efec:	4605      	mov	r5, r0
 801efee:	6800      	ldr	r0, [r0, #0]
 801eff0:	b089      	sub	sp, #36	@ 0x24
 801eff2:	460c      	mov	r4, r1
 801eff4:	4690      	mov	r8, r2
 801eff6:	461e      	mov	r6, r3
 801eff8:	b128      	cbz	r0, 801f006 <rmw_take_request+0x1e>
 801effa:	4b28      	ldr	r3, [pc, #160]	@ (801f09c <rmw_take_request+0xb4>)
 801effc:	6819      	ldr	r1, [r3, #0]
 801effe:	f7e1 f96f 	bl	80002e0 <strcmp>
 801f002:	2800      	cmp	r0, #0
 801f004:	d146      	bne.n	801f094 <rmw_take_request+0xac>
 801f006:	b10e      	cbz	r6, 801f00c <rmw_take_request+0x24>
 801f008:	2300      	movs	r3, #0
 801f00a:	7033      	strb	r3, [r6, #0]
 801f00c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801f010:	f7f6 ff92 	bl	8015f38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f014:	4648      	mov	r0, r9
 801f016:	f7f6 ff65 	bl	8015ee4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f01a:	4607      	mov	r7, r0
 801f01c:	b3b0      	cbz	r0, 801f08c <rmw_take_request+0xa4>
 801f01e:	6885      	ldr	r5, [r0, #8]
 801f020:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801f024:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801f028:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801f02c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801f030:	7423      	strb	r3, [r4, #16]
 801f032:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801f036:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801f03a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801f03e:	74e3      	strb	r3, [r4, #19]
 801f040:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801f044:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801f048:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801f04c:	6161      	str	r1, [r4, #20]
 801f04e:	61a2      	str	r2, [r4, #24]
 801f050:	61e3      	str	r3, [r4, #28]
 801f052:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f056:	689b      	ldr	r3, [r3, #8]
 801f058:	4798      	blx	r3
 801f05a:	6844      	ldr	r4, [r0, #4]
 801f05c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801f060:	f105 0110 	add.w	r1, r5, #16
 801f064:	4668      	mov	r0, sp
 801f066:	f7f5 f88f 	bl	8014188 <ucdr_init_buffer>
 801f06a:	4641      	mov	r1, r8
 801f06c:	68e3      	ldr	r3, [r4, #12]
 801f06e:	4668      	mov	r0, sp
 801f070:	4798      	blx	r3
 801f072:	4639      	mov	r1, r7
 801f074:	4604      	mov	r4, r0
 801f076:	480a      	ldr	r0, [pc, #40]	@ (801f0a0 <rmw_take_request+0xb8>)
 801f078:	f7ff fb1c 	bl	801e6b4 <put_memory>
 801f07c:	b106      	cbz	r6, 801f080 <rmw_take_request+0x98>
 801f07e:	7034      	strb	r4, [r6, #0]
 801f080:	f084 0001 	eor.w	r0, r4, #1
 801f084:	b2c0      	uxtb	r0, r0
 801f086:	b009      	add	sp, #36	@ 0x24
 801f088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f08c:	2001      	movs	r0, #1
 801f08e:	b009      	add	sp, #36	@ 0x24
 801f090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f094:	200c      	movs	r0, #12
 801f096:	b009      	add	sp, #36	@ 0x24
 801f098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f09c:	08025948 	.word	0x08025948
 801f0a0:	24069234 	.word	0x24069234

0801f0a4 <rmw_send_response>:
 801f0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f0a6:	4605      	mov	r5, r0
 801f0a8:	6800      	ldr	r0, [r0, #0]
 801f0aa:	b091      	sub	sp, #68	@ 0x44
 801f0ac:	460c      	mov	r4, r1
 801f0ae:	4616      	mov	r6, r2
 801f0b0:	b128      	cbz	r0, 801f0be <rmw_send_response+0x1a>
 801f0b2:	4b29      	ldr	r3, [pc, #164]	@ (801f158 <rmw_send_response+0xb4>)
 801f0b4:	6819      	ldr	r1, [r3, #0]
 801f0b6:	f7e1 f913 	bl	80002e0 <strcmp>
 801f0ba:	2800      	cmp	r0, #0
 801f0bc:	d141      	bne.n	801f142 <rmw_send_response+0x9e>
 801f0be:	686d      	ldr	r5, [r5, #4]
 801f0c0:	68a1      	ldr	r1, [r4, #8]
 801f0c2:	6860      	ldr	r0, [r4, #4]
 801f0c4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801f0c6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801f0ca:	9307      	str	r3, [sp, #28]
 801f0cc:	4623      	mov	r3, r4
 801f0ce:	9206      	str	r2, [sp, #24]
 801f0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f0d4:	789b      	ldrb	r3, [r3, #2]
 801f0d6:	f88d 2017 	strb.w	r2, [sp, #23]
 801f0da:	f88d 3016 	strb.w	r3, [sp, #22]
 801f0de:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801f0e2:	68e2      	ldr	r2, [r4, #12]
 801f0e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f0e8:	ab02      	add	r3, sp, #8
 801f0ea:	696c      	ldr	r4, [r5, #20]
 801f0ec:	c307      	stmia	r3!, {r0, r1, r2}
 801f0ee:	68e3      	ldr	r3, [r4, #12]
 801f0f0:	4798      	blx	r3
 801f0f2:	6844      	ldr	r4, [r0, #4]
 801f0f4:	4630      	mov	r0, r6
 801f0f6:	6923      	ldr	r3, [r4, #16]
 801f0f8:	4798      	blx	r3
 801f0fa:	f100 0318 	add.w	r3, r0, #24
 801f0fe:	6938      	ldr	r0, [r7, #16]
 801f100:	9300      	str	r3, [sp, #0]
 801f102:	ab08      	add	r3, sp, #32
 801f104:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f108:	692a      	ldr	r2, [r5, #16]
 801f10a:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801f10c:	f7fa fa7a 	bl	8019604 <uxr_prepare_output_stream>
 801f110:	b910      	cbnz	r0, 801f118 <rmw_send_response+0x74>
 801f112:	2001      	movs	r0, #1
 801f114:	b011      	add	sp, #68	@ 0x44
 801f116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f118:	a902      	add	r1, sp, #8
 801f11a:	a808      	add	r0, sp, #32
 801f11c:	f7fb fc02 	bl	801a924 <uxr_serialize_SampleIdentity>
 801f120:	68a3      	ldr	r3, [r4, #8]
 801f122:	a908      	add	r1, sp, #32
 801f124:	4630      	mov	r0, r6
 801f126:	4798      	blx	r3
 801f128:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801f12c:	6938      	ldr	r0, [r7, #16]
 801f12e:	2b01      	cmp	r3, #1
 801f130:	d00a      	beq.n	801f148 <rmw_send_response+0xa4>
 801f132:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801f134:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f138:	f7f8 ff6a 	bl	8018010 <uxr_run_session_until_confirm_delivery>
 801f13c:	2000      	movs	r0, #0
 801f13e:	b011      	add	sp, #68	@ 0x44
 801f140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f142:	200c      	movs	r0, #12
 801f144:	b011      	add	sp, #68	@ 0x44
 801f146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f148:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f14c:	f7f8 fba6 	bl	801789c <uxr_flash_output_streams>
 801f150:	2000      	movs	r0, #0
 801f152:	b011      	add	sp, #68	@ 0x44
 801f154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f156:	bf00      	nop
 801f158:	08025948 	.word	0x08025948

0801f15c <rmw_take_response>:
 801f15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f160:	4604      	mov	r4, r0
 801f162:	6800      	ldr	r0, [r0, #0]
 801f164:	b088      	sub	sp, #32
 801f166:	460f      	mov	r7, r1
 801f168:	4690      	mov	r8, r2
 801f16a:	461d      	mov	r5, r3
 801f16c:	b120      	cbz	r0, 801f178 <rmw_take_response+0x1c>
 801f16e:	4b1d      	ldr	r3, [pc, #116]	@ (801f1e4 <rmw_take_response+0x88>)
 801f170:	6819      	ldr	r1, [r3, #0]
 801f172:	f7e1 f8b5 	bl	80002e0 <strcmp>
 801f176:	bb68      	cbnz	r0, 801f1d4 <rmw_take_response+0x78>
 801f178:	b10d      	cbz	r5, 801f17e <rmw_take_response+0x22>
 801f17a:	2300      	movs	r3, #0
 801f17c:	702b      	strb	r3, [r5, #0]
 801f17e:	6864      	ldr	r4, [r4, #4]
 801f180:	f7f6 feda 	bl	8015f38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f184:	4620      	mov	r0, r4
 801f186:	f7f6 fead 	bl	8015ee4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f18a:	4606      	mov	r6, r0
 801f18c:	b330      	cbz	r0, 801f1dc <rmw_take_response+0x80>
 801f18e:	6963      	ldr	r3, [r4, #20]
 801f190:	6884      	ldr	r4, [r0, #8]
 801f192:	68db      	ldr	r3, [r3, #12]
 801f194:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801f198:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801f19c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801f1a0:	4798      	blx	r3
 801f1a2:	6847      	ldr	r7, [r0, #4]
 801f1a4:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801f1a8:	f104 0110 	add.w	r1, r4, #16
 801f1ac:	4668      	mov	r0, sp
 801f1ae:	f7f4 ffeb 	bl	8014188 <ucdr_init_buffer>
 801f1b2:	4641      	mov	r1, r8
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	4668      	mov	r0, sp
 801f1b8:	4798      	blx	r3
 801f1ba:	4631      	mov	r1, r6
 801f1bc:	4604      	mov	r4, r0
 801f1be:	480a      	ldr	r0, [pc, #40]	@ (801f1e8 <rmw_take_response+0x8c>)
 801f1c0:	f7ff fa78 	bl	801e6b4 <put_memory>
 801f1c4:	b105      	cbz	r5, 801f1c8 <rmw_take_response+0x6c>
 801f1c6:	702c      	strb	r4, [r5, #0]
 801f1c8:	f084 0001 	eor.w	r0, r4, #1
 801f1cc:	b2c0      	uxtb	r0, r0
 801f1ce:	b008      	add	sp, #32
 801f1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1d4:	200c      	movs	r0, #12
 801f1d6:	b008      	add	sp, #32
 801f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1dc:	2001      	movs	r0, #1
 801f1de:	b008      	add	sp, #32
 801f1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1e4:	08025948 	.word	0x08025948
 801f1e8:	24069234 	.word	0x24069234

0801f1ec <rmw_create_service>:
 801f1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1f0:	b091      	sub	sp, #68	@ 0x44
 801f1f2:	2900      	cmp	r1, #0
 801f1f4:	f000 80bb 	beq.w	801f36e <rmw_create_service+0x182>
 801f1f8:	4606      	mov	r6, r0
 801f1fa:	2800      	cmp	r0, #0
 801f1fc:	f000 80b7 	beq.w	801f36e <rmw_create_service+0x182>
 801f200:	4614      	mov	r4, r2
 801f202:	6800      	ldr	r0, [r0, #0]
 801f204:	4689      	mov	r9, r1
 801f206:	461d      	mov	r5, r3
 801f208:	f7f7 f826 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 801f20c:	2c00      	cmp	r4, #0
 801f20e:	f000 80ae 	beq.w	801f36e <rmw_create_service+0x182>
 801f212:	f080 0001 	eor.w	r0, r0, #1
 801f216:	b2c0      	uxtb	r0, r0
 801f218:	2800      	cmp	r0, #0
 801f21a:	f040 80a8 	bne.w	801f36e <rmw_create_service+0x182>
 801f21e:	7823      	ldrb	r3, [r4, #0]
 801f220:	2b00      	cmp	r3, #0
 801f222:	f000 80a4 	beq.w	801f36e <rmw_create_service+0x182>
 801f226:	2d00      	cmp	r5, #0
 801f228:	f000 80a1 	beq.w	801f36e <rmw_create_service+0x182>
 801f22c:	4856      	ldr	r0, [pc, #344]	@ (801f388 <rmw_create_service+0x19c>)
 801f22e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801f232:	f7ff fa2f 	bl	801e694 <get_memory>
 801f236:	4606      	mov	r6, r0
 801f238:	2800      	cmp	r0, #0
 801f23a:	f000 8099 	beq.w	801f370 <rmw_create_service+0x184>
 801f23e:	6887      	ldr	r7, [r0, #8]
 801f240:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801f244:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801f248:	f7ff fa8c 	bl	801e764 <rmw_get_implementation_identifier>
 801f24c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801f24e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801f252:	4620      	mov	r0, r4
 801f254:	f7e1 f84e 	bl	80002f4 <strlen>
 801f258:	1c42      	adds	r2, r0, #1
 801f25a:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801f25e:	2a3c      	cmp	r2, #60	@ 0x3c
 801f260:	f200 808a 	bhi.w	801f378 <rmw_create_service+0x18c>
 801f264:	4621      	mov	r1, r4
 801f266:	4650      	mov	r0, sl
 801f268:	f003 f951 	bl	802250e <memcpy>
 801f26c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801f270:	4629      	mov	r1, r5
 801f272:	2250      	movs	r2, #80	@ 0x50
 801f274:	f107 0020 	add.w	r0, r7, #32
 801f278:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 801f27c:	677b      	str	r3, [r7, #116]	@ 0x74
 801f27e:	f003 f946 	bl	802250e <memcpy>
 801f282:	4648      	mov	r0, r9
 801f284:	4941      	ldr	r1, [pc, #260]	@ (801f38c <rmw_create_service+0x1a0>)
 801f286:	f7f7 f86f 	bl	8016368 <get_service_typesupport_handle>
 801f28a:	2800      	cmp	r0, #0
 801f28c:	d074      	beq.n	801f378 <rmw_create_service+0x18c>
 801f28e:	6843      	ldr	r3, [r0, #4]
 801f290:	617b      	str	r3, [r7, #20]
 801f292:	2b00      	cmp	r3, #0
 801f294:	d070      	beq.n	801f378 <rmw_create_service+0x18c>
 801f296:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f29a:	2108      	movs	r1, #8
 801f29c:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 801f394 <rmw_create_service+0x1a8>
 801f2a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f2a4:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 801f398 <rmw_create_service+0x1ac>
 801f2a8:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801f2ac:	1c42      	adds	r2, r0, #1
 801f2ae:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801f2b2:	f7f8 f89f 	bl	80173f4 <uxr_object_id>
 801f2b6:	2364      	movs	r3, #100	@ 0x64
 801f2b8:	6138      	str	r0, [r7, #16]
 801f2ba:	4652      	mov	r2, sl
 801f2bc:	4649      	mov	r1, r9
 801f2be:	6978      	ldr	r0, [r7, #20]
 801f2c0:	f7f6 ff1e 	bl	8016100 <generate_service_types>
 801f2c4:	2800      	cmp	r0, #0
 801f2c6:	d057      	beq.n	801f378 <rmw_create_service+0x18c>
 801f2c8:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 801f39c <rmw_create_service+0x1b0>
 801f2cc:	233c      	movs	r3, #60	@ 0x3c
 801f2ce:	4a30      	ldr	r2, [pc, #192]	@ (801f390 <rmw_create_service+0x1a4>)
 801f2d0:	4620      	mov	r0, r4
 801f2d2:	4659      	mov	r1, fp
 801f2d4:	f7f6 fee2 	bl	801609c <generate_service_topics>
 801f2d8:	2800      	cmp	r0, #0
 801f2da:	d04d      	beq.n	801f378 <rmw_create_service+0x18c>
 801f2dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f2e0:	a80c      	add	r0, sp, #48	@ 0x30
 801f2e2:	4629      	mov	r1, r5
 801f2e4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801f2e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f2ec:	f7f6 febe 	bl	801606c <convert_qos_profile>
 801f2f0:	4a27      	ldr	r2, [pc, #156]	@ (801f390 <rmw_create_service+0x1a4>)
 801f2f2:	a80c      	add	r0, sp, #48	@ 0x30
 801f2f4:	9400      	str	r4, [sp, #0]
 801f2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2f8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801f2fc:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801f300:	c803      	ldmia	r0, {r0, r1}
 801f302:	9a08      	ldr	r2, [sp, #32]
 801f304:	9005      	str	r0, [sp, #20]
 801f306:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801f30a:	2306      	movs	r3, #6
 801f30c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801f310:	9307      	str	r3, [sp, #28]
 801f312:	6811      	ldr	r1, [r2, #0]
 801f314:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801f318:	693a      	ldr	r2, [r7, #16]
 801f31a:	f7f7 ff73 	bl	8017204 <uxr_buffer_create_replier_bin>
 801f31e:	4602      	mov	r2, r0
 801f320:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f324:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f328:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f32c:	f7f6 fe82 	bl	8016034 <run_xrce_session>
 801f330:	b310      	cbz	r0, 801f378 <rmw_create_service+0x18c>
 801f332:	7a2b      	ldrb	r3, [r5, #8]
 801f334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f338:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801f33c:	2b02      	cmp	r3, #2
 801f33e:	920e      	str	r2, [sp, #56]	@ 0x38
 801f340:	f04f 0200 	mov.w	r2, #0
 801f344:	920f      	str	r2, [sp, #60]	@ 0x3c
 801f346:	bf0c      	ite	eq
 801f348:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801f34c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801f350:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f354:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f356:	ab0e      	add	r3, sp, #56	@ 0x38
 801f358:	673a      	str	r2, [r7, #112]	@ 0x70
 801f35a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	@ 0xe4
 801f35e:	9300      	str	r3, [sp, #0]
 801f360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f362:	6811      	ldr	r1, [r2, #0]
 801f364:	693a      	ldr	r2, [r7, #16]
 801f366:	f001 fc6b 	bl	8020c40 <uxr_buffer_request_data>
 801f36a:	8338      	strh	r0, [r7, #24]
 801f36c:	e000      	b.n	801f370 <rmw_create_service+0x184>
 801f36e:	2600      	movs	r6, #0
 801f370:	4630      	mov	r0, r6
 801f372:	b011      	add	sp, #68	@ 0x44
 801f374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f378:	4630      	mov	r0, r6
 801f37a:	2600      	movs	r6, #0
 801f37c:	f7f6 fd20 	bl	8015dc0 <rmw_uxrce_fini_service_memory>
 801f380:	4630      	mov	r0, r6
 801f382:	b011      	add	sp, #68	@ 0x44
 801f384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f388:	24069214 	.word	0x24069214
 801f38c:	08023698 	.word	0x08023698
 801f390:	240694f0 	.word	0x240694f0
 801f394:	2406952c 	.word	0x2406952c
 801f398:	2406948c 	.word	0x2406948c
 801f39c:	24069450 	.word	0x24069450

0801f3a0 <rmw_destroy_service>:
 801f3a0:	b570      	push	{r4, r5, r6, lr}
 801f3a2:	b128      	cbz	r0, 801f3b0 <rmw_destroy_service+0x10>
 801f3a4:	4604      	mov	r4, r0
 801f3a6:	6800      	ldr	r0, [r0, #0]
 801f3a8:	460d      	mov	r5, r1
 801f3aa:	f7f6 ff55 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 801f3ae:	b910      	cbnz	r0, 801f3b6 <rmw_destroy_service+0x16>
 801f3b0:	2401      	movs	r4, #1
 801f3b2:	4620      	mov	r0, r4
 801f3b4:	bd70      	pop	{r4, r5, r6, pc}
 801f3b6:	6863      	ldr	r3, [r4, #4]
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d0f9      	beq.n	801f3b0 <rmw_destroy_service+0x10>
 801f3bc:	2d00      	cmp	r5, #0
 801f3be:	d0f7      	beq.n	801f3b0 <rmw_destroy_service+0x10>
 801f3c0:	6828      	ldr	r0, [r5, #0]
 801f3c2:	f7f6 ff49 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 801f3c6:	2800      	cmp	r0, #0
 801f3c8:	d0f2      	beq.n	801f3b0 <rmw_destroy_service+0x10>
 801f3ca:	686e      	ldr	r6, [r5, #4]
 801f3cc:	2e00      	cmp	r6, #0
 801f3ce:	d0ef      	beq.n	801f3b0 <rmw_destroy_service+0x10>
 801f3d0:	6864      	ldr	r4, [r4, #4]
 801f3d2:	6932      	ldr	r2, [r6, #16]
 801f3d4:	6920      	ldr	r0, [r4, #16]
 801f3d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f3da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f3de:	6819      	ldr	r1, [r3, #0]
 801f3e0:	f001 fc68 	bl	8020cb4 <uxr_buffer_cancel_data>
 801f3e4:	4602      	mov	r2, r0
 801f3e6:	6920      	ldr	r0, [r4, #16]
 801f3e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f3ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f3f0:	f7f6 fe20 	bl	8016034 <run_xrce_session>
 801f3f4:	6920      	ldr	r0, [r4, #16]
 801f3f6:	6932      	ldr	r2, [r6, #16]
 801f3f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f3fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f400:	6819      	ldr	r1, [r3, #0]
 801f402:	f7f7 fcfd 	bl	8016e00 <uxr_buffer_delete_entity>
 801f406:	4602      	mov	r2, r0
 801f408:	6920      	ldr	r0, [r4, #16]
 801f40a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f40e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f412:	f7f6 fe0f 	bl	8016034 <run_xrce_session>
 801f416:	4603      	mov	r3, r0
 801f418:	4628      	mov	r0, r5
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	bf14      	ite	ne
 801f41e:	2400      	movne	r4, #0
 801f420:	2402      	moveq	r4, #2
 801f422:	f7f6 fccd 	bl	8015dc0 <rmw_uxrce_fini_service_memory>
 801f426:	e7c4      	b.n	801f3b2 <rmw_destroy_service+0x12>

0801f428 <rmw_service_response_publisher_get_actual_qos>:
 801f428:	b181      	cbz	r1, 801f44c <rmw_service_response_publisher_get_actual_qos+0x24>
 801f42a:	4603      	mov	r3, r0
 801f42c:	b510      	push	{r4, lr}
 801f42e:	fab0 f480 	clz	r4, r0
 801f432:	0964      	lsrs	r4, r4, #5
 801f434:	b140      	cbz	r0, 801f448 <rmw_service_response_publisher_get_actual_qos+0x20>
 801f436:	685b      	ldr	r3, [r3, #4]
 801f438:	4608      	mov	r0, r1
 801f43a:	2250      	movs	r2, #80	@ 0x50
 801f43c:	f103 0120 	add.w	r1, r3, #32
 801f440:	f003 f865 	bl	802250e <memcpy>
 801f444:	4620      	mov	r0, r4
 801f446:	bd10      	pop	{r4, pc}
 801f448:	200b      	movs	r0, #11
 801f44a:	bd10      	pop	{r4, pc}
 801f44c:	200b      	movs	r0, #11
 801f44e:	4770      	bx	lr

0801f450 <rmw_service_request_subscription_get_actual_qos>:
 801f450:	b178      	cbz	r0, 801f472 <rmw_service_request_subscription_get_actual_qos+0x22>
 801f452:	b510      	push	{r4, lr}
 801f454:	fab1 f481 	clz	r4, r1
 801f458:	0964      	lsrs	r4, r4, #5
 801f45a:	b141      	cbz	r1, 801f46e <rmw_service_request_subscription_get_actual_qos+0x1e>
 801f45c:	6843      	ldr	r3, [r0, #4]
 801f45e:	2250      	movs	r2, #80	@ 0x50
 801f460:	4608      	mov	r0, r1
 801f462:	f103 0120 	add.w	r1, r3, #32
 801f466:	f003 f852 	bl	802250e <memcpy>
 801f46a:	4620      	mov	r0, r4
 801f46c:	bd10      	pop	{r4, pc}
 801f46e:	200b      	movs	r0, #11
 801f470:	bd10      	pop	{r4, pc}
 801f472:	200b      	movs	r0, #11
 801f474:	4770      	bx	lr
 801f476:	bf00      	nop

0801f478 <rmw_create_subscription>:
 801f478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f47c:	b08d      	sub	sp, #52	@ 0x34
 801f47e:	2900      	cmp	r1, #0
 801f480:	f000 80d8 	beq.w	801f634 <rmw_create_subscription+0x1bc>
 801f484:	4604      	mov	r4, r0
 801f486:	2800      	cmp	r0, #0
 801f488:	f000 80d4 	beq.w	801f634 <rmw_create_subscription+0x1bc>
 801f48c:	6800      	ldr	r0, [r0, #0]
 801f48e:	460e      	mov	r6, r1
 801f490:	4615      	mov	r5, r2
 801f492:	461f      	mov	r7, r3
 801f494:	f7f6 fee0 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 801f498:	f080 0001 	eor.w	r0, r0, #1
 801f49c:	b2c0      	uxtb	r0, r0
 801f49e:	2800      	cmp	r0, #0
 801f4a0:	f040 80c8 	bne.w	801f634 <rmw_create_subscription+0x1bc>
 801f4a4:	2d00      	cmp	r5, #0
 801f4a6:	f000 80c5 	beq.w	801f634 <rmw_create_subscription+0x1bc>
 801f4aa:	782b      	ldrb	r3, [r5, #0]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	f000 80c1 	beq.w	801f634 <rmw_create_subscription+0x1bc>
 801f4b2:	2f00      	cmp	r7, #0
 801f4b4:	f000 80be 	beq.w	801f634 <rmw_create_subscription+0x1bc>
 801f4b8:	4867      	ldr	r0, [pc, #412]	@ (801f658 <rmw_create_subscription+0x1e0>)
 801f4ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f4be:	f7ff f8e9 	bl	801e694 <get_memory>
 801f4c2:	4604      	mov	r4, r0
 801f4c4:	2800      	cmp	r0, #0
 801f4c6:	f000 80b6 	beq.w	801f636 <rmw_create_subscription+0x1be>
 801f4ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f4ce:	f108 0a98 	add.w	sl, r8, #152	@ 0x98
 801f4d2:	f8c8 8080 	str.w	r8, [r8, #128]	@ 0x80
 801f4d6:	f7ff f945 	bl	801e764 <rmw_get_implementation_identifier>
 801f4da:	f8c8 007c 	str.w	r0, [r8, #124]	@ 0x7c
 801f4de:	f8c8 a084 	str.w	sl, [r8, #132]	@ 0x84
 801f4e2:	4628      	mov	r0, r5
 801f4e4:	f7e0 ff06 	bl	80002f4 <strlen>
 801f4e8:	3001      	adds	r0, #1
 801f4ea:	f108 047c 	add.w	r4, r8, #124	@ 0x7c
 801f4ee:	283c      	cmp	r0, #60	@ 0x3c
 801f4f0:	f200 80a5 	bhi.w	801f63e <rmw_create_subscription+0x1c6>
 801f4f4:	462b      	mov	r3, r5
 801f4f6:	4a59      	ldr	r2, [pc, #356]	@ (801f65c <rmw_create_subscription+0x1e4>)
 801f4f8:	213c      	movs	r1, #60	@ 0x3c
 801f4fa:	4650      	mov	r0, sl
 801f4fc:	f002 fd7a 	bl	8021ff4 <sniprintf>
 801f500:	4639      	mov	r1, r7
 801f502:	2250      	movs	r2, #80	@ 0x50
 801f504:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801f508:	f8c8 9020 	str.w	r9, [r8, #32]
 801f50c:	f002 ffff 	bl	802250e <memcpy>
 801f510:	4630      	mov	r0, r6
 801f512:	4953      	ldr	r1, [pc, #332]	@ (801f660 <rmw_create_subscription+0x1e8>)
 801f514:	f7f6 ff1c 	bl	8016350 <get_message_typesupport_handle>
 801f518:	2800      	cmp	r0, #0
 801f51a:	f000 8090 	beq.w	801f63e <rmw_create_subscription+0x1c6>
 801f51e:	6842      	ldr	r2, [r0, #4]
 801f520:	f8c8 2018 	str.w	r2, [r8, #24]
 801f524:	2a00      	cmp	r2, #0
 801f526:	f000 808a 	beq.w	801f63e <rmw_create_subscription+0x1c6>
 801f52a:	4629      	mov	r1, r5
 801f52c:	463b      	mov	r3, r7
 801f52e:	4648      	mov	r0, r9
 801f530:	f7ff fb84 	bl	801ec3c <create_topic>
 801f534:	f8c8 001c 	str.w	r0, [r8, #28]
 801f538:	2800      	cmp	r0, #0
 801f53a:	f000 8085 	beq.w	801f648 <rmw_create_subscription+0x1d0>
 801f53e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f542:	2104      	movs	r1, #4
 801f544:	2506      	movs	r5, #6
 801f546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f54a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801f54e:	1c42      	adds	r2, r0, #1
 801f550:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801f554:	f7f7 ff4e 	bl	80173f4 <uxr_object_id>
 801f558:	f8c8 0010 	str.w	r0, [r8, #16]
 801f55c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f560:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801f564:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f568:	9500      	str	r5, [sp, #0]
 801f56a:	6819      	ldr	r1, [r3, #0]
 801f56c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f570:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f574:	f7f7 fd28 	bl	8016fc8 <uxr_buffer_create_subscriber_bin>
 801f578:	4602      	mov	r2, r0
 801f57a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f57e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f582:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f586:	f7f6 fd55 	bl	8016034 <run_xrce_session>
 801f58a:	2800      	cmp	r0, #0
 801f58c:	d057      	beq.n	801f63e <rmw_create_subscription+0x1c6>
 801f58e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f592:	4629      	mov	r1, r5
 801f594:	ae08      	add	r6, sp, #32
 801f596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801f59a:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801f59e:	1c42      	adds	r2, r0, #1
 801f5a0:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801f5a4:	f7f7 ff26 	bl	80173f4 <uxr_object_id>
 801f5a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f5ac:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801f5b0:	4639      	mov	r1, r7
 801f5b2:	f8c8 0014 	str.w	r0, [r8, #20]
 801f5b6:	4630      	mov	r0, r6
 801f5b8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801f5bc:	9305      	str	r3, [sp, #20]
 801f5be:	f7f6 fd55 	bl	801606c <convert_qos_profile>
 801f5c2:	9503      	str	r5, [sp, #12]
 801f5c4:	9b05      	ldr	r3, [sp, #20]
 801f5c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f5ca:	9001      	str	r0, [sp, #4]
 801f5cc:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801f5d0:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f5d4:	691b      	ldr	r3, [r3, #16]
 801f5d6:	9300      	str	r3, [sp, #0]
 801f5d8:	f8db 1000 	ldr.w	r1, [fp]
 801f5dc:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801f5e0:	f7f7 fd98 	bl	8017114 <uxr_buffer_create_datareader_bin>
 801f5e4:	4602      	mov	r2, r0
 801f5e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f5ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801f5ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f5f2:	f7f6 fd1f 	bl	8016034 <run_xrce_session>
 801f5f6:	b310      	cbz	r0, 801f63e <rmw_create_subscription+0x1c6>
 801f5f8:	7a3b      	ldrb	r3, [r7, #8]
 801f5fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f5fe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f602:	2b02      	cmp	r3, #2
 801f604:	920a      	str	r2, [sp, #40]	@ 0x28
 801f606:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801f60a:	f04f 0200 	mov.w	r2, #0
 801f60e:	bf08      	it	eq
 801f610:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801f614:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f618:	bf18      	it	ne
 801f61a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	@ 0xd4
 801f61e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f620:	9307      	str	r3, [sp, #28]
 801f622:	ab0a      	add	r3, sp, #40	@ 0x28
 801f624:	9300      	str	r3, [sp, #0]
 801f626:	9b07      	ldr	r3, [sp, #28]
 801f628:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801f62c:	6809      	ldr	r1, [r1, #0]
 801f62e:	f001 fb07 	bl	8020c40 <uxr_buffer_request_data>
 801f632:	e000      	b.n	801f636 <rmw_create_subscription+0x1be>
 801f634:	2400      	movs	r4, #0
 801f636:	4620      	mov	r0, r4
 801f638:	b00d      	add	sp, #52	@ 0x34
 801f63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f63e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801f642:	b108      	cbz	r0, 801f648 <rmw_create_subscription+0x1d0>
 801f644:	f7f6 fbe8 	bl	8015e18 <rmw_uxrce_fini_topic_memory>
 801f648:	4620      	mov	r0, r4
 801f64a:	2400      	movs	r4, #0
 801f64c:	f7f6 fba2 	bl	8015d94 <rmw_uxrce_fini_subscription_memory>
 801f650:	4620      	mov	r0, r4
 801f652:	b00d      	add	sp, #52	@ 0x34
 801f654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f658:	24069244 	.word	0x24069244
 801f65c:	080249cc 	.word	0x080249cc
 801f660:	08023698 	.word	0x08023698

0801f664 <rmw_subscription_get_actual_qos>:
 801f664:	b178      	cbz	r0, 801f686 <rmw_subscription_get_actual_qos+0x22>
 801f666:	b510      	push	{r4, lr}
 801f668:	fab1 f481 	clz	r4, r1
 801f66c:	0964      	lsrs	r4, r4, #5
 801f66e:	b141      	cbz	r1, 801f682 <rmw_subscription_get_actual_qos+0x1e>
 801f670:	6843      	ldr	r3, [r0, #4]
 801f672:	2250      	movs	r2, #80	@ 0x50
 801f674:	4608      	mov	r0, r1
 801f676:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801f67a:	f002 ff48 	bl	802250e <memcpy>
 801f67e:	4620      	mov	r0, r4
 801f680:	bd10      	pop	{r4, pc}
 801f682:	200b      	movs	r0, #11
 801f684:	bd10      	pop	{r4, pc}
 801f686:	200b      	movs	r0, #11
 801f688:	4770      	bx	lr
 801f68a:	bf00      	nop

0801f68c <rmw_destroy_subscription>:
 801f68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f690:	b128      	cbz	r0, 801f69e <rmw_destroy_subscription+0x12>
 801f692:	4604      	mov	r4, r0
 801f694:	6800      	ldr	r0, [r0, #0]
 801f696:	460d      	mov	r5, r1
 801f698:	f7f6 fdde 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 801f69c:	b918      	cbnz	r0, 801f6a6 <rmw_destroy_subscription+0x1a>
 801f69e:	2401      	movs	r4, #1
 801f6a0:	4620      	mov	r0, r4
 801f6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6a6:	6863      	ldr	r3, [r4, #4]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d0f8      	beq.n	801f69e <rmw_destroy_subscription+0x12>
 801f6ac:	fab5 f485 	clz	r4, r5
 801f6b0:	0964      	lsrs	r4, r4, #5
 801f6b2:	2d00      	cmp	r5, #0
 801f6b4:	d0f3      	beq.n	801f69e <rmw_destroy_subscription+0x12>
 801f6b6:	6828      	ldr	r0, [r5, #0]
 801f6b8:	f7f6 fdce 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 801f6bc:	2800      	cmp	r0, #0
 801f6be:	d0ee      	beq.n	801f69e <rmw_destroy_subscription+0x12>
 801f6c0:	686e      	ldr	r6, [r5, #4]
 801f6c2:	2e00      	cmp	r6, #0
 801f6c4:	d0eb      	beq.n	801f69e <rmw_destroy_subscription+0x12>
 801f6c6:	6a37      	ldr	r7, [r6, #32]
 801f6c8:	6972      	ldr	r2, [r6, #20]
 801f6ca:	6938      	ldr	r0, [r7, #16]
 801f6cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f6d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f6d4:	6819      	ldr	r1, [r3, #0]
 801f6d6:	f001 faed 	bl	8020cb4 <uxr_buffer_cancel_data>
 801f6da:	4602      	mov	r2, r0
 801f6dc:	6938      	ldr	r0, [r7, #16]
 801f6de:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f6e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f6e6:	f7f6 fca5 	bl	8016034 <run_xrce_session>
 801f6ea:	69f0      	ldr	r0, [r6, #28]
 801f6ec:	f7ff faf6 	bl	801ecdc <destroy_topic>
 801f6f0:	6a33      	ldr	r3, [r6, #32]
 801f6f2:	6972      	ldr	r2, [r6, #20]
 801f6f4:	6918      	ldr	r0, [r3, #16]
 801f6f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f6fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f6fe:	6819      	ldr	r1, [r3, #0]
 801f700:	f7f7 fb7e 	bl	8016e00 <uxr_buffer_delete_entity>
 801f704:	6a33      	ldr	r3, [r6, #32]
 801f706:	4680      	mov	r8, r0
 801f708:	6932      	ldr	r2, [r6, #16]
 801f70a:	6918      	ldr	r0, [r3, #16]
 801f70c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801f710:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f714:	6819      	ldr	r1, [r3, #0]
 801f716:	f7f7 fb73 	bl	8016e00 <uxr_buffer_delete_entity>
 801f71a:	4606      	mov	r6, r0
 801f71c:	6938      	ldr	r0, [r7, #16]
 801f71e:	4642      	mov	r2, r8
 801f720:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801f724:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801f728:	f7f6 fc84 	bl	8016034 <run_xrce_session>
 801f72c:	693f      	ldr	r7, [r7, #16]
 801f72e:	4632      	mov	r2, r6
 801f730:	4606      	mov	r6, r0
 801f732:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801f736:	4638      	mov	r0, r7
 801f738:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801f73c:	f7f6 fc7a 	bl	8016034 <run_xrce_session>
 801f740:	b126      	cbz	r6, 801f74c <rmw_destroy_subscription+0xc0>
 801f742:	b118      	cbz	r0, 801f74c <rmw_destroy_subscription+0xc0>
 801f744:	4628      	mov	r0, r5
 801f746:	f7f6 fb25 	bl	8015d94 <rmw_uxrce_fini_subscription_memory>
 801f74a:	e7a9      	b.n	801f6a0 <rmw_destroy_subscription+0x14>
 801f74c:	2402      	movs	r4, #2
 801f74e:	e7f9      	b.n	801f744 <rmw_destroy_subscription+0xb8>

0801f750 <rmw_take_with_info>:
 801f750:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f752:	4604      	mov	r4, r0
 801f754:	6800      	ldr	r0, [r0, #0]
 801f756:	b089      	sub	sp, #36	@ 0x24
 801f758:	460f      	mov	r7, r1
 801f75a:	4615      	mov	r5, r2
 801f75c:	b128      	cbz	r0, 801f76a <rmw_take_with_info+0x1a>
 801f75e:	4b24      	ldr	r3, [pc, #144]	@ (801f7f0 <rmw_take_with_info+0xa0>)
 801f760:	6819      	ldr	r1, [r3, #0]
 801f762:	f7e0 fdbd 	bl	80002e0 <strcmp>
 801f766:	2800      	cmp	r0, #0
 801f768:	d13e      	bne.n	801f7e8 <rmw_take_with_info+0x98>
 801f76a:	b305      	cbz	r5, 801f7ae <rmw_take_with_info+0x5e>
 801f76c:	2300      	movs	r3, #0
 801f76e:	6864      	ldr	r4, [r4, #4]
 801f770:	702b      	strb	r3, [r5, #0]
 801f772:	f7f6 fbe1 	bl	8015f38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f776:	4620      	mov	r0, r4
 801f778:	f7f6 fbb4 	bl	8015ee4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f77c:	4606      	mov	r6, r0
 801f77e:	b1f0      	cbz	r0, 801f7be <rmw_take_with_info+0x6e>
 801f780:	6881      	ldr	r1, [r0, #8]
 801f782:	4668      	mov	r0, sp
 801f784:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f788:	3110      	adds	r1, #16
 801f78a:	f7f4 fcfd 	bl	8014188 <ucdr_init_buffer>
 801f78e:	69a3      	ldr	r3, [r4, #24]
 801f790:	4639      	mov	r1, r7
 801f792:	4668      	mov	r0, sp
 801f794:	68db      	ldr	r3, [r3, #12]
 801f796:	4798      	blx	r3
 801f798:	4604      	mov	r4, r0
 801f79a:	4631      	mov	r1, r6
 801f79c:	4815      	ldr	r0, [pc, #84]	@ (801f7f4 <rmw_take_with_info+0xa4>)
 801f79e:	f7fe ff89 	bl	801e6b4 <put_memory>
 801f7a2:	702c      	strb	r4, [r5, #0]
 801f7a4:	f084 0001 	eor.w	r0, r4, #1
 801f7a8:	b2c0      	uxtb	r0, r0
 801f7aa:	b009      	add	sp, #36	@ 0x24
 801f7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7ae:	6864      	ldr	r4, [r4, #4]
 801f7b0:	f7f6 fbc2 	bl	8015f38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f7b4:	4620      	mov	r0, r4
 801f7b6:	f7f6 fb95 	bl	8015ee4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f7ba:	4605      	mov	r5, r0
 801f7bc:	b910      	cbnz	r0, 801f7c4 <rmw_take_with_info+0x74>
 801f7be:	2001      	movs	r0, #1
 801f7c0:	b009      	add	sp, #36	@ 0x24
 801f7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7c4:	68a9      	ldr	r1, [r5, #8]
 801f7c6:	4668      	mov	r0, sp
 801f7c8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801f7cc:	3110      	adds	r1, #16
 801f7ce:	f7f4 fcdb 	bl	8014188 <ucdr_init_buffer>
 801f7d2:	69a3      	ldr	r3, [r4, #24]
 801f7d4:	4639      	mov	r1, r7
 801f7d6:	4668      	mov	r0, sp
 801f7d8:	68db      	ldr	r3, [r3, #12]
 801f7da:	4798      	blx	r3
 801f7dc:	4629      	mov	r1, r5
 801f7de:	4604      	mov	r4, r0
 801f7e0:	4804      	ldr	r0, [pc, #16]	@ (801f7f4 <rmw_take_with_info+0xa4>)
 801f7e2:	f7fe ff67 	bl	801e6b4 <put_memory>
 801f7e6:	e7dd      	b.n	801f7a4 <rmw_take_with_info+0x54>
 801f7e8:	200c      	movs	r0, #12
 801f7ea:	b009      	add	sp, #36	@ 0x24
 801f7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7ee:	bf00      	nop
 801f7f0:	08025948 	.word	0x08025948
 801f7f4:	24069234 	.word	0x24069234

0801f7f8 <rmw_wait>:
 801f7f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f7fc:	4698      	mov	r8, r3
 801f7fe:	ea40 0301 	orr.w	r3, r0, r1
 801f802:	b089      	sub	sp, #36	@ 0x24
 801f804:	ea48 0303 	orr.w	r3, r8, r3
 801f808:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f80a:	4313      	orrs	r3, r2
 801f80c:	f000 8106 	beq.w	801fa1c <rmw_wait+0x224>
 801f810:	4605      	mov	r5, r0
 801f812:	460e      	mov	r6, r1
 801f814:	4691      	mov	r9, r2
 801f816:	b16c      	cbz	r4, 801f834 <rmw_wait+0x3c>
 801f818:	4ba6      	ldr	r3, [pc, #664]	@ (801fab4 <rmw_wait+0x2bc>)
 801f81a:	af04      	add	r7, sp, #16
 801f81c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f81e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801f822:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801f826:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f82a:	f7fe fd55 	bl	801e2d8 <rmw_time_equal>
 801f82e:	2800      	cmp	r0, #0
 801f830:	f000 810b 	beq.w	801fa4a <rmw_wait+0x252>
 801f834:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f838:	f7f6 fb7e 	bl	8015f38 <rmw_uxrce_clean_expired_static_input_buffer>
 801f83c:	4b9e      	ldr	r3, [pc, #632]	@ (801fab8 <rmw_wait+0x2c0>)
 801f83e:	681c      	ldr	r4, [r3, #0]
 801f840:	b14c      	cbz	r4, 801f856 <rmw_wait+0x5e>
 801f842:	4623      	mov	r3, r4
 801f844:	2100      	movs	r1, #0
 801f846:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801f84a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f84e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801f852:	2b00      	cmp	r3, #0
 801f854:	d1f7      	bne.n	801f846 <rmw_wait+0x4e>
 801f856:	f1b9 0f00 	cmp.w	r9, #0
 801f85a:	d011      	beq.n	801f880 <rmw_wait+0x88>
 801f85c:	f8d9 1000 	ldr.w	r1, [r9]
 801f860:	b171      	cbz	r1, 801f880 <rmw_wait+0x88>
 801f862:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801f866:	2300      	movs	r3, #0
 801f868:	2001      	movs	r0, #1
 801f86a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f86e:	3301      	adds	r3, #1
 801f870:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f872:	4299      	cmp	r1, r3
 801f874:	6912      	ldr	r2, [r2, #16]
 801f876:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f87a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f87e:	d1f4      	bne.n	801f86a <rmw_wait+0x72>
 801f880:	f1b8 0f00 	cmp.w	r8, #0
 801f884:	d011      	beq.n	801f8aa <rmw_wait+0xb2>
 801f886:	f8d8 1000 	ldr.w	r1, [r8]
 801f88a:	b171      	cbz	r1, 801f8aa <rmw_wait+0xb2>
 801f88c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801f890:	2300      	movs	r3, #0
 801f892:	2001      	movs	r0, #1
 801f894:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f898:	3301      	adds	r3, #1
 801f89a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801f89c:	4299      	cmp	r1, r3
 801f89e:	6912      	ldr	r2, [r2, #16]
 801f8a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f8a4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f8a8:	d1f4      	bne.n	801f894 <rmw_wait+0x9c>
 801f8aa:	b185      	cbz	r5, 801f8ce <rmw_wait+0xd6>
 801f8ac:	6829      	ldr	r1, [r5, #0]
 801f8ae:	b171      	cbz	r1, 801f8ce <rmw_wait+0xd6>
 801f8b0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801f8b4:	2300      	movs	r3, #0
 801f8b6:	2001      	movs	r0, #1
 801f8b8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f8bc:	3301      	adds	r3, #1
 801f8be:	6a12      	ldr	r2, [r2, #32]
 801f8c0:	4299      	cmp	r1, r3
 801f8c2:	6912      	ldr	r2, [r2, #16]
 801f8c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801f8c8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801f8cc:	d1f4      	bne.n	801f8b8 <rmw_wait+0xc0>
 801f8ce:	b344      	cbz	r4, 801f922 <rmw_wait+0x12a>
 801f8d0:	4622      	mov	r2, r4
 801f8d2:	2300      	movs	r3, #0
 801f8d4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801f8d8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801f8dc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801f8e0:	440b      	add	r3, r1
 801f8e2:	b2db      	uxtb	r3, r3
 801f8e4:	2a00      	cmp	r2, #0
 801f8e6:	d1f5      	bne.n	801f8d4 <rmw_wait+0xdc>
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	d05f      	beq.n	801f9ac <rmw_wait+0x1b4>
 801f8ec:	1c7a      	adds	r2, r7, #1
 801f8ee:	d00d      	beq.n	801f90c <rmw_wait+0x114>
 801f8f0:	ee07 7a90 	vmov	s15, r7
 801f8f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801f8f8:	ee07 3a90 	vmov	s15, r3
 801f8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f904:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801f908:	ee17 7a90 	vmov	r7, s15
 801f90c:	68a0      	ldr	r0, [r4, #8]
 801f90e:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801f912:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801f916:	2b00      	cmp	r3, #0
 801f918:	f040 808d 	bne.w	801fa36 <rmw_wait+0x23e>
 801f91c:	6864      	ldr	r4, [r4, #4]
 801f91e:	2c00      	cmp	r4, #0
 801f920:	d1f4      	bne.n	801f90c <rmw_wait+0x114>
 801f922:	f1b9 0f00 	cmp.w	r9, #0
 801f926:	f000 80a1 	beq.w	801fa6c <rmw_wait+0x274>
 801f92a:	f8d9 7000 	ldr.w	r7, [r9]
 801f92e:	2f00      	cmp	r7, #0
 801f930:	f000 80a4 	beq.w	801fa7c <rmw_wait+0x284>
 801f934:	2400      	movs	r4, #0
 801f936:	4627      	mov	r7, r4
 801f938:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f93c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f940:	f7f6 fad0 	bl	8015ee4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f944:	2800      	cmp	r0, #0
 801f946:	d03b      	beq.n	801f9c0 <rmw_wait+0x1c8>
 801f948:	3401      	adds	r4, #1
 801f94a:	f8d9 3000 	ldr.w	r3, [r9]
 801f94e:	2701      	movs	r7, #1
 801f950:	42a3      	cmp	r3, r4
 801f952:	d8f1      	bhi.n	801f938 <rmw_wait+0x140>
 801f954:	2701      	movs	r7, #1
 801f956:	f1b8 0f00 	cmp.w	r8, #0
 801f95a:	d010      	beq.n	801f97e <rmw_wait+0x186>
 801f95c:	f8d8 3000 	ldr.w	r3, [r8]
 801f960:	b16b      	cbz	r3, 801f97e <rmw_wait+0x186>
 801f962:	2400      	movs	r4, #0
 801f964:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f968:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f96c:	f7f6 faba 	bl	8015ee4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f970:	b370      	cbz	r0, 801f9d0 <rmw_wait+0x1d8>
 801f972:	3401      	adds	r4, #1
 801f974:	f8d8 3000 	ldr.w	r3, [r8]
 801f978:	2701      	movs	r7, #1
 801f97a:	42a3      	cmp	r3, r4
 801f97c:	d8f2      	bhi.n	801f964 <rmw_wait+0x16c>
 801f97e:	2d00      	cmp	r5, #0
 801f980:	d035      	beq.n	801f9ee <rmw_wait+0x1f6>
 801f982:	682b      	ldr	r3, [r5, #0]
 801f984:	b39b      	cbz	r3, 801f9ee <rmw_wait+0x1f6>
 801f986:	2400      	movs	r4, #0
 801f988:	686b      	ldr	r3, [r5, #4]
 801f98a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f98e:	f7f6 faa9 	bl	8015ee4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801f992:	b328      	cbz	r0, 801f9e0 <rmw_wait+0x1e8>
 801f994:	3401      	adds	r4, #1
 801f996:	682b      	ldr	r3, [r5, #0]
 801f998:	2701      	movs	r7, #1
 801f99a:	42a3      	cmp	r3, r4
 801f99c:	d8f4      	bhi.n	801f988 <rmw_wait+0x190>
 801f99e:	2e00      	cmp	r6, #0
 801f9a0:	d03c      	beq.n	801fa1c <rmw_wait+0x224>
 801f9a2:	6834      	ldr	r4, [r6, #0]
 801f9a4:	2c00      	cmp	r4, #0
 801f9a6:	d039      	beq.n	801fa1c <rmw_wait+0x224>
 801f9a8:	2701      	movs	r7, #1
 801f9aa:	e023      	b.n	801f9f4 <rmw_wait+0x1fc>
 801f9ac:	68a0      	ldr	r0, [r4, #8]
 801f9ae:	2100      	movs	r1, #0
 801f9b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801f9b4:	f7f8 faf2 	bl	8017f9c <uxr_run_session_timeout>
 801f9b8:	6864      	ldr	r4, [r4, #4]
 801f9ba:	2c00      	cmp	r4, #0
 801f9bc:	d1f6      	bne.n	801f9ac <rmw_wait+0x1b4>
 801f9be:	e7b0      	b.n	801f922 <rmw_wait+0x12a>
 801f9c0:	e9d9 3200 	ldrd	r3, r2, [r9]
 801f9c4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f9c8:	3401      	adds	r4, #1
 801f9ca:	42a3      	cmp	r3, r4
 801f9cc:	d8b4      	bhi.n	801f938 <rmw_wait+0x140>
 801f9ce:	e7c2      	b.n	801f956 <rmw_wait+0x15e>
 801f9d0:	e9d8 3200 	ldrd	r3, r2, [r8]
 801f9d4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f9d8:	3401      	adds	r4, #1
 801f9da:	429c      	cmp	r4, r3
 801f9dc:	d3c2      	bcc.n	801f964 <rmw_wait+0x16c>
 801f9de:	e7ce      	b.n	801f97e <rmw_wait+0x186>
 801f9e0:	e9d5 3200 	ldrd	r3, r2, [r5]
 801f9e4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801f9e8:	3401      	adds	r4, #1
 801f9ea:	42a3      	cmp	r3, r4
 801f9ec:	d8cc      	bhi.n	801f988 <rmw_wait+0x190>
 801f9ee:	b1a6      	cbz	r6, 801fa1a <rmw_wait+0x222>
 801f9f0:	6834      	ldr	r4, [r6, #0]
 801f9f2:	b194      	cbz	r4, 801fa1a <rmw_wait+0x222>
 801f9f4:	2300      	movs	r3, #0
 801f9f6:	461d      	mov	r5, r3
 801f9f8:	e004      	b.n	801fa04 <rmw_wait+0x20c>
 801f9fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801f9fe:	3301      	adds	r3, #1
 801fa00:	42a3      	cmp	r3, r4
 801fa02:	d00a      	beq.n	801fa1a <rmw_wait+0x222>
 801fa04:	6870      	ldr	r0, [r6, #4]
 801fa06:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801fa0a:	7c0a      	ldrb	r2, [r1, #16]
 801fa0c:	2a00      	cmp	r2, #0
 801fa0e:	d0f4      	beq.n	801f9fa <rmw_wait+0x202>
 801fa10:	3301      	adds	r3, #1
 801fa12:	4617      	mov	r7, r2
 801fa14:	740d      	strb	r5, [r1, #16]
 801fa16:	42a3      	cmp	r3, r4
 801fa18:	d1f4      	bne.n	801fa04 <rmw_wait+0x20c>
 801fa1a:	b147      	cbz	r7, 801fa2e <rmw_wait+0x236>
 801fa1c:	2000      	movs	r0, #0
 801fa1e:	b009      	add	sp, #36	@ 0x24
 801fa20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa24:	b11e      	cbz	r6, 801fa2e <rmw_wait+0x236>
 801fa26:	6834      	ldr	r4, [r6, #0]
 801fa28:	462f      	mov	r7, r5
 801fa2a:	2c00      	cmp	r4, #0
 801fa2c:	d1e2      	bne.n	801f9f4 <rmw_wait+0x1fc>
 801fa2e:	2002      	movs	r0, #2
 801fa30:	b009      	add	sp, #36	@ 0x24
 801fa32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa36:	4639      	mov	r1, r7
 801fa38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801fa3c:	f7f8 fac8 	bl	8017fd0 <uxr_run_session_until_data>
 801fa40:	6864      	ldr	r4, [r4, #4]
 801fa42:	2c00      	cmp	r4, #0
 801fa44:	f47f af62 	bne.w	801f90c <rmw_wait+0x114>
 801fa48:	e76b      	b.n	801f922 <rmw_wait+0x12a>
 801fa4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801fa4e:	f7fe fc99 	bl	801e384 <rmw_time_total_nsec>
 801fa52:	2300      	movs	r3, #0
 801fa54:	4a19      	ldr	r2, [pc, #100]	@ (801fabc <rmw_wait+0x2c4>)
 801fa56:	f7e0 fcfb 	bl	8000450 <__aeabi_uldivmod>
 801fa5a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801fa5e:	4607      	mov	r7, r0
 801fa60:	f171 0300 	sbcs.w	r3, r1, #0
 801fa64:	bfa8      	it	ge
 801fa66:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801fa6a:	e6e5      	b.n	801f838 <rmw_wait+0x40>
 801fa6c:	f1b8 0f00 	cmp.w	r8, #0
 801fa70:	d00f      	beq.n	801fa92 <rmw_wait+0x29a>
 801fa72:	f8d8 3000 	ldr.w	r3, [r8]
 801fa76:	b193      	cbz	r3, 801fa9e <rmw_wait+0x2a6>
 801fa78:	464f      	mov	r7, r9
 801fa7a:	e772      	b.n	801f962 <rmw_wait+0x16a>
 801fa7c:	f1b8 0f00 	cmp.w	r8, #0
 801fa80:	d007      	beq.n	801fa92 <rmw_wait+0x29a>
 801fa82:	f8d8 3000 	ldr.w	r3, [r8]
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	f47f af6b 	bne.w	801f962 <rmw_wait+0x16a>
 801fa8c:	b155      	cbz	r5, 801faa4 <rmw_wait+0x2ac>
 801fa8e:	461f      	mov	r7, r3
 801fa90:	e777      	b.n	801f982 <rmw_wait+0x18a>
 801fa92:	2d00      	cmp	r5, #0
 801fa94:	d0c6      	beq.n	801fa24 <rmw_wait+0x22c>
 801fa96:	682b      	ldr	r3, [r5, #0]
 801fa98:	b143      	cbz	r3, 801faac <rmw_wait+0x2b4>
 801fa9a:	4647      	mov	r7, r8
 801fa9c:	e773      	b.n	801f986 <rmw_wait+0x18e>
 801fa9e:	b10d      	cbz	r5, 801faa4 <rmw_wait+0x2ac>
 801faa0:	464f      	mov	r7, r9
 801faa2:	e76e      	b.n	801f982 <rmw_wait+0x18a>
 801faa4:	462f      	mov	r7, r5
 801faa6:	2e00      	cmp	r6, #0
 801faa8:	d1a2      	bne.n	801f9f0 <rmw_wait+0x1f8>
 801faaa:	e7c0      	b.n	801fa2e <rmw_wait+0x236>
 801faac:	4647      	mov	r7, r8
 801faae:	2e00      	cmp	r6, #0
 801fab0:	d19e      	bne.n	801f9f0 <rmw_wait+0x1f8>
 801fab2:	e7bc      	b.n	801fa2e <rmw_wait+0x236>
 801fab4:	08023450 	.word	0x08023450
 801fab8:	24069224 	.word	0x24069224
 801fabc:	000f4240 	.word	0x000f4240

0801fac0 <rmw_create_wait_set>:
 801fac0:	b508      	push	{r3, lr}
 801fac2:	4803      	ldr	r0, [pc, #12]	@ (801fad0 <rmw_create_wait_set+0x10>)
 801fac4:	f7fe fde6 	bl	801e694 <get_memory>
 801fac8:	b108      	cbz	r0, 801face <rmw_create_wait_set+0xe>
 801faca:	6880      	ldr	r0, [r0, #8]
 801facc:	3010      	adds	r0, #16
 801face:	bd08      	pop	{r3, pc}
 801fad0:	24069264 	.word	0x24069264

0801fad4 <rmw_destroy_wait_set>:
 801fad4:	b508      	push	{r3, lr}
 801fad6:	4b08      	ldr	r3, [pc, #32]	@ (801faf8 <rmw_destroy_wait_set+0x24>)
 801fad8:	6819      	ldr	r1, [r3, #0]
 801fada:	b911      	cbnz	r1, 801fae2 <rmw_destroy_wait_set+0xe>
 801fadc:	e00a      	b.n	801faf4 <rmw_destroy_wait_set+0x20>
 801fade:	6849      	ldr	r1, [r1, #4]
 801fae0:	b141      	cbz	r1, 801faf4 <rmw_destroy_wait_set+0x20>
 801fae2:	688b      	ldr	r3, [r1, #8]
 801fae4:	3310      	adds	r3, #16
 801fae6:	4298      	cmp	r0, r3
 801fae8:	d1f9      	bne.n	801fade <rmw_destroy_wait_set+0xa>
 801faea:	4803      	ldr	r0, [pc, #12]	@ (801faf8 <rmw_destroy_wait_set+0x24>)
 801faec:	f7fe fde2 	bl	801e6b4 <put_memory>
 801faf0:	2000      	movs	r0, #0
 801faf2:	bd08      	pop	{r3, pc}
 801faf4:	2001      	movs	r0, #1
 801faf6:	bd08      	pop	{r3, pc}
 801faf8:	24069264 	.word	0x24069264

0801fafc <rosgraph_msgs__msg__Clock__init>:
 801fafc:	b538      	push	{r3, r4, r5, lr}
 801fafe:	4604      	mov	r4, r0
 801fb00:	b128      	cbz	r0, 801fb0e <rosgraph_msgs__msg__Clock__init+0x12>
 801fb02:	f7f7 f91f 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 801fb06:	4605      	mov	r5, r0
 801fb08:	b120      	cbz	r0, 801fb14 <rosgraph_msgs__msg__Clock__init+0x18>
 801fb0a:	4628      	mov	r0, r5
 801fb0c:	bd38      	pop	{r3, r4, r5, pc}
 801fb0e:	4605      	mov	r5, r0
 801fb10:	4628      	mov	r0, r5
 801fb12:	bd38      	pop	{r3, r4, r5, pc}
 801fb14:	4620      	mov	r0, r4
 801fb16:	f7f7 f919 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 801fb1a:	4628      	mov	r0, r5
 801fb1c:	bd38      	pop	{r3, r4, r5, pc}
 801fb1e:	bf00      	nop

0801fb20 <rosgraph_msgs__msg__Clock__fini>:
 801fb20:	b108      	cbz	r0, 801fb26 <rosgraph_msgs__msg__Clock__fini+0x6>
 801fb22:	f7f7 b913 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 801fb26:	4770      	bx	lr

0801fb28 <std_msgs__msg__Header__init>:
 801fb28:	b570      	push	{r4, r5, r6, lr}
 801fb2a:	4605      	mov	r5, r0
 801fb2c:	b1a8      	cbz	r0, 801fb5a <std_msgs__msg__Header__init+0x32>
 801fb2e:	f7f7 f909 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 801fb32:	4604      	mov	r4, r0
 801fb34:	b140      	cbz	r0, 801fb48 <std_msgs__msg__Header__init+0x20>
 801fb36:	f105 0608 	add.w	r6, r5, #8
 801fb3a:	4630      	mov	r0, r6
 801fb3c:	f001 fe86 	bl	802184c <rosidl_runtime_c__String__init>
 801fb40:	4604      	mov	r4, r0
 801fb42:	b168      	cbz	r0, 801fb60 <std_msgs__msg__Header__init+0x38>
 801fb44:	4620      	mov	r0, r4
 801fb46:	bd70      	pop	{r4, r5, r6, pc}
 801fb48:	4628      	mov	r0, r5
 801fb4a:	f7f7 f8ff 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 801fb4e:	f105 0008 	add.w	r0, r5, #8
 801fb52:	f001 fe91 	bl	8021878 <rosidl_runtime_c__String__fini>
 801fb56:	4620      	mov	r0, r4
 801fb58:	bd70      	pop	{r4, r5, r6, pc}
 801fb5a:	4604      	mov	r4, r0
 801fb5c:	4620      	mov	r0, r4
 801fb5e:	bd70      	pop	{r4, r5, r6, pc}
 801fb60:	4628      	mov	r0, r5
 801fb62:	f7f7 f8f3 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 801fb66:	4630      	mov	r0, r6
 801fb68:	f001 fe86 	bl	8021878 <rosidl_runtime_c__String__fini>
 801fb6c:	e7ea      	b.n	801fb44 <std_msgs__msg__Header__init+0x1c>
 801fb6e:	bf00      	nop

0801fb70 <std_msgs__msg__Header__fini>:
 801fb70:	b148      	cbz	r0, 801fb86 <std_msgs__msg__Header__fini+0x16>
 801fb72:	b510      	push	{r4, lr}
 801fb74:	4604      	mov	r4, r0
 801fb76:	f7f7 f8e9 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 801fb7a:	f104 0008 	add.w	r0, r4, #8
 801fb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb82:	f001 be79 	b.w	8021878 <rosidl_runtime_c__String__fini>
 801fb86:	4770      	bx	lr

0801fb88 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 801fb88:	b570      	push	{r4, r5, r6, lr}
 801fb8a:	4605      	mov	r5, r0
 801fb8c:	b1a8      	cbz	r0, 801fbba <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 801fb8e:	f7ff ffcb 	bl	801fb28 <std_msgs__msg__Header__init>
 801fb92:	4604      	mov	r4, r0
 801fb94:	b140      	cbz	r0, 801fba8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 801fb96:	f105 0618 	add.w	r6, r5, #24
 801fb9a:	4630      	mov	r0, r6
 801fb9c:	f001 feb4 	bl	8021908 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 801fba0:	4604      	mov	r4, r0
 801fba2:	b168      	cbz	r0, 801fbc0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 801fba4:	4620      	mov	r0, r4
 801fba6:	bd70      	pop	{r4, r5, r6, pc}
 801fba8:	4628      	mov	r0, r5
 801fbaa:	f7ff ffe1 	bl	801fb70 <std_msgs__msg__Header__fini>
 801fbae:	f105 0018 	add.w	r0, r5, #24
 801fbb2:	f001 fead 	bl	8021910 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fbb6:	4620      	mov	r0, r4
 801fbb8:	bd70      	pop	{r4, r5, r6, pc}
 801fbba:	4604      	mov	r4, r0
 801fbbc:	4620      	mov	r0, r4
 801fbbe:	bd70      	pop	{r4, r5, r6, pc}
 801fbc0:	4628      	mov	r0, r5
 801fbc2:	f7ff ffd5 	bl	801fb70 <std_msgs__msg__Header__fini>
 801fbc6:	4630      	mov	r0, r6
 801fbc8:	f001 fea2 	bl	8021910 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fbcc:	e7ea      	b.n	801fba4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 801fbce:	bf00      	nop

0801fbd0 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 801fbd0:	b148      	cbz	r0, 801fbe6 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 801fbd2:	b510      	push	{r4, lr}
 801fbd4:	4604      	mov	r4, r0
 801fbd6:	f7ff ffcb 	bl	801fb70 <std_msgs__msg__Header__fini>
 801fbda:	f104 0018 	add.w	r0, r4, #24
 801fbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbe2:	f001 be95 	b.w	8021910 <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 801fbe6:	4770      	bx	lr

0801fbe8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 801fbe8:	b570      	push	{r4, r5, r6, lr}
 801fbea:	4605      	mov	r5, r0
 801fbec:	b1a8      	cbz	r0, 801fc1a <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 801fbee:	f7ff ff9b 	bl	801fb28 <std_msgs__msg__Header__init>
 801fbf2:	4604      	mov	r4, r0
 801fbf4:	b140      	cbz	r0, 801fc08 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 801fbf6:	f105 0618 	add.w	r6, r5, #24
 801fbfa:	4630      	mov	r0, r6
 801fbfc:	f001 fe8a 	bl	8021914 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 801fc00:	4604      	mov	r4, r0
 801fc02:	b168      	cbz	r0, 801fc20 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 801fc04:	4620      	mov	r0, r4
 801fc06:	bd70      	pop	{r4, r5, r6, pc}
 801fc08:	4628      	mov	r0, r5
 801fc0a:	f7ff ffb1 	bl	801fb70 <std_msgs__msg__Header__fini>
 801fc0e:	f105 0018 	add.w	r0, r5, #24
 801fc12:	f001 fe83 	bl	802191c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc16:	4620      	mov	r0, r4
 801fc18:	bd70      	pop	{r4, r5, r6, pc}
 801fc1a:	4604      	mov	r4, r0
 801fc1c:	4620      	mov	r0, r4
 801fc1e:	bd70      	pop	{r4, r5, r6, pc}
 801fc20:	4628      	mov	r0, r5
 801fc22:	f7ff ffa5 	bl	801fb70 <std_msgs__msg__Header__fini>
 801fc26:	4630      	mov	r0, r6
 801fc28:	f001 fe78 	bl	802191c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc2c:	e7ea      	b.n	801fc04 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 801fc2e:	bf00      	nop

0801fc30 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 801fc30:	b148      	cbz	r0, 801fc46 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 801fc32:	b510      	push	{r4, lr}
 801fc34:	4604      	mov	r4, r0
 801fc36:	f7ff ff9b 	bl	801fb70 <std_msgs__msg__Header__fini>
 801fc3a:	f104 0018 	add.w	r0, r4, #24
 801fc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc42:	f001 be6b 	b.w	802191c <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 801fc46:	4770      	bx	lr

0801fc48 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 801fc48:	b538      	push	{r3, r4, r5, lr}
 801fc4a:	4604      	mov	r4, r0
 801fc4c:	b128      	cbz	r0, 801fc5a <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 801fc4e:	f7f7 f879 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 801fc52:	4605      	mov	r5, r0
 801fc54:	b120      	cbz	r0, 801fc60 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 801fc56:	4628      	mov	r0, r5
 801fc58:	bd38      	pop	{r3, r4, r5, pc}
 801fc5a:	4605      	mov	r5, r0
 801fc5c:	4628      	mov	r0, r5
 801fc5e:	bd38      	pop	{r3, r4, r5, pc}
 801fc60:	4620      	mov	r0, r4
 801fc62:	f7f7 f873 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 801fc66:	4628      	mov	r0, r5
 801fc68:	bd38      	pop	{r3, r4, r5, pc}
 801fc6a:	bf00      	nop

0801fc6c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 801fc6c:	b108      	cbz	r0, 801fc72 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 801fc6e:	f7f7 b86d 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 801fc72:	4770      	bx	lr

0801fc74 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 801fc74:	b538      	push	{r3, r4, r5, lr}
 801fc76:	4604      	mov	r4, r0
 801fc78:	b128      	cbz	r0, 801fc86 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 801fc7a:	f7f7 f863 	bl	8016d44 <builtin_interfaces__msg__Time__init>
 801fc7e:	4605      	mov	r5, r0
 801fc80:	b120      	cbz	r0, 801fc8c <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 801fc82:	4628      	mov	r0, r5
 801fc84:	bd38      	pop	{r3, r4, r5, pc}
 801fc86:	4605      	mov	r5, r0
 801fc88:	4628      	mov	r0, r5
 801fc8a:	bd38      	pop	{r3, r4, r5, pc}
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	f7f7 f85d 	bl	8016d4c <builtin_interfaces__msg__Time__fini>
 801fc92:	4628      	mov	r0, r5
 801fc94:	bd38      	pop	{r3, r4, r5, pc}
 801fc96:	bf00      	nop

0801fc98 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 801fc98:	b108      	cbz	r0, 801fc9e <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 801fc9a:	f7f7 b857 	b.w	8016d4c <builtin_interfaces__msg__Time__fini>
 801fc9e:	4770      	bx	lr

0801fca0 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 801fca0:	f001 be32 	b.w	8021908 <tier4_vehicle_msgs__msg__ActuationCommand__init>

0801fca4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 801fca4:	f001 be34 	b.w	8021910 <tier4_vehicle_msgs__msg__ActuationCommand__fini>

0801fca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fca8:	4b04      	ldr	r3, [pc, #16]	@ (801fcbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fcaa:	681a      	ldr	r2, [r3, #0]
 801fcac:	b10a      	cbz	r2, 801fcb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 801fcae:	4803      	ldr	r0, [pc, #12]	@ (801fcbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fcb0:	4770      	bx	lr
 801fcb2:	4a03      	ldr	r2, [pc, #12]	@ (801fcc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 801fcb4:	4801      	ldr	r0, [pc, #4]	@ (801fcbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 801fcb6:	6812      	ldr	r2, [r2, #0]
 801fcb8:	601a      	str	r2, [r3, #0]
 801fcba:	4770      	bx	lr
 801fcbc:	24001194 	.word	0x24001194
 801fcc0:	24000d30 	.word	0x24000d30

0801fcc4 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 801fcc4:	f001 be26 	b.w	8021914 <tier4_vehicle_msgs__msg__ActuationStatus__init>

0801fcc8 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 801fcc8:	f001 be28 	b.w	802191c <tier4_vehicle_msgs__msg__ActuationStatus__fini>

0801fccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801fccc:	4b04      	ldr	r3, [pc, #16]	@ (801fce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fcce:	681a      	ldr	r2, [r3, #0]
 801fcd0:	b10a      	cbz	r2, 801fcd6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 801fcd2:	4803      	ldr	r0, [pc, #12]	@ (801fce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fcd4:	4770      	bx	lr
 801fcd6:	4a03      	ldr	r2, [pc, #12]	@ (801fce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 801fcd8:	4801      	ldr	r0, [pc, #4]	@ (801fce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 801fcda:	6812      	ldr	r2, [r2, #0]
 801fcdc:	601a      	str	r2, [r3, #0]
 801fcde:	4770      	bx	lr
 801fce0:	24001254 	.word	0x24001254
 801fce4:	24000d30 	.word	0x24000d30

0801fce8 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fce8:	b1b8      	cbz	r0, 801fd1a <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 801fcea:	b538      	push	{r3, r4, r5, lr}
 801fcec:	460d      	mov	r5, r1
 801fcee:	2108      	movs	r1, #8
 801fcf0:	4628      	mov	r0, r5
 801fcf2:	f7f4 fa4d 	bl	8014190 <ucdr_alignment>
 801fcf6:	f105 0308 	add.w	r3, r5, #8
 801fcfa:	2108      	movs	r1, #8
 801fcfc:	f1c5 0508 	rsb	r5, r5, #8
 801fd00:	181c      	adds	r4, r3, r0
 801fd02:	4620      	mov	r0, r4
 801fd04:	f7f4 fa44 	bl	8014190 <ucdr_alignment>
 801fd08:	2108      	movs	r1, #8
 801fd0a:	4408      	add	r0, r1
 801fd0c:	4404      	add	r4, r0
 801fd0e:	4620      	mov	r0, r4
 801fd10:	f7f4 fa3e 	bl	8014190 <ucdr_alignment>
 801fd14:	4428      	add	r0, r5
 801fd16:	4420      	add	r0, r4
 801fd18:	bd38      	pop	{r3, r4, r5, pc}
 801fd1a:	4770      	bx	lr

0801fd1c <_ActuationCommand__cdr_deserialize>:
 801fd1c:	b538      	push	{r3, r4, r5, lr}
 801fd1e:	460c      	mov	r4, r1
 801fd20:	b171      	cbz	r1, 801fd40 <_ActuationCommand__cdr_deserialize+0x24>
 801fd22:	4605      	mov	r5, r0
 801fd24:	f7f4 f916 	bl	8013f54 <ucdr_deserialize_double>
 801fd28:	f104 0108 	add.w	r1, r4, #8
 801fd2c:	4628      	mov	r0, r5
 801fd2e:	f7f4 f911 	bl	8013f54 <ucdr_deserialize_double>
 801fd32:	f104 0110 	add.w	r1, r4, #16
 801fd36:	4628      	mov	r0, r5
 801fd38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd3c:	f7f4 b90a 	b.w	8013f54 <ucdr_deserialize_double>
 801fd40:	4608      	mov	r0, r1
 801fd42:	bd38      	pop	{r3, r4, r5, pc}

0801fd44 <_ActuationCommand__cdr_serialize>:
 801fd44:	b198      	cbz	r0, 801fd6e <_ActuationCommand__cdr_serialize+0x2a>
 801fd46:	b538      	push	{r3, r4, r5, lr}
 801fd48:	460d      	mov	r5, r1
 801fd4a:	4604      	mov	r4, r0
 801fd4c:	ed90 0b00 	vldr	d0, [r0]
 801fd50:	4608      	mov	r0, r1
 801fd52:	f7f4 f82f 	bl	8013db4 <ucdr_serialize_double>
 801fd56:	4628      	mov	r0, r5
 801fd58:	ed94 0b02 	vldr	d0, [r4, #8]
 801fd5c:	f7f4 f82a 	bl	8013db4 <ucdr_serialize_double>
 801fd60:	4628      	mov	r0, r5
 801fd62:	ed94 0b04 	vldr	d0, [r4, #16]
 801fd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd6a:	f7f4 b823 	b.w	8013db4 <ucdr_serialize_double>
 801fd6e:	4770      	bx	lr

0801fd70 <_ActuationCommand__get_serialized_size>:
 801fd70:	b190      	cbz	r0, 801fd98 <_ActuationCommand__get_serialized_size+0x28>
 801fd72:	2108      	movs	r1, #8
 801fd74:	2000      	movs	r0, #0
 801fd76:	b510      	push	{r4, lr}
 801fd78:	f7f4 fa0a 	bl	8014190 <ucdr_alignment>
 801fd7c:	2108      	movs	r1, #8
 801fd7e:	1844      	adds	r4, r0, r1
 801fd80:	4620      	mov	r0, r4
 801fd82:	f7f4 fa05 	bl	8014190 <ucdr_alignment>
 801fd86:	2108      	movs	r1, #8
 801fd88:	4408      	add	r0, r1
 801fd8a:	4404      	add	r4, r0
 801fd8c:	4620      	mov	r0, r4
 801fd8e:	f7f4 f9ff 	bl	8014190 <ucdr_alignment>
 801fd92:	3008      	adds	r0, #8
 801fd94:	4420      	add	r0, r4
 801fd96:	bd10      	pop	{r4, pc}
 801fd98:	4770      	bx	lr
 801fd9a:	bf00      	nop

0801fd9c <_ActuationCommand__max_serialized_size>:
 801fd9c:	b538      	push	{r3, r4, r5, lr}
 801fd9e:	2108      	movs	r1, #8
 801fda0:	2000      	movs	r0, #0
 801fda2:	f7f4 f9f5 	bl	8014190 <ucdr_alignment>
 801fda6:	2108      	movs	r1, #8
 801fda8:	1845      	adds	r5, r0, r1
 801fdaa:	4628      	mov	r0, r5
 801fdac:	f7f4 f9f0 	bl	8014190 <ucdr_alignment>
 801fdb0:	2108      	movs	r1, #8
 801fdb2:	1844      	adds	r4, r0, r1
 801fdb4:	442c      	add	r4, r5
 801fdb6:	4620      	mov	r0, r4
 801fdb8:	f7f4 f9ea 	bl	8014190 <ucdr_alignment>
 801fdbc:	3008      	adds	r0, #8
 801fdbe:	4420      	add	r0, r4
 801fdc0:	bd38      	pop	{r3, r4, r5, pc}
 801fdc2:	bf00      	nop

0801fdc4 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 801fdc4:	b570      	push	{r4, r5, r6, lr}
 801fdc6:	460c      	mov	r4, r1
 801fdc8:	2301      	movs	r3, #1
 801fdca:	2108      	movs	r1, #8
 801fdcc:	f104 0508 	add.w	r5, r4, #8
 801fdd0:	7003      	strb	r3, [r0, #0]
 801fdd2:	4620      	mov	r0, r4
 801fdd4:	f1c4 0408 	rsb	r4, r4, #8
 801fdd8:	f7f4 f9da 	bl	8014190 <ucdr_alignment>
 801fddc:	1946      	adds	r6, r0, r5
 801fdde:	2108      	movs	r1, #8
 801fde0:	4630      	mov	r0, r6
 801fde2:	f7f4 f9d5 	bl	8014190 <ucdr_alignment>
 801fde6:	2108      	movs	r1, #8
 801fde8:	1845      	adds	r5, r0, r1
 801fdea:	4435      	add	r5, r6
 801fdec:	4628      	mov	r0, r5
 801fdee:	f7f4 f9cf 	bl	8014190 <ucdr_alignment>
 801fdf2:	4420      	add	r0, r4
 801fdf4:	4428      	add	r0, r5
 801fdf6:	bd70      	pop	{r4, r5, r6, pc}

0801fdf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801fdf8:	4800      	ldr	r0, [pc, #0]	@ (801fdfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801fdfa:	4770      	bx	lr
 801fdfc:	24001260 	.word	0x24001260

0801fe00 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801fe00:	b1b8      	cbz	r0, 801fe32 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 801fe02:	b538      	push	{r3, r4, r5, lr}
 801fe04:	460d      	mov	r5, r1
 801fe06:	2108      	movs	r1, #8
 801fe08:	4628      	mov	r0, r5
 801fe0a:	f7f4 f9c1 	bl	8014190 <ucdr_alignment>
 801fe0e:	f105 0308 	add.w	r3, r5, #8
 801fe12:	2108      	movs	r1, #8
 801fe14:	f1c5 0508 	rsb	r5, r5, #8
 801fe18:	181c      	adds	r4, r3, r0
 801fe1a:	4620      	mov	r0, r4
 801fe1c:	f7f4 f9b8 	bl	8014190 <ucdr_alignment>
 801fe20:	2108      	movs	r1, #8
 801fe22:	4408      	add	r0, r1
 801fe24:	4404      	add	r4, r0
 801fe26:	4620      	mov	r0, r4
 801fe28:	f7f4 f9b2 	bl	8014190 <ucdr_alignment>
 801fe2c:	4428      	add	r0, r5
 801fe2e:	4420      	add	r0, r4
 801fe30:	bd38      	pop	{r3, r4, r5, pc}
 801fe32:	4770      	bx	lr

0801fe34 <_ActuationStatus__cdr_deserialize>:
 801fe34:	b538      	push	{r3, r4, r5, lr}
 801fe36:	460c      	mov	r4, r1
 801fe38:	b171      	cbz	r1, 801fe58 <_ActuationStatus__cdr_deserialize+0x24>
 801fe3a:	4605      	mov	r5, r0
 801fe3c:	f7f4 f88a 	bl	8013f54 <ucdr_deserialize_double>
 801fe40:	f104 0108 	add.w	r1, r4, #8
 801fe44:	4628      	mov	r0, r5
 801fe46:	f7f4 f885 	bl	8013f54 <ucdr_deserialize_double>
 801fe4a:	f104 0110 	add.w	r1, r4, #16
 801fe4e:	4628      	mov	r0, r5
 801fe50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe54:	f7f4 b87e 	b.w	8013f54 <ucdr_deserialize_double>
 801fe58:	4608      	mov	r0, r1
 801fe5a:	bd38      	pop	{r3, r4, r5, pc}

0801fe5c <_ActuationStatus__cdr_serialize>:
 801fe5c:	b198      	cbz	r0, 801fe86 <_ActuationStatus__cdr_serialize+0x2a>
 801fe5e:	b538      	push	{r3, r4, r5, lr}
 801fe60:	460d      	mov	r5, r1
 801fe62:	4604      	mov	r4, r0
 801fe64:	ed90 0b00 	vldr	d0, [r0]
 801fe68:	4608      	mov	r0, r1
 801fe6a:	f7f3 ffa3 	bl	8013db4 <ucdr_serialize_double>
 801fe6e:	4628      	mov	r0, r5
 801fe70:	ed94 0b02 	vldr	d0, [r4, #8]
 801fe74:	f7f3 ff9e 	bl	8013db4 <ucdr_serialize_double>
 801fe78:	4628      	mov	r0, r5
 801fe7a:	ed94 0b04 	vldr	d0, [r4, #16]
 801fe7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe82:	f7f3 bf97 	b.w	8013db4 <ucdr_serialize_double>
 801fe86:	4770      	bx	lr

0801fe88 <_ActuationStatus__get_serialized_size>:
 801fe88:	b190      	cbz	r0, 801feb0 <_ActuationStatus__get_serialized_size+0x28>
 801fe8a:	2108      	movs	r1, #8
 801fe8c:	2000      	movs	r0, #0
 801fe8e:	b510      	push	{r4, lr}
 801fe90:	f7f4 f97e 	bl	8014190 <ucdr_alignment>
 801fe94:	2108      	movs	r1, #8
 801fe96:	1844      	adds	r4, r0, r1
 801fe98:	4620      	mov	r0, r4
 801fe9a:	f7f4 f979 	bl	8014190 <ucdr_alignment>
 801fe9e:	2108      	movs	r1, #8
 801fea0:	4408      	add	r0, r1
 801fea2:	4404      	add	r4, r0
 801fea4:	4620      	mov	r0, r4
 801fea6:	f7f4 f973 	bl	8014190 <ucdr_alignment>
 801feaa:	3008      	adds	r0, #8
 801feac:	4420      	add	r0, r4
 801feae:	bd10      	pop	{r4, pc}
 801feb0:	4770      	bx	lr
 801feb2:	bf00      	nop

0801feb4 <_ActuationStatus__max_serialized_size>:
 801feb4:	b538      	push	{r3, r4, r5, lr}
 801feb6:	2108      	movs	r1, #8
 801feb8:	2000      	movs	r0, #0
 801feba:	f7f4 f969 	bl	8014190 <ucdr_alignment>
 801febe:	2108      	movs	r1, #8
 801fec0:	1845      	adds	r5, r0, r1
 801fec2:	4628      	mov	r0, r5
 801fec4:	f7f4 f964 	bl	8014190 <ucdr_alignment>
 801fec8:	2108      	movs	r1, #8
 801feca:	1844      	adds	r4, r0, r1
 801fecc:	442c      	add	r4, r5
 801fece:	4620      	mov	r0, r4
 801fed0:	f7f4 f95e 	bl	8014190 <ucdr_alignment>
 801fed4:	3008      	adds	r0, #8
 801fed6:	4420      	add	r0, r4
 801fed8:	bd38      	pop	{r3, r4, r5, pc}
 801feda:	bf00      	nop

0801fedc <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 801fedc:	b570      	push	{r4, r5, r6, lr}
 801fede:	460c      	mov	r4, r1
 801fee0:	2301      	movs	r3, #1
 801fee2:	2108      	movs	r1, #8
 801fee4:	f104 0508 	add.w	r5, r4, #8
 801fee8:	7003      	strb	r3, [r0, #0]
 801feea:	4620      	mov	r0, r4
 801feec:	f1c4 0408 	rsb	r4, r4, #8
 801fef0:	f7f4 f94e 	bl	8014190 <ucdr_alignment>
 801fef4:	1946      	adds	r6, r0, r5
 801fef6:	2108      	movs	r1, #8
 801fef8:	4630      	mov	r0, r6
 801fefa:	f7f4 f949 	bl	8014190 <ucdr_alignment>
 801fefe:	2108      	movs	r1, #8
 801ff00:	1845      	adds	r5, r0, r1
 801ff02:	4435      	add	r5, r6
 801ff04:	4628      	mov	r0, r5
 801ff06:	f7f4 f943 	bl	8014190 <ucdr_alignment>
 801ff0a:	4420      	add	r0, r4
 801ff0c:	4428      	add	r0, r5
 801ff0e:	bd70      	pop	{r4, r5, r6, pc}

0801ff10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 801ff10:	4800      	ldr	r0, [pc, #0]	@ (801ff14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 801ff12:	4770      	bx	lr
 801ff14:	24001288 	.word	0x24001288

0801ff18 <ucdr_serialize_endian_array_char>:
 801ff18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff1c:	4619      	mov	r1, r3
 801ff1e:	461f      	mov	r7, r3
 801ff20:	4605      	mov	r5, r0
 801ff22:	4690      	mov	r8, r2
 801ff24:	f7f4 f8dc 	bl	80140e0 <ucdr_check_buffer_available_for>
 801ff28:	b9e0      	cbnz	r0, 801ff64 <ucdr_serialize_endian_array_char+0x4c>
 801ff2a:	463e      	mov	r6, r7
 801ff2c:	e00b      	b.n	801ff46 <ucdr_serialize_endian_array_char+0x2e>
 801ff2e:	4441      	add	r1, r8
 801ff30:	68a8      	ldr	r0, [r5, #8]
 801ff32:	4622      	mov	r2, r4
 801ff34:	1b36      	subs	r6, r6, r4
 801ff36:	f002 faea 	bl	802250e <memcpy>
 801ff3a:	68ab      	ldr	r3, [r5, #8]
 801ff3c:	6928      	ldr	r0, [r5, #16]
 801ff3e:	4423      	add	r3, r4
 801ff40:	4420      	add	r0, r4
 801ff42:	60ab      	str	r3, [r5, #8]
 801ff44:	6128      	str	r0, [r5, #16]
 801ff46:	4631      	mov	r1, r6
 801ff48:	2201      	movs	r2, #1
 801ff4a:	4628      	mov	r0, r5
 801ff4c:	f7f4 f952 	bl	80141f4 <ucdr_check_final_buffer_behavior_array>
 801ff50:	1bb9      	subs	r1, r7, r6
 801ff52:	4604      	mov	r4, r0
 801ff54:	2800      	cmp	r0, #0
 801ff56:	d1ea      	bne.n	801ff2e <ucdr_serialize_endian_array_char+0x16>
 801ff58:	2301      	movs	r3, #1
 801ff5a:	7da8      	ldrb	r0, [r5, #22]
 801ff5c:	756b      	strb	r3, [r5, #21]
 801ff5e:	4058      	eors	r0, r3
 801ff60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff64:	463a      	mov	r2, r7
 801ff66:	4641      	mov	r1, r8
 801ff68:	68a8      	ldr	r0, [r5, #8]
 801ff6a:	f002 fad0 	bl	802250e <memcpy>
 801ff6e:	68aa      	ldr	r2, [r5, #8]
 801ff70:	692b      	ldr	r3, [r5, #16]
 801ff72:	443a      	add	r2, r7
 801ff74:	443b      	add	r3, r7
 801ff76:	60aa      	str	r2, [r5, #8]
 801ff78:	612b      	str	r3, [r5, #16]
 801ff7a:	e7ed      	b.n	801ff58 <ucdr_serialize_endian_array_char+0x40>

0801ff7c <ucdr_deserialize_endian_array_char>:
 801ff7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff80:	4619      	mov	r1, r3
 801ff82:	461f      	mov	r7, r3
 801ff84:	4605      	mov	r5, r0
 801ff86:	4690      	mov	r8, r2
 801ff88:	f7f4 f8aa 	bl	80140e0 <ucdr_check_buffer_available_for>
 801ff8c:	b9e8      	cbnz	r0, 801ffca <ucdr_deserialize_endian_array_char+0x4e>
 801ff8e:	463e      	mov	r6, r7
 801ff90:	e00c      	b.n	801ffac <ucdr_deserialize_endian_array_char+0x30>
 801ff92:	eb08 0003 	add.w	r0, r8, r3
 801ff96:	68a9      	ldr	r1, [r5, #8]
 801ff98:	4622      	mov	r2, r4
 801ff9a:	1b36      	subs	r6, r6, r4
 801ff9c:	f002 fab7 	bl	802250e <memcpy>
 801ffa0:	68ab      	ldr	r3, [r5, #8]
 801ffa2:	6928      	ldr	r0, [r5, #16]
 801ffa4:	4423      	add	r3, r4
 801ffa6:	4420      	add	r0, r4
 801ffa8:	60ab      	str	r3, [r5, #8]
 801ffaa:	6128      	str	r0, [r5, #16]
 801ffac:	4631      	mov	r1, r6
 801ffae:	2201      	movs	r2, #1
 801ffb0:	4628      	mov	r0, r5
 801ffb2:	f7f4 f91f 	bl	80141f4 <ucdr_check_final_buffer_behavior_array>
 801ffb6:	1bbb      	subs	r3, r7, r6
 801ffb8:	4604      	mov	r4, r0
 801ffba:	2800      	cmp	r0, #0
 801ffbc:	d1e9      	bne.n	801ff92 <ucdr_deserialize_endian_array_char+0x16>
 801ffbe:	2301      	movs	r3, #1
 801ffc0:	7da8      	ldrb	r0, [r5, #22]
 801ffc2:	756b      	strb	r3, [r5, #21]
 801ffc4:	4058      	eors	r0, r3
 801ffc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffca:	463a      	mov	r2, r7
 801ffcc:	68a9      	ldr	r1, [r5, #8]
 801ffce:	4640      	mov	r0, r8
 801ffd0:	f002 fa9d 	bl	802250e <memcpy>
 801ffd4:	68aa      	ldr	r2, [r5, #8]
 801ffd6:	692b      	ldr	r3, [r5, #16]
 801ffd8:	443a      	add	r2, r7
 801ffda:	443b      	add	r3, r7
 801ffdc:	60aa      	str	r2, [r5, #8]
 801ffde:	612b      	str	r3, [r5, #16]
 801ffe0:	e7ed      	b.n	801ffbe <ucdr_deserialize_endian_array_char+0x42>
 801ffe2:	bf00      	nop

0801ffe4 <ucdr_serialize_array_uint8_t>:
 801ffe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffe8:	4688      	mov	r8, r1
 801ffea:	4611      	mov	r1, r2
 801ffec:	4617      	mov	r7, r2
 801ffee:	4605      	mov	r5, r0
 801fff0:	f7f4 f876 	bl	80140e0 <ucdr_check_buffer_available_for>
 801fff4:	b9e0      	cbnz	r0, 8020030 <ucdr_serialize_array_uint8_t+0x4c>
 801fff6:	463e      	mov	r6, r7
 801fff8:	e00b      	b.n	8020012 <ucdr_serialize_array_uint8_t+0x2e>
 801fffa:	4441      	add	r1, r8
 801fffc:	68a8      	ldr	r0, [r5, #8]
 801fffe:	4622      	mov	r2, r4
 8020000:	1b36      	subs	r6, r6, r4
 8020002:	f002 fa84 	bl	802250e <memcpy>
 8020006:	68ab      	ldr	r3, [r5, #8]
 8020008:	6928      	ldr	r0, [r5, #16]
 802000a:	4423      	add	r3, r4
 802000c:	4420      	add	r0, r4
 802000e:	60ab      	str	r3, [r5, #8]
 8020010:	6128      	str	r0, [r5, #16]
 8020012:	4631      	mov	r1, r6
 8020014:	2201      	movs	r2, #1
 8020016:	4628      	mov	r0, r5
 8020018:	f7f4 f8ec 	bl	80141f4 <ucdr_check_final_buffer_behavior_array>
 802001c:	1bb9      	subs	r1, r7, r6
 802001e:	4604      	mov	r4, r0
 8020020:	2800      	cmp	r0, #0
 8020022:	d1ea      	bne.n	801fffa <ucdr_serialize_array_uint8_t+0x16>
 8020024:	2301      	movs	r3, #1
 8020026:	7da8      	ldrb	r0, [r5, #22]
 8020028:	756b      	strb	r3, [r5, #21]
 802002a:	4058      	eors	r0, r3
 802002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020030:	463a      	mov	r2, r7
 8020032:	4641      	mov	r1, r8
 8020034:	68a8      	ldr	r0, [r5, #8]
 8020036:	f002 fa6a 	bl	802250e <memcpy>
 802003a:	68aa      	ldr	r2, [r5, #8]
 802003c:	692b      	ldr	r3, [r5, #16]
 802003e:	443a      	add	r2, r7
 8020040:	443b      	add	r3, r7
 8020042:	60aa      	str	r2, [r5, #8]
 8020044:	612b      	str	r3, [r5, #16]
 8020046:	e7ed      	b.n	8020024 <ucdr_serialize_array_uint8_t+0x40>

08020048 <ucdr_serialize_endian_array_uint8_t>:
 8020048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802004c:	4619      	mov	r1, r3
 802004e:	461f      	mov	r7, r3
 8020050:	4605      	mov	r5, r0
 8020052:	4690      	mov	r8, r2
 8020054:	f7f4 f844 	bl	80140e0 <ucdr_check_buffer_available_for>
 8020058:	b9e0      	cbnz	r0, 8020094 <ucdr_serialize_endian_array_uint8_t+0x4c>
 802005a:	463e      	mov	r6, r7
 802005c:	e00b      	b.n	8020076 <ucdr_serialize_endian_array_uint8_t+0x2e>
 802005e:	4441      	add	r1, r8
 8020060:	68a8      	ldr	r0, [r5, #8]
 8020062:	4622      	mov	r2, r4
 8020064:	1b36      	subs	r6, r6, r4
 8020066:	f002 fa52 	bl	802250e <memcpy>
 802006a:	68ab      	ldr	r3, [r5, #8]
 802006c:	6928      	ldr	r0, [r5, #16]
 802006e:	4423      	add	r3, r4
 8020070:	4420      	add	r0, r4
 8020072:	60ab      	str	r3, [r5, #8]
 8020074:	6128      	str	r0, [r5, #16]
 8020076:	4631      	mov	r1, r6
 8020078:	2201      	movs	r2, #1
 802007a:	4628      	mov	r0, r5
 802007c:	f7f4 f8ba 	bl	80141f4 <ucdr_check_final_buffer_behavior_array>
 8020080:	1bb9      	subs	r1, r7, r6
 8020082:	4604      	mov	r4, r0
 8020084:	2800      	cmp	r0, #0
 8020086:	d1ea      	bne.n	802005e <ucdr_serialize_endian_array_uint8_t+0x16>
 8020088:	2301      	movs	r3, #1
 802008a:	7da8      	ldrb	r0, [r5, #22]
 802008c:	756b      	strb	r3, [r5, #21]
 802008e:	4058      	eors	r0, r3
 8020090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020094:	463a      	mov	r2, r7
 8020096:	4641      	mov	r1, r8
 8020098:	68a8      	ldr	r0, [r5, #8]
 802009a:	f002 fa38 	bl	802250e <memcpy>
 802009e:	68aa      	ldr	r2, [r5, #8]
 80200a0:	692b      	ldr	r3, [r5, #16]
 80200a2:	443a      	add	r2, r7
 80200a4:	443b      	add	r3, r7
 80200a6:	60aa      	str	r2, [r5, #8]
 80200a8:	612b      	str	r3, [r5, #16]
 80200aa:	e7ed      	b.n	8020088 <ucdr_serialize_endian_array_uint8_t+0x40>

080200ac <ucdr_deserialize_array_uint8_t>:
 80200ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200b0:	4688      	mov	r8, r1
 80200b2:	4611      	mov	r1, r2
 80200b4:	4617      	mov	r7, r2
 80200b6:	4605      	mov	r5, r0
 80200b8:	f7f4 f812 	bl	80140e0 <ucdr_check_buffer_available_for>
 80200bc:	b9e8      	cbnz	r0, 80200fa <ucdr_deserialize_array_uint8_t+0x4e>
 80200be:	463e      	mov	r6, r7
 80200c0:	e00c      	b.n	80200dc <ucdr_deserialize_array_uint8_t+0x30>
 80200c2:	eb08 0003 	add.w	r0, r8, r3
 80200c6:	68a9      	ldr	r1, [r5, #8]
 80200c8:	4622      	mov	r2, r4
 80200ca:	1b36      	subs	r6, r6, r4
 80200cc:	f002 fa1f 	bl	802250e <memcpy>
 80200d0:	68ab      	ldr	r3, [r5, #8]
 80200d2:	6928      	ldr	r0, [r5, #16]
 80200d4:	4423      	add	r3, r4
 80200d6:	4420      	add	r0, r4
 80200d8:	60ab      	str	r3, [r5, #8]
 80200da:	6128      	str	r0, [r5, #16]
 80200dc:	4631      	mov	r1, r6
 80200de:	2201      	movs	r2, #1
 80200e0:	4628      	mov	r0, r5
 80200e2:	f7f4 f887 	bl	80141f4 <ucdr_check_final_buffer_behavior_array>
 80200e6:	1bbb      	subs	r3, r7, r6
 80200e8:	4604      	mov	r4, r0
 80200ea:	2800      	cmp	r0, #0
 80200ec:	d1e9      	bne.n	80200c2 <ucdr_deserialize_array_uint8_t+0x16>
 80200ee:	2301      	movs	r3, #1
 80200f0:	7da8      	ldrb	r0, [r5, #22]
 80200f2:	756b      	strb	r3, [r5, #21]
 80200f4:	4058      	eors	r0, r3
 80200f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200fa:	463a      	mov	r2, r7
 80200fc:	68a9      	ldr	r1, [r5, #8]
 80200fe:	4640      	mov	r0, r8
 8020100:	f002 fa05 	bl	802250e <memcpy>
 8020104:	68aa      	ldr	r2, [r5, #8]
 8020106:	692b      	ldr	r3, [r5, #16]
 8020108:	443a      	add	r2, r7
 802010a:	443b      	add	r3, r7
 802010c:	60aa      	str	r2, [r5, #8]
 802010e:	612b      	str	r3, [r5, #16]
 8020110:	e7ed      	b.n	80200ee <ucdr_deserialize_array_uint8_t+0x42>
 8020112:	bf00      	nop

08020114 <ucdr_deserialize_endian_array_uint8_t>:
 8020114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020118:	4619      	mov	r1, r3
 802011a:	461f      	mov	r7, r3
 802011c:	4605      	mov	r5, r0
 802011e:	4690      	mov	r8, r2
 8020120:	f7f3 ffde 	bl	80140e0 <ucdr_check_buffer_available_for>
 8020124:	b9e8      	cbnz	r0, 8020162 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8020126:	463e      	mov	r6, r7
 8020128:	e00c      	b.n	8020144 <ucdr_deserialize_endian_array_uint8_t+0x30>
 802012a:	eb08 0003 	add.w	r0, r8, r3
 802012e:	68a9      	ldr	r1, [r5, #8]
 8020130:	4622      	mov	r2, r4
 8020132:	1b36      	subs	r6, r6, r4
 8020134:	f002 f9eb 	bl	802250e <memcpy>
 8020138:	68ab      	ldr	r3, [r5, #8]
 802013a:	6928      	ldr	r0, [r5, #16]
 802013c:	4423      	add	r3, r4
 802013e:	4420      	add	r0, r4
 8020140:	60ab      	str	r3, [r5, #8]
 8020142:	6128      	str	r0, [r5, #16]
 8020144:	4631      	mov	r1, r6
 8020146:	2201      	movs	r2, #1
 8020148:	4628      	mov	r0, r5
 802014a:	f7f4 f853 	bl	80141f4 <ucdr_check_final_buffer_behavior_array>
 802014e:	1bbb      	subs	r3, r7, r6
 8020150:	4604      	mov	r4, r0
 8020152:	2800      	cmp	r0, #0
 8020154:	d1e9      	bne.n	802012a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8020156:	2301      	movs	r3, #1
 8020158:	7da8      	ldrb	r0, [r5, #22]
 802015a:	756b      	strb	r3, [r5, #21]
 802015c:	4058      	eors	r0, r3
 802015e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020162:	463a      	mov	r2, r7
 8020164:	68a9      	ldr	r1, [r5, #8]
 8020166:	4640      	mov	r0, r8
 8020168:	f002 f9d1 	bl	802250e <memcpy>
 802016c:	68aa      	ldr	r2, [r5, #8]
 802016e:	692b      	ldr	r3, [r5, #16]
 8020170:	443a      	add	r2, r7
 8020172:	443b      	add	r3, r7
 8020174:	60aa      	str	r2, [r5, #8]
 8020176:	612b      	str	r3, [r5, #16]
 8020178:	e7ed      	b.n	8020156 <ucdr_deserialize_endian_array_uint8_t+0x42>
 802017a:	bf00      	nop

0802017c <ucdr_serialize_string>:
 802017c:	b510      	push	{r4, lr}
 802017e:	b082      	sub	sp, #8
 8020180:	4604      	mov	r4, r0
 8020182:	4608      	mov	r0, r1
 8020184:	9101      	str	r1, [sp, #4]
 8020186:	f7e0 f8b5 	bl	80002f4 <strlen>
 802018a:	4602      	mov	r2, r0
 802018c:	9901      	ldr	r1, [sp, #4]
 802018e:	4620      	mov	r0, r4
 8020190:	3201      	adds	r2, #1
 8020192:	b002      	add	sp, #8
 8020194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020198:	f7f6 bdda 	b.w	8016d50 <ucdr_serialize_sequence_char>

0802019c <ucdr_deserialize_string>:
 802019c:	b500      	push	{lr}
 802019e:	b083      	sub	sp, #12
 80201a0:	ab01      	add	r3, sp, #4
 80201a2:	f7f6 fde7 	bl	8016d74 <ucdr_deserialize_sequence_char>
 80201a6:	b003      	add	sp, #12
 80201a8:	f85d fb04 	ldr.w	pc, [sp], #4

080201ac <uxr_init_input_best_effort_stream>:
 80201ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80201b0:	8003      	strh	r3, [r0, #0]
 80201b2:	4770      	bx	lr

080201b4 <uxr_reset_input_best_effort_stream>:
 80201b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80201b8:	8003      	strh	r3, [r0, #0]
 80201ba:	4770      	bx	lr

080201bc <uxr_receive_best_effort_message>:
 80201bc:	b538      	push	{r3, r4, r5, lr}
 80201be:	4604      	mov	r4, r0
 80201c0:	8800      	ldrh	r0, [r0, #0]
 80201c2:	460d      	mov	r5, r1
 80201c4:	f000 fe74 	bl	8020eb0 <uxr_seq_num_cmp>
 80201c8:	4603      	mov	r3, r0
 80201ca:	0fc0      	lsrs	r0, r0, #31
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	bfb8      	it	lt
 80201d0:	8025      	strhlt	r5, [r4, #0]
 80201d2:	bd38      	pop	{r3, r4, r5, pc}

080201d4 <on_full_input_buffer>:
 80201d4:	b570      	push	{r4, r5, r6, lr}
 80201d6:	460c      	mov	r4, r1
 80201d8:	4605      	mov	r5, r0
 80201da:	8908      	ldrh	r0, [r1, #8]
 80201dc:	682b      	ldr	r3, [r5, #0]
 80201de:	7d26      	ldrb	r6, [r4, #20]
 80201e0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80201e4:	fbb2 f2f0 	udiv	r2, r2, r0
 80201e8:	eba3 0c01 	sub.w	ip, r3, r1
 80201ec:	fbbc fcf2 	udiv	ip, ip, r2
 80201f0:	f10c 0c01 	add.w	ip, ip, #1
 80201f4:	fa1f f38c 	uxth.w	r3, ip
 80201f8:	fbb3 fcf0 	udiv	ip, r3, r0
 80201fc:	fb00 331c 	mls	r3, r0, ip, r3
 8020200:	b29b      	uxth	r3, r3
 8020202:	fb02 f303 	mul.w	r3, r2, r3
 8020206:	1d18      	adds	r0, r3, #4
 8020208:	4408      	add	r0, r1
 802020a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802020e:	b116      	cbz	r6, 8020216 <on_full_input_buffer+0x42>
 8020210:	2600      	movs	r6, #0
 8020212:	f840 6c04 	str.w	r6, [r0, #-4]
 8020216:	2a03      	cmp	r2, #3
 8020218:	d801      	bhi.n	802021e <on_full_input_buffer+0x4a>
 802021a:	2001      	movs	r0, #1
 802021c:	bd70      	pop	{r4, r5, r6, pc}
 802021e:	3308      	adds	r3, #8
 8020220:	4628      	mov	r0, r5
 8020222:	3a04      	subs	r2, #4
 8020224:	4419      	add	r1, r3
 8020226:	692b      	ldr	r3, [r5, #16]
 8020228:	f7f3 ffa6 	bl	8014178 <ucdr_init_buffer_origin>
 802022c:	4628      	mov	r0, r5
 802022e:	4622      	mov	r2, r4
 8020230:	4902      	ldr	r1, [pc, #8]	@ (802023c <on_full_input_buffer+0x68>)
 8020232:	f7f3 ff7d 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 8020236:	2000      	movs	r0, #0
 8020238:	bd70      	pop	{r4, r5, r6, pc}
 802023a:	bf00      	nop
 802023c:	080201d5 	.word	0x080201d5

08020240 <uxr_init_input_reliable_stream>:
 8020240:	b510      	push	{r4, lr}
 8020242:	e9c0 1200 	strd	r1, r2, [r0]
 8020246:	2400      	movs	r4, #0
 8020248:	9a02      	ldr	r2, [sp, #8]
 802024a:	8103      	strh	r3, [r0, #8]
 802024c:	6102      	str	r2, [r0, #16]
 802024e:	7504      	strb	r4, [r0, #20]
 8020250:	b1c3      	cbz	r3, 8020284 <uxr_init_input_reliable_stream+0x44>
 8020252:	600c      	str	r4, [r1, #0]
 8020254:	8901      	ldrh	r1, [r0, #8]
 8020256:	2901      	cmp	r1, #1
 8020258:	d914      	bls.n	8020284 <uxr_init_input_reliable_stream+0x44>
 802025a:	f04f 0c01 	mov.w	ip, #1
 802025e:	6843      	ldr	r3, [r0, #4]
 8020260:	f10c 0e01 	add.w	lr, ip, #1
 8020264:	fbbc f2f1 	udiv	r2, ip, r1
 8020268:	fbb3 f3f1 	udiv	r3, r3, r1
 802026c:	fb01 c212 	mls	r2, r1, r2, ip
 8020270:	fa1f fc8e 	uxth.w	ip, lr
 8020274:	b292      	uxth	r2, r2
 8020276:	fb02 f303 	mul.w	r3, r2, r3
 802027a:	6802      	ldr	r2, [r0, #0]
 802027c:	50d4      	str	r4, [r2, r3]
 802027e:	8901      	ldrh	r1, [r0, #8]
 8020280:	4561      	cmp	r1, ip
 8020282:	d8ec      	bhi.n	802025e <uxr_init_input_reliable_stream+0x1e>
 8020284:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020288:	60c3      	str	r3, [r0, #12]
 802028a:	bd10      	pop	{r4, pc}

0802028c <uxr_reset_input_reliable_stream>:
 802028c:	8901      	ldrh	r1, [r0, #8]
 802028e:	b1d9      	cbz	r1, 80202c8 <uxr_reset_input_reliable_stream+0x3c>
 8020290:	b510      	push	{r4, lr}
 8020292:	f04f 0e00 	mov.w	lr, #0
 8020296:	46f4      	mov	ip, lr
 8020298:	4674      	mov	r4, lr
 802029a:	6843      	ldr	r3, [r0, #4]
 802029c:	f10e 0e01 	add.w	lr, lr, #1
 80202a0:	fbbc f2f1 	udiv	r2, ip, r1
 80202a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80202a8:	fb01 c212 	mls	r2, r1, r2, ip
 80202ac:	fa1f fc8e 	uxth.w	ip, lr
 80202b0:	b292      	uxth	r2, r2
 80202b2:	fb02 f303 	mul.w	r3, r2, r3
 80202b6:	6802      	ldr	r2, [r0, #0]
 80202b8:	50d4      	str	r4, [r2, r3]
 80202ba:	8901      	ldrh	r1, [r0, #8]
 80202bc:	4561      	cmp	r1, ip
 80202be:	d8ec      	bhi.n	802029a <uxr_reset_input_reliable_stream+0xe>
 80202c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202c4:	60c3      	str	r3, [r0, #12]
 80202c6:	bd10      	pop	{r4, pc}
 80202c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202cc:	60c3      	str	r3, [r0, #12]
 80202ce:	4770      	bx	lr

080202d0 <uxr_receive_reliable_message>:
 80202d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80202d4:	4604      	mov	r4, r0
 80202d6:	460d      	mov	r5, r1
 80202d8:	8901      	ldrh	r1, [r0, #8]
 80202da:	4617      	mov	r7, r2
 80202dc:	8980      	ldrh	r0, [r0, #12]
 80202de:	4698      	mov	r8, r3
 80202e0:	f000 fdde 	bl	8020ea0 <uxr_seq_num_add>
 80202e4:	4629      	mov	r1, r5
 80202e6:	4606      	mov	r6, r0
 80202e8:	89a0      	ldrh	r0, [r4, #12]
 80202ea:	f000 fde1 	bl	8020eb0 <uxr_seq_num_cmp>
 80202ee:	2800      	cmp	r0, #0
 80202f0:	db0a      	blt.n	8020308 <uxr_receive_reliable_message+0x38>
 80202f2:	2600      	movs	r6, #0
 80202f4:	4629      	mov	r1, r5
 80202f6:	89e0      	ldrh	r0, [r4, #14]
 80202f8:	f000 fdda 	bl	8020eb0 <uxr_seq_num_cmp>
 80202fc:	2800      	cmp	r0, #0
 80202fe:	da00      	bge.n	8020302 <uxr_receive_reliable_message+0x32>
 8020300:	81e5      	strh	r5, [r4, #14]
 8020302:	4630      	mov	r0, r6
 8020304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020308:	4630      	mov	r0, r6
 802030a:	4629      	mov	r1, r5
 802030c:	f000 fdd0 	bl	8020eb0 <uxr_seq_num_cmp>
 8020310:	2800      	cmp	r0, #0
 8020312:	dbee      	blt.n	80202f2 <uxr_receive_reliable_message+0x22>
 8020314:	6923      	ldr	r3, [r4, #16]
 8020316:	4638      	mov	r0, r7
 8020318:	4798      	blx	r3
 802031a:	4681      	mov	r9, r0
 802031c:	2101      	movs	r1, #1
 802031e:	89a0      	ldrh	r0, [r4, #12]
 8020320:	f000 fdbe 	bl	8020ea0 <uxr_seq_num_add>
 8020324:	f1b9 0f00 	cmp.w	r9, #0
 8020328:	bf08      	it	eq
 802032a:	4285      	cmpeq	r5, r0
 802032c:	bf0c      	ite	eq
 802032e:	2601      	moveq	r6, #1
 8020330:	2600      	movne	r6, #0
 8020332:	d104      	bne.n	802033e <uxr_receive_reliable_message+0x6e>
 8020334:	2300      	movs	r3, #0
 8020336:	9a08      	ldr	r2, [sp, #32]
 8020338:	81a0      	strh	r0, [r4, #12]
 802033a:	7013      	strb	r3, [r2, #0]
 802033c:	e7da      	b.n	80202f4 <uxr_receive_reliable_message+0x24>
 802033e:	8922      	ldrh	r2, [r4, #8]
 8020340:	6863      	ldr	r3, [r4, #4]
 8020342:	fbb5 f0f2 	udiv	r0, r5, r2
 8020346:	fbb3 f3f2 	udiv	r3, r3, r2
 802034a:	fb02 5010 	mls	r0, r2, r0, r5
 802034e:	b280      	uxth	r0, r0
 8020350:	fb03 f000 	mul.w	r0, r3, r0
 8020354:	6823      	ldr	r3, [r4, #0]
 8020356:	3004      	adds	r0, #4
 8020358:	4418      	add	r0, r3
 802035a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 802035e:	2b00      	cmp	r3, #0
 8020360:	d1c7      	bne.n	80202f2 <uxr_receive_reliable_message+0x22>
 8020362:	4639      	mov	r1, r7
 8020364:	4642      	mov	r2, r8
 8020366:	f002 f8d2 	bl	802250e <memcpy>
 802036a:	8921      	ldrh	r1, [r4, #8]
 802036c:	6863      	ldr	r3, [r4, #4]
 802036e:	fbb5 f2f1 	udiv	r2, r5, r1
 8020372:	fbb3 f3f1 	udiv	r3, r3, r1
 8020376:	fb01 5212 	mls	r2, r1, r2, r5
 802037a:	b292      	uxth	r2, r2
 802037c:	fb02 f303 	mul.w	r3, r2, r3
 8020380:	6822      	ldr	r2, [r4, #0]
 8020382:	f842 8003 	str.w	r8, [r2, r3]
 8020386:	2301      	movs	r3, #1
 8020388:	9a08      	ldr	r2, [sp, #32]
 802038a:	7013      	strb	r3, [r2, #0]
 802038c:	f1b9 0f00 	cmp.w	r9, #0
 8020390:	d0af      	beq.n	80202f2 <uxr_receive_reliable_message+0x22>
 8020392:	89a6      	ldrh	r6, [r4, #12]
 8020394:	2101      	movs	r1, #1
 8020396:	4630      	mov	r0, r6
 8020398:	f000 fd82 	bl	8020ea0 <uxr_seq_num_add>
 802039c:	8921      	ldrh	r1, [r4, #8]
 802039e:	6863      	ldr	r3, [r4, #4]
 80203a0:	4606      	mov	r6, r0
 80203a2:	fbb0 f2f1 	udiv	r2, r0, r1
 80203a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80203aa:	fb01 0212 	mls	r2, r1, r2, r0
 80203ae:	6820      	ldr	r0, [r4, #0]
 80203b0:	b292      	uxth	r2, r2
 80203b2:	fb02 f303 	mul.w	r3, r2, r3
 80203b6:	3304      	adds	r3, #4
 80203b8:	4418      	add	r0, r3
 80203ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80203be:	2b00      	cmp	r3, #0
 80203c0:	d097      	beq.n	80202f2 <uxr_receive_reliable_message+0x22>
 80203c2:	6923      	ldr	r3, [r4, #16]
 80203c4:	4798      	blx	r3
 80203c6:	2802      	cmp	r0, #2
 80203c8:	d002      	beq.n	80203d0 <uxr_receive_reliable_message+0x100>
 80203ca:	2801      	cmp	r0, #1
 80203cc:	d0e2      	beq.n	8020394 <uxr_receive_reliable_message+0xc4>
 80203ce:	e790      	b.n	80202f2 <uxr_receive_reliable_message+0x22>
 80203d0:	2601      	movs	r6, #1
 80203d2:	e78f      	b.n	80202f4 <uxr_receive_reliable_message+0x24>

080203d4 <uxr_next_input_reliable_buffer_available>:
 80203d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203d8:	4604      	mov	r4, r0
 80203da:	460f      	mov	r7, r1
 80203dc:	8980      	ldrh	r0, [r0, #12]
 80203de:	2101      	movs	r1, #1
 80203e0:	4690      	mov	r8, r2
 80203e2:	f000 fd5d 	bl	8020ea0 <uxr_seq_num_add>
 80203e6:	8922      	ldrh	r2, [r4, #8]
 80203e8:	6866      	ldr	r6, [r4, #4]
 80203ea:	fbb0 f3f2 	udiv	r3, r0, r2
 80203ee:	fbb6 f6f2 	udiv	r6, r6, r2
 80203f2:	fb02 0313 	mls	r3, r2, r3, r0
 80203f6:	b29b      	uxth	r3, r3
 80203f8:	fb03 f606 	mul.w	r6, r3, r6
 80203fc:	6823      	ldr	r3, [r4, #0]
 80203fe:	3604      	adds	r6, #4
 8020400:	441e      	add	r6, r3
 8020402:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8020406:	f1b9 0f00 	cmp.w	r9, #0
 802040a:	d023      	beq.n	8020454 <uxr_next_input_reliable_buffer_available+0x80>
 802040c:	4605      	mov	r5, r0
 802040e:	6923      	ldr	r3, [r4, #16]
 8020410:	4630      	mov	r0, r6
 8020412:	4798      	blx	r3
 8020414:	4682      	mov	sl, r0
 8020416:	b300      	cbz	r0, 802045a <uxr_next_input_reliable_buffer_available+0x86>
 8020418:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 802041c:	2101      	movs	r1, #1
 802041e:	4650      	mov	r0, sl
 8020420:	f000 fd3e 	bl	8020ea0 <uxr_seq_num_add>
 8020424:	8921      	ldrh	r1, [r4, #8]
 8020426:	4682      	mov	sl, r0
 8020428:	6863      	ldr	r3, [r4, #4]
 802042a:	6820      	ldr	r0, [r4, #0]
 802042c:	fbba f2f1 	udiv	r2, sl, r1
 8020430:	fbb3 f3f1 	udiv	r3, r3, r1
 8020434:	fb01 a212 	mls	r2, r1, r2, sl
 8020438:	b292      	uxth	r2, r2
 802043a:	fb02 f303 	mul.w	r3, r2, r3
 802043e:	3304      	adds	r3, #4
 8020440:	4418      	add	r0, r3
 8020442:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8020446:	b12b      	cbz	r3, 8020454 <uxr_next_input_reliable_buffer_available+0x80>
 8020448:	6923      	ldr	r3, [r4, #16]
 802044a:	4798      	blx	r3
 802044c:	2802      	cmp	r0, #2
 802044e:	d01b      	beq.n	8020488 <uxr_next_input_reliable_buffer_available+0xb4>
 8020450:	2801      	cmp	r0, #1
 8020452:	d0e3      	beq.n	802041c <uxr_next_input_reliable_buffer_available+0x48>
 8020454:	2000      	movs	r0, #0
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	464a      	mov	r2, r9
 802045c:	4631      	mov	r1, r6
 802045e:	4638      	mov	r0, r7
 8020460:	f7f3 fe92 	bl	8014188 <ucdr_init_buffer>
 8020464:	8921      	ldrh	r1, [r4, #8]
 8020466:	6863      	ldr	r3, [r4, #4]
 8020468:	2001      	movs	r0, #1
 802046a:	fbb5 f2f1 	udiv	r2, r5, r1
 802046e:	fbb3 f3f1 	udiv	r3, r3, r1
 8020472:	fb01 5212 	mls	r2, r1, r2, r5
 8020476:	b292      	uxth	r2, r2
 8020478:	fb02 f303 	mul.w	r3, r2, r3
 802047c:	6822      	ldr	r2, [r4, #0]
 802047e:	f842 a003 	str.w	sl, [r2, r3]
 8020482:	81a5      	strh	r5, [r4, #12]
 8020484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020488:	8920      	ldrh	r0, [r4, #8]
 802048a:	eb06 0108 	add.w	r1, r6, r8
 802048e:	6863      	ldr	r3, [r4, #4]
 8020490:	eba9 0208 	sub.w	r2, r9, r8
 8020494:	fbb5 f6f0 	udiv	r6, r5, r0
 8020498:	fbb3 f3f0 	udiv	r3, r3, r0
 802049c:	fb00 5516 	mls	r5, r0, r6, r5
 80204a0:	2000      	movs	r0, #0
 80204a2:	b2ad      	uxth	r5, r5
 80204a4:	fb03 f505 	mul.w	r5, r3, r5
 80204a8:	6823      	ldr	r3, [r4, #0]
 80204aa:	5158      	str	r0, [r3, r5]
 80204ac:	4638      	mov	r0, r7
 80204ae:	f7f3 fe6b 	bl	8014188 <ucdr_init_buffer>
 80204b2:	4638      	mov	r0, r7
 80204b4:	4622      	mov	r2, r4
 80204b6:	4903      	ldr	r1, [pc, #12]	@ (80204c4 <uxr_next_input_reliable_buffer_available+0xf0>)
 80204b8:	f7f3 fe3a 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 80204bc:	2001      	movs	r0, #1
 80204be:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80204c2:	e7c8      	b.n	8020456 <uxr_next_input_reliable_buffer_available+0x82>
 80204c4:	080201d5 	.word	0x080201d5

080204c8 <uxr_process_heartbeat>:
 80204c8:	b538      	push	{r3, r4, r5, lr}
 80204ca:	4611      	mov	r1, r2
 80204cc:	4604      	mov	r4, r0
 80204ce:	89c0      	ldrh	r0, [r0, #14]
 80204d0:	4615      	mov	r5, r2
 80204d2:	f000 fced 	bl	8020eb0 <uxr_seq_num_cmp>
 80204d6:	2800      	cmp	r0, #0
 80204d8:	bfb8      	it	lt
 80204da:	81e5      	strhlt	r5, [r4, #14]
 80204dc:	bd38      	pop	{r3, r4, r5, pc}
 80204de:	bf00      	nop

080204e0 <uxr_compute_acknack>:
 80204e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204e4:	8903      	ldrh	r3, [r0, #8]
 80204e6:	4604      	mov	r4, r0
 80204e8:	460f      	mov	r7, r1
 80204ea:	8985      	ldrh	r5, [r0, #12]
 80204ec:	b1db      	cbz	r3, 8020526 <uxr_compute_acknack+0x46>
 80204ee:	4628      	mov	r0, r5
 80204f0:	2601      	movs	r6, #1
 80204f2:	e004      	b.n	80204fe <uxr_compute_acknack+0x1e>
 80204f4:	4566      	cmp	r6, ip
 80204f6:	f106 0601 	add.w	r6, r6, #1
 80204fa:	d214      	bcs.n	8020526 <uxr_compute_acknack+0x46>
 80204fc:	89a0      	ldrh	r0, [r4, #12]
 80204fe:	b2b1      	uxth	r1, r6
 8020500:	f000 fcce 	bl	8020ea0 <uxr_seq_num_add>
 8020504:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020508:	fbb0 f2fc 	udiv	r2, r0, ip
 802050c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8020510:	fb0c 0212 	mls	r2, ip, r2, r0
 8020514:	fbb3 f3fc 	udiv	r3, r3, ip
 8020518:	b292      	uxth	r2, r2
 802051a:	fb02 f303 	mul.w	r3, r2, r3
 802051e:	58cb      	ldr	r3, [r1, r3]
 8020520:	2b00      	cmp	r3, #0
 8020522:	d1e7      	bne.n	80204f4 <uxr_compute_acknack+0x14>
 8020524:	4605      	mov	r5, r0
 8020526:	803d      	strh	r5, [r7, #0]
 8020528:	2101      	movs	r1, #1
 802052a:	89e6      	ldrh	r6, [r4, #14]
 802052c:	4628      	mov	r0, r5
 802052e:	f000 fcbb 	bl	8020ea8 <uxr_seq_num_sub>
 8020532:	4601      	mov	r1, r0
 8020534:	4630      	mov	r0, r6
 8020536:	f000 fcb7 	bl	8020ea8 <uxr_seq_num_sub>
 802053a:	4606      	mov	r6, r0
 802053c:	b328      	cbz	r0, 802058a <uxr_compute_acknack+0xaa>
 802053e:	f04f 0900 	mov.w	r9, #0
 8020542:	f04f 0801 	mov.w	r8, #1
 8020546:	464d      	mov	r5, r9
 8020548:	fa1f f189 	uxth.w	r1, r9
 802054c:	8838      	ldrh	r0, [r7, #0]
 802054e:	f000 fca7 	bl	8020ea0 <uxr_seq_num_add>
 8020552:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8020556:	6861      	ldr	r1, [r4, #4]
 8020558:	fa08 fe09 	lsl.w	lr, r8, r9
 802055c:	6822      	ldr	r2, [r4, #0]
 802055e:	f109 0901 	add.w	r9, r9, #1
 8020562:	ea4e 0e05 	orr.w	lr, lr, r5
 8020566:	fbb0 f3fc 	udiv	r3, r0, ip
 802056a:	fbb1 f1fc 	udiv	r1, r1, ip
 802056e:	fb03 001c 	mls	r0, r3, ip, r0
 8020572:	b283      	uxth	r3, r0
 8020574:	fb01 f303 	mul.w	r3, r1, r3
 8020578:	58d3      	ldr	r3, [r2, r3]
 802057a:	b90b      	cbnz	r3, 8020580 <uxr_compute_acknack+0xa0>
 802057c:	fa1f f58e 	uxth.w	r5, lr
 8020580:	454e      	cmp	r6, r9
 8020582:	d1e1      	bne.n	8020548 <uxr_compute_acknack+0x68>
 8020584:	4628      	mov	r0, r5
 8020586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802058a:	4605      	mov	r5, r0
 802058c:	4628      	mov	r0, r5
 802058e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020592:	bf00      	nop

08020594 <uxr_init_output_best_effort_stream>:
 8020594:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8020598:	6001      	str	r1, [r0, #0]
 802059a:	7303      	strb	r3, [r0, #12]
 802059c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80205a0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80205a4:	4770      	bx	lr
 80205a6:	bf00      	nop

080205a8 <uxr_reset_output_best_effort_stream>:
 80205a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80205ac:	7b03      	ldrb	r3, [r0, #12]
 80205ae:	81c2      	strh	r2, [r0, #14]
 80205b0:	6043      	str	r3, [r0, #4]
 80205b2:	4770      	bx	lr

080205b4 <uxr_prepare_best_effort_buffer_to_write>:
 80205b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80205b6:	4604      	mov	r4, r0
 80205b8:	b083      	sub	sp, #12
 80205ba:	6840      	ldr	r0, [r0, #4]
 80205bc:	460d      	mov	r5, r1
 80205be:	4616      	mov	r6, r2
 80205c0:	f7f8 ff5e 	bl	8019480 <uxr_submessage_padding>
 80205c4:	6863      	ldr	r3, [r4, #4]
 80205c6:	4418      	add	r0, r3
 80205c8:	68a3      	ldr	r3, [r4, #8]
 80205ca:	1942      	adds	r2, r0, r5
 80205cc:	4293      	cmp	r3, r2
 80205ce:	bf2c      	ite	cs
 80205d0:	2701      	movcs	r7, #1
 80205d2:	2700      	movcc	r7, #0
 80205d4:	d202      	bcs.n	80205dc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80205d6:	4638      	mov	r0, r7
 80205d8:	b003      	add	sp, #12
 80205da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205dc:	9000      	str	r0, [sp, #0]
 80205de:	2300      	movs	r3, #0
 80205e0:	4630      	mov	r0, r6
 80205e2:	6821      	ldr	r1, [r4, #0]
 80205e4:	f7f3 fdbe 	bl	8014164 <ucdr_init_buffer_origin_offset>
 80205e8:	6861      	ldr	r1, [r4, #4]
 80205ea:	4638      	mov	r0, r7
 80205ec:	4429      	add	r1, r5
 80205ee:	6061      	str	r1, [r4, #4]
 80205f0:	b003      	add	sp, #12
 80205f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080205f4 <uxr_prepare_best_effort_buffer_to_send>:
 80205f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80205f8:	4604      	mov	r4, r0
 80205fa:	461d      	mov	r5, r3
 80205fc:	6840      	ldr	r0, [r0, #4]
 80205fe:	7b23      	ldrb	r3, [r4, #12]
 8020600:	4298      	cmp	r0, r3
 8020602:	bf8c      	ite	hi
 8020604:	2601      	movhi	r6, #1
 8020606:	2600      	movls	r6, #0
 8020608:	d802      	bhi.n	8020610 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 802060a:	4630      	mov	r0, r6
 802060c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020610:	4688      	mov	r8, r1
 8020612:	89e0      	ldrh	r0, [r4, #14]
 8020614:	2101      	movs	r1, #1
 8020616:	4617      	mov	r7, r2
 8020618:	f000 fc42 	bl	8020ea0 <uxr_seq_num_add>
 802061c:	6823      	ldr	r3, [r4, #0]
 802061e:	81e0      	strh	r0, [r4, #14]
 8020620:	8028      	strh	r0, [r5, #0]
 8020622:	4630      	mov	r0, r6
 8020624:	f8c8 3000 	str.w	r3, [r8]
 8020628:	6863      	ldr	r3, [r4, #4]
 802062a:	603b      	str	r3, [r7, #0]
 802062c:	7b23      	ldrb	r3, [r4, #12]
 802062e:	6063      	str	r3, [r4, #4]
 8020630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020634 <on_full_output_buffer>:
 8020634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020636:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 802063a:	460c      	mov	r4, r1
 802063c:	6803      	ldr	r3, [r0, #0]
 802063e:	4605      	mov	r5, r0
 8020640:	7b26      	ldrb	r6, [r4, #12]
 8020642:	e9d1 1200 	ldrd	r1, r2, [r1]
 8020646:	fbb2 f2fc 	udiv	r2, r2, ip
 802064a:	eba3 0e01 	sub.w	lr, r3, r1
 802064e:	6903      	ldr	r3, [r0, #16]
 8020650:	fbbe fef2 	udiv	lr, lr, r2
 8020654:	f10e 0e01 	add.w	lr, lr, #1
 8020658:	fa1f fe8e 	uxth.w	lr, lr
 802065c:	fbbe f7fc 	udiv	r7, lr, ip
 8020660:	fb0c ec17 	mls	ip, ip, r7, lr
 8020664:	fa1f fc8c 	uxth.w	ip, ip
 8020668:	fb02 fc0c 	mul.w	ip, r2, ip
 802066c:	f851 200c 	ldr.w	r2, [r1, ip]
 8020670:	44b4      	add	ip, r6
 8020672:	1b92      	subs	r2, r2, r6
 8020674:	f10c 0c08 	add.w	ip, ip, #8
 8020678:	3a04      	subs	r2, #4
 802067a:	4461      	add	r1, ip
 802067c:	f7f3 fd7c 	bl	8014178 <ucdr_init_buffer_origin>
 8020680:	4628      	mov	r0, r5
 8020682:	4622      	mov	r2, r4
 8020684:	4902      	ldr	r1, [pc, #8]	@ (8020690 <on_full_output_buffer+0x5c>)
 8020686:	f7f3 fd53 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 802068a:	2000      	movs	r0, #0
 802068c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802068e:	bf00      	nop
 8020690:	08020635 	.word	0x08020635

08020694 <uxr_init_output_reliable_stream>:
 8020694:	b530      	push	{r4, r5, lr}
 8020696:	f89d 400c 	ldrb.w	r4, [sp, #12]
 802069a:	8103      	strh	r3, [r0, #8]
 802069c:	7304      	strb	r4, [r0, #12]
 802069e:	e9c0 1200 	strd	r1, r2, [r0]
 80206a2:	b1e3      	cbz	r3, 80206de <uxr_init_output_reliable_stream+0x4a>
 80206a4:	600c      	str	r4, [r1, #0]
 80206a6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80206aa:	f1bc 0f01 	cmp.w	ip, #1
 80206ae:	d916      	bls.n	80206de <uxr_init_output_reliable_stream+0x4a>
 80206b0:	f04f 0e01 	mov.w	lr, #1
 80206b4:	6843      	ldr	r3, [r0, #4]
 80206b6:	f10e 0501 	add.w	r5, lr, #1
 80206ba:	7b04      	ldrb	r4, [r0, #12]
 80206bc:	6801      	ldr	r1, [r0, #0]
 80206be:	fbbe f2fc 	udiv	r2, lr, ip
 80206c2:	fbb3 f3fc 	udiv	r3, r3, ip
 80206c6:	fb0c e212 	mls	r2, ip, r2, lr
 80206ca:	fa1f fe85 	uxth.w	lr, r5
 80206ce:	b292      	uxth	r2, r2
 80206d0:	fb02 f303 	mul.w	r3, r2, r3
 80206d4:	50cc      	str	r4, [r1, r3]
 80206d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80206da:	45f4      	cmp	ip, lr
 80206dc:	d8ea      	bhi.n	80206b4 <uxr_init_output_reliable_stream+0x20>
 80206de:	4b07      	ldr	r3, [pc, #28]	@ (80206fc <uxr_init_output_reliable_stream+0x68>)
 80206e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80206e4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80206e8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80206ec:	f8c0 300e 	str.w	r3, [r0, #14]
 80206f0:	2300      	movs	r3, #0
 80206f2:	8242      	strh	r2, [r0, #18]
 80206f4:	8403      	strh	r3, [r0, #32]
 80206f6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80206fa:	bd30      	pop	{r4, r5, pc}
 80206fc:	ffff0000 	.word	0xffff0000

08020700 <uxr_reset_output_reliable_stream>:
 8020700:	8901      	ldrh	r1, [r0, #8]
 8020702:	b510      	push	{r4, lr}
 8020704:	b1b1      	cbz	r1, 8020734 <uxr_reset_output_reliable_stream+0x34>
 8020706:	f04f 0e00 	mov.w	lr, #0
 802070a:	46f4      	mov	ip, lr
 802070c:	6843      	ldr	r3, [r0, #4]
 802070e:	f10e 0e01 	add.w	lr, lr, #1
 8020712:	7b04      	ldrb	r4, [r0, #12]
 8020714:	fbbc f2f1 	udiv	r2, ip, r1
 8020718:	fbb3 f3f1 	udiv	r3, r3, r1
 802071c:	fb01 c212 	mls	r2, r1, r2, ip
 8020720:	fa1f fc8e 	uxth.w	ip, lr
 8020724:	b292      	uxth	r2, r2
 8020726:	fb02 f303 	mul.w	r3, r2, r3
 802072a:	6802      	ldr	r2, [r0, #0]
 802072c:	50d4      	str	r4, [r2, r3]
 802072e:	8901      	ldrh	r1, [r0, #8]
 8020730:	4561      	cmp	r1, ip
 8020732:	d8eb      	bhi.n	802070c <uxr_reset_output_reliable_stream+0xc>
 8020734:	4b08      	ldr	r3, [pc, #32]	@ (8020758 <uxr_reset_output_reliable_stream+0x58>)
 8020736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802073a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8020750 <uxr_reset_output_reliable_stream+0x50>
 802073e:	f8c0 300e 	str.w	r3, [r0, #14]
 8020742:	2300      	movs	r3, #0
 8020744:	8242      	strh	r2, [r0, #18]
 8020746:	8403      	strh	r3, [r0, #32]
 8020748:	ed80 7b06 	vstr	d7, [r0, #24]
 802074c:	bd10      	pop	{r4, pc}
 802074e:	bf00      	nop
 8020750:	ffffffff 	.word	0xffffffff
 8020754:	7fffffff 	.word	0x7fffffff
 8020758:	ffff0000 	.word	0xffff0000

0802075c <uxr_prepare_reliable_buffer_to_write>:
 802075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020760:	4604      	mov	r4, r0
 8020762:	b091      	sub	sp, #68	@ 0x44
 8020764:	8900      	ldrh	r0, [r0, #8]
 8020766:	468b      	mov	fp, r1
 8020768:	89e6      	ldrh	r6, [r4, #14]
 802076a:	9204      	str	r2, [sp, #16]
 802076c:	6865      	ldr	r5, [r4, #4]
 802076e:	6823      	ldr	r3, [r4, #0]
 8020770:	f894 900c 	ldrb.w	r9, [r4, #12]
 8020774:	fbb6 f2f0 	udiv	r2, r6, r0
 8020778:	fbb5 f5f0 	udiv	r5, r5, r0
 802077c:	fb00 6212 	mls	r2, r0, r2, r6
 8020780:	1f2f      	subs	r7, r5, #4
 8020782:	b292      	uxth	r2, r2
 8020784:	fb05 3202 	mla	r2, r5, r2, r3
 8020788:	1d11      	adds	r1, r2, #4
 802078a:	f8d2 8000 	ldr.w	r8, [r2]
 802078e:	9103      	str	r1, [sp, #12]
 8020790:	2800      	cmp	r0, #0
 8020792:	f000 814a 	beq.w	8020a2a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8020796:	f04f 0c00 	mov.w	ip, #0
 802079a:	46e2      	mov	sl, ip
 802079c:	4661      	mov	r1, ip
 802079e:	f10c 0c01 	add.w	ip, ip, #1
 80207a2:	fbb1 f2f0 	udiv	r2, r1, r0
 80207a6:	fb00 1212 	mls	r2, r0, r2, r1
 80207aa:	fa1f f18c 	uxth.w	r1, ip
 80207ae:	b292      	uxth	r2, r2
 80207b0:	fb05 f202 	mul.w	r2, r5, r2
 80207b4:	589a      	ldr	r2, [r3, r2]
 80207b6:	454a      	cmp	r2, r9
 80207b8:	d103      	bne.n	80207c2 <uxr_prepare_reliable_buffer_to_write+0x66>
 80207ba:	f10a 0a01 	add.w	sl, sl, #1
 80207be:	fa1f fa8a 	uxth.w	sl, sl
 80207c2:	4281      	cmp	r1, r0
 80207c4:	d3eb      	bcc.n	802079e <uxr_prepare_reliable_buffer_to_write+0x42>
 80207c6:	4640      	mov	r0, r8
 80207c8:	2104      	movs	r1, #4
 80207ca:	f8cd a014 	str.w	sl, [sp, #20]
 80207ce:	f7f3 fcdf 	bl	8014190 <ucdr_alignment>
 80207d2:	4480      	add	r8, r0
 80207d4:	eb08 020b 	add.w	r2, r8, fp
 80207d8:	42ba      	cmp	r2, r7
 80207da:	f240 80ca 	bls.w	8020972 <uxr_prepare_reliable_buffer_to_write+0x216>
 80207de:	7b22      	ldrb	r2, [r4, #12]
 80207e0:	445a      	add	r2, fp
 80207e2:	42ba      	cmp	r2, r7
 80207e4:	f240 80b2 	bls.w	802094c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80207e8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80207ec:	b2bb      	uxth	r3, r7
 80207ee:	eba2 0209 	sub.w	r2, r2, r9
 80207f2:	441a      	add	r2, r3
 80207f4:	b292      	uxth	r2, r2
 80207f6:	fb0a f902 	mul.w	r9, sl, r2
 80207fa:	9205      	str	r2, [sp, #20]
 80207fc:	45d9      	cmp	r9, fp
 80207fe:	9206      	str	r2, [sp, #24]
 8020800:	f0c0 80b3 	bcc.w	802096a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020804:	f108 0204 	add.w	r2, r8, #4
 8020808:	42ba      	cmp	r2, r7
 802080a:	f080 80da 	bcs.w	80209c2 <uxr_prepare_reliable_buffer_to_write+0x266>
 802080e:	f1a3 0904 	sub.w	r9, r3, #4
 8020812:	9b05      	ldr	r3, [sp, #20]
 8020814:	eba9 0908 	sub.w	r9, r9, r8
 8020818:	fa1f f989 	uxth.w	r9, r9
 802081c:	ebab 0b09 	sub.w	fp, fp, r9
 8020820:	fbbb f2f3 	udiv	r2, fp, r3
 8020824:	fb03 b312 	mls	r3, r3, r2, fp
 8020828:	2b00      	cmp	r3, #0
 802082a:	f040 80c4 	bne.w	80209b6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 802082e:	b293      	uxth	r3, r2
 8020830:	4553      	cmp	r3, sl
 8020832:	f200 809a 	bhi.w	802096a <uxr_prepare_reliable_buffer_to_write+0x20e>
 8020836:	2b00      	cmp	r3, #0
 8020838:	f000 80f9 	beq.w	8020a2e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 802083c:	f8cd 801c 	str.w	r8, [sp, #28]
 8020840:	f04f 0a00 	mov.w	sl, #0
 8020844:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020848:	f10d 0b20 	add.w	fp, sp, #32
 802084c:	9505      	str	r5, [sp, #20]
 802084e:	461d      	mov	r5, r3
 8020850:	e000      	b.n	8020854 <uxr_prepare_reliable_buffer_to_write+0xf8>
 8020852:	46c1      	mov	r9, r8
 8020854:	8922      	ldrh	r2, [r4, #8]
 8020856:	4658      	mov	r0, fp
 8020858:	6863      	ldr	r3, [r4, #4]
 802085a:	f10a 0a01 	add.w	sl, sl, #1
 802085e:	fbb6 f1f2 	udiv	r1, r6, r2
 8020862:	fbb3 f3f2 	udiv	r3, r3, r2
 8020866:	fb02 6111 	mls	r1, r2, r1, r6
 802086a:	463a      	mov	r2, r7
 802086c:	b289      	uxth	r1, r1
 802086e:	fb03 f101 	mul.w	r1, r3, r1
 8020872:	6823      	ldr	r3, [r4, #0]
 8020874:	3104      	adds	r1, #4
 8020876:	4419      	add	r1, r3
 8020878:	2300      	movs	r3, #0
 802087a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 802087e:	f8cd c000 	str.w	ip, [sp]
 8020882:	f7f3 fc6f 	bl	8014164 <ucdr_init_buffer_origin_offset>
 8020886:	464a      	mov	r2, r9
 8020888:	2300      	movs	r3, #0
 802088a:	210d      	movs	r1, #13
 802088c:	4658      	mov	r0, fp
 802088e:	f7f8 fdb7 	bl	8019400 <uxr_buffer_submessage_header>
 8020892:	8921      	ldrh	r1, [r4, #8]
 8020894:	6863      	ldr	r3, [r4, #4]
 8020896:	4630      	mov	r0, r6
 8020898:	fbb6 f2f1 	udiv	r2, r6, r1
 802089c:	fbb3 f3f1 	udiv	r3, r3, r1
 80208a0:	fb01 6212 	mls	r2, r1, r2, r6
 80208a4:	2101      	movs	r1, #1
 80208a6:	b292      	uxth	r2, r2
 80208a8:	fb02 f303 	mul.w	r3, r2, r3
 80208ac:	6822      	ldr	r2, [r4, #0]
 80208ae:	50d7      	str	r7, [r2, r3]
 80208b0:	f000 faf6 	bl	8020ea0 <uxr_seq_num_add>
 80208b4:	4606      	mov	r6, r0
 80208b6:	fa1f f38a 	uxth.w	r3, sl
 80208ba:	429d      	cmp	r5, r3
 80208bc:	d8c9      	bhi.n	8020852 <uxr_prepare_reliable_buffer_to_write+0xf6>
 80208be:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80208c2:	9d05      	ldr	r5, [sp, #20]
 80208c4:	8920      	ldrh	r0, [r4, #8]
 80208c6:	463a      	mov	r2, r7
 80208c8:	6863      	ldr	r3, [r4, #4]
 80208ca:	fbb6 f1f0 	udiv	r1, r6, r0
 80208ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80208d2:	fb00 6111 	mls	r1, r0, r1, r6
 80208d6:	4658      	mov	r0, fp
 80208d8:	b289      	uxth	r1, r1
 80208da:	fb01 f303 	mul.w	r3, r1, r3
 80208de:	6821      	ldr	r1, [r4, #0]
 80208e0:	3304      	adds	r3, #4
 80208e2:	4419      	add	r1, r3
 80208e4:	2300      	movs	r3, #0
 80208e6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 80208ea:	9700      	str	r7, [sp, #0]
 80208ec:	f7f3 fc3a 	bl	8014164 <ucdr_init_buffer_origin_offset>
 80208f0:	9f06      	ldr	r7, [sp, #24]
 80208f2:	4658      	mov	r0, fp
 80208f4:	2302      	movs	r3, #2
 80208f6:	b2ba      	uxth	r2, r7
 80208f8:	210d      	movs	r1, #13
 80208fa:	f7f8 fd81 	bl	8019400 <uxr_buffer_submessage_header>
 80208fe:	f108 0104 	add.w	r1, r8, #4
 8020902:	9b03      	ldr	r3, [sp, #12]
 8020904:	f1a5 0208 	sub.w	r2, r5, #8
 8020908:	8925      	ldrh	r5, [r4, #8]
 802090a:	440b      	add	r3, r1
 802090c:	eba2 0208 	sub.w	r2, r2, r8
 8020910:	fbb6 f0f5 	udiv	r0, r6, r5
 8020914:	4619      	mov	r1, r3
 8020916:	6863      	ldr	r3, [r4, #4]
 8020918:	fb05 6010 	mls	r0, r5, r0, r6
 802091c:	fbb3 f3f5 	udiv	r3, r3, r5
 8020920:	b280      	uxth	r0, r0
 8020922:	6825      	ldr	r5, [r4, #0]
 8020924:	fb00 f303 	mul.w	r3, r0, r3
 8020928:	7b20      	ldrb	r0, [r4, #12]
 802092a:	3004      	adds	r0, #4
 802092c:	4438      	add	r0, r7
 802092e:	50e8      	str	r0, [r5, r3]
 8020930:	9d04      	ldr	r5, [sp, #16]
 8020932:	4628      	mov	r0, r5
 8020934:	f7f3 fc28 	bl	8014188 <ucdr_init_buffer>
 8020938:	4628      	mov	r0, r5
 802093a:	4622      	mov	r2, r4
 802093c:	493d      	ldr	r1, [pc, #244]	@ (8020a34 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 802093e:	f7f3 fbf7 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 8020942:	2001      	movs	r0, #1
 8020944:	81e6      	strh	r6, [r4, #14]
 8020946:	b011      	add	sp, #68	@ 0x44
 8020948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802094c:	2101      	movs	r1, #1
 802094e:	89e0      	ldrh	r0, [r4, #14]
 8020950:	f000 faa6 	bl	8020ea0 <uxr_seq_num_add>
 8020954:	4605      	mov	r5, r0
 8020956:	8921      	ldrh	r1, [r4, #8]
 8020958:	8a60      	ldrh	r0, [r4, #18]
 802095a:	f000 faa1 	bl	8020ea0 <uxr_seq_num_add>
 802095e:	4601      	mov	r1, r0
 8020960:	4628      	mov	r0, r5
 8020962:	f000 faa5 	bl	8020eb0 <uxr_seq_num_cmp>
 8020966:	2800      	cmp	r0, #0
 8020968:	dd44      	ble.n	80209f4 <uxr_prepare_reliable_buffer_to_write+0x298>
 802096a:	2000      	movs	r0, #0
 802096c:	b011      	add	sp, #68	@ 0x44
 802096e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020972:	8921      	ldrh	r1, [r4, #8]
 8020974:	8a60      	ldrh	r0, [r4, #18]
 8020976:	9205      	str	r2, [sp, #20]
 8020978:	f000 fa92 	bl	8020ea0 <uxr_seq_num_add>
 802097c:	4601      	mov	r1, r0
 802097e:	4630      	mov	r0, r6
 8020980:	f000 fa96 	bl	8020eb0 <uxr_seq_num_cmp>
 8020984:	2800      	cmp	r0, #0
 8020986:	9a05      	ldr	r2, [sp, #20]
 8020988:	dcef      	bgt.n	802096a <uxr_prepare_reliable_buffer_to_write+0x20e>
 802098a:	8925      	ldrh	r5, [r4, #8]
 802098c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8020990:	fbb6 f4f5 	udiv	r4, r6, r5
 8020994:	fbb3 f3f5 	udiv	r3, r3, r5
 8020998:	fb05 6414 	mls	r4, r5, r4, r6
 802099c:	b2a4      	uxth	r4, r4
 802099e:	fb04 f303 	mul.w	r3, r4, r3
 80209a2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80209a6:	50fa      	str	r2, [r7, r3]
 80209a8:	2300      	movs	r3, #0
 80209aa:	f8cd 8000 	str.w	r8, [sp]
 80209ae:	f7f3 fbd9 	bl	8014164 <ucdr_init_buffer_origin_offset>
 80209b2:	2001      	movs	r0, #1
 80209b4:	e7da      	b.n	802096c <uxr_prepare_reliable_buffer_to_write+0x210>
 80209b6:	3201      	adds	r2, #1
 80209b8:	9306      	str	r3, [sp, #24]
 80209ba:	b293      	uxth	r3, r2
 80209bc:	4553      	cmp	r3, sl
 80209be:	d8d4      	bhi.n	802096a <uxr_prepare_reliable_buffer_to_write+0x20e>
 80209c0:	e739      	b.n	8020836 <uxr_prepare_reliable_buffer_to_write+0xda>
 80209c2:	4630      	mov	r0, r6
 80209c4:	2101      	movs	r1, #1
 80209c6:	9307      	str	r3, [sp, #28]
 80209c8:	f000 fa6a 	bl	8020ea0 <uxr_seq_num_add>
 80209cc:	4606      	mov	r6, r0
 80209ce:	8920      	ldrh	r0, [r4, #8]
 80209d0:	6862      	ldr	r2, [r4, #4]
 80209d2:	fbb6 f1f0 	udiv	r1, r6, r0
 80209d6:	fbb2 f2f0 	udiv	r2, r2, r0
 80209da:	fb00 6111 	mls	r1, r0, r1, r6
 80209de:	b289      	uxth	r1, r1
 80209e0:	fb01 f202 	mul.w	r2, r1, r2
 80209e4:	6821      	ldr	r1, [r4, #0]
 80209e6:	3204      	adds	r2, #4
 80209e8:	188b      	adds	r3, r1, r2
 80209ea:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80209ee:	9303      	str	r3, [sp, #12]
 80209f0:	9b07      	ldr	r3, [sp, #28]
 80209f2:	e70c      	b.n	802080e <uxr_prepare_reliable_buffer_to_write+0xb2>
 80209f4:	8921      	ldrh	r1, [r4, #8]
 80209f6:	6863      	ldr	r3, [r4, #4]
 80209f8:	9804      	ldr	r0, [sp, #16]
 80209fa:	fbb5 f2f1 	udiv	r2, r5, r1
 80209fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8020a02:	fb01 5212 	mls	r2, r1, r2, r5
 8020a06:	6821      	ldr	r1, [r4, #0]
 8020a08:	b292      	uxth	r2, r2
 8020a0a:	fb02 f303 	mul.w	r3, r2, r3
 8020a0e:	7b22      	ldrb	r2, [r4, #12]
 8020a10:	3304      	adds	r3, #4
 8020a12:	445a      	add	r2, fp
 8020a14:	4419      	add	r1, r3
 8020a16:	f841 2c04 	str.w	r2, [r1, #-4]
 8020a1a:	7b23      	ldrb	r3, [r4, #12]
 8020a1c:	9300      	str	r3, [sp, #0]
 8020a1e:	2300      	movs	r3, #0
 8020a20:	f7f3 fba0 	bl	8014164 <ucdr_init_buffer_origin_offset>
 8020a24:	2001      	movs	r0, #1
 8020a26:	81e5      	strh	r5, [r4, #14]
 8020a28:	e7a0      	b.n	802096c <uxr_prepare_reliable_buffer_to_write+0x210>
 8020a2a:	4682      	mov	sl, r0
 8020a2c:	e6cb      	b.n	80207c6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8020a2e:	f10d 0b20 	add.w	fp, sp, #32
 8020a32:	e747      	b.n	80208c4 <uxr_prepare_reliable_buffer_to_write+0x168>
 8020a34:	08020635 	.word	0x08020635

08020a38 <uxr_prepare_next_reliable_buffer_to_send>:
 8020a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a3a:	4604      	mov	r4, r0
 8020a3c:	461d      	mov	r5, r3
 8020a3e:	460f      	mov	r7, r1
 8020a40:	8a00      	ldrh	r0, [r0, #16]
 8020a42:	2101      	movs	r1, #1
 8020a44:	4616      	mov	r6, r2
 8020a46:	f000 fa2b 	bl	8020ea0 <uxr_seq_num_add>
 8020a4a:	8028      	strh	r0, [r5, #0]
 8020a4c:	8922      	ldrh	r2, [r4, #8]
 8020a4e:	6863      	ldr	r3, [r4, #4]
 8020a50:	fbb0 f1f2 	udiv	r1, r0, r2
 8020a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8020a58:	fb02 0c11 	mls	ip, r2, r1, r0
 8020a5c:	89e1      	ldrh	r1, [r4, #14]
 8020a5e:	fa1f fc8c 	uxth.w	ip, ip
 8020a62:	fb0c fc03 	mul.w	ip, ip, r3
 8020a66:	6823      	ldr	r3, [r4, #0]
 8020a68:	f10c 0c04 	add.w	ip, ip, #4
 8020a6c:	4463      	add	r3, ip
 8020a6e:	603b      	str	r3, [r7, #0]
 8020a70:	6823      	ldr	r3, [r4, #0]
 8020a72:	449c      	add	ip, r3
 8020a74:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8020a78:	6033      	str	r3, [r6, #0]
 8020a7a:	f000 fa19 	bl	8020eb0 <uxr_seq_num_cmp>
 8020a7e:	2800      	cmp	r0, #0
 8020a80:	dd01      	ble.n	8020a86 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8020a82:	2000      	movs	r0, #0
 8020a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a86:	7b23      	ldrb	r3, [r4, #12]
 8020a88:	6832      	ldr	r2, [r6, #0]
 8020a8a:	429a      	cmp	r2, r3
 8020a8c:	d9f9      	bls.n	8020a82 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020a8e:	8a61      	ldrh	r1, [r4, #18]
 8020a90:	8a20      	ldrh	r0, [r4, #16]
 8020a92:	f000 fa09 	bl	8020ea8 <uxr_seq_num_sub>
 8020a96:	8923      	ldrh	r3, [r4, #8]
 8020a98:	4283      	cmp	r3, r0
 8020a9a:	d0f2      	beq.n	8020a82 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8020a9c:	8828      	ldrh	r0, [r5, #0]
 8020a9e:	89e3      	ldrh	r3, [r4, #14]
 8020aa0:	8220      	strh	r0, [r4, #16]
 8020aa2:	4298      	cmp	r0, r3
 8020aa4:	d001      	beq.n	8020aaa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8020aa6:	2001      	movs	r0, #1
 8020aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020aaa:	2101      	movs	r1, #1
 8020aac:	f000 f9f8 	bl	8020ea0 <uxr_seq_num_add>
 8020ab0:	4603      	mov	r3, r0
 8020ab2:	2001      	movs	r0, #1
 8020ab4:	81e3      	strh	r3, [r4, #14]
 8020ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020ab8 <uxr_update_output_stream_heartbeat_timestamp>:
 8020ab8:	b570      	push	{r4, r5, r6, lr}
 8020aba:	8a01      	ldrh	r1, [r0, #16]
 8020abc:	4604      	mov	r4, r0
 8020abe:	8a40      	ldrh	r0, [r0, #18]
 8020ac0:	4615      	mov	r5, r2
 8020ac2:	461e      	mov	r6, r3
 8020ac4:	f000 f9f4 	bl	8020eb0 <uxr_seq_num_cmp>
 8020ac8:	2800      	cmp	r0, #0
 8020aca:	db07      	blt.n	8020adc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8020acc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020ad0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8020ad4:	2000      	movs	r0, #0
 8020ad6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8020ada:	bd70      	pop	{r4, r5, r6, pc}
 8020adc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8020ae0:	b940      	cbnz	r0, 8020af4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8020ae2:	2301      	movs	r3, #1
 8020ae4:	f884 3020 	strb.w	r3, [r4, #32]
 8020ae8:	3564      	adds	r5, #100	@ 0x64
 8020aea:	f146 0600 	adc.w	r6, r6, #0
 8020aee:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8020af2:	bd70      	pop	{r4, r5, r6, pc}
 8020af4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8020af8:	4295      	cmp	r5, r2
 8020afa:	eb76 0303 	sbcs.w	r3, r6, r3
 8020afe:	db04      	blt.n	8020b0a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8020b00:	1c43      	adds	r3, r0, #1
 8020b02:	2001      	movs	r0, #1
 8020b04:	f884 3020 	strb.w	r3, [r4, #32]
 8020b08:	e7ee      	b.n	8020ae8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020b0a:	2000      	movs	r0, #0
 8020b0c:	e7ec      	b.n	8020ae8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8020b0e:	bf00      	nop

08020b10 <uxr_begin_output_nack_buffer_it>:
 8020b10:	8a40      	ldrh	r0, [r0, #18]
 8020b12:	4770      	bx	lr

08020b14 <uxr_next_reliable_nack_buffer_to_send>:
 8020b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b18:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 8020b1c:	b197      	cbz	r7, 8020b44 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8020b1e:	4680      	mov	r8, r0
 8020b20:	460d      	mov	r5, r1
 8020b22:	4616      	mov	r6, r2
 8020b24:	461c      	mov	r4, r3
 8020b26:	8818      	ldrh	r0, [r3, #0]
 8020b28:	2101      	movs	r1, #1
 8020b2a:	f000 f9b9 	bl	8020ea0 <uxr_seq_num_add>
 8020b2e:	8020      	strh	r0, [r4, #0]
 8020b30:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8020b34:	f000 f9bc 	bl	8020eb0 <uxr_seq_num_cmp>
 8020b38:	2800      	cmp	r0, #0
 8020b3a:	dd06      	ble.n	8020b4a <uxr_next_reliable_nack_buffer_to_send+0x36>
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	461f      	mov	r7, r3
 8020b40:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 8020b44:	4638      	mov	r0, r7
 8020b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b4a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8020b4e:	8820      	ldrh	r0, [r4, #0]
 8020b50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020b54:	fbb0 f3f2 	udiv	r3, r0, r2
 8020b58:	fbb1 fcf2 	udiv	ip, r1, r2
 8020b5c:	fb02 0313 	mls	r3, r2, r3, r0
 8020b60:	b29b      	uxth	r3, r3
 8020b62:	fb03 fc0c 	mul.w	ip, r3, ip
 8020b66:	f8d8 3000 	ldr.w	r3, [r8]
 8020b6a:	f10c 0c04 	add.w	ip, ip, #4
 8020b6e:	4463      	add	r3, ip
 8020b70:	602b      	str	r3, [r5, #0]
 8020b72:	f8d8 3000 	ldr.w	r3, [r8]
 8020b76:	4463      	add	r3, ip
 8020b78:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020b7c:	6033      	str	r3, [r6, #0]
 8020b7e:	f898 200c 	ldrb.w	r2, [r8, #12]
 8020b82:	429a      	cmp	r2, r3
 8020b84:	d0d0      	beq.n	8020b28 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8020b86:	e7dd      	b.n	8020b44 <uxr_next_reliable_nack_buffer_to_send+0x30>

08020b88 <uxr_process_acknack>:
 8020b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b8a:	4604      	mov	r4, r0
 8020b8c:	460e      	mov	r6, r1
 8020b8e:	4610      	mov	r0, r2
 8020b90:	2101      	movs	r1, #1
 8020b92:	f000 f989 	bl	8020ea8 <uxr_seq_num_sub>
 8020b96:	8a61      	ldrh	r1, [r4, #18]
 8020b98:	f000 f986 	bl	8020ea8 <uxr_seq_num_sub>
 8020b9c:	b1c8      	cbz	r0, 8020bd2 <uxr_process_acknack+0x4a>
 8020b9e:	4605      	mov	r5, r0
 8020ba0:	2700      	movs	r7, #0
 8020ba2:	2101      	movs	r1, #1
 8020ba4:	8a60      	ldrh	r0, [r4, #18]
 8020ba6:	f000 f97b 	bl	8020ea0 <uxr_seq_num_add>
 8020baa:	8923      	ldrh	r3, [r4, #8]
 8020bac:	6862      	ldr	r2, [r4, #4]
 8020bae:	3701      	adds	r7, #1
 8020bb0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8020bb4:	6821      	ldr	r1, [r4, #0]
 8020bb6:	42bd      	cmp	r5, r7
 8020bb8:	8260      	strh	r0, [r4, #18]
 8020bba:	fbb0 fef3 	udiv	lr, r0, r3
 8020bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8020bc2:	fb03 031e 	mls	r3, r3, lr, r0
 8020bc6:	b29b      	uxth	r3, r3
 8020bc8:	fb02 f303 	mul.w	r3, r2, r3
 8020bcc:	f841 c003 	str.w	ip, [r1, r3]
 8020bd0:	d1e7      	bne.n	8020ba2 <uxr_process_acknack+0x1a>
 8020bd2:	3e00      	subs	r6, #0
 8020bd4:	f04f 0300 	mov.w	r3, #0
 8020bd8:	bf18      	it	ne
 8020bda:	2601      	movne	r6, #1
 8020bdc:	f884 3020 	strb.w	r3, [r4, #32]
 8020be0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8020be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020be6:	bf00      	nop

08020be8 <uxr_is_output_up_to_date>:
 8020be8:	8a01      	ldrh	r1, [r0, #16]
 8020bea:	8a40      	ldrh	r0, [r0, #18]
 8020bec:	b508      	push	{r3, lr}
 8020bee:	f000 f95f 	bl	8020eb0 <uxr_seq_num_cmp>
 8020bf2:	fab0 f080 	clz	r0, r0
 8020bf6:	0940      	lsrs	r0, r0, #5
 8020bf8:	bd08      	pop	{r3, pc}
 8020bfa:	bf00      	nop

08020bfc <get_available_free_slots>:
 8020bfc:	8901      	ldrh	r1, [r0, #8]
 8020bfe:	b1e1      	cbz	r1, 8020c3a <get_available_free_slots+0x3e>
 8020c00:	6843      	ldr	r3, [r0, #4]
 8020c02:	f04f 0c00 	mov.w	ip, #0
 8020c06:	b530      	push	{r4, r5, lr}
 8020c08:	fbb3 fef1 	udiv	lr, r3, r1
 8020c0c:	6805      	ldr	r5, [r0, #0]
 8020c0e:	4662      	mov	r2, ip
 8020c10:	7b04      	ldrb	r4, [r0, #12]
 8020c12:	4660      	mov	r0, ip
 8020c14:	f10c 0c01 	add.w	ip, ip, #1
 8020c18:	fbb2 f3f1 	udiv	r3, r2, r1
 8020c1c:	fb01 2313 	mls	r3, r1, r3, r2
 8020c20:	fa1f f28c 	uxth.w	r2, ip
 8020c24:	b29b      	uxth	r3, r3
 8020c26:	fb0e f303 	mul.w	r3, lr, r3
 8020c2a:	58eb      	ldr	r3, [r5, r3]
 8020c2c:	429c      	cmp	r4, r3
 8020c2e:	d101      	bne.n	8020c34 <get_available_free_slots+0x38>
 8020c30:	3001      	adds	r0, #1
 8020c32:	b280      	uxth	r0, r0
 8020c34:	428a      	cmp	r2, r1
 8020c36:	d3ed      	bcc.n	8020c14 <get_available_free_slots+0x18>
 8020c38:	bd30      	pop	{r4, r5, pc}
 8020c3a:	4608      	mov	r0, r1
 8020c3c:	4770      	bx	lr
 8020c3e:	bf00      	nop

08020c40 <uxr_buffer_request_data>:
 8020c40:	b530      	push	{r4, r5, lr}
 8020c42:	b095      	sub	sp, #84	@ 0x54
 8020c44:	4604      	mov	r4, r0
 8020c46:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8020c48:	9303      	str	r3, [sp, #12]
 8020c4a:	2d00      	cmp	r5, #0
 8020c4c:	f88d 301c 	strb.w	r3, [sp, #28]
 8020c50:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8020c54:	f04f 0200 	mov.w	r2, #0
 8020c58:	bf14      	ite	ne
 8020c5a:	2101      	movne	r1, #1
 8020c5c:	4611      	moveq	r1, r2
 8020c5e:	f88d 201d 	strb.w	r2, [sp, #29]
 8020c62:	f88d 201e 	strb.w	r2, [sp, #30]
 8020c66:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8020c6a:	d021      	beq.n	8020cb0 <uxr_buffer_request_data+0x70>
 8020c6c:	686b      	ldr	r3, [r5, #4]
 8020c6e:	2210      	movs	r2, #16
 8020c70:	6829      	ldr	r1, [r5, #0]
 8020c72:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020c76:	f8cd 1026 	str.w	r1, [sp, #38]	@ 0x26
 8020c7a:	2308      	movs	r3, #8
 8020c7c:	2100      	movs	r1, #0
 8020c7e:	4620      	mov	r0, r4
 8020c80:	e9cd 3100 	strd	r3, r1, [sp]
 8020c84:	ab0c      	add	r3, sp, #48	@ 0x30
 8020c86:	9905      	ldr	r1, [sp, #20]
 8020c88:	f7f7 fc92 	bl	80185b0 <uxr_prepare_stream_to_write_submessage>
 8020c8c:	b918      	cbnz	r0, 8020c96 <uxr_buffer_request_data+0x56>
 8020c8e:	4604      	mov	r4, r0
 8020c90:	4620      	mov	r0, r4
 8020c92:	b015      	add	sp, #84	@ 0x54
 8020c94:	bd30      	pop	{r4, r5, pc}
 8020c96:	9904      	ldr	r1, [sp, #16]
 8020c98:	aa06      	add	r2, sp, #24
 8020c9a:	4620      	mov	r0, r4
 8020c9c:	f7f7 fdc4 	bl	8018828 <uxr_init_base_object_request>
 8020ca0:	4604      	mov	r4, r0
 8020ca2:	a906      	add	r1, sp, #24
 8020ca4:	a80c      	add	r0, sp, #48	@ 0x30
 8020ca6:	f7f9 fd89 	bl	801a7bc <uxr_serialize_READ_DATA_Payload>
 8020caa:	4620      	mov	r0, r4
 8020cac:	b015      	add	sp, #84	@ 0x54
 8020cae:	bd30      	pop	{r4, r5, pc}
 8020cb0:	2208      	movs	r2, #8
 8020cb2:	e7e2      	b.n	8020c7a <uxr_buffer_request_data+0x3a>

08020cb4 <uxr_buffer_cancel_data>:
 8020cb4:	b510      	push	{r4, lr}
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	b094      	sub	sp, #80	@ 0x50
 8020cba:	4604      	mov	r4, r0
 8020cbc:	9205      	str	r2, [sp, #20]
 8020cbe:	9301      	str	r3, [sp, #4]
 8020cc0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020cc4:	f88d 301e 	strb.w	r3, [sp, #30]
 8020cc8:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8020ccc:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8020cd0:	2308      	movs	r3, #8
 8020cd2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8020cd6:	2201      	movs	r2, #1
 8020cd8:	9300      	str	r3, [sp, #0]
 8020cda:	ab0c      	add	r3, sp, #48	@ 0x30
 8020cdc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8020ce0:	2210      	movs	r2, #16
 8020ce2:	f7f7 fc65 	bl	80185b0 <uxr_prepare_stream_to_write_submessage>
 8020ce6:	b918      	cbnz	r0, 8020cf0 <uxr_buffer_cancel_data+0x3c>
 8020ce8:	4604      	mov	r4, r0
 8020cea:	4620      	mov	r0, r4
 8020cec:	b014      	add	sp, #80	@ 0x50
 8020cee:	bd10      	pop	{r4, pc}
 8020cf0:	9905      	ldr	r1, [sp, #20]
 8020cf2:	aa06      	add	r2, sp, #24
 8020cf4:	4620      	mov	r0, r4
 8020cf6:	f7f7 fd97 	bl	8018828 <uxr_init_base_object_request>
 8020cfa:	4604      	mov	r4, r0
 8020cfc:	a906      	add	r1, sp, #24
 8020cfe:	a80c      	add	r0, sp, #48	@ 0x30
 8020d00:	f7f9 fd5c 	bl	801a7bc <uxr_serialize_READ_DATA_Payload>
 8020d04:	4620      	mov	r0, r4
 8020d06:	b014      	add	sp, #80	@ 0x50
 8020d08:	bd10      	pop	{r4, pc}
 8020d0a:	bf00      	nop

08020d0c <read_submessage_format>:
 8020d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020d10:	b095      	sub	sp, #84	@ 0x54
 8020d12:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8020d16:	b113      	cbz	r3, 8020d1e <read_submessage_format+0x12>
 8020d18:	b015      	add	sp, #84	@ 0x54
 8020d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d1e:	4606      	mov	r6, r0
 8020d20:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8020d22:	460c      	mov	r4, r1
 8020d24:	4615      	mov	r5, r2
 8020d26:	9004      	str	r0, [sp, #16]
 8020d28:	4699      	mov	r9, r3
 8020d2a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020d2c:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8020d30:	9005      	str	r0, [sp, #20]
 8020d32:	a80c      	add	r0, sp, #48	@ 0x30
 8020d34:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8020d38:	1a52      	subs	r2, r2, r1
 8020d3a:	f7f3 fa25 	bl	8014188 <ucdr_init_buffer>
 8020d3e:	a80c      	add	r0, sp, #48	@ 0x30
 8020d40:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020d44:	f7f3 f9f4 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 8020d48:	69e2      	ldr	r2, [r4, #28]
 8020d4a:	b19a      	cbz	r2, 8020d74 <read_submessage_format+0x68>
 8020d4c:	f1b8 0f07 	cmp.w	r8, #7
 8020d50:	f882 9014 	strb.w	r9, [r2, #20]
 8020d54:	d040      	beq.n	8020dd8 <read_submessage_format+0xcc>
 8020d56:	f1b8 0f08 	cmp.w	r8, #8
 8020d5a:	d02e      	beq.n	8020dba <read_submessage_format+0xae>
 8020d5c:	f1b8 0f06 	cmp.w	r8, #6
 8020d60:	d011      	beq.n	8020d86 <read_submessage_format+0x7a>
 8020d62:	2301      	movs	r3, #1
 8020d64:	7513      	strb	r3, [r2, #20]
 8020d66:	4629      	mov	r1, r5
 8020d68:	4620      	mov	r0, r4
 8020d6a:	f7f3 fa61 	bl	8014230 <ucdr_advance_buffer>
 8020d6e:	b015      	add	sp, #84	@ 0x54
 8020d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d74:	f1b8 0f07 	cmp.w	r8, #7
 8020d78:	d02e      	beq.n	8020dd8 <read_submessage_format+0xcc>
 8020d7a:	f1b8 0f08 	cmp.w	r8, #8
 8020d7e:	d01c      	beq.n	8020dba <read_submessage_format+0xae>
 8020d80:	f1b8 0f06 	cmp.w	r8, #6
 8020d84:	d1ef      	bne.n	8020d66 <read_submessage_format+0x5a>
 8020d86:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8020d8a:	f1b8 0f00 	cmp.w	r8, #0
 8020d8e:	d011      	beq.n	8020db4 <read_submessage_format+0xa8>
 8020d90:	ab0c      	add	r3, sp, #48	@ 0x30
 8020d92:	9501      	str	r5, [sp, #4]
 8020d94:	463a      	mov	r2, r7
 8020d96:	4630      	mov	r0, r6
 8020d98:	9300      	str	r3, [sp, #0]
 8020d9a:	2306      	movs	r3, #6
 8020d9c:	f88d 3016 	strb.w	r3, [sp, #22]
 8020da0:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8020da4:	9302      	str	r3, [sp, #8]
 8020da6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8020daa:	47c0      	blx	r8
 8020dac:	2301      	movs	r3, #1
 8020dae:	69e2      	ldr	r2, [r4, #28]
 8020db0:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020db4:	2a00      	cmp	r2, #0
 8020db6:	d1d4      	bne.n	8020d62 <read_submessage_format+0x56>
 8020db8:	e7d5      	b.n	8020d66 <read_submessage_format+0x5a>
 8020dba:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8020dbe:	2b00      	cmp	r3, #0
 8020dc0:	d0f8      	beq.n	8020db4 <read_submessage_format+0xa8>
 8020dc2:	a80c      	add	r0, sp, #48	@ 0x30
 8020dc4:	a906      	add	r1, sp, #24
 8020dc6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020dca:	f7f9 fdd1 	bl	801a970 <uxr_deserialize_SampleIdentity>
 8020dce:	b9a0      	cbnz	r0, 8020dfa <read_submessage_format+0xee>
 8020dd0:	69e2      	ldr	r2, [r4, #28]
 8020dd2:	2a00      	cmp	r2, #0
 8020dd4:	d1c5      	bne.n	8020d62 <read_submessage_format+0x56>
 8020dd6:	e7c6      	b.n	8020d66 <read_submessage_format+0x5a>
 8020dd8:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8020ddc:	b13b      	cbz	r3, 8020dee <read_submessage_format+0xe2>
 8020dde:	a906      	add	r1, sp, #24
 8020de0:	a80c      	add	r0, sp, #48	@ 0x30
 8020de2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8020de6:	f7f9 fa73 	bl	801a2d0 <uxr_deserialize_BaseObjectRequest>
 8020dea:	bb60      	cbnz	r0, 8020e46 <read_submessage_format+0x13a>
 8020dec:	69e2      	ldr	r2, [r4, #28]
 8020dee:	68a3      	ldr	r3, [r4, #8]
 8020df0:	442b      	add	r3, r5
 8020df2:	60a3      	str	r3, [r4, #8]
 8020df4:	2a00      	cmp	r2, #0
 8020df6:	d1b4      	bne.n	8020d62 <read_submessage_format+0x56>
 8020df8:	e7b5      	b.n	8020d66 <read_submessage_format+0x5a>
 8020dfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020dfc:	a80c      	add	r0, sp, #48	@ 0x30
 8020dfe:	eba8 0803 	sub.w	r8, r8, r3
 8020e02:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020e06:	44a8      	add	r8, r5
 8020e08:	1a52      	subs	r2, r2, r1
 8020e0a:	f7f3 f9bd 	bl	8014188 <ucdr_init_buffer>
 8020e0e:	a80c      	add	r0, sp, #48	@ 0x30
 8020e10:	fa1f f888 	uxth.w	r8, r8
 8020e14:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020e18:	f7f3 f98a 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 8020e1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8020e1e:	2108      	movs	r1, #8
 8020e20:	f8cd 8004 	str.w	r8, [sp, #4]
 8020e24:	9300      	str	r3, [sp, #0]
 8020e26:	463a      	mov	r2, r7
 8020e28:	f88d 1016 	strb.w	r1, [sp, #22]
 8020e2c:	ab06      	add	r3, sp, #24
 8020e2e:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8020e32:	4630      	mov	r0, r6
 8020e34:	9102      	str	r1, [sp, #8]
 8020e36:	9905      	ldr	r1, [sp, #20]
 8020e38:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8020e3c:	47b8      	blx	r7
 8020e3e:	2301      	movs	r3, #1
 8020e40:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020e44:	e7c4      	b.n	8020dd0 <read_submessage_format+0xc4>
 8020e46:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8020e4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e4c:	a80c      	add	r0, sp, #48	@ 0x30
 8020e4e:	1a52      	subs	r2, r2, r1
 8020e50:	eba8 0803 	sub.w	r8, r8, r3
 8020e54:	f7f3 f998 	bl	8014188 <ucdr_init_buffer>
 8020e58:	a80c      	add	r0, sp, #48	@ 0x30
 8020e5a:	44a8      	add	r8, r5
 8020e5c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8020e60:	f7f3 f966 	bl	8014130 <ucdr_set_on_full_buffer_callback>
 8020e64:	ab0c      	add	r3, sp, #48	@ 0x30
 8020e66:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8020e6a:	fa1f f888 	uxth.w	r8, r8
 8020e6e:	9300      	str	r3, [sp, #0]
 8020e70:	463a      	mov	r2, r7
 8020e72:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8020e76:	4630      	mov	r0, r6
 8020e78:	f8cd 8004 	str.w	r8, [sp, #4]
 8020e7c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8020e80:	2107      	movs	r1, #7
 8020e82:	f88d 1016 	strb.w	r1, [sp, #22]
 8020e86:	b29b      	uxth	r3, r3
 8020e88:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8020e8c:	9102      	str	r1, [sp, #8]
 8020e8e:	9905      	ldr	r1, [sp, #20]
 8020e90:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8020e94:	47b8      	blx	r7
 8020e96:	2301      	movs	r3, #1
 8020e98:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8020e9c:	e7a6      	b.n	8020dec <read_submessage_format+0xe0>
 8020e9e:	bf00      	nop

08020ea0 <uxr_seq_num_add>:
 8020ea0:	4408      	add	r0, r1
 8020ea2:	b280      	uxth	r0, r0
 8020ea4:	4770      	bx	lr
 8020ea6:	bf00      	nop

08020ea8 <uxr_seq_num_sub>:
 8020ea8:	1a40      	subs	r0, r0, r1
 8020eaa:	b280      	uxth	r0, r0
 8020eac:	4770      	bx	lr
 8020eae:	bf00      	nop

08020eb0 <uxr_seq_num_cmp>:
 8020eb0:	4288      	cmp	r0, r1
 8020eb2:	d011      	beq.n	8020ed8 <uxr_seq_num_cmp+0x28>
 8020eb4:	d309      	bcc.n	8020eca <uxr_seq_num_cmp+0x1a>
 8020eb6:	4288      	cmp	r0, r1
 8020eb8:	d910      	bls.n	8020edc <uxr_seq_num_cmp+0x2c>
 8020eba:	1a40      	subs	r0, r0, r1
 8020ebc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8020ec0:	bfd4      	ite	le
 8020ec2:	2001      	movle	r0, #1
 8020ec4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8020ec8:	4770      	bx	lr
 8020eca:	1a0b      	subs	r3, r1, r0
 8020ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020ed0:	daf1      	bge.n	8020eb6 <uxr_seq_num_cmp+0x6>
 8020ed2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020ed6:	4770      	bx	lr
 8020ed8:	2000      	movs	r0, #0
 8020eda:	4770      	bx	lr
 8020edc:	2001      	movs	r0, #1
 8020ede:	4770      	bx	lr

08020ee0 <rcl_get_default_domain_id>:
 8020ee0:	b530      	push	{r4, r5, lr}
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	b083      	sub	sp, #12
 8020ee6:	9300      	str	r3, [sp, #0]
 8020ee8:	b1d0      	cbz	r0, 8020f20 <rcl_get_default_domain_id+0x40>
 8020eea:	4604      	mov	r4, r0
 8020eec:	4669      	mov	r1, sp
 8020eee:	4815      	ldr	r0, [pc, #84]	@ (8020f44 <rcl_get_default_domain_id+0x64>)
 8020ef0:	f7fc feda 	bl	801dca8 <rcutils_get_env>
 8020ef4:	4602      	mov	r2, r0
 8020ef6:	b110      	cbz	r0, 8020efe <rcl_get_default_domain_id+0x1e>
 8020ef8:	2001      	movs	r0, #1
 8020efa:	b003      	add	sp, #12
 8020efc:	bd30      	pop	{r4, r5, pc}
 8020efe:	9b00      	ldr	r3, [sp, #0]
 8020f00:	b18b      	cbz	r3, 8020f26 <rcl_get_default_domain_id+0x46>
 8020f02:	7818      	ldrb	r0, [r3, #0]
 8020f04:	2800      	cmp	r0, #0
 8020f06:	d0f8      	beq.n	8020efa <rcl_get_default_domain_id+0x1a>
 8020f08:	a901      	add	r1, sp, #4
 8020f0a:	4618      	mov	r0, r3
 8020f0c:	9201      	str	r2, [sp, #4]
 8020f0e:	f000 ff4b 	bl	8021da8 <strtoul>
 8020f12:	4605      	mov	r5, r0
 8020f14:	b150      	cbz	r0, 8020f2c <rcl_get_default_domain_id+0x4c>
 8020f16:	1c43      	adds	r3, r0, #1
 8020f18:	d00d      	beq.n	8020f36 <rcl_get_default_domain_id+0x56>
 8020f1a:	2000      	movs	r0, #0
 8020f1c:	6025      	str	r5, [r4, #0]
 8020f1e:	e7ec      	b.n	8020efa <rcl_get_default_domain_id+0x1a>
 8020f20:	200b      	movs	r0, #11
 8020f22:	b003      	add	sp, #12
 8020f24:	bd30      	pop	{r4, r5, pc}
 8020f26:	4618      	mov	r0, r3
 8020f28:	b003      	add	sp, #12
 8020f2a:	bd30      	pop	{r4, r5, pc}
 8020f2c:	9b01      	ldr	r3, [sp, #4]
 8020f2e:	781b      	ldrb	r3, [r3, #0]
 8020f30:	2b00      	cmp	r3, #0
 8020f32:	d0f2      	beq.n	8020f1a <rcl_get_default_domain_id+0x3a>
 8020f34:	e7e0      	b.n	8020ef8 <rcl_get_default_domain_id+0x18>
 8020f36:	f001 fab5 	bl	80224a4 <__errno>
 8020f3a:	6803      	ldr	r3, [r0, #0]
 8020f3c:	2b22      	cmp	r3, #34	@ 0x22
 8020f3e:	d1ec      	bne.n	8020f1a <rcl_get_default_domain_id+0x3a>
 8020f40:	e7da      	b.n	8020ef8 <rcl_get_default_domain_id+0x18>
 8020f42:	bf00      	nop
 8020f44:	080259fc 	.word	0x080259fc

08020f48 <rcl_expand_topic_name>:
 8020f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f4c:	b08d      	sub	sp, #52	@ 0x34
 8020f4e:	4698      	mov	r8, r3
 8020f50:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020f52:	9207      	str	r2, [sp, #28]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	bf18      	it	ne
 8020f58:	f1b8 0f00 	cmpne.w	r8, #0
 8020f5c:	bf0c      	ite	eq
 8020f5e:	2301      	moveq	r3, #1
 8020f60:	2300      	movne	r3, #0
 8020f62:	2a00      	cmp	r2, #0
 8020f64:	bf08      	it	eq
 8020f66:	f043 0301 	orreq.w	r3, r3, #1
 8020f6a:	2900      	cmp	r1, #0
 8020f6c:	bf08      	it	eq
 8020f6e:	f043 0301 	orreq.w	r3, r3, #1
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	d13d      	bne.n	8020ff2 <rcl_expand_topic_name+0xaa>
 8020f76:	fab0 f280 	clz	r2, r0
 8020f7a:	4604      	mov	r4, r0
 8020f7c:	0952      	lsrs	r2, r2, #5
 8020f7e:	2800      	cmp	r0, #0
 8020f80:	d037      	beq.n	8020ff2 <rcl_expand_topic_name+0xaa>
 8020f82:	460f      	mov	r7, r1
 8020f84:	a90b      	add	r1, sp, #44	@ 0x2c
 8020f86:	f000 fa51 	bl	802142c <rcl_validate_topic_name>
 8020f8a:	4605      	mov	r5, r0
 8020f8c:	bb68      	cbnz	r0, 8020fea <rcl_expand_topic_name+0xa2>
 8020f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	d137      	bne.n	8021004 <rcl_expand_topic_name+0xbc>
 8020f94:	4602      	mov	r2, r0
 8020f96:	a90b      	add	r1, sp, #44	@ 0x2c
 8020f98:	4638      	mov	r0, r7
 8020f9a:	f7fd fb1b 	bl	801e5d4 <rmw_validate_node_name>
 8020f9e:	bb68      	cbnz	r0, 8020ffc <rcl_expand_topic_name+0xb4>
 8020fa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d133      	bne.n	802100e <rcl_expand_topic_name+0xc6>
 8020fa6:	462a      	mov	r2, r5
 8020fa8:	a90b      	add	r1, sp, #44	@ 0x2c
 8020faa:	9807      	ldr	r0, [sp, #28]
 8020fac:	f7fd faf4 	bl	801e598 <rmw_validate_namespace>
 8020fb0:	bb20      	cbnz	r0, 8020ffc <rcl_expand_topic_name+0xb4>
 8020fb2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020fb4:	2d00      	cmp	r5, #0
 8020fb6:	f040 80a2 	bne.w	80210fe <rcl_expand_topic_name+0x1b6>
 8020fba:	217b      	movs	r1, #123	@ 0x7b
 8020fbc:	4620      	mov	r0, r4
 8020fbe:	f001 f98f 	bl	80222e0 <strchr>
 8020fc2:	7823      	ldrb	r3, [r4, #0]
 8020fc4:	4681      	mov	r9, r0
 8020fc6:	bb20      	cbnz	r0, 8021012 <rcl_expand_topic_name+0xca>
 8020fc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8020fca:	d122      	bne.n	8021012 <rcl_expand_topic_name+0xca>
 8020fcc:	ab19      	add	r3, sp, #100	@ 0x64
 8020fce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020fd2:	ab16      	add	r3, sp, #88	@ 0x58
 8020fd4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8020fd8:	4620      	mov	r0, r4
 8020fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020fdc:	f7fc ffc6 	bl	801df6c <rcutils_strdup>
 8020fe0:	2800      	cmp	r0, #0
 8020fe2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020fe4:	bf08      	it	eq
 8020fe6:	250a      	moveq	r5, #10
 8020fe8:	6018      	str	r0, [r3, #0]
 8020fea:	4628      	mov	r0, r5
 8020fec:	b00d      	add	sp, #52	@ 0x34
 8020fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ff2:	250b      	movs	r5, #11
 8020ff4:	4628      	mov	r0, r5
 8020ff6:	b00d      	add	sp, #52	@ 0x34
 8020ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ffc:	f7f9 fd72 	bl	801aae4 <rcl_convert_rmw_ret_to_rcl_ret>
 8021000:	4605      	mov	r5, r0
 8021002:	e7f2      	b.n	8020fea <rcl_expand_topic_name+0xa2>
 8021004:	2567      	movs	r5, #103	@ 0x67
 8021006:	4628      	mov	r0, r5
 8021008:	b00d      	add	sp, #52	@ 0x34
 802100a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802100e:	25c9      	movs	r5, #201	@ 0xc9
 8021010:	e7eb      	b.n	8020fea <rcl_expand_topic_name+0xa2>
 8021012:	2b7e      	cmp	r3, #126	@ 0x7e
 8021014:	d075      	beq.n	8021102 <rcl_expand_topic_name+0x1ba>
 8021016:	f1b9 0f00 	cmp.w	r9, #0
 802101a:	f000 80c2 	beq.w	80211a2 <rcl_expand_topic_name+0x25a>
 802101e:	2300      	movs	r3, #0
 8021020:	46a2      	mov	sl, r4
 8021022:	461e      	mov	r6, r3
 8021024:	9508      	str	r5, [sp, #32]
 8021026:	4655      	mov	r5, sl
 8021028:	9409      	str	r4, [sp, #36]	@ 0x24
 802102a:	46b2      	mov	sl, r6
 802102c:	464c      	mov	r4, r9
 802102e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021032:	2c00      	cmp	r4, #0
 8021034:	f000 80ae 	beq.w	8021194 <rcl_expand_topic_name+0x24c>
 8021038:	217d      	movs	r1, #125	@ 0x7d
 802103a:	4628      	mov	r0, r5
 802103c:	f001 f950 	bl	80222e0 <strchr>
 8021040:	eba0 0904 	sub.w	r9, r0, r4
 8021044:	4621      	mov	r1, r4
 8021046:	4869      	ldr	r0, [pc, #420]	@ (80211ec <rcl_expand_topic_name+0x2a4>)
 8021048:	f109 0601 	add.w	r6, r9, #1
 802104c:	4632      	mov	r2, r6
 802104e:	f001 f954 	bl	80222fa <strncmp>
 8021052:	2800      	cmp	r0, #0
 8021054:	d051      	beq.n	80210fa <rcl_expand_topic_name+0x1b2>
 8021056:	4632      	mov	r2, r6
 8021058:	4621      	mov	r1, r4
 802105a:	4865      	ldr	r0, [pc, #404]	@ (80211f0 <rcl_expand_topic_name+0x2a8>)
 802105c:	f001 f94d 	bl	80222fa <strncmp>
 8021060:	b128      	cbz	r0, 802106e <rcl_expand_topic_name+0x126>
 8021062:	4632      	mov	r2, r6
 8021064:	4621      	mov	r1, r4
 8021066:	4863      	ldr	r0, [pc, #396]	@ (80211f4 <rcl_expand_topic_name+0x2ac>)
 8021068:	f001 f947 	bl	80222fa <strncmp>
 802106c:	bb38      	cbnz	r0, 80210be <rcl_expand_topic_name+0x176>
 802106e:	46d9      	mov	r9, fp
 8021070:	ab18      	add	r3, sp, #96	@ 0x60
 8021072:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021076:	ab16      	add	r3, sp, #88	@ 0x58
 8021078:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 802107c:	4620      	mov	r0, r4
 802107e:	4631      	mov	r1, r6
 8021080:	cb0c      	ldmia	r3, {r2, r3}
 8021082:	f7fc ff95 	bl	801dfb0 <rcutils_strndup>
 8021086:	4604      	mov	r4, r0
 8021088:	2800      	cmp	r0, #0
 802108a:	f000 80a3 	beq.w	80211d4 <rcl_expand_topic_name+0x28c>
 802108e:	464a      	mov	r2, r9
 8021090:	4628      	mov	r0, r5
 8021092:	ab16      	add	r3, sp, #88	@ 0x58
 8021094:	4621      	mov	r1, r4
 8021096:	f7fc fe69 	bl	801dd6c <rcutils_repl_str>
 802109a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802109c:	4605      	mov	r5, r0
 802109e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210a0:	4620      	mov	r0, r4
 80210a2:	4798      	blx	r3
 80210a4:	4650      	mov	r0, sl
 80210a6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80210aa:	4798      	blx	r3
 80210ac:	2d00      	cmp	r5, #0
 80210ae:	d06c      	beq.n	802118a <rcl_expand_topic_name+0x242>
 80210b0:	217b      	movs	r1, #123	@ 0x7b
 80210b2:	4628      	mov	r0, r5
 80210b4:	f001 f914 	bl	80222e0 <strchr>
 80210b8:	46aa      	mov	sl, r5
 80210ba:	4604      	mov	r4, r0
 80210bc:	e7b9      	b.n	8021032 <rcl_expand_topic_name+0xea>
 80210be:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80210c2:	1c61      	adds	r1, r4, #1
 80210c4:	4640      	mov	r0, r8
 80210c6:	f7fd f88b 	bl	801e1e0 <rcutils_string_map_getn>
 80210ca:	4681      	mov	r9, r0
 80210cc:	2800      	cmp	r0, #0
 80210ce:	d1cf      	bne.n	8021070 <rcl_expand_topic_name+0x128>
 80210d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80210d2:	aa18      	add	r2, sp, #96	@ 0x60
 80210d4:	2569      	movs	r5, #105	@ 0x69
 80210d6:	6018      	str	r0, [r3, #0]
 80210d8:	ab16      	add	r3, sp, #88	@ 0x58
 80210da:	ca07      	ldmia	r2, {r0, r1, r2}
 80210dc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80210e0:	4631      	mov	r1, r6
 80210e2:	4620      	mov	r0, r4
 80210e4:	cb0c      	ldmia	r3, {r2, r3}
 80210e6:	f7fc ff63 	bl	801dfb0 <rcutils_strndup>
 80210ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80210ec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210ee:	4798      	blx	r3
 80210f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80210f4:	4650      	mov	r0, sl
 80210f6:	4798      	blx	r3
 80210f8:	e777      	b.n	8020fea <rcl_expand_topic_name+0xa2>
 80210fa:	46b9      	mov	r9, r7
 80210fc:	e7b8      	b.n	8021070 <rcl_expand_topic_name+0x128>
 80210fe:	25ca      	movs	r5, #202	@ 0xca
 8021100:	e773      	b.n	8020fea <rcl_expand_topic_name+0xa2>
 8021102:	9e07      	ldr	r6, [sp, #28]
 8021104:	4630      	mov	r0, r6
 8021106:	f7df f8f5 	bl	80002f4 <strlen>
 802110a:	4a3b      	ldr	r2, [pc, #236]	@ (80211f8 <rcl_expand_topic_name+0x2b0>)
 802110c:	4b3b      	ldr	r3, [pc, #236]	@ (80211fc <rcl_expand_topic_name+0x2b4>)
 802110e:	9603      	str	r6, [sp, #12]
 8021110:	2801      	cmp	r0, #1
 8021112:	bf18      	it	ne
 8021114:	4613      	movne	r3, r2
 8021116:	9704      	str	r7, [sp, #16]
 8021118:	9302      	str	r3, [sp, #8]
 802111a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802111c:	9300      	str	r3, [sp, #0]
 802111e:	1c63      	adds	r3, r4, #1
 8021120:	9305      	str	r3, [sp, #20]
 8021122:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021126:	9301      	str	r3, [sp, #4]
 8021128:	ab16      	add	r3, sp, #88	@ 0x58
 802112a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802112c:	f7fc fde4 	bl	801dcf8 <rcutils_format_string_limit>
 8021130:	4606      	mov	r6, r0
 8021132:	b350      	cbz	r0, 802118a <rcl_expand_topic_name+0x242>
 8021134:	f1b9 0f00 	cmp.w	r9, #0
 8021138:	d005      	beq.n	8021146 <rcl_expand_topic_name+0x1fe>
 802113a:	217b      	movs	r1, #123	@ 0x7b
 802113c:	46b2      	mov	sl, r6
 802113e:	f001 f8cf 	bl	80222e0 <strchr>
 8021142:	4681      	mov	r9, r0
 8021144:	e76e      	b.n	8021024 <rcl_expand_topic_name+0xdc>
 8021146:	7833      	ldrb	r3, [r6, #0]
 8021148:	2b2f      	cmp	r3, #47	@ 0x2f
 802114a:	d01b      	beq.n	8021184 <rcl_expand_topic_name+0x23c>
 802114c:	9c07      	ldr	r4, [sp, #28]
 802114e:	4620      	mov	r0, r4
 8021150:	f7df f8d0 	bl	80002f4 <strlen>
 8021154:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021158:	4a29      	ldr	r2, [pc, #164]	@ (8021200 <rcl_expand_topic_name+0x2b8>)
 802115a:	9301      	str	r3, [sp, #4]
 802115c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802115e:	9604      	str	r6, [sp, #16]
 8021160:	9300      	str	r3, [sp, #0]
 8021162:	4b28      	ldr	r3, [pc, #160]	@ (8021204 <rcl_expand_topic_name+0x2bc>)
 8021164:	9403      	str	r4, [sp, #12]
 8021166:	2801      	cmp	r0, #1
 8021168:	bf18      	it	ne
 802116a:	4613      	movne	r3, r2
 802116c:	9302      	str	r3, [sp, #8]
 802116e:	ab16      	add	r3, sp, #88	@ 0x58
 8021170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021172:	f7fc fdc1 	bl	801dcf8 <rcutils_format_string_limit>
 8021176:	4603      	mov	r3, r0
 8021178:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802117a:	4630      	mov	r0, r6
 802117c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802117e:	461e      	mov	r6, r3
 8021180:	4790      	blx	r2
 8021182:	b116      	cbz	r6, 802118a <rcl_expand_topic_name+0x242>
 8021184:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021186:	601e      	str	r6, [r3, #0]
 8021188:	e72f      	b.n	8020fea <rcl_expand_topic_name+0xa2>
 802118a:	2300      	movs	r3, #0
 802118c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802118e:	250a      	movs	r5, #10
 8021190:	6013      	str	r3, [r2, #0]
 8021192:	e72a      	b.n	8020fea <rcl_expand_topic_name+0xa2>
 8021194:	4653      	mov	r3, sl
 8021196:	4656      	mov	r6, sl
 8021198:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 802119c:	2b00      	cmp	r3, #0
 802119e:	d1d2      	bne.n	8021146 <rcl_expand_topic_name+0x1fe>
 80211a0:	7823      	ldrb	r3, [r4, #0]
 80211a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80211a4:	d01e      	beq.n	80211e4 <rcl_expand_topic_name+0x29c>
 80211a6:	9e07      	ldr	r6, [sp, #28]
 80211a8:	4630      	mov	r0, r6
 80211aa:	f7df f8a3 	bl	80002f4 <strlen>
 80211ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80211b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80211b4:	9603      	str	r6, [sp, #12]
 80211b6:	9404      	str	r4, [sp, #16]
 80211b8:	e9cd 2300 	strd	r2, r3, [sp]
 80211bc:	4a10      	ldr	r2, [pc, #64]	@ (8021200 <rcl_expand_topic_name+0x2b8>)
 80211be:	4b11      	ldr	r3, [pc, #68]	@ (8021204 <rcl_expand_topic_name+0x2bc>)
 80211c0:	2801      	cmp	r0, #1
 80211c2:	bf18      	it	ne
 80211c4:	4613      	movne	r3, r2
 80211c6:	9302      	str	r3, [sp, #8]
 80211c8:	ab16      	add	r3, sp, #88	@ 0x58
 80211ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80211cc:	f7fc fd94 	bl	801dcf8 <rcutils_format_string_limit>
 80211d0:	4606      	mov	r6, r0
 80211d2:	e7d6      	b.n	8021182 <rcl_expand_topic_name+0x23a>
 80211d4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 80211d8:	4650      	mov	r0, sl
 80211da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80211dc:	6014      	str	r4, [r2, #0]
 80211de:	250a      	movs	r5, #10
 80211e0:	4798      	blx	r3
 80211e2:	e702      	b.n	8020fea <rcl_expand_topic_name+0xa2>
 80211e4:	2300      	movs	r3, #0
 80211e6:	461e      	mov	r6, r3
 80211e8:	e7cc      	b.n	8021184 <rcl_expand_topic_name+0x23c>
 80211ea:	bf00      	nop
 80211ec:	08025a14 	.word	0x08025a14
 80211f0:	08025a1c 	.word	0x08025a1c
 80211f4:	08025a24 	.word	0x08025a24
 80211f8:	08025a0c 	.word	0x08025a0c
 80211fc:	080249c8 	.word	0x080249c8
 8021200:	0802535c 	.word	0x0802535c
 8021204:	080249d8 	.word	0x080249d8

08021208 <rcl_get_default_topic_name_substitutions>:
 8021208:	2800      	cmp	r0, #0
 802120a:	bf0c      	ite	eq
 802120c:	200b      	moveq	r0, #11
 802120e:	2000      	movne	r0, #0
 8021210:	4770      	bx	lr
 8021212:	bf00      	nop

08021214 <rcl_get_zero_initialized_guard_condition>:
 8021214:	4a03      	ldr	r2, [pc, #12]	@ (8021224 <rcl_get_zero_initialized_guard_condition+0x10>)
 8021216:	4603      	mov	r3, r0
 8021218:	e892 0003 	ldmia.w	r2, {r0, r1}
 802121c:	e883 0003 	stmia.w	r3, {r0, r1}
 8021220:	4618      	mov	r0, r3
 8021222:	4770      	bx	lr
 8021224:	08025a30 	.word	0x08025a30

08021228 <rcl_guard_condition_init>:
 8021228:	b082      	sub	sp, #8
 802122a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802122c:	b087      	sub	sp, #28
 802122e:	4604      	mov	r4, r0
 8021230:	460d      	mov	r5, r1
 8021232:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 8021236:	f10d 0c04 	add.w	ip, sp, #4
 802123a:	e9ce 2300 	strd	r2, r3, [lr]
 802123e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021246:	f8de 3000 	ldr.w	r3, [lr]
 802124a:	a801      	add	r0, sp, #4
 802124c:	f8cc 3000 	str.w	r3, [ip]
 8021250:	f7f4 f93a 	bl	80154c8 <rcutils_allocator_is_valid>
 8021254:	b354      	cbz	r4, 80212ac <rcl_guard_condition_init+0x84>
 8021256:	f080 0301 	eor.w	r3, r0, #1
 802125a:	b2db      	uxtb	r3, r3
 802125c:	bb33      	cbnz	r3, 80212ac <rcl_guard_condition_init+0x84>
 802125e:	6866      	ldr	r6, [r4, #4]
 8021260:	b9ee      	cbnz	r6, 802129e <rcl_guard_condition_init+0x76>
 8021262:	b31d      	cbz	r5, 80212ac <rcl_guard_condition_init+0x84>
 8021264:	4628      	mov	r0, r5
 8021266:	f7f9 fc5b 	bl	801ab20 <rcl_context_is_valid>
 802126a:	b308      	cbz	r0, 80212b0 <rcl_guard_condition_init+0x88>
 802126c:	9b01      	ldr	r3, [sp, #4]
 802126e:	201c      	movs	r0, #28
 8021270:	9905      	ldr	r1, [sp, #20]
 8021272:	4798      	blx	r3
 8021274:	4607      	mov	r7, r0
 8021276:	6060      	str	r0, [r4, #4]
 8021278:	b310      	cbz	r0, 80212c0 <rcl_guard_condition_init+0x98>
 802127a:	6828      	ldr	r0, [r5, #0]
 802127c:	3028      	adds	r0, #40	@ 0x28
 802127e:	f000 faab 	bl	80217d8 <rmw_create_guard_condition>
 8021282:	6038      	str	r0, [r7, #0]
 8021284:	6860      	ldr	r0, [r4, #4]
 8021286:	6807      	ldr	r7, [r0, #0]
 8021288:	b1a7      	cbz	r7, 80212b4 <rcl_guard_condition_init+0x8c>
 802128a:	2301      	movs	r3, #1
 802128c:	ac01      	add	r4, sp, #4
 802128e:	f100 0708 	add.w	r7, r0, #8
 8021292:	7103      	strb	r3, [r0, #4]
 8021294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021296:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8021298:	6823      	ldr	r3, [r4, #0]
 802129a:	603b      	str	r3, [r7, #0]
 802129c:	e000      	b.n	80212a0 <rcl_guard_condition_init+0x78>
 802129e:	2664      	movs	r6, #100	@ 0x64
 80212a0:	4630      	mov	r0, r6
 80212a2:	b007      	add	sp, #28
 80212a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80212a8:	b002      	add	sp, #8
 80212aa:	4770      	bx	lr
 80212ac:	260b      	movs	r6, #11
 80212ae:	e7f7      	b.n	80212a0 <rcl_guard_condition_init+0x78>
 80212b0:	2665      	movs	r6, #101	@ 0x65
 80212b2:	e7f5      	b.n	80212a0 <rcl_guard_condition_init+0x78>
 80212b4:	9b02      	ldr	r3, [sp, #8]
 80212b6:	2601      	movs	r6, #1
 80212b8:	9905      	ldr	r1, [sp, #20]
 80212ba:	4798      	blx	r3
 80212bc:	6067      	str	r7, [r4, #4]
 80212be:	e7ef      	b.n	80212a0 <rcl_guard_condition_init+0x78>
 80212c0:	260a      	movs	r6, #10
 80212c2:	e7ed      	b.n	80212a0 <rcl_guard_condition_init+0x78>

080212c4 <rcl_guard_condition_init_from_rmw>:
 80212c4:	b082      	sub	sp, #8
 80212c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80212ca:	b086      	sub	sp, #24
 80212cc:	4604      	mov	r4, r0
 80212ce:	460e      	mov	r6, r1
 80212d0:	4615      	mov	r5, r2
 80212d2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80212d6:	f10d 0e04 	add.w	lr, sp, #4
 80212da:	f84c 3f04 	str.w	r3, [ip, #4]!
 80212de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80212e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80212e6:	f8dc 3000 	ldr.w	r3, [ip]
 80212ea:	a801      	add	r0, sp, #4
 80212ec:	f8ce 3000 	str.w	r3, [lr]
 80212f0:	f7f4 f8ea 	bl	80154c8 <rcutils_allocator_is_valid>
 80212f4:	f080 0301 	eor.w	r3, r0, #1
 80212f8:	b2db      	uxtb	r3, r3
 80212fa:	bb3b      	cbnz	r3, 802134c <rcl_guard_condition_init_from_rmw+0x88>
 80212fc:	b334      	cbz	r4, 802134c <rcl_guard_condition_init_from_rmw+0x88>
 80212fe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8021302:	f1b8 0f00 	cmp.w	r8, #0
 8021306:	d11a      	bne.n	802133e <rcl_guard_condition_init_from_rmw+0x7a>
 8021308:	b305      	cbz	r5, 802134c <rcl_guard_condition_init_from_rmw+0x88>
 802130a:	4628      	mov	r0, r5
 802130c:	f7f9 fc08 	bl	801ab20 <rcl_context_is_valid>
 8021310:	b1f0      	cbz	r0, 8021350 <rcl_guard_condition_init_from_rmw+0x8c>
 8021312:	9b01      	ldr	r3, [sp, #4]
 8021314:	201c      	movs	r0, #28
 8021316:	9905      	ldr	r1, [sp, #20]
 8021318:	4798      	blx	r3
 802131a:	4607      	mov	r7, r0
 802131c:	6060      	str	r0, [r4, #4]
 802131e:	b320      	cbz	r0, 802136a <rcl_guard_condition_init_from_rmw+0xa6>
 8021320:	b1c6      	cbz	r6, 8021354 <rcl_guard_condition_init_from_rmw+0x90>
 8021322:	6006      	str	r6, [r0, #0]
 8021324:	f880 8004 	strb.w	r8, [r0, #4]
 8021328:	ac01      	add	r4, sp, #4
 802132a:	f107 0c08 	add.w	ip, r7, #8
 802132e:	2500      	movs	r5, #0
 8021330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021332:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021336:	6823      	ldr	r3, [r4, #0]
 8021338:	f8cc 3000 	str.w	r3, [ip]
 802133c:	e000      	b.n	8021340 <rcl_guard_condition_init_from_rmw+0x7c>
 802133e:	2564      	movs	r5, #100	@ 0x64
 8021340:	4628      	mov	r0, r5
 8021342:	b006      	add	sp, #24
 8021344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021348:	b002      	add	sp, #8
 802134a:	4770      	bx	lr
 802134c:	250b      	movs	r5, #11
 802134e:	e7f7      	b.n	8021340 <rcl_guard_condition_init_from_rmw+0x7c>
 8021350:	2565      	movs	r5, #101	@ 0x65
 8021352:	e7f5      	b.n	8021340 <rcl_guard_condition_init_from_rmw+0x7c>
 8021354:	6828      	ldr	r0, [r5, #0]
 8021356:	3028      	adds	r0, #40	@ 0x28
 8021358:	f000 fa3e 	bl	80217d8 <rmw_create_guard_condition>
 802135c:	6038      	str	r0, [r7, #0]
 802135e:	6867      	ldr	r7, [r4, #4]
 8021360:	683e      	ldr	r6, [r7, #0]
 8021362:	b126      	cbz	r6, 802136e <rcl_guard_condition_init_from_rmw+0xaa>
 8021364:	2301      	movs	r3, #1
 8021366:	713b      	strb	r3, [r7, #4]
 8021368:	e7de      	b.n	8021328 <rcl_guard_condition_init_from_rmw+0x64>
 802136a:	250a      	movs	r5, #10
 802136c:	e7e8      	b.n	8021340 <rcl_guard_condition_init_from_rmw+0x7c>
 802136e:	9b02      	ldr	r3, [sp, #8]
 8021370:	4638      	mov	r0, r7
 8021372:	9905      	ldr	r1, [sp, #20]
 8021374:	2501      	movs	r5, #1
 8021376:	4798      	blx	r3
 8021378:	6066      	str	r6, [r4, #4]
 802137a:	e7e1      	b.n	8021340 <rcl_guard_condition_init_from_rmw+0x7c>

0802137c <rcl_guard_condition_fini>:
 802137c:	b570      	push	{r4, r5, r6, lr}
 802137e:	b082      	sub	sp, #8
 8021380:	b1f0      	cbz	r0, 80213c0 <rcl_guard_condition_fini+0x44>
 8021382:	6843      	ldr	r3, [r0, #4]
 8021384:	4604      	mov	r4, r0
 8021386:	b163      	cbz	r3, 80213a2 <rcl_guard_condition_fini+0x26>
 8021388:	6818      	ldr	r0, [r3, #0]
 802138a:	68de      	ldr	r6, [r3, #12]
 802138c:	6999      	ldr	r1, [r3, #24]
 802138e:	b160      	cbz	r0, 80213aa <rcl_guard_condition_fini+0x2e>
 8021390:	791d      	ldrb	r5, [r3, #4]
 8021392:	b965      	cbnz	r5, 80213ae <rcl_guard_condition_fini+0x32>
 8021394:	4618      	mov	r0, r3
 8021396:	47b0      	blx	r6
 8021398:	2300      	movs	r3, #0
 802139a:	4628      	mov	r0, r5
 802139c:	6063      	str	r3, [r4, #4]
 802139e:	b002      	add	sp, #8
 80213a0:	bd70      	pop	{r4, r5, r6, pc}
 80213a2:	461d      	mov	r5, r3
 80213a4:	4628      	mov	r0, r5
 80213a6:	b002      	add	sp, #8
 80213a8:	bd70      	pop	{r4, r5, r6, pc}
 80213aa:	4605      	mov	r5, r0
 80213ac:	e7f2      	b.n	8021394 <rcl_guard_condition_fini+0x18>
 80213ae:	9101      	str	r1, [sp, #4]
 80213b0:	f000 fa28 	bl	8021804 <rmw_destroy_guard_condition>
 80213b4:	1e05      	subs	r5, r0, #0
 80213b6:	6863      	ldr	r3, [r4, #4]
 80213b8:	9901      	ldr	r1, [sp, #4]
 80213ba:	bf18      	it	ne
 80213bc:	2501      	movne	r5, #1
 80213be:	e7e9      	b.n	8021394 <rcl_guard_condition_fini+0x18>
 80213c0:	250b      	movs	r5, #11
 80213c2:	4628      	mov	r0, r5
 80213c4:	b002      	add	sp, #8
 80213c6:	bd70      	pop	{r4, r5, r6, pc}

080213c8 <rcl_guard_condition_get_default_options>:
 80213c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213ca:	b087      	sub	sp, #28
 80213cc:	4606      	mov	r6, r0
 80213ce:	4c0b      	ldr	r4, [pc, #44]	@ (80213fc <rcl_guard_condition_get_default_options+0x34>)
 80213d0:	4668      	mov	r0, sp
 80213d2:	f7f4 f86b 	bl	80154ac <rcutils_get_default_allocator>
 80213d6:	46ee      	mov	lr, sp
 80213d8:	46a4      	mov	ip, r4
 80213da:	4625      	mov	r5, r4
 80213dc:	4634      	mov	r4, r6
 80213de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80213e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80213e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80213e8:	f8de 7000 	ldr.w	r7, [lr]
 80213ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80213ee:	4630      	mov	r0, r6
 80213f0:	f8cc 7000 	str.w	r7, [ip]
 80213f4:	6027      	str	r7, [r4, #0]
 80213f6:	b007      	add	sp, #28
 80213f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80213fa:	bf00      	nop
 80213fc:	24069590 	.word	0x24069590

08021400 <rcl_trigger_guard_condition>:
 8021400:	b148      	cbz	r0, 8021416 <rcl_trigger_guard_condition+0x16>
 8021402:	b508      	push	{r3, lr}
 8021404:	6843      	ldr	r3, [r0, #4]
 8021406:	b143      	cbz	r3, 802141a <rcl_trigger_guard_condition+0x1a>
 8021408:	6818      	ldr	r0, [r3, #0]
 802140a:	f000 fa0f 	bl	802182c <rmw_trigger_guard_condition>
 802140e:	3800      	subs	r0, #0
 8021410:	bf18      	it	ne
 8021412:	2001      	movne	r0, #1
 8021414:	bd08      	pop	{r3, pc}
 8021416:	200b      	movs	r0, #11
 8021418:	4770      	bx	lr
 802141a:	200b      	movs	r0, #11
 802141c:	bd08      	pop	{r3, pc}
 802141e:	bf00      	nop

08021420 <rcl_guard_condition_get_rmw_handle>:
 8021420:	b110      	cbz	r0, 8021428 <rcl_guard_condition_get_rmw_handle+0x8>
 8021422:	6840      	ldr	r0, [r0, #4]
 8021424:	b100      	cbz	r0, 8021428 <rcl_guard_condition_get_rmw_handle+0x8>
 8021426:	6800      	ldr	r0, [r0, #0]
 8021428:	4770      	bx	lr
 802142a:	bf00      	nop

0802142c <rcl_validate_topic_name>:
 802142c:	2800      	cmp	r0, #0
 802142e:	f000 8089 	beq.w	8021544 <rcl_validate_topic_name+0x118>
 8021432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021436:	460e      	mov	r6, r1
 8021438:	2900      	cmp	r1, #0
 802143a:	f000 8085 	beq.w	8021548 <rcl_validate_topic_name+0x11c>
 802143e:	4604      	mov	r4, r0
 8021440:	4617      	mov	r7, r2
 8021442:	f7de ff57 	bl	80002f4 <strlen>
 8021446:	b1b0      	cbz	r0, 8021476 <rcl_validate_topic_name+0x4a>
 8021448:	f894 e000 	ldrb.w	lr, [r4]
 802144c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 80215b0 <rcl_validate_topic_name+0x184>
 8021450:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8021454:	f013 0304 	ands.w	r3, r3, #4
 8021458:	d139      	bne.n	80214ce <rcl_validate_topic_name+0xa2>
 802145a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 802145e:	f814 2008 	ldrb.w	r2, [r4, r8]
 8021462:	2a2f      	cmp	r2, #47	@ 0x2f
 8021464:	d10f      	bne.n	8021486 <rcl_validate_topic_name+0x5a>
 8021466:	2202      	movs	r2, #2
 8021468:	6032      	str	r2, [r6, #0]
 802146a:	b3a7      	cbz	r7, 80214d6 <rcl_validate_topic_name+0xaa>
 802146c:	4618      	mov	r0, r3
 802146e:	f8c7 8000 	str.w	r8, [r7]
 8021472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021476:	2301      	movs	r3, #1
 8021478:	6033      	str	r3, [r6, #0]
 802147a:	b367      	cbz	r7, 80214d6 <rcl_validate_topic_name+0xaa>
 802147c:	2300      	movs	r3, #0
 802147e:	4618      	mov	r0, r3
 8021480:	603b      	str	r3, [r7, #0]
 8021482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021486:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 802148a:	461d      	mov	r5, r3
 802148c:	4619      	mov	r1, r3
 802148e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8021492:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 8021496:	f1b9 0f09 	cmp.w	r9, #9
 802149a:	d91f      	bls.n	80214dc <rcl_validate_topic_name+0xb0>
 802149c:	f022 0920 	bic.w	r9, r2, #32
 80214a0:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 80214a4:	f1b9 0f19 	cmp.w	r9, #25
 80214a8:	d918      	bls.n	80214dc <rcl_validate_topic_name+0xb0>
 80214aa:	2a5f      	cmp	r2, #95	@ 0x5f
 80214ac:	d024      	beq.n	80214f8 <rcl_validate_topic_name+0xcc>
 80214ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80214b0:	d058      	beq.n	8021564 <rcl_validate_topic_name+0x138>
 80214b2:	2a7e      	cmp	r2, #126	@ 0x7e
 80214b4:	d04a      	beq.n	802154c <rcl_validate_topic_name+0x120>
 80214b6:	2a7b      	cmp	r2, #123	@ 0x7b
 80214b8:	d05b      	beq.n	8021572 <rcl_validate_topic_name+0x146>
 80214ba:	2a7d      	cmp	r2, #125	@ 0x7d
 80214bc:	d169      	bne.n	8021592 <rcl_validate_topic_name+0x166>
 80214be:	2d00      	cmp	r5, #0
 80214c0:	d15c      	bne.n	802157c <rcl_validate_topic_name+0x150>
 80214c2:	2305      	movs	r3, #5
 80214c4:	6033      	str	r3, [r6, #0]
 80214c6:	b137      	cbz	r7, 80214d6 <rcl_validate_topic_name+0xaa>
 80214c8:	2000      	movs	r0, #0
 80214ca:	6039      	str	r1, [r7, #0]
 80214cc:	e7d9      	b.n	8021482 <rcl_validate_topic_name+0x56>
 80214ce:	2304      	movs	r3, #4
 80214d0:	6033      	str	r3, [r6, #0]
 80214d2:	2f00      	cmp	r7, #0
 80214d4:	d1d2      	bne.n	802147c <rcl_validate_topic_name+0x50>
 80214d6:	2000      	movs	r0, #0
 80214d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214dc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80214e0:	0752      	lsls	r2, r2, #29
 80214e2:	d509      	bpl.n	80214f8 <rcl_validate_topic_name+0xcc>
 80214e4:	2900      	cmp	r1, #0
 80214e6:	bf0c      	ite	eq
 80214e8:	2200      	moveq	r2, #0
 80214ea:	f005 0201 	andne.w	r2, r5, #1
 80214ee:	b11a      	cbz	r2, 80214f8 <rcl_validate_topic_name+0xcc>
 80214f0:	1e4d      	subs	r5, r1, #1
 80214f2:	429d      	cmp	r5, r3
 80214f4:	d031      	beq.n	802155a <rcl_validate_topic_name+0x12e>
 80214f6:	4615      	mov	r5, r2
 80214f8:	3101      	adds	r1, #1
 80214fa:	4288      	cmp	r0, r1
 80214fc:	d1c7      	bne.n	802148e <rcl_validate_topic_name+0x62>
 80214fe:	2d00      	cmp	r5, #0
 8021500:	d142      	bne.n	8021588 <rcl_validate_topic_name+0x15c>
 8021502:	4628      	mov	r0, r5
 8021504:	2301      	movs	r3, #1
 8021506:	e00c      	b.n	8021522 <rcl_validate_topic_name+0xf6>
 8021508:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 802150c:	d101      	bne.n	8021512 <rcl_validate_topic_name+0xe6>
 802150e:	2801      	cmp	r0, #1
 8021510:	d047      	beq.n	80215a2 <rcl_validate_topic_name+0x176>
 8021512:	1c5a      	adds	r2, r3, #1
 8021514:	428b      	cmp	r3, r1
 8021516:	f100 0001 	add.w	r0, r0, #1
 802151a:	f104 0401 	add.w	r4, r4, #1
 802151e:	4613      	mov	r3, r2
 8021520:	d22e      	bcs.n	8021580 <rcl_validate_topic_name+0x154>
 8021522:	4580      	cmp	r8, r0
 8021524:	d0f5      	beq.n	8021512 <rcl_validate_topic_name+0xe6>
 8021526:	7822      	ldrb	r2, [r4, #0]
 8021528:	2a2f      	cmp	r2, #47	@ 0x2f
 802152a:	d1ed      	bne.n	8021508 <rcl_validate_topic_name+0xdc>
 802152c:	7862      	ldrb	r2, [r4, #1]
 802152e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8021532:	0752      	lsls	r2, r2, #29
 8021534:	d5ed      	bpl.n	8021512 <rcl_validate_topic_name+0xe6>
 8021536:	2204      	movs	r2, #4
 8021538:	6032      	str	r2, [r6, #0]
 802153a:	2f00      	cmp	r7, #0
 802153c:	d0cb      	beq.n	80214d6 <rcl_validate_topic_name+0xaa>
 802153e:	2000      	movs	r0, #0
 8021540:	603b      	str	r3, [r7, #0]
 8021542:	e79e      	b.n	8021482 <rcl_validate_topic_name+0x56>
 8021544:	200b      	movs	r0, #11
 8021546:	4770      	bx	lr
 8021548:	200b      	movs	r0, #11
 802154a:	e79a      	b.n	8021482 <rcl_validate_topic_name+0x56>
 802154c:	2900      	cmp	r1, #0
 802154e:	d0d3      	beq.n	80214f8 <rcl_validate_topic_name+0xcc>
 8021550:	2306      	movs	r3, #6
 8021552:	6033      	str	r3, [r6, #0]
 8021554:	2f00      	cmp	r7, #0
 8021556:	d1b7      	bne.n	80214c8 <rcl_validate_topic_name+0x9c>
 8021558:	e7bd      	b.n	80214d6 <rcl_validate_topic_name+0xaa>
 802155a:	2309      	movs	r3, #9
 802155c:	6033      	str	r3, [r6, #0]
 802155e:	2f00      	cmp	r7, #0
 8021560:	d1b2      	bne.n	80214c8 <rcl_validate_topic_name+0x9c>
 8021562:	e7b8      	b.n	80214d6 <rcl_validate_topic_name+0xaa>
 8021564:	2d00      	cmp	r5, #0
 8021566:	d0c7      	beq.n	80214f8 <rcl_validate_topic_name+0xcc>
 8021568:	2308      	movs	r3, #8
 802156a:	6033      	str	r3, [r6, #0]
 802156c:	2f00      	cmp	r7, #0
 802156e:	d1ab      	bne.n	80214c8 <rcl_validate_topic_name+0x9c>
 8021570:	e7b1      	b.n	80214d6 <rcl_validate_topic_name+0xaa>
 8021572:	2d00      	cmp	r5, #0
 8021574:	d1f8      	bne.n	8021568 <rcl_validate_topic_name+0x13c>
 8021576:	460b      	mov	r3, r1
 8021578:	2501      	movs	r5, #1
 802157a:	e7bd      	b.n	80214f8 <rcl_validate_topic_name+0xcc>
 802157c:	2500      	movs	r5, #0
 802157e:	e7bb      	b.n	80214f8 <rcl_validate_topic_name+0xcc>
 8021580:	2300      	movs	r3, #0
 8021582:	4618      	mov	r0, r3
 8021584:	6033      	str	r3, [r6, #0]
 8021586:	e77c      	b.n	8021482 <rcl_validate_topic_name+0x56>
 8021588:	2205      	movs	r2, #5
 802158a:	6032      	str	r2, [r6, #0]
 802158c:	2f00      	cmp	r7, #0
 802158e:	d1d6      	bne.n	802153e <rcl_validate_topic_name+0x112>
 8021590:	e7a1      	b.n	80214d6 <rcl_validate_topic_name+0xaa>
 8021592:	2d00      	cmp	r5, #0
 8021594:	bf14      	ite	ne
 8021596:	2308      	movne	r3, #8
 8021598:	2303      	moveq	r3, #3
 802159a:	6033      	str	r3, [r6, #0]
 802159c:	2f00      	cmp	r7, #0
 802159e:	d193      	bne.n	80214c8 <rcl_validate_topic_name+0x9c>
 80215a0:	e799      	b.n	80214d6 <rcl_validate_topic_name+0xaa>
 80215a2:	2307      	movs	r3, #7
 80215a4:	6033      	str	r3, [r6, #0]
 80215a6:	2f00      	cmp	r7, #0
 80215a8:	d095      	beq.n	80214d6 <rcl_validate_topic_name+0xaa>
 80215aa:	2301      	movs	r3, #1
 80215ac:	e7c7      	b.n	802153e <rcl_validate_topic_name+0x112>
 80215ae:	bf00      	nop
 80215b0:	08025b9a 	.word	0x08025b9a

080215b4 <rcutils_string_array_fini>:
 80215b4:	b328      	cbz	r0, 8021602 <rcutils_string_array_fini+0x4e>
 80215b6:	b570      	push	{r4, r5, r6, lr}
 80215b8:	4604      	mov	r4, r0
 80215ba:	6840      	ldr	r0, [r0, #4]
 80215bc:	b1e0      	cbz	r0, 80215f8 <rcutils_string_array_fini+0x44>
 80215be:	f104 0008 	add.w	r0, r4, #8
 80215c2:	f7f3 ff81 	bl	80154c8 <rcutils_allocator_is_valid>
 80215c6:	b1c0      	cbz	r0, 80215fa <rcutils_string_array_fini+0x46>
 80215c8:	6823      	ldr	r3, [r4, #0]
 80215ca:	b1c3      	cbz	r3, 80215fe <rcutils_string_array_fini+0x4a>
 80215cc:	2500      	movs	r5, #0
 80215ce:	6860      	ldr	r0, [r4, #4]
 80215d0:	462e      	mov	r6, r5
 80215d2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80215d6:	68e3      	ldr	r3, [r4, #12]
 80215d8:	69a1      	ldr	r1, [r4, #24]
 80215da:	4798      	blx	r3
 80215dc:	e9d4 3000 	ldrd	r3, r0, [r4]
 80215e0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80215e4:	3501      	adds	r5, #1
 80215e6:	429d      	cmp	r5, r3
 80215e8:	d3f3      	bcc.n	80215d2 <rcutils_string_array_fini+0x1e>
 80215ea:	68e3      	ldr	r3, [r4, #12]
 80215ec:	69a1      	ldr	r1, [r4, #24]
 80215ee:	4798      	blx	r3
 80215f0:	2300      	movs	r3, #0
 80215f2:	4618      	mov	r0, r3
 80215f4:	e9c4 3300 	strd	r3, r3, [r4]
 80215f8:	bd70      	pop	{r4, r5, r6, pc}
 80215fa:	200b      	movs	r0, #11
 80215fc:	bd70      	pop	{r4, r5, r6, pc}
 80215fe:	6860      	ldr	r0, [r4, #4]
 8021600:	e7f3      	b.n	80215ea <rcutils_string_array_fini+0x36>
 8021602:	200b      	movs	r0, #11
 8021604:	4770      	bx	lr
 8021606:	bf00      	nop

08021608 <on_status>:
 8021608:	b082      	sub	sp, #8
 802160a:	b002      	add	sp, #8
 802160c:	4770      	bx	lr
 802160e:	bf00      	nop

08021610 <on_topic>:
 8021610:	4a23      	ldr	r2, [pc, #140]	@ (80216a0 <on_topic+0x90>)
 8021612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021616:	6812      	ldr	r2, [r2, #0]
 8021618:	b094      	sub	sp, #80	@ 0x50
 802161a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802161c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021620:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021622:	9312      	str	r3, [sp, #72]	@ 0x48
 8021624:	b3c2      	cbz	r2, 8021698 <on_topic+0x88>
 8021626:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 802162a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 802162e:	e001      	b.n	8021634 <on_topic+0x24>
 8021630:	6852      	ldr	r2, [r2, #4]
 8021632:	b38a      	cbz	r2, 8021698 <on_topic+0x88>
 8021634:	6894      	ldr	r4, [r2, #8]
 8021636:	8aa3      	ldrh	r3, [r4, #20]
 8021638:	428b      	cmp	r3, r1
 802163a:	d1f9      	bne.n	8021630 <on_topic+0x20>
 802163c:	7da3      	ldrb	r3, [r4, #22]
 802163e:	4283      	cmp	r3, r0
 8021640:	d1f6      	bne.n	8021630 <on_topic+0x20>
 8021642:	2248      	movs	r2, #72	@ 0x48
 8021644:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8021648:	4668      	mov	r0, sp
 802164a:	f000 ff60 	bl	802250e <memcpy>
 802164e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8021652:	4620      	mov	r0, r4
 8021654:	cb0c      	ldmia	r3, {r2, r3}
 8021656:	f7f4 fbeb 	bl	8015e30 <rmw_uxrce_get_static_input_buffer_for_entity>
 802165a:	4607      	mov	r7, r0
 802165c:	b1e0      	cbz	r0, 8021698 <on_topic+0x88>
 802165e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8021662:	462a      	mov	r2, r5
 8021664:	4630      	mov	r0, r6
 8021666:	f108 0110 	add.w	r1, r8, #16
 802166a:	f7fe fd1f 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 802166e:	b930      	cbnz	r0, 802167e <on_topic+0x6e>
 8021670:	4639      	mov	r1, r7
 8021672:	480c      	ldr	r0, [pc, #48]	@ (80216a4 <on_topic+0x94>)
 8021674:	b014      	add	sp, #80	@ 0x50
 8021676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802167a:	f7fd b81b 	b.w	801e6b4 <put_memory>
 802167e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8021682:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8021686:	f7f4 f9d1 	bl	8015a2c <rmw_uros_epoch_nanos>
 802168a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 802168e:	2305      	movs	r3, #5
 8021690:	e942 0102 	strd	r0, r1, [r2, #-8]
 8021694:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8021698:	b014      	add	sp, #80	@ 0x50
 802169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802169e:	bf00      	nop
 80216a0:	24069244 	.word	0x24069244
 80216a4:	24069234 	.word	0x24069234

080216a8 <on_request>:
 80216a8:	4824      	ldr	r0, [pc, #144]	@ (802173c <on_request+0x94>)
 80216aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216ae:	6800      	ldr	r0, [r0, #0]
 80216b0:	b094      	sub	sp, #80	@ 0x50
 80216b2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80216b4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80216b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80216ba:	2800      	cmp	r0, #0
 80216bc:	d03b      	beq.n	8021736 <on_request+0x8e>
 80216be:	461d      	mov	r5, r3
 80216c0:	e001      	b.n	80216c6 <on_request+0x1e>
 80216c2:	6840      	ldr	r0, [r0, #4]
 80216c4:	b3b8      	cbz	r0, 8021736 <on_request+0x8e>
 80216c6:	6884      	ldr	r4, [r0, #8]
 80216c8:	8b21      	ldrh	r1, [r4, #24]
 80216ca:	4291      	cmp	r1, r2
 80216cc:	d1f9      	bne.n	80216c2 <on_request+0x1a>
 80216ce:	2248      	movs	r2, #72	@ 0x48
 80216d0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80216d4:	4668      	mov	r0, sp
 80216d6:	f000 ff1a 	bl	802250e <memcpy>
 80216da:	f104 0320 	add.w	r3, r4, #32
 80216de:	4620      	mov	r0, r4
 80216e0:	cb0c      	ldmia	r3, {r2, r3}
 80216e2:	f7f4 fba5 	bl	8015e30 <rmw_uxrce_get_static_input_buffer_for_entity>
 80216e6:	4680      	mov	r8, r0
 80216e8:	b328      	cbz	r0, 8021736 <on_request+0x8e>
 80216ea:	4630      	mov	r0, r6
 80216ec:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80216f0:	463a      	mov	r2, r7
 80216f2:	f106 0110 	add.w	r1, r6, #16
 80216f6:	f7fe fcd9 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 80216fa:	b930      	cbnz	r0, 802170a <on_request+0x62>
 80216fc:	4641      	mov	r1, r8
 80216fe:	4810      	ldr	r0, [pc, #64]	@ (8021740 <on_request+0x98>)
 8021700:	b014      	add	sp, #80	@ 0x50
 8021702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021706:	f7fc bfd5 	b.w	801e6b4 <put_memory>
 802170a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802170c:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 8021710:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8021714:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 8021718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802171c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021720:	e88c 0003 	stmia.w	ip, {r0, r1}
 8021724:	f7f4 f982 	bl	8015a2c <rmw_uros_epoch_nanos>
 8021728:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 802172c:	2303      	movs	r3, #3
 802172e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8021732:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8021736:	b014      	add	sp, #80	@ 0x50
 8021738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802173c:	24069214 	.word	0x24069214
 8021740:	24069234 	.word	0x24069234

08021744 <on_reply>:
 8021744:	4822      	ldr	r0, [pc, #136]	@ (80217d0 <on_reply+0x8c>)
 8021746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802174a:	6800      	ldr	r0, [r0, #0]
 802174c:	b094      	sub	sp, #80	@ 0x50
 802174e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021750:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8021754:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021756:	b3b8      	cbz	r0, 80217c8 <on_reply+0x84>
 8021758:	461d      	mov	r5, r3
 802175a:	e001      	b.n	8021760 <on_reply+0x1c>
 802175c:	6840      	ldr	r0, [r0, #4]
 802175e:	b398      	cbz	r0, 80217c8 <on_reply+0x84>
 8021760:	6884      	ldr	r4, [r0, #8]
 8021762:	8b21      	ldrh	r1, [r4, #24]
 8021764:	4291      	cmp	r1, r2
 8021766:	d1f9      	bne.n	802175c <on_reply+0x18>
 8021768:	2248      	movs	r2, #72	@ 0x48
 802176a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 802176e:	4668      	mov	r0, sp
 8021770:	f000 fecd 	bl	802250e <memcpy>
 8021774:	f104 0320 	add.w	r3, r4, #32
 8021778:	4620      	mov	r0, r4
 802177a:	cb0c      	ldmia	r3, {r2, r3}
 802177c:	f7f4 fb58 	bl	8015e30 <rmw_uxrce_get_static_input_buffer_for_entity>
 8021780:	4680      	mov	r8, r0
 8021782:	b308      	cbz	r0, 80217c8 <on_reply+0x84>
 8021784:	4630      	mov	r0, r6
 8021786:	f8d8 6008 	ldr.w	r6, [r8, #8]
 802178a:	463a      	mov	r2, r7
 802178c:	f106 0110 	add.w	r1, r6, #16
 8021790:	f7fe fc8c 	bl	80200ac <ucdr_deserialize_array_uint8_t>
 8021794:	b930      	cbnz	r0, 80217a4 <on_reply+0x60>
 8021796:	4641      	mov	r1, r8
 8021798:	480e      	ldr	r0, [pc, #56]	@ (80217d4 <on_reply+0x90>)
 802179a:	b014      	add	sp, #80	@ 0x50
 802179c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80217a0:	f7fc bf88 	b.w	801e6b4 <put_memory>
 80217a4:	2200      	movs	r2, #0
 80217a6:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80217aa:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80217ae:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 80217b2:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 80217b6:	f7f4 f939 	bl	8015a2c <rmw_uros_epoch_nanos>
 80217ba:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80217be:	2304      	movs	r3, #4
 80217c0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80217c4:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80217c8:	b014      	add	sp, #80	@ 0x50
 80217ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217ce:	bf00      	nop
 80217d0:	24064928 	.word	0x24064928
 80217d4:	24069234 	.word	0x24069234

080217d8 <rmw_create_guard_condition>:
 80217d8:	b538      	push	{r3, r4, r5, lr}
 80217da:	4605      	mov	r5, r0
 80217dc:	4808      	ldr	r0, [pc, #32]	@ (8021800 <rmw_create_guard_condition+0x28>)
 80217de:	f7fc ff59 	bl	801e694 <get_memory>
 80217e2:	4603      	mov	r3, r0
 80217e4:	b148      	cbz	r0, 80217fa <rmw_create_guard_condition+0x22>
 80217e6:	6884      	ldr	r4, [r0, #8]
 80217e8:	2300      	movs	r3, #0
 80217ea:	61e5      	str	r5, [r4, #28]
 80217ec:	7423      	strb	r3, [r4, #16]
 80217ee:	f7fc ffb9 	bl	801e764 <rmw_get_implementation_identifier>
 80217f2:	f104 0314 	add.w	r3, r4, #20
 80217f6:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80217fa:	4618      	mov	r0, r3
 80217fc:	bd38      	pop	{r3, r4, r5, pc}
 80217fe:	bf00      	nop
 8021800:	240691d4 	.word	0x240691d4

08021804 <rmw_destroy_guard_condition>:
 8021804:	b508      	push	{r3, lr}
 8021806:	4b08      	ldr	r3, [pc, #32]	@ (8021828 <rmw_destroy_guard_condition+0x24>)
 8021808:	6819      	ldr	r1, [r3, #0]
 802180a:	b911      	cbnz	r1, 8021812 <rmw_destroy_guard_condition+0xe>
 802180c:	e00a      	b.n	8021824 <rmw_destroy_guard_condition+0x20>
 802180e:	6849      	ldr	r1, [r1, #4]
 8021810:	b141      	cbz	r1, 8021824 <rmw_destroy_guard_condition+0x20>
 8021812:	688b      	ldr	r3, [r1, #8]
 8021814:	3314      	adds	r3, #20
 8021816:	4298      	cmp	r0, r3
 8021818:	d1f9      	bne.n	802180e <rmw_destroy_guard_condition+0xa>
 802181a:	4803      	ldr	r0, [pc, #12]	@ (8021828 <rmw_destroy_guard_condition+0x24>)
 802181c:	f7fc ff4a 	bl	801e6b4 <put_memory>
 8021820:	2000      	movs	r0, #0
 8021822:	bd08      	pop	{r3, pc}
 8021824:	2001      	movs	r0, #1
 8021826:	bd08      	pop	{r3, pc}
 8021828:	240691d4 	.word	0x240691d4

0802182c <rmw_trigger_guard_condition>:
 802182c:	b160      	cbz	r0, 8021848 <rmw_trigger_guard_condition+0x1c>
 802182e:	b510      	push	{r4, lr}
 8021830:	4604      	mov	r4, r0
 8021832:	6800      	ldr	r0, [r0, #0]
 8021834:	f7f4 fd10 	bl	8016258 <is_uxrce_rmw_identifier_valid>
 8021838:	b908      	cbnz	r0, 802183e <rmw_trigger_guard_condition+0x12>
 802183a:	2001      	movs	r0, #1
 802183c:	bd10      	pop	{r4, pc}
 802183e:	6863      	ldr	r3, [r4, #4]
 8021840:	2201      	movs	r2, #1
 8021842:	2000      	movs	r0, #0
 8021844:	741a      	strb	r2, [r3, #16]
 8021846:	bd10      	pop	{r4, pc}
 8021848:	2001      	movs	r0, #1
 802184a:	4770      	bx	lr

0802184c <rosidl_runtime_c__String__init>:
 802184c:	b510      	push	{r4, lr}
 802184e:	4604      	mov	r4, r0
 8021850:	b086      	sub	sp, #24
 8021852:	b170      	cbz	r0, 8021872 <rosidl_runtime_c__String__init+0x26>
 8021854:	a801      	add	r0, sp, #4
 8021856:	f7f3 fe29 	bl	80154ac <rcutils_get_default_allocator>
 802185a:	9b01      	ldr	r3, [sp, #4]
 802185c:	9905      	ldr	r1, [sp, #20]
 802185e:	2001      	movs	r0, #1
 8021860:	4798      	blx	r3
 8021862:	6020      	str	r0, [r4, #0]
 8021864:	b128      	cbz	r0, 8021872 <rosidl_runtime_c__String__init+0x26>
 8021866:	2100      	movs	r1, #0
 8021868:	2201      	movs	r2, #1
 802186a:	7001      	strb	r1, [r0, #0]
 802186c:	4610      	mov	r0, r2
 802186e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8021872:	b006      	add	sp, #24
 8021874:	bd10      	pop	{r4, pc}
 8021876:	bf00      	nop

08021878 <rosidl_runtime_c__String__fini>:
 8021878:	b320      	cbz	r0, 80218c4 <rosidl_runtime_c__String__fini+0x4c>
 802187a:	6803      	ldr	r3, [r0, #0]
 802187c:	b510      	push	{r4, lr}
 802187e:	4604      	mov	r4, r0
 8021880:	b086      	sub	sp, #24
 8021882:	b173      	cbz	r3, 80218a2 <rosidl_runtime_c__String__fini+0x2a>
 8021884:	6883      	ldr	r3, [r0, #8]
 8021886:	b1f3      	cbz	r3, 80218c6 <rosidl_runtime_c__String__fini+0x4e>
 8021888:	a801      	add	r0, sp, #4
 802188a:	f7f3 fe0f 	bl	80154ac <rcutils_get_default_allocator>
 802188e:	9b02      	ldr	r3, [sp, #8]
 8021890:	9905      	ldr	r1, [sp, #20]
 8021892:	6820      	ldr	r0, [r4, #0]
 8021894:	4798      	blx	r3
 8021896:	2300      	movs	r3, #0
 8021898:	e9c4 3300 	strd	r3, r3, [r4]
 802189c:	60a3      	str	r3, [r4, #8]
 802189e:	b006      	add	sp, #24
 80218a0:	bd10      	pop	{r4, pc}
 80218a2:	6843      	ldr	r3, [r0, #4]
 80218a4:	b9db      	cbnz	r3, 80218de <rosidl_runtime_c__String__fini+0x66>
 80218a6:	6883      	ldr	r3, [r0, #8]
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	d0f8      	beq.n	802189e <rosidl_runtime_c__String__fini+0x26>
 80218ac:	4b12      	ldr	r3, [pc, #72]	@ (80218f8 <rosidl_runtime_c__String__fini+0x80>)
 80218ae:	2251      	movs	r2, #81	@ 0x51
 80218b0:	2101      	movs	r1, #1
 80218b2:	4812      	ldr	r0, [pc, #72]	@ (80218fc <rosidl_runtime_c__String__fini+0x84>)
 80218b4:	681b      	ldr	r3, [r3, #0]
 80218b6:	68db      	ldr	r3, [r3, #12]
 80218b8:	f000 fb8e 	bl	8021fd8 <fwrite>
 80218bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218c0:	f000 f84a 	bl	8021958 <exit>
 80218c4:	4770      	bx	lr
 80218c6:	4b0c      	ldr	r3, [pc, #48]	@ (80218f8 <rosidl_runtime_c__String__fini+0x80>)
 80218c8:	224c      	movs	r2, #76	@ 0x4c
 80218ca:	2101      	movs	r1, #1
 80218cc:	480c      	ldr	r0, [pc, #48]	@ (8021900 <rosidl_runtime_c__String__fini+0x88>)
 80218ce:	681b      	ldr	r3, [r3, #0]
 80218d0:	68db      	ldr	r3, [r3, #12]
 80218d2:	f000 fb81 	bl	8021fd8 <fwrite>
 80218d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218da:	f000 f83d 	bl	8021958 <exit>
 80218de:	4b06      	ldr	r3, [pc, #24]	@ (80218f8 <rosidl_runtime_c__String__fini+0x80>)
 80218e0:	224e      	movs	r2, #78	@ 0x4e
 80218e2:	2101      	movs	r1, #1
 80218e4:	4807      	ldr	r0, [pc, #28]	@ (8021904 <rosidl_runtime_c__String__fini+0x8c>)
 80218e6:	681b      	ldr	r3, [r3, #0]
 80218e8:	68db      	ldr	r3, [r3, #12]
 80218ea:	f000 fb75 	bl	8021fd8 <fwrite>
 80218ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218f2:	f000 f831 	bl	8021958 <exit>
 80218f6:	bf00      	nop
 80218f8:	240012bc 	.word	0x240012bc
 80218fc:	08025ad8 	.word	0x08025ad8
 8021900:	08025a38 	.word	0x08025a38
 8021904:	08025a88 	.word	0x08025a88

08021908 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 8021908:	3800      	subs	r0, #0
 802190a:	bf18      	it	ne
 802190c:	2001      	movne	r0, #1
 802190e:	4770      	bx	lr

08021910 <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 8021910:	4770      	bx	lr
 8021912:	bf00      	nop

08021914 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 8021914:	3800      	subs	r0, #0
 8021916:	bf18      	it	ne
 8021918:	2001      	movne	r0, #1
 802191a:	4770      	bx	lr

0802191c <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 802191c:	4770      	bx	lr
 802191e:	bf00      	nop

08021920 <calloc>:
 8021920:	4b02      	ldr	r3, [pc, #8]	@ (802192c <calloc+0xc>)
 8021922:	460a      	mov	r2, r1
 8021924:	4601      	mov	r1, r0
 8021926:	6818      	ldr	r0, [r3, #0]
 8021928:	f000 b802 	b.w	8021930 <_calloc_r>
 802192c:	240012bc 	.word	0x240012bc

08021930 <_calloc_r>:
 8021930:	b570      	push	{r4, r5, r6, lr}
 8021932:	fba1 5402 	umull	r5, r4, r1, r2
 8021936:	b93c      	cbnz	r4, 8021948 <_calloc_r+0x18>
 8021938:	4629      	mov	r1, r5
 802193a:	f000 f899 	bl	8021a70 <_malloc_r>
 802193e:	4606      	mov	r6, r0
 8021940:	b928      	cbnz	r0, 802194e <_calloc_r+0x1e>
 8021942:	2600      	movs	r6, #0
 8021944:	4630      	mov	r0, r6
 8021946:	bd70      	pop	{r4, r5, r6, pc}
 8021948:	220c      	movs	r2, #12
 802194a:	6002      	str	r2, [r0, #0]
 802194c:	e7f9      	b.n	8021942 <_calloc_r+0x12>
 802194e:	462a      	mov	r2, r5
 8021950:	4621      	mov	r1, r4
 8021952:	f000 fcbd 	bl	80222d0 <memset>
 8021956:	e7f5      	b.n	8021944 <_calloc_r+0x14>

08021958 <exit>:
 8021958:	b508      	push	{r3, lr}
 802195a:	4b06      	ldr	r3, [pc, #24]	@ (8021974 <exit+0x1c>)
 802195c:	4604      	mov	r4, r0
 802195e:	b113      	cbz	r3, 8021966 <exit+0xe>
 8021960:	2100      	movs	r1, #0
 8021962:	f3af 8000 	nop.w
 8021966:	4b04      	ldr	r3, [pc, #16]	@ (8021978 <exit+0x20>)
 8021968:	681b      	ldr	r3, [r3, #0]
 802196a:	b103      	cbz	r3, 802196e <exit+0x16>
 802196c:	4798      	blx	r3
 802196e:	4620      	mov	r0, r4
 8021970:	f7e0 fe2e 	bl	80025d0 <_exit>
 8021974:	00000000 	.word	0x00000000
 8021978:	240696e4 	.word	0x240696e4

0802197c <getenv>:
 802197c:	b507      	push	{r0, r1, r2, lr}
 802197e:	4b04      	ldr	r3, [pc, #16]	@ (8021990 <getenv+0x14>)
 8021980:	4601      	mov	r1, r0
 8021982:	aa01      	add	r2, sp, #4
 8021984:	6818      	ldr	r0, [r3, #0]
 8021986:	f000 f805 	bl	8021994 <_findenv_r>
 802198a:	b003      	add	sp, #12
 802198c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021990:	240012bc 	.word	0x240012bc

08021994 <_findenv_r>:
 8021994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021998:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8021a08 <_findenv_r+0x74>
 802199c:	4606      	mov	r6, r0
 802199e:	4689      	mov	r9, r1
 80219a0:	4617      	mov	r7, r2
 80219a2:	f000 fde1 	bl	8022568 <__env_lock>
 80219a6:	f8da 4000 	ldr.w	r4, [sl]
 80219aa:	b134      	cbz	r4, 80219ba <_findenv_r+0x26>
 80219ac:	464b      	mov	r3, r9
 80219ae:	4698      	mov	r8, r3
 80219b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80219b4:	b13a      	cbz	r2, 80219c6 <_findenv_r+0x32>
 80219b6:	2a3d      	cmp	r2, #61	@ 0x3d
 80219b8:	d1f9      	bne.n	80219ae <_findenv_r+0x1a>
 80219ba:	4630      	mov	r0, r6
 80219bc:	f000 fdda 	bl	8022574 <__env_unlock>
 80219c0:	2000      	movs	r0, #0
 80219c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219c6:	eba8 0809 	sub.w	r8, r8, r9
 80219ca:	46a3      	mov	fp, r4
 80219cc:	f854 0b04 	ldr.w	r0, [r4], #4
 80219d0:	2800      	cmp	r0, #0
 80219d2:	d0f2      	beq.n	80219ba <_findenv_r+0x26>
 80219d4:	4642      	mov	r2, r8
 80219d6:	4649      	mov	r1, r9
 80219d8:	f000 fc8f 	bl	80222fa <strncmp>
 80219dc:	2800      	cmp	r0, #0
 80219de:	d1f4      	bne.n	80219ca <_findenv_r+0x36>
 80219e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80219e4:	eb03 0508 	add.w	r5, r3, r8
 80219e8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80219ec:	2b3d      	cmp	r3, #61	@ 0x3d
 80219ee:	d1ec      	bne.n	80219ca <_findenv_r+0x36>
 80219f0:	f8da 3000 	ldr.w	r3, [sl]
 80219f4:	ebab 0303 	sub.w	r3, fp, r3
 80219f8:	109b      	asrs	r3, r3, #2
 80219fa:	4630      	mov	r0, r6
 80219fc:	603b      	str	r3, [r7, #0]
 80219fe:	f000 fdb9 	bl	8022574 <__env_unlock>
 8021a02:	1c68      	adds	r0, r5, #1
 8021a04:	e7dd      	b.n	80219c2 <_findenv_r+0x2e>
 8021a06:	bf00      	nop
 8021a08:	24000000 	.word	0x24000000

08021a0c <malloc>:
 8021a0c:	4b02      	ldr	r3, [pc, #8]	@ (8021a18 <malloc+0xc>)
 8021a0e:	4601      	mov	r1, r0
 8021a10:	6818      	ldr	r0, [r3, #0]
 8021a12:	f000 b82d 	b.w	8021a70 <_malloc_r>
 8021a16:	bf00      	nop
 8021a18:	240012bc 	.word	0x240012bc

08021a1c <free>:
 8021a1c:	4b02      	ldr	r3, [pc, #8]	@ (8021a28 <free+0xc>)
 8021a1e:	4601      	mov	r1, r0
 8021a20:	6818      	ldr	r0, [r3, #0]
 8021a22:	f000 bdad 	b.w	8022580 <_free_r>
 8021a26:	bf00      	nop
 8021a28:	240012bc 	.word	0x240012bc

08021a2c <sbrk_aligned>:
 8021a2c:	b570      	push	{r4, r5, r6, lr}
 8021a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8021a6c <sbrk_aligned+0x40>)
 8021a30:	460c      	mov	r4, r1
 8021a32:	6831      	ldr	r1, [r6, #0]
 8021a34:	4605      	mov	r5, r0
 8021a36:	b911      	cbnz	r1, 8021a3e <sbrk_aligned+0x12>
 8021a38:	f000 fd12 	bl	8022460 <_sbrk_r>
 8021a3c:	6030      	str	r0, [r6, #0]
 8021a3e:	4621      	mov	r1, r4
 8021a40:	4628      	mov	r0, r5
 8021a42:	f000 fd0d 	bl	8022460 <_sbrk_r>
 8021a46:	1c43      	adds	r3, r0, #1
 8021a48:	d103      	bne.n	8021a52 <sbrk_aligned+0x26>
 8021a4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8021a4e:	4620      	mov	r0, r4
 8021a50:	bd70      	pop	{r4, r5, r6, pc}
 8021a52:	1cc4      	adds	r4, r0, #3
 8021a54:	f024 0403 	bic.w	r4, r4, #3
 8021a58:	42a0      	cmp	r0, r4
 8021a5a:	d0f8      	beq.n	8021a4e <sbrk_aligned+0x22>
 8021a5c:	1a21      	subs	r1, r4, r0
 8021a5e:	4628      	mov	r0, r5
 8021a60:	f000 fcfe 	bl	8022460 <_sbrk_r>
 8021a64:	3001      	adds	r0, #1
 8021a66:	d1f2      	bne.n	8021a4e <sbrk_aligned+0x22>
 8021a68:	e7ef      	b.n	8021a4a <sbrk_aligned+0x1e>
 8021a6a:	bf00      	nop
 8021a6c:	240695a4 	.word	0x240695a4

08021a70 <_malloc_r>:
 8021a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a74:	1ccd      	adds	r5, r1, #3
 8021a76:	f025 0503 	bic.w	r5, r5, #3
 8021a7a:	3508      	adds	r5, #8
 8021a7c:	2d0c      	cmp	r5, #12
 8021a7e:	bf38      	it	cc
 8021a80:	250c      	movcc	r5, #12
 8021a82:	2d00      	cmp	r5, #0
 8021a84:	4606      	mov	r6, r0
 8021a86:	db01      	blt.n	8021a8c <_malloc_r+0x1c>
 8021a88:	42a9      	cmp	r1, r5
 8021a8a:	d904      	bls.n	8021a96 <_malloc_r+0x26>
 8021a8c:	230c      	movs	r3, #12
 8021a8e:	6033      	str	r3, [r6, #0]
 8021a90:	2000      	movs	r0, #0
 8021a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021b6c <_malloc_r+0xfc>
 8021a9a:	f000 f869 	bl	8021b70 <__malloc_lock>
 8021a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8021aa2:	461c      	mov	r4, r3
 8021aa4:	bb44      	cbnz	r4, 8021af8 <_malloc_r+0x88>
 8021aa6:	4629      	mov	r1, r5
 8021aa8:	4630      	mov	r0, r6
 8021aaa:	f7ff ffbf 	bl	8021a2c <sbrk_aligned>
 8021aae:	1c43      	adds	r3, r0, #1
 8021ab0:	4604      	mov	r4, r0
 8021ab2:	d158      	bne.n	8021b66 <_malloc_r+0xf6>
 8021ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8021ab8:	4627      	mov	r7, r4
 8021aba:	2f00      	cmp	r7, #0
 8021abc:	d143      	bne.n	8021b46 <_malloc_r+0xd6>
 8021abe:	2c00      	cmp	r4, #0
 8021ac0:	d04b      	beq.n	8021b5a <_malloc_r+0xea>
 8021ac2:	6823      	ldr	r3, [r4, #0]
 8021ac4:	4639      	mov	r1, r7
 8021ac6:	4630      	mov	r0, r6
 8021ac8:	eb04 0903 	add.w	r9, r4, r3
 8021acc:	f000 fcc8 	bl	8022460 <_sbrk_r>
 8021ad0:	4581      	cmp	r9, r0
 8021ad2:	d142      	bne.n	8021b5a <_malloc_r+0xea>
 8021ad4:	6821      	ldr	r1, [r4, #0]
 8021ad6:	1a6d      	subs	r5, r5, r1
 8021ad8:	4629      	mov	r1, r5
 8021ada:	4630      	mov	r0, r6
 8021adc:	f7ff ffa6 	bl	8021a2c <sbrk_aligned>
 8021ae0:	3001      	adds	r0, #1
 8021ae2:	d03a      	beq.n	8021b5a <_malloc_r+0xea>
 8021ae4:	6823      	ldr	r3, [r4, #0]
 8021ae6:	442b      	add	r3, r5
 8021ae8:	6023      	str	r3, [r4, #0]
 8021aea:	f8d8 3000 	ldr.w	r3, [r8]
 8021aee:	685a      	ldr	r2, [r3, #4]
 8021af0:	bb62      	cbnz	r2, 8021b4c <_malloc_r+0xdc>
 8021af2:	f8c8 7000 	str.w	r7, [r8]
 8021af6:	e00f      	b.n	8021b18 <_malloc_r+0xa8>
 8021af8:	6822      	ldr	r2, [r4, #0]
 8021afa:	1b52      	subs	r2, r2, r5
 8021afc:	d420      	bmi.n	8021b40 <_malloc_r+0xd0>
 8021afe:	2a0b      	cmp	r2, #11
 8021b00:	d917      	bls.n	8021b32 <_malloc_r+0xc2>
 8021b02:	1961      	adds	r1, r4, r5
 8021b04:	42a3      	cmp	r3, r4
 8021b06:	6025      	str	r5, [r4, #0]
 8021b08:	bf18      	it	ne
 8021b0a:	6059      	strne	r1, [r3, #4]
 8021b0c:	6863      	ldr	r3, [r4, #4]
 8021b0e:	bf08      	it	eq
 8021b10:	f8c8 1000 	streq.w	r1, [r8]
 8021b14:	5162      	str	r2, [r4, r5]
 8021b16:	604b      	str	r3, [r1, #4]
 8021b18:	4630      	mov	r0, r6
 8021b1a:	f000 f82f 	bl	8021b7c <__malloc_unlock>
 8021b1e:	f104 000b 	add.w	r0, r4, #11
 8021b22:	1d23      	adds	r3, r4, #4
 8021b24:	f020 0007 	bic.w	r0, r0, #7
 8021b28:	1ac2      	subs	r2, r0, r3
 8021b2a:	bf1c      	itt	ne
 8021b2c:	1a1b      	subne	r3, r3, r0
 8021b2e:	50a3      	strne	r3, [r4, r2]
 8021b30:	e7af      	b.n	8021a92 <_malloc_r+0x22>
 8021b32:	6862      	ldr	r2, [r4, #4]
 8021b34:	42a3      	cmp	r3, r4
 8021b36:	bf0c      	ite	eq
 8021b38:	f8c8 2000 	streq.w	r2, [r8]
 8021b3c:	605a      	strne	r2, [r3, #4]
 8021b3e:	e7eb      	b.n	8021b18 <_malloc_r+0xa8>
 8021b40:	4623      	mov	r3, r4
 8021b42:	6864      	ldr	r4, [r4, #4]
 8021b44:	e7ae      	b.n	8021aa4 <_malloc_r+0x34>
 8021b46:	463c      	mov	r4, r7
 8021b48:	687f      	ldr	r7, [r7, #4]
 8021b4a:	e7b6      	b.n	8021aba <_malloc_r+0x4a>
 8021b4c:	461a      	mov	r2, r3
 8021b4e:	685b      	ldr	r3, [r3, #4]
 8021b50:	42a3      	cmp	r3, r4
 8021b52:	d1fb      	bne.n	8021b4c <_malloc_r+0xdc>
 8021b54:	2300      	movs	r3, #0
 8021b56:	6053      	str	r3, [r2, #4]
 8021b58:	e7de      	b.n	8021b18 <_malloc_r+0xa8>
 8021b5a:	230c      	movs	r3, #12
 8021b5c:	6033      	str	r3, [r6, #0]
 8021b5e:	4630      	mov	r0, r6
 8021b60:	f000 f80c 	bl	8021b7c <__malloc_unlock>
 8021b64:	e794      	b.n	8021a90 <_malloc_r+0x20>
 8021b66:	6005      	str	r5, [r0, #0]
 8021b68:	e7d6      	b.n	8021b18 <_malloc_r+0xa8>
 8021b6a:	bf00      	nop
 8021b6c:	240695a8 	.word	0x240695a8

08021b70 <__malloc_lock>:
 8021b70:	4801      	ldr	r0, [pc, #4]	@ (8021b78 <__malloc_lock+0x8>)
 8021b72:	f000 bcc2 	b.w	80224fa <__retarget_lock_acquire_recursive>
 8021b76:	bf00      	nop
 8021b78:	240696ed 	.word	0x240696ed

08021b7c <__malloc_unlock>:
 8021b7c:	4801      	ldr	r0, [pc, #4]	@ (8021b84 <__malloc_unlock+0x8>)
 8021b7e:	f000 bcbd 	b.w	80224fc <__retarget_lock_release_recursive>
 8021b82:	bf00      	nop
 8021b84:	240696ed 	.word	0x240696ed

08021b88 <srand>:
 8021b88:	b538      	push	{r3, r4, r5, lr}
 8021b8a:	4b10      	ldr	r3, [pc, #64]	@ (8021bcc <srand+0x44>)
 8021b8c:	681d      	ldr	r5, [r3, #0]
 8021b8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021b90:	4604      	mov	r4, r0
 8021b92:	b9b3      	cbnz	r3, 8021bc2 <srand+0x3a>
 8021b94:	2018      	movs	r0, #24
 8021b96:	f7ff ff39 	bl	8021a0c <malloc>
 8021b9a:	4602      	mov	r2, r0
 8021b9c:	6328      	str	r0, [r5, #48]	@ 0x30
 8021b9e:	b920      	cbnz	r0, 8021baa <srand+0x22>
 8021ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8021bd0 <srand+0x48>)
 8021ba2:	480c      	ldr	r0, [pc, #48]	@ (8021bd4 <srand+0x4c>)
 8021ba4:	2146      	movs	r1, #70	@ 0x46
 8021ba6:	f000 fcc1 	bl	802252c <__assert_func>
 8021baa:	490b      	ldr	r1, [pc, #44]	@ (8021bd8 <srand+0x50>)
 8021bac:	4b0b      	ldr	r3, [pc, #44]	@ (8021bdc <srand+0x54>)
 8021bae:	e9c0 1300 	strd	r1, r3, [r0]
 8021bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8021be0 <srand+0x58>)
 8021bb4:	6083      	str	r3, [r0, #8]
 8021bb6:	230b      	movs	r3, #11
 8021bb8:	8183      	strh	r3, [r0, #12]
 8021bba:	2100      	movs	r1, #0
 8021bbc:	2001      	movs	r0, #1
 8021bbe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021bc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021bc4:	2200      	movs	r2, #0
 8021bc6:	611c      	str	r4, [r3, #16]
 8021bc8:	615a      	str	r2, [r3, #20]
 8021bca:	bd38      	pop	{r3, r4, r5, pc}
 8021bcc:	240012bc 	.word	0x240012bc
 8021bd0:	08025b2a 	.word	0x08025b2a
 8021bd4:	08025b41 	.word	0x08025b41
 8021bd8:	abcd330e 	.word	0xabcd330e
 8021bdc:	e66d1234 	.word	0xe66d1234
 8021be0:	0005deec 	.word	0x0005deec

08021be4 <rand>:
 8021be4:	4b16      	ldr	r3, [pc, #88]	@ (8021c40 <rand+0x5c>)
 8021be6:	b510      	push	{r4, lr}
 8021be8:	681c      	ldr	r4, [r3, #0]
 8021bea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021bec:	b9b3      	cbnz	r3, 8021c1c <rand+0x38>
 8021bee:	2018      	movs	r0, #24
 8021bf0:	f7ff ff0c 	bl	8021a0c <malloc>
 8021bf4:	4602      	mov	r2, r0
 8021bf6:	6320      	str	r0, [r4, #48]	@ 0x30
 8021bf8:	b920      	cbnz	r0, 8021c04 <rand+0x20>
 8021bfa:	4b12      	ldr	r3, [pc, #72]	@ (8021c44 <rand+0x60>)
 8021bfc:	4812      	ldr	r0, [pc, #72]	@ (8021c48 <rand+0x64>)
 8021bfe:	2152      	movs	r1, #82	@ 0x52
 8021c00:	f000 fc94 	bl	802252c <__assert_func>
 8021c04:	4911      	ldr	r1, [pc, #68]	@ (8021c4c <rand+0x68>)
 8021c06:	4b12      	ldr	r3, [pc, #72]	@ (8021c50 <rand+0x6c>)
 8021c08:	e9c0 1300 	strd	r1, r3, [r0]
 8021c0c:	4b11      	ldr	r3, [pc, #68]	@ (8021c54 <rand+0x70>)
 8021c0e:	6083      	str	r3, [r0, #8]
 8021c10:	230b      	movs	r3, #11
 8021c12:	8183      	strh	r3, [r0, #12]
 8021c14:	2100      	movs	r1, #0
 8021c16:	2001      	movs	r0, #1
 8021c18:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021c1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021c1e:	480e      	ldr	r0, [pc, #56]	@ (8021c58 <rand+0x74>)
 8021c20:	690b      	ldr	r3, [r1, #16]
 8021c22:	694c      	ldr	r4, [r1, #20]
 8021c24:	4a0d      	ldr	r2, [pc, #52]	@ (8021c5c <rand+0x78>)
 8021c26:	4358      	muls	r0, r3
 8021c28:	fb02 0004 	mla	r0, r2, r4, r0
 8021c2c:	fba3 3202 	umull	r3, r2, r3, r2
 8021c30:	3301      	adds	r3, #1
 8021c32:	eb40 0002 	adc.w	r0, r0, r2
 8021c36:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021c3a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021c3e:	bd10      	pop	{r4, pc}
 8021c40:	240012bc 	.word	0x240012bc
 8021c44:	08025b2a 	.word	0x08025b2a
 8021c48:	08025b41 	.word	0x08025b41
 8021c4c:	abcd330e 	.word	0xabcd330e
 8021c50:	e66d1234 	.word	0xe66d1234
 8021c54:	0005deec 	.word	0x0005deec
 8021c58:	5851f42d 	.word	0x5851f42d
 8021c5c:	4c957f2d 	.word	0x4c957f2d

08021c60 <realloc>:
 8021c60:	4b02      	ldr	r3, [pc, #8]	@ (8021c6c <realloc+0xc>)
 8021c62:	460a      	mov	r2, r1
 8021c64:	4601      	mov	r1, r0
 8021c66:	6818      	ldr	r0, [r3, #0]
 8021c68:	f000 b802 	b.w	8021c70 <_realloc_r>
 8021c6c:	240012bc 	.word	0x240012bc

08021c70 <_realloc_r>:
 8021c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c74:	4680      	mov	r8, r0
 8021c76:	4615      	mov	r5, r2
 8021c78:	460c      	mov	r4, r1
 8021c7a:	b921      	cbnz	r1, 8021c86 <_realloc_r+0x16>
 8021c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021c80:	4611      	mov	r1, r2
 8021c82:	f7ff bef5 	b.w	8021a70 <_malloc_r>
 8021c86:	b92a      	cbnz	r2, 8021c94 <_realloc_r+0x24>
 8021c88:	f000 fc7a 	bl	8022580 <_free_r>
 8021c8c:	2400      	movs	r4, #0
 8021c8e:	4620      	mov	r0, r4
 8021c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c94:	f000 fcbe 	bl	8022614 <_malloc_usable_size_r>
 8021c98:	4285      	cmp	r5, r0
 8021c9a:	4606      	mov	r6, r0
 8021c9c:	d802      	bhi.n	8021ca4 <_realloc_r+0x34>
 8021c9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021ca2:	d8f4      	bhi.n	8021c8e <_realloc_r+0x1e>
 8021ca4:	4629      	mov	r1, r5
 8021ca6:	4640      	mov	r0, r8
 8021ca8:	f7ff fee2 	bl	8021a70 <_malloc_r>
 8021cac:	4607      	mov	r7, r0
 8021cae:	2800      	cmp	r0, #0
 8021cb0:	d0ec      	beq.n	8021c8c <_realloc_r+0x1c>
 8021cb2:	42b5      	cmp	r5, r6
 8021cb4:	462a      	mov	r2, r5
 8021cb6:	4621      	mov	r1, r4
 8021cb8:	bf28      	it	cs
 8021cba:	4632      	movcs	r2, r6
 8021cbc:	f000 fc27 	bl	802250e <memcpy>
 8021cc0:	4621      	mov	r1, r4
 8021cc2:	4640      	mov	r0, r8
 8021cc4:	f000 fc5c 	bl	8022580 <_free_r>
 8021cc8:	463c      	mov	r4, r7
 8021cca:	e7e0      	b.n	8021c8e <_realloc_r+0x1e>

08021ccc <_strtoul_l.constprop.0>:
 8021ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021cd0:	4e34      	ldr	r6, [pc, #208]	@ (8021da4 <_strtoul_l.constprop.0+0xd8>)
 8021cd2:	4686      	mov	lr, r0
 8021cd4:	460d      	mov	r5, r1
 8021cd6:	4628      	mov	r0, r5
 8021cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021cdc:	5d37      	ldrb	r7, [r6, r4]
 8021cde:	f017 0708 	ands.w	r7, r7, #8
 8021ce2:	d1f8      	bne.n	8021cd6 <_strtoul_l.constprop.0+0xa>
 8021ce4:	2c2d      	cmp	r4, #45	@ 0x2d
 8021ce6:	d12f      	bne.n	8021d48 <_strtoul_l.constprop.0+0x7c>
 8021ce8:	782c      	ldrb	r4, [r5, #0]
 8021cea:	2701      	movs	r7, #1
 8021cec:	1c85      	adds	r5, r0, #2
 8021cee:	f033 0010 	bics.w	r0, r3, #16
 8021cf2:	d109      	bne.n	8021d08 <_strtoul_l.constprop.0+0x3c>
 8021cf4:	2c30      	cmp	r4, #48	@ 0x30
 8021cf6:	d12c      	bne.n	8021d52 <_strtoul_l.constprop.0+0x86>
 8021cf8:	7828      	ldrb	r0, [r5, #0]
 8021cfa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021cfe:	2858      	cmp	r0, #88	@ 0x58
 8021d00:	d127      	bne.n	8021d52 <_strtoul_l.constprop.0+0x86>
 8021d02:	786c      	ldrb	r4, [r5, #1]
 8021d04:	2310      	movs	r3, #16
 8021d06:	3502      	adds	r5, #2
 8021d08:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8021d0c:	2600      	movs	r6, #0
 8021d0e:	fbb8 f8f3 	udiv	r8, r8, r3
 8021d12:	fb03 f908 	mul.w	r9, r3, r8
 8021d16:	ea6f 0909 	mvn.w	r9, r9
 8021d1a:	4630      	mov	r0, r6
 8021d1c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021d20:	f1bc 0f09 	cmp.w	ip, #9
 8021d24:	d81c      	bhi.n	8021d60 <_strtoul_l.constprop.0+0x94>
 8021d26:	4664      	mov	r4, ip
 8021d28:	42a3      	cmp	r3, r4
 8021d2a:	dd2a      	ble.n	8021d82 <_strtoul_l.constprop.0+0xb6>
 8021d2c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8021d30:	d007      	beq.n	8021d42 <_strtoul_l.constprop.0+0x76>
 8021d32:	4580      	cmp	r8, r0
 8021d34:	d322      	bcc.n	8021d7c <_strtoul_l.constprop.0+0xb0>
 8021d36:	d101      	bne.n	8021d3c <_strtoul_l.constprop.0+0x70>
 8021d38:	45a1      	cmp	r9, r4
 8021d3a:	db1f      	blt.n	8021d7c <_strtoul_l.constprop.0+0xb0>
 8021d3c:	fb00 4003 	mla	r0, r0, r3, r4
 8021d40:	2601      	movs	r6, #1
 8021d42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021d46:	e7e9      	b.n	8021d1c <_strtoul_l.constprop.0+0x50>
 8021d48:	2c2b      	cmp	r4, #43	@ 0x2b
 8021d4a:	bf04      	itt	eq
 8021d4c:	782c      	ldrbeq	r4, [r5, #0]
 8021d4e:	1c85      	addeq	r5, r0, #2
 8021d50:	e7cd      	b.n	8021cee <_strtoul_l.constprop.0+0x22>
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	d1d8      	bne.n	8021d08 <_strtoul_l.constprop.0+0x3c>
 8021d56:	2c30      	cmp	r4, #48	@ 0x30
 8021d58:	bf0c      	ite	eq
 8021d5a:	2308      	moveq	r3, #8
 8021d5c:	230a      	movne	r3, #10
 8021d5e:	e7d3      	b.n	8021d08 <_strtoul_l.constprop.0+0x3c>
 8021d60:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021d64:	f1bc 0f19 	cmp.w	ip, #25
 8021d68:	d801      	bhi.n	8021d6e <_strtoul_l.constprop.0+0xa2>
 8021d6a:	3c37      	subs	r4, #55	@ 0x37
 8021d6c:	e7dc      	b.n	8021d28 <_strtoul_l.constprop.0+0x5c>
 8021d6e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021d72:	f1bc 0f19 	cmp.w	ip, #25
 8021d76:	d804      	bhi.n	8021d82 <_strtoul_l.constprop.0+0xb6>
 8021d78:	3c57      	subs	r4, #87	@ 0x57
 8021d7a:	e7d5      	b.n	8021d28 <_strtoul_l.constprop.0+0x5c>
 8021d7c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8021d80:	e7df      	b.n	8021d42 <_strtoul_l.constprop.0+0x76>
 8021d82:	1c73      	adds	r3, r6, #1
 8021d84:	d106      	bne.n	8021d94 <_strtoul_l.constprop.0+0xc8>
 8021d86:	2322      	movs	r3, #34	@ 0x22
 8021d88:	f8ce 3000 	str.w	r3, [lr]
 8021d8c:	4630      	mov	r0, r6
 8021d8e:	b932      	cbnz	r2, 8021d9e <_strtoul_l.constprop.0+0xd2>
 8021d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d94:	b107      	cbz	r7, 8021d98 <_strtoul_l.constprop.0+0xcc>
 8021d96:	4240      	negs	r0, r0
 8021d98:	2a00      	cmp	r2, #0
 8021d9a:	d0f9      	beq.n	8021d90 <_strtoul_l.constprop.0+0xc4>
 8021d9c:	b106      	cbz	r6, 8021da0 <_strtoul_l.constprop.0+0xd4>
 8021d9e:	1e69      	subs	r1, r5, #1
 8021da0:	6011      	str	r1, [r2, #0]
 8021da2:	e7f5      	b.n	8021d90 <_strtoul_l.constprop.0+0xc4>
 8021da4:	08025b9a 	.word	0x08025b9a

08021da8 <strtoul>:
 8021da8:	4613      	mov	r3, r2
 8021daa:	460a      	mov	r2, r1
 8021dac:	4601      	mov	r1, r0
 8021dae:	4802      	ldr	r0, [pc, #8]	@ (8021db8 <strtoul+0x10>)
 8021db0:	6800      	ldr	r0, [r0, #0]
 8021db2:	f7ff bf8b 	b.w	8021ccc <_strtoul_l.constprop.0>
 8021db6:	bf00      	nop
 8021db8:	240012bc 	.word	0x240012bc

08021dbc <std>:
 8021dbc:	2300      	movs	r3, #0
 8021dbe:	b510      	push	{r4, lr}
 8021dc0:	4604      	mov	r4, r0
 8021dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8021dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021dca:	6083      	str	r3, [r0, #8]
 8021dcc:	8181      	strh	r1, [r0, #12]
 8021dce:	6643      	str	r3, [r0, #100]	@ 0x64
 8021dd0:	81c2      	strh	r2, [r0, #14]
 8021dd2:	6183      	str	r3, [r0, #24]
 8021dd4:	4619      	mov	r1, r3
 8021dd6:	2208      	movs	r2, #8
 8021dd8:	305c      	adds	r0, #92	@ 0x5c
 8021dda:	f000 fa79 	bl	80222d0 <memset>
 8021dde:	4b0d      	ldr	r3, [pc, #52]	@ (8021e14 <std+0x58>)
 8021de0:	6263      	str	r3, [r4, #36]	@ 0x24
 8021de2:	4b0d      	ldr	r3, [pc, #52]	@ (8021e18 <std+0x5c>)
 8021de4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021de6:	4b0d      	ldr	r3, [pc, #52]	@ (8021e1c <std+0x60>)
 8021de8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021dea:	4b0d      	ldr	r3, [pc, #52]	@ (8021e20 <std+0x64>)
 8021dec:	6323      	str	r3, [r4, #48]	@ 0x30
 8021dee:	4b0d      	ldr	r3, [pc, #52]	@ (8021e24 <std+0x68>)
 8021df0:	6224      	str	r4, [r4, #32]
 8021df2:	429c      	cmp	r4, r3
 8021df4:	d006      	beq.n	8021e04 <std+0x48>
 8021df6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021dfa:	4294      	cmp	r4, r2
 8021dfc:	d002      	beq.n	8021e04 <std+0x48>
 8021dfe:	33d0      	adds	r3, #208	@ 0xd0
 8021e00:	429c      	cmp	r4, r3
 8021e02:	d105      	bne.n	8021e10 <std+0x54>
 8021e04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e0c:	f000 bb74 	b.w	80224f8 <__retarget_lock_init_recursive>
 8021e10:	bd10      	pop	{r4, pc}
 8021e12:	bf00      	nop
 8021e14:	0802205d 	.word	0x0802205d
 8021e18:	0802207f 	.word	0x0802207f
 8021e1c:	080220b7 	.word	0x080220b7
 8021e20:	080220db 	.word	0x080220db
 8021e24:	240695ac 	.word	0x240695ac

08021e28 <stdio_exit_handler>:
 8021e28:	4a02      	ldr	r2, [pc, #8]	@ (8021e34 <stdio_exit_handler+0xc>)
 8021e2a:	4903      	ldr	r1, [pc, #12]	@ (8021e38 <stdio_exit_handler+0x10>)
 8021e2c:	4803      	ldr	r0, [pc, #12]	@ (8021e3c <stdio_exit_handler+0x14>)
 8021e2e:	f000 b869 	b.w	8021f04 <_fwalk_sglue>
 8021e32:	bf00      	nop
 8021e34:	240012b0 	.word	0x240012b0
 8021e38:	08022cf9 	.word	0x08022cf9
 8021e3c:	240012c0 	.word	0x240012c0

08021e40 <cleanup_stdio>:
 8021e40:	6841      	ldr	r1, [r0, #4]
 8021e42:	4b0c      	ldr	r3, [pc, #48]	@ (8021e74 <cleanup_stdio+0x34>)
 8021e44:	4299      	cmp	r1, r3
 8021e46:	b510      	push	{r4, lr}
 8021e48:	4604      	mov	r4, r0
 8021e4a:	d001      	beq.n	8021e50 <cleanup_stdio+0x10>
 8021e4c:	f000 ff54 	bl	8022cf8 <_fflush_r>
 8021e50:	68a1      	ldr	r1, [r4, #8]
 8021e52:	4b09      	ldr	r3, [pc, #36]	@ (8021e78 <cleanup_stdio+0x38>)
 8021e54:	4299      	cmp	r1, r3
 8021e56:	d002      	beq.n	8021e5e <cleanup_stdio+0x1e>
 8021e58:	4620      	mov	r0, r4
 8021e5a:	f000 ff4d 	bl	8022cf8 <_fflush_r>
 8021e5e:	68e1      	ldr	r1, [r4, #12]
 8021e60:	4b06      	ldr	r3, [pc, #24]	@ (8021e7c <cleanup_stdio+0x3c>)
 8021e62:	4299      	cmp	r1, r3
 8021e64:	d004      	beq.n	8021e70 <cleanup_stdio+0x30>
 8021e66:	4620      	mov	r0, r4
 8021e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e6c:	f000 bf44 	b.w	8022cf8 <_fflush_r>
 8021e70:	bd10      	pop	{r4, pc}
 8021e72:	bf00      	nop
 8021e74:	240695ac 	.word	0x240695ac
 8021e78:	24069614 	.word	0x24069614
 8021e7c:	2406967c 	.word	0x2406967c

08021e80 <global_stdio_init.part.0>:
 8021e80:	b510      	push	{r4, lr}
 8021e82:	4b0b      	ldr	r3, [pc, #44]	@ (8021eb0 <global_stdio_init.part.0+0x30>)
 8021e84:	4c0b      	ldr	r4, [pc, #44]	@ (8021eb4 <global_stdio_init.part.0+0x34>)
 8021e86:	4a0c      	ldr	r2, [pc, #48]	@ (8021eb8 <global_stdio_init.part.0+0x38>)
 8021e88:	601a      	str	r2, [r3, #0]
 8021e8a:	4620      	mov	r0, r4
 8021e8c:	2200      	movs	r2, #0
 8021e8e:	2104      	movs	r1, #4
 8021e90:	f7ff ff94 	bl	8021dbc <std>
 8021e94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021e98:	2201      	movs	r2, #1
 8021e9a:	2109      	movs	r1, #9
 8021e9c:	f7ff ff8e 	bl	8021dbc <std>
 8021ea0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021ea4:	2202      	movs	r2, #2
 8021ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021eaa:	2112      	movs	r1, #18
 8021eac:	f7ff bf86 	b.w	8021dbc <std>
 8021eb0:	240696e4 	.word	0x240696e4
 8021eb4:	240695ac 	.word	0x240695ac
 8021eb8:	08021e29 	.word	0x08021e29

08021ebc <__sfp_lock_acquire>:
 8021ebc:	4801      	ldr	r0, [pc, #4]	@ (8021ec4 <__sfp_lock_acquire+0x8>)
 8021ebe:	f000 bb1c 	b.w	80224fa <__retarget_lock_acquire_recursive>
 8021ec2:	bf00      	nop
 8021ec4:	240696ee 	.word	0x240696ee

08021ec8 <__sfp_lock_release>:
 8021ec8:	4801      	ldr	r0, [pc, #4]	@ (8021ed0 <__sfp_lock_release+0x8>)
 8021eca:	f000 bb17 	b.w	80224fc <__retarget_lock_release_recursive>
 8021ece:	bf00      	nop
 8021ed0:	240696ee 	.word	0x240696ee

08021ed4 <__sinit>:
 8021ed4:	b510      	push	{r4, lr}
 8021ed6:	4604      	mov	r4, r0
 8021ed8:	f7ff fff0 	bl	8021ebc <__sfp_lock_acquire>
 8021edc:	6a23      	ldr	r3, [r4, #32]
 8021ede:	b11b      	cbz	r3, 8021ee8 <__sinit+0x14>
 8021ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ee4:	f7ff bff0 	b.w	8021ec8 <__sfp_lock_release>
 8021ee8:	4b04      	ldr	r3, [pc, #16]	@ (8021efc <__sinit+0x28>)
 8021eea:	6223      	str	r3, [r4, #32]
 8021eec:	4b04      	ldr	r3, [pc, #16]	@ (8021f00 <__sinit+0x2c>)
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	2b00      	cmp	r3, #0
 8021ef2:	d1f5      	bne.n	8021ee0 <__sinit+0xc>
 8021ef4:	f7ff ffc4 	bl	8021e80 <global_stdio_init.part.0>
 8021ef8:	e7f2      	b.n	8021ee0 <__sinit+0xc>
 8021efa:	bf00      	nop
 8021efc:	08021e41 	.word	0x08021e41
 8021f00:	240696e4 	.word	0x240696e4

08021f04 <_fwalk_sglue>:
 8021f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f08:	4607      	mov	r7, r0
 8021f0a:	4688      	mov	r8, r1
 8021f0c:	4614      	mov	r4, r2
 8021f0e:	2600      	movs	r6, #0
 8021f10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021f14:	f1b9 0901 	subs.w	r9, r9, #1
 8021f18:	d505      	bpl.n	8021f26 <_fwalk_sglue+0x22>
 8021f1a:	6824      	ldr	r4, [r4, #0]
 8021f1c:	2c00      	cmp	r4, #0
 8021f1e:	d1f7      	bne.n	8021f10 <_fwalk_sglue+0xc>
 8021f20:	4630      	mov	r0, r6
 8021f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f26:	89ab      	ldrh	r3, [r5, #12]
 8021f28:	2b01      	cmp	r3, #1
 8021f2a:	d907      	bls.n	8021f3c <_fwalk_sglue+0x38>
 8021f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021f30:	3301      	adds	r3, #1
 8021f32:	d003      	beq.n	8021f3c <_fwalk_sglue+0x38>
 8021f34:	4629      	mov	r1, r5
 8021f36:	4638      	mov	r0, r7
 8021f38:	47c0      	blx	r8
 8021f3a:	4306      	orrs	r6, r0
 8021f3c:	3568      	adds	r5, #104	@ 0x68
 8021f3e:	e7e9      	b.n	8021f14 <_fwalk_sglue+0x10>

08021f40 <_fwrite_r>:
 8021f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f44:	9c08      	ldr	r4, [sp, #32]
 8021f46:	468a      	mov	sl, r1
 8021f48:	4690      	mov	r8, r2
 8021f4a:	fb02 f903 	mul.w	r9, r2, r3
 8021f4e:	4606      	mov	r6, r0
 8021f50:	b118      	cbz	r0, 8021f5a <_fwrite_r+0x1a>
 8021f52:	6a03      	ldr	r3, [r0, #32]
 8021f54:	b90b      	cbnz	r3, 8021f5a <_fwrite_r+0x1a>
 8021f56:	f7ff ffbd 	bl	8021ed4 <__sinit>
 8021f5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021f5c:	07dd      	lsls	r5, r3, #31
 8021f5e:	d405      	bmi.n	8021f6c <_fwrite_r+0x2c>
 8021f60:	89a3      	ldrh	r3, [r4, #12]
 8021f62:	0598      	lsls	r0, r3, #22
 8021f64:	d402      	bmi.n	8021f6c <_fwrite_r+0x2c>
 8021f66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f68:	f000 fac7 	bl	80224fa <__retarget_lock_acquire_recursive>
 8021f6c:	89a3      	ldrh	r3, [r4, #12]
 8021f6e:	0719      	lsls	r1, r3, #28
 8021f70:	d516      	bpl.n	8021fa0 <_fwrite_r+0x60>
 8021f72:	6923      	ldr	r3, [r4, #16]
 8021f74:	b1a3      	cbz	r3, 8021fa0 <_fwrite_r+0x60>
 8021f76:	2500      	movs	r5, #0
 8021f78:	454d      	cmp	r5, r9
 8021f7a:	d01f      	beq.n	8021fbc <_fwrite_r+0x7c>
 8021f7c:	68a7      	ldr	r7, [r4, #8]
 8021f7e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8021f82:	3f01      	subs	r7, #1
 8021f84:	2f00      	cmp	r7, #0
 8021f86:	60a7      	str	r7, [r4, #8]
 8021f88:	da04      	bge.n	8021f94 <_fwrite_r+0x54>
 8021f8a:	69a3      	ldr	r3, [r4, #24]
 8021f8c:	429f      	cmp	r7, r3
 8021f8e:	db0f      	blt.n	8021fb0 <_fwrite_r+0x70>
 8021f90:	290a      	cmp	r1, #10
 8021f92:	d00d      	beq.n	8021fb0 <_fwrite_r+0x70>
 8021f94:	6823      	ldr	r3, [r4, #0]
 8021f96:	1c5a      	adds	r2, r3, #1
 8021f98:	6022      	str	r2, [r4, #0]
 8021f9a:	7019      	strb	r1, [r3, #0]
 8021f9c:	3501      	adds	r5, #1
 8021f9e:	e7eb      	b.n	8021f78 <_fwrite_r+0x38>
 8021fa0:	4621      	mov	r1, r4
 8021fa2:	4630      	mov	r0, r6
 8021fa4:	f000 f914 	bl	80221d0 <__swsetup_r>
 8021fa8:	2800      	cmp	r0, #0
 8021faa:	d0e4      	beq.n	8021f76 <_fwrite_r+0x36>
 8021fac:	2500      	movs	r5, #0
 8021fae:	e005      	b.n	8021fbc <_fwrite_r+0x7c>
 8021fb0:	4622      	mov	r2, r4
 8021fb2:	4630      	mov	r0, r6
 8021fb4:	f000 f8ce 	bl	8022154 <__swbuf_r>
 8021fb8:	3001      	adds	r0, #1
 8021fba:	d1ef      	bne.n	8021f9c <_fwrite_r+0x5c>
 8021fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021fbe:	07da      	lsls	r2, r3, #31
 8021fc0:	d405      	bmi.n	8021fce <_fwrite_r+0x8e>
 8021fc2:	89a3      	ldrh	r3, [r4, #12]
 8021fc4:	059b      	lsls	r3, r3, #22
 8021fc6:	d402      	bmi.n	8021fce <_fwrite_r+0x8e>
 8021fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021fca:	f000 fa97 	bl	80224fc <__retarget_lock_release_recursive>
 8021fce:	fbb5 f0f8 	udiv	r0, r5, r8
 8021fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08021fd8 <fwrite>:
 8021fd8:	b507      	push	{r0, r1, r2, lr}
 8021fda:	9300      	str	r3, [sp, #0]
 8021fdc:	4613      	mov	r3, r2
 8021fde:	460a      	mov	r2, r1
 8021fe0:	4601      	mov	r1, r0
 8021fe2:	4803      	ldr	r0, [pc, #12]	@ (8021ff0 <fwrite+0x18>)
 8021fe4:	6800      	ldr	r0, [r0, #0]
 8021fe6:	f7ff ffab 	bl	8021f40 <_fwrite_r>
 8021fea:	b003      	add	sp, #12
 8021fec:	f85d fb04 	ldr.w	pc, [sp], #4
 8021ff0:	240012bc 	.word	0x240012bc

08021ff4 <sniprintf>:
 8021ff4:	b40c      	push	{r2, r3}
 8021ff6:	b530      	push	{r4, r5, lr}
 8021ff8:	4b17      	ldr	r3, [pc, #92]	@ (8022058 <sniprintf+0x64>)
 8021ffa:	1e0c      	subs	r4, r1, #0
 8021ffc:	681d      	ldr	r5, [r3, #0]
 8021ffe:	b09d      	sub	sp, #116	@ 0x74
 8022000:	da08      	bge.n	8022014 <sniprintf+0x20>
 8022002:	238b      	movs	r3, #139	@ 0x8b
 8022004:	602b      	str	r3, [r5, #0]
 8022006:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802200a:	b01d      	add	sp, #116	@ 0x74
 802200c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022010:	b002      	add	sp, #8
 8022012:	4770      	bx	lr
 8022014:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022018:	f8ad 3014 	strh.w	r3, [sp, #20]
 802201c:	bf14      	ite	ne
 802201e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8022022:	4623      	moveq	r3, r4
 8022024:	9304      	str	r3, [sp, #16]
 8022026:	9307      	str	r3, [sp, #28]
 8022028:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802202c:	9002      	str	r0, [sp, #8]
 802202e:	9006      	str	r0, [sp, #24]
 8022030:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022034:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022036:	ab21      	add	r3, sp, #132	@ 0x84
 8022038:	a902      	add	r1, sp, #8
 802203a:	4628      	mov	r0, r5
 802203c:	9301      	str	r3, [sp, #4]
 802203e:	f000 fb4d 	bl	80226dc <_svfiprintf_r>
 8022042:	1c43      	adds	r3, r0, #1
 8022044:	bfbc      	itt	lt
 8022046:	238b      	movlt	r3, #139	@ 0x8b
 8022048:	602b      	strlt	r3, [r5, #0]
 802204a:	2c00      	cmp	r4, #0
 802204c:	d0dd      	beq.n	802200a <sniprintf+0x16>
 802204e:	9b02      	ldr	r3, [sp, #8]
 8022050:	2200      	movs	r2, #0
 8022052:	701a      	strb	r2, [r3, #0]
 8022054:	e7d9      	b.n	802200a <sniprintf+0x16>
 8022056:	bf00      	nop
 8022058:	240012bc 	.word	0x240012bc

0802205c <__sread>:
 802205c:	b510      	push	{r4, lr}
 802205e:	460c      	mov	r4, r1
 8022060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022064:	f000 f9ea 	bl	802243c <_read_r>
 8022068:	2800      	cmp	r0, #0
 802206a:	bfab      	itete	ge
 802206c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802206e:	89a3      	ldrhlt	r3, [r4, #12]
 8022070:	181b      	addge	r3, r3, r0
 8022072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022076:	bfac      	ite	ge
 8022078:	6563      	strge	r3, [r4, #84]	@ 0x54
 802207a:	81a3      	strhlt	r3, [r4, #12]
 802207c:	bd10      	pop	{r4, pc}

0802207e <__swrite>:
 802207e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022082:	461f      	mov	r7, r3
 8022084:	898b      	ldrh	r3, [r1, #12]
 8022086:	05db      	lsls	r3, r3, #23
 8022088:	4605      	mov	r5, r0
 802208a:	460c      	mov	r4, r1
 802208c:	4616      	mov	r6, r2
 802208e:	d505      	bpl.n	802209c <__swrite+0x1e>
 8022090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022094:	2302      	movs	r3, #2
 8022096:	2200      	movs	r2, #0
 8022098:	f000 f9be 	bl	8022418 <_lseek_r>
 802209c:	89a3      	ldrh	r3, [r4, #12]
 802209e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80220a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80220a6:	81a3      	strh	r3, [r4, #12]
 80220a8:	4632      	mov	r2, r6
 80220aa:	463b      	mov	r3, r7
 80220ac:	4628      	mov	r0, r5
 80220ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80220b2:	f000 b9e5 	b.w	8022480 <_write_r>

080220b6 <__sseek>:
 80220b6:	b510      	push	{r4, lr}
 80220b8:	460c      	mov	r4, r1
 80220ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220be:	f000 f9ab 	bl	8022418 <_lseek_r>
 80220c2:	1c43      	adds	r3, r0, #1
 80220c4:	89a3      	ldrh	r3, [r4, #12]
 80220c6:	bf15      	itete	ne
 80220c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80220ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80220ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80220d2:	81a3      	strheq	r3, [r4, #12]
 80220d4:	bf18      	it	ne
 80220d6:	81a3      	strhne	r3, [r4, #12]
 80220d8:	bd10      	pop	{r4, pc}

080220da <__sclose>:
 80220da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220de:	f000 b935 	b.w	802234c <_close_r>

080220e2 <_vsniprintf_r>:
 80220e2:	b530      	push	{r4, r5, lr}
 80220e4:	4614      	mov	r4, r2
 80220e6:	2c00      	cmp	r4, #0
 80220e8:	b09b      	sub	sp, #108	@ 0x6c
 80220ea:	4605      	mov	r5, r0
 80220ec:	461a      	mov	r2, r3
 80220ee:	da05      	bge.n	80220fc <_vsniprintf_r+0x1a>
 80220f0:	238b      	movs	r3, #139	@ 0x8b
 80220f2:	6003      	str	r3, [r0, #0]
 80220f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80220f8:	b01b      	add	sp, #108	@ 0x6c
 80220fa:	bd30      	pop	{r4, r5, pc}
 80220fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8022100:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022104:	bf14      	ite	ne
 8022106:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802210a:	4623      	moveq	r3, r4
 802210c:	9302      	str	r3, [sp, #8]
 802210e:	9305      	str	r3, [sp, #20]
 8022110:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022114:	9100      	str	r1, [sp, #0]
 8022116:	9104      	str	r1, [sp, #16]
 8022118:	f8ad 300e 	strh.w	r3, [sp, #14]
 802211c:	4669      	mov	r1, sp
 802211e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022120:	f000 fadc 	bl	80226dc <_svfiprintf_r>
 8022124:	1c43      	adds	r3, r0, #1
 8022126:	bfbc      	itt	lt
 8022128:	238b      	movlt	r3, #139	@ 0x8b
 802212a:	602b      	strlt	r3, [r5, #0]
 802212c:	2c00      	cmp	r4, #0
 802212e:	d0e3      	beq.n	80220f8 <_vsniprintf_r+0x16>
 8022130:	9b00      	ldr	r3, [sp, #0]
 8022132:	2200      	movs	r2, #0
 8022134:	701a      	strb	r2, [r3, #0]
 8022136:	e7df      	b.n	80220f8 <_vsniprintf_r+0x16>

08022138 <vsniprintf>:
 8022138:	b507      	push	{r0, r1, r2, lr}
 802213a:	9300      	str	r3, [sp, #0]
 802213c:	4613      	mov	r3, r2
 802213e:	460a      	mov	r2, r1
 8022140:	4601      	mov	r1, r0
 8022142:	4803      	ldr	r0, [pc, #12]	@ (8022150 <vsniprintf+0x18>)
 8022144:	6800      	ldr	r0, [r0, #0]
 8022146:	f7ff ffcc 	bl	80220e2 <_vsniprintf_r>
 802214a:	b003      	add	sp, #12
 802214c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022150:	240012bc 	.word	0x240012bc

08022154 <__swbuf_r>:
 8022154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022156:	460e      	mov	r6, r1
 8022158:	4614      	mov	r4, r2
 802215a:	4605      	mov	r5, r0
 802215c:	b118      	cbz	r0, 8022166 <__swbuf_r+0x12>
 802215e:	6a03      	ldr	r3, [r0, #32]
 8022160:	b90b      	cbnz	r3, 8022166 <__swbuf_r+0x12>
 8022162:	f7ff feb7 	bl	8021ed4 <__sinit>
 8022166:	69a3      	ldr	r3, [r4, #24]
 8022168:	60a3      	str	r3, [r4, #8]
 802216a:	89a3      	ldrh	r3, [r4, #12]
 802216c:	071a      	lsls	r2, r3, #28
 802216e:	d501      	bpl.n	8022174 <__swbuf_r+0x20>
 8022170:	6923      	ldr	r3, [r4, #16]
 8022172:	b943      	cbnz	r3, 8022186 <__swbuf_r+0x32>
 8022174:	4621      	mov	r1, r4
 8022176:	4628      	mov	r0, r5
 8022178:	f000 f82a 	bl	80221d0 <__swsetup_r>
 802217c:	b118      	cbz	r0, 8022186 <__swbuf_r+0x32>
 802217e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8022182:	4638      	mov	r0, r7
 8022184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022186:	6823      	ldr	r3, [r4, #0]
 8022188:	6922      	ldr	r2, [r4, #16]
 802218a:	1a98      	subs	r0, r3, r2
 802218c:	6963      	ldr	r3, [r4, #20]
 802218e:	b2f6      	uxtb	r6, r6
 8022190:	4283      	cmp	r3, r0
 8022192:	4637      	mov	r7, r6
 8022194:	dc05      	bgt.n	80221a2 <__swbuf_r+0x4e>
 8022196:	4621      	mov	r1, r4
 8022198:	4628      	mov	r0, r5
 802219a:	f000 fdad 	bl	8022cf8 <_fflush_r>
 802219e:	2800      	cmp	r0, #0
 80221a0:	d1ed      	bne.n	802217e <__swbuf_r+0x2a>
 80221a2:	68a3      	ldr	r3, [r4, #8]
 80221a4:	3b01      	subs	r3, #1
 80221a6:	60a3      	str	r3, [r4, #8]
 80221a8:	6823      	ldr	r3, [r4, #0]
 80221aa:	1c5a      	adds	r2, r3, #1
 80221ac:	6022      	str	r2, [r4, #0]
 80221ae:	701e      	strb	r6, [r3, #0]
 80221b0:	6962      	ldr	r2, [r4, #20]
 80221b2:	1c43      	adds	r3, r0, #1
 80221b4:	429a      	cmp	r2, r3
 80221b6:	d004      	beq.n	80221c2 <__swbuf_r+0x6e>
 80221b8:	89a3      	ldrh	r3, [r4, #12]
 80221ba:	07db      	lsls	r3, r3, #31
 80221bc:	d5e1      	bpl.n	8022182 <__swbuf_r+0x2e>
 80221be:	2e0a      	cmp	r6, #10
 80221c0:	d1df      	bne.n	8022182 <__swbuf_r+0x2e>
 80221c2:	4621      	mov	r1, r4
 80221c4:	4628      	mov	r0, r5
 80221c6:	f000 fd97 	bl	8022cf8 <_fflush_r>
 80221ca:	2800      	cmp	r0, #0
 80221cc:	d0d9      	beq.n	8022182 <__swbuf_r+0x2e>
 80221ce:	e7d6      	b.n	802217e <__swbuf_r+0x2a>

080221d0 <__swsetup_r>:
 80221d0:	b538      	push	{r3, r4, r5, lr}
 80221d2:	4b29      	ldr	r3, [pc, #164]	@ (8022278 <__swsetup_r+0xa8>)
 80221d4:	4605      	mov	r5, r0
 80221d6:	6818      	ldr	r0, [r3, #0]
 80221d8:	460c      	mov	r4, r1
 80221da:	b118      	cbz	r0, 80221e4 <__swsetup_r+0x14>
 80221dc:	6a03      	ldr	r3, [r0, #32]
 80221de:	b90b      	cbnz	r3, 80221e4 <__swsetup_r+0x14>
 80221e0:	f7ff fe78 	bl	8021ed4 <__sinit>
 80221e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80221e8:	0719      	lsls	r1, r3, #28
 80221ea:	d422      	bmi.n	8022232 <__swsetup_r+0x62>
 80221ec:	06da      	lsls	r2, r3, #27
 80221ee:	d407      	bmi.n	8022200 <__swsetup_r+0x30>
 80221f0:	2209      	movs	r2, #9
 80221f2:	602a      	str	r2, [r5, #0]
 80221f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80221f8:	81a3      	strh	r3, [r4, #12]
 80221fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80221fe:	e033      	b.n	8022268 <__swsetup_r+0x98>
 8022200:	0758      	lsls	r0, r3, #29
 8022202:	d512      	bpl.n	802222a <__swsetup_r+0x5a>
 8022204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022206:	b141      	cbz	r1, 802221a <__swsetup_r+0x4a>
 8022208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802220c:	4299      	cmp	r1, r3
 802220e:	d002      	beq.n	8022216 <__swsetup_r+0x46>
 8022210:	4628      	mov	r0, r5
 8022212:	f000 f9b5 	bl	8022580 <_free_r>
 8022216:	2300      	movs	r3, #0
 8022218:	6363      	str	r3, [r4, #52]	@ 0x34
 802221a:	89a3      	ldrh	r3, [r4, #12]
 802221c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022220:	81a3      	strh	r3, [r4, #12]
 8022222:	2300      	movs	r3, #0
 8022224:	6063      	str	r3, [r4, #4]
 8022226:	6923      	ldr	r3, [r4, #16]
 8022228:	6023      	str	r3, [r4, #0]
 802222a:	89a3      	ldrh	r3, [r4, #12]
 802222c:	f043 0308 	orr.w	r3, r3, #8
 8022230:	81a3      	strh	r3, [r4, #12]
 8022232:	6923      	ldr	r3, [r4, #16]
 8022234:	b94b      	cbnz	r3, 802224a <__swsetup_r+0x7a>
 8022236:	89a3      	ldrh	r3, [r4, #12]
 8022238:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802223c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022240:	d003      	beq.n	802224a <__swsetup_r+0x7a>
 8022242:	4621      	mov	r1, r4
 8022244:	4628      	mov	r0, r5
 8022246:	f000 fdb7 	bl	8022db8 <__smakebuf_r>
 802224a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802224e:	f013 0201 	ands.w	r2, r3, #1
 8022252:	d00a      	beq.n	802226a <__swsetup_r+0x9a>
 8022254:	2200      	movs	r2, #0
 8022256:	60a2      	str	r2, [r4, #8]
 8022258:	6962      	ldr	r2, [r4, #20]
 802225a:	4252      	negs	r2, r2
 802225c:	61a2      	str	r2, [r4, #24]
 802225e:	6922      	ldr	r2, [r4, #16]
 8022260:	b942      	cbnz	r2, 8022274 <__swsetup_r+0xa4>
 8022262:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022266:	d1c5      	bne.n	80221f4 <__swsetup_r+0x24>
 8022268:	bd38      	pop	{r3, r4, r5, pc}
 802226a:	0799      	lsls	r1, r3, #30
 802226c:	bf58      	it	pl
 802226e:	6962      	ldrpl	r2, [r4, #20]
 8022270:	60a2      	str	r2, [r4, #8]
 8022272:	e7f4      	b.n	802225e <__swsetup_r+0x8e>
 8022274:	2000      	movs	r0, #0
 8022276:	e7f7      	b.n	8022268 <__swsetup_r+0x98>
 8022278:	240012bc 	.word	0x240012bc

0802227c <memcmp>:
 802227c:	b510      	push	{r4, lr}
 802227e:	3901      	subs	r1, #1
 8022280:	4402      	add	r2, r0
 8022282:	4290      	cmp	r0, r2
 8022284:	d101      	bne.n	802228a <memcmp+0xe>
 8022286:	2000      	movs	r0, #0
 8022288:	e005      	b.n	8022296 <memcmp+0x1a>
 802228a:	7803      	ldrb	r3, [r0, #0]
 802228c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022290:	42a3      	cmp	r3, r4
 8022292:	d001      	beq.n	8022298 <memcmp+0x1c>
 8022294:	1b18      	subs	r0, r3, r4
 8022296:	bd10      	pop	{r4, pc}
 8022298:	3001      	adds	r0, #1
 802229a:	e7f2      	b.n	8022282 <memcmp+0x6>

0802229c <memmove>:
 802229c:	4288      	cmp	r0, r1
 802229e:	b510      	push	{r4, lr}
 80222a0:	eb01 0402 	add.w	r4, r1, r2
 80222a4:	d902      	bls.n	80222ac <memmove+0x10>
 80222a6:	4284      	cmp	r4, r0
 80222a8:	4623      	mov	r3, r4
 80222aa:	d807      	bhi.n	80222bc <memmove+0x20>
 80222ac:	1e43      	subs	r3, r0, #1
 80222ae:	42a1      	cmp	r1, r4
 80222b0:	d008      	beq.n	80222c4 <memmove+0x28>
 80222b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80222b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80222ba:	e7f8      	b.n	80222ae <memmove+0x12>
 80222bc:	4402      	add	r2, r0
 80222be:	4601      	mov	r1, r0
 80222c0:	428a      	cmp	r2, r1
 80222c2:	d100      	bne.n	80222c6 <memmove+0x2a>
 80222c4:	bd10      	pop	{r4, pc}
 80222c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80222ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80222ce:	e7f7      	b.n	80222c0 <memmove+0x24>

080222d0 <memset>:
 80222d0:	4402      	add	r2, r0
 80222d2:	4603      	mov	r3, r0
 80222d4:	4293      	cmp	r3, r2
 80222d6:	d100      	bne.n	80222da <memset+0xa>
 80222d8:	4770      	bx	lr
 80222da:	f803 1b01 	strb.w	r1, [r3], #1
 80222de:	e7f9      	b.n	80222d4 <memset+0x4>

080222e0 <strchr>:
 80222e0:	b2c9      	uxtb	r1, r1
 80222e2:	4603      	mov	r3, r0
 80222e4:	4618      	mov	r0, r3
 80222e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80222ea:	b112      	cbz	r2, 80222f2 <strchr+0x12>
 80222ec:	428a      	cmp	r2, r1
 80222ee:	d1f9      	bne.n	80222e4 <strchr+0x4>
 80222f0:	4770      	bx	lr
 80222f2:	2900      	cmp	r1, #0
 80222f4:	bf18      	it	ne
 80222f6:	2000      	movne	r0, #0
 80222f8:	4770      	bx	lr

080222fa <strncmp>:
 80222fa:	b510      	push	{r4, lr}
 80222fc:	b16a      	cbz	r2, 802231a <strncmp+0x20>
 80222fe:	3901      	subs	r1, #1
 8022300:	1884      	adds	r4, r0, r2
 8022302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022306:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802230a:	429a      	cmp	r2, r3
 802230c:	d103      	bne.n	8022316 <strncmp+0x1c>
 802230e:	42a0      	cmp	r0, r4
 8022310:	d001      	beq.n	8022316 <strncmp+0x1c>
 8022312:	2a00      	cmp	r2, #0
 8022314:	d1f5      	bne.n	8022302 <strncmp+0x8>
 8022316:	1ad0      	subs	r0, r2, r3
 8022318:	bd10      	pop	{r4, pc}
 802231a:	4610      	mov	r0, r2
 802231c:	e7fc      	b.n	8022318 <strncmp+0x1e>

0802231e <strstr>:
 802231e:	780a      	ldrb	r2, [r1, #0]
 8022320:	b570      	push	{r4, r5, r6, lr}
 8022322:	b96a      	cbnz	r2, 8022340 <strstr+0x22>
 8022324:	bd70      	pop	{r4, r5, r6, pc}
 8022326:	429a      	cmp	r2, r3
 8022328:	d109      	bne.n	802233e <strstr+0x20>
 802232a:	460c      	mov	r4, r1
 802232c:	4605      	mov	r5, r0
 802232e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8022332:	2b00      	cmp	r3, #0
 8022334:	d0f6      	beq.n	8022324 <strstr+0x6>
 8022336:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802233a:	429e      	cmp	r6, r3
 802233c:	d0f7      	beq.n	802232e <strstr+0x10>
 802233e:	3001      	adds	r0, #1
 8022340:	7803      	ldrb	r3, [r0, #0]
 8022342:	2b00      	cmp	r3, #0
 8022344:	d1ef      	bne.n	8022326 <strstr+0x8>
 8022346:	4618      	mov	r0, r3
 8022348:	e7ec      	b.n	8022324 <strstr+0x6>
	...

0802234c <_close_r>:
 802234c:	b538      	push	{r3, r4, r5, lr}
 802234e:	4d06      	ldr	r5, [pc, #24]	@ (8022368 <_close_r+0x1c>)
 8022350:	2300      	movs	r3, #0
 8022352:	4604      	mov	r4, r0
 8022354:	4608      	mov	r0, r1
 8022356:	602b      	str	r3, [r5, #0]
 8022358:	f7e0 f97e 	bl	8002658 <_close>
 802235c:	1c43      	adds	r3, r0, #1
 802235e:	d102      	bne.n	8022366 <_close_r+0x1a>
 8022360:	682b      	ldr	r3, [r5, #0]
 8022362:	b103      	cbz	r3, 8022366 <_close_r+0x1a>
 8022364:	6023      	str	r3, [r4, #0]
 8022366:	bd38      	pop	{r3, r4, r5, pc}
 8022368:	240696e8 	.word	0x240696e8

0802236c <_reclaim_reent>:
 802236c:	4b29      	ldr	r3, [pc, #164]	@ (8022414 <_reclaim_reent+0xa8>)
 802236e:	681b      	ldr	r3, [r3, #0]
 8022370:	4283      	cmp	r3, r0
 8022372:	b570      	push	{r4, r5, r6, lr}
 8022374:	4604      	mov	r4, r0
 8022376:	d04b      	beq.n	8022410 <_reclaim_reent+0xa4>
 8022378:	69c3      	ldr	r3, [r0, #28]
 802237a:	b1ab      	cbz	r3, 80223a8 <_reclaim_reent+0x3c>
 802237c:	68db      	ldr	r3, [r3, #12]
 802237e:	b16b      	cbz	r3, 802239c <_reclaim_reent+0x30>
 8022380:	2500      	movs	r5, #0
 8022382:	69e3      	ldr	r3, [r4, #28]
 8022384:	68db      	ldr	r3, [r3, #12]
 8022386:	5959      	ldr	r1, [r3, r5]
 8022388:	2900      	cmp	r1, #0
 802238a:	d13b      	bne.n	8022404 <_reclaim_reent+0x98>
 802238c:	3504      	adds	r5, #4
 802238e:	2d80      	cmp	r5, #128	@ 0x80
 8022390:	d1f7      	bne.n	8022382 <_reclaim_reent+0x16>
 8022392:	69e3      	ldr	r3, [r4, #28]
 8022394:	4620      	mov	r0, r4
 8022396:	68d9      	ldr	r1, [r3, #12]
 8022398:	f000 f8f2 	bl	8022580 <_free_r>
 802239c:	69e3      	ldr	r3, [r4, #28]
 802239e:	6819      	ldr	r1, [r3, #0]
 80223a0:	b111      	cbz	r1, 80223a8 <_reclaim_reent+0x3c>
 80223a2:	4620      	mov	r0, r4
 80223a4:	f000 f8ec 	bl	8022580 <_free_r>
 80223a8:	6961      	ldr	r1, [r4, #20]
 80223aa:	b111      	cbz	r1, 80223b2 <_reclaim_reent+0x46>
 80223ac:	4620      	mov	r0, r4
 80223ae:	f000 f8e7 	bl	8022580 <_free_r>
 80223b2:	69e1      	ldr	r1, [r4, #28]
 80223b4:	b111      	cbz	r1, 80223bc <_reclaim_reent+0x50>
 80223b6:	4620      	mov	r0, r4
 80223b8:	f000 f8e2 	bl	8022580 <_free_r>
 80223bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80223be:	b111      	cbz	r1, 80223c6 <_reclaim_reent+0x5a>
 80223c0:	4620      	mov	r0, r4
 80223c2:	f000 f8dd 	bl	8022580 <_free_r>
 80223c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80223c8:	b111      	cbz	r1, 80223d0 <_reclaim_reent+0x64>
 80223ca:	4620      	mov	r0, r4
 80223cc:	f000 f8d8 	bl	8022580 <_free_r>
 80223d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80223d2:	b111      	cbz	r1, 80223da <_reclaim_reent+0x6e>
 80223d4:	4620      	mov	r0, r4
 80223d6:	f000 f8d3 	bl	8022580 <_free_r>
 80223da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80223dc:	b111      	cbz	r1, 80223e4 <_reclaim_reent+0x78>
 80223de:	4620      	mov	r0, r4
 80223e0:	f000 f8ce 	bl	8022580 <_free_r>
 80223e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80223e6:	b111      	cbz	r1, 80223ee <_reclaim_reent+0x82>
 80223e8:	4620      	mov	r0, r4
 80223ea:	f000 f8c9 	bl	8022580 <_free_r>
 80223ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80223f0:	b111      	cbz	r1, 80223f8 <_reclaim_reent+0x8c>
 80223f2:	4620      	mov	r0, r4
 80223f4:	f000 f8c4 	bl	8022580 <_free_r>
 80223f8:	6a23      	ldr	r3, [r4, #32]
 80223fa:	b14b      	cbz	r3, 8022410 <_reclaim_reent+0xa4>
 80223fc:	4620      	mov	r0, r4
 80223fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022402:	4718      	bx	r3
 8022404:	680e      	ldr	r6, [r1, #0]
 8022406:	4620      	mov	r0, r4
 8022408:	f000 f8ba 	bl	8022580 <_free_r>
 802240c:	4631      	mov	r1, r6
 802240e:	e7bb      	b.n	8022388 <_reclaim_reent+0x1c>
 8022410:	bd70      	pop	{r4, r5, r6, pc}
 8022412:	bf00      	nop
 8022414:	240012bc 	.word	0x240012bc

08022418 <_lseek_r>:
 8022418:	b538      	push	{r3, r4, r5, lr}
 802241a:	4d07      	ldr	r5, [pc, #28]	@ (8022438 <_lseek_r+0x20>)
 802241c:	4604      	mov	r4, r0
 802241e:	4608      	mov	r0, r1
 8022420:	4611      	mov	r1, r2
 8022422:	2200      	movs	r2, #0
 8022424:	602a      	str	r2, [r5, #0]
 8022426:	461a      	mov	r2, r3
 8022428:	f7e0 f93d 	bl	80026a6 <_lseek>
 802242c:	1c43      	adds	r3, r0, #1
 802242e:	d102      	bne.n	8022436 <_lseek_r+0x1e>
 8022430:	682b      	ldr	r3, [r5, #0]
 8022432:	b103      	cbz	r3, 8022436 <_lseek_r+0x1e>
 8022434:	6023      	str	r3, [r4, #0]
 8022436:	bd38      	pop	{r3, r4, r5, pc}
 8022438:	240696e8 	.word	0x240696e8

0802243c <_read_r>:
 802243c:	b538      	push	{r3, r4, r5, lr}
 802243e:	4d07      	ldr	r5, [pc, #28]	@ (802245c <_read_r+0x20>)
 8022440:	4604      	mov	r4, r0
 8022442:	4608      	mov	r0, r1
 8022444:	4611      	mov	r1, r2
 8022446:	2200      	movs	r2, #0
 8022448:	602a      	str	r2, [r5, #0]
 802244a:	461a      	mov	r2, r3
 802244c:	f7e0 f8cb 	bl	80025e6 <_read>
 8022450:	1c43      	adds	r3, r0, #1
 8022452:	d102      	bne.n	802245a <_read_r+0x1e>
 8022454:	682b      	ldr	r3, [r5, #0]
 8022456:	b103      	cbz	r3, 802245a <_read_r+0x1e>
 8022458:	6023      	str	r3, [r4, #0]
 802245a:	bd38      	pop	{r3, r4, r5, pc}
 802245c:	240696e8 	.word	0x240696e8

08022460 <_sbrk_r>:
 8022460:	b538      	push	{r3, r4, r5, lr}
 8022462:	4d06      	ldr	r5, [pc, #24]	@ (802247c <_sbrk_r+0x1c>)
 8022464:	2300      	movs	r3, #0
 8022466:	4604      	mov	r4, r0
 8022468:	4608      	mov	r0, r1
 802246a:	602b      	str	r3, [r5, #0]
 802246c:	f7e0 f928 	bl	80026c0 <_sbrk>
 8022470:	1c43      	adds	r3, r0, #1
 8022472:	d102      	bne.n	802247a <_sbrk_r+0x1a>
 8022474:	682b      	ldr	r3, [r5, #0]
 8022476:	b103      	cbz	r3, 802247a <_sbrk_r+0x1a>
 8022478:	6023      	str	r3, [r4, #0]
 802247a:	bd38      	pop	{r3, r4, r5, pc}
 802247c:	240696e8 	.word	0x240696e8

08022480 <_write_r>:
 8022480:	b538      	push	{r3, r4, r5, lr}
 8022482:	4d07      	ldr	r5, [pc, #28]	@ (80224a0 <_write_r+0x20>)
 8022484:	4604      	mov	r4, r0
 8022486:	4608      	mov	r0, r1
 8022488:	4611      	mov	r1, r2
 802248a:	2200      	movs	r2, #0
 802248c:	602a      	str	r2, [r5, #0]
 802248e:	461a      	mov	r2, r3
 8022490:	f7e0 f8c6 	bl	8002620 <_write>
 8022494:	1c43      	adds	r3, r0, #1
 8022496:	d102      	bne.n	802249e <_write_r+0x1e>
 8022498:	682b      	ldr	r3, [r5, #0]
 802249a:	b103      	cbz	r3, 802249e <_write_r+0x1e>
 802249c:	6023      	str	r3, [r4, #0]
 802249e:	bd38      	pop	{r3, r4, r5, pc}
 80224a0:	240696e8 	.word	0x240696e8

080224a4 <__errno>:
 80224a4:	4b01      	ldr	r3, [pc, #4]	@ (80224ac <__errno+0x8>)
 80224a6:	6818      	ldr	r0, [r3, #0]
 80224a8:	4770      	bx	lr
 80224aa:	bf00      	nop
 80224ac:	240012bc 	.word	0x240012bc

080224b0 <__libc_init_array>:
 80224b0:	b570      	push	{r4, r5, r6, lr}
 80224b2:	4d0d      	ldr	r5, [pc, #52]	@ (80224e8 <__libc_init_array+0x38>)
 80224b4:	4c0d      	ldr	r4, [pc, #52]	@ (80224ec <__libc_init_array+0x3c>)
 80224b6:	1b64      	subs	r4, r4, r5
 80224b8:	10a4      	asrs	r4, r4, #2
 80224ba:	2600      	movs	r6, #0
 80224bc:	42a6      	cmp	r6, r4
 80224be:	d109      	bne.n	80224d4 <__libc_init_array+0x24>
 80224c0:	4d0b      	ldr	r5, [pc, #44]	@ (80224f0 <__libc_init_array+0x40>)
 80224c2:	4c0c      	ldr	r4, [pc, #48]	@ (80224f4 <__libc_init_array+0x44>)
 80224c4:	f000 fe62 	bl	802318c <_init>
 80224c8:	1b64      	subs	r4, r4, r5
 80224ca:	10a4      	asrs	r4, r4, #2
 80224cc:	2600      	movs	r6, #0
 80224ce:	42a6      	cmp	r6, r4
 80224d0:	d105      	bne.n	80224de <__libc_init_array+0x2e>
 80224d2:	bd70      	pop	{r4, r5, r6, pc}
 80224d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80224d8:	4798      	blx	r3
 80224da:	3601      	adds	r6, #1
 80224dc:	e7ee      	b.n	80224bc <__libc_init_array+0xc>
 80224de:	f855 3b04 	ldr.w	r3, [r5], #4
 80224e2:	4798      	blx	r3
 80224e4:	3601      	adds	r6, #1
 80224e6:	e7f2      	b.n	80224ce <__libc_init_array+0x1e>
 80224e8:	08025d14 	.word	0x08025d14
 80224ec:	08025d14 	.word	0x08025d14
 80224f0:	08025d14 	.word	0x08025d14
 80224f4:	08025d58 	.word	0x08025d58

080224f8 <__retarget_lock_init_recursive>:
 80224f8:	4770      	bx	lr

080224fa <__retarget_lock_acquire_recursive>:
 80224fa:	4770      	bx	lr

080224fc <__retarget_lock_release_recursive>:
 80224fc:	4770      	bx	lr

080224fe <strcpy>:
 80224fe:	4603      	mov	r3, r0
 8022500:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022504:	f803 2b01 	strb.w	r2, [r3], #1
 8022508:	2a00      	cmp	r2, #0
 802250a:	d1f9      	bne.n	8022500 <strcpy+0x2>
 802250c:	4770      	bx	lr

0802250e <memcpy>:
 802250e:	440a      	add	r2, r1
 8022510:	4291      	cmp	r1, r2
 8022512:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8022516:	d100      	bne.n	802251a <memcpy+0xc>
 8022518:	4770      	bx	lr
 802251a:	b510      	push	{r4, lr}
 802251c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022520:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022524:	4291      	cmp	r1, r2
 8022526:	d1f9      	bne.n	802251c <memcpy+0xe>
 8022528:	bd10      	pop	{r4, pc}
	...

0802252c <__assert_func>:
 802252c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802252e:	4614      	mov	r4, r2
 8022530:	461a      	mov	r2, r3
 8022532:	4b09      	ldr	r3, [pc, #36]	@ (8022558 <__assert_func+0x2c>)
 8022534:	681b      	ldr	r3, [r3, #0]
 8022536:	4605      	mov	r5, r0
 8022538:	68d8      	ldr	r0, [r3, #12]
 802253a:	b954      	cbnz	r4, 8022552 <__assert_func+0x26>
 802253c:	4b07      	ldr	r3, [pc, #28]	@ (802255c <__assert_func+0x30>)
 802253e:	461c      	mov	r4, r3
 8022540:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022544:	9100      	str	r1, [sp, #0]
 8022546:	462b      	mov	r3, r5
 8022548:	4905      	ldr	r1, [pc, #20]	@ (8022560 <__assert_func+0x34>)
 802254a:	f000 fbfd 	bl	8022d48 <fiprintf>
 802254e:	f000 fc91 	bl	8022e74 <abort>
 8022552:	4b04      	ldr	r3, [pc, #16]	@ (8022564 <__assert_func+0x38>)
 8022554:	e7f4      	b.n	8022540 <__assert_func+0x14>
 8022556:	bf00      	nop
 8022558:	240012bc 	.word	0x240012bc
 802255c:	08025cd5 	.word	0x08025cd5
 8022560:	08025ca7 	.word	0x08025ca7
 8022564:	08025c9a 	.word	0x08025c9a

08022568 <__env_lock>:
 8022568:	4801      	ldr	r0, [pc, #4]	@ (8022570 <__env_lock+0x8>)
 802256a:	f7ff bfc6 	b.w	80224fa <__retarget_lock_acquire_recursive>
 802256e:	bf00      	nop
 8022570:	240696ec 	.word	0x240696ec

08022574 <__env_unlock>:
 8022574:	4801      	ldr	r0, [pc, #4]	@ (802257c <__env_unlock+0x8>)
 8022576:	f7ff bfc1 	b.w	80224fc <__retarget_lock_release_recursive>
 802257a:	bf00      	nop
 802257c:	240696ec 	.word	0x240696ec

08022580 <_free_r>:
 8022580:	b538      	push	{r3, r4, r5, lr}
 8022582:	4605      	mov	r5, r0
 8022584:	2900      	cmp	r1, #0
 8022586:	d041      	beq.n	802260c <_free_r+0x8c>
 8022588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802258c:	1f0c      	subs	r4, r1, #4
 802258e:	2b00      	cmp	r3, #0
 8022590:	bfb8      	it	lt
 8022592:	18e4      	addlt	r4, r4, r3
 8022594:	f7ff faec 	bl	8021b70 <__malloc_lock>
 8022598:	4a1d      	ldr	r2, [pc, #116]	@ (8022610 <_free_r+0x90>)
 802259a:	6813      	ldr	r3, [r2, #0]
 802259c:	b933      	cbnz	r3, 80225ac <_free_r+0x2c>
 802259e:	6063      	str	r3, [r4, #4]
 80225a0:	6014      	str	r4, [r2, #0]
 80225a2:	4628      	mov	r0, r5
 80225a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225a8:	f7ff bae8 	b.w	8021b7c <__malloc_unlock>
 80225ac:	42a3      	cmp	r3, r4
 80225ae:	d908      	bls.n	80225c2 <_free_r+0x42>
 80225b0:	6820      	ldr	r0, [r4, #0]
 80225b2:	1821      	adds	r1, r4, r0
 80225b4:	428b      	cmp	r3, r1
 80225b6:	bf01      	itttt	eq
 80225b8:	6819      	ldreq	r1, [r3, #0]
 80225ba:	685b      	ldreq	r3, [r3, #4]
 80225bc:	1809      	addeq	r1, r1, r0
 80225be:	6021      	streq	r1, [r4, #0]
 80225c0:	e7ed      	b.n	802259e <_free_r+0x1e>
 80225c2:	461a      	mov	r2, r3
 80225c4:	685b      	ldr	r3, [r3, #4]
 80225c6:	b10b      	cbz	r3, 80225cc <_free_r+0x4c>
 80225c8:	42a3      	cmp	r3, r4
 80225ca:	d9fa      	bls.n	80225c2 <_free_r+0x42>
 80225cc:	6811      	ldr	r1, [r2, #0]
 80225ce:	1850      	adds	r0, r2, r1
 80225d0:	42a0      	cmp	r0, r4
 80225d2:	d10b      	bne.n	80225ec <_free_r+0x6c>
 80225d4:	6820      	ldr	r0, [r4, #0]
 80225d6:	4401      	add	r1, r0
 80225d8:	1850      	adds	r0, r2, r1
 80225da:	4283      	cmp	r3, r0
 80225dc:	6011      	str	r1, [r2, #0]
 80225de:	d1e0      	bne.n	80225a2 <_free_r+0x22>
 80225e0:	6818      	ldr	r0, [r3, #0]
 80225e2:	685b      	ldr	r3, [r3, #4]
 80225e4:	6053      	str	r3, [r2, #4]
 80225e6:	4408      	add	r0, r1
 80225e8:	6010      	str	r0, [r2, #0]
 80225ea:	e7da      	b.n	80225a2 <_free_r+0x22>
 80225ec:	d902      	bls.n	80225f4 <_free_r+0x74>
 80225ee:	230c      	movs	r3, #12
 80225f0:	602b      	str	r3, [r5, #0]
 80225f2:	e7d6      	b.n	80225a2 <_free_r+0x22>
 80225f4:	6820      	ldr	r0, [r4, #0]
 80225f6:	1821      	adds	r1, r4, r0
 80225f8:	428b      	cmp	r3, r1
 80225fa:	bf04      	itt	eq
 80225fc:	6819      	ldreq	r1, [r3, #0]
 80225fe:	685b      	ldreq	r3, [r3, #4]
 8022600:	6063      	str	r3, [r4, #4]
 8022602:	bf04      	itt	eq
 8022604:	1809      	addeq	r1, r1, r0
 8022606:	6021      	streq	r1, [r4, #0]
 8022608:	6054      	str	r4, [r2, #4]
 802260a:	e7ca      	b.n	80225a2 <_free_r+0x22>
 802260c:	bd38      	pop	{r3, r4, r5, pc}
 802260e:	bf00      	nop
 8022610:	240695a8 	.word	0x240695a8

08022614 <_malloc_usable_size_r>:
 8022614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022618:	1f18      	subs	r0, r3, #4
 802261a:	2b00      	cmp	r3, #0
 802261c:	bfbc      	itt	lt
 802261e:	580b      	ldrlt	r3, [r1, r0]
 8022620:	18c0      	addlt	r0, r0, r3
 8022622:	4770      	bx	lr

08022624 <__ssputs_r>:
 8022624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022628:	688e      	ldr	r6, [r1, #8]
 802262a:	461f      	mov	r7, r3
 802262c:	42be      	cmp	r6, r7
 802262e:	680b      	ldr	r3, [r1, #0]
 8022630:	4682      	mov	sl, r0
 8022632:	460c      	mov	r4, r1
 8022634:	4690      	mov	r8, r2
 8022636:	d82d      	bhi.n	8022694 <__ssputs_r+0x70>
 8022638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802263c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022640:	d026      	beq.n	8022690 <__ssputs_r+0x6c>
 8022642:	6965      	ldr	r5, [r4, #20]
 8022644:	6909      	ldr	r1, [r1, #16]
 8022646:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802264a:	eba3 0901 	sub.w	r9, r3, r1
 802264e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022652:	1c7b      	adds	r3, r7, #1
 8022654:	444b      	add	r3, r9
 8022656:	106d      	asrs	r5, r5, #1
 8022658:	429d      	cmp	r5, r3
 802265a:	bf38      	it	cc
 802265c:	461d      	movcc	r5, r3
 802265e:	0553      	lsls	r3, r2, #21
 8022660:	d527      	bpl.n	80226b2 <__ssputs_r+0x8e>
 8022662:	4629      	mov	r1, r5
 8022664:	f7ff fa04 	bl	8021a70 <_malloc_r>
 8022668:	4606      	mov	r6, r0
 802266a:	b360      	cbz	r0, 80226c6 <__ssputs_r+0xa2>
 802266c:	6921      	ldr	r1, [r4, #16]
 802266e:	464a      	mov	r2, r9
 8022670:	f7ff ff4d 	bl	802250e <memcpy>
 8022674:	89a3      	ldrh	r3, [r4, #12]
 8022676:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802267a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802267e:	81a3      	strh	r3, [r4, #12]
 8022680:	6126      	str	r6, [r4, #16]
 8022682:	6165      	str	r5, [r4, #20]
 8022684:	444e      	add	r6, r9
 8022686:	eba5 0509 	sub.w	r5, r5, r9
 802268a:	6026      	str	r6, [r4, #0]
 802268c:	60a5      	str	r5, [r4, #8]
 802268e:	463e      	mov	r6, r7
 8022690:	42be      	cmp	r6, r7
 8022692:	d900      	bls.n	8022696 <__ssputs_r+0x72>
 8022694:	463e      	mov	r6, r7
 8022696:	6820      	ldr	r0, [r4, #0]
 8022698:	4632      	mov	r2, r6
 802269a:	4641      	mov	r1, r8
 802269c:	f7ff fdfe 	bl	802229c <memmove>
 80226a0:	68a3      	ldr	r3, [r4, #8]
 80226a2:	1b9b      	subs	r3, r3, r6
 80226a4:	60a3      	str	r3, [r4, #8]
 80226a6:	6823      	ldr	r3, [r4, #0]
 80226a8:	4433      	add	r3, r6
 80226aa:	6023      	str	r3, [r4, #0]
 80226ac:	2000      	movs	r0, #0
 80226ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226b2:	462a      	mov	r2, r5
 80226b4:	f7ff fadc 	bl	8021c70 <_realloc_r>
 80226b8:	4606      	mov	r6, r0
 80226ba:	2800      	cmp	r0, #0
 80226bc:	d1e0      	bne.n	8022680 <__ssputs_r+0x5c>
 80226be:	6921      	ldr	r1, [r4, #16]
 80226c0:	4650      	mov	r0, sl
 80226c2:	f7ff ff5d 	bl	8022580 <_free_r>
 80226c6:	230c      	movs	r3, #12
 80226c8:	f8ca 3000 	str.w	r3, [sl]
 80226cc:	89a3      	ldrh	r3, [r4, #12]
 80226ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80226d2:	81a3      	strh	r3, [r4, #12]
 80226d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80226d8:	e7e9      	b.n	80226ae <__ssputs_r+0x8a>
	...

080226dc <_svfiprintf_r>:
 80226dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226e0:	4698      	mov	r8, r3
 80226e2:	898b      	ldrh	r3, [r1, #12]
 80226e4:	061b      	lsls	r3, r3, #24
 80226e6:	b09d      	sub	sp, #116	@ 0x74
 80226e8:	4607      	mov	r7, r0
 80226ea:	460d      	mov	r5, r1
 80226ec:	4614      	mov	r4, r2
 80226ee:	d510      	bpl.n	8022712 <_svfiprintf_r+0x36>
 80226f0:	690b      	ldr	r3, [r1, #16]
 80226f2:	b973      	cbnz	r3, 8022712 <_svfiprintf_r+0x36>
 80226f4:	2140      	movs	r1, #64	@ 0x40
 80226f6:	f7ff f9bb 	bl	8021a70 <_malloc_r>
 80226fa:	6028      	str	r0, [r5, #0]
 80226fc:	6128      	str	r0, [r5, #16]
 80226fe:	b930      	cbnz	r0, 802270e <_svfiprintf_r+0x32>
 8022700:	230c      	movs	r3, #12
 8022702:	603b      	str	r3, [r7, #0]
 8022704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022708:	b01d      	add	sp, #116	@ 0x74
 802270a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802270e:	2340      	movs	r3, #64	@ 0x40
 8022710:	616b      	str	r3, [r5, #20]
 8022712:	2300      	movs	r3, #0
 8022714:	9309      	str	r3, [sp, #36]	@ 0x24
 8022716:	2320      	movs	r3, #32
 8022718:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802271c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022720:	2330      	movs	r3, #48	@ 0x30
 8022722:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80228c0 <_svfiprintf_r+0x1e4>
 8022726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802272a:	f04f 0901 	mov.w	r9, #1
 802272e:	4623      	mov	r3, r4
 8022730:	469a      	mov	sl, r3
 8022732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022736:	b10a      	cbz	r2, 802273c <_svfiprintf_r+0x60>
 8022738:	2a25      	cmp	r2, #37	@ 0x25
 802273a:	d1f9      	bne.n	8022730 <_svfiprintf_r+0x54>
 802273c:	ebba 0b04 	subs.w	fp, sl, r4
 8022740:	d00b      	beq.n	802275a <_svfiprintf_r+0x7e>
 8022742:	465b      	mov	r3, fp
 8022744:	4622      	mov	r2, r4
 8022746:	4629      	mov	r1, r5
 8022748:	4638      	mov	r0, r7
 802274a:	f7ff ff6b 	bl	8022624 <__ssputs_r>
 802274e:	3001      	adds	r0, #1
 8022750:	f000 80a7 	beq.w	80228a2 <_svfiprintf_r+0x1c6>
 8022754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022756:	445a      	add	r2, fp
 8022758:	9209      	str	r2, [sp, #36]	@ 0x24
 802275a:	f89a 3000 	ldrb.w	r3, [sl]
 802275e:	2b00      	cmp	r3, #0
 8022760:	f000 809f 	beq.w	80228a2 <_svfiprintf_r+0x1c6>
 8022764:	2300      	movs	r3, #0
 8022766:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802276a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802276e:	f10a 0a01 	add.w	sl, sl, #1
 8022772:	9304      	str	r3, [sp, #16]
 8022774:	9307      	str	r3, [sp, #28]
 8022776:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802277a:	931a      	str	r3, [sp, #104]	@ 0x68
 802277c:	4654      	mov	r4, sl
 802277e:	2205      	movs	r2, #5
 8022780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022784:	484e      	ldr	r0, [pc, #312]	@ (80228c0 <_svfiprintf_r+0x1e4>)
 8022786:	f7dd fdc3 	bl	8000310 <memchr>
 802278a:	9a04      	ldr	r2, [sp, #16]
 802278c:	b9d8      	cbnz	r0, 80227c6 <_svfiprintf_r+0xea>
 802278e:	06d0      	lsls	r0, r2, #27
 8022790:	bf44      	itt	mi
 8022792:	2320      	movmi	r3, #32
 8022794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022798:	0711      	lsls	r1, r2, #28
 802279a:	bf44      	itt	mi
 802279c:	232b      	movmi	r3, #43	@ 0x2b
 802279e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80227a2:	f89a 3000 	ldrb.w	r3, [sl]
 80227a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80227a8:	d015      	beq.n	80227d6 <_svfiprintf_r+0xfa>
 80227aa:	9a07      	ldr	r2, [sp, #28]
 80227ac:	4654      	mov	r4, sl
 80227ae:	2000      	movs	r0, #0
 80227b0:	f04f 0c0a 	mov.w	ip, #10
 80227b4:	4621      	mov	r1, r4
 80227b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80227ba:	3b30      	subs	r3, #48	@ 0x30
 80227bc:	2b09      	cmp	r3, #9
 80227be:	d94b      	bls.n	8022858 <_svfiprintf_r+0x17c>
 80227c0:	b1b0      	cbz	r0, 80227f0 <_svfiprintf_r+0x114>
 80227c2:	9207      	str	r2, [sp, #28]
 80227c4:	e014      	b.n	80227f0 <_svfiprintf_r+0x114>
 80227c6:	eba0 0308 	sub.w	r3, r0, r8
 80227ca:	fa09 f303 	lsl.w	r3, r9, r3
 80227ce:	4313      	orrs	r3, r2
 80227d0:	9304      	str	r3, [sp, #16]
 80227d2:	46a2      	mov	sl, r4
 80227d4:	e7d2      	b.n	802277c <_svfiprintf_r+0xa0>
 80227d6:	9b03      	ldr	r3, [sp, #12]
 80227d8:	1d19      	adds	r1, r3, #4
 80227da:	681b      	ldr	r3, [r3, #0]
 80227dc:	9103      	str	r1, [sp, #12]
 80227de:	2b00      	cmp	r3, #0
 80227e0:	bfbb      	ittet	lt
 80227e2:	425b      	neglt	r3, r3
 80227e4:	f042 0202 	orrlt.w	r2, r2, #2
 80227e8:	9307      	strge	r3, [sp, #28]
 80227ea:	9307      	strlt	r3, [sp, #28]
 80227ec:	bfb8      	it	lt
 80227ee:	9204      	strlt	r2, [sp, #16]
 80227f0:	7823      	ldrb	r3, [r4, #0]
 80227f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80227f4:	d10a      	bne.n	802280c <_svfiprintf_r+0x130>
 80227f6:	7863      	ldrb	r3, [r4, #1]
 80227f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80227fa:	d132      	bne.n	8022862 <_svfiprintf_r+0x186>
 80227fc:	9b03      	ldr	r3, [sp, #12]
 80227fe:	1d1a      	adds	r2, r3, #4
 8022800:	681b      	ldr	r3, [r3, #0]
 8022802:	9203      	str	r2, [sp, #12]
 8022804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022808:	3402      	adds	r4, #2
 802280a:	9305      	str	r3, [sp, #20]
 802280c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80228d0 <_svfiprintf_r+0x1f4>
 8022810:	7821      	ldrb	r1, [r4, #0]
 8022812:	2203      	movs	r2, #3
 8022814:	4650      	mov	r0, sl
 8022816:	f7dd fd7b 	bl	8000310 <memchr>
 802281a:	b138      	cbz	r0, 802282c <_svfiprintf_r+0x150>
 802281c:	9b04      	ldr	r3, [sp, #16]
 802281e:	eba0 000a 	sub.w	r0, r0, sl
 8022822:	2240      	movs	r2, #64	@ 0x40
 8022824:	4082      	lsls	r2, r0
 8022826:	4313      	orrs	r3, r2
 8022828:	3401      	adds	r4, #1
 802282a:	9304      	str	r3, [sp, #16]
 802282c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022830:	4824      	ldr	r0, [pc, #144]	@ (80228c4 <_svfiprintf_r+0x1e8>)
 8022832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022836:	2206      	movs	r2, #6
 8022838:	f7dd fd6a 	bl	8000310 <memchr>
 802283c:	2800      	cmp	r0, #0
 802283e:	d036      	beq.n	80228ae <_svfiprintf_r+0x1d2>
 8022840:	4b21      	ldr	r3, [pc, #132]	@ (80228c8 <_svfiprintf_r+0x1ec>)
 8022842:	bb1b      	cbnz	r3, 802288c <_svfiprintf_r+0x1b0>
 8022844:	9b03      	ldr	r3, [sp, #12]
 8022846:	3307      	adds	r3, #7
 8022848:	f023 0307 	bic.w	r3, r3, #7
 802284c:	3308      	adds	r3, #8
 802284e:	9303      	str	r3, [sp, #12]
 8022850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022852:	4433      	add	r3, r6
 8022854:	9309      	str	r3, [sp, #36]	@ 0x24
 8022856:	e76a      	b.n	802272e <_svfiprintf_r+0x52>
 8022858:	fb0c 3202 	mla	r2, ip, r2, r3
 802285c:	460c      	mov	r4, r1
 802285e:	2001      	movs	r0, #1
 8022860:	e7a8      	b.n	80227b4 <_svfiprintf_r+0xd8>
 8022862:	2300      	movs	r3, #0
 8022864:	3401      	adds	r4, #1
 8022866:	9305      	str	r3, [sp, #20]
 8022868:	4619      	mov	r1, r3
 802286a:	f04f 0c0a 	mov.w	ip, #10
 802286e:	4620      	mov	r0, r4
 8022870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022874:	3a30      	subs	r2, #48	@ 0x30
 8022876:	2a09      	cmp	r2, #9
 8022878:	d903      	bls.n	8022882 <_svfiprintf_r+0x1a6>
 802287a:	2b00      	cmp	r3, #0
 802287c:	d0c6      	beq.n	802280c <_svfiprintf_r+0x130>
 802287e:	9105      	str	r1, [sp, #20]
 8022880:	e7c4      	b.n	802280c <_svfiprintf_r+0x130>
 8022882:	fb0c 2101 	mla	r1, ip, r1, r2
 8022886:	4604      	mov	r4, r0
 8022888:	2301      	movs	r3, #1
 802288a:	e7f0      	b.n	802286e <_svfiprintf_r+0x192>
 802288c:	ab03      	add	r3, sp, #12
 802288e:	9300      	str	r3, [sp, #0]
 8022890:	462a      	mov	r2, r5
 8022892:	4b0e      	ldr	r3, [pc, #56]	@ (80228cc <_svfiprintf_r+0x1f0>)
 8022894:	a904      	add	r1, sp, #16
 8022896:	4638      	mov	r0, r7
 8022898:	f3af 8000 	nop.w
 802289c:	1c42      	adds	r2, r0, #1
 802289e:	4606      	mov	r6, r0
 80228a0:	d1d6      	bne.n	8022850 <_svfiprintf_r+0x174>
 80228a2:	89ab      	ldrh	r3, [r5, #12]
 80228a4:	065b      	lsls	r3, r3, #25
 80228a6:	f53f af2d 	bmi.w	8022704 <_svfiprintf_r+0x28>
 80228aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80228ac:	e72c      	b.n	8022708 <_svfiprintf_r+0x2c>
 80228ae:	ab03      	add	r3, sp, #12
 80228b0:	9300      	str	r3, [sp, #0]
 80228b2:	462a      	mov	r2, r5
 80228b4:	4b05      	ldr	r3, [pc, #20]	@ (80228cc <_svfiprintf_r+0x1f0>)
 80228b6:	a904      	add	r1, sp, #16
 80228b8:	4638      	mov	r0, r7
 80228ba:	f000 f879 	bl	80229b0 <_printf_i>
 80228be:	e7ed      	b.n	802289c <_svfiprintf_r+0x1c0>
 80228c0:	08025cd6 	.word	0x08025cd6
 80228c4:	08025ce0 	.word	0x08025ce0
 80228c8:	00000000 	.word	0x00000000
 80228cc:	08022625 	.word	0x08022625
 80228d0:	08025cdc 	.word	0x08025cdc

080228d4 <_printf_common>:
 80228d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80228d8:	4616      	mov	r6, r2
 80228da:	4698      	mov	r8, r3
 80228dc:	688a      	ldr	r2, [r1, #8]
 80228de:	690b      	ldr	r3, [r1, #16]
 80228e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80228e4:	4293      	cmp	r3, r2
 80228e6:	bfb8      	it	lt
 80228e8:	4613      	movlt	r3, r2
 80228ea:	6033      	str	r3, [r6, #0]
 80228ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80228f0:	4607      	mov	r7, r0
 80228f2:	460c      	mov	r4, r1
 80228f4:	b10a      	cbz	r2, 80228fa <_printf_common+0x26>
 80228f6:	3301      	adds	r3, #1
 80228f8:	6033      	str	r3, [r6, #0]
 80228fa:	6823      	ldr	r3, [r4, #0]
 80228fc:	0699      	lsls	r1, r3, #26
 80228fe:	bf42      	ittt	mi
 8022900:	6833      	ldrmi	r3, [r6, #0]
 8022902:	3302      	addmi	r3, #2
 8022904:	6033      	strmi	r3, [r6, #0]
 8022906:	6825      	ldr	r5, [r4, #0]
 8022908:	f015 0506 	ands.w	r5, r5, #6
 802290c:	d106      	bne.n	802291c <_printf_common+0x48>
 802290e:	f104 0a19 	add.w	sl, r4, #25
 8022912:	68e3      	ldr	r3, [r4, #12]
 8022914:	6832      	ldr	r2, [r6, #0]
 8022916:	1a9b      	subs	r3, r3, r2
 8022918:	42ab      	cmp	r3, r5
 802291a:	dc26      	bgt.n	802296a <_printf_common+0x96>
 802291c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022920:	6822      	ldr	r2, [r4, #0]
 8022922:	3b00      	subs	r3, #0
 8022924:	bf18      	it	ne
 8022926:	2301      	movne	r3, #1
 8022928:	0692      	lsls	r2, r2, #26
 802292a:	d42b      	bmi.n	8022984 <_printf_common+0xb0>
 802292c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022930:	4641      	mov	r1, r8
 8022932:	4638      	mov	r0, r7
 8022934:	47c8      	blx	r9
 8022936:	3001      	adds	r0, #1
 8022938:	d01e      	beq.n	8022978 <_printf_common+0xa4>
 802293a:	6823      	ldr	r3, [r4, #0]
 802293c:	6922      	ldr	r2, [r4, #16]
 802293e:	f003 0306 	and.w	r3, r3, #6
 8022942:	2b04      	cmp	r3, #4
 8022944:	bf02      	ittt	eq
 8022946:	68e5      	ldreq	r5, [r4, #12]
 8022948:	6833      	ldreq	r3, [r6, #0]
 802294a:	1aed      	subeq	r5, r5, r3
 802294c:	68a3      	ldr	r3, [r4, #8]
 802294e:	bf0c      	ite	eq
 8022950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022954:	2500      	movne	r5, #0
 8022956:	4293      	cmp	r3, r2
 8022958:	bfc4      	itt	gt
 802295a:	1a9b      	subgt	r3, r3, r2
 802295c:	18ed      	addgt	r5, r5, r3
 802295e:	2600      	movs	r6, #0
 8022960:	341a      	adds	r4, #26
 8022962:	42b5      	cmp	r5, r6
 8022964:	d11a      	bne.n	802299c <_printf_common+0xc8>
 8022966:	2000      	movs	r0, #0
 8022968:	e008      	b.n	802297c <_printf_common+0xa8>
 802296a:	2301      	movs	r3, #1
 802296c:	4652      	mov	r2, sl
 802296e:	4641      	mov	r1, r8
 8022970:	4638      	mov	r0, r7
 8022972:	47c8      	blx	r9
 8022974:	3001      	adds	r0, #1
 8022976:	d103      	bne.n	8022980 <_printf_common+0xac>
 8022978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802297c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022980:	3501      	adds	r5, #1
 8022982:	e7c6      	b.n	8022912 <_printf_common+0x3e>
 8022984:	18e1      	adds	r1, r4, r3
 8022986:	1c5a      	adds	r2, r3, #1
 8022988:	2030      	movs	r0, #48	@ 0x30
 802298a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802298e:	4422      	add	r2, r4
 8022990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022998:	3302      	adds	r3, #2
 802299a:	e7c7      	b.n	802292c <_printf_common+0x58>
 802299c:	2301      	movs	r3, #1
 802299e:	4622      	mov	r2, r4
 80229a0:	4641      	mov	r1, r8
 80229a2:	4638      	mov	r0, r7
 80229a4:	47c8      	blx	r9
 80229a6:	3001      	adds	r0, #1
 80229a8:	d0e6      	beq.n	8022978 <_printf_common+0xa4>
 80229aa:	3601      	adds	r6, #1
 80229ac:	e7d9      	b.n	8022962 <_printf_common+0x8e>
	...

080229b0 <_printf_i>:
 80229b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80229b4:	7e0f      	ldrb	r7, [r1, #24]
 80229b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80229b8:	2f78      	cmp	r7, #120	@ 0x78
 80229ba:	4691      	mov	r9, r2
 80229bc:	4680      	mov	r8, r0
 80229be:	460c      	mov	r4, r1
 80229c0:	469a      	mov	sl, r3
 80229c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80229c6:	d807      	bhi.n	80229d8 <_printf_i+0x28>
 80229c8:	2f62      	cmp	r7, #98	@ 0x62
 80229ca:	d80a      	bhi.n	80229e2 <_printf_i+0x32>
 80229cc:	2f00      	cmp	r7, #0
 80229ce:	f000 80d2 	beq.w	8022b76 <_printf_i+0x1c6>
 80229d2:	2f58      	cmp	r7, #88	@ 0x58
 80229d4:	f000 80b9 	beq.w	8022b4a <_printf_i+0x19a>
 80229d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80229dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80229e0:	e03a      	b.n	8022a58 <_printf_i+0xa8>
 80229e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80229e6:	2b15      	cmp	r3, #21
 80229e8:	d8f6      	bhi.n	80229d8 <_printf_i+0x28>
 80229ea:	a101      	add	r1, pc, #4	@ (adr r1, 80229f0 <_printf_i+0x40>)
 80229ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80229f0:	08022a49 	.word	0x08022a49
 80229f4:	08022a5d 	.word	0x08022a5d
 80229f8:	080229d9 	.word	0x080229d9
 80229fc:	080229d9 	.word	0x080229d9
 8022a00:	080229d9 	.word	0x080229d9
 8022a04:	080229d9 	.word	0x080229d9
 8022a08:	08022a5d 	.word	0x08022a5d
 8022a0c:	080229d9 	.word	0x080229d9
 8022a10:	080229d9 	.word	0x080229d9
 8022a14:	080229d9 	.word	0x080229d9
 8022a18:	080229d9 	.word	0x080229d9
 8022a1c:	08022b5d 	.word	0x08022b5d
 8022a20:	08022a87 	.word	0x08022a87
 8022a24:	08022b17 	.word	0x08022b17
 8022a28:	080229d9 	.word	0x080229d9
 8022a2c:	080229d9 	.word	0x080229d9
 8022a30:	08022b7f 	.word	0x08022b7f
 8022a34:	080229d9 	.word	0x080229d9
 8022a38:	08022a87 	.word	0x08022a87
 8022a3c:	080229d9 	.word	0x080229d9
 8022a40:	080229d9 	.word	0x080229d9
 8022a44:	08022b1f 	.word	0x08022b1f
 8022a48:	6833      	ldr	r3, [r6, #0]
 8022a4a:	1d1a      	adds	r2, r3, #4
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	6032      	str	r2, [r6, #0]
 8022a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022a54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022a58:	2301      	movs	r3, #1
 8022a5a:	e09d      	b.n	8022b98 <_printf_i+0x1e8>
 8022a5c:	6833      	ldr	r3, [r6, #0]
 8022a5e:	6820      	ldr	r0, [r4, #0]
 8022a60:	1d19      	adds	r1, r3, #4
 8022a62:	6031      	str	r1, [r6, #0]
 8022a64:	0606      	lsls	r6, r0, #24
 8022a66:	d501      	bpl.n	8022a6c <_printf_i+0xbc>
 8022a68:	681d      	ldr	r5, [r3, #0]
 8022a6a:	e003      	b.n	8022a74 <_printf_i+0xc4>
 8022a6c:	0645      	lsls	r5, r0, #25
 8022a6e:	d5fb      	bpl.n	8022a68 <_printf_i+0xb8>
 8022a70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022a74:	2d00      	cmp	r5, #0
 8022a76:	da03      	bge.n	8022a80 <_printf_i+0xd0>
 8022a78:	232d      	movs	r3, #45	@ 0x2d
 8022a7a:	426d      	negs	r5, r5
 8022a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022a80:	4859      	ldr	r0, [pc, #356]	@ (8022be8 <_printf_i+0x238>)
 8022a82:	230a      	movs	r3, #10
 8022a84:	e011      	b.n	8022aaa <_printf_i+0xfa>
 8022a86:	6821      	ldr	r1, [r4, #0]
 8022a88:	6833      	ldr	r3, [r6, #0]
 8022a8a:	0608      	lsls	r0, r1, #24
 8022a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8022a90:	d402      	bmi.n	8022a98 <_printf_i+0xe8>
 8022a92:	0649      	lsls	r1, r1, #25
 8022a94:	bf48      	it	mi
 8022a96:	b2ad      	uxthmi	r5, r5
 8022a98:	2f6f      	cmp	r7, #111	@ 0x6f
 8022a9a:	4853      	ldr	r0, [pc, #332]	@ (8022be8 <_printf_i+0x238>)
 8022a9c:	6033      	str	r3, [r6, #0]
 8022a9e:	bf14      	ite	ne
 8022aa0:	230a      	movne	r3, #10
 8022aa2:	2308      	moveq	r3, #8
 8022aa4:	2100      	movs	r1, #0
 8022aa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022aaa:	6866      	ldr	r6, [r4, #4]
 8022aac:	60a6      	str	r6, [r4, #8]
 8022aae:	2e00      	cmp	r6, #0
 8022ab0:	bfa2      	ittt	ge
 8022ab2:	6821      	ldrge	r1, [r4, #0]
 8022ab4:	f021 0104 	bicge.w	r1, r1, #4
 8022ab8:	6021      	strge	r1, [r4, #0]
 8022aba:	b90d      	cbnz	r5, 8022ac0 <_printf_i+0x110>
 8022abc:	2e00      	cmp	r6, #0
 8022abe:	d04b      	beq.n	8022b58 <_printf_i+0x1a8>
 8022ac0:	4616      	mov	r6, r2
 8022ac2:	fbb5 f1f3 	udiv	r1, r5, r3
 8022ac6:	fb03 5711 	mls	r7, r3, r1, r5
 8022aca:	5dc7      	ldrb	r7, [r0, r7]
 8022acc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022ad0:	462f      	mov	r7, r5
 8022ad2:	42bb      	cmp	r3, r7
 8022ad4:	460d      	mov	r5, r1
 8022ad6:	d9f4      	bls.n	8022ac2 <_printf_i+0x112>
 8022ad8:	2b08      	cmp	r3, #8
 8022ada:	d10b      	bne.n	8022af4 <_printf_i+0x144>
 8022adc:	6823      	ldr	r3, [r4, #0]
 8022ade:	07df      	lsls	r7, r3, #31
 8022ae0:	d508      	bpl.n	8022af4 <_printf_i+0x144>
 8022ae2:	6923      	ldr	r3, [r4, #16]
 8022ae4:	6861      	ldr	r1, [r4, #4]
 8022ae6:	4299      	cmp	r1, r3
 8022ae8:	bfde      	ittt	le
 8022aea:	2330      	movle	r3, #48	@ 0x30
 8022aec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022af0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8022af4:	1b92      	subs	r2, r2, r6
 8022af6:	6122      	str	r2, [r4, #16]
 8022af8:	f8cd a000 	str.w	sl, [sp]
 8022afc:	464b      	mov	r3, r9
 8022afe:	aa03      	add	r2, sp, #12
 8022b00:	4621      	mov	r1, r4
 8022b02:	4640      	mov	r0, r8
 8022b04:	f7ff fee6 	bl	80228d4 <_printf_common>
 8022b08:	3001      	adds	r0, #1
 8022b0a:	d14a      	bne.n	8022ba2 <_printf_i+0x1f2>
 8022b0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022b10:	b004      	add	sp, #16
 8022b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b16:	6823      	ldr	r3, [r4, #0]
 8022b18:	f043 0320 	orr.w	r3, r3, #32
 8022b1c:	6023      	str	r3, [r4, #0]
 8022b1e:	4833      	ldr	r0, [pc, #204]	@ (8022bec <_printf_i+0x23c>)
 8022b20:	2778      	movs	r7, #120	@ 0x78
 8022b22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022b26:	6823      	ldr	r3, [r4, #0]
 8022b28:	6831      	ldr	r1, [r6, #0]
 8022b2a:	061f      	lsls	r7, r3, #24
 8022b2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8022b30:	d402      	bmi.n	8022b38 <_printf_i+0x188>
 8022b32:	065f      	lsls	r7, r3, #25
 8022b34:	bf48      	it	mi
 8022b36:	b2ad      	uxthmi	r5, r5
 8022b38:	6031      	str	r1, [r6, #0]
 8022b3a:	07d9      	lsls	r1, r3, #31
 8022b3c:	bf44      	itt	mi
 8022b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8022b42:	6023      	strmi	r3, [r4, #0]
 8022b44:	b11d      	cbz	r5, 8022b4e <_printf_i+0x19e>
 8022b46:	2310      	movs	r3, #16
 8022b48:	e7ac      	b.n	8022aa4 <_printf_i+0xf4>
 8022b4a:	4827      	ldr	r0, [pc, #156]	@ (8022be8 <_printf_i+0x238>)
 8022b4c:	e7e9      	b.n	8022b22 <_printf_i+0x172>
 8022b4e:	6823      	ldr	r3, [r4, #0]
 8022b50:	f023 0320 	bic.w	r3, r3, #32
 8022b54:	6023      	str	r3, [r4, #0]
 8022b56:	e7f6      	b.n	8022b46 <_printf_i+0x196>
 8022b58:	4616      	mov	r6, r2
 8022b5a:	e7bd      	b.n	8022ad8 <_printf_i+0x128>
 8022b5c:	6833      	ldr	r3, [r6, #0]
 8022b5e:	6825      	ldr	r5, [r4, #0]
 8022b60:	6961      	ldr	r1, [r4, #20]
 8022b62:	1d18      	adds	r0, r3, #4
 8022b64:	6030      	str	r0, [r6, #0]
 8022b66:	062e      	lsls	r6, r5, #24
 8022b68:	681b      	ldr	r3, [r3, #0]
 8022b6a:	d501      	bpl.n	8022b70 <_printf_i+0x1c0>
 8022b6c:	6019      	str	r1, [r3, #0]
 8022b6e:	e002      	b.n	8022b76 <_printf_i+0x1c6>
 8022b70:	0668      	lsls	r0, r5, #25
 8022b72:	d5fb      	bpl.n	8022b6c <_printf_i+0x1bc>
 8022b74:	8019      	strh	r1, [r3, #0]
 8022b76:	2300      	movs	r3, #0
 8022b78:	6123      	str	r3, [r4, #16]
 8022b7a:	4616      	mov	r6, r2
 8022b7c:	e7bc      	b.n	8022af8 <_printf_i+0x148>
 8022b7e:	6833      	ldr	r3, [r6, #0]
 8022b80:	1d1a      	adds	r2, r3, #4
 8022b82:	6032      	str	r2, [r6, #0]
 8022b84:	681e      	ldr	r6, [r3, #0]
 8022b86:	6862      	ldr	r2, [r4, #4]
 8022b88:	2100      	movs	r1, #0
 8022b8a:	4630      	mov	r0, r6
 8022b8c:	f7dd fbc0 	bl	8000310 <memchr>
 8022b90:	b108      	cbz	r0, 8022b96 <_printf_i+0x1e6>
 8022b92:	1b80      	subs	r0, r0, r6
 8022b94:	6060      	str	r0, [r4, #4]
 8022b96:	6863      	ldr	r3, [r4, #4]
 8022b98:	6123      	str	r3, [r4, #16]
 8022b9a:	2300      	movs	r3, #0
 8022b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022ba0:	e7aa      	b.n	8022af8 <_printf_i+0x148>
 8022ba2:	6923      	ldr	r3, [r4, #16]
 8022ba4:	4632      	mov	r2, r6
 8022ba6:	4649      	mov	r1, r9
 8022ba8:	4640      	mov	r0, r8
 8022baa:	47d0      	blx	sl
 8022bac:	3001      	adds	r0, #1
 8022bae:	d0ad      	beq.n	8022b0c <_printf_i+0x15c>
 8022bb0:	6823      	ldr	r3, [r4, #0]
 8022bb2:	079b      	lsls	r3, r3, #30
 8022bb4:	d413      	bmi.n	8022bde <_printf_i+0x22e>
 8022bb6:	68e0      	ldr	r0, [r4, #12]
 8022bb8:	9b03      	ldr	r3, [sp, #12]
 8022bba:	4298      	cmp	r0, r3
 8022bbc:	bfb8      	it	lt
 8022bbe:	4618      	movlt	r0, r3
 8022bc0:	e7a6      	b.n	8022b10 <_printf_i+0x160>
 8022bc2:	2301      	movs	r3, #1
 8022bc4:	4632      	mov	r2, r6
 8022bc6:	4649      	mov	r1, r9
 8022bc8:	4640      	mov	r0, r8
 8022bca:	47d0      	blx	sl
 8022bcc:	3001      	adds	r0, #1
 8022bce:	d09d      	beq.n	8022b0c <_printf_i+0x15c>
 8022bd0:	3501      	adds	r5, #1
 8022bd2:	68e3      	ldr	r3, [r4, #12]
 8022bd4:	9903      	ldr	r1, [sp, #12]
 8022bd6:	1a5b      	subs	r3, r3, r1
 8022bd8:	42ab      	cmp	r3, r5
 8022bda:	dcf2      	bgt.n	8022bc2 <_printf_i+0x212>
 8022bdc:	e7eb      	b.n	8022bb6 <_printf_i+0x206>
 8022bde:	2500      	movs	r5, #0
 8022be0:	f104 0619 	add.w	r6, r4, #25
 8022be4:	e7f5      	b.n	8022bd2 <_printf_i+0x222>
 8022be6:	bf00      	nop
 8022be8:	08025ce7 	.word	0x08025ce7
 8022bec:	08025cf8 	.word	0x08025cf8

08022bf0 <__sflush_r>:
 8022bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022bf8:	0716      	lsls	r6, r2, #28
 8022bfa:	4605      	mov	r5, r0
 8022bfc:	460c      	mov	r4, r1
 8022bfe:	d454      	bmi.n	8022caa <__sflush_r+0xba>
 8022c00:	684b      	ldr	r3, [r1, #4]
 8022c02:	2b00      	cmp	r3, #0
 8022c04:	dc02      	bgt.n	8022c0c <__sflush_r+0x1c>
 8022c06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	dd48      	ble.n	8022c9e <__sflush_r+0xae>
 8022c0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022c0e:	2e00      	cmp	r6, #0
 8022c10:	d045      	beq.n	8022c9e <__sflush_r+0xae>
 8022c12:	2300      	movs	r3, #0
 8022c14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022c18:	682f      	ldr	r7, [r5, #0]
 8022c1a:	6a21      	ldr	r1, [r4, #32]
 8022c1c:	602b      	str	r3, [r5, #0]
 8022c1e:	d030      	beq.n	8022c82 <__sflush_r+0x92>
 8022c20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022c22:	89a3      	ldrh	r3, [r4, #12]
 8022c24:	0759      	lsls	r1, r3, #29
 8022c26:	d505      	bpl.n	8022c34 <__sflush_r+0x44>
 8022c28:	6863      	ldr	r3, [r4, #4]
 8022c2a:	1ad2      	subs	r2, r2, r3
 8022c2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022c2e:	b10b      	cbz	r3, 8022c34 <__sflush_r+0x44>
 8022c30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022c32:	1ad2      	subs	r2, r2, r3
 8022c34:	2300      	movs	r3, #0
 8022c36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022c38:	6a21      	ldr	r1, [r4, #32]
 8022c3a:	4628      	mov	r0, r5
 8022c3c:	47b0      	blx	r6
 8022c3e:	1c43      	adds	r3, r0, #1
 8022c40:	89a3      	ldrh	r3, [r4, #12]
 8022c42:	d106      	bne.n	8022c52 <__sflush_r+0x62>
 8022c44:	6829      	ldr	r1, [r5, #0]
 8022c46:	291d      	cmp	r1, #29
 8022c48:	d82b      	bhi.n	8022ca2 <__sflush_r+0xb2>
 8022c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8022cf4 <__sflush_r+0x104>)
 8022c4c:	410a      	asrs	r2, r1
 8022c4e:	07d6      	lsls	r6, r2, #31
 8022c50:	d427      	bmi.n	8022ca2 <__sflush_r+0xb2>
 8022c52:	2200      	movs	r2, #0
 8022c54:	6062      	str	r2, [r4, #4]
 8022c56:	04d9      	lsls	r1, r3, #19
 8022c58:	6922      	ldr	r2, [r4, #16]
 8022c5a:	6022      	str	r2, [r4, #0]
 8022c5c:	d504      	bpl.n	8022c68 <__sflush_r+0x78>
 8022c5e:	1c42      	adds	r2, r0, #1
 8022c60:	d101      	bne.n	8022c66 <__sflush_r+0x76>
 8022c62:	682b      	ldr	r3, [r5, #0]
 8022c64:	b903      	cbnz	r3, 8022c68 <__sflush_r+0x78>
 8022c66:	6560      	str	r0, [r4, #84]	@ 0x54
 8022c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022c6a:	602f      	str	r7, [r5, #0]
 8022c6c:	b1b9      	cbz	r1, 8022c9e <__sflush_r+0xae>
 8022c6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022c72:	4299      	cmp	r1, r3
 8022c74:	d002      	beq.n	8022c7c <__sflush_r+0x8c>
 8022c76:	4628      	mov	r0, r5
 8022c78:	f7ff fc82 	bl	8022580 <_free_r>
 8022c7c:	2300      	movs	r3, #0
 8022c7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8022c80:	e00d      	b.n	8022c9e <__sflush_r+0xae>
 8022c82:	2301      	movs	r3, #1
 8022c84:	4628      	mov	r0, r5
 8022c86:	47b0      	blx	r6
 8022c88:	4602      	mov	r2, r0
 8022c8a:	1c50      	adds	r0, r2, #1
 8022c8c:	d1c9      	bne.n	8022c22 <__sflush_r+0x32>
 8022c8e:	682b      	ldr	r3, [r5, #0]
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d0c6      	beq.n	8022c22 <__sflush_r+0x32>
 8022c94:	2b1d      	cmp	r3, #29
 8022c96:	d001      	beq.n	8022c9c <__sflush_r+0xac>
 8022c98:	2b16      	cmp	r3, #22
 8022c9a:	d11e      	bne.n	8022cda <__sflush_r+0xea>
 8022c9c:	602f      	str	r7, [r5, #0]
 8022c9e:	2000      	movs	r0, #0
 8022ca0:	e022      	b.n	8022ce8 <__sflush_r+0xf8>
 8022ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022ca6:	b21b      	sxth	r3, r3
 8022ca8:	e01b      	b.n	8022ce2 <__sflush_r+0xf2>
 8022caa:	690f      	ldr	r7, [r1, #16]
 8022cac:	2f00      	cmp	r7, #0
 8022cae:	d0f6      	beq.n	8022c9e <__sflush_r+0xae>
 8022cb0:	0793      	lsls	r3, r2, #30
 8022cb2:	680e      	ldr	r6, [r1, #0]
 8022cb4:	bf08      	it	eq
 8022cb6:	694b      	ldreq	r3, [r1, #20]
 8022cb8:	600f      	str	r7, [r1, #0]
 8022cba:	bf18      	it	ne
 8022cbc:	2300      	movne	r3, #0
 8022cbe:	eba6 0807 	sub.w	r8, r6, r7
 8022cc2:	608b      	str	r3, [r1, #8]
 8022cc4:	f1b8 0f00 	cmp.w	r8, #0
 8022cc8:	dde9      	ble.n	8022c9e <__sflush_r+0xae>
 8022cca:	6a21      	ldr	r1, [r4, #32]
 8022ccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022cce:	4643      	mov	r3, r8
 8022cd0:	463a      	mov	r2, r7
 8022cd2:	4628      	mov	r0, r5
 8022cd4:	47b0      	blx	r6
 8022cd6:	2800      	cmp	r0, #0
 8022cd8:	dc08      	bgt.n	8022cec <__sflush_r+0xfc>
 8022cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022ce2:	81a3      	strh	r3, [r4, #12]
 8022ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022cec:	4407      	add	r7, r0
 8022cee:	eba8 0800 	sub.w	r8, r8, r0
 8022cf2:	e7e7      	b.n	8022cc4 <__sflush_r+0xd4>
 8022cf4:	dfbffffe 	.word	0xdfbffffe

08022cf8 <_fflush_r>:
 8022cf8:	b538      	push	{r3, r4, r5, lr}
 8022cfa:	690b      	ldr	r3, [r1, #16]
 8022cfc:	4605      	mov	r5, r0
 8022cfe:	460c      	mov	r4, r1
 8022d00:	b913      	cbnz	r3, 8022d08 <_fflush_r+0x10>
 8022d02:	2500      	movs	r5, #0
 8022d04:	4628      	mov	r0, r5
 8022d06:	bd38      	pop	{r3, r4, r5, pc}
 8022d08:	b118      	cbz	r0, 8022d12 <_fflush_r+0x1a>
 8022d0a:	6a03      	ldr	r3, [r0, #32]
 8022d0c:	b90b      	cbnz	r3, 8022d12 <_fflush_r+0x1a>
 8022d0e:	f7ff f8e1 	bl	8021ed4 <__sinit>
 8022d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	d0f3      	beq.n	8022d02 <_fflush_r+0xa>
 8022d1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022d1c:	07d0      	lsls	r0, r2, #31
 8022d1e:	d404      	bmi.n	8022d2a <_fflush_r+0x32>
 8022d20:	0599      	lsls	r1, r3, #22
 8022d22:	d402      	bmi.n	8022d2a <_fflush_r+0x32>
 8022d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022d26:	f7ff fbe8 	bl	80224fa <__retarget_lock_acquire_recursive>
 8022d2a:	4628      	mov	r0, r5
 8022d2c:	4621      	mov	r1, r4
 8022d2e:	f7ff ff5f 	bl	8022bf0 <__sflush_r>
 8022d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022d34:	07da      	lsls	r2, r3, #31
 8022d36:	4605      	mov	r5, r0
 8022d38:	d4e4      	bmi.n	8022d04 <_fflush_r+0xc>
 8022d3a:	89a3      	ldrh	r3, [r4, #12]
 8022d3c:	059b      	lsls	r3, r3, #22
 8022d3e:	d4e1      	bmi.n	8022d04 <_fflush_r+0xc>
 8022d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022d42:	f7ff fbdb 	bl	80224fc <__retarget_lock_release_recursive>
 8022d46:	e7dd      	b.n	8022d04 <_fflush_r+0xc>

08022d48 <fiprintf>:
 8022d48:	b40e      	push	{r1, r2, r3}
 8022d4a:	b503      	push	{r0, r1, lr}
 8022d4c:	4601      	mov	r1, r0
 8022d4e:	ab03      	add	r3, sp, #12
 8022d50:	4805      	ldr	r0, [pc, #20]	@ (8022d68 <fiprintf+0x20>)
 8022d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d56:	6800      	ldr	r0, [r0, #0]
 8022d58:	9301      	str	r3, [sp, #4]
 8022d5a:	f000 f8bb 	bl	8022ed4 <_vfiprintf_r>
 8022d5e:	b002      	add	sp, #8
 8022d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d64:	b003      	add	sp, #12
 8022d66:	4770      	bx	lr
 8022d68:	240012bc 	.word	0x240012bc

08022d6c <__swhatbuf_r>:
 8022d6c:	b570      	push	{r4, r5, r6, lr}
 8022d6e:	460c      	mov	r4, r1
 8022d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022d74:	2900      	cmp	r1, #0
 8022d76:	b096      	sub	sp, #88	@ 0x58
 8022d78:	4615      	mov	r5, r2
 8022d7a:	461e      	mov	r6, r3
 8022d7c:	da0d      	bge.n	8022d9a <__swhatbuf_r+0x2e>
 8022d7e:	89a3      	ldrh	r3, [r4, #12]
 8022d80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022d84:	f04f 0100 	mov.w	r1, #0
 8022d88:	bf14      	ite	ne
 8022d8a:	2340      	movne	r3, #64	@ 0x40
 8022d8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022d90:	2000      	movs	r0, #0
 8022d92:	6031      	str	r1, [r6, #0]
 8022d94:	602b      	str	r3, [r5, #0]
 8022d96:	b016      	add	sp, #88	@ 0x58
 8022d98:	bd70      	pop	{r4, r5, r6, pc}
 8022d9a:	466a      	mov	r2, sp
 8022d9c:	f000 f848 	bl	8022e30 <_fstat_r>
 8022da0:	2800      	cmp	r0, #0
 8022da2:	dbec      	blt.n	8022d7e <__swhatbuf_r+0x12>
 8022da4:	9901      	ldr	r1, [sp, #4]
 8022da6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022daa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022dae:	4259      	negs	r1, r3
 8022db0:	4159      	adcs	r1, r3
 8022db2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022db6:	e7eb      	b.n	8022d90 <__swhatbuf_r+0x24>

08022db8 <__smakebuf_r>:
 8022db8:	898b      	ldrh	r3, [r1, #12]
 8022dba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022dbc:	079d      	lsls	r5, r3, #30
 8022dbe:	4606      	mov	r6, r0
 8022dc0:	460c      	mov	r4, r1
 8022dc2:	d507      	bpl.n	8022dd4 <__smakebuf_r+0x1c>
 8022dc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022dc8:	6023      	str	r3, [r4, #0]
 8022dca:	6123      	str	r3, [r4, #16]
 8022dcc:	2301      	movs	r3, #1
 8022dce:	6163      	str	r3, [r4, #20]
 8022dd0:	b003      	add	sp, #12
 8022dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022dd4:	ab01      	add	r3, sp, #4
 8022dd6:	466a      	mov	r2, sp
 8022dd8:	f7ff ffc8 	bl	8022d6c <__swhatbuf_r>
 8022ddc:	9f00      	ldr	r7, [sp, #0]
 8022dde:	4605      	mov	r5, r0
 8022de0:	4639      	mov	r1, r7
 8022de2:	4630      	mov	r0, r6
 8022de4:	f7fe fe44 	bl	8021a70 <_malloc_r>
 8022de8:	b948      	cbnz	r0, 8022dfe <__smakebuf_r+0x46>
 8022dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022dee:	059a      	lsls	r2, r3, #22
 8022df0:	d4ee      	bmi.n	8022dd0 <__smakebuf_r+0x18>
 8022df2:	f023 0303 	bic.w	r3, r3, #3
 8022df6:	f043 0302 	orr.w	r3, r3, #2
 8022dfa:	81a3      	strh	r3, [r4, #12]
 8022dfc:	e7e2      	b.n	8022dc4 <__smakebuf_r+0xc>
 8022dfe:	89a3      	ldrh	r3, [r4, #12]
 8022e00:	6020      	str	r0, [r4, #0]
 8022e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022e06:	81a3      	strh	r3, [r4, #12]
 8022e08:	9b01      	ldr	r3, [sp, #4]
 8022e0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022e0e:	b15b      	cbz	r3, 8022e28 <__smakebuf_r+0x70>
 8022e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e14:	4630      	mov	r0, r6
 8022e16:	f000 f81d 	bl	8022e54 <_isatty_r>
 8022e1a:	b128      	cbz	r0, 8022e28 <__smakebuf_r+0x70>
 8022e1c:	89a3      	ldrh	r3, [r4, #12]
 8022e1e:	f023 0303 	bic.w	r3, r3, #3
 8022e22:	f043 0301 	orr.w	r3, r3, #1
 8022e26:	81a3      	strh	r3, [r4, #12]
 8022e28:	89a3      	ldrh	r3, [r4, #12]
 8022e2a:	431d      	orrs	r5, r3
 8022e2c:	81a5      	strh	r5, [r4, #12]
 8022e2e:	e7cf      	b.n	8022dd0 <__smakebuf_r+0x18>

08022e30 <_fstat_r>:
 8022e30:	b538      	push	{r3, r4, r5, lr}
 8022e32:	4d07      	ldr	r5, [pc, #28]	@ (8022e50 <_fstat_r+0x20>)
 8022e34:	2300      	movs	r3, #0
 8022e36:	4604      	mov	r4, r0
 8022e38:	4608      	mov	r0, r1
 8022e3a:	4611      	mov	r1, r2
 8022e3c:	602b      	str	r3, [r5, #0]
 8022e3e:	f7df fc17 	bl	8002670 <_fstat>
 8022e42:	1c43      	adds	r3, r0, #1
 8022e44:	d102      	bne.n	8022e4c <_fstat_r+0x1c>
 8022e46:	682b      	ldr	r3, [r5, #0]
 8022e48:	b103      	cbz	r3, 8022e4c <_fstat_r+0x1c>
 8022e4a:	6023      	str	r3, [r4, #0]
 8022e4c:	bd38      	pop	{r3, r4, r5, pc}
 8022e4e:	bf00      	nop
 8022e50:	240696e8 	.word	0x240696e8

08022e54 <_isatty_r>:
 8022e54:	b538      	push	{r3, r4, r5, lr}
 8022e56:	4d06      	ldr	r5, [pc, #24]	@ (8022e70 <_isatty_r+0x1c>)
 8022e58:	2300      	movs	r3, #0
 8022e5a:	4604      	mov	r4, r0
 8022e5c:	4608      	mov	r0, r1
 8022e5e:	602b      	str	r3, [r5, #0]
 8022e60:	f7df fc16 	bl	8002690 <_isatty>
 8022e64:	1c43      	adds	r3, r0, #1
 8022e66:	d102      	bne.n	8022e6e <_isatty_r+0x1a>
 8022e68:	682b      	ldr	r3, [r5, #0]
 8022e6a:	b103      	cbz	r3, 8022e6e <_isatty_r+0x1a>
 8022e6c:	6023      	str	r3, [r4, #0]
 8022e6e:	bd38      	pop	{r3, r4, r5, pc}
 8022e70:	240696e8 	.word	0x240696e8

08022e74 <abort>:
 8022e74:	b508      	push	{r3, lr}
 8022e76:	2006      	movs	r0, #6
 8022e78:	f000 f96c 	bl	8023154 <raise>
 8022e7c:	2001      	movs	r0, #1
 8022e7e:	f7df fba7 	bl	80025d0 <_exit>

08022e82 <__sfputc_r>:
 8022e82:	6893      	ldr	r3, [r2, #8]
 8022e84:	3b01      	subs	r3, #1
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	b410      	push	{r4}
 8022e8a:	6093      	str	r3, [r2, #8]
 8022e8c:	da08      	bge.n	8022ea0 <__sfputc_r+0x1e>
 8022e8e:	6994      	ldr	r4, [r2, #24]
 8022e90:	42a3      	cmp	r3, r4
 8022e92:	db01      	blt.n	8022e98 <__sfputc_r+0x16>
 8022e94:	290a      	cmp	r1, #10
 8022e96:	d103      	bne.n	8022ea0 <__sfputc_r+0x1e>
 8022e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022e9c:	f7ff b95a 	b.w	8022154 <__swbuf_r>
 8022ea0:	6813      	ldr	r3, [r2, #0]
 8022ea2:	1c58      	adds	r0, r3, #1
 8022ea4:	6010      	str	r0, [r2, #0]
 8022ea6:	7019      	strb	r1, [r3, #0]
 8022ea8:	4608      	mov	r0, r1
 8022eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022eae:	4770      	bx	lr

08022eb0 <__sfputs_r>:
 8022eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022eb2:	4606      	mov	r6, r0
 8022eb4:	460f      	mov	r7, r1
 8022eb6:	4614      	mov	r4, r2
 8022eb8:	18d5      	adds	r5, r2, r3
 8022eba:	42ac      	cmp	r4, r5
 8022ebc:	d101      	bne.n	8022ec2 <__sfputs_r+0x12>
 8022ebe:	2000      	movs	r0, #0
 8022ec0:	e007      	b.n	8022ed2 <__sfputs_r+0x22>
 8022ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ec6:	463a      	mov	r2, r7
 8022ec8:	4630      	mov	r0, r6
 8022eca:	f7ff ffda 	bl	8022e82 <__sfputc_r>
 8022ece:	1c43      	adds	r3, r0, #1
 8022ed0:	d1f3      	bne.n	8022eba <__sfputs_r+0xa>
 8022ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022ed4 <_vfiprintf_r>:
 8022ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ed8:	460d      	mov	r5, r1
 8022eda:	b09d      	sub	sp, #116	@ 0x74
 8022edc:	4614      	mov	r4, r2
 8022ede:	4698      	mov	r8, r3
 8022ee0:	4606      	mov	r6, r0
 8022ee2:	b118      	cbz	r0, 8022eec <_vfiprintf_r+0x18>
 8022ee4:	6a03      	ldr	r3, [r0, #32]
 8022ee6:	b90b      	cbnz	r3, 8022eec <_vfiprintf_r+0x18>
 8022ee8:	f7fe fff4 	bl	8021ed4 <__sinit>
 8022eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022eee:	07d9      	lsls	r1, r3, #31
 8022ef0:	d405      	bmi.n	8022efe <_vfiprintf_r+0x2a>
 8022ef2:	89ab      	ldrh	r3, [r5, #12]
 8022ef4:	059a      	lsls	r2, r3, #22
 8022ef6:	d402      	bmi.n	8022efe <_vfiprintf_r+0x2a>
 8022ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022efa:	f7ff fafe 	bl	80224fa <__retarget_lock_acquire_recursive>
 8022efe:	89ab      	ldrh	r3, [r5, #12]
 8022f00:	071b      	lsls	r3, r3, #28
 8022f02:	d501      	bpl.n	8022f08 <_vfiprintf_r+0x34>
 8022f04:	692b      	ldr	r3, [r5, #16]
 8022f06:	b99b      	cbnz	r3, 8022f30 <_vfiprintf_r+0x5c>
 8022f08:	4629      	mov	r1, r5
 8022f0a:	4630      	mov	r0, r6
 8022f0c:	f7ff f960 	bl	80221d0 <__swsetup_r>
 8022f10:	b170      	cbz	r0, 8022f30 <_vfiprintf_r+0x5c>
 8022f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022f14:	07dc      	lsls	r4, r3, #31
 8022f16:	d504      	bpl.n	8022f22 <_vfiprintf_r+0x4e>
 8022f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022f1c:	b01d      	add	sp, #116	@ 0x74
 8022f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f22:	89ab      	ldrh	r3, [r5, #12]
 8022f24:	0598      	lsls	r0, r3, #22
 8022f26:	d4f7      	bmi.n	8022f18 <_vfiprintf_r+0x44>
 8022f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022f2a:	f7ff fae7 	bl	80224fc <__retarget_lock_release_recursive>
 8022f2e:	e7f3      	b.n	8022f18 <_vfiprintf_r+0x44>
 8022f30:	2300      	movs	r3, #0
 8022f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f34:	2320      	movs	r3, #32
 8022f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8022f3e:	2330      	movs	r3, #48	@ 0x30
 8022f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80230f0 <_vfiprintf_r+0x21c>
 8022f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022f48:	f04f 0901 	mov.w	r9, #1
 8022f4c:	4623      	mov	r3, r4
 8022f4e:	469a      	mov	sl, r3
 8022f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022f54:	b10a      	cbz	r2, 8022f5a <_vfiprintf_r+0x86>
 8022f56:	2a25      	cmp	r2, #37	@ 0x25
 8022f58:	d1f9      	bne.n	8022f4e <_vfiprintf_r+0x7a>
 8022f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8022f5e:	d00b      	beq.n	8022f78 <_vfiprintf_r+0xa4>
 8022f60:	465b      	mov	r3, fp
 8022f62:	4622      	mov	r2, r4
 8022f64:	4629      	mov	r1, r5
 8022f66:	4630      	mov	r0, r6
 8022f68:	f7ff ffa2 	bl	8022eb0 <__sfputs_r>
 8022f6c:	3001      	adds	r0, #1
 8022f6e:	f000 80a7 	beq.w	80230c0 <_vfiprintf_r+0x1ec>
 8022f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022f74:	445a      	add	r2, fp
 8022f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8022f78:	f89a 3000 	ldrb.w	r3, [sl]
 8022f7c:	2b00      	cmp	r3, #0
 8022f7e:	f000 809f 	beq.w	80230c0 <_vfiprintf_r+0x1ec>
 8022f82:	2300      	movs	r3, #0
 8022f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022f8c:	f10a 0a01 	add.w	sl, sl, #1
 8022f90:	9304      	str	r3, [sp, #16]
 8022f92:	9307      	str	r3, [sp, #28]
 8022f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8022f9a:	4654      	mov	r4, sl
 8022f9c:	2205      	movs	r2, #5
 8022f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022fa2:	4853      	ldr	r0, [pc, #332]	@ (80230f0 <_vfiprintf_r+0x21c>)
 8022fa4:	f7dd f9b4 	bl	8000310 <memchr>
 8022fa8:	9a04      	ldr	r2, [sp, #16]
 8022faa:	b9d8      	cbnz	r0, 8022fe4 <_vfiprintf_r+0x110>
 8022fac:	06d1      	lsls	r1, r2, #27
 8022fae:	bf44      	itt	mi
 8022fb0:	2320      	movmi	r3, #32
 8022fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022fb6:	0713      	lsls	r3, r2, #28
 8022fb8:	bf44      	itt	mi
 8022fba:	232b      	movmi	r3, #43	@ 0x2b
 8022fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8022fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8022fc6:	d015      	beq.n	8022ff4 <_vfiprintf_r+0x120>
 8022fc8:	9a07      	ldr	r2, [sp, #28]
 8022fca:	4654      	mov	r4, sl
 8022fcc:	2000      	movs	r0, #0
 8022fce:	f04f 0c0a 	mov.w	ip, #10
 8022fd2:	4621      	mov	r1, r4
 8022fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022fd8:	3b30      	subs	r3, #48	@ 0x30
 8022fda:	2b09      	cmp	r3, #9
 8022fdc:	d94b      	bls.n	8023076 <_vfiprintf_r+0x1a2>
 8022fde:	b1b0      	cbz	r0, 802300e <_vfiprintf_r+0x13a>
 8022fe0:	9207      	str	r2, [sp, #28]
 8022fe2:	e014      	b.n	802300e <_vfiprintf_r+0x13a>
 8022fe4:	eba0 0308 	sub.w	r3, r0, r8
 8022fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8022fec:	4313      	orrs	r3, r2
 8022fee:	9304      	str	r3, [sp, #16]
 8022ff0:	46a2      	mov	sl, r4
 8022ff2:	e7d2      	b.n	8022f9a <_vfiprintf_r+0xc6>
 8022ff4:	9b03      	ldr	r3, [sp, #12]
 8022ff6:	1d19      	adds	r1, r3, #4
 8022ff8:	681b      	ldr	r3, [r3, #0]
 8022ffa:	9103      	str	r1, [sp, #12]
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	bfbb      	ittet	lt
 8023000:	425b      	neglt	r3, r3
 8023002:	f042 0202 	orrlt.w	r2, r2, #2
 8023006:	9307      	strge	r3, [sp, #28]
 8023008:	9307      	strlt	r3, [sp, #28]
 802300a:	bfb8      	it	lt
 802300c:	9204      	strlt	r2, [sp, #16]
 802300e:	7823      	ldrb	r3, [r4, #0]
 8023010:	2b2e      	cmp	r3, #46	@ 0x2e
 8023012:	d10a      	bne.n	802302a <_vfiprintf_r+0x156>
 8023014:	7863      	ldrb	r3, [r4, #1]
 8023016:	2b2a      	cmp	r3, #42	@ 0x2a
 8023018:	d132      	bne.n	8023080 <_vfiprintf_r+0x1ac>
 802301a:	9b03      	ldr	r3, [sp, #12]
 802301c:	1d1a      	adds	r2, r3, #4
 802301e:	681b      	ldr	r3, [r3, #0]
 8023020:	9203      	str	r2, [sp, #12]
 8023022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023026:	3402      	adds	r4, #2
 8023028:	9305      	str	r3, [sp, #20]
 802302a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023100 <_vfiprintf_r+0x22c>
 802302e:	7821      	ldrb	r1, [r4, #0]
 8023030:	2203      	movs	r2, #3
 8023032:	4650      	mov	r0, sl
 8023034:	f7dd f96c 	bl	8000310 <memchr>
 8023038:	b138      	cbz	r0, 802304a <_vfiprintf_r+0x176>
 802303a:	9b04      	ldr	r3, [sp, #16]
 802303c:	eba0 000a 	sub.w	r0, r0, sl
 8023040:	2240      	movs	r2, #64	@ 0x40
 8023042:	4082      	lsls	r2, r0
 8023044:	4313      	orrs	r3, r2
 8023046:	3401      	adds	r4, #1
 8023048:	9304      	str	r3, [sp, #16]
 802304a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802304e:	4829      	ldr	r0, [pc, #164]	@ (80230f4 <_vfiprintf_r+0x220>)
 8023050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023054:	2206      	movs	r2, #6
 8023056:	f7dd f95b 	bl	8000310 <memchr>
 802305a:	2800      	cmp	r0, #0
 802305c:	d03f      	beq.n	80230de <_vfiprintf_r+0x20a>
 802305e:	4b26      	ldr	r3, [pc, #152]	@ (80230f8 <_vfiprintf_r+0x224>)
 8023060:	bb1b      	cbnz	r3, 80230aa <_vfiprintf_r+0x1d6>
 8023062:	9b03      	ldr	r3, [sp, #12]
 8023064:	3307      	adds	r3, #7
 8023066:	f023 0307 	bic.w	r3, r3, #7
 802306a:	3308      	adds	r3, #8
 802306c:	9303      	str	r3, [sp, #12]
 802306e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023070:	443b      	add	r3, r7
 8023072:	9309      	str	r3, [sp, #36]	@ 0x24
 8023074:	e76a      	b.n	8022f4c <_vfiprintf_r+0x78>
 8023076:	fb0c 3202 	mla	r2, ip, r2, r3
 802307a:	460c      	mov	r4, r1
 802307c:	2001      	movs	r0, #1
 802307e:	e7a8      	b.n	8022fd2 <_vfiprintf_r+0xfe>
 8023080:	2300      	movs	r3, #0
 8023082:	3401      	adds	r4, #1
 8023084:	9305      	str	r3, [sp, #20]
 8023086:	4619      	mov	r1, r3
 8023088:	f04f 0c0a 	mov.w	ip, #10
 802308c:	4620      	mov	r0, r4
 802308e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023092:	3a30      	subs	r2, #48	@ 0x30
 8023094:	2a09      	cmp	r2, #9
 8023096:	d903      	bls.n	80230a0 <_vfiprintf_r+0x1cc>
 8023098:	2b00      	cmp	r3, #0
 802309a:	d0c6      	beq.n	802302a <_vfiprintf_r+0x156>
 802309c:	9105      	str	r1, [sp, #20]
 802309e:	e7c4      	b.n	802302a <_vfiprintf_r+0x156>
 80230a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80230a4:	4604      	mov	r4, r0
 80230a6:	2301      	movs	r3, #1
 80230a8:	e7f0      	b.n	802308c <_vfiprintf_r+0x1b8>
 80230aa:	ab03      	add	r3, sp, #12
 80230ac:	9300      	str	r3, [sp, #0]
 80230ae:	462a      	mov	r2, r5
 80230b0:	4b12      	ldr	r3, [pc, #72]	@ (80230fc <_vfiprintf_r+0x228>)
 80230b2:	a904      	add	r1, sp, #16
 80230b4:	4630      	mov	r0, r6
 80230b6:	f3af 8000 	nop.w
 80230ba:	4607      	mov	r7, r0
 80230bc:	1c78      	adds	r0, r7, #1
 80230be:	d1d6      	bne.n	802306e <_vfiprintf_r+0x19a>
 80230c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80230c2:	07d9      	lsls	r1, r3, #31
 80230c4:	d405      	bmi.n	80230d2 <_vfiprintf_r+0x1fe>
 80230c6:	89ab      	ldrh	r3, [r5, #12]
 80230c8:	059a      	lsls	r2, r3, #22
 80230ca:	d402      	bmi.n	80230d2 <_vfiprintf_r+0x1fe>
 80230cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80230ce:	f7ff fa15 	bl	80224fc <__retarget_lock_release_recursive>
 80230d2:	89ab      	ldrh	r3, [r5, #12]
 80230d4:	065b      	lsls	r3, r3, #25
 80230d6:	f53f af1f 	bmi.w	8022f18 <_vfiprintf_r+0x44>
 80230da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80230dc:	e71e      	b.n	8022f1c <_vfiprintf_r+0x48>
 80230de:	ab03      	add	r3, sp, #12
 80230e0:	9300      	str	r3, [sp, #0]
 80230e2:	462a      	mov	r2, r5
 80230e4:	4b05      	ldr	r3, [pc, #20]	@ (80230fc <_vfiprintf_r+0x228>)
 80230e6:	a904      	add	r1, sp, #16
 80230e8:	4630      	mov	r0, r6
 80230ea:	f7ff fc61 	bl	80229b0 <_printf_i>
 80230ee:	e7e4      	b.n	80230ba <_vfiprintf_r+0x1e6>
 80230f0:	08025cd6 	.word	0x08025cd6
 80230f4:	08025ce0 	.word	0x08025ce0
 80230f8:	00000000 	.word	0x00000000
 80230fc:	08022eb1 	.word	0x08022eb1
 8023100:	08025cdc 	.word	0x08025cdc

08023104 <_raise_r>:
 8023104:	291f      	cmp	r1, #31
 8023106:	b538      	push	{r3, r4, r5, lr}
 8023108:	4605      	mov	r5, r0
 802310a:	460c      	mov	r4, r1
 802310c:	d904      	bls.n	8023118 <_raise_r+0x14>
 802310e:	2316      	movs	r3, #22
 8023110:	6003      	str	r3, [r0, #0]
 8023112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023116:	bd38      	pop	{r3, r4, r5, pc}
 8023118:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802311a:	b112      	cbz	r2, 8023122 <_raise_r+0x1e>
 802311c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023120:	b94b      	cbnz	r3, 8023136 <_raise_r+0x32>
 8023122:	4628      	mov	r0, r5
 8023124:	f000 f830 	bl	8023188 <_getpid_r>
 8023128:	4622      	mov	r2, r4
 802312a:	4601      	mov	r1, r0
 802312c:	4628      	mov	r0, r5
 802312e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023132:	f000 b817 	b.w	8023164 <_kill_r>
 8023136:	2b01      	cmp	r3, #1
 8023138:	d00a      	beq.n	8023150 <_raise_r+0x4c>
 802313a:	1c59      	adds	r1, r3, #1
 802313c:	d103      	bne.n	8023146 <_raise_r+0x42>
 802313e:	2316      	movs	r3, #22
 8023140:	6003      	str	r3, [r0, #0]
 8023142:	2001      	movs	r0, #1
 8023144:	e7e7      	b.n	8023116 <_raise_r+0x12>
 8023146:	2100      	movs	r1, #0
 8023148:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802314c:	4620      	mov	r0, r4
 802314e:	4798      	blx	r3
 8023150:	2000      	movs	r0, #0
 8023152:	e7e0      	b.n	8023116 <_raise_r+0x12>

08023154 <raise>:
 8023154:	4b02      	ldr	r3, [pc, #8]	@ (8023160 <raise+0xc>)
 8023156:	4601      	mov	r1, r0
 8023158:	6818      	ldr	r0, [r3, #0]
 802315a:	f7ff bfd3 	b.w	8023104 <_raise_r>
 802315e:	bf00      	nop
 8023160:	240012bc 	.word	0x240012bc

08023164 <_kill_r>:
 8023164:	b538      	push	{r3, r4, r5, lr}
 8023166:	4d07      	ldr	r5, [pc, #28]	@ (8023184 <_kill_r+0x20>)
 8023168:	2300      	movs	r3, #0
 802316a:	4604      	mov	r4, r0
 802316c:	4608      	mov	r0, r1
 802316e:	4611      	mov	r1, r2
 8023170:	602b      	str	r3, [r5, #0]
 8023172:	f7df fa1d 	bl	80025b0 <_kill>
 8023176:	1c43      	adds	r3, r0, #1
 8023178:	d102      	bne.n	8023180 <_kill_r+0x1c>
 802317a:	682b      	ldr	r3, [r5, #0]
 802317c:	b103      	cbz	r3, 8023180 <_kill_r+0x1c>
 802317e:	6023      	str	r3, [r4, #0]
 8023180:	bd38      	pop	{r3, r4, r5, pc}
 8023182:	bf00      	nop
 8023184:	240696e8 	.word	0x240696e8

08023188 <_getpid_r>:
 8023188:	f7df ba0a 	b.w	80025a0 <_getpid>

0802318c <_init>:
 802318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802318e:	bf00      	nop
 8023190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023192:	bc08      	pop	{r3}
 8023194:	469e      	mov	lr, r3
 8023196:	4770      	bx	lr

08023198 <_fini>:
 8023198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802319a:	bf00      	nop
 802319c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802319e:	bc08      	pop	{r3}
 80231a0:	469e      	mov	lr, r3
 80231a2:	4770      	bx	lr
