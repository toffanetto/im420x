
nucleo-H753ZI_TemplateAutoware_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c54  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a5c  08013ef4  08013ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015950  08015950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000040  08015958  08015958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015998  08015998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000013ec  24000000  0801599c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00032140  240013ec  08016d88  000183ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2403352c  08016d88  0001852c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000183ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aaaa  00000000  00000000  0001841a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000515f  00000000  00000000  00042ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e58  00000000  00000000  00048028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001772  00000000  00000000  00049e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003efc5  00000000  00000000  0004b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e44d  00000000  00000000  0008a5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018ed45  00000000  00000000  000b8a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000076  00000000  00000000  00247749  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000087ac  00000000  00000000  002477c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000080  00000000  00000000  0024ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013ec 	.word	0x240013ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013edc 	.word	0x08013edc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013f0 	.word	0x240013f0
 80002dc:	08013edc 	.word	0x08013edc

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000314:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000318:	f000 b96a 	b.w	80005f0 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	460c      	mov	r4, r1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d14e      	bne.n	80003de <__udivmoddi4+0xaa>
 8000340:	4694      	mov	ip, r2
 8000342:	458c      	cmp	ip, r1
 8000344:	4686      	mov	lr, r0
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	d962      	bls.n	8000412 <__udivmoddi4+0xde>
 800034c:	b14a      	cbz	r2, 8000362 <__udivmoddi4+0x2e>
 800034e:	f1c2 0320 	rsb	r3, r2, #32
 8000352:	4091      	lsls	r1, r2
 8000354:	fa20 f303 	lsr.w	r3, r0, r3
 8000358:	fa0c fc02 	lsl.w	ip, ip, r2
 800035c:	4319      	orrs	r1, r3
 800035e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f f68c 	uxth.w	r6, ip
 800036a:	fbb1 f4f7 	udiv	r4, r1, r7
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb07 1114 	mls	r1, r7, r4, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb04 f106 	mul.w	r1, r4, r6
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800038a:	f080 8112 	bcs.w	80005b2 <__udivmoddi4+0x27e>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 810f 	bls.w	80005b2 <__udivmoddi4+0x27e>
 8000394:	3c02      	subs	r4, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a59      	subs	r1, r3, r1
 800039a:	fa1f f38e 	uxth.w	r3, lr
 800039e:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a2:	fb07 1110 	mls	r1, r7, r0, r1
 80003a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003aa:	fb00 f606 	mul.w	r6, r0, r6
 80003ae:	429e      	cmp	r6, r3
 80003b0:	d90a      	bls.n	80003c8 <__udivmoddi4+0x94>
 80003b2:	eb1c 0303 	adds.w	r3, ip, r3
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003ba:	f080 80fc 	bcs.w	80005b6 <__udivmoddi4+0x282>
 80003be:	429e      	cmp	r6, r3
 80003c0:	f240 80f9 	bls.w	80005b6 <__udivmoddi4+0x282>
 80003c4:	4463      	add	r3, ip
 80003c6:	3802      	subs	r0, #2
 80003c8:	1b9b      	subs	r3, r3, r6
 80003ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ce:	2100      	movs	r1, #0
 80003d0:	b11d      	cbz	r5, 80003da <__udivmoddi4+0xa6>
 80003d2:	40d3      	lsrs	r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	e9c5 3200 	strd	r3, r2, [r5]
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d905      	bls.n	80003ee <__udivmoddi4+0xba>
 80003e2:	b10d      	cbz	r5, 80003e8 <__udivmoddi4+0xb4>
 80003e4:	e9c5 0100 	strd	r0, r1, [r5]
 80003e8:	2100      	movs	r1, #0
 80003ea:	4608      	mov	r0, r1
 80003ec:	e7f5      	b.n	80003da <__udivmoddi4+0xa6>
 80003ee:	fab3 f183 	clz	r1, r3
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d146      	bne.n	8000484 <__udivmoddi4+0x150>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xcc>
 80003fa:	4290      	cmp	r0, r2
 80003fc:	f0c0 80f0 	bcc.w	80005e0 <__udivmoddi4+0x2ac>
 8000400:	1a86      	subs	r6, r0, r2
 8000402:	eb64 0303 	sbc.w	r3, r4, r3
 8000406:	2001      	movs	r0, #1
 8000408:	2d00      	cmp	r5, #0
 800040a:	d0e6      	beq.n	80003da <__udivmoddi4+0xa6>
 800040c:	e9c5 6300 	strd	r6, r3, [r5]
 8000410:	e7e3      	b.n	80003da <__udivmoddi4+0xa6>
 8000412:	2a00      	cmp	r2, #0
 8000414:	f040 8090 	bne.w	8000538 <__udivmoddi4+0x204>
 8000418:	eba1 040c 	sub.w	r4, r1, ip
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	2101      	movs	r1, #1
 8000426:	fbb4 f6f8 	udiv	r6, r4, r8
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb08 4416 	mls	r4, r8, r6, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb07 f006 	mul.w	r0, r7, r6
 800043a:	4298      	cmp	r0, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x11c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x11a>
 8000448:	4298      	cmp	r0, r3
 800044a:	f200 80cd 	bhi.w	80005e8 <__udivmoddi4+0x2b4>
 800044e:	4626      	mov	r6, r4
 8000450:	1a1c      	subs	r4, r3, r0
 8000452:	fa1f f38e 	uxth.w	r3, lr
 8000456:	fbb4 f0f8 	udiv	r0, r4, r8
 800045a:	fb08 4410 	mls	r4, r8, r0, r4
 800045e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000462:	fb00 f707 	mul.w	r7, r0, r7
 8000466:	429f      	cmp	r7, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x148>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x146>
 8000474:	429f      	cmp	r7, r3
 8000476:	f200 80b0 	bhi.w	80005da <__udivmoddi4+0x2a6>
 800047a:	4620      	mov	r0, r4
 800047c:	1bdb      	subs	r3, r3, r7
 800047e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000482:	e7a5      	b.n	80003d0 <__udivmoddi4+0x9c>
 8000484:	f1c1 0620 	rsb	r6, r1, #32
 8000488:	408b      	lsls	r3, r1
 800048a:	fa22 f706 	lsr.w	r7, r2, r6
 800048e:	431f      	orrs	r7, r3
 8000490:	fa20 fc06 	lsr.w	ip, r0, r6
 8000494:	fa04 f301 	lsl.w	r3, r4, r1
 8000498:	ea43 030c 	orr.w	r3, r3, ip
 800049c:	40f4      	lsrs	r4, r6
 800049e:	fa00 f801 	lsl.w	r8, r0, r1
 80004a2:	0c38      	lsrs	r0, r7, #16
 80004a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004a8:	fbb4 fef0 	udiv	lr, r4, r0
 80004ac:	fa1f fc87 	uxth.w	ip, r7
 80004b0:	fb00 441e 	mls	r4, r0, lr, r4
 80004b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b8:	fb0e f90c 	mul.w	r9, lr, ip
 80004bc:	45a1      	cmp	r9, r4
 80004be:	fa02 f201 	lsl.w	r2, r2, r1
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x1a6>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004ca:	f080 8084 	bcs.w	80005d6 <__udivmoddi4+0x2a2>
 80004ce:	45a1      	cmp	r9, r4
 80004d0:	f240 8081 	bls.w	80005d6 <__udivmoddi4+0x2a2>
 80004d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d8:	443c      	add	r4, r7
 80004da:	eba4 0409 	sub.w	r4, r4, r9
 80004de:	fa1f f983 	uxth.w	r9, r3
 80004e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004e6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1d2>
 80004f6:	193c      	adds	r4, r7, r4
 80004f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004fc:	d267      	bcs.n	80005ce <__udivmoddi4+0x29a>
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d965      	bls.n	80005ce <__udivmoddi4+0x29a>
 8000502:	3b02      	subs	r3, #2
 8000504:	443c      	add	r4, r7
 8000506:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800050a:	fba0 9302 	umull	r9, r3, r0, r2
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	429c      	cmp	r4, r3
 8000514:	46ce      	mov	lr, r9
 8000516:	469c      	mov	ip, r3
 8000518:	d351      	bcc.n	80005be <__udivmoddi4+0x28a>
 800051a:	d04e      	beq.n	80005ba <__udivmoddi4+0x286>
 800051c:	b155      	cbz	r5, 8000534 <__udivmoddi4+0x200>
 800051e:	ebb8 030e 	subs.w	r3, r8, lr
 8000522:	eb64 040c 	sbc.w	r4, r4, ip
 8000526:	fa04 f606 	lsl.w	r6, r4, r6
 800052a:	40cb      	lsrs	r3, r1
 800052c:	431e      	orrs	r6, r3
 800052e:	40cc      	lsrs	r4, r1
 8000530:	e9c5 6400 	strd	r6, r4, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	e750      	b.n	80003da <__udivmoddi4+0xa6>
 8000538:	f1c2 0320 	rsb	r3, r2, #32
 800053c:	fa20 f103 	lsr.w	r1, r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa24 f303 	lsr.w	r3, r4, r3
 8000548:	4094      	lsls	r4, r2
 800054a:	430c      	orrs	r4, r1
 800054c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000550:	fa00 fe02 	lsl.w	lr, r0, r2
 8000554:	fa1f f78c 	uxth.w	r7, ip
 8000558:	fbb3 f0f8 	udiv	r0, r3, r8
 800055c:	fb08 3110 	mls	r1, r8, r0, r3
 8000560:	0c23      	lsrs	r3, r4, #16
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	fb00 f107 	mul.w	r1, r0, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x24c>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000576:	d22c      	bcs.n	80005d2 <__udivmoddi4+0x29e>
 8000578:	4299      	cmp	r1, r3
 800057a:	d92a      	bls.n	80005d2 <__udivmoddi4+0x29e>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1a5b      	subs	r3, r3, r1
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb3 f1f8 	udiv	r1, r3, r8
 8000588:	fb08 3311 	mls	r3, r8, r1, r3
 800058c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000590:	fb01 f307 	mul.w	r3, r1, r7
 8000594:	42a3      	cmp	r3, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x276>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a0:	d213      	bcs.n	80005ca <__udivmoddi4+0x296>
 80005a2:	42a3      	cmp	r3, r4
 80005a4:	d911      	bls.n	80005ca <__udivmoddi4+0x296>
 80005a6:	3902      	subs	r1, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	1ae4      	subs	r4, r4, r3
 80005ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b0:	e739      	b.n	8000426 <__udivmoddi4+0xf2>
 80005b2:	4604      	mov	r4, r0
 80005b4:	e6f0      	b.n	8000398 <__udivmoddi4+0x64>
 80005b6:	4608      	mov	r0, r1
 80005b8:	e706      	b.n	80003c8 <__udivmoddi4+0x94>
 80005ba:	45c8      	cmp	r8, r9
 80005bc:	d2ae      	bcs.n	800051c <__udivmoddi4+0x1e8>
 80005be:	ebb9 0e02 	subs.w	lr, r9, r2
 80005c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7a8      	b.n	800051c <__udivmoddi4+0x1e8>
 80005ca:	4631      	mov	r1, r6
 80005cc:	e7ed      	b.n	80005aa <__udivmoddi4+0x276>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e799      	b.n	8000506 <__udivmoddi4+0x1d2>
 80005d2:	4630      	mov	r0, r6
 80005d4:	e7d4      	b.n	8000580 <__udivmoddi4+0x24c>
 80005d6:	46d6      	mov	lr, sl
 80005d8:	e77f      	b.n	80004da <__udivmoddi4+0x1a6>
 80005da:	4463      	add	r3, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e74d      	b.n	800047c <__udivmoddi4+0x148>
 80005e0:	4606      	mov	r6, r0
 80005e2:	4623      	mov	r3, r4
 80005e4:	4608      	mov	r0, r1
 80005e6:	e70f      	b.n	8000408 <__udivmoddi4+0xd4>
 80005e8:	3e02      	subs	r6, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	e730      	b.n	8000450 <__udivmoddi4+0x11c>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <MX_ADC1_Init+0x108>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000620:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800062e:	2201      	movs	r2, #1
 8000630:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000640:	2201      	movs	r2, #1
 8000642:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000646:	2202      	movs	r2, #2
 8000648:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800065c:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800065e:	2203      	movs	r2, #3
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <MX_ADC1_Init+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000676:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000678:	f001 feb4 	bl	80023e4 <HAL_ADC_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 fd23 	bl	80010cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x104>)
 8000692:	f002 fed7 	bl	8003444 <HAL_ADCEx_MultiModeConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800069c:	f000 fd16 	bl	80010cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x10c>)
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a4:	2306      	movs	r3, #6
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80006a8:	2306      	movs	r3, #6
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006c4:	f002 f912 	bl	80028ec <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 fcfd 	bl	80010cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_ADC1_Init+0x110>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d6:	230c      	movs	r3, #12
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x104>)
 80006e0:	f002 f904 	bl	80028ec <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006ea:	f000 fcef 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	@ 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24001408 	.word	0x24001408
 80006fc:	40022000 	.word	0x40022000
 8000700:	19200040 	.word	0x19200040
 8000704:	08600004 	.word	0x08600004

08000708 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ba      	sub	sp, #232	@ 0xe8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	22c0      	movs	r2, #192	@ 0xc0
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f013 f965 	bl	80139f8 <memset>
  if(adcHandle->Instance==ADC1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a45      	ldr	r2, [pc, #276]	@ (8000848 <HAL_ADC_MspInit+0x140>)
 8000734:	4293      	cmp	r3, r2
 8000736:	f040 8083 	bne.w	8000840 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800073e:	f04f 0300 	mov.w	r3, #0
 8000742:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 37;
 800074a:	2325      	movs	r3, #37	@ 0x25
 800074c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075e:	2320      	movs	r3, #32
 8000760:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f007 f8c0 	bl	80078f8 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800077e:	f000 fca5 	bl	80010cc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000788:	4a30      	ldr	r2, [pc, #192]	@ (800084c <HAL_ADC_MspInit+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <HAL_ADC_MspInit+0x144>)
 8000794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000798:	f003 0320 	and.w	r3, r3, #32
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a0:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007a8:	f043 0320 	orr.w	r3, r3, #32
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <HAL_ADC_MspInit+0x144>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80007d6:	4619      	mov	r1, r3
 80007d8:	481d      	ldr	r0, [pc, #116]	@ (8000850 <HAL_ADC_MspInit+0x148>)
 80007da:	f005 fe2d 	bl	8006438 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000858 <HAL_ADC_MspInit+0x150>)
 80007e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 80007f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000800:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000804:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000814:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000818:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800081c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000826:	f002 ffcb 	bl	80037c0 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0x12c>
    {
      Error_Handler();
 8000830:	f000 fc4c 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 8000838:	64da      	str	r2, [r3, #76]	@ 0x4c
 800083a:	4a06      	ldr	r2, [pc, #24]	@ (8000854 <HAL_ADC_MspInit+0x14c>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	37e8      	adds	r7, #232	@ 0xe8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40022000 	.word	0x40022000
 800084c:	58024400 	.word	0x58024400
 8000850:	58021400 	.word	0x58021400
 8000854:	2400146c 	.word	0x2400146c
 8000858:	40020410 	.word	0x40020410

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000868:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <MX_DMA_Init+0x8c>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_DMA_Init+0x8c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200b      	movs	r0, #11
 80008a4:	f002 ff64 	bl	8003770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008a8:	200b      	movs	r0, #11
 80008aa:	f002 ff7b 	bl	80037a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	200c      	movs	r0, #12
 80008b4:	f002 ff5c 	bl	8003770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008b8:	200c      	movs	r0, #12
 80008ba:	f002 ff73 	bl	80037a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2039      	movs	r0, #57	@ 0x39
 80008c4:	f002 ff54 	bl	8003770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008c8:	2039      	movs	r0, #57	@ 0x39
 80008ca:	f002 ff6b 	bl	80037a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203a      	movs	r0, #58	@ 0x3a
 80008d4:	f002 ff4c 	bl	8003770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008d8:	203a      	movs	r0, #58	@ 0x3a
 80008da:	f002 ff63 	bl	80037a4 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58024400 	.word	0x58024400

080008ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexControlSignal */
  MutexControlSignalHandle = osMutexNew(&MutexControlSignal_attributes);
 80008f0:	480a      	ldr	r0, [pc, #40]	@ (800091c <MX_FREERTOS_Init+0x30>)
 80008f2:	f00c fa15 	bl	800cd20 <osMutexNew>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <MX_FREERTOS_Init+0x34>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* creation of MutexControlAction */
  MutexControlActionHandle = osMutexNew(&MutexControlAction_attributes);
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_FREERTOS_Init+0x38>)
 80008fe:	f00c fa0f 	bl	800cd20 <osMutexNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <MX_FREERTOS_Init+0x3c>)
 8000906:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskControle */
  TaskControleHandle = osThreadNew(StartTaskControle, NULL, &TaskControle_attributes);
 8000908:	4a08      	ldr	r2, [pc, #32]	@ (800092c <MX_FREERTOS_Init+0x40>)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_FREERTOS_Init+0x44>)
 800090e:	f00c f88a 	bl	800ca26 <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <MX_FREERTOS_Init+0x48>)
 8000916:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	08013f78 	.word	0x08013f78
 8000920:	240014ec 	.word	0x240014ec
 8000924:	08013f88 	.word	0x08013f88
 8000928:	240014f0 	.word	0x240014f0
 800092c:	08013f54 	.word	0x08013f54
 8000930:	0800154d 	.word	0x0800154d
 8000934:	240014e4 	.word	0x240014e4

08000938 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	@ 0x38
 800093c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b9e      	ldr	r3, [pc, #632]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a9c      	ldr	r2, [pc, #624]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b9a      	ldr	r3, [pc, #616]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096c:	4b96      	ldr	r3, [pc, #600]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a95      	ldr	r2, [pc, #596]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b92      	ldr	r3, [pc, #584]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b8f      	ldr	r3, [pc, #572]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a8d      	ldr	r2, [pc, #564]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b87      	ldr	r3, [pc, #540]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	4a86      	ldr	r2, [pc, #536]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b8:	4b83      	ldr	r3, [pc, #524]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b80      	ldr	r3, [pc, #512]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	4a7e      	ldr	r2, [pc, #504]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d6:	4b7c      	ldr	r3, [pc, #496]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b78      	ldr	r3, [pc, #480]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	4a77      	ldr	r2, [pc, #476]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f4:	4b74      	ldr	r3, [pc, #464]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a02:	4b71      	ldr	r3, [pc, #452]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	4a6f      	ldr	r2, [pc, #444]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a12:	4b6d      	ldr	r3, [pc, #436]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a20:	4b69      	ldr	r3, [pc, #420]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a68      	ldr	r2, [pc, #416]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b65      	ldr	r3, [pc, #404]	@ (8000bc8 <MX_GPIO_Init+0x290>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a44:	4861      	ldr	r0, [pc, #388]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000a46:	f005 fea7 	bl	8006798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a50:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000a52:	f005 fea1 	bl	8006798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000a5c:	f005 fe9c 	bl	8006798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4858      	ldr	r0, [pc, #352]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a76:	f005 fcdf 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a7a:	2332      	movs	r3, #50	@ 0x32
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4850      	ldr	r0, [pc, #320]	@ (8000bd8 <MX_GPIO_Init+0x2a0>)
 8000a96:	f005 fccf 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a9a:	2386      	movs	r3, #134	@ 0x86
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aaa:	230b      	movs	r3, #11
 8000aac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4849      	ldr	r0, [pc, #292]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000ab6:	f005 fcbf 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aba:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483e      	ldr	r0, [pc, #248]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000ad4:	f005 fcb0 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JoySW_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(JoySW_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	483c      	ldr	r0, [pc, #240]	@ (8000be0 <MX_GPIO_Init+0x2a8>)
 8000af0:	f005 fca2 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b06:	230b      	movs	r3, #11
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	@ (8000bcc <MX_GPIO_Init+0x294>)
 8000b12:	f005 fc91 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4828      	ldr	r0, [pc, #160]	@ (8000bd0 <MX_GPIO_Init+0x298>)
 8000b30:	f005 fc82 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4826      	ldr	r0, [pc, #152]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b4a:	f005 fc75 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b4e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b60:	230a      	movs	r3, #10
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x2a4>)
 8000b6c:	f005 fc64 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <MX_GPIO_Init+0x2ac>)
 8000b8e:	f005 fc53 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b92:	2302      	movs	r3, #2
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480a      	ldr	r0, [pc, #40]	@ (8000bd4 <MX_GPIO_Init+0x29c>)
 8000baa:	f005 fc45 	bl	8006438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	2028      	movs	r0, #40	@ 0x28
 8000bb4:	f002 fddc 	bl	8003770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb8:	2028      	movs	r0, #40	@ 0x28
 8000bba:	f002 fdf3 	bl	80037a4 <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	@ 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020400 	.word	0x58020400
 8000bd0:	58020c00 	.word	0x58020c00
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	58020800 	.word	0x58020800
 8000bdc:	58020000 	.word	0x58020000
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58021800 	.word	0x58021800

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f001 f9aa 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf0:	f000 f81c 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf4:	f7ff fea0 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf8:	f7ff fe30 	bl	800085c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000bfc:	f000 feb8 	bl	8001970 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c00:	f7ff fcf8 	bl	80005f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 fe68 	bl	80018d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starting ADC1 reading by DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t * ) uiADC1Buffer, 2);
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4906      	ldr	r1, [pc, #24]	@ (8000c24 <main+0x3c>)
 8000c0c:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <main+0x40>)
 8000c0e:	f001 fd8b 	bl	8002728 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c12:	f00b fea9 	bl	800c968 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c16:	f7ff fe69 	bl	80008ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c1a:	f00b fec9 	bl	800c9b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1e:	bf00      	nop
 8000c20:	e7fd      	b.n	8000c1e <main+0x36>
 8000c22:	bf00      	nop
 8000c24:	240014f8 	.word	0x240014f8
 8000c28:	24001408 	.word	0x24001408

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09e      	sub	sp, #120	@ 0x78
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	224c      	movs	r2, #76	@ 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f012 fedc 	bl	80139f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f012 fed5 	bl	80139f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f005 fdf0 	bl	8006834 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b49      	ldr	r3, [pc, #292]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5c:	4a48      	ldr	r2, [pc, #288]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c64:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <SystemClock_Config+0x154>)
 8000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b45      	ldr	r3, [pc, #276]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a44      	ldr	r2, [pc, #272]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b42      	ldr	r3, [pc, #264]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c86:	bf00      	nop
 8000c88:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <SystemClock_Config+0x158>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d1f8      	bne.n	8000c88 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b3c      	ldr	r3, [pc, #240]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <SystemClock_Config+0x15c>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <SystemClock_Config+0x154>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce6:	bf00      	nop
 8000ce8:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <SystemClock_Config+0x158>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf4:	d1f8      	bne.n	8000ce8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000cfa:	2380      	movs	r3, #128	@ 0x80
 8000cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000d06:	2301      	movs	r3, #1
 8000d08:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000d0e:	23f0      	movs	r3, #240	@ 0xf0
 8000d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d16:	2304      	movs	r3, #4
 8000d18:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fdba 	bl	80068a8 <HAL_RCC_OscConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000d3a:	f000 f9c7 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3e:	233f      	movs	r3, #63	@ 0x3f
 8000d40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	2303      	movs	r3, #3
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d52:	2340      	movs	r3, #64	@ 0x40
 8000d54:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5c:	2340      	movs	r3, #64	@ 0x40
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2104      	movs	r1, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 f9f8 	bl	800715c <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d72:	f000 f9ab 	bl	80010cc <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3778      	adds	r7, #120	@ 0x78
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024800 	.word	0x58024800
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_GPIO_EXTI_Callback>:
  * @brief  ISR callback for the JoySW, switching the control mode.
  * @param  GPIO_Pin: EXTI pin.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  if(JoySW_Pin == GPIO_Pin){ // ! JoySW is bouncing, calling ISR in push and pull button
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d9c:	d11e      	bne.n	8000ddc <HAL_GPIO_EXTI_Callback+0x50>

	unsigned int uiTick = osKernelGetTickCount();
 8000d9e:	f00b fe2d 	bl	800c9fc <osKernelGetTickCount>
 8000da2:	60f8      	str	r0, [r7, #12]

	if(uiTick > (uiJoySWTickOnPress + DEBOUNCE_TICKS)) // DEBOUNCE_TICKS debounce
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d914      	bls.n	8000ddc <HAL_GPIO_EXTI_Callback+0x50>
	{
	  ucButtonState ^= 1;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f083 0301 	eor.w	r3, r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000dbe:	701a      	strb	r2, [r3, #0]
	  uiJoySWTickOnPress = uiTick;
 8000dc0:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6013      	str	r3, [r2, #0]
	  osThreadFlagsSet(TaskControleHandle, 0x1000);
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_GPIO_EXTI_Callback+0x60>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00b febc 	bl	800cb4c <osThreadFlagsSet>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dd8:	f005 fcf7 	bl	80067ca <HAL_GPIO_TogglePin>
	}
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24001500 	.word	0x24001500
 8000de8:	240014f4 	.word	0x240014f4
 8000dec:	240014e4 	.word	0x240014e4
 8000df0:	58020400 	.word	0x58020400

08000df4 <HAL_UART_RxCpltCallback>:
  * @brief  ISR callback for reading msg from UART with UART2_DMA_BUFFER_SIZE bytes.
  * @param  huart: Handle for serial UART
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(&huart2 == huart)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4aa6      	ldr	r2, [pc, #664]	@ (8001098 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	f040 8145 	bne.w	8001090 <HAL_UART_RxCpltCallback+0x29c>
  {

    // State machine state
    unsigned int ucSmState = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]

    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	72fb      	strb	r3, [r7, #11]
 8000e0e:	e136      	b.n	800107e <HAL_UART_RxCpltCallback+0x28a>
    {
      switch (ucSmState)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b28      	cmp	r3, #40	@ 0x28
 8000e14:	f200 812c 	bhi.w	8001070 <HAL_UART_RxCpltCallback+0x27c>
 8000e18:	a201      	add	r2, pc, #4	@ (adr r2, 8000e20 <HAL_UART_RxCpltCallback+0x2c>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000ec5 	.word	0x08000ec5
 8000e24:	08000ed7 	.word	0x08000ed7
 8000e28:	08001071 	.word	0x08001071
 8000e2c:	08001071 	.word	0x08001071
 8000e30:	08001071 	.word	0x08001071
 8000e34:	08001071 	.word	0x08001071
 8000e38:	08001071 	.word	0x08001071
 8000e3c:	08001071 	.word	0x08001071
 8000e40:	08001071 	.word	0x08001071
 8000e44:	08001071 	.word	0x08001071
 8000e48:	08000fa1 	.word	0x08000fa1
 8000e4c:	08000fb1 	.word	0x08000fb1
 8000e50:	08000fc1 	.word	0x08000fc1
 8000e54:	08000fd1 	.word	0x08000fd1
 8000e58:	08001071 	.word	0x08001071
 8000e5c:	08001071 	.word	0x08001071
 8000e60:	08001071 	.word	0x08001071
 8000e64:	08001071 	.word	0x08001071
 8000e68:	08001071 	.word	0x08001071
 8000e6c:	08001071 	.word	0x08001071
 8000e70:	08000fe1 	.word	0x08000fe1
 8000e74:	08000ff1 	.word	0x08000ff1
 8000e78:	08001001 	.word	0x08001001
 8000e7c:	08001011 	.word	0x08001011
 8000e80:	08001071 	.word	0x08001071
 8000e84:	08001071 	.word	0x08001071
 8000e88:	08001071 	.word	0x08001071
 8000e8c:	08001071 	.word	0x08001071
 8000e90:	08001071 	.word	0x08001071
 8000e94:	08001071 	.word	0x08001071
 8000e98:	08001021 	.word	0x08001021
 8000e9c:	08001031 	.word	0x08001031
 8000ea0:	08001041 	.word	0x08001041
 8000ea4:	08001051 	.word	0x08001051
 8000ea8:	08001071 	.word	0x08001071
 8000eac:	08001071 	.word	0x08001071
 8000eb0:	08001071 	.word	0x08001071
 8000eb4:	08001071 	.word	0x08001071
 8000eb8:	08001071 	.word	0x08001071
 8000ebc:	08001071 	.word	0x08001071
 8000ec0:	08001061 	.word	0x08001061
      {
        case 0:
        if('#' == ucDmaBuffer[i])
 8000ec4:	7afb      	ldrb	r3, [r7, #11]
 8000ec6:	4a75      	ldr	r2, [pc, #468]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	2b23      	cmp	r3, #35	@ 0x23
 8000ecc:	f040 80d3 	bne.w	8001076 <HAL_UART_RxCpltCallback+0x282>
        {
          ucSmState = 1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000ed4:	e0cf      	b.n	8001076 <HAL_UART_RxCpltCallback+0x282>

        case 1:
        switch (ucDmaBuffer[i])
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
 8000ed8:	4a70      	ldr	r2, [pc, #448]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	3b24      	subs	r3, #36	@ 0x24
 8000ede:	2b20      	cmp	r3, #32
 8000ee0:	d85a      	bhi.n	8000f98 <HAL_UART_RxCpltCallback+0x1a4>
 8000ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee8 <HAL_UART_RxCpltCallback+0xf4>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000f85 	.word	0x08000f85
 8000eec:	08000f99 	.word	0x08000f99
 8000ef0:	08000f99 	.word	0x08000f99
 8000ef4:	08000f99 	.word	0x08000f99
 8000ef8:	08000f99 	.word	0x08000f99
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f99 	.word	0x08000f99
 8000f04:	08000f99 	.word	0x08000f99
 8000f08:	08000f99 	.word	0x08000f99
 8000f0c:	08000f99 	.word	0x08000f99
 8000f10:	08000f99 	.word	0x08000f99
 8000f14:	08000f99 	.word	0x08000f99
 8000f18:	08000f99 	.word	0x08000f99
 8000f1c:	08000f99 	.word	0x08000f99
 8000f20:	08000f99 	.word	0x08000f99
 8000f24:	08000f99 	.word	0x08000f99
 8000f28:	08000f99 	.word	0x08000f99
 8000f2c:	08000f99 	.word	0x08000f99
 8000f30:	08000f99 	.word	0x08000f99
 8000f34:	08000f99 	.word	0x08000f99
 8000f38:	08000f99 	.word	0x08000f99
 8000f3c:	08000f99 	.word	0x08000f99
 8000f40:	08000f99 	.word	0x08000f99
 8000f44:	08000f99 	.word	0x08000f99
 8000f48:	08000f99 	.word	0x08000f99
 8000f4c:	08000f99 	.word	0x08000f99
 8000f50:	08000f99 	.word	0x08000f99
 8000f54:	08000f99 	.word	0x08000f99
 8000f58:	08000f99 	.word	0x08000f99
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f73 	.word	0x08000f73
 8000f64:	08000f79 	.word	0x08000f79
 8000f68:	08000f7f 	.word	0x08000f7f
        {
          case 'A':
          ucSmState = 10;
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	60fb      	str	r3, [r7, #12]
          break;
 8000f70:	e015      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1aa>

          case 'B':
          ucSmState = 20;
 8000f72:	2314      	movs	r3, #20
 8000f74:	60fb      	str	r3, [r7, #12]
          break;
 8000f76:	e012      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1aa>

          case 'C':
          ucSmState = 30;
 8000f78:	231e      	movs	r3, #30
 8000f7a:	60fb      	str	r3, [r7, #12]
          break;
 8000f7c:	e00f      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1aa>

          case 'D':
          ucSmState = 40;
 8000f7e:	2328      	movs	r3, #40	@ 0x28
 8000f80:	60fb      	str	r3, [r7, #12]
          break;
 8000f82:	e00c      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1aa>

          case '$':
          ucSmState = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]

          // Message fully received, setting TaskControle ThreadFlag for sync.
          osThreadFlagsSet(TaskControleHandle, 0x10000);
 8000f88:	4b45      	ldr	r3, [pc, #276]	@ (80010a0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b fddb 	bl	800cb4c <osThreadFlagsSet>
          break;
 8000f96:	e002      	b.n	8000f9e <HAL_UART_RxCpltCallback+0x1aa>

          default:
            ucSmState = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
            break;
 8000f9c:	bf00      	nop
        }
        break;
 8000f9e:	e06b      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 10:
        xVehicleStatus.xLongSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8000fa4:	5cd2      	ldrb	r2, [r2, r3]
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fa8:	701a      	strb	r2, [r3, #0]
        ucSmState = 11;
 8000faa:	230b      	movs	r3, #11
 8000fac:	60fb      	str	r3, [r7, #12]
        break;
 8000fae:	e063      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 11:
        xVehicleStatus.xLongSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8000fb4:	5cd2      	ldrb	r2, [r2, r3]
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fb8:	705a      	strb	r2, [r3, #1]
        ucSmState = 12;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	60fb      	str	r3, [r7, #12]
        break;
 8000fbe:	e05b      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 12:
        xVehicleStatus.xLongSpeed.ucBytes[2] = ucDmaBuffer[i];
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	4a36      	ldr	r2, [pc, #216]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8000fc4:	5cd2      	ldrb	r2, [r2, r3]
 8000fc6:	4b37      	ldr	r3, [pc, #220]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fc8:	709a      	strb	r2, [r3, #2]
        ucSmState = 13;
 8000fca:	230d      	movs	r3, #13
 8000fcc:	60fb      	str	r3, [r7, #12]
        break;
 8000fce:	e053      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 13:
        xVehicleStatus.xLongSpeed.ucBytes[3] = ucDmaBuffer[i];
 8000fd0:	7afb      	ldrb	r3, [r7, #11]
 8000fd2:	4a32      	ldr	r2, [pc, #200]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8000fd4:	5cd2      	ldrb	r2, [r2, r3]
 8000fd6:	4b33      	ldr	r3, [pc, #204]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fd8:	70da      	strb	r2, [r3, #3]
        ucSmState = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
        break;
 8000fde:	e04b      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 20:
        xVehicleStatus.xLatSpeed.ucBytes[0] = ucDmaBuffer[i];
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8000fe4:	5cd2      	ldrb	r2, [r2, r3]
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000fe8:	711a      	strb	r2, [r3, #4]
        ucSmState = 21;
 8000fea:	2315      	movs	r3, #21
 8000fec:	60fb      	str	r3, [r7, #12]
        break;
 8000fee:	e043      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 21:
        xVehicleStatus.xLatSpeed.ucBytes[1] = ucDmaBuffer[i];
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8000ff4:	5cd2      	ldrb	r2, [r2, r3]
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ff8:	715a      	strb	r2, [r3, #5]
        ucSmState = 22;
 8000ffa:	2316      	movs	r3, #22
 8000ffc:	60fb      	str	r3, [r7, #12]
        break;
 8000ffe:	e03b      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 22:
        xVehicleStatus.xLatSpeed.ucBytes[2] = ucDmaBuffer[i];
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	4a26      	ldr	r2, [pc, #152]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8001004:	5cd2      	ldrb	r2, [r2, r3]
 8001006:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001008:	719a      	strb	r2, [r3, #6]
        ucSmState = 23;
 800100a:	2317      	movs	r3, #23
 800100c:	60fb      	str	r3, [r7, #12]
        break;
 800100e:	e033      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 23:
        xVehicleStatus.xLatSpeed.ucBytes[3] = ucDmaBuffer[i];
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	4a22      	ldr	r2, [pc, #136]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8001014:	5cd2      	ldrb	r2, [r2, r3]
 8001016:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001018:	71da      	strb	r2, [r3, #7]
        ucSmState = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
        break;
 800101e:	e02b      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 30:
        xVehicleStatus.xHeadingRate.ucBytes[0] = ucDmaBuffer[i];
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	4a1e      	ldr	r2, [pc, #120]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8001024:	5cd2      	ldrb	r2, [r2, r3]
 8001026:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001028:	721a      	strb	r2, [r3, #8]
        ucSmState = 31;
 800102a:	231f      	movs	r3, #31
 800102c:	60fb      	str	r3, [r7, #12]
        break;
 800102e:	e023      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 31:
        xVehicleStatus.xHeadingRate.ucBytes[1] = ucDmaBuffer[i];
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	4a1a      	ldr	r2, [pc, #104]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8001034:	5cd2      	ldrb	r2, [r2, r3]
 8001036:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001038:	725a      	strb	r2, [r3, #9]
        ucSmState = 32;
 800103a:	2320      	movs	r3, #32
 800103c:	60fb      	str	r3, [r7, #12]
        break;
 800103e:	e01b      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 32:
        xVehicleStatus.xHeadingRate.ucBytes[2] = ucDmaBuffer[i];
 8001040:	7afb      	ldrb	r3, [r7, #11]
 8001042:	4a16      	ldr	r2, [pc, #88]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8001044:	5cd2      	ldrb	r2, [r2, r3]
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001048:	729a      	strb	r2, [r3, #10]
        ucSmState = 33;
 800104a:	2321      	movs	r3, #33	@ 0x21
 800104c:	60fb      	str	r3, [r7, #12]
        break;
 800104e:	e013      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 33:
        xVehicleStatus.xHeadingRate.ucBytes[3] = ucDmaBuffer[i];
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8001054:	5cd2      	ldrb	r2, [r2, r3]
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001058:	72da      	strb	r2, [r3, #11]
        ucSmState = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
        break;
 800105e:	e00b      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        case 40:
        xVehicleStatus.ucGear = ucDmaBuffer[i];
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	4a0e      	ldr	r2, [pc, #56]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 8001064:	5cd2      	ldrb	r2, [r2, r3]
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001068:	731a      	strb	r2, [r3, #12]
        ucSmState = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
        break;
 800106e:	e003      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>

        default:
		      ucSmState = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
          break;
 8001074:	e000      	b.n	8001078 <HAL_UART_RxCpltCallback+0x284>
        break;
 8001076:	bf00      	nop
    for(unsigned char i = 0; i<UART2_DMA_BUFFER_SIZE; i++)
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	3301      	adds	r3, #1
 800107c:	72fb      	strb	r3, [r7, #11]
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	2b12      	cmp	r3, #18
 8001082:	f67f aec5 	bls.w	8000e10 <HAL_UART_RxCpltCallback+0x1c>
      }
    }
    // Starting other UART reading
    HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 8001086:	2213      	movs	r2, #19
 8001088:	4904      	ldr	r1, [pc, #16]	@ (800109c <HAL_UART_RxCpltCallback+0x2a8>)
 800108a:	4803      	ldr	r0, [pc, #12]	@ (8001098 <HAL_UART_RxCpltCallback+0x2a4>)
 800108c:	f009 fcd0 	bl	800aa30 <HAL_UART_Receive_DMA>

  }
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	240015ac 	.word	0x240015ac
 800109c:	24001548 	.word	0x24001548
 80010a0:	240014e4 	.word	0x240014e4
 80010a4:	24001538 	.word	0x24001538

080010a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ba:	f000 ff7f 	bl	8001fbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40001000 	.word	0x40001000

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <Error_Handler+0x8>

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <HAL_MspInit+0x38>)
 80010e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_MspInit+0x38>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <HAL_MspInit+0x38>)
 80010f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	210f      	movs	r1, #15
 8001100:	f06f 0001 	mvn.w	r0, #1
 8001104:	f002 fb34 	bl	8003770 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	58024400 	.word	0x58024400

08001114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	@ 0x40
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	d827      	bhi.n	8001172 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001122:	2200      	movs	r2, #0
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	2036      	movs	r0, #54	@ 0x36
 8001128:	f002 fb22 	bl	8003770 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800112c:	2036      	movs	r0, #54	@ 0x36
 800112e:	f002 fb39 	bl	80037a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001132:	4a29      	ldr	r2, [pc, #164]	@ (80011d8 <HAL_InitTick+0xc4>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001138:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <HAL_InitTick+0xc8>)
 800113a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800113e:	4a27      	ldr	r2, [pc, #156]	@ (80011dc <HAL_InitTick+0xc8>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001148:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <HAL_InitTick+0xc8>)
 800114a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001156:	f107 0210 	add.w	r2, r7, #16
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f006 fb87 	bl	8007874 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001168:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800116a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <HAL_InitTick+0x6a>
 8001170:	e001      	b.n	8001176 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e02b      	b.n	80011ce <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001176:	f006 fb51 	bl	800781c <HAL_RCC_GetPCLK1Freq>
 800117a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800117c:	e004      	b.n	8001188 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800117e:	f006 fb4d 	bl	800781c <HAL_RCC_GetPCLK1Freq>
 8001182:	4603      	mov	r3, r0
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800118a:	4a15      	ldr	r2, [pc, #84]	@ (80011e0 <HAL_InitTick+0xcc>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	0c9b      	lsrs	r3, r3, #18
 8001192:	3b01      	subs	r3, #1
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_InitTick+0xd0>)
 8001198:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <HAL_InitTick+0xd4>)
 800119a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <HAL_InitTick+0xd0>)
 800119e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011a4:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <HAL_InitTick+0xd0>)
 80011a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_InitTick+0xd0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <HAL_InitTick+0xd0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011b6:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <HAL_InitTick+0xd0>)
 80011b8:	f009 f89c 	bl	800a2f4 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011c2:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <HAL_InitTick+0xd0>)
 80011c4:	f009 f8f8 	bl	800a3b8 <HAL_TIM_Base_Start_IT>
 80011c8:	4603      	mov	r3, r0
 80011ca:	e000      	b.n	80011ce <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3740      	adds	r7, #64	@ 0x40
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	24000008 	.word	0x24000008
 80011dc:	58024400 	.word	0x58024400
 80011e0:	431bde83 	.word	0x431bde83
 80011e4:	2400155c 	.word	0x2400155c
 80011e8:	40001000 	.word	0x40001000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <DMA1_Stream0_IRQHandler+0x10>)
 800122a:	f003 fdf3 	bl	8004e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	240017c4 	.word	0x240017c4

08001238 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <DMA1_Stream1_IRQHandler+0x10>)
 800123e:	f003 fde9 	bl	8004e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2400183c 	.word	0x2400183c

0800124c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <USART2_IRQHandler+0x10>)
 8001252:	f009 fc39 	bl	800aac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	240015ac 	.word	0x240015ac

08001260 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <USART3_IRQHandler+0x10>)
 8001266:	f009 fc2f 	bl	800aac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	24001640 	.word	0x24001640

08001274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JoySW_Pin);
 8001278:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800127c:	f005 fabf 	bl	80067fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <TIM6_DAC_IRQHandler+0x10>)
 800128a:	f009 f90d 	bl	800a4a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2400155c 	.word	0x2400155c

08001298 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <DMA2_Stream1_IRQHandler+0x10>)
 800129e:	f003 fdb9 	bl	8004e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	240016d4 	.word	0x240016d4

080012ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <DMA2_Stream2_IRQHandler+0x10>)
 80012b2:	f003 fdaf 	bl	8004e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2400174c 	.word	0x2400174c

080012c0 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ca:	f012 fc49 	bl	8013b60 <__errno>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2216      	movs	r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
  return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_exit>:

void _exit (int status)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffe7 	bl	80012c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012f2:	bf00      	nop
 80012f4:	e7fd      	b.n	80012f2 <_exit+0x12>

080012f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e00a      	b.n	800131e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001308:	f3af 8000 	nop.w
 800130c:	4601      	mov	r1, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbf0      	blt.n	8001308 <_read+0x12>
  }

  return len;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e009      	b.n	8001356 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbf1      	blt.n	8001342 <_write+0x12>
  }
  return len;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_close>:

int _close(int file)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001390:	605a      	str	r2, [r3, #4]
  return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_isatty>:

int _isatty(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	@ (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f012 fbae 	bl	8013b60 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	24080000 	.word	0x24080000
 8001430:	00000400 	.word	0x00000400
 8001434:	240015a8 	.word	0x240015a8
 8001438:	24033530 	.word	0x24033530

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <SystemInit+0xe4>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001446:	4a36      	ldr	r2, [pc, #216]	@ (8001520 <SystemInit+0xe4>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001450:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <SystemInit+0xe8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	2b06      	cmp	r3, #6
 800145a:	d807      	bhi.n	800146c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800145c:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <SystemInit+0xe8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 030f 	bic.w	r3, r3, #15
 8001464:	4a2f      	ldr	r2, [pc, #188]	@ (8001524 <SystemInit+0xe8>)
 8001466:	f043 0307 	orr.w	r3, r3, #7
 800146a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800146c:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <SystemInit+0xec>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a2d      	ldr	r2, [pc, #180]	@ (8001528 <SystemInit+0xec>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001478:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <SystemInit+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800147e:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <SystemInit+0xec>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4929      	ldr	r1, [pc, #164]	@ (8001528 <SystemInit+0xec>)
 8001484:	4b29      	ldr	r3, [pc, #164]	@ (800152c <SystemInit+0xf0>)
 8001486:	4013      	ands	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <SystemInit+0xe8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <SystemInit+0xe8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 030f 	bic.w	r3, r3, #15
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <SystemInit+0xe8>)
 80014a0:	f043 0307 	orr.w	r3, r3, #7
 80014a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <SystemInit+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <SystemInit+0xec>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <SystemInit+0xec>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <SystemInit+0xec>)
 80014ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <SystemInit+0xf4>)
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <SystemInit+0xec>)
 80014c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <SystemInit+0xf8>)
 80014c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <SystemInit+0xec>)
 80014c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001538 <SystemInit+0xfc>)
 80014c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <SystemInit+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014d0:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <SystemInit+0xec>)
 80014d2:	4a19      	ldr	r2, [pc, #100]	@ (8001538 <SystemInit+0xfc>)
 80014d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <SystemInit+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <SystemInit+0xec>)
 80014de:	4a16      	ldr	r2, [pc, #88]	@ (8001538 <SystemInit+0xfc>)
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <SystemInit+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <SystemInit+0xec>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <SystemInit+0xec>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <SystemInit+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <SystemInit+0x100>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <SystemInit+0x104>)
 8001500:	4013      	ands	r3, r2
 8001502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001506:	d202      	bcs.n	800150e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <SystemInit+0x108>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <SystemInit+0x10c>)
 8001510:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001514:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	52002000 	.word	0x52002000
 8001528:	58024400 	.word	0x58024400
 800152c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001530:	02020200 	.word	0x02020200
 8001534:	01ff0000 	.word	0x01ff0000
 8001538:	01010280 	.word	0x01010280
 800153c:	5c001000 	.word	0x5c001000
 8001540:	ffff0000 	.word	0xffff0000
 8001544:	51008108 	.word	0x51008108
 8001548:	52004000 	.word	0x52004000

0800154c <StartTaskControle>:
  * @brief  TaskControle task function.
  * @param  argument: not used.
  * @retval None
  */
void StartTaskControle(void *argument)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b096      	sub	sp, #88	@ 0x58
 8001550:	af02      	add	r7, sp, #8
 8001552:	6078      	str	r0, [r7, #4]
  // Local variables -- START
  unsigned char ucControlMode;
  unsigned char ucFlagFullMsg;

  // Joystick calibration
  unsigned int uiX0   = 33970;
 8001554:	f248 43b2 	movw	r3, #33970	@ 0x84b2
 8001558:	647b      	str	r3, [r7, #68]	@ 0x44
  unsigned int uiXMin = 1057;
 800155a:	f240 4321 	movw	r3, #1057	@ 0x421
 800155e:	643b      	str	r3, [r7, #64]	@ 0x40
  unsigned int uiXMax = 65535;
 8001560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  unsigned int uiY0   = 33580;
 8001566:	f248 332c 	movw	r3, #33580	@ 0x832c
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int uiYMin = 1062;
 800156c:	f240 4326 	movw	r3, #1062	@ 0x426
 8001570:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int uiYMax = 65535;
 8001572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001576:	633b      	str	r3, [r7, #48]	@ 0x30

  // Return flags
  unsigned int uiFlags = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	64bb      	str	r3, [r7, #72]	@ 0x48
  unsigned char ucTxMsgToCarla[MSG_TO_CARLA_SIZE];

  // Local variables -- END

  // Initialization of DMA RX in circular mode
  HAL_UART_Receive_DMA(&huart2, ucDmaBuffer, UART2_DMA_BUFFER_SIZE);
 800157c:	2213      	movs	r2, #19
 800157e:	4984      	ldr	r1, [pc, #528]	@ (8001790 <StartTaskControle+0x244>)
 8001580:	4884      	ldr	r0, [pc, #528]	@ (8001794 <StartTaskControle+0x248>)
 8001582:	f009 fa55 	bl	800aa30 <HAL_UART_Receive_DMA>

  // Initialization of operation mode
  ucControlMode = MANUAL; // ! MANUAL for testing joy + UART
 8001586:	2302      	movs	r3, #2
 8001588:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  // Task loop
  for(;;)
  {
		extern osThreadId_t TaskControleHandle;
		  osThreadFlagsSet(TaskControleHandle, 0x1000);
 800158c:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <StartTaskControle+0x24c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001594:	4618      	mov	r0, r3
 8001596:	f00b fad9 	bl	800cb4c <osThreadFlagsSet>
	// Looking fot operation mode change by Autoware -- START
	uiFlags = osThreadFlagsWait(0x11, osFlagsWaitAny, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2011      	movs	r0, #17
 80015a0:	f00b fb22 	bl	800cbe8 <osThreadFlagsWait>
 80015a4:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(0x01 == uiFlags)
 80015a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d104      	bne.n	80015b6 <StartTaskControle+0x6a>
	{
	  ucControlMode = AUTOWARE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  uiFlags = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	}

	if(0x10 == uiFlags)
 80015b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015b8:	2b10      	cmp	r3, #16
 80015ba:	d104      	bne.n	80015c6 <StartTaskControle+0x7a>
	{
	  ucControlMode = MANUAL;
 80015bc:	2302      	movs	r3, #2
 80015be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  uiFlags = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	64bb      	str	r3, [r7, #72]	@ 0x48
	}
	// Looking for operation mode change by Autoware -- END

	// Looking for operation mode change by JoySW -- START
	uiFlags = osThreadFlagsWait(0x1000, osFlagsWaitAny, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80015ce:	f00b fb0b 	bl	800cbe8 <osThreadFlagsWait>
 80015d2:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(0x1000 == uiFlags)
 80015d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015da:	d11c      	bne.n	8001616 <StartTaskControle+0xca>
	{
	  if(AUTOWARE == ucControlMode)
 80015dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d109      	bne.n	80015f8 <StartTaskControle+0xac>
	  {
		ucControlMode = MANUAL;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		osThreadFlagsSet(TaskMicroAutowaHandle, 0x10);
 80015ea:	4b6c      	ldr	r3, [pc, #432]	@ (800179c <StartTaskControle+0x250>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2110      	movs	r1, #16
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00b faab 	bl	800cb4c <osThreadFlagsSet>
 80015f6:	e00c      	b.n	8001612 <StartTaskControle+0xc6>
	  }
	  else if(MANUAL == ucControlMode)
 80015f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d108      	bne.n	8001612 <StartTaskControle+0xc6>
	  {
		ucControlMode = AUTOWARE;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		osThreadFlagsSet(TaskMicroAutowaHandle, 0x01);
 8001606:	4b65      	ldr	r3, [pc, #404]	@ (800179c <StartTaskControle+0x250>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2101      	movs	r1, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f00b fa9d 	bl	800cb4c <osThreadFlagsSet>
	  }
	  uiFlags = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	64bb      	str	r3, [r7, #72]	@ 0x48
	}
	// Looking for operation mode change by JoySW -- END

	// Autonomous mode (AUTOWARE) routine -- START
	if(AUTOWARE == ucControlMode)
 8001616:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800161a:	2b01      	cmp	r3, #1
 800161c:	d175      	bne.n	800170a <StartTaskControle+0x1be>
	{
    // Setting driving mode lights
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 800161e:	2201      	movs	r2, #1
 8001620:	2102      	movs	r1, #2
 8001622:	485f      	ldr	r0, [pc, #380]	@ (80017a0 <StartTaskControle+0x254>)
 8001624:	f005 f8b8 	bl	8006798 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD1_GPIO_Port,LD3_Pin, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800162e:	485d      	ldr	r0, [pc, #372]	@ (80017a4 <StartTaskControle+0x258>)
 8001630:	f005 f8b2 	bl	8006798 <HAL_GPIO_WritePin>

	  // WAIT for flag to sync xControlAction update
	  uiFlags = osThreadFlagsWait(0x100, osFlagsWaitAny, TIMEOUT_GET_CONTROL_ACTION);
 8001634:	221e      	movs	r2, #30
 8001636:	2100      	movs	r1, #0
 8001638:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800163c:	f00b fad4 	bl	800cbe8 <osThreadFlagsWait>
 8001640:	64b8      	str	r0, [r7, #72]	@ 0x48
	  if(osFlagsErrorTimeout == uiFlags)
	  {
	  // Deu ruim timeout
	  }

	  if(0x100 == uiFlags)
 8001642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001648:	d15f      	bne.n	800170a <StartTaskControle+0x1be>
	  {
        osMutexAcquire(MutexControlActionHandle, osWaitForever);
 800164a:	4b57      	ldr	r3, [pc, #348]	@ (80017a8 <StartTaskControle+0x25c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001652:	4618      	mov	r0, r3
 8001654:	f00b fbea 	bl	800ce2c <osMutexAcquire>
        vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 8001658:	4b54      	ldr	r3, [pc, #336]	@ (80017ac <StartTaskControle+0x260>)
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	9201      	str	r2, [sp, #4]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	9200      	str	r2, [sp, #0]
 8001664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001666:	f000 fbc3 	bl	8001df0 <vGetStringFromControlAction>
        osMutexRelease(MutexControlActionHandle);
 800166a:	4b4f      	ldr	r3, [pc, #316]	@ (80017a8 <StartTaskControle+0x25c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f00b fc27 	bl	800cec2 <osMutexRelease>

        // Send cTxMsgToCarla to CARLA
        HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, strlen((char * ) ucTxMsgToCarla));
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fe3b 	bl	80002f4 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	4842      	ldr	r0, [pc, #264]	@ (8001794 <StartTaskControle+0x248>)
 800168a:	f009 f951 	bl	800a930 <HAL_UART_Transmit_DMA>

  	  // Recieve data from CARLA

      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 800168e:	4b48      	ldr	r3, [pc, #288]	@ (80017b0 <StartTaskControle+0x264>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001696:	4618      	mov	r0, r3
 8001698:	f00b fbc8 	bl	800ce2c <osMutexAcquire>
      xControlSignal.fThrottle = xControlAction.fTrottle;
 800169c:	4b43      	ldr	r3, [pc, #268]	@ (80017ac <StartTaskControle+0x260>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a44      	ldr	r2, [pc, #272]	@ (80017b4 <StartTaskControle+0x268>)
 80016a2:	6013      	str	r3, [r2, #0]
      xControlSignal.fBrake = xControlAction.fBrake;
 80016a4:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <StartTaskControle+0x260>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a42      	ldr	r2, [pc, #264]	@ (80017b4 <StartTaskControle+0x268>)
 80016aa:	6053      	str	r3, [r2, #4]
      xControlSignal.fSteeringAngle = xControlAction.fSteeringAngle;
 80016ac:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <StartTaskControle+0x260>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a40      	ldr	r2, [pc, #256]	@ (80017b4 <StartTaskControle+0x268>)
 80016b2:	6093      	str	r3, [r2, #8]
      xControlSignal.ucManualGearShift = xControlAction.ucManualGearShift;
 80016b4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <StartTaskControle+0x260>)
 80016b6:	7b9a      	ldrb	r2, [r3, #14]
 80016b8:	4b3e      	ldr	r3, [pc, #248]	@ (80017b4 <StartTaskControle+0x268>)
 80016ba:	739a      	strb	r2, [r3, #14]
      xControlSignal.ucHandBrake = xControlAction.ucHandBrake;
 80016bc:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <StartTaskControle+0x260>)
 80016be:	7b1a      	ldrb	r2, [r3, #12]
 80016c0:	4b3c      	ldr	r3, [pc, #240]	@ (80017b4 <StartTaskControle+0x268>)
 80016c2:	731a      	strb	r2, [r3, #12]
      xControlSignal.ucReverse = xControlAction.ucReverse;
 80016c4:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <StartTaskControle+0x260>)
 80016c6:	7b5a      	ldrb	r2, [r3, #13]
 80016c8:	4b3a      	ldr	r3, [pc, #232]	@ (80017b4 <StartTaskControle+0x268>)
 80016ca:	735a      	strb	r2, [r3, #13]
      xControlSignal.ucControlMode = AUTOWARE;
 80016cc:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <StartTaskControle+0x268>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	741a      	strb	r2, [r3, #16]
      xControlSignal.ucGear = xVehicleStatus.ucGear;
 80016d2:	4b39      	ldr	r3, [pc, #228]	@ (80017b8 <StartTaskControle+0x26c>)
 80016d4:	7b1a      	ldrb	r2, [r3, #12]
 80016d6:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <StartTaskControle+0x268>)
 80016d8:	73da      	strb	r2, [r3, #15]
      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 80016da:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <StartTaskControle+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a35      	ldr	r2, [pc, #212]	@ (80017b4 <StartTaskControle+0x268>)
 80016e0:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 80016e2:	4b35      	ldr	r3, [pc, #212]	@ (80017b8 <StartTaskControle+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a33      	ldr	r2, [pc, #204]	@ (80017b4 <StartTaskControle+0x268>)
 80016e8:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 80016ea:	4b33      	ldr	r3, [pc, #204]	@ (80017b8 <StartTaskControle+0x26c>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4a31      	ldr	r2, [pc, #196]	@ (80017b4 <StartTaskControle+0x268>)
 80016f0:	61d3      	str	r3, [r2, #28]
      osMutexRelease(MutexControlSignalHandle);
 80016f2:	4b2f      	ldr	r3, [pc, #188]	@ (80017b0 <StartTaskControle+0x264>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00b fbe3 	bl	800cec2 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <StartTaskControle+0x250>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001704:	4618      	mov	r0, r3
 8001706:	f00b fa21 	bl	800cb4c <osThreadFlagsSet>
	}
	// Autonomous mode (AUTOWARE) routine -- END


	// Manual mode (MANUAL) routine -- START
    if(MANUAL == ucControlMode)
 800170a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800170e:	2b02      	cmp	r3, #2
 8001710:	f47f af3c 	bne.w	800158c <StartTaskControle+0x40>
    {
      // Setting driving mode lights
      HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2102      	movs	r1, #2
 8001718:	4821      	ldr	r0, [pc, #132]	@ (80017a0 <StartTaskControle+0x254>)
 800171a:	f005 f83d 	bl	8006798 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LD1_GPIO_Port,LD3_Pin, 1);
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001724:	481f      	ldr	r0, [pc, #124]	@ (80017a4 <StartTaskControle+0x258>)
 8001726:	f005 f837 	bl	8006798 <HAL_GPIO_WritePin>

      // Joystick read block -- START
      fJoyXAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[0], uiX0, uiXMax, uiXMin);
 800172a:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <StartTaskControle+0x270>)
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001730:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001732:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001734:	f000 fb28 	bl	8001d88 <fGetJoyPostition>
 8001738:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
      fJoyYAxis = fGetJoyPostition((unsigned int) uiADC1Buffer[1], uiY0, uiYMax, uiYMin);
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <StartTaskControle+0x270>)
 800173e:	6858      	ldr	r0, [r3, #4]
 8001740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001744:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001746:	f000 fb1f 	bl	8001d88 <fGetJoyPostition>
 800174a:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

      osMutexAcquire(MutexControlActionHandle, osWaitForever);
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <StartTaskControle+0x25c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001756:	4618      	mov	r0, r3
 8001758:	f00b fb68 	bl	800ce2c <osMutexAcquire>
      xControlAction.fTrottle = (fJoyYAxis > 0) ? fJoyYAxis*MAX_TROTTLE : 0.0;
 800175c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	dd01      	ble.n	800176e <StartTaskControle+0x222>
 800176a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176c:	e001      	b.n	8001772 <StartTaskControle+0x226>
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <StartTaskControle+0x260>)
 8001774:	6013      	str	r3, [r2, #0]
      xControlAction.fBrake = (fJoyYAxis < 0) ? -fJoyYAxis*MAX_BRAKE : 0.0;
 8001776:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800177a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d51f      	bpl.n	80017c4 <StartTaskControle+0x278>
 8001784:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001788:	eef1 7a67 	vneg.f32	s15, s15
 800178c:	e01c      	b.n	80017c8 <StartTaskControle+0x27c>
 800178e:	bf00      	nop
 8001790:	24001548 	.word	0x24001548
 8001794:	240015ac 	.word	0x240015ac
 8001798:	240014e4 	.word	0x240014e4
 800179c:	240014e8 	.word	0x240014e8
 80017a0:	58021000 	.word	0x58021000
 80017a4:	58020400 	.word	0x58020400
 80017a8:	240014f0 	.word	0x240014f0
 80017ac:	24001504 	.word	0x24001504
 80017b0:	240014ec 	.word	0x240014ec
 80017b4:	24001518 	.word	0x24001518
 80017b8:	24001538 	.word	0x24001538
 80017bc:	240014f8 	.word	0x240014f8
 80017c0:	00000000 	.word	0x00000000
 80017c4:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80017c0 <StartTaskControle+0x274>
 80017c8:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <StartTaskControle+0x370>)
 80017ca:	edc3 7a01 	vstr	s15, [r3, #4]
      xControlAction.fSteeringAngle = fJoyXAxis*MAX_STEERING_ANGLE;
 80017ce:	4a3b      	ldr	r2, [pc, #236]	@ (80018bc <StartTaskControle+0x370>)
 80017d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d2:	6093      	str	r3, [r2, #8]
      xControlAction.ucManualGearShift = 1;
 80017d4:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <StartTaskControle+0x370>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	739a      	strb	r2, [r3, #14]
      xControlAction.ucHandBrake = 2;
 80017da:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <StartTaskControle+0x370>)
 80017dc:	2202      	movs	r2, #2
 80017de:	731a      	strb	r2, [r3, #12]
      xControlAction.ucReverse = 3;
 80017e0:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <StartTaskControle+0x370>)
 80017e2:	2203      	movs	r2, #3
 80017e4:	735a      	strb	r2, [r3, #13]
      xControlAction.ucControlMode = MANUAL;
 80017e6:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <StartTaskControle+0x370>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	741a      	strb	r2, [r3, #16]
      xControlAction.ucGear = 4;
 80017ec:	4b33      	ldr	r3, [pc, #204]	@ (80018bc <StartTaskControle+0x370>)
 80017ee:	2204      	movs	r2, #4
 80017f0:	73da      	strb	r2, [r3, #15]

      vGetStringFromControlAction(xControlAction, ucTxMsgToCarla);
 80017f2:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <StartTaskControle+0x370>)
 80017f4:	f107 020c 	add.w	r2, r7, #12
 80017f8:	9201      	str	r2, [sp, #4]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	9200      	str	r2, [sp, #0]
 80017fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001800:	f000 faf6 	bl	8001df0 <vGetStringFromControlAction>

	  osMutexRelease(MutexControlActionHandle);
 8001804:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <StartTaskControle+0x374>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f00b fb5a 	bl	800cec2 <osMutexRelease>

	  // Send cTxMsgToCarla to CARLA
	  if(huart2.gState == HAL_UART_STATE_READY)
 800180e:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <StartTaskControle+0x378>)
 8001810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001814:	2b20      	cmp	r3, #32
 8001816:	d106      	bne.n	8001826 <StartTaskControle+0x2da>
	  {
		HAL_UART_Transmit_DMA(&huart2, ucTxMsgToCarla, MSG_TO_CARLA_SIZE);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	221a      	movs	r2, #26
 800181e:	4619      	mov	r1, r3
 8001820:	4828      	ldr	r0, [pc, #160]	@ (80018c4 <StartTaskControle+0x378>)
 8001822:	f009 f885 	bl	800a930 <HAL_UART_Transmit_DMA>
	  }

	  // Wait CARLA full msg xVehicleStatusRx
	  uiFlags = osThreadFlagsWait(0x10000, osFlagsWaitAll, TIMEOUT_GET_CARLA_RX);
 8001826:	2214      	movs	r2, #20
 8001828:	2101      	movs	r1, #1
 800182a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800182e:	f00b f9db 	bl	800cbe8 <osThreadFlagsWait>
 8001832:	64b8      	str	r0, [r7, #72]	@ 0x48
	  // Timeout error
	  if(osFlagsErrorTimeout == uiFlags)
	  {
	  // Deu ruim timeout
	  }
	  uiFlags = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	64bb      	str	r3, [r7, #72]	@ 0x48

      // Empacota xControlSignal

      osMutexAcquire(MutexControlSignalHandle, osWaitForever);
 8001838:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <StartTaskControle+0x37c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001840:	4618      	mov	r0, r3
 8001842:	f00b faf3 	bl	800ce2c <osMutexAcquire>
      xControlSignal.fThrottle = xControlAction.fTrottle;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <StartTaskControle+0x370>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a20      	ldr	r2, [pc, #128]	@ (80018cc <StartTaskControle+0x380>)
 800184c:	6013      	str	r3, [r2, #0]
      xControlSignal.fBrake = xControlAction.fBrake;
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <StartTaskControle+0x370>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a1e      	ldr	r2, [pc, #120]	@ (80018cc <StartTaskControle+0x380>)
 8001854:	6053      	str	r3, [r2, #4]
      xControlSignal.fSteeringAngle = xControlAction.fSteeringAngle;
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <StartTaskControle+0x370>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4a1c      	ldr	r2, [pc, #112]	@ (80018cc <StartTaskControle+0x380>)
 800185c:	6093      	str	r3, [r2, #8]
      xControlSignal.ucManualGearShift = xControlAction.ucManualGearShift;
 800185e:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <StartTaskControle+0x370>)
 8001860:	7b9a      	ldrb	r2, [r3, #14]
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <StartTaskControle+0x380>)
 8001864:	739a      	strb	r2, [r3, #14]
      xControlSignal.ucHandBrake = xControlAction.ucHandBrake;
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <StartTaskControle+0x370>)
 8001868:	7b1a      	ldrb	r2, [r3, #12]
 800186a:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <StartTaskControle+0x380>)
 800186c:	731a      	strb	r2, [r3, #12]
      xControlSignal.ucReverse = xControlAction.ucReverse;
 800186e:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <StartTaskControle+0x370>)
 8001870:	7b5a      	ldrb	r2, [r3, #13]
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <StartTaskControle+0x380>)
 8001874:	735a      	strb	r2, [r3, #13]
      xControlSignal.ucControlMode = MANUAL;
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <StartTaskControle+0x380>)
 8001878:	2202      	movs	r2, #2
 800187a:	741a      	strb	r2, [r3, #16]
      xControlSignal.ucGear = xVehicleStatus.ucGear;
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <StartTaskControle+0x384>)
 800187e:	7b1a      	ldrb	r2, [r3, #12]
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <StartTaskControle+0x380>)
 8001882:	73da      	strb	r2, [r3, #15]
      xControlSignal.fLongSpeed = xVehicleStatus.xLongSpeed.fFloat;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <StartTaskControle+0x384>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <StartTaskControle+0x380>)
 800188a:	6153      	str	r3, [r2, #20]
      xControlSignal.fLatSpeed = xVehicleStatus.xLatSpeed.fFloat;
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <StartTaskControle+0x384>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <StartTaskControle+0x380>)
 8001892:	6193      	str	r3, [r2, #24]
      xControlSignal.fHeadingRate = xVehicleStatus.xHeadingRate.fFloat;
 8001894:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <StartTaskControle+0x384>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a0c      	ldr	r2, [pc, #48]	@ (80018cc <StartTaskControle+0x380>)
 800189a:	61d3      	str	r3, [r2, #28]
      osMutexRelease(MutexControlSignalHandle);
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <StartTaskControle+0x37c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00b fb0e 	bl	800cec2 <osMutexRelease>

      osThreadFlagsSet(TaskMicroAutowaHandle, 0x100);
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <StartTaskControle+0x388>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00b f94c 	bl	800cb4c <osThreadFlagsSet>

      // WAIT
      osDelay(200);
 80018b4:	20c8      	movs	r0, #200	@ 0xc8
 80018b6:	f00b fa18 	bl	800ccea <osDelay>
  {
 80018ba:	e667      	b.n	800158c <StartTaskControle+0x40>
 80018bc:	24001504 	.word	0x24001504
 80018c0:	240014f0 	.word	0x240014f0
 80018c4:	240015ac 	.word	0x240015ac
 80018c8:	240014ec 	.word	0x240014ec
 80018cc:	24001518 	.word	0x24001518
 80018d0:	24001538 	.word	0x24001538
 80018d4:	240014e8 	.word	0x240014e8

080018d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018dc:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 80018de:	4a23      	ldr	r2, [pc, #140]	@ (800196c <MX_USART2_UART_Init+0x94>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018e2:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 80018e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001914:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191a:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001920:	4811      	ldr	r0, [pc, #68]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 8001922:	f008 ffb5 	bl	800a890 <HAL_UART_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800192c:	f7ff fbce 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	480d      	ldr	r0, [pc, #52]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 8001934:	f00a ff0a 	bl	800c74c <HAL_UARTEx_SetTxFifoThreshold>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800193e:	f7ff fbc5 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001942:	2100      	movs	r1, #0
 8001944:	4808      	ldr	r0, [pc, #32]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 8001946:	f00a ff3f 	bl	800c7c8 <HAL_UARTEx_SetRxFifoThreshold>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001950:	f7ff fbbc 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <MX_USART2_UART_Init+0x90>)
 8001956:	f00a fec0 	bl	800c6da <HAL_UARTEx_DisableFifoMode>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001960:	f7ff fbb4 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	240015ac 	.word	0x240015ac
 800196c:	40004400 	.word	0x40004400

08001970 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001974:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 8001976:	4a23      	ldr	r2, [pc, #140]	@ (8001a04 <MX_USART3_UART_Init+0x94>)
 8001978:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800197a:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 800197c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001980:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800198e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b1a      	ldr	r3, [pc, #104]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b2:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019b8:	4811      	ldr	r0, [pc, #68]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 80019ba:	f008 ff69 	bl	800a890 <HAL_UART_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019c4:	f7ff fb82 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c8:	2100      	movs	r1, #0
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 80019cc:	f00a febe 	bl	800c74c <HAL_UARTEx_SetTxFifoThreshold>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019d6:	f7ff fb79 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019da:	2100      	movs	r1, #0
 80019dc:	4808      	ldr	r0, [pc, #32]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 80019de:	f00a fef3 	bl	800c7c8 <HAL_UARTEx_SetRxFifoThreshold>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019e8:	f7ff fb70 	bl	80010cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	@ (8001a00 <MX_USART3_UART_Init+0x90>)
 80019ee:	f00a fe74 	bl	800c6da <HAL_UARTEx_DisableFifoMode>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019f8:	f7ff fb68 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24001640 	.word	0x24001640
 8001a04:	40004800 	.word	0x40004800

08001a08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0be      	sub	sp, #248	@ 0xf8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	22c0      	movs	r2, #192	@ 0xc0
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f011 ffe5 	bl	80139f8 <memset>
  if(uartHandle->Instance==USART2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6a      	ldr	r2, [pc, #424]	@ (8001bdc <HAL_UART_MspInit+0x1d4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	f040 80e1 	bne.w	8001bfc <HAL_UART_MspInit+0x1f4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a3a:	f04f 0202 	mov.w	r2, #2
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	4618      	mov	r0, r3
 8001a52:	f005 ff51 	bl	80078f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001a5c:	f7ff fb36 	bl	80010cc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a60:	4b5f      	ldr	r3, [pc, #380]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a66:	4a5e      	ldr	r2, [pc, #376]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a70:	4b5b      	ldr	r3, [pc, #364]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001a72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b58      	ldr	r3, [pc, #352]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a84:	4a56      	ldr	r2, [pc, #344]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8e:	4b54      	ldr	r3, [pc, #336]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9c:	4b50      	ldr	r3, [pc, #320]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa2:	4a4f      	ldr	r2, [pc, #316]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aac:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <HAL_UART_MspInit+0x1d8>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aba:	2308      	movs	r3, #8
 8001abc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4841      	ldr	r0, [pc, #260]	@ (8001be4 <HAL_UART_MspInit+0x1dc>)
 8001ae0:	f004 fcaa 	bl	8006438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afc:	2307      	movs	r3, #7
 8001afe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b02:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4837      	ldr	r0, [pc, #220]	@ (8001be8 <HAL_UART_MspInit+0x1e0>)
 8001b0a:	f004 fc95 	bl	8006438 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Stream1;
 8001b0e:	4b37      	ldr	r3, [pc, #220]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b10:	4a37      	ldr	r2, [pc, #220]	@ (8001bf0 <HAL_UART_MspInit+0x1e8>)
 8001b12:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001b14:	4b35      	ldr	r3, [pc, #212]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b16:	222b      	movs	r2, #43	@ 0x2b
 8001b18:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1a:	4b34      	ldr	r3, [pc, #208]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b20:	4b32      	ldr	r3, [pc, #200]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b26:	4b31      	ldr	r3, [pc, #196]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b34:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b42:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b46:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b48:	4b28      	ldr	r3, [pc, #160]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b4e:	4827      	ldr	r0, [pc, #156]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b50:	f001 fe36 	bl	80037c0 <HAL_DMA_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8001b5a:	f7ff fab7 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b66:	4a21      	ldr	r2, [pc, #132]	@ (8001bec <HAL_UART_MspInit+0x1e4>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA2_Stream2;
 8001b6c:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001b6e:	4a22      	ldr	r2, [pc, #136]	@ (8001bf8 <HAL_UART_MspInit+0x1f0>)
 8001b70:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b72:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001b74:	222c      	movs	r2, #44	@ 0x2c
 8001b76:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001b7a:	2240      	movs	r2, #64	@ 0x40
 8001b7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001ba0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ba4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bac:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001bae:	f001 fe07 	bl	80037c0 <HAL_DMA_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_MspInit+0x1b4>
    {
      Error_Handler();
 8001bb8:	f7ff fa88 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf4 <HAL_UART_MspInit+0x1ec>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2105      	movs	r1, #5
 8001bcc:	2026      	movs	r0, #38	@ 0x26
 8001bce:	f001 fdcf 	bl	8003770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd2:	2026      	movs	r0, #38	@ 0x26
 8001bd4:	f001 fde6 	bl	80037a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bd8:	e0c3      	b.n	8001d62 <HAL_UART_MspInit+0x35a>
 8001bda:	bf00      	nop
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58020000 	.word	0x58020000
 8001be8:	58020c00 	.word	0x58020c00
 8001bec:	240016d4 	.word	0x240016d4
 8001bf0:	40020428 	.word	0x40020428
 8001bf4:	2400174c 	.word	0x2400174c
 8001bf8:	40020440 	.word	0x40020440
  else if(uartHandle->Instance==USART3)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5a      	ldr	r2, [pc, #360]	@ (8001d6c <HAL_UART_MspInit+0x364>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	f040 80ad 	bne.w	8001d62 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c08:	f04f 0202 	mov.w	r2, #2
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 fe6a 	bl	80078f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_UART_MspInit+0x226>
      Error_Handler();
 8001c2a:	f7ff fa4f 	bl	80010cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c2e:	4b50      	ldr	r3, [pc, #320]	@ (8001d70 <HAL_UART_MspInit+0x368>)
 8001c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c34:	4a4e      	ldr	r2, [pc, #312]	@ (8001d70 <HAL_UART_MspInit+0x368>)
 8001c36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <HAL_UART_MspInit+0x368>)
 8001c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4c:	4b48      	ldr	r3, [pc, #288]	@ (8001d70 <HAL_UART_MspInit+0x368>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c52:	4a47      	ldr	r2, [pc, #284]	@ (8001d70 <HAL_UART_MspInit+0x368>)
 8001c54:	f043 0308 	orr.w	r3, r3, #8
 8001c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c5c:	4b44      	ldr	r3, [pc, #272]	@ (8001d70 <HAL_UART_MspInit+0x368>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c84:	2307      	movs	r3, #7
 8001c86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4838      	ldr	r0, [pc, #224]	@ (8001d74 <HAL_UART_MspInit+0x36c>)
 8001c92:	f004 fbd1 	bl	8006438 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001c96:	4b38      	ldr	r3, [pc, #224]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001c98:	4a38      	ldr	r2, [pc, #224]	@ (8001d7c <HAL_UART_MspInit+0x374>)
 8001c9a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001c9c:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001c9e:	222d      	movs	r2, #45	@ 0x2d
 8001ca0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca2:	4b35      	ldr	r3, [pc, #212]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	4b33      	ldr	r3, [pc, #204]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cae:	4b32      	ldr	r3, [pc, #200]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb6:	4b30      	ldr	r3, [pc, #192]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cca:	4b2b      	ldr	r3, [pc, #172]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001ccc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cd0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd2:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001cd8:	4827      	ldr	r0, [pc, #156]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001cda:	f001 fd71 	bl	80037c0 <HAL_DMA_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8001ce4:	f7ff f9f2 	bl	80010cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a23      	ldr	r2, [pc, #140]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001cec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001cf0:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <HAL_UART_MspInit+0x370>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001cf6:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001cf8:	4a22      	ldr	r2, [pc, #136]	@ (8001d84 <HAL_UART_MspInit+0x37c>)
 8001cfa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001cfe:	222e      	movs	r2, #46	@ 0x2e
 8001d00:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d04:	2240      	movs	r2, #64	@ 0x40
 8001d06:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d14:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d28:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d36:	4812      	ldr	r0, [pc, #72]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d38:	f001 fd42 	bl	80037c0 <HAL_DMA_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8001d42:	f7ff f9c3 	bl	80010cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d4a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <HAL_UART_MspInit+0x378>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2108      	movs	r1, #8
 8001d56:	2027      	movs	r0, #39	@ 0x27
 8001d58:	f001 fd0a 	bl	8003770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d5c:	2027      	movs	r0, #39	@ 0x27
 8001d5e:	f001 fd21 	bl	80037a4 <HAL_NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	37f8      	adds	r7, #248	@ 0xf8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40004800 	.word	0x40004800
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58020c00 	.word	0x58020c00
 8001d78:	240017c4 	.word	0x240017c4
 8001d7c:	40020010 	.word	0x40020010
 8001d80:	2400183c 	.word	0x2400183c
 8001d84:	40020028 	.word	0x40020028

08001d88 <fGetJoyPostition>:
  * @param  uiRefMax: Analog value for axis maximum limit.
  * @param  uiRefMin: Analog value for axis minimum limit.
  * @retval Float value with joystick position between -1 and 1.
  */
float fGetJoyPostition(unsigned int uiValue, unsigned int uiRef0, unsigned int uiRefMax, unsigned int uiRefMin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  return ((int)(uiValue - uiRef0) > 0) ? ((int)(uiValue - uiRef0))/((float)(uiRefMax - uiRef0)) : ((int)(uiValue - uiRef0))/((float)(uiRef0 - uiRefMin));
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dd10      	ble.n	8001dc2 <fGetJoyPostition+0x3a>
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc0:	e00f      	b.n	8001de2 <fGetJoyPostition+0x5a>
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8001de2:	eeb0 0a67 	vmov.f32	s0, s15
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <vGetStringFromControlAction>:
  * @param  xControlActionTx: Compressed data with information to CARLA.
  * @param  ucTxMsg: Formated msg to be transmitted.
  * @retval None.
  */
void vGetStringFromControlAction(control_action xControlActionTx, unsigned char * ucTxMsg)
{
 8001df0:	b084      	sub	sp, #16
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	f107 0c18 	add.w	ip, r7, #24
 8001dfc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  float_bytes xThrottle;
  float_bytes xSteering;
  float_bytes xBrake;

  xThrottle.fFloat = xControlActionTx.fTrottle;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	60fb      	str	r3, [r7, #12]
  xSteering.fFloat = xControlActionTx.fSteeringAngle;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	60bb      	str	r3, [r7, #8]
  xBrake.fFloat = xControlActionTx.fBrake;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	607b      	str	r3, [r7, #4]

  ucTxMsg[0]  = (unsigned char)'#';
 8001e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0e:	2223      	movs	r2, #35	@ 0x23
 8001e10:	701a      	strb	r2, [r3, #0]
  ucTxMsg[1]  = (unsigned char)'T';
 8001e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e14:	3301      	adds	r3, #1
 8001e16:	2254      	movs	r2, #84	@ 0x54
 8001e18:	701a      	strb	r2, [r3, #0]
  ucTxMsg[2]  = xThrottle.ucBytes[0];
 8001e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	7b3a      	ldrb	r2, [r7, #12]
 8001e20:	701a      	strb	r2, [r3, #0]
  ucTxMsg[3]  = xThrottle.ucBytes[1];
 8001e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e24:	3303      	adds	r3, #3
 8001e26:	7b7a      	ldrb	r2, [r7, #13]
 8001e28:	701a      	strb	r2, [r3, #0]
  ucTxMsg[4]  = xThrottle.ucBytes[2];
 8001e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	7bba      	ldrb	r2, [r7, #14]
 8001e30:	701a      	strb	r2, [r3, #0]
  ucTxMsg[5]  = xThrottle.ucBytes[3];
 8001e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e34:	3305      	adds	r3, #5
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	701a      	strb	r2, [r3, #0]
  ucTxMsg[6]  = (unsigned char)'S';
 8001e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e3c:	3306      	adds	r3, #6
 8001e3e:	2253      	movs	r2, #83	@ 0x53
 8001e40:	701a      	strb	r2, [r3, #0]
  ucTxMsg[7]  = xSteering.ucBytes[0];
 8001e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e44:	3307      	adds	r3, #7
 8001e46:	7a3a      	ldrb	r2, [r7, #8]
 8001e48:	701a      	strb	r2, [r3, #0]
  ucTxMsg[8]  = xSteering.ucBytes[1];
 8001e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	7a7a      	ldrb	r2, [r7, #9]
 8001e50:	701a      	strb	r2, [r3, #0]
  ucTxMsg[9]  = xSteering.ucBytes[2];
 8001e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e54:	3309      	adds	r3, #9
 8001e56:	7aba      	ldrb	r2, [r7, #10]
 8001e58:	701a      	strb	r2, [r3, #0]
  ucTxMsg[10] = xSteering.ucBytes[3];
 8001e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5c:	330a      	adds	r3, #10
 8001e5e:	7afa      	ldrb	r2, [r7, #11]
 8001e60:	701a      	strb	r2, [r3, #0]
  ucTxMsg[11] = (unsigned char)'B';
 8001e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e64:	330b      	adds	r3, #11
 8001e66:	2242      	movs	r2, #66	@ 0x42
 8001e68:	701a      	strb	r2, [r3, #0]
  ucTxMsg[12] = xBrake.ucBytes[0];
 8001e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	793a      	ldrb	r2, [r7, #4]
 8001e70:	701a      	strb	r2, [r3, #0]
  ucTxMsg[13] = xBrake.ucBytes[1];
 8001e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e74:	330d      	adds	r3, #13
 8001e76:	797a      	ldrb	r2, [r7, #5]
 8001e78:	701a      	strb	r2, [r3, #0]
  ucTxMsg[14] = xBrake.ucBytes[2];
 8001e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7c:	330e      	adds	r3, #14
 8001e7e:	79ba      	ldrb	r2, [r7, #6]
 8001e80:	701a      	strb	r2, [r3, #0]
  ucTxMsg[15] = xBrake.ucBytes[3];
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e84:	330f      	adds	r3, #15
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	701a      	strb	r2, [r3, #0]
  ucTxMsg[16] = (unsigned char)'H';
 8001e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	2248      	movs	r2, #72	@ 0x48
 8001e90:	701a      	strb	r2, [r3, #0]
  ucTxMsg[17] = xControlActionTx.ucHandBrake;
 8001e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e94:	3311      	adds	r3, #17
 8001e96:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e9a:	701a      	strb	r2, [r3, #0]
  ucTxMsg[18] = (unsigned char)'R';
 8001e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9e:	3312      	adds	r3, #18
 8001ea0:	2252      	movs	r2, #82	@ 0x52
 8001ea2:	701a      	strb	r2, [r3, #0]
  ucTxMsg[19] = xControlActionTx.ucReverse;
 8001ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea6:	3313      	adds	r3, #19
 8001ea8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001eac:	701a      	strb	r2, [r3, #0]
  ucTxMsg[20] = (unsigned char)'G';
 8001eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb0:	3314      	adds	r3, #20
 8001eb2:	2247      	movs	r2, #71	@ 0x47
 8001eb4:	701a      	strb	r2, [r3, #0]
  ucTxMsg[21] = xControlActionTx.ucGear;
 8001eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb8:	3315      	adds	r3, #21
 8001eba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001ebe:	701a      	strb	r2, [r3, #0]
  ucTxMsg[22] = (unsigned char)'M';
 8001ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec2:	3316      	adds	r3, #22
 8001ec4:	224d      	movs	r2, #77	@ 0x4d
 8001ec6:	701a      	strb	r2, [r3, #0]
  ucTxMsg[23] = xControlActionTx.ucManualGearShift;
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	3317      	adds	r3, #23
 8001ecc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001ed0:	701a      	strb	r2, [r3, #0]
  ucTxMsg[24] = (unsigned char)'$';
 8001ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed4:	3318      	adds	r3, #24
 8001ed6:	2224      	movs	r2, #36	@ 0x24
 8001ed8:	701a      	strb	r2, [r3, #0]
  ucTxMsg[25] = (unsigned char)'\0';
 8001eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001edc:	3319      	adds	r3, #25
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
  
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	b004      	add	sp, #16
 8001eee:	4770      	bx	lr

08001ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef4:	f7ff faa2 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef8:	480c      	ldr	r0, [pc, #48]	@ (8001f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001efa:	490d      	ldr	r1, [pc, #52]	@ (8001f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001efc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f10:	4c0a      	ldr	r4, [pc, #40]	@ (8001f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f011 fe25 	bl	8013b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f22:	f7fe fe61 	bl	8000be8 <main>
  bx  lr
 8001f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f30:	240013ec 	.word	0x240013ec
  ldr r2, =_sidata
 8001f34:	0801599c 	.word	0x0801599c
  ldr r2, =_sbss
 8001f38:	240013ec 	.word	0x240013ec
  ldr r4, =_ebss
 8001f3c:	2403352c 	.word	0x2403352c

08001f40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC3_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f001 fc05 	bl	800375a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f50:	f005 faba 	bl	80074c8 <HAL_RCC_GetSysClockFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <HAL_Init+0x68>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	4913      	ldr	r1, [pc, #76]	@ (8001fb0 <HAL_Init+0x6c>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <HAL_Init+0x68>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <HAL_Init+0x6c>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb4 <HAL_Init+0x70>)
 8001f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f88:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb8 <HAL_Init+0x74>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8e:	200f      	movs	r0, #15
 8001f90:	f7ff f8c0 	bl	8001114 <HAL_InitTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e002      	b.n	8001fa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9e:	f7ff f89b 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	58024400 	.word	0x58024400
 8001fb0:	08013f98 	.word	0x08013f98
 8001fb4:	24000004 	.word	0x24000004
 8001fb8:	24000000 	.word	0x24000000

08001fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2400000c 	.word	0x2400000c
 8001fe0:	240018b4 	.word	0x240018b4

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	240018b4 	.word	0x240018b4

08001ffc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002000:	4b03      	ldr	r3, [pc, #12]	@ (8002010 <HAL_GetREVID+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0c1b      	lsrs	r3, r3, #16
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	5c001000 	.word	0x5c001000

08002014 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3360      	adds	r3, #96	@ 0x60
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80020b0:	bf00      	nop
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3360      	adds	r3, #96	@ 0x60
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	431a      	orrs	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	601a      	str	r2, [r3, #0]
  }
}
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800214a:	b480      	push	{r7}
 800214c:	b087      	sub	sp, #28
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3330      	adds	r3, #48	@ 0x30
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	4413      	add	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	211f      	movs	r1, #31
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	401a      	ands	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	f003 011f 	and.w	r1, r3, #31
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f023 0203 	bic.w	r2, r3, #3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60da      	str	r2, [r3, #12]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3314      	adds	r3, #20
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0e5b      	lsrs	r3, r3, #25
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0d1b      	lsrs	r3, r3, #20
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2107      	movs	r1, #7
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	401a      	ands	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	0d1b      	lsrs	r3, r3, #20
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	431a      	orrs	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0318 	and.w	r3, r3, #24
 8002242:	4908      	ldr	r1, [pc, #32]	@ (8002264 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002244:	40d9      	lsrs	r1, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	400b      	ands	r3, r1
 800224a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800224e:	431a      	orrs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	000fffff 	.word	0x000fffff

08002268 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 031f 	and.w	r3, r3, #31
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6093      	str	r3, [r2, #8]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	5fffffc0 	.word	0x5fffffc0

080022a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022bc:	d101      	bne.n	80022c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80022de:	4013      	ands	r3, r2
 80022e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	6fffffc0 	.word	0x6fffffc0

080022f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800230c:	d101      	bne.n	8002312 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <LL_ADC_Enable+0x24>)
 800232e:	4013      	ands	r3, r2
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	7fffffc0 	.word	0x7fffffc0

08002348 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <LL_ADC_IsEnabled+0x18>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <LL_ADC_IsEnabled+0x1a>
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <LL_ADC_REG_StartConversion+0x24>)
 800237e:	4013      	ands	r3, r2
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	7fffffc0 	.word	0x7fffffc0

08002398 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d101      	bne.n	80023b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b089      	sub	sp, #36	@ 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e18f      	b.n	800271e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	2b00      	cmp	r3, #0
 800240a:	d109      	bne.n	8002420 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe f97b 	bl	8000708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff3f 	bl	80022a8 <LL_ADC_IsDeepPowerDownEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff25 	bl	8002284 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff5a 	bl	80022f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d114      	bne.n	8002474 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff3e 	bl	80022d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002454:	4b87      	ldr	r3, [pc, #540]	@ (8002674 <HAL_ADC_Init+0x290>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	4a87      	ldr	r2, [pc, #540]	@ (8002678 <HAL_ADC_Init+0x294>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	3301      	adds	r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002466:	e002      	b.n	800246e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	3b01      	subs	r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f9      	bne.n	8002468 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff3d 	bl	80022f8 <LL_ADC_IsInternalRegulatorEnabled>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002488:	f043 0210 	orr.w	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff77 	bl	8002398 <LL_ADC_REG_IsConversionOngoing>
 80024aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 8129 	bne.w	800270c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 8125 	bne.w	800270c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff36 	bl	8002348 <LL_ADC_IsEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d136      	bne.n	8002550 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a65      	ldr	r2, [pc, #404]	@ (800267c <HAL_ADC_Init+0x298>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_ADC_Init+0x112>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a63      	ldr	r2, [pc, #396]	@ (8002680 <HAL_ADC_Init+0x29c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10e      	bne.n	8002514 <HAL_ADC_Init+0x130>
 80024f6:	4861      	ldr	r0, [pc, #388]	@ (800267c <HAL_ADC_Init+0x298>)
 80024f8:	f7ff ff26 	bl	8002348 <LL_ADC_IsEnabled>
 80024fc:	4604      	mov	r4, r0
 80024fe:	4860      	ldr	r0, [pc, #384]	@ (8002680 <HAL_ADC_Init+0x29c>)
 8002500:	f7ff ff22 	bl	8002348 <LL_ADC_IsEnabled>
 8002504:	4603      	mov	r3, r0
 8002506:	4323      	orrs	r3, r4
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e008      	b.n	8002526 <HAL_ADC_Init+0x142>
 8002514:	485b      	ldr	r0, [pc, #364]	@ (8002684 <HAL_ADC_Init+0x2a0>)
 8002516:	f7ff ff17 	bl	8002348 <LL_ADC_IsEnabled>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a53      	ldr	r2, [pc, #332]	@ (800267c <HAL_ADC_Init+0x298>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_ADC_Init+0x15a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a51      	ldr	r2, [pc, #324]	@ (8002680 <HAL_ADC_Init+0x29c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_ADC_Init+0x15e>
 800253e:	4a52      	ldr	r2, [pc, #328]	@ (8002688 <HAL_ADC_Init+0x2a4>)
 8002540:	e000      	b.n	8002544 <HAL_ADC_Init+0x160>
 8002542:	4a52      	ldr	r2, [pc, #328]	@ (800268c <HAL_ADC_Init+0x2a8>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f7ff fd62 	bl	8002014 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002550:	f7ff fd54 	bl	8001ffc <HAL_GetREVID>
 8002554:	4603      	mov	r3, r0
 8002556:	f241 0203 	movw	r2, #4099	@ 0x1003
 800255a:	4293      	cmp	r3, r2
 800255c:	d914      	bls.n	8002588 <HAL_ADC_Init+0x1a4>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b10      	cmp	r3, #16
 8002564:	d110      	bne.n	8002588 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7d5b      	ldrb	r3, [r3, #21]
 800256a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002570:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002576:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7f1b      	ldrb	r3, [r3, #28]
 800257c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800257e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002580:	f043 030c 	orr.w	r3, r3, #12
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	e00d      	b.n	80025a4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7d5b      	ldrb	r3, [r3, #21]
 800258c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002592:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002598:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7f1b      	ldrb	r3, [r3, #28]
 800259e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7f1b      	ldrb	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d106      	bne.n	80025ba <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	045b      	lsls	r3, r3, #17
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002690 <HAL_ADC_Init+0x2ac>)
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	69b9      	ldr	r1, [r7, #24]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fed2 	bl	8002398 <LL_ADC_REG_IsConversionOngoing>
 80025f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fedf 	bl	80023be <LL_ADC_INJ_IsConversionOngoing>
 8002600:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d15f      	bne.n	80026c8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d15c      	bne.n	80026c8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7d1b      	ldrb	r3, [r3, #20]
 8002612:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <HAL_ADC_Init+0x2b0>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	430b      	orrs	r3, r1
 800262e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002636:	2b01      	cmp	r3, #1
 8002638:	d130      	bne.n	800269c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	4b14      	ldr	r3, [pc, #80]	@ (8002698 <HAL_ADC_Init+0x2b4>)
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800264e:	3a01      	subs	r2, #1
 8002650:	0411      	lsls	r1, r2, #16
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800265c:	4311      	orrs	r1, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002662:	430a      	orrs	r2, r1
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	611a      	str	r2, [r3, #16]
 8002670:	e01c      	b.n	80026ac <HAL_ADC_Init+0x2c8>
 8002672:	bf00      	nop
 8002674:	24000000 	.word	0x24000000
 8002678:	053e2d63 	.word	0x053e2d63
 800267c:	40022000 	.word	0x40022000
 8002680:	40022100 	.word	0x40022100
 8002684:	58026000 	.word	0x58026000
 8002688:	40022300 	.word	0x40022300
 800268c:	58026300 	.word	0x58026300
 8002690:	fff0c003 	.word	0xfff0c003
 8002694:	ffffbffc 	.word	0xffffbffc
 8002698:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fd8c 	bl	80031e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10c      	bne.n	80026ea <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f023 010f 	bic.w	r1, r3, #15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	1e5a      	subs	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80026e8:	e007      	b.n	80026fa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 020f 	bic.w	r2, r2, #15
 80026f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	@ 0x54
 800270a:	e007      	b.n	800271c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002710:	f043 0210 	orr.w	r2, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800271c:	7ffb      	ldrb	r3, [r7, #31]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	bf00      	nop

08002728 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a55      	ldr	r2, [pc, #340]	@ (8002890 <HAL_ADC_Start_DMA+0x168>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_ADC_Start_DMA+0x20>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a54      	ldr	r2, [pc, #336]	@ (8002894 <HAL_ADC_Start_DMA+0x16c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_ADC_Start_DMA+0x24>
 8002748:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <HAL_ADC_Start_DMA+0x170>)
 800274a:	e000      	b.n	800274e <HAL_ADC_Start_DMA+0x26>
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_ADC_Start_DMA+0x174>)
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fd8a 	bl	8002268 <LL_ADC_GetMultimode>
 8002754:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fe1c 	bl	8002398 <LL_ADC_REG_IsConversionOngoing>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 808c 	bne.w	8002880 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Start_DMA+0x4e>
 8002772:	2302      	movs	r3, #2
 8002774:	e087      	b.n	8002886 <HAL_ADC_Start_DMA+0x15e>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d002      	beq.n	8002790 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d170      	bne.n	8002872 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fc07 	bl	8002fa4 <ADC_Enable>
 8002796:	4603      	mov	r3, r0
 8002798:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d163      	bne.n	8002868 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027a4:	4b3e      	ldr	r3, [pc, #248]	@ (80028a0 <HAL_ADC_Start_DMA+0x178>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a37      	ldr	r2, [pc, #220]	@ (8002894 <HAL_ADC_Start_DMA+0x16c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d002      	beq.n	80027c0 <HAL_ADC_Start_DMA+0x98>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	e000      	b.n	80027c2 <HAL_ADC_Start_DMA+0x9a>
 80027c0:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <HAL_ADC_Start_DMA+0x168>)
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d002      	beq.n	80027d0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	f023 0206 	bic.w	r2, r3, #6
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80027f4:	e002      	b.n	80027fc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002800:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <HAL_ADC_Start_DMA+0x17c>)
 8002802:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002808:	4a27      	ldr	r2, [pc, #156]	@ (80028a8 <HAL_ADC_Start_DMA+0x180>)
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002810:	4a26      	ldr	r2, [pc, #152]	@ (80028ac <HAL_ADC_Start_DMA+0x184>)
 8002812:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	221c      	movs	r2, #28
 800281a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0210 	orr.w	r2, r2, #16
 8002832:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f7ff fcaf 	bl	80021a2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3340      	adds	r3, #64	@ 0x40
 800284e:	4619      	mov	r1, r3
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f001 fb10 	bl	8003e78 <HAL_DMA_Start_IT>
 8002858:	4603      	mov	r3, r0
 800285a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fd85 	bl	8002370 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002866:	e00d      	b.n	8002884 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002870:	e008      	b.n	8002884 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800287e:	e001      	b.n	8002884 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002880:	2302      	movs	r3, #2
 8002882:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002884:	7dfb      	ldrb	r3, [r7, #23]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40022000 	.word	0x40022000
 8002894:	40022100 	.word	0x40022100
 8002898:	40022300 	.word	0x40022300
 800289c:	58026300 	.word	0x58026300
 80028a0:	fffff0fe 	.word	0xfffff0fe
 80028a4:	080030b9 	.word	0x080030b9
 80028a8:	08003191 	.word	0x08003191
 80028ac:	080031ad 	.word	0x080031ad

080028b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b0a1      	sub	sp, #132	@ 0x84
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a65      	ldr	r2, [pc, #404]	@ (8002a9c <HAL_ADC_ConfigChannel+0x1b0>)
 8002906:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x2a>
 8002912:	2302      	movs	r3, #2
 8002914:	e32e      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x688>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fd38 	bl	8002398 <LL_ADC_REG_IsConversionOngoing>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 8313 	bne.w	8002f56 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	db2c      	blt.n	8002992 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x6a>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2201      	movs	r2, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	e016      	b.n	8002984 <HAL_ADC_ConfigChannel+0x98>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002964:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002966:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002968:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800296e:	2320      	movs	r3, #32
 8002970:	e003      	b.n	800297a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002972:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	2201      	movs	r2, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	69d1      	ldr	r1, [r2, #28]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	430b      	orrs	r3, r1
 8002990:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	f7ff fbd3 	bl	800214a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fcf5 	bl	8002398 <LL_ADC_REG_IsConversionOngoing>
 80029ae:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fd02 	bl	80023be <LL_ADC_INJ_IsConversionOngoing>
 80029ba:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 80b8 	bne.w	8002b34 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 80b4 	bne.w	8002b34 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6819      	ldr	r1, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	461a      	mov	r2, r3
 80029da:	f7ff fbf5 	bl	80021c8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029de:	4b30      	ldr	r3, [pc, #192]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x1b4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80029e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029ea:	d10b      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x118>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	e01d      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x154>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10b      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x13e>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	089b      	lsrs	r3, r3, #2
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	e00a      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x154>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d02c      	beq.n	8002aa4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6919      	ldr	r1, [r3, #16]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a58:	f7ff fb10 	bl	800207c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6919      	ldr	r1, [r3, #16]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	7e5b      	ldrb	r3, [r3, #25]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d102      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x186>
 8002a6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002a70:	e000      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x188>
 8002a72:	2300      	movs	r3, #0
 8002a74:	461a      	mov	r2, r3
 8002a76:	f7ff fb3a 	bl	80020ee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6919      	ldr	r1, [r3, #16]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	7e1b      	ldrb	r3, [r3, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d102      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1a4>
 8002a8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a8e:	e000      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x1a6>
 8002a90:	2300      	movs	r3, #0
 8002a92:	461a      	mov	r2, r3
 8002a94:	f7ff fb12 	bl	80020bc <LL_ADC_SetDataRightShift>
 8002a98:	e04c      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x248>
 8002a9a:	bf00      	nop
 8002a9c:	47ff0000 	.word	0x47ff0000
 8002aa0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	069b      	lsls	r3, r3, #26
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ac6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ace:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002aea:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002af2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b0e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	069b      	lsls	r3, r3, #26
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d107      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b32:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fc05 	bl	8002348 <LL_ADC_IsEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f040 8211 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6819      	ldr	r1, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f7ff fb64 	bl	8002220 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4aa1      	ldr	r2, [pc, #644]	@ (8002de4 <HAL_ADC_ConfigChannel+0x4f8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	f040 812e 	bne.w	8002dc0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x2a0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	bf94      	ite	ls
 8002b84:	2301      	movls	r3, #1
 8002b86:	2300      	movhi	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e019      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x2d4>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e003      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	bf94      	ite	ls
 8002bba:	2301      	movls	r3, #1
 8002bbc:	2300      	movhi	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d079      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x2f4>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	069b      	lsls	r3, r3, #26
 8002bda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bde:	e015      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x320>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bf0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	069b      	lsls	r3, r3, #26
 8002c08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x340>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	e017      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x370>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002c44:	2320      	movs	r3, #32
 8002c46:	e003      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	ea42 0103 	orr.w	r1, r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x396>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	051b      	lsls	r3, r3, #20
 8002c80:	e018      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x3c8>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 021f 	and.w	r2, r3, #31
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	e07e      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x3e8>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	3301      	adds	r3, #1
 8002ccc:	069b      	lsls	r3, r3, #26
 8002cce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd2:	e015      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x414>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002cec:	2320      	movs	r3, #32
 8002cee:	e003      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	069b      	lsls	r3, r3, #26
 8002cfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d109      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x434>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	e017      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x464>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	61bb      	str	r3, [r7, #24]
  return result;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e003      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	ea42 0103 	orr.w	r1, r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10d      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x490>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	3b1e      	subs	r3, #30
 8002d74:	051b      	lsls	r3, r3, #20
 8002d76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	e01b      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x4c8>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	60fb      	str	r3, [r7, #12]
  return result;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f003 021f 	and.w	r2, r3, #31
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	3b1e      	subs	r3, #30
 8002dae:	051b      	lsls	r3, r3, #20
 8002db0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db4:	430b      	orrs	r3, r1
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	6892      	ldr	r2, [r2, #8]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f7ff fa04 	bl	80021c8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f280 80cf 	bge.w	8002f68 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a06      	ldr	r2, [pc, #24]	@ (8002de8 <HAL_ADC_ConfigChannel+0x4fc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x4f2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <HAL_ADC_ConfigChannel+0x500>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d10a      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x508>
 8002dde:	4b04      	ldr	r3, [pc, #16]	@ (8002df0 <HAL_ADC_ConfigChannel+0x504>)
 8002de0:	e009      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x50a>
 8002de2:	bf00      	nop
 8002de4:	47ff0000 	.word	0x47ff0000
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40022100 	.word	0x40022100
 8002df0:	40022300 	.word	0x40022300
 8002df4:	4b61      	ldr	r3, [pc, #388]	@ (8002f7c <HAL_ADC_ConfigChannel+0x690>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f932 	bl	8002060 <LL_ADC_GetCommonPathInternalCh>
 8002dfc:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a5f      	ldr	r2, [pc, #380]	@ (8002f80 <HAL_ADC_ConfigChannel+0x694>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_ADC_ConfigChannel+0x526>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f84 <HAL_ADC_ConfigChannel+0x698>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10e      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x544>
 8002e12:	485b      	ldr	r0, [pc, #364]	@ (8002f80 <HAL_ADC_ConfigChannel+0x694>)
 8002e14:	f7ff fa98 	bl	8002348 <LL_ADC_IsEnabled>
 8002e18:	4604      	mov	r4, r0
 8002e1a:	485a      	ldr	r0, [pc, #360]	@ (8002f84 <HAL_ADC_ConfigChannel+0x698>)
 8002e1c:	f7ff fa94 	bl	8002348 <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4323      	orrs	r3, r4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e008      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x556>
 8002e30:	4855      	ldr	r0, [pc, #340]	@ (8002f88 <HAL_ADC_ConfigChannel+0x69c>)
 8002e32:	f7ff fa89 	bl	8002348 <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d07d      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a50      	ldr	r2, [pc, #320]	@ (8002f8c <HAL_ADC_ConfigChannel+0x6a0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d130      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x5c6>
 8002e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d12b      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002f88 <HAL_ADC_ConfigChannel+0x69c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	f040 8081 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a45      	ldr	r2, [pc, #276]	@ (8002f80 <HAL_ADC_ConfigChannel+0x694>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d004      	beq.n	8002e7a <HAL_ADC_ConfigChannel+0x58e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a43      	ldr	r2, [pc, #268]	@ (8002f84 <HAL_ADC_ConfigChannel+0x698>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x592>
 8002e7a:	4a45      	ldr	r2, [pc, #276]	@ (8002f90 <HAL_ADC_ConfigChannel+0x6a4>)
 8002e7c:	e000      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x594>
 8002e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f7c <HAL_ADC_ConfigChannel+0x690>)
 8002e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e86:	4619      	mov	r1, r3
 8002e88:	4610      	mov	r0, r2
 8002e8a:	f7ff f8d6 	bl	800203a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e8e:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <HAL_ADC_ConfigChannel+0x6a8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	4a40      	ldr	r2, [pc, #256]	@ (8002f98 <HAL_ADC_ConfigChannel+0x6ac>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ea2:	e002      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f9      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eb0:	e05a      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a39      	ldr	r2, [pc, #228]	@ (8002f9c <HAL_ADC_ConfigChannel+0x6b0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d11e      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x60e>
 8002ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ebe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d119      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a2f      	ldr	r2, [pc, #188]	@ (8002f88 <HAL_ADC_ConfigChannel+0x69c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d14b      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f80 <HAL_ADC_ConfigChannel+0x694>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_ADC_ConfigChannel+0x5f8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a29      	ldr	r2, [pc, #164]	@ (8002f84 <HAL_ADC_ConfigChannel+0x698>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x5fc>
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f90 <HAL_ADC_ConfigChannel+0x6a4>)
 8002ee6:	e000      	b.n	8002eea <HAL_ADC_ConfigChannel+0x5fe>
 8002ee8:	4a24      	ldr	r2, [pc, #144]	@ (8002f7c <HAL_ADC_ConfigChannel+0x690>)
 8002eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f7ff f8a1 	bl	800203a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ef8:	e036      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a28      	ldr	r2, [pc, #160]	@ (8002fa0 <HAL_ADC_ConfigChannel+0x6b4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d131      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
 8002f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d12c      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <HAL_ADC_ConfigChannel+0x69c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d127      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	@ (8002f80 <HAL_ADC_ConfigChannel+0x694>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x640>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a17      	ldr	r2, [pc, #92]	@ (8002f84 <HAL_ADC_ConfigChannel+0x698>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x644>
 8002f2c:	4a18      	ldr	r2, [pc, #96]	@ (8002f90 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f2e:	e000      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x646>
 8002f30:	4a12      	ldr	r2, [pc, #72]	@ (8002f7c <HAL_ADC_ConfigChannel+0x690>)
 8002f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7ff f87d 	bl	800203a <LL_ADC_SetCommonPathInternalCh>
 8002f40:	e012      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002f54:	e008      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3784      	adds	r7, #132	@ 0x84
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd90      	pop	{r4, r7, pc}
 8002f7c:	58026300 	.word	0x58026300
 8002f80:	40022000 	.word	0x40022000
 8002f84:	40022100 	.word	0x40022100
 8002f88:	58026000 	.word	0x58026000
 8002f8c:	cb840000 	.word	0xcb840000
 8002f90:	40022300 	.word	0x40022300
 8002f94:	24000000 	.word	0x24000000
 8002f98:	053e2d63 	.word	0x053e2d63
 8002f9c:	c7520000 	.word	0xc7520000
 8002fa0:	cfb80000 	.word	0xcfb80000

08002fa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f9c9 	bl	8002348 <LL_ADC_IsEnabled>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d16e      	bne.n	800309a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	4b38      	ldr	r3, [pc, #224]	@ (80030a4 <ADC_Enable+0x100>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00d      	beq.n	8002fe6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e05a      	b.n	800309c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff f998 	bl	8002320 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ff0:	f7fe fff8 	bl	8001fe4 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80030a8 <ADC_Enable+0x104>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <ADC_Enable+0x66>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a29      	ldr	r2, [pc, #164]	@ (80030ac <ADC_Enable+0x108>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d101      	bne.n	800300e <ADC_Enable+0x6a>
 800300a:	4b29      	ldr	r3, [pc, #164]	@ (80030b0 <ADC_Enable+0x10c>)
 800300c:	e000      	b.n	8003010 <ADC_Enable+0x6c>
 800300e:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <ADC_Enable+0x110>)
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff f929 	bl	8002268 <LL_ADC_GetMultimode>
 8003016:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a23      	ldr	r2, [pc, #140]	@ (80030ac <ADC_Enable+0x108>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d002      	beq.n	8003028 <ADC_Enable+0x84>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e000      	b.n	800302a <ADC_Enable+0x86>
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <ADC_Enable+0x104>)
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	4293      	cmp	r3, r2
 8003030:	d02c      	beq.n	800308c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d130      	bne.n	800309a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003038:	e028      	b.n	800308c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f982 	bl	8002348 <LL_ADC_IsEnabled>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff f966 	bl	8002320 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003054:	f7fe ffc6 	bl	8001fe4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d914      	bls.n	800308c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d00d      	beq.n	800308c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	f043 0210 	orr.w	r2, r3, #16
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e007      	b.n	800309c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d1cf      	bne.n	800303a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	8000003f 	.word	0x8000003f
 80030a8:	40022000 	.word	0x40022000
 80030ac:	40022100 	.word	0x40022100
 80030b0:	40022300 	.word	0x40022300
 80030b4:	58026300 	.word	0x58026300

080030b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d14b      	bne.n	800316a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d021      	beq.n	8003130 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f817 	bl	8002124 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d032      	beq.n	8003162 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d12b      	bne.n	8003162 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d11f      	bne.n	8003162 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	f043 0201 	orr.w	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	655a      	str	r2, [r3, #84]	@ 0x54
 800312e:	e018      	b.n	8003162 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d111      	bne.n	8003162 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003142:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d105      	bne.n	8003162 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff fba4 	bl	80028b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003168:	e00e      	b.n	8003188 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff fbae 	bl	80028d8 <HAL_ADC_ErrorCallback>
}
 800317c:	e004      	b.n	8003188 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff fb90 	bl	80028c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff fb80 	bl	80028d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a7a      	ldr	r2, [pc, #488]	@ (80033d8 <ADC_ConfigureBoostMode+0x1f8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <ADC_ConfigureBoostMode+0x1c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a79      	ldr	r2, [pc, #484]	@ (80033dc <ADC_ConfigureBoostMode+0x1fc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d109      	bne.n	8003210 <ADC_ConfigureBoostMode+0x30>
 80031fc:	4b78      	ldr	r3, [pc, #480]	@ (80033e0 <ADC_ConfigureBoostMode+0x200>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e008      	b.n	8003222 <ADC_ConfigureBoostMode+0x42>
 8003210:	4b74      	ldr	r3, [pc, #464]	@ (80033e4 <ADC_ConfigureBoostMode+0x204>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01c      	beq.n	8003260 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003226:	f004 fac9 	bl	80077bc <HAL_RCC_GetHCLKFreq>
 800322a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003234:	d010      	beq.n	8003258 <ADC_ConfigureBoostMode+0x78>
 8003236:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800323a:	d873      	bhi.n	8003324 <ADC_ConfigureBoostMode+0x144>
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003240:	d002      	beq.n	8003248 <ADC_ConfigureBoostMode+0x68>
 8003242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003246:	d16d      	bne.n	8003324 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	60fb      	str	r3, [r7, #12]
        break;
 8003256:	e068      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	60fb      	str	r3, [r7, #12]
        break;
 800325e:	e064      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003260:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f005 fd50 	bl	8008d0c <HAL_RCCEx_GetPeriphCLKFreq>
 800326c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003276:	d051      	beq.n	800331c <ADC_ConfigureBoostMode+0x13c>
 8003278:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800327c:	d854      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 800327e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003282:	d047      	beq.n	8003314 <ADC_ConfigureBoostMode+0x134>
 8003284:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003288:	d84e      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 800328a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800328e:	d03d      	beq.n	800330c <ADC_ConfigureBoostMode+0x12c>
 8003290:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003294:	d848      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 8003296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800329a:	d033      	beq.n	8003304 <ADC_ConfigureBoostMode+0x124>
 800329c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032a0:	d842      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 80032a2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80032a6:	d029      	beq.n	80032fc <ADC_ConfigureBoostMode+0x11c>
 80032a8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80032ac:	d83c      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 80032ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80032b2:	d01a      	beq.n	80032ea <ADC_ConfigureBoostMode+0x10a>
 80032b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80032b8:	d836      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 80032ba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80032be:	d014      	beq.n	80032ea <ADC_ConfigureBoostMode+0x10a>
 80032c0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80032c4:	d830      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 80032c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ca:	d00e      	beq.n	80032ea <ADC_ConfigureBoostMode+0x10a>
 80032cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d0:	d82a      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 80032d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032d6:	d008      	beq.n	80032ea <ADC_ConfigureBoostMode+0x10a>
 80032d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032dc:	d824      	bhi.n	8003328 <ADC_ConfigureBoostMode+0x148>
 80032de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032e2:	d002      	beq.n	80032ea <ADC_ConfigureBoostMode+0x10a>
 80032e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032e8:	d11e      	bne.n	8003328 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	60fb      	str	r3, [r7, #12]
        break;
 80032fa:	e016      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	60fb      	str	r3, [r7, #12]
        break;
 8003302:	e012      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	60fb      	str	r3, [r7, #12]
        break;
 800330a:	e00e      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	60fb      	str	r3, [r7, #12]
        break;
 8003312:	e00a      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	09db      	lsrs	r3, r3, #7
 8003318:	60fb      	str	r3, [r7, #12]
        break;
 800331a:	e006      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	60fb      	str	r3, [r7, #12]
        break;
 8003322:	e002      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003328:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800332a:	f7fe fe67 	bl	8001ffc <HAL_GetREVID>
 800332e:	4603      	mov	r3, r0
 8003330:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003334:	4293      	cmp	r3, r2
 8003336:	d815      	bhi.n	8003364 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a2b      	ldr	r2, [pc, #172]	@ (80033e8 <ADC_ConfigureBoostMode+0x208>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d908      	bls.n	8003352 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800334e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003350:	e03e      	b.n	80033d0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003360:	609a      	str	r2, [r3, #8]
}
 8003362:	e035      	b.n	80033d0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ec <ADC_ConfigureBoostMode+0x20c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d808      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	e025      	b.n	80033d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a1a      	ldr	r2, [pc, #104]	@ (80033f0 <ADC_ConfigureBoostMode+0x210>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d80a      	bhi.n	80033a2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800339e:	609a      	str	r2, [r3, #8]
}
 80033a0:	e016      	b.n	80033d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a13      	ldr	r2, [pc, #76]	@ (80033f4 <ADC_ConfigureBoostMode+0x214>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d80a      	bhi.n	80033c0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	e007      	b.n	80033d0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40022100 	.word	0x40022100
 80033e0:	40022300 	.word	0x40022300
 80033e4:	58026300 	.word	0x58026300
 80033e8:	01312d00 	.word	0x01312d00
 80033ec:	005f5e10 	.word	0x005f5e10
 80033f0:	00bebc20 	.word	0x00bebc20
 80033f4:	017d7840 	.word	0x017d7840

080033f8 <LL_ADC_IsEnabled>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <LL_ADC_IsEnabled+0x18>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <LL_ADC_IsEnabled+0x1a>
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <LL_ADC_REG_IsConversionOngoing>:
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d101      	bne.n	8003436 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b09f      	sub	sp, #124	@ 0x7c
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800345e:	2302      	movs	r3, #2
 8003460:	e0be      	b.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800346e:	2300      	movs	r3, #0
 8003470:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5c      	ldr	r2, [pc, #368]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d102      	bne.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800347c:	4b5b      	ldr	r3, [pc, #364]	@ (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	e001      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e09d      	b.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ffb9 	bl	800341e <LL_ADC_REG_IsConversionOngoing>
 80034ac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ffb3 	bl	800341e <LL_ADC_REG_IsConversionOngoing>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d17f      	bne.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80034be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d17c      	bne.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a47      	ldr	r2, [pc, #284]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a46      	ldr	r2, [pc, #280]	@ (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80034d8:	4b45      	ldr	r3, [pc, #276]	@ (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034da:	e000      	b.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80034dc:	4b45      	ldr	r3, [pc, #276]	@ (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034de:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d039      	beq.n	800355c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80034e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a3a      	ldr	r2, [pc, #232]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a38      	ldr	r2, [pc, #224]	@ (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10e      	bne.n	800352c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800350e:	4836      	ldr	r0, [pc, #216]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003510:	f7ff ff72 	bl	80033f8 <LL_ADC_IsEnabled>
 8003514:	4604      	mov	r4, r0
 8003516:	4835      	ldr	r0, [pc, #212]	@ (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003518:	f7ff ff6e 	bl	80033f8 <LL_ADC_IsEnabled>
 800351c:	4603      	mov	r3, r0
 800351e:	4323      	orrs	r3, r4
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e008      	b.n	800353e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800352c:	4832      	ldr	r0, [pc, #200]	@ (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800352e:	f7ff ff63 	bl	80033f8 <LL_ADC_IsEnabled>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d047      	beq.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003548:	4013      	ands	r3, r2
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	6811      	ldr	r1, [r2, #0]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	6892      	ldr	r2, [r2, #8]
 8003552:	430a      	orrs	r2, r1
 8003554:	431a      	orrs	r2, r3
 8003556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003558:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800355a:	e03a      	b.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800355c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003566:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1e      	ldr	r2, [pc, #120]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d10e      	bne.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800357c:	481a      	ldr	r0, [pc, #104]	@ (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800357e:	f7ff ff3b 	bl	80033f8 <LL_ADC_IsEnabled>
 8003582:	4604      	mov	r4, r0
 8003584:	4819      	ldr	r0, [pc, #100]	@ (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003586:	f7ff ff37 	bl	80033f8 <LL_ADC_IsEnabled>
 800358a:	4603      	mov	r3, r0
 800358c:	4323      	orrs	r3, r4
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e008      	b.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800359a:	4817      	ldr	r0, [pc, #92]	@ (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800359c:	f7ff ff2c 	bl	80033f8 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d010      	beq.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035bc:	e009      	b.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80035d0:	e000      	b.n	80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80035dc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	377c      	adds	r7, #124	@ 0x7c
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd90      	pop	{r4, r7, pc}
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40022100 	.word	0x40022100
 80035f0:	40022300 	.word	0x40022300
 80035f4:	58026300 	.word	0x58026300
 80035f8:	58026000 	.word	0x58026000
 80035fc:	fffff0e0 	.word	0xfffff0e0

08003600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <__NVIC_SetPriorityGrouping+0x40>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003628:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 800362a:	4313      	orrs	r3, r2
 800362c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362e:	4a04      	ldr	r2, [pc, #16]	@ (8003640 <__NVIC_SetPriorityGrouping+0x40>)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	60d3      	str	r3, [r2, #12]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	e000ed00 	.word	0xe000ed00
 8003644:	05fa0000 	.word	0x05fa0000

08003648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800364c:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800366e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003672:	2b00      	cmp	r3, #0
 8003674:	db0b      	blt.n	800368e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	f003 021f 	and.w	r2, r3, #31
 800367c:	4907      	ldr	r1, [pc, #28]	@ (800369c <__NVIC_EnableIRQ+0x38>)
 800367e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2001      	movs	r0, #1
 8003686:	fa00 f202 	lsl.w	r2, r0, r2
 800368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000e100 	.word	0xe000e100

080036a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	db0a      	blt.n	80036ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	490c      	ldr	r1, [pc, #48]	@ (80036ec <__NVIC_SetPriority+0x4c>)
 80036ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	440b      	add	r3, r1
 80036c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c8:	e00a      	b.n	80036e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	4908      	ldr	r1, [pc, #32]	@ (80036f0 <__NVIC_SetPriority+0x50>)
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	3b04      	subs	r3, #4
 80036d8:	0112      	lsls	r2, r2, #4
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	440b      	add	r3, r1
 80036de:	761a      	strb	r2, [r3, #24]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000e100 	.word	0xe000e100
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	@ 0x24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f1c3 0307 	rsb	r3, r3, #7
 800370e:	2b04      	cmp	r3, #4
 8003710:	bf28      	it	cs
 8003712:	2304      	movcs	r3, #4
 8003714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3304      	adds	r3, #4
 800371a:	2b06      	cmp	r3, #6
 800371c:	d902      	bls.n	8003724 <NVIC_EncodePriority+0x30>
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3b03      	subs	r3, #3
 8003722:	e000      	b.n	8003726 <NVIC_EncodePriority+0x32>
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003728:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	401a      	ands	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800373c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	43d9      	mvns	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800374c:	4313      	orrs	r3, r2
         );
}
 800374e:	4618      	mov	r0, r3
 8003750:	3724      	adds	r7, #36	@ 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ff4c 	bl	8003600 <__NVIC_SetPriorityGrouping>
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800377e:	f7ff ff63 	bl	8003648 <__NVIC_GetPriorityGrouping>
 8003782:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	6978      	ldr	r0, [r7, #20]
 800378a:	f7ff ffb3 	bl	80036f4 <NVIC_EncodePriority>
 800378e:	4602      	mov	r2, r0
 8003790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff82 	bl	80036a0 <__NVIC_SetPriority>
}
 800379c:	bf00      	nop
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff56 	bl	8003664 <__NVIC_EnableIRQ>
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80037c8:	f7fe fc0c 	bl	8001fe4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e316      	b.n	8003e06 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a66      	ldr	r2, [pc, #408]	@ (8003978 <HAL_DMA_Init+0x1b8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d04a      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a65      	ldr	r2, [pc, #404]	@ (800397c <HAL_DMA_Init+0x1bc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d045      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a63      	ldr	r2, [pc, #396]	@ (8003980 <HAL_DMA_Init+0x1c0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d040      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a62      	ldr	r2, [pc, #392]	@ (8003984 <HAL_DMA_Init+0x1c4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d03b      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a60      	ldr	r2, [pc, #384]	@ (8003988 <HAL_DMA_Init+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d036      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5f      	ldr	r2, [pc, #380]	@ (800398c <HAL_DMA_Init+0x1cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d031      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5d      	ldr	r2, [pc, #372]	@ (8003990 <HAL_DMA_Init+0x1d0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02c      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a5c      	ldr	r2, [pc, #368]	@ (8003994 <HAL_DMA_Init+0x1d4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d027      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a5a      	ldr	r2, [pc, #360]	@ (8003998 <HAL_DMA_Init+0x1d8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a59      	ldr	r2, [pc, #356]	@ (800399c <HAL_DMA_Init+0x1dc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d01d      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a57      	ldr	r2, [pc, #348]	@ (80039a0 <HAL_DMA_Init+0x1e0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d018      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a56      	ldr	r2, [pc, #344]	@ (80039a4 <HAL_DMA_Init+0x1e4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a54      	ldr	r2, [pc, #336]	@ (80039a8 <HAL_DMA_Init+0x1e8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a53      	ldr	r2, [pc, #332]	@ (80039ac <HAL_DMA_Init+0x1ec>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a51      	ldr	r2, [pc, #324]	@ (80039b0 <HAL_DMA_Init+0x1f0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_DMA_Init+0xb8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a50      	ldr	r2, [pc, #320]	@ (80039b4 <HAL_DMA_Init+0x1f4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d101      	bne.n	800387c <HAL_DMA_Init+0xbc>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <HAL_DMA_Init+0xbe>
 800387c:	2300      	movs	r3, #0
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 813b 	beq.w	8003afa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a37      	ldr	r2, [pc, #220]	@ (8003978 <HAL_DMA_Init+0x1b8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d04a      	beq.n	8003934 <HAL_DMA_Init+0x174>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a36      	ldr	r2, [pc, #216]	@ (800397c <HAL_DMA_Init+0x1bc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d045      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a34      	ldr	r2, [pc, #208]	@ (8003980 <HAL_DMA_Init+0x1c0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d040      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a33      	ldr	r2, [pc, #204]	@ (8003984 <HAL_DMA_Init+0x1c4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d03b      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a31      	ldr	r2, [pc, #196]	@ (8003988 <HAL_DMA_Init+0x1c8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d036      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a30      	ldr	r2, [pc, #192]	@ (800398c <HAL_DMA_Init+0x1cc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d031      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003990 <HAL_DMA_Init+0x1d0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02c      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2d      	ldr	r2, [pc, #180]	@ (8003994 <HAL_DMA_Init+0x1d4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d027      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003998 <HAL_DMA_Init+0x1d8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d022      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2a      	ldr	r2, [pc, #168]	@ (800399c <HAL_DMA_Init+0x1dc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d01d      	beq.n	8003934 <HAL_DMA_Init+0x174>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a28      	ldr	r2, [pc, #160]	@ (80039a0 <HAL_DMA_Init+0x1e0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d018      	beq.n	8003934 <HAL_DMA_Init+0x174>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	@ (80039a4 <HAL_DMA_Init+0x1e4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_DMA_Init+0x174>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a25      	ldr	r2, [pc, #148]	@ (80039a8 <HAL_DMA_Init+0x1e8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_DMA_Init+0x174>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a24      	ldr	r2, [pc, #144]	@ (80039ac <HAL_DMA_Init+0x1ec>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_DMA_Init+0x174>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a22      	ldr	r2, [pc, #136]	@ (80039b0 <HAL_DMA_Init+0x1f0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_DMA_Init+0x174>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a21      	ldr	r2, [pc, #132]	@ (80039b4 <HAL_DMA_Init+0x1f4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <HAL_DMA_Init+0x186>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e007      	b.n	8003956 <HAL_DMA_Init+0x196>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003956:	e02f      	b.n	80039b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003958:	f7fe fb44 	bl	8001fe4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b05      	cmp	r3, #5
 8003964:	d928      	bls.n	80039b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2203      	movs	r2, #3
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e246      	b.n	8003e06 <HAL_DMA_Init+0x646>
 8003978:	40020010 	.word	0x40020010
 800397c:	40020028 	.word	0x40020028
 8003980:	40020040 	.word	0x40020040
 8003984:	40020058 	.word	0x40020058
 8003988:	40020070 	.word	0x40020070
 800398c:	40020088 	.word	0x40020088
 8003990:	400200a0 	.word	0x400200a0
 8003994:	400200b8 	.word	0x400200b8
 8003998:	40020410 	.word	0x40020410
 800399c:	40020428 	.word	0x40020428
 80039a0:	40020440 	.word	0x40020440
 80039a4:	40020458 	.word	0x40020458
 80039a8:	40020470 	.word	0x40020470
 80039ac:	40020488 	.word	0x40020488
 80039b0:	400204a0 	.word	0x400204a0
 80039b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1c8      	bne.n	8003958 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4b83      	ldr	r3, [pc, #524]	@ (8003be0 <HAL_DMA_Init+0x420>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d107      	bne.n	8003a1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	4313      	orrs	r3, r2
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a1c:	4b71      	ldr	r3, [pc, #452]	@ (8003be4 <HAL_DMA_Init+0x424>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b71      	ldr	r3, [pc, #452]	@ (8003be8 <HAL_DMA_Init+0x428>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a28:	d328      	bcc.n	8003a7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b28      	cmp	r3, #40	@ 0x28
 8003a30:	d903      	bls.n	8003a3a <HAL_DMA_Init+0x27a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a38:	d917      	bls.n	8003a6a <HAL_DMA_Init+0x2aa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a40:	d903      	bls.n	8003a4a <HAL_DMA_Init+0x28a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b42      	cmp	r3, #66	@ 0x42
 8003a48:	d90f      	bls.n	8003a6a <HAL_DMA_Init+0x2aa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b46      	cmp	r3, #70	@ 0x46
 8003a50:	d903      	bls.n	8003a5a <HAL_DMA_Init+0x29a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b48      	cmp	r3, #72	@ 0x48
 8003a58:	d907      	bls.n	8003a6a <HAL_DMA_Init+0x2aa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a60:	d905      	bls.n	8003a6e <HAL_DMA_Init+0x2ae>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b52      	cmp	r3, #82	@ 0x52
 8003a68:	d801      	bhi.n	8003a6e <HAL_DMA_Init+0x2ae>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_DMA_Init+0x2b0>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d117      	bne.n	8003ad6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f002 fb33 	bl	8006124 <DMA_CheckFifoParam>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2240      	movs	r2, #64	@ 0x40
 8003ac8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e197      	b.n	8003e06 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f002 fa6e 	bl	8005fc0 <DMA_CalcBaseAndBitshift>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	223f      	movs	r2, #63	@ 0x3f
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	e0cd      	b.n	8003c96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a3b      	ldr	r2, [pc, #236]	@ (8003bec <HAL_DMA_Init+0x42c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_Init+0x38a>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a39      	ldr	r2, [pc, #228]	@ (8003bf0 <HAL_DMA_Init+0x430>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01d      	beq.n	8003b4a <HAL_DMA_Init+0x38a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a38      	ldr	r2, [pc, #224]	@ (8003bf4 <HAL_DMA_Init+0x434>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d018      	beq.n	8003b4a <HAL_DMA_Init+0x38a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a36      	ldr	r2, [pc, #216]	@ (8003bf8 <HAL_DMA_Init+0x438>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_DMA_Init+0x38a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a35      	ldr	r2, [pc, #212]	@ (8003bfc <HAL_DMA_Init+0x43c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00e      	beq.n	8003b4a <HAL_DMA_Init+0x38a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a33      	ldr	r2, [pc, #204]	@ (8003c00 <HAL_DMA_Init+0x440>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_DMA_Init+0x38a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a32      	ldr	r2, [pc, #200]	@ (8003c04 <HAL_DMA_Init+0x444>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d004      	beq.n	8003b4a <HAL_DMA_Init+0x38a>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a30      	ldr	r2, [pc, #192]	@ (8003c08 <HAL_DMA_Init+0x448>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_DMA_Init+0x38e>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_DMA_Init+0x390>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8097 	beq.w	8003c84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a24      	ldr	r2, [pc, #144]	@ (8003bec <HAL_DMA_Init+0x42c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d021      	beq.n	8003ba4 <HAL_DMA_Init+0x3e4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <HAL_DMA_Init+0x430>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01c      	beq.n	8003ba4 <HAL_DMA_Init+0x3e4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <HAL_DMA_Init+0x434>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d017      	beq.n	8003ba4 <HAL_DMA_Init+0x3e4>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_DMA_Init+0x438>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d012      	beq.n	8003ba4 <HAL_DMA_Init+0x3e4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1e      	ldr	r2, [pc, #120]	@ (8003bfc <HAL_DMA_Init+0x43c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00d      	beq.n	8003ba4 <HAL_DMA_Init+0x3e4>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <HAL_DMA_Init+0x440>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d008      	beq.n	8003ba4 <HAL_DMA_Init+0x3e4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1b      	ldr	r2, [pc, #108]	@ (8003c04 <HAL_DMA_Init+0x444>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <HAL_DMA_Init+0x3e4>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a19      	ldr	r2, [pc, #100]	@ (8003c08 <HAL_DMA_Init+0x448>)
 8003ba2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4b13      	ldr	r3, [pc, #76]	@ (8003c0c <HAL_DMA_Init+0x44c>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b40      	cmp	r3, #64	@ 0x40
 8003bca:	d021      	beq.n	8003c10 <HAL_DMA_Init+0x450>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b80      	cmp	r3, #128	@ 0x80
 8003bd2:	d102      	bne.n	8003bda <HAL_DMA_Init+0x41a>
 8003bd4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bd8:	e01b      	b.n	8003c12 <HAL_DMA_Init+0x452>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e019      	b.n	8003c12 <HAL_DMA_Init+0x452>
 8003bde:	bf00      	nop
 8003be0:	fe10803f 	.word	0xfe10803f
 8003be4:	5c001000 	.word	0x5c001000
 8003be8:	ffff0000 	.word	0xffff0000
 8003bec:	58025408 	.word	0x58025408
 8003bf0:	5802541c 	.word	0x5802541c
 8003bf4:	58025430 	.word	0x58025430
 8003bf8:	58025444 	.word	0x58025444
 8003bfc:	58025458 	.word	0x58025458
 8003c00:	5802546c 	.word	0x5802546c
 8003c04:	58025480 	.word	0x58025480
 8003c08:	58025494 	.word	0x58025494
 8003c0c:	fffe000f 	.word	0xfffe000f
 8003c10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68d2      	ldr	r2, [r2, #12]
 8003c16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b6e      	ldr	r3, [pc, #440]	@ (8003e10 <HAL_DMA_Init+0x650>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e14 <HAL_DMA_Init+0x654>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	009a      	lsls	r2, r3, #2
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f002 f9a9 	bl	8005fc0 <DMA_CalcBaseAndBitshift>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	e008      	b.n	8003c96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2240      	movs	r2, #64	@ 0x40
 8003c88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0b7      	b.n	8003e06 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8003e18 <HAL_DMA_Init+0x658>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d072      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e1c <HAL_DMA_Init+0x65c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d06d      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5c      	ldr	r2, [pc, #368]	@ (8003e20 <HAL_DMA_Init+0x660>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d068      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e24 <HAL_DMA_Init+0x664>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d063      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a59      	ldr	r2, [pc, #356]	@ (8003e28 <HAL_DMA_Init+0x668>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d05e      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a57      	ldr	r2, [pc, #348]	@ (8003e2c <HAL_DMA_Init+0x66c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d059      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a56      	ldr	r2, [pc, #344]	@ (8003e30 <HAL_DMA_Init+0x670>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d054      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a54      	ldr	r2, [pc, #336]	@ (8003e34 <HAL_DMA_Init+0x674>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d04f      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a53      	ldr	r2, [pc, #332]	@ (8003e38 <HAL_DMA_Init+0x678>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d04a      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a51      	ldr	r2, [pc, #324]	@ (8003e3c <HAL_DMA_Init+0x67c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d045      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a50      	ldr	r2, [pc, #320]	@ (8003e40 <HAL_DMA_Init+0x680>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d040      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a4e      	ldr	r2, [pc, #312]	@ (8003e44 <HAL_DMA_Init+0x684>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d03b      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a4d      	ldr	r2, [pc, #308]	@ (8003e48 <HAL_DMA_Init+0x688>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d036      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e4c <HAL_DMA_Init+0x68c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d031      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4a      	ldr	r2, [pc, #296]	@ (8003e50 <HAL_DMA_Init+0x690>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d02c      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a48      	ldr	r2, [pc, #288]	@ (8003e54 <HAL_DMA_Init+0x694>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d027      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a47      	ldr	r2, [pc, #284]	@ (8003e58 <HAL_DMA_Init+0x698>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d022      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a45      	ldr	r2, [pc, #276]	@ (8003e5c <HAL_DMA_Init+0x69c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01d      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a44      	ldr	r2, [pc, #272]	@ (8003e60 <HAL_DMA_Init+0x6a0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d018      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a42      	ldr	r2, [pc, #264]	@ (8003e64 <HAL_DMA_Init+0x6a4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a41      	ldr	r2, [pc, #260]	@ (8003e68 <HAL_DMA_Init+0x6a8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e6c <HAL_DMA_Init+0x6ac>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a3e      	ldr	r2, [pc, #248]	@ (8003e70 <HAL_DMA_Init+0x6b0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_DMA_Init+0x5c6>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a3c      	ldr	r2, [pc, #240]	@ (8003e74 <HAL_DMA_Init+0x6b4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <HAL_DMA_Init+0x5ca>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_DMA_Init+0x5cc>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d032      	beq.n	8003df6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f002 fa43 	bl	800621c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b80      	cmp	r3, #128	@ 0x80
 8003d9c:	d102      	bne.n	8003da4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003db8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_DMA_Init+0x624>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d80c      	bhi.n	8003de4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f002 fac0 	bl	8006350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	e008      	b.n	8003df6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	a7fdabf8 	.word	0xa7fdabf8
 8003e14:	cccccccd 	.word	0xcccccccd
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	40020040 	.word	0x40020040
 8003e24:	40020058 	.word	0x40020058
 8003e28:	40020070 	.word	0x40020070
 8003e2c:	40020088 	.word	0x40020088
 8003e30:	400200a0 	.word	0x400200a0
 8003e34:	400200b8 	.word	0x400200b8
 8003e38:	40020410 	.word	0x40020410
 8003e3c:	40020428 	.word	0x40020428
 8003e40:	40020440 	.word	0x40020440
 8003e44:	40020458 	.word	0x40020458
 8003e48:	40020470 	.word	0x40020470
 8003e4c:	40020488 	.word	0x40020488
 8003e50:	400204a0 	.word	0x400204a0
 8003e54:	400204b8 	.word	0x400204b8
 8003e58:	58025408 	.word	0x58025408
 8003e5c:	5802541c 	.word	0x5802541c
 8003e60:	58025430 	.word	0x58025430
 8003e64:	58025444 	.word	0x58025444
 8003e68:	58025458 	.word	0x58025458
 8003e6c:	5802546c 	.word	0x5802546c
 8003e70:	58025480 	.word	0x58025480
 8003e74:	58025494 	.word	0x58025494

08003e78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e226      	b.n	80042e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DMA_Start_IT+0x2a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e21f      	b.n	80042e2 <HAL_DMA_Start_IT+0x46a>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	f040 820a 	bne.w	80042cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a68      	ldr	r2, [pc, #416]	@ (800406c <HAL_DMA_Start_IT+0x1f4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d04a      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a66      	ldr	r2, [pc, #408]	@ (8004070 <HAL_DMA_Start_IT+0x1f8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d045      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a65      	ldr	r2, [pc, #404]	@ (8004074 <HAL_DMA_Start_IT+0x1fc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d040      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a63      	ldr	r2, [pc, #396]	@ (8004078 <HAL_DMA_Start_IT+0x200>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d03b      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a62      	ldr	r2, [pc, #392]	@ (800407c <HAL_DMA_Start_IT+0x204>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d036      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a60      	ldr	r2, [pc, #384]	@ (8004080 <HAL_DMA_Start_IT+0x208>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d031      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a5f      	ldr	r2, [pc, #380]	@ (8004084 <HAL_DMA_Start_IT+0x20c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d02c      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5d      	ldr	r2, [pc, #372]	@ (8004088 <HAL_DMA_Start_IT+0x210>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d027      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5c      	ldr	r2, [pc, #368]	@ (800408c <HAL_DMA_Start_IT+0x214>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d022      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a5a      	ldr	r2, [pc, #360]	@ (8004090 <HAL_DMA_Start_IT+0x218>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01d      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a59      	ldr	r2, [pc, #356]	@ (8004094 <HAL_DMA_Start_IT+0x21c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a57      	ldr	r2, [pc, #348]	@ (8004098 <HAL_DMA_Start_IT+0x220>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a56      	ldr	r2, [pc, #344]	@ (800409c <HAL_DMA_Start_IT+0x224>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a54      	ldr	r2, [pc, #336]	@ (80040a0 <HAL_DMA_Start_IT+0x228>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a53      	ldr	r2, [pc, #332]	@ (80040a4 <HAL_DMA_Start_IT+0x22c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <HAL_DMA_Start_IT+0xee>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a51      	ldr	r2, [pc, #324]	@ (80040a8 <HAL_DMA_Start_IT+0x230>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <HAL_DMA_Start_IT+0x100>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e007      	b.n	8003f88 <HAL_DMA_Start_IT+0x110>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f001 fe6a 	bl	8005c68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a34      	ldr	r2, [pc, #208]	@ (800406c <HAL_DMA_Start_IT+0x1f4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d04a      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a33      	ldr	r2, [pc, #204]	@ (8004070 <HAL_DMA_Start_IT+0x1f8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d045      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a31      	ldr	r2, [pc, #196]	@ (8004074 <HAL_DMA_Start_IT+0x1fc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d040      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a30      	ldr	r2, [pc, #192]	@ (8004078 <HAL_DMA_Start_IT+0x200>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d03b      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800407c <HAL_DMA_Start_IT+0x204>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d036      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2d      	ldr	r2, [pc, #180]	@ (8004080 <HAL_DMA_Start_IT+0x208>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d031      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004084 <HAL_DMA_Start_IT+0x20c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02c      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2a      	ldr	r2, [pc, #168]	@ (8004088 <HAL_DMA_Start_IT+0x210>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d027      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a28      	ldr	r2, [pc, #160]	@ (800408c <HAL_DMA_Start_IT+0x214>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d022      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a27      	ldr	r2, [pc, #156]	@ (8004090 <HAL_DMA_Start_IT+0x218>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d01d      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a25      	ldr	r2, [pc, #148]	@ (8004094 <HAL_DMA_Start_IT+0x21c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d018      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a24      	ldr	r2, [pc, #144]	@ (8004098 <HAL_DMA_Start_IT+0x220>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a22      	ldr	r2, [pc, #136]	@ (800409c <HAL_DMA_Start_IT+0x224>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a21      	ldr	r2, [pc, #132]	@ (80040a0 <HAL_DMA_Start_IT+0x228>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1f      	ldr	r2, [pc, #124]	@ (80040a4 <HAL_DMA_Start_IT+0x22c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_DMA_Start_IT+0x1bc>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1e      	ldr	r2, [pc, #120]	@ (80040a8 <HAL_DMA_Start_IT+0x230>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_DMA_Start_IT+0x1c0>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_DMA_Start_IT+0x1c2>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d036      	beq.n	80040ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 021e 	bic.w	r2, r3, #30
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0216 	orr.w	r2, r2, #22
 8004050:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d03e      	beq.n	80040d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0208 	orr.w	r2, r2, #8
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e035      	b.n	80040d8 <HAL_DMA_Start_IT+0x260>
 800406c:	40020010 	.word	0x40020010
 8004070:	40020028 	.word	0x40020028
 8004074:	40020040 	.word	0x40020040
 8004078:	40020058 	.word	0x40020058
 800407c:	40020070 	.word	0x40020070
 8004080:	40020088 	.word	0x40020088
 8004084:	400200a0 	.word	0x400200a0
 8004088:	400200b8 	.word	0x400200b8
 800408c:	40020410 	.word	0x40020410
 8004090:	40020428 	.word	0x40020428
 8004094:	40020440 	.word	0x40020440
 8004098:	40020458 	.word	0x40020458
 800409c:	40020470 	.word	0x40020470
 80040a0:	40020488 	.word	0x40020488
 80040a4:	400204a0 	.word	0x400204a0
 80040a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 020e 	bic.w	r2, r3, #14
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 020a 	orr.w	r2, r2, #10
 80040be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0204 	orr.w	r2, r2, #4
 80040d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a83      	ldr	r2, [pc, #524]	@ (80042ec <HAL_DMA_Start_IT+0x474>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d072      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a82      	ldr	r2, [pc, #520]	@ (80042f0 <HAL_DMA_Start_IT+0x478>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d06d      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a80      	ldr	r2, [pc, #512]	@ (80042f4 <HAL_DMA_Start_IT+0x47c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d068      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a7f      	ldr	r2, [pc, #508]	@ (80042f8 <HAL_DMA_Start_IT+0x480>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d063      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a7d      	ldr	r2, [pc, #500]	@ (80042fc <HAL_DMA_Start_IT+0x484>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d05e      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7c      	ldr	r2, [pc, #496]	@ (8004300 <HAL_DMA_Start_IT+0x488>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d059      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a7a      	ldr	r2, [pc, #488]	@ (8004304 <HAL_DMA_Start_IT+0x48c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d054      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a79      	ldr	r2, [pc, #484]	@ (8004308 <HAL_DMA_Start_IT+0x490>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d04f      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a77      	ldr	r2, [pc, #476]	@ (800430c <HAL_DMA_Start_IT+0x494>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d04a      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a76      	ldr	r2, [pc, #472]	@ (8004310 <HAL_DMA_Start_IT+0x498>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d045      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a74      	ldr	r2, [pc, #464]	@ (8004314 <HAL_DMA_Start_IT+0x49c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d040      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a73      	ldr	r2, [pc, #460]	@ (8004318 <HAL_DMA_Start_IT+0x4a0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d03b      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a71      	ldr	r2, [pc, #452]	@ (800431c <HAL_DMA_Start_IT+0x4a4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d036      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a70      	ldr	r2, [pc, #448]	@ (8004320 <HAL_DMA_Start_IT+0x4a8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d031      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a6e      	ldr	r2, [pc, #440]	@ (8004324 <HAL_DMA_Start_IT+0x4ac>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02c      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a6d      	ldr	r2, [pc, #436]	@ (8004328 <HAL_DMA_Start_IT+0x4b0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d027      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6b      	ldr	r2, [pc, #428]	@ (800432c <HAL_DMA_Start_IT+0x4b4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d022      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6a      	ldr	r2, [pc, #424]	@ (8004330 <HAL_DMA_Start_IT+0x4b8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01d      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a68      	ldr	r2, [pc, #416]	@ (8004334 <HAL_DMA_Start_IT+0x4bc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a67      	ldr	r2, [pc, #412]	@ (8004338 <HAL_DMA_Start_IT+0x4c0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a65      	ldr	r2, [pc, #404]	@ (800433c <HAL_DMA_Start_IT+0x4c4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a64      	ldr	r2, [pc, #400]	@ (8004340 <HAL_DMA_Start_IT+0x4c8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a62      	ldr	r2, [pc, #392]	@ (8004344 <HAL_DMA_Start_IT+0x4cc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_DMA_Start_IT+0x350>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a61      	ldr	r2, [pc, #388]	@ (8004348 <HAL_DMA_Start_IT+0x4d0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <HAL_DMA_Start_IT+0x354>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_DMA_Start_IT+0x356>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01a      	beq.n	8004208 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004206:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a37      	ldr	r2, [pc, #220]	@ (80042ec <HAL_DMA_Start_IT+0x474>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d04a      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a36      	ldr	r2, [pc, #216]	@ (80042f0 <HAL_DMA_Start_IT+0x478>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d045      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a34      	ldr	r2, [pc, #208]	@ (80042f4 <HAL_DMA_Start_IT+0x47c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d040      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a33      	ldr	r2, [pc, #204]	@ (80042f8 <HAL_DMA_Start_IT+0x480>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d03b      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a31      	ldr	r2, [pc, #196]	@ (80042fc <HAL_DMA_Start_IT+0x484>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d036      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a30      	ldr	r2, [pc, #192]	@ (8004300 <HAL_DMA_Start_IT+0x488>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d031      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2e      	ldr	r2, [pc, #184]	@ (8004304 <HAL_DMA_Start_IT+0x48c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d02c      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2d      	ldr	r2, [pc, #180]	@ (8004308 <HAL_DMA_Start_IT+0x490>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d027      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2b      	ldr	r2, [pc, #172]	@ (800430c <HAL_DMA_Start_IT+0x494>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d022      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2a      	ldr	r2, [pc, #168]	@ (8004310 <HAL_DMA_Start_IT+0x498>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d01d      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a28      	ldr	r2, [pc, #160]	@ (8004314 <HAL_DMA_Start_IT+0x49c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d018      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a27      	ldr	r2, [pc, #156]	@ (8004318 <HAL_DMA_Start_IT+0x4a0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a25      	ldr	r2, [pc, #148]	@ (800431c <HAL_DMA_Start_IT+0x4a4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00e      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a24      	ldr	r2, [pc, #144]	@ (8004320 <HAL_DMA_Start_IT+0x4a8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a22      	ldr	r2, [pc, #136]	@ (8004324 <HAL_DMA_Start_IT+0x4ac>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_DMA_Start_IT+0x430>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	@ (8004328 <HAL_DMA_Start_IT+0x4b0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d108      	bne.n	80042ba <HAL_DMA_Start_IT+0x442>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e012      	b.n	80042e0 <HAL_DMA_Start_IT+0x468>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e009      	b.n	80042e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40020010 	.word	0x40020010
 80042f0:	40020028 	.word	0x40020028
 80042f4:	40020040 	.word	0x40020040
 80042f8:	40020058 	.word	0x40020058
 80042fc:	40020070 	.word	0x40020070
 8004300:	40020088 	.word	0x40020088
 8004304:	400200a0 	.word	0x400200a0
 8004308:	400200b8 	.word	0x400200b8
 800430c:	40020410 	.word	0x40020410
 8004310:	40020428 	.word	0x40020428
 8004314:	40020440 	.word	0x40020440
 8004318:	40020458 	.word	0x40020458
 800431c:	40020470 	.word	0x40020470
 8004320:	40020488 	.word	0x40020488
 8004324:	400204a0 	.word	0x400204a0
 8004328:	400204b8 	.word	0x400204b8
 800432c:	58025408 	.word	0x58025408
 8004330:	5802541c 	.word	0x5802541c
 8004334:	58025430 	.word	0x58025430
 8004338:	58025444 	.word	0x58025444
 800433c:	58025458 	.word	0x58025458
 8004340:	5802546c 	.word	0x5802546c
 8004344:	58025480 	.word	0x58025480
 8004348:	58025494 	.word	0x58025494

0800434c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004354:	f7fd fe46 	bl	8001fe4 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e2dc      	b.n	800491e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d008      	beq.n	8004382 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2280      	movs	r2, #128	@ 0x80
 8004374:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e2cd      	b.n	800491e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a76      	ldr	r2, [pc, #472]	@ (8004560 <HAL_DMA_Abort+0x214>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04a      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a74      	ldr	r2, [pc, #464]	@ (8004564 <HAL_DMA_Abort+0x218>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d045      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a73      	ldr	r2, [pc, #460]	@ (8004568 <HAL_DMA_Abort+0x21c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d040      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a71      	ldr	r2, [pc, #452]	@ (800456c <HAL_DMA_Abort+0x220>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d03b      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a70      	ldr	r2, [pc, #448]	@ (8004570 <HAL_DMA_Abort+0x224>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d036      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004574 <HAL_DMA_Abort+0x228>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d031      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004578 <HAL_DMA_Abort+0x22c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d02c      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6b      	ldr	r2, [pc, #428]	@ (800457c <HAL_DMA_Abort+0x230>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d027      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004580 <HAL_DMA_Abort+0x234>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d022      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a68      	ldr	r2, [pc, #416]	@ (8004584 <HAL_DMA_Abort+0x238>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01d      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a67      	ldr	r2, [pc, #412]	@ (8004588 <HAL_DMA_Abort+0x23c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a65      	ldr	r2, [pc, #404]	@ (800458c <HAL_DMA_Abort+0x240>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a64      	ldr	r2, [pc, #400]	@ (8004590 <HAL_DMA_Abort+0x244>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a62      	ldr	r2, [pc, #392]	@ (8004594 <HAL_DMA_Abort+0x248>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a61      	ldr	r2, [pc, #388]	@ (8004598 <HAL_DMA_Abort+0x24c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_DMA_Abort+0xd6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a5f      	ldr	r2, [pc, #380]	@ (800459c <HAL_DMA_Abort+0x250>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <HAL_DMA_Abort+0xda>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_DMA_Abort+0xdc>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 021e 	bic.w	r2, r2, #30
 800443a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800444a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e00a      	b.n	800446a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 020e 	bic.w	r2, r2, #14
 8004462:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3c      	ldr	r2, [pc, #240]	@ (8004560 <HAL_DMA_Abort+0x214>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d072      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3a      	ldr	r2, [pc, #232]	@ (8004564 <HAL_DMA_Abort+0x218>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d06d      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a39      	ldr	r2, [pc, #228]	@ (8004568 <HAL_DMA_Abort+0x21c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d068      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a37      	ldr	r2, [pc, #220]	@ (800456c <HAL_DMA_Abort+0x220>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d063      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a36      	ldr	r2, [pc, #216]	@ (8004570 <HAL_DMA_Abort+0x224>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d05e      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a34      	ldr	r2, [pc, #208]	@ (8004574 <HAL_DMA_Abort+0x228>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d059      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a33      	ldr	r2, [pc, #204]	@ (8004578 <HAL_DMA_Abort+0x22c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d054      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a31      	ldr	r2, [pc, #196]	@ (800457c <HAL_DMA_Abort+0x230>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d04f      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <HAL_DMA_Abort+0x234>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d04a      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004584 <HAL_DMA_Abort+0x238>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d045      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004588 <HAL_DMA_Abort+0x23c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d040      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2b      	ldr	r2, [pc, #172]	@ (800458c <HAL_DMA_Abort+0x240>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d03b      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004590 <HAL_DMA_Abort+0x244>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d036      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a28      	ldr	r2, [pc, #160]	@ (8004594 <HAL_DMA_Abort+0x248>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d031      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <HAL_DMA_Abort+0x24c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d02c      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a25      	ldr	r2, [pc, #148]	@ (800459c <HAL_DMA_Abort+0x250>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d027      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a24      	ldr	r2, [pc, #144]	@ (80045a0 <HAL_DMA_Abort+0x254>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a22      	ldr	r2, [pc, #136]	@ (80045a4 <HAL_DMA_Abort+0x258>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01d      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a21      	ldr	r2, [pc, #132]	@ (80045a8 <HAL_DMA_Abort+0x25c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d018      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ac <HAL_DMA_Abort+0x260>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1e      	ldr	r2, [pc, #120]	@ (80045b0 <HAL_DMA_Abort+0x264>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1c      	ldr	r2, [pc, #112]	@ (80045b4 <HAL_DMA_Abort+0x268>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1b      	ldr	r2, [pc, #108]	@ (80045b8 <HAL_DMA_Abort+0x26c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_DMA_Abort+0x20e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a19      	ldr	r2, [pc, #100]	@ (80045bc <HAL_DMA_Abort+0x270>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d132      	bne.n	80045c0 <HAL_DMA_Abort+0x274>
 800455a:	2301      	movs	r3, #1
 800455c:	e031      	b.n	80045c2 <HAL_DMA_Abort+0x276>
 800455e:	bf00      	nop
 8004560:	40020010 	.word	0x40020010
 8004564:	40020028 	.word	0x40020028
 8004568:	40020040 	.word	0x40020040
 800456c:	40020058 	.word	0x40020058
 8004570:	40020070 	.word	0x40020070
 8004574:	40020088 	.word	0x40020088
 8004578:	400200a0 	.word	0x400200a0
 800457c:	400200b8 	.word	0x400200b8
 8004580:	40020410 	.word	0x40020410
 8004584:	40020428 	.word	0x40020428
 8004588:	40020440 	.word	0x40020440
 800458c:	40020458 	.word	0x40020458
 8004590:	40020470 	.word	0x40020470
 8004594:	40020488 	.word	0x40020488
 8004598:	400204a0 	.word	0x400204a0
 800459c:	400204b8 	.word	0x400204b8
 80045a0:	58025408 	.word	0x58025408
 80045a4:	5802541c 	.word	0x5802541c
 80045a8:	58025430 	.word	0x58025430
 80045ac:	58025444 	.word	0x58025444
 80045b0:	58025458 	.word	0x58025458
 80045b4:	5802546c 	.word	0x5802546c
 80045b8:	58025480 	.word	0x58025480
 80045bc:	58025494 	.word	0x58025494
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6d      	ldr	r2, [pc, #436]	@ (8004790 <HAL_DMA_Abort+0x444>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d04a      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004794 <HAL_DMA_Abort+0x448>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d045      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6a      	ldr	r2, [pc, #424]	@ (8004798 <HAL_DMA_Abort+0x44c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d040      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a68      	ldr	r2, [pc, #416]	@ (800479c <HAL_DMA_Abort+0x450>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d03b      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a67      	ldr	r2, [pc, #412]	@ (80047a0 <HAL_DMA_Abort+0x454>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d036      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a65      	ldr	r2, [pc, #404]	@ (80047a4 <HAL_DMA_Abort+0x458>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d031      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a64      	ldr	r2, [pc, #400]	@ (80047a8 <HAL_DMA_Abort+0x45c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d02c      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a62      	ldr	r2, [pc, #392]	@ (80047ac <HAL_DMA_Abort+0x460>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d027      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a61      	ldr	r2, [pc, #388]	@ (80047b0 <HAL_DMA_Abort+0x464>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d022      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a5f      	ldr	r2, [pc, #380]	@ (80047b4 <HAL_DMA_Abort+0x468>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01d      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5e      	ldr	r2, [pc, #376]	@ (80047b8 <HAL_DMA_Abort+0x46c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d018      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a5c      	ldr	r2, [pc, #368]	@ (80047bc <HAL_DMA_Abort+0x470>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a5b      	ldr	r2, [pc, #364]	@ (80047c0 <HAL_DMA_Abort+0x474>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a59      	ldr	r2, [pc, #356]	@ (80047c4 <HAL_DMA_Abort+0x478>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a58      	ldr	r2, [pc, #352]	@ (80047c8 <HAL_DMA_Abort+0x47c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_DMA_Abort+0x32a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a56      	ldr	r2, [pc, #344]	@ (80047cc <HAL_DMA_Abort+0x480>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d108      	bne.n	8004688 <HAL_DMA_Abort+0x33c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e007      	b.n	8004698 <HAL_DMA_Abort+0x34c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004698:	e013      	b.n	80046c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800469a:	f7fd fca3 	bl	8001fe4 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b05      	cmp	r3, #5
 80046a6:	d90c      	bls.n	80046c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2203      	movs	r2, #3
 80046b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e12d      	b.n	800491e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <HAL_DMA_Abort+0x444>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d04a      	beq.n	800476e <HAL_DMA_Abort+0x422>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004794 <HAL_DMA_Abort+0x448>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d045      	beq.n	800476e <HAL_DMA_Abort+0x422>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2c      	ldr	r2, [pc, #176]	@ (8004798 <HAL_DMA_Abort+0x44c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d040      	beq.n	800476e <HAL_DMA_Abort+0x422>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <HAL_DMA_Abort+0x450>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d03b      	beq.n	800476e <HAL_DMA_Abort+0x422>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a29      	ldr	r2, [pc, #164]	@ (80047a0 <HAL_DMA_Abort+0x454>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d036      	beq.n	800476e <HAL_DMA_Abort+0x422>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a27      	ldr	r2, [pc, #156]	@ (80047a4 <HAL_DMA_Abort+0x458>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d031      	beq.n	800476e <HAL_DMA_Abort+0x422>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a26      	ldr	r2, [pc, #152]	@ (80047a8 <HAL_DMA_Abort+0x45c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d02c      	beq.n	800476e <HAL_DMA_Abort+0x422>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a24      	ldr	r2, [pc, #144]	@ (80047ac <HAL_DMA_Abort+0x460>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d027      	beq.n	800476e <HAL_DMA_Abort+0x422>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a23      	ldr	r2, [pc, #140]	@ (80047b0 <HAL_DMA_Abort+0x464>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d022      	beq.n	800476e <HAL_DMA_Abort+0x422>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a21      	ldr	r2, [pc, #132]	@ (80047b4 <HAL_DMA_Abort+0x468>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01d      	beq.n	800476e <HAL_DMA_Abort+0x422>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a20      	ldr	r2, [pc, #128]	@ (80047b8 <HAL_DMA_Abort+0x46c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d018      	beq.n	800476e <HAL_DMA_Abort+0x422>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1e      	ldr	r2, [pc, #120]	@ (80047bc <HAL_DMA_Abort+0x470>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_DMA_Abort+0x422>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1d      	ldr	r2, [pc, #116]	@ (80047c0 <HAL_DMA_Abort+0x474>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_DMA_Abort+0x422>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1b      	ldr	r2, [pc, #108]	@ (80047c4 <HAL_DMA_Abort+0x478>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_DMA_Abort+0x422>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1a      	ldr	r2, [pc, #104]	@ (80047c8 <HAL_DMA_Abort+0x47c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_DMA_Abort+0x422>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <HAL_DMA_Abort+0x480>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_DMA_Abort+0x426>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <HAL_DMA_Abort+0x428>
 8004772:	2300      	movs	r3, #0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02b      	beq.n	80047d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	223f      	movs	r2, #63	@ 0x3f
 8004788:	409a      	lsls	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	e02a      	b.n	80047e6 <HAL_DMA_Abort+0x49a>
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2201      	movs	r2, #1
 80047e0:	409a      	lsls	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004928 <HAL_DMA_Abort+0x5dc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d072      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a4d      	ldr	r2, [pc, #308]	@ (800492c <HAL_DMA_Abort+0x5e0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d06d      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004930 <HAL_DMA_Abort+0x5e4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d068      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a4a      	ldr	r2, [pc, #296]	@ (8004934 <HAL_DMA_Abort+0x5e8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d063      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a49      	ldr	r2, [pc, #292]	@ (8004938 <HAL_DMA_Abort+0x5ec>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d05e      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a47      	ldr	r2, [pc, #284]	@ (800493c <HAL_DMA_Abort+0x5f0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d059      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a46      	ldr	r2, [pc, #280]	@ (8004940 <HAL_DMA_Abort+0x5f4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d054      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a44      	ldr	r2, [pc, #272]	@ (8004944 <HAL_DMA_Abort+0x5f8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d04f      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a43      	ldr	r2, [pc, #268]	@ (8004948 <HAL_DMA_Abort+0x5fc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d04a      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a41      	ldr	r2, [pc, #260]	@ (800494c <HAL_DMA_Abort+0x600>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d045      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a40      	ldr	r2, [pc, #256]	@ (8004950 <HAL_DMA_Abort+0x604>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d040      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3e      	ldr	r2, [pc, #248]	@ (8004954 <HAL_DMA_Abort+0x608>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d03b      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3d      	ldr	r2, [pc, #244]	@ (8004958 <HAL_DMA_Abort+0x60c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d036      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3b      	ldr	r2, [pc, #236]	@ (800495c <HAL_DMA_Abort+0x610>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d031      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a3a      	ldr	r2, [pc, #232]	@ (8004960 <HAL_DMA_Abort+0x614>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d02c      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a38      	ldr	r2, [pc, #224]	@ (8004964 <HAL_DMA_Abort+0x618>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d027      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a37      	ldr	r2, [pc, #220]	@ (8004968 <HAL_DMA_Abort+0x61c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a35      	ldr	r2, [pc, #212]	@ (800496c <HAL_DMA_Abort+0x620>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a34      	ldr	r2, [pc, #208]	@ (8004970 <HAL_DMA_Abort+0x624>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d018      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a32      	ldr	r2, [pc, #200]	@ (8004974 <HAL_DMA_Abort+0x628>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a31      	ldr	r2, [pc, #196]	@ (8004978 <HAL_DMA_Abort+0x62c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2f      	ldr	r2, [pc, #188]	@ (800497c <HAL_DMA_Abort+0x630>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004980 <HAL_DMA_Abort+0x634>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_DMA_Abort+0x58a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004984 <HAL_DMA_Abort+0x638>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_DMA_Abort+0x58e>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_DMA_Abort+0x590>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d015      	beq.n	800490c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004900:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800490a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40020010 	.word	0x40020010
 800492c:	40020028 	.word	0x40020028
 8004930:	40020040 	.word	0x40020040
 8004934:	40020058 	.word	0x40020058
 8004938:	40020070 	.word	0x40020070
 800493c:	40020088 	.word	0x40020088
 8004940:	400200a0 	.word	0x400200a0
 8004944:	400200b8 	.word	0x400200b8
 8004948:	40020410 	.word	0x40020410
 800494c:	40020428 	.word	0x40020428
 8004950:	40020440 	.word	0x40020440
 8004954:	40020458 	.word	0x40020458
 8004958:	40020470 	.word	0x40020470
 800495c:	40020488 	.word	0x40020488
 8004960:	400204a0 	.word	0x400204a0
 8004964:	400204b8 	.word	0x400204b8
 8004968:	58025408 	.word	0x58025408
 800496c:	5802541c 	.word	0x5802541c
 8004970:	58025430 	.word	0x58025430
 8004974:	58025444 	.word	0x58025444
 8004978:	58025458 	.word	0x58025458
 800497c:	5802546c 	.word	0x5802546c
 8004980:	58025480 	.word	0x58025480
 8004984:	58025494 	.word	0x58025494

08004988 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e237      	b.n	8004e0a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d004      	beq.n	80049b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2280      	movs	r2, #128	@ 0x80
 80049aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e22c      	b.n	8004e0a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a5c      	ldr	r2, [pc, #368]	@ (8004b28 <HAL_DMA_Abort_IT+0x1a0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d04a      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a5b      	ldr	r2, [pc, #364]	@ (8004b2c <HAL_DMA_Abort_IT+0x1a4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d045      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a59      	ldr	r2, [pc, #356]	@ (8004b30 <HAL_DMA_Abort_IT+0x1a8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d040      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a58      	ldr	r2, [pc, #352]	@ (8004b34 <HAL_DMA_Abort_IT+0x1ac>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d03b      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a56      	ldr	r2, [pc, #344]	@ (8004b38 <HAL_DMA_Abort_IT+0x1b0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d036      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a55      	ldr	r2, [pc, #340]	@ (8004b3c <HAL_DMA_Abort_IT+0x1b4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d031      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a53      	ldr	r2, [pc, #332]	@ (8004b40 <HAL_DMA_Abort_IT+0x1b8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02c      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a52      	ldr	r2, [pc, #328]	@ (8004b44 <HAL_DMA_Abort_IT+0x1bc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d027      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a50      	ldr	r2, [pc, #320]	@ (8004b48 <HAL_DMA_Abort_IT+0x1c0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b4c <HAL_DMA_Abort_IT+0x1c4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d01d      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a4d      	ldr	r2, [pc, #308]	@ (8004b50 <HAL_DMA_Abort_IT+0x1c8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a4c      	ldr	r2, [pc, #304]	@ (8004b54 <HAL_DMA_Abort_IT+0x1cc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b58 <HAL_DMA_Abort_IT+0x1d0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a49      	ldr	r2, [pc, #292]	@ (8004b5c <HAL_DMA_Abort_IT+0x1d4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a47      	ldr	r2, [pc, #284]	@ (8004b60 <HAL_DMA_Abort_IT+0x1d8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xc8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a46      	ldr	r2, [pc, #280]	@ (8004b64 <HAL_DMA_Abort_IT+0x1dc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d101      	bne.n	8004a54 <HAL_DMA_Abort_IT+0xcc>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <HAL_DMA_Abort_IT+0xce>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8086 	beq.w	8004b68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2f      	ldr	r2, [pc, #188]	@ (8004b28 <HAL_DMA_Abort_IT+0x1a0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d04a      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2e      	ldr	r2, [pc, #184]	@ (8004b2c <HAL_DMA_Abort_IT+0x1a4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d045      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b30 <HAL_DMA_Abort_IT+0x1a8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d040      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2b      	ldr	r2, [pc, #172]	@ (8004b34 <HAL_DMA_Abort_IT+0x1ac>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d03b      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a29      	ldr	r2, [pc, #164]	@ (8004b38 <HAL_DMA_Abort_IT+0x1b0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d036      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a28      	ldr	r2, [pc, #160]	@ (8004b3c <HAL_DMA_Abort_IT+0x1b4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d031      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a26      	ldr	r2, [pc, #152]	@ (8004b40 <HAL_DMA_Abort_IT+0x1b8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02c      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a25      	ldr	r2, [pc, #148]	@ (8004b44 <HAL_DMA_Abort_IT+0x1bc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d027      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a23      	ldr	r2, [pc, #140]	@ (8004b48 <HAL_DMA_Abort_IT+0x1c0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a22      	ldr	r2, [pc, #136]	@ (8004b4c <HAL_DMA_Abort_IT+0x1c4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01d      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a20      	ldr	r2, [pc, #128]	@ (8004b50 <HAL_DMA_Abort_IT+0x1c8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b54 <HAL_DMA_Abort_IT+0x1cc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b58 <HAL_DMA_Abort_IT+0x1d0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1c      	ldr	r2, [pc, #112]	@ (8004b5c <HAL_DMA_Abort_IT+0x1d4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b60 <HAL_DMA_Abort_IT+0x1d8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_DMA_Abort_IT+0x17c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a19      	ldr	r2, [pc, #100]	@ (8004b64 <HAL_DMA_Abort_IT+0x1dc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d108      	bne.n	8004b16 <HAL_DMA_Abort_IT+0x18e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e178      	b.n	8004e08 <HAL_DMA_Abort_IT+0x480>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e16f      	b.n	8004e08 <HAL_DMA_Abort_IT+0x480>
 8004b28:	40020010 	.word	0x40020010
 8004b2c:	40020028 	.word	0x40020028
 8004b30:	40020040 	.word	0x40020040
 8004b34:	40020058 	.word	0x40020058
 8004b38:	40020070 	.word	0x40020070
 8004b3c:	40020088 	.word	0x40020088
 8004b40:	400200a0 	.word	0x400200a0
 8004b44:	400200b8 	.word	0x400200b8
 8004b48:	40020410 	.word	0x40020410
 8004b4c:	40020428 	.word	0x40020428
 8004b50:	40020440 	.word	0x40020440
 8004b54:	40020458 	.word	0x40020458
 8004b58:	40020470 	.word	0x40020470
 8004b5c:	40020488 	.word	0x40020488
 8004b60:	400204a0 	.word	0x400204a0
 8004b64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 020e 	bic.w	r2, r2, #14
 8004b76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6c      	ldr	r2, [pc, #432]	@ (8004d30 <HAL_DMA_Abort_IT+0x3a8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d04a      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6b      	ldr	r2, [pc, #428]	@ (8004d34 <HAL_DMA_Abort_IT+0x3ac>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d045      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a69      	ldr	r2, [pc, #420]	@ (8004d38 <HAL_DMA_Abort_IT+0x3b0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d040      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a68      	ldr	r2, [pc, #416]	@ (8004d3c <HAL_DMA_Abort_IT+0x3b4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d03b      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a66      	ldr	r2, [pc, #408]	@ (8004d40 <HAL_DMA_Abort_IT+0x3b8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d036      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a65      	ldr	r2, [pc, #404]	@ (8004d44 <HAL_DMA_Abort_IT+0x3bc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d031      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a63      	ldr	r2, [pc, #396]	@ (8004d48 <HAL_DMA_Abort_IT+0x3c0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d02c      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a62      	ldr	r2, [pc, #392]	@ (8004d4c <HAL_DMA_Abort_IT+0x3c4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d027      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a60      	ldr	r2, [pc, #384]	@ (8004d50 <HAL_DMA_Abort_IT+0x3c8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d022      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a5f      	ldr	r2, [pc, #380]	@ (8004d54 <HAL_DMA_Abort_IT+0x3cc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d01d      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a5d      	ldr	r2, [pc, #372]	@ (8004d58 <HAL_DMA_Abort_IT+0x3d0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d018      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a5c      	ldr	r2, [pc, #368]	@ (8004d5c <HAL_DMA_Abort_IT+0x3d4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a5a      	ldr	r2, [pc, #360]	@ (8004d60 <HAL_DMA_Abort_IT+0x3d8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00e      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a59      	ldr	r2, [pc, #356]	@ (8004d64 <HAL_DMA_Abort_IT+0x3dc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a57      	ldr	r2, [pc, #348]	@ (8004d68 <HAL_DMA_Abort_IT+0x3e0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x290>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a56      	ldr	r2, [pc, #344]	@ (8004d6c <HAL_DMA_Abort_IT+0x3e4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d108      	bne.n	8004c2a <HAL_DMA_Abort_IT+0x2a2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e007      	b.n	8004c3a <HAL_DMA_Abort_IT+0x2b2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8004d30 <HAL_DMA_Abort_IT+0x3a8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d072      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3a      	ldr	r2, [pc, #232]	@ (8004d34 <HAL_DMA_Abort_IT+0x3ac>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d06d      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a39      	ldr	r2, [pc, #228]	@ (8004d38 <HAL_DMA_Abort_IT+0x3b0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d068      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a37      	ldr	r2, [pc, #220]	@ (8004d3c <HAL_DMA_Abort_IT+0x3b4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d063      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a36      	ldr	r2, [pc, #216]	@ (8004d40 <HAL_DMA_Abort_IT+0x3b8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d05e      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a34      	ldr	r2, [pc, #208]	@ (8004d44 <HAL_DMA_Abort_IT+0x3bc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d059      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a33      	ldr	r2, [pc, #204]	@ (8004d48 <HAL_DMA_Abort_IT+0x3c0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d054      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a31      	ldr	r2, [pc, #196]	@ (8004d4c <HAL_DMA_Abort_IT+0x3c4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d04f      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a30      	ldr	r2, [pc, #192]	@ (8004d50 <HAL_DMA_Abort_IT+0x3c8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d04a      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2e      	ldr	r2, [pc, #184]	@ (8004d54 <HAL_DMA_Abort_IT+0x3cc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d045      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8004d58 <HAL_DMA_Abort_IT+0x3d0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d040      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2b      	ldr	r2, [pc, #172]	@ (8004d5c <HAL_DMA_Abort_IT+0x3d4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d03b      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d60 <HAL_DMA_Abort_IT+0x3d8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d036      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a28      	ldr	r2, [pc, #160]	@ (8004d64 <HAL_DMA_Abort_IT+0x3dc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a27      	ldr	r2, [pc, #156]	@ (8004d68 <HAL_DMA_Abort_IT+0x3e0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d02c      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a25      	ldr	r2, [pc, #148]	@ (8004d6c <HAL_DMA_Abort_IT+0x3e4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d027      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a24      	ldr	r2, [pc, #144]	@ (8004d70 <HAL_DMA_Abort_IT+0x3e8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d022      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a22      	ldr	r2, [pc, #136]	@ (8004d74 <HAL_DMA_Abort_IT+0x3ec>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a21      	ldr	r2, [pc, #132]	@ (8004d78 <HAL_DMA_Abort_IT+0x3f0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d7c <HAL_DMA_Abort_IT+0x3f4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1e      	ldr	r2, [pc, #120]	@ (8004d80 <HAL_DMA_Abort_IT+0x3f8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1c      	ldr	r2, [pc, #112]	@ (8004d84 <HAL_DMA_Abort_IT+0x3fc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d88 <HAL_DMA_Abort_IT+0x400>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x3a2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a19      	ldr	r2, [pc, #100]	@ (8004d8c <HAL_DMA_Abort_IT+0x404>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d132      	bne.n	8004d90 <HAL_DMA_Abort_IT+0x408>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e031      	b.n	8004d92 <HAL_DMA_Abort_IT+0x40a>
 8004d2e:	bf00      	nop
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8
 8004d70:	58025408 	.word	0x58025408
 8004d74:	5802541c 	.word	0x5802541c
 8004d78:	58025430 	.word	0x58025430
 8004d7c:	58025444 	.word	0x58025444
 8004d80:	58025458 	.word	0x58025458
 8004d84:	5802546c 	.word	0x5802546c
 8004d88:	58025480 	.word	0x58025480
 8004d8c:	58025494 	.word	0x58025494
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d028      	beq.n	8004de8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004da4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	2201      	movs	r2, #1
 8004db6:	409a      	lsls	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004dc4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ddc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004de6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop

08004e14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	@ 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e20:	4b67      	ldr	r3, [pc, #412]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1ac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a67      	ldr	r2, [pc, #412]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1b0>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0a9b      	lsrs	r3, r3, #10
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1b4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d04a      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5d      	ldr	r2, [pc, #372]	@ (8004fcc <HAL_DMA_IRQHandler+0x1b8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d045      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a5c      	ldr	r2, [pc, #368]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1bc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d040      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a5a      	ldr	r2, [pc, #360]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1c0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d03b      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a59      	ldr	r2, [pc, #356]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1c4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d036      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a57      	ldr	r2, [pc, #348]	@ (8004fdc <HAL_DMA_IRQHandler+0x1c8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d031      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a56      	ldr	r2, [pc, #344]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1cc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d02c      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a54      	ldr	r2, [pc, #336]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1d0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d027      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a53      	ldr	r2, [pc, #332]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1d4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d022      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a51      	ldr	r2, [pc, #324]	@ (8004fec <HAL_DMA_IRQHandler+0x1d8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a50      	ldr	r2, [pc, #320]	@ (8004ff0 <HAL_DMA_IRQHandler+0x1dc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d018      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a4e      	ldr	r2, [pc, #312]	@ (8004ff4 <HAL_DMA_IRQHandler+0x1e0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a4d      	ldr	r2, [pc, #308]	@ (8004ff8 <HAL_DMA_IRQHandler+0x1e4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8004ffc <HAL_DMA_IRQHandler+0x1e8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a4a      	ldr	r2, [pc, #296]	@ (8005000 <HAL_DMA_IRQHandler+0x1ec>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xd2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a48      	ldr	r2, [pc, #288]	@ (8005004 <HAL_DMA_IRQHandler+0x1f0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA_IRQHandler+0xd6>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_DMA_IRQHandler+0xd8>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 842b 	beq.w	8005748 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2208      	movs	r2, #8
 8004efc:	409a      	lsls	r2, r3
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80a2 	beq.w	800504c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1b4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d04a      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2d      	ldr	r2, [pc, #180]	@ (8004fcc <HAL_DMA_IRQHandler+0x1b8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d045      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1bc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d040      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1c0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d03b      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a28      	ldr	r2, [pc, #160]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1c4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d036      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a27      	ldr	r2, [pc, #156]	@ (8004fdc <HAL_DMA_IRQHandler+0x1c8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d031      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a25      	ldr	r2, [pc, #148]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1cc>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02c      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a24      	ldr	r2, [pc, #144]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1d0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d027      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a22      	ldr	r2, [pc, #136]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1d4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a21      	ldr	r2, [pc, #132]	@ (8004fec <HAL_DMA_IRQHandler+0x1d8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff0 <HAL_DMA_IRQHandler+0x1dc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff4 <HAL_DMA_IRQHandler+0x1e0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff8 <HAL_DMA_IRQHandler+0x1e4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004ffc <HAL_DMA_IRQHandler+0x1e8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a19      	ldr	r2, [pc, #100]	@ (8005000 <HAL_DMA_IRQHandler+0x1ec>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x194>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a18      	ldr	r2, [pc, #96]	@ (8005004 <HAL_DMA_IRQHandler+0x1f0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d12f      	bne.n	8005008 <HAL_DMA_IRQHandler+0x1f4>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bf14      	ite	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	2300      	moveq	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	e02e      	b.n	800501c <HAL_DMA_IRQHandler+0x208>
 8004fbe:	bf00      	nop
 8004fc0:	24000000 	.word	0x24000000
 8004fc4:	1b4e81b5 	.word	0x1b4e81b5
 8004fc8:	40020010 	.word	0x40020010
 8004fcc:	40020028 	.word	0x40020028
 8004fd0:	40020040 	.word	0x40020040
 8004fd4:	40020058 	.word	0x40020058
 8004fd8:	40020070 	.word	0x40020070
 8004fdc:	40020088 	.word	0x40020088
 8004fe0:	400200a0 	.word	0x400200a0
 8004fe4:	400200b8 	.word	0x400200b8
 8004fe8:	40020410 	.word	0x40020410
 8004fec:	40020428 	.word	0x40020428
 8004ff0:	40020440 	.word	0x40020440
 8004ff4:	40020458 	.word	0x40020458
 8004ff8:	40020470 	.word	0x40020470
 8004ffc:	40020488 	.word	0x40020488
 8005000:	400204a0 	.word	0x400204a0
 8005004:	400204b8 	.word	0x400204b8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d015      	beq.n	800504c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	2208      	movs	r2, #8
 800503a:	409a      	lsls	r2, r3
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005044:	f043 0201 	orr.w	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	fa22 f303 	lsr.w	r3, r2, r3
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d06e      	beq.n	8005140 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a69      	ldr	r2, [pc, #420]	@ (800520c <HAL_DMA_IRQHandler+0x3f8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d04a      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a67      	ldr	r2, [pc, #412]	@ (8005210 <HAL_DMA_IRQHandler+0x3fc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d045      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a66      	ldr	r2, [pc, #408]	@ (8005214 <HAL_DMA_IRQHandler+0x400>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d040      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a64      	ldr	r2, [pc, #400]	@ (8005218 <HAL_DMA_IRQHandler+0x404>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d03b      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a63      	ldr	r2, [pc, #396]	@ (800521c <HAL_DMA_IRQHandler+0x408>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d036      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a61      	ldr	r2, [pc, #388]	@ (8005220 <HAL_DMA_IRQHandler+0x40c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d031      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a60      	ldr	r2, [pc, #384]	@ (8005224 <HAL_DMA_IRQHandler+0x410>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d02c      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005228 <HAL_DMA_IRQHandler+0x414>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d027      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a5d      	ldr	r2, [pc, #372]	@ (800522c <HAL_DMA_IRQHandler+0x418>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d022      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5b      	ldr	r2, [pc, #364]	@ (8005230 <HAL_DMA_IRQHandler+0x41c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01d      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a5a      	ldr	r2, [pc, #360]	@ (8005234 <HAL_DMA_IRQHandler+0x420>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d018      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a58      	ldr	r2, [pc, #352]	@ (8005238 <HAL_DMA_IRQHandler+0x424>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a57      	ldr	r2, [pc, #348]	@ (800523c <HAL_DMA_IRQHandler+0x428>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a55      	ldr	r2, [pc, #340]	@ (8005240 <HAL_DMA_IRQHandler+0x42c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a54      	ldr	r2, [pc, #336]	@ (8005244 <HAL_DMA_IRQHandler+0x430>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2ee>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a52      	ldr	r2, [pc, #328]	@ (8005248 <HAL_DMA_IRQHandler+0x434>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10a      	bne.n	8005118 <HAL_DMA_IRQHandler+0x304>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510c:	2b00      	cmp	r3, #0
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e003      	b.n	8005120 <HAL_DMA_IRQHandler+0x30c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00d      	beq.n	8005140 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2201      	movs	r2, #1
 800512e:	409a      	lsls	r2, r3
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005138:	f043 0202 	orr.w	r2, r3, #2
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	2204      	movs	r2, #4
 800514a:	409a      	lsls	r2, r3
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 808f 	beq.w	8005274 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a2c      	ldr	r2, [pc, #176]	@ (800520c <HAL_DMA_IRQHandler+0x3f8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d04a      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a2a      	ldr	r2, [pc, #168]	@ (8005210 <HAL_DMA_IRQHandler+0x3fc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d045      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a29      	ldr	r2, [pc, #164]	@ (8005214 <HAL_DMA_IRQHandler+0x400>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d040      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a27      	ldr	r2, [pc, #156]	@ (8005218 <HAL_DMA_IRQHandler+0x404>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d03b      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a26      	ldr	r2, [pc, #152]	@ (800521c <HAL_DMA_IRQHandler+0x408>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d036      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a24      	ldr	r2, [pc, #144]	@ (8005220 <HAL_DMA_IRQHandler+0x40c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d031      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a23      	ldr	r2, [pc, #140]	@ (8005224 <HAL_DMA_IRQHandler+0x410>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d02c      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a21      	ldr	r2, [pc, #132]	@ (8005228 <HAL_DMA_IRQHandler+0x414>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d027      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a20      	ldr	r2, [pc, #128]	@ (800522c <HAL_DMA_IRQHandler+0x418>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d022      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005230 <HAL_DMA_IRQHandler+0x41c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01d      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1d      	ldr	r2, [pc, #116]	@ (8005234 <HAL_DMA_IRQHandler+0x420>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d018      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005238 <HAL_DMA_IRQHandler+0x424>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1a      	ldr	r2, [pc, #104]	@ (800523c <HAL_DMA_IRQHandler+0x428>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a18      	ldr	r2, [pc, #96]	@ (8005240 <HAL_DMA_IRQHandler+0x42c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <HAL_DMA_IRQHandler+0x430>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_DMA_IRQHandler+0x3e2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a15      	ldr	r2, [pc, #84]	@ (8005248 <HAL_DMA_IRQHandler+0x434>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d12a      	bne.n	800524c <HAL_DMA_IRQHandler+0x438>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e023      	b.n	8005254 <HAL_DMA_IRQHandler+0x440>
 800520c:	40020010 	.word	0x40020010
 8005210:	40020028 	.word	0x40020028
 8005214:	40020040 	.word	0x40020040
 8005218:	40020058 	.word	0x40020058
 800521c:	40020070 	.word	0x40020070
 8005220:	40020088 	.word	0x40020088
 8005224:	400200a0 	.word	0x400200a0
 8005228:	400200b8 	.word	0x400200b8
 800522c:	40020410 	.word	0x40020410
 8005230:	40020428 	.word	0x40020428
 8005234:	40020440 	.word	0x40020440
 8005238:	40020458 	.word	0x40020458
 800523c:	40020470 	.word	0x40020470
 8005240:	40020488 	.word	0x40020488
 8005244:	400204a0 	.word	0x400204a0
 8005248:	400204b8 	.word	0x400204b8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2204      	movs	r2, #4
 8005262:	409a      	lsls	r2, r3
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526c:	f043 0204 	orr.w	r2, r3, #4
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	2210      	movs	r2, #16
 800527e:	409a      	lsls	r2, r3
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80a6 	beq.w	80053d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a85      	ldr	r2, [pc, #532]	@ (80054a4 <HAL_DMA_IRQHandler+0x690>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d04a      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a83      	ldr	r2, [pc, #524]	@ (80054a8 <HAL_DMA_IRQHandler+0x694>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d045      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a82      	ldr	r2, [pc, #520]	@ (80054ac <HAL_DMA_IRQHandler+0x698>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d040      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a80      	ldr	r2, [pc, #512]	@ (80054b0 <HAL_DMA_IRQHandler+0x69c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d03b      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a7f      	ldr	r2, [pc, #508]	@ (80054b4 <HAL_DMA_IRQHandler+0x6a0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d036      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a7d      	ldr	r2, [pc, #500]	@ (80054b8 <HAL_DMA_IRQHandler+0x6a4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d031      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a7c      	ldr	r2, [pc, #496]	@ (80054bc <HAL_DMA_IRQHandler+0x6a8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d02c      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a7a      	ldr	r2, [pc, #488]	@ (80054c0 <HAL_DMA_IRQHandler+0x6ac>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d027      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a79      	ldr	r2, [pc, #484]	@ (80054c4 <HAL_DMA_IRQHandler+0x6b0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d022      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a77      	ldr	r2, [pc, #476]	@ (80054c8 <HAL_DMA_IRQHandler+0x6b4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01d      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a76      	ldr	r2, [pc, #472]	@ (80054cc <HAL_DMA_IRQHandler+0x6b8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d018      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a74      	ldr	r2, [pc, #464]	@ (80054d0 <HAL_DMA_IRQHandler+0x6bc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a73      	ldr	r2, [pc, #460]	@ (80054d4 <HAL_DMA_IRQHandler+0x6c0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00e      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a71      	ldr	r2, [pc, #452]	@ (80054d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d009      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a70      	ldr	r2, [pc, #448]	@ (80054dc <HAL_DMA_IRQHandler+0x6c8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d004      	beq.n	800532a <HAL_DMA_IRQHandler+0x516>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a6e      	ldr	r2, [pc, #440]	@ (80054e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d10a      	bne.n	8005340 <HAL_DMA_IRQHandler+0x52c>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e009      	b.n	8005354 <HAL_DMA_IRQHandler+0x540>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2300      	moveq	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d03e      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	2210      	movs	r2, #16
 8005362:	409a      	lsls	r2, r3
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d108      	bne.n	8005396 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d024      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	4798      	blx	r3
 8005394:	e01f      	b.n	80053d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01b      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	4798      	blx	r3
 80053a6:	e016      	b.n	80053d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0208 	bic.w	r2, r2, #8
 80053c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	2220      	movs	r2, #32
 80053e0:	409a      	lsls	r2, r3
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8110 	beq.w	800560c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2c      	ldr	r2, [pc, #176]	@ (80054a4 <HAL_DMA_IRQHandler+0x690>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d04a      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2b      	ldr	r2, [pc, #172]	@ (80054a8 <HAL_DMA_IRQHandler+0x694>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d045      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a29      	ldr	r2, [pc, #164]	@ (80054ac <HAL_DMA_IRQHandler+0x698>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d040      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a28      	ldr	r2, [pc, #160]	@ (80054b0 <HAL_DMA_IRQHandler+0x69c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d03b      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a26      	ldr	r2, [pc, #152]	@ (80054b4 <HAL_DMA_IRQHandler+0x6a0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d036      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a25      	ldr	r2, [pc, #148]	@ (80054b8 <HAL_DMA_IRQHandler+0x6a4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d031      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a23      	ldr	r2, [pc, #140]	@ (80054bc <HAL_DMA_IRQHandler+0x6a8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d02c      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a22      	ldr	r2, [pc, #136]	@ (80054c0 <HAL_DMA_IRQHandler+0x6ac>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d027      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <HAL_DMA_IRQHandler+0x6b0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <HAL_DMA_IRQHandler+0x6b4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d01d      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1d      	ldr	r2, [pc, #116]	@ (80054cc <HAL_DMA_IRQHandler+0x6b8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1c      	ldr	r2, [pc, #112]	@ (80054d0 <HAL_DMA_IRQHandler+0x6bc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1a      	ldr	r2, [pc, #104]	@ (80054d4 <HAL_DMA_IRQHandler+0x6c0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a19      	ldr	r2, [pc, #100]	@ (80054d8 <HAL_DMA_IRQHandler+0x6c4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a17      	ldr	r2, [pc, #92]	@ (80054dc <HAL_DMA_IRQHandler+0x6c8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_DMA_IRQHandler+0x678>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a16      	ldr	r2, [pc, #88]	@ (80054e0 <HAL_DMA_IRQHandler+0x6cc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d12b      	bne.n	80054e4 <HAL_DMA_IRQHandler+0x6d0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b00      	cmp	r3, #0
 8005498:	bf14      	ite	ne
 800549a:	2301      	movne	r3, #1
 800549c:	2300      	moveq	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	e02a      	b.n	80054f8 <HAL_DMA_IRQHandler+0x6e4>
 80054a2:	bf00      	nop
 80054a4:	40020010 	.word	0x40020010
 80054a8:	40020028 	.word	0x40020028
 80054ac:	40020040 	.word	0x40020040
 80054b0:	40020058 	.word	0x40020058
 80054b4:	40020070 	.word	0x40020070
 80054b8:	40020088 	.word	0x40020088
 80054bc:	400200a0 	.word	0x400200a0
 80054c0:	400200b8 	.word	0x400200b8
 80054c4:	40020410 	.word	0x40020410
 80054c8:	40020428 	.word	0x40020428
 80054cc:	40020440 	.word	0x40020440
 80054d0:	40020458 	.word	0x40020458
 80054d4:	40020470 	.word	0x40020470
 80054d8:	40020488 	.word	0x40020488
 80054dc:	400204a0 	.word	0x400204a0
 80054e0:	400204b8 	.word	0x400204b8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	bf14      	ite	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	2300      	moveq	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8087 	beq.w	800560c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2220      	movs	r2, #32
 8005508:	409a      	lsls	r2, r3
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b04      	cmp	r3, #4
 8005518:	d139      	bne.n	800558e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0216 	bic.w	r2, r2, #22
 8005528:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005538:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d103      	bne.n	800554a <HAL_DMA_IRQHandler+0x736>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0208 	bic.w	r2, r2, #8
 8005558:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	223f      	movs	r2, #63	@ 0x3f
 8005564:	409a      	lsls	r2, r3
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 834a 	beq.w	8005c18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4798      	blx	r3
          }
          return;
 800558c:	e344      	b.n	8005c18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d018      	beq.n	80055ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d108      	bne.n	80055bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d02c      	beq.n	800560c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
 80055ba:	e027      	b.n	800560c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d023      	beq.n	800560c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
 80055cc:	e01e      	b.n	800560c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10f      	bne.n	80055fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0210 	bic.w	r2, r2, #16
 80055ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8306 	beq.w	8005c22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8088 	beq.w	8005734 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2204      	movs	r2, #4
 8005628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a7a      	ldr	r2, [pc, #488]	@ (800581c <HAL_DMA_IRQHandler+0xa08>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d04a      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a79      	ldr	r2, [pc, #484]	@ (8005820 <HAL_DMA_IRQHandler+0xa0c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d045      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a77      	ldr	r2, [pc, #476]	@ (8005824 <HAL_DMA_IRQHandler+0xa10>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d040      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a76      	ldr	r2, [pc, #472]	@ (8005828 <HAL_DMA_IRQHandler+0xa14>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d03b      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a74      	ldr	r2, [pc, #464]	@ (800582c <HAL_DMA_IRQHandler+0xa18>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d036      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a73      	ldr	r2, [pc, #460]	@ (8005830 <HAL_DMA_IRQHandler+0xa1c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d031      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a71      	ldr	r2, [pc, #452]	@ (8005834 <HAL_DMA_IRQHandler+0xa20>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d02c      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a70      	ldr	r2, [pc, #448]	@ (8005838 <HAL_DMA_IRQHandler+0xa24>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d027      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6e      	ldr	r2, [pc, #440]	@ (800583c <HAL_DMA_IRQHandler+0xa28>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d022      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a6d      	ldr	r2, [pc, #436]	@ (8005840 <HAL_DMA_IRQHandler+0xa2c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d01d      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a6b      	ldr	r2, [pc, #428]	@ (8005844 <HAL_DMA_IRQHandler+0xa30>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d018      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a6a      	ldr	r2, [pc, #424]	@ (8005848 <HAL_DMA_IRQHandler+0xa34>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a68      	ldr	r2, [pc, #416]	@ (800584c <HAL_DMA_IRQHandler+0xa38>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00e      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a67      	ldr	r2, [pc, #412]	@ (8005850 <HAL_DMA_IRQHandler+0xa3c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a65      	ldr	r2, [pc, #404]	@ (8005854 <HAL_DMA_IRQHandler+0xa40>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_DMA_IRQHandler+0x8b8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a64      	ldr	r2, [pc, #400]	@ (8005858 <HAL_DMA_IRQHandler+0xa44>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d108      	bne.n	80056de <HAL_DMA_IRQHandler+0x8ca>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e007      	b.n	80056ee <HAL_DMA_IRQHandler+0x8da>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d307      	bcc.n	800570a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f2      	bne.n	80056ee <HAL_DMA_IRQHandler+0x8da>
 8005708:	e000      	b.n	800570c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800570a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2203      	movs	r2, #3
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005722:	e003      	b.n	800572c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 8272 	beq.w	8005c22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
 8005746:	e26c      	b.n	8005c22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a43      	ldr	r2, [pc, #268]	@ (800585c <HAL_DMA_IRQHandler+0xa48>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <HAL_DMA_IRQHandler+0x984>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a42      	ldr	r2, [pc, #264]	@ (8005860 <HAL_DMA_IRQHandler+0xa4c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <HAL_DMA_IRQHandler+0x984>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a40      	ldr	r2, [pc, #256]	@ (8005864 <HAL_DMA_IRQHandler+0xa50>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <HAL_DMA_IRQHandler+0x984>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3f      	ldr	r2, [pc, #252]	@ (8005868 <HAL_DMA_IRQHandler+0xa54>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <HAL_DMA_IRQHandler+0x984>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a3d      	ldr	r2, [pc, #244]	@ (800586c <HAL_DMA_IRQHandler+0xa58>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_DMA_IRQHandler+0x984>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a3c      	ldr	r2, [pc, #240]	@ (8005870 <HAL_DMA_IRQHandler+0xa5c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_DMA_IRQHandler+0x984>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a3a      	ldr	r2, [pc, #232]	@ (8005874 <HAL_DMA_IRQHandler+0xa60>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_DMA_IRQHandler+0x984>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a39      	ldr	r2, [pc, #228]	@ (8005878 <HAL_DMA_IRQHandler+0xa64>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <HAL_DMA_IRQHandler+0x988>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_DMA_IRQHandler+0x98a>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 823f 	beq.w	8005c22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2204      	movs	r2, #4
 80057b6:	409a      	lsls	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80cd 	beq.w	800595c <HAL_DMA_IRQHandler+0xb48>
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80c7 	beq.w	800595c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	2204      	movs	r2, #4
 80057d8:	409a      	lsls	r2, r3
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d049      	beq.n	800587c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8210 	beq.w	8005c1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005804:	e20a      	b.n	8005c1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8206 	beq.w	8005c1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005818:	e200      	b.n	8005c1c <HAL_DMA_IRQHandler+0xe08>
 800581a:	bf00      	nop
 800581c:	40020010 	.word	0x40020010
 8005820:	40020028 	.word	0x40020028
 8005824:	40020040 	.word	0x40020040
 8005828:	40020058 	.word	0x40020058
 800582c:	40020070 	.word	0x40020070
 8005830:	40020088 	.word	0x40020088
 8005834:	400200a0 	.word	0x400200a0
 8005838:	400200b8 	.word	0x400200b8
 800583c:	40020410 	.word	0x40020410
 8005840:	40020428 	.word	0x40020428
 8005844:	40020440 	.word	0x40020440
 8005848:	40020458 	.word	0x40020458
 800584c:	40020470 	.word	0x40020470
 8005850:	40020488 	.word	0x40020488
 8005854:	400204a0 	.word	0x400204a0
 8005858:	400204b8 	.word	0x400204b8
 800585c:	58025408 	.word	0x58025408
 8005860:	5802541c 	.word	0x5802541c
 8005864:	58025430 	.word	0x58025430
 8005868:	58025444 	.word	0x58025444
 800586c:	58025458 	.word	0x58025458
 8005870:	5802546c 	.word	0x5802546c
 8005874:	58025480 	.word	0x58025480
 8005878:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d160      	bne.n	8005948 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a88 <HAL_DMA_IRQHandler+0xc74>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04a      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a7d      	ldr	r2, [pc, #500]	@ (8005a8c <HAL_DMA_IRQHandler+0xc78>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d045      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a90 <HAL_DMA_IRQHandler+0xc7c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d040      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a7a      	ldr	r2, [pc, #488]	@ (8005a94 <HAL_DMA_IRQHandler+0xc80>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a79      	ldr	r2, [pc, #484]	@ (8005a98 <HAL_DMA_IRQHandler+0xc84>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d036      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a77      	ldr	r2, [pc, #476]	@ (8005a9c <HAL_DMA_IRQHandler+0xc88>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d031      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a76      	ldr	r2, [pc, #472]	@ (8005aa0 <HAL_DMA_IRQHandler+0xc8c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d02c      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a74      	ldr	r2, [pc, #464]	@ (8005aa4 <HAL_DMA_IRQHandler+0xc90>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d027      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a73      	ldr	r2, [pc, #460]	@ (8005aa8 <HAL_DMA_IRQHandler+0xc94>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a71      	ldr	r2, [pc, #452]	@ (8005aac <HAL_DMA_IRQHandler+0xc98>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01d      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a70      	ldr	r2, [pc, #448]	@ (8005ab0 <HAL_DMA_IRQHandler+0xc9c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a6e      	ldr	r2, [pc, #440]	@ (8005ab4 <HAL_DMA_IRQHandler+0xca0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a6d      	ldr	r2, [pc, #436]	@ (8005ab8 <HAL_DMA_IRQHandler+0xca4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a6b      	ldr	r2, [pc, #428]	@ (8005abc <HAL_DMA_IRQHandler+0xca8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a6a      	ldr	r2, [pc, #424]	@ (8005ac0 <HAL_DMA_IRQHandler+0xcac>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_DMA_IRQHandler+0xb12>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a68      	ldr	r2, [pc, #416]	@ (8005ac4 <HAL_DMA_IRQHandler+0xcb0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d108      	bne.n	8005938 <HAL_DMA_IRQHandler+0xb24>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0208 	bic.w	r2, r2, #8
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e007      	b.n	8005948 <HAL_DMA_IRQHandler+0xb34>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0204 	bic.w	r2, r2, #4
 8005946:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8165 	beq.w	8005c1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800595a:	e15f      	b.n	8005c1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2202      	movs	r2, #2
 8005966:	409a      	lsls	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80c5 	beq.w	8005afc <HAL_DMA_IRQHandler+0xce8>
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80bf 	beq.w	8005afc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2202      	movs	r2, #2
 8005988:	409a      	lsls	r2, r3
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d018      	beq.n	80059ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 813a 	beq.w	8005c20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059b4:	e134      	b.n	8005c20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8130 	beq.w	8005c20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059c8:	e12a      	b.n	8005c20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f040 8089 	bne.w	8005ae8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2b      	ldr	r2, [pc, #172]	@ (8005a88 <HAL_DMA_IRQHandler+0xc74>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d04a      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a29      	ldr	r2, [pc, #164]	@ (8005a8c <HAL_DMA_IRQHandler+0xc78>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d045      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a28      	ldr	r2, [pc, #160]	@ (8005a90 <HAL_DMA_IRQHandler+0xc7c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d040      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a26      	ldr	r2, [pc, #152]	@ (8005a94 <HAL_DMA_IRQHandler+0xc80>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d03b      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a25      	ldr	r2, [pc, #148]	@ (8005a98 <HAL_DMA_IRQHandler+0xc84>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d036      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a23      	ldr	r2, [pc, #140]	@ (8005a9c <HAL_DMA_IRQHandler+0xc88>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d031      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a22      	ldr	r2, [pc, #136]	@ (8005aa0 <HAL_DMA_IRQHandler+0xc8c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d02c      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a20      	ldr	r2, [pc, #128]	@ (8005aa4 <HAL_DMA_IRQHandler+0xc90>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d027      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa8 <HAL_DMA_IRQHandler+0xc94>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <HAL_DMA_IRQHandler+0xc98>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab0 <HAL_DMA_IRQHandler+0xc9c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab4 <HAL_DMA_IRQHandler+0xca0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <HAL_DMA_IRQHandler+0xca4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a17      	ldr	r2, [pc, #92]	@ (8005abc <HAL_DMA_IRQHandler+0xca8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a16      	ldr	r2, [pc, #88]	@ (8005ac0 <HAL_DMA_IRQHandler+0xcac>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xc62>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a14      	ldr	r2, [pc, #80]	@ (8005ac4 <HAL_DMA_IRQHandler+0xcb0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d128      	bne.n	8005ac8 <HAL_DMA_IRQHandler+0xcb4>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0214 	bic.w	r2, r2, #20
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e027      	b.n	8005ad8 <HAL_DMA_IRQHandler+0xcc4>
 8005a88:	40020010 	.word	0x40020010
 8005a8c:	40020028 	.word	0x40020028
 8005a90:	40020040 	.word	0x40020040
 8005a94:	40020058 	.word	0x40020058
 8005a98:	40020070 	.word	0x40020070
 8005a9c:	40020088 	.word	0x40020088
 8005aa0:	400200a0 	.word	0x400200a0
 8005aa4:	400200b8 	.word	0x400200b8
 8005aa8:	40020410 	.word	0x40020410
 8005aac:	40020428 	.word	0x40020428
 8005ab0:	40020440 	.word	0x40020440
 8005ab4:	40020458 	.word	0x40020458
 8005ab8:	40020470 	.word	0x40020470
 8005abc:	40020488 	.word	0x40020488
 8005ac0:	400204a0 	.word	0x400204a0
 8005ac4:	400204b8 	.word	0x400204b8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 020a 	bic.w	r2, r2, #10
 8005ad6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8097 	beq.w	8005c20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005afa:	e091      	b.n	8005c20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	2208      	movs	r2, #8
 8005b06:	409a      	lsls	r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8088 	beq.w	8005c22 <HAL_DMA_IRQHandler+0xe0e>
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8082 	beq.w	8005c22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a41      	ldr	r2, [pc, #260]	@ (8005c28 <HAL_DMA_IRQHandler+0xe14>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d04a      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c2c <HAL_DMA_IRQHandler+0xe18>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d045      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a3e      	ldr	r2, [pc, #248]	@ (8005c30 <HAL_DMA_IRQHandler+0xe1c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d040      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a3c      	ldr	r2, [pc, #240]	@ (8005c34 <HAL_DMA_IRQHandler+0xe20>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d03b      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c38 <HAL_DMA_IRQHandler+0xe24>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d036      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a39      	ldr	r2, [pc, #228]	@ (8005c3c <HAL_DMA_IRQHandler+0xe28>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d031      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a38      	ldr	r2, [pc, #224]	@ (8005c40 <HAL_DMA_IRQHandler+0xe2c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d02c      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a36      	ldr	r2, [pc, #216]	@ (8005c44 <HAL_DMA_IRQHandler+0xe30>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d027      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a35      	ldr	r2, [pc, #212]	@ (8005c48 <HAL_DMA_IRQHandler+0xe34>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d022      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a33      	ldr	r2, [pc, #204]	@ (8005c4c <HAL_DMA_IRQHandler+0xe38>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01d      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a32      	ldr	r2, [pc, #200]	@ (8005c50 <HAL_DMA_IRQHandler+0xe3c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d018      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a30      	ldr	r2, [pc, #192]	@ (8005c54 <HAL_DMA_IRQHandler+0xe40>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c58 <HAL_DMA_IRQHandler+0xe44>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c5c <HAL_DMA_IRQHandler+0xe48>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <HAL_DMA_IRQHandler+0xe4c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_DMA_IRQHandler+0xdaa>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c64 <HAL_DMA_IRQHandler+0xe50>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d108      	bne.n	8005bd0 <HAL_DMA_IRQHandler+0xdbc>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 021c 	bic.w	r2, r2, #28
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e007      	b.n	8005be0 <HAL_DMA_IRQHandler+0xdcc>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 020e 	bic.w	r2, r2, #14
 8005bde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2201      	movs	r2, #1
 8005bea:	409a      	lsls	r2, r3
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
 8005c16:	e004      	b.n	8005c22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c22:	3728      	adds	r7, #40	@ 0x28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40020010 	.word	0x40020010
 8005c2c:	40020028 	.word	0x40020028
 8005c30:	40020040 	.word	0x40020040
 8005c34:	40020058 	.word	0x40020058
 8005c38:	40020070 	.word	0x40020070
 8005c3c:	40020088 	.word	0x40020088
 8005c40:	400200a0 	.word	0x400200a0
 8005c44:	400200b8 	.word	0x400200b8
 8005c48:	40020410 	.word	0x40020410
 8005c4c:	40020428 	.word	0x40020428
 8005c50:	40020440 	.word	0x40020440
 8005c54:	40020458 	.word	0x40020458
 8005c58:	40020470 	.word	0x40020470
 8005c5c:	40020488 	.word	0x40020488
 8005c60:	400204a0 	.word	0x400204a0
 8005c64:	400204b8 	.word	0x400204b8

08005c68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a7f      	ldr	r2, [pc, #508]	@ (8005e84 <DMA_SetConfig+0x21c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d072      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a7d      	ldr	r2, [pc, #500]	@ (8005e88 <DMA_SetConfig+0x220>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d06d      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e8c <DMA_SetConfig+0x224>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d068      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a7a      	ldr	r2, [pc, #488]	@ (8005e90 <DMA_SetConfig+0x228>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d063      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a79      	ldr	r2, [pc, #484]	@ (8005e94 <DMA_SetConfig+0x22c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d05e      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a77      	ldr	r2, [pc, #476]	@ (8005e98 <DMA_SetConfig+0x230>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d059      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a76      	ldr	r2, [pc, #472]	@ (8005e9c <DMA_SetConfig+0x234>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d054      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a74      	ldr	r2, [pc, #464]	@ (8005ea0 <DMA_SetConfig+0x238>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d04f      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a73      	ldr	r2, [pc, #460]	@ (8005ea4 <DMA_SetConfig+0x23c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d04a      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a71      	ldr	r2, [pc, #452]	@ (8005ea8 <DMA_SetConfig+0x240>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d045      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a70      	ldr	r2, [pc, #448]	@ (8005eac <DMA_SetConfig+0x244>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d040      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8005eb0 <DMA_SetConfig+0x248>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d03b      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8005eb4 <DMA_SetConfig+0x24c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d036      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6b      	ldr	r2, [pc, #428]	@ (8005eb8 <DMA_SetConfig+0x250>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d031      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a6a      	ldr	r2, [pc, #424]	@ (8005ebc <DMA_SetConfig+0x254>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d02c      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a68      	ldr	r2, [pc, #416]	@ (8005ec0 <DMA_SetConfig+0x258>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d027      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a67      	ldr	r2, [pc, #412]	@ (8005ec4 <DMA_SetConfig+0x25c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d022      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a65      	ldr	r2, [pc, #404]	@ (8005ec8 <DMA_SetConfig+0x260>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01d      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a64      	ldr	r2, [pc, #400]	@ (8005ecc <DMA_SetConfig+0x264>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d018      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a62      	ldr	r2, [pc, #392]	@ (8005ed0 <DMA_SetConfig+0x268>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a61      	ldr	r2, [pc, #388]	@ (8005ed4 <DMA_SetConfig+0x26c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5f      	ldr	r2, [pc, #380]	@ (8005ed8 <DMA_SetConfig+0x270>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d009      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5e      	ldr	r2, [pc, #376]	@ (8005edc <DMA_SetConfig+0x274>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <DMA_SetConfig+0x10a>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ee0 <DMA_SetConfig+0x278>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d101      	bne.n	8005d76 <DMA_SetConfig+0x10e>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <DMA_SetConfig+0x110>
 8005d76:	2300      	movs	r3, #0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00d      	beq.n	8005d98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a39      	ldr	r2, [pc, #228]	@ (8005e84 <DMA_SetConfig+0x21c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d04a      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a38      	ldr	r2, [pc, #224]	@ (8005e88 <DMA_SetConfig+0x220>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d045      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a36      	ldr	r2, [pc, #216]	@ (8005e8c <DMA_SetConfig+0x224>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d040      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a35      	ldr	r2, [pc, #212]	@ (8005e90 <DMA_SetConfig+0x228>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d03b      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a33      	ldr	r2, [pc, #204]	@ (8005e94 <DMA_SetConfig+0x22c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d036      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a32      	ldr	r2, [pc, #200]	@ (8005e98 <DMA_SetConfig+0x230>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d031      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a30      	ldr	r2, [pc, #192]	@ (8005e9c <DMA_SetConfig+0x234>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02c      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea0 <DMA_SetConfig+0x238>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d027      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea4 <DMA_SetConfig+0x23c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d022      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea8 <DMA_SetConfig+0x240>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d01d      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2a      	ldr	r2, [pc, #168]	@ (8005eac <DMA_SetConfig+0x244>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d018      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a29      	ldr	r2, [pc, #164]	@ (8005eb0 <DMA_SetConfig+0x248>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a27      	ldr	r2, [pc, #156]	@ (8005eb4 <DMA_SetConfig+0x24c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00e      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a26      	ldr	r2, [pc, #152]	@ (8005eb8 <DMA_SetConfig+0x250>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a24      	ldr	r2, [pc, #144]	@ (8005ebc <DMA_SetConfig+0x254>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <DMA_SetConfig+0x1d0>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a23      	ldr	r2, [pc, #140]	@ (8005ec0 <DMA_SetConfig+0x258>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d101      	bne.n	8005e3c <DMA_SetConfig+0x1d4>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <DMA_SetConfig+0x1d6>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d059      	beq.n	8005ef6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	223f      	movs	r2, #63	@ 0x3f
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d138      	bne.n	8005ee4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e82:	e086      	b.n	8005f92 <DMA_SetConfig+0x32a>
 8005e84:	40020010 	.word	0x40020010
 8005e88:	40020028 	.word	0x40020028
 8005e8c:	40020040 	.word	0x40020040
 8005e90:	40020058 	.word	0x40020058
 8005e94:	40020070 	.word	0x40020070
 8005e98:	40020088 	.word	0x40020088
 8005e9c:	400200a0 	.word	0x400200a0
 8005ea0:	400200b8 	.word	0x400200b8
 8005ea4:	40020410 	.word	0x40020410
 8005ea8:	40020428 	.word	0x40020428
 8005eac:	40020440 	.word	0x40020440
 8005eb0:	40020458 	.word	0x40020458
 8005eb4:	40020470 	.word	0x40020470
 8005eb8:	40020488 	.word	0x40020488
 8005ebc:	400204a0 	.word	0x400204a0
 8005ec0:	400204b8 	.word	0x400204b8
 8005ec4:	58025408 	.word	0x58025408
 8005ec8:	5802541c 	.word	0x5802541c
 8005ecc:	58025430 	.word	0x58025430
 8005ed0:	58025444 	.word	0x58025444
 8005ed4:	58025458 	.word	0x58025458
 8005ed8:	5802546c 	.word	0x5802546c
 8005edc:	58025480 	.word	0x58025480
 8005ee0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]
}
 8005ef4:	e04d      	b.n	8005f92 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a29      	ldr	r2, [pc, #164]	@ (8005fa0 <DMA_SetConfig+0x338>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d022      	beq.n	8005f46 <DMA_SetConfig+0x2de>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a27      	ldr	r2, [pc, #156]	@ (8005fa4 <DMA_SetConfig+0x33c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d01d      	beq.n	8005f46 <DMA_SetConfig+0x2de>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a26      	ldr	r2, [pc, #152]	@ (8005fa8 <DMA_SetConfig+0x340>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d018      	beq.n	8005f46 <DMA_SetConfig+0x2de>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a24      	ldr	r2, [pc, #144]	@ (8005fac <DMA_SetConfig+0x344>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d013      	beq.n	8005f46 <DMA_SetConfig+0x2de>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a23      	ldr	r2, [pc, #140]	@ (8005fb0 <DMA_SetConfig+0x348>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00e      	beq.n	8005f46 <DMA_SetConfig+0x2de>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a21      	ldr	r2, [pc, #132]	@ (8005fb4 <DMA_SetConfig+0x34c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d009      	beq.n	8005f46 <DMA_SetConfig+0x2de>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a20      	ldr	r2, [pc, #128]	@ (8005fb8 <DMA_SetConfig+0x350>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <DMA_SetConfig+0x2de>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1e      	ldr	r2, [pc, #120]	@ (8005fbc <DMA_SetConfig+0x354>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d101      	bne.n	8005f4a <DMA_SetConfig+0x2e2>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <DMA_SetConfig+0x2e4>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d020      	beq.n	8005f92 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2201      	movs	r2, #1
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b40      	cmp	r3, #64	@ 0x40
 8005f6e:	d108      	bne.n	8005f82 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	60da      	str	r2, [r3, #12]
}
 8005f80:	e007      	b.n	8005f92 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	58025408 	.word	0x58025408
 8005fa4:	5802541c 	.word	0x5802541c
 8005fa8:	58025430 	.word	0x58025430
 8005fac:	58025444 	.word	0x58025444
 8005fb0:	58025458 	.word	0x58025458
 8005fb4:	5802546c 	.word	0x5802546c
 8005fb8:	58025480 	.word	0x58025480
 8005fbc:	58025494 	.word	0x58025494

08005fc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a42      	ldr	r2, [pc, #264]	@ (80060d8 <DMA_CalcBaseAndBitshift+0x118>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d04a      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a41      	ldr	r2, [pc, #260]	@ (80060dc <DMA_CalcBaseAndBitshift+0x11c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d045      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3f      	ldr	r2, [pc, #252]	@ (80060e0 <DMA_CalcBaseAndBitshift+0x120>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d040      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3e      	ldr	r2, [pc, #248]	@ (80060e4 <DMA_CalcBaseAndBitshift+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d03b      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80060e8 <DMA_CalcBaseAndBitshift+0x128>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d036      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a3b      	ldr	r2, [pc, #236]	@ (80060ec <DMA_CalcBaseAndBitshift+0x12c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d031      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a39      	ldr	r2, [pc, #228]	@ (80060f0 <DMA_CalcBaseAndBitshift+0x130>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d02c      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a38      	ldr	r2, [pc, #224]	@ (80060f4 <DMA_CalcBaseAndBitshift+0x134>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d027      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a36      	ldr	r2, [pc, #216]	@ (80060f8 <DMA_CalcBaseAndBitshift+0x138>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d022      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a35      	ldr	r2, [pc, #212]	@ (80060fc <DMA_CalcBaseAndBitshift+0x13c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d01d      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a33      	ldr	r2, [pc, #204]	@ (8006100 <DMA_CalcBaseAndBitshift+0x140>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a32      	ldr	r2, [pc, #200]	@ (8006104 <DMA_CalcBaseAndBitshift+0x144>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a30      	ldr	r2, [pc, #192]	@ (8006108 <DMA_CalcBaseAndBitshift+0x148>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2f      	ldr	r2, [pc, #188]	@ (800610c <DMA_CalcBaseAndBitshift+0x14c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a2d      	ldr	r2, [pc, #180]	@ (8006110 <DMA_CalcBaseAndBitshift+0x150>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <DMA_CalcBaseAndBitshift+0xa8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2c      	ldr	r2, [pc, #176]	@ (8006114 <DMA_CalcBaseAndBitshift+0x154>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <DMA_CalcBaseAndBitshift+0xac>
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <DMA_CalcBaseAndBitshift+0xae>
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d024      	beq.n	80060bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	3b10      	subs	r3, #16
 800607a:	4a27      	ldr	r2, [pc, #156]	@ (8006118 <DMA_CalcBaseAndBitshift+0x158>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	4a24      	ldr	r2, [pc, #144]	@ (800611c <DMA_CalcBaseAndBitshift+0x15c>)
 800608c:	5cd3      	ldrb	r3, [r2, r3]
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b03      	cmp	r3, #3
 8006098:	d908      	bls.n	80060ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006120 <DMA_CalcBaseAndBitshift+0x160>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	1d1a      	adds	r2, r3, #4
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80060aa:	e00d      	b.n	80060c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006120 <DMA_CalcBaseAndBitshift+0x160>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ba:	e005      	b.n	80060c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40020010 	.word	0x40020010
 80060dc:	40020028 	.word	0x40020028
 80060e0:	40020040 	.word	0x40020040
 80060e4:	40020058 	.word	0x40020058
 80060e8:	40020070 	.word	0x40020070
 80060ec:	40020088 	.word	0x40020088
 80060f0:	400200a0 	.word	0x400200a0
 80060f4:	400200b8 	.word	0x400200b8
 80060f8:	40020410 	.word	0x40020410
 80060fc:	40020428 	.word	0x40020428
 8006100:	40020440 	.word	0x40020440
 8006104:	40020458 	.word	0x40020458
 8006108:	40020470 	.word	0x40020470
 800610c:	40020488 	.word	0x40020488
 8006110:	400204a0 	.word	0x400204a0
 8006114:	400204b8 	.word	0x400204b8
 8006118:	aaaaaaab 	.word	0xaaaaaaab
 800611c:	08013fa8 	.word	0x08013fa8
 8006120:	fffffc00 	.word	0xfffffc00

08006124 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d120      	bne.n	800617a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	2b03      	cmp	r3, #3
 800613e:	d858      	bhi.n	80061f2 <DMA_CheckFifoParam+0xce>
 8006140:	a201      	add	r2, pc, #4	@ (adr r2, 8006148 <DMA_CheckFifoParam+0x24>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	08006159 	.word	0x08006159
 800614c:	0800616b 	.word	0x0800616b
 8006150:	08006159 	.word	0x08006159
 8006154:	080061f3 	.word	0x080061f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d048      	beq.n	80061f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006168:	e045      	b.n	80061f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006172:	d142      	bne.n	80061fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006178:	e03f      	b.n	80061fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006182:	d123      	bne.n	80061cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	2b03      	cmp	r3, #3
 800618a:	d838      	bhi.n	80061fe <DMA_CheckFifoParam+0xda>
 800618c:	a201      	add	r2, pc, #4	@ (adr r2, 8006194 <DMA_CheckFifoParam+0x70>)
 800618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006192:	bf00      	nop
 8006194:	080061a5 	.word	0x080061a5
 8006198:	080061ab 	.word	0x080061ab
 800619c:	080061a5 	.word	0x080061a5
 80061a0:	080061bd 	.word	0x080061bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
        break;
 80061a8:	e030      	b.n	800620c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d025      	beq.n	8006202 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061ba:	e022      	b.n	8006202 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061c4:	d11f      	bne.n	8006206 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061ca:	e01c      	b.n	8006206 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d902      	bls.n	80061da <DMA_CheckFifoParam+0xb6>
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d003      	beq.n	80061e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80061d8:	e018      	b.n	800620c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
        break;
 80061de:	e015      	b.n	800620c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00e      	beq.n	800620a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]
    break;
 80061f0:	e00b      	b.n	800620a <DMA_CheckFifoParam+0xe6>
        break;
 80061f2:	bf00      	nop
 80061f4:	e00a      	b.n	800620c <DMA_CheckFifoParam+0xe8>
        break;
 80061f6:	bf00      	nop
 80061f8:	e008      	b.n	800620c <DMA_CheckFifoParam+0xe8>
        break;
 80061fa:	bf00      	nop
 80061fc:	e006      	b.n	800620c <DMA_CheckFifoParam+0xe8>
        break;
 80061fe:	bf00      	nop
 8006200:	e004      	b.n	800620c <DMA_CheckFifoParam+0xe8>
        break;
 8006202:	bf00      	nop
 8006204:	e002      	b.n	800620c <DMA_CheckFifoParam+0xe8>
        break;
 8006206:	bf00      	nop
 8006208:	e000      	b.n	800620c <DMA_CheckFifoParam+0xe8>
    break;
 800620a:	bf00      	nop
    }
  }

  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop

0800621c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a38      	ldr	r2, [pc, #224]	@ (8006310 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a36      	ldr	r2, [pc, #216]	@ (8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01d      	beq.n	800627a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a35      	ldr	r2, [pc, #212]	@ (8006318 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a33      	ldr	r2, [pc, #204]	@ (800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a32      	ldr	r2, [pc, #200]	@ (8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a30      	ldr	r2, [pc, #192]	@ (8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2f      	ldr	r2, [pc, #188]	@ (8006328 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2d      	ldr	r2, [pc, #180]	@ (800632c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d101      	bne.n	800627e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01a      	beq.n	80062ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	3b08      	subs	r3, #8
 800628c:	4a28      	ldr	r2, [pc, #160]	@ (8006330 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4b26      	ldr	r3, [pc, #152]	@ (8006334 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a24      	ldr	r2, [pc, #144]	@ (8006338 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80062a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	2201      	movs	r2, #1
 80062b2:	409a      	lsls	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80062b8:	e024      	b.n	8006304 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	3b10      	subs	r3, #16
 80062c2:	4a1e      	ldr	r2, [pc, #120]	@ (800633c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006340 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d806      	bhi.n	80062e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006344 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d902      	bls.n	80062e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3308      	adds	r3, #8
 80062e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4b18      	ldr	r3, [pc, #96]	@ (8006348 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	461a      	mov	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a16      	ldr	r2, [pc, #88]	@ (800634c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80062f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	2201      	movs	r2, #1
 80062fe:	409a      	lsls	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006304:	bf00      	nop
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	58025408 	.word	0x58025408
 8006314:	5802541c 	.word	0x5802541c
 8006318:	58025430 	.word	0x58025430
 800631c:	58025444 	.word	0x58025444
 8006320:	58025458 	.word	0x58025458
 8006324:	5802546c 	.word	0x5802546c
 8006328:	58025480 	.word	0x58025480
 800632c:	58025494 	.word	0x58025494
 8006330:	cccccccd 	.word	0xcccccccd
 8006334:	16009600 	.word	0x16009600
 8006338:	58025880 	.word	0x58025880
 800633c:	aaaaaaab 	.word	0xaaaaaaab
 8006340:	400204b8 	.word	0x400204b8
 8006344:	4002040f 	.word	0x4002040f
 8006348:	10008200 	.word	0x10008200
 800634c:	40020880 	.word	0x40020880

08006350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d04a      	beq.n	80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d847      	bhi.n	80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a25      	ldr	r2, [pc, #148]	@ (8006408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d022      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a24      	ldr	r2, [pc, #144]	@ (800640c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d01d      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a22      	ldr	r2, [pc, #136]	@ (8006410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d018      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a21      	ldr	r2, [pc, #132]	@ (8006414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1f      	ldr	r2, [pc, #124]	@ (8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00e      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1e      	ldr	r2, [pc, #120]	@ (800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d009      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4b17      	ldr	r3, [pc, #92]	@ (8006428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a15      	ldr	r2, [pc, #84]	@ (800642c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80063d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80063da:	e009      	b.n	80063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a11      	ldr	r2, [pc, #68]	@ (8006434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80063ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	2201      	movs	r2, #1
 80063f6:	409a      	lsls	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	58025408 	.word	0x58025408
 800640c:	5802541c 	.word	0x5802541c
 8006410:	58025430 	.word	0x58025430
 8006414:	58025444 	.word	0x58025444
 8006418:	58025458 	.word	0x58025458
 800641c:	5802546c 	.word	0x5802546c
 8006420:	58025480 	.word	0x58025480
 8006424:	58025494 	.word	0x58025494
 8006428:	1600963f 	.word	0x1600963f
 800642c:	58025940 	.word	0x58025940
 8006430:	1000823f 	.word	0x1000823f
 8006434:	40020940 	.word	0x40020940

08006438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006438:	b480      	push	{r7}
 800643a:	b089      	sub	sp, #36	@ 0x24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006446:	4b89      	ldr	r3, [pc, #548]	@ (800666c <HAL_GPIO_Init+0x234>)
 8006448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800644a:	e194      	b.n	8006776 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	2101      	movs	r1, #1
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	4013      	ands	r3, r2
 800645a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 8186 	beq.w	8006770 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	2b01      	cmp	r3, #1
 800646e:	d005      	beq.n	800647c <HAL_GPIO_Init+0x44>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d130      	bne.n	80064de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	2203      	movs	r2, #3
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	43db      	mvns	r3, r3
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	4013      	ands	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064b2:	2201      	movs	r2, #1
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	43db      	mvns	r3, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4013      	ands	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	f003 0201 	and.w	r2, r3, #1
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d017      	beq.n	800651a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	2203      	movs	r2, #3
 80064f6:	fa02 f303 	lsl.w	r3, r2, r3
 80064fa:	43db      	mvns	r3, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4013      	ands	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4313      	orrs	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d123      	bne.n	800656e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	08da      	lsrs	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3208      	adds	r2, #8
 800652e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	220f      	movs	r2, #15
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	43db      	mvns	r3, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4313      	orrs	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	08da      	lsrs	r2, r3, #3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3208      	adds	r2, #8
 8006568:	69b9      	ldr	r1, [r7, #24]
 800656a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	2203      	movs	r2, #3
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
 800657e:	43db      	mvns	r3, r3
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	4013      	ands	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f003 0203 	and.w	r2, r3, #3
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4313      	orrs	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80e0 	beq.w	8006770 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006670 <HAL_GPIO_Init+0x238>)
 80065b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006670 <HAL_GPIO_Init+0x238>)
 80065b8:	f043 0302 	orr.w	r3, r3, #2
 80065bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80065c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006670 <HAL_GPIO_Init+0x238>)
 80065c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065ce:	4a29      	ldr	r2, [pc, #164]	@ (8006674 <HAL_GPIO_Init+0x23c>)
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	3302      	adds	r3, #2
 80065d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	220f      	movs	r2, #15
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a20      	ldr	r2, [pc, #128]	@ (8006678 <HAL_GPIO_Init+0x240>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d052      	beq.n	80066a0 <HAL_GPIO_Init+0x268>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1f      	ldr	r2, [pc, #124]	@ (800667c <HAL_GPIO_Init+0x244>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d031      	beq.n	8006666 <HAL_GPIO_Init+0x22e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1e      	ldr	r2, [pc, #120]	@ (8006680 <HAL_GPIO_Init+0x248>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d02b      	beq.n	8006662 <HAL_GPIO_Init+0x22a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1d      	ldr	r2, [pc, #116]	@ (8006684 <HAL_GPIO_Init+0x24c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d025      	beq.n	800665e <HAL_GPIO_Init+0x226>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1c      	ldr	r2, [pc, #112]	@ (8006688 <HAL_GPIO_Init+0x250>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d01f      	beq.n	800665a <HAL_GPIO_Init+0x222>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a1b      	ldr	r2, [pc, #108]	@ (800668c <HAL_GPIO_Init+0x254>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d019      	beq.n	8006656 <HAL_GPIO_Init+0x21e>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a1a      	ldr	r2, [pc, #104]	@ (8006690 <HAL_GPIO_Init+0x258>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_GPIO_Init+0x21a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a19      	ldr	r2, [pc, #100]	@ (8006694 <HAL_GPIO_Init+0x25c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00d      	beq.n	800664e <HAL_GPIO_Init+0x216>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a18      	ldr	r2, [pc, #96]	@ (8006698 <HAL_GPIO_Init+0x260>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <HAL_GPIO_Init+0x212>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a17      	ldr	r2, [pc, #92]	@ (800669c <HAL_GPIO_Init+0x264>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d101      	bne.n	8006646 <HAL_GPIO_Init+0x20e>
 8006642:	2309      	movs	r3, #9
 8006644:	e02d      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 8006646:	230a      	movs	r3, #10
 8006648:	e02b      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 800664a:	2308      	movs	r3, #8
 800664c:	e029      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 800664e:	2307      	movs	r3, #7
 8006650:	e027      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 8006652:	2306      	movs	r3, #6
 8006654:	e025      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 8006656:	2305      	movs	r3, #5
 8006658:	e023      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 800665a:	2304      	movs	r3, #4
 800665c:	e021      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 800665e:	2303      	movs	r3, #3
 8006660:	e01f      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 8006662:	2302      	movs	r3, #2
 8006664:	e01d      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 8006666:	2301      	movs	r3, #1
 8006668:	e01b      	b.n	80066a2 <HAL_GPIO_Init+0x26a>
 800666a:	bf00      	nop
 800666c:	58000080 	.word	0x58000080
 8006670:	58024400 	.word	0x58024400
 8006674:	58000400 	.word	0x58000400
 8006678:	58020000 	.word	0x58020000
 800667c:	58020400 	.word	0x58020400
 8006680:	58020800 	.word	0x58020800
 8006684:	58020c00 	.word	0x58020c00
 8006688:	58021000 	.word	0x58021000
 800668c:	58021400 	.word	0x58021400
 8006690:	58021800 	.word	0x58021800
 8006694:	58021c00 	.word	0x58021c00
 8006698:	58022000 	.word	0x58022000
 800669c:	58022400 	.word	0x58022400
 80066a0:	2300      	movs	r3, #0
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	f002 0203 	and.w	r2, r2, #3
 80066a8:	0092      	lsls	r2, r2, #2
 80066aa:	4093      	lsls	r3, r2
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066b2:	4938      	ldr	r1, [pc, #224]	@ (8006794 <HAL_GPIO_Init+0x35c>)
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	3302      	adds	r3, #2
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	43db      	mvns	r3, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4013      	ands	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80066e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80066ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	43db      	mvns	r3, r3
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	4013      	ands	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	43db      	mvns	r3, r3
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	4013      	ands	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	43db      	mvns	r3, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4013      	ands	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	3301      	adds	r3, #1
 8006774:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	f47f ae63 	bne.w	800644c <HAL_GPIO_Init+0x14>
  }
}
 8006786:	bf00      	nop
 8006788:	bf00      	nop
 800678a:	3724      	adds	r7, #36	@ 0x24
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	58000400 	.word	0x58000400

08006798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	807b      	strh	r3, [r7, #2]
 80067a4:	4613      	mov	r3, r2
 80067a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067a8:	787b      	ldrb	r3, [r7, #1]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ae:	887a      	ldrh	r2, [r7, #2]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80067b4:	e003      	b.n	80067be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	041a      	lsls	r2, r3, #16
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	619a      	str	r2, [r3, #24]
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067dc:	887a      	ldrh	r2, [r7, #2]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4013      	ands	r3, r2
 80067e2:	041a      	lsls	r2, r3, #16
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	43d9      	mvns	r1, r3
 80067e8:	887b      	ldrh	r3, [r7, #2]
 80067ea:	400b      	ands	r3, r1
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	619a      	str	r2, [r3, #24]
}
 80067f2:	bf00      	nop
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	4603      	mov	r3, r0
 8006806:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800680c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006822:	88fb      	ldrh	r3, [r7, #6]
 8006824:	4618      	mov	r0, r3
 8006826:	f7fa fab1 	bl	8000d8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800683c:	4b19      	ldr	r3, [pc, #100]	@ (80068a4 <HAL_PWREx_ConfigSupply+0x70>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b04      	cmp	r3, #4
 8006846:	d00a      	beq.n	800685e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006848:	4b16      	ldr	r3, [pc, #88]	@ (80068a4 <HAL_PWREx_ConfigSupply+0x70>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d001      	beq.n	800685a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e01f      	b.n	800689a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	e01d      	b.n	800689a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800685e:	4b11      	ldr	r3, [pc, #68]	@ (80068a4 <HAL_PWREx_ConfigSupply+0x70>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f023 0207 	bic.w	r2, r3, #7
 8006866:	490f      	ldr	r1, [pc, #60]	@ (80068a4 <HAL_PWREx_ConfigSupply+0x70>)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4313      	orrs	r3, r2
 800686c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800686e:	f7fb fbb9 	bl	8001fe4 <HAL_GetTick>
 8006872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006874:	e009      	b.n	800688a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006876:	f7fb fbb5 	bl	8001fe4 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006884:	d901      	bls.n	800688a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e007      	b.n	800689a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <HAL_PWREx_ConfigSupply+0x70>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006896:	d1ee      	bne.n	8006876 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	58024800 	.word	0x58024800

080068a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	@ 0x30
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f000 bc48 	b.w	800714c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8088 	beq.w	80069da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ca:	4b99      	ldr	r3, [pc, #612]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068d4:	4b96      	ldr	r3, [pc, #600]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 80068d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d007      	beq.n	80068f0 <HAL_RCC_OscConfig+0x48>
 80068e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e2:	2b18      	cmp	r3, #24
 80068e4:	d111      	bne.n	800690a <HAL_RCC_OscConfig+0x62>
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d10c      	bne.n	800690a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d06d      	beq.n	80069d8 <HAL_RCC_OscConfig+0x130>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d169      	bne.n	80069d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f000 bc21 	b.w	800714c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006912:	d106      	bne.n	8006922 <HAL_RCC_OscConfig+0x7a>
 8006914:	4b86      	ldr	r3, [pc, #536]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a85      	ldr	r2, [pc, #532]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 800691a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	e02e      	b.n	8006980 <HAL_RCC_OscConfig+0xd8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10c      	bne.n	8006944 <HAL_RCC_OscConfig+0x9c>
 800692a:	4b81      	ldr	r3, [pc, #516]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a80      	ldr	r2, [pc, #512]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	4b7e      	ldr	r3, [pc, #504]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7d      	ldr	r2, [pc, #500]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 800693c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e01d      	b.n	8006980 <HAL_RCC_OscConfig+0xd8>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0xc0>
 800694e:	4b78      	ldr	r3, [pc, #480]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a77      	ldr	r2, [pc, #476]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4b75      	ldr	r3, [pc, #468]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a74      	ldr	r2, [pc, #464]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e00b      	b.n	8006980 <HAL_RCC_OscConfig+0xd8>
 8006968:	4b71      	ldr	r3, [pc, #452]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a70      	ldr	r2, [pc, #448]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 800696e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	4b6e      	ldr	r3, [pc, #440]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a6d      	ldr	r2, [pc, #436]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 800697a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d013      	beq.n	80069b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fb fb2c 	bl	8001fe4 <HAL_GetTick>
 800698c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006990:	f7fb fb28 	bl	8001fe4 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b64      	cmp	r3, #100	@ 0x64
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e3d4      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069a2:	4b63      	ldr	r3, [pc, #396]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f0      	beq.n	8006990 <HAL_RCC_OscConfig+0xe8>
 80069ae:	e014      	b.n	80069da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fb fb18 	bl	8001fe4 <HAL_GetTick>
 80069b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069b8:	f7fb fb14 	bl	8001fe4 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b64      	cmp	r3, #100	@ 0x64
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e3c0      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069ca:	4b59      	ldr	r3, [pc, #356]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0x110>
 80069d6:	e000      	b.n	80069da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80ca 	beq.w	8006b7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069e8:	4b51      	ldr	r3, [pc, #324]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 80069f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <HAL_RCC_OscConfig+0x166>
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	2b18      	cmp	r3, #24
 8006a02:	d156      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x20a>
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d151      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a0e:	4b48      	ldr	r3, [pc, #288]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_RCC_OscConfig+0x17e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e392      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a26:	4b42      	ldr	r3, [pc, #264]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f023 0219 	bic.w	r2, r3, #25
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	493f      	ldr	r1, [pc, #252]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fb fad4 	bl	8001fe4 <HAL_GetTick>
 8006a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a40:	f7fb fad0 	bl	8001fe4 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e37c      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a52:	4b37      	ldr	r3, [pc, #220]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5e:	f7fb facd 	bl	8001ffc <HAL_GetREVID>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d817      	bhi.n	8006a9c <HAL_RCC_OscConfig+0x1f4>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b40      	cmp	r3, #64	@ 0x40
 8006a72:	d108      	bne.n	8006a86 <HAL_RCC_OscConfig+0x1de>
 8006a74:	4b2e      	ldr	r3, [pc, #184]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a84:	e07a      	b.n	8006b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a86:	4b2a      	ldr	r3, [pc, #168]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	031b      	lsls	r3, r3, #12
 8006a94:	4926      	ldr	r1, [pc, #152]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a9a:	e06f      	b.n	8006b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9c:	4b24      	ldr	r3, [pc, #144]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	061b      	lsls	r3, r3, #24
 8006aaa:	4921      	ldr	r1, [pc, #132]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ab0:	e064      	b.n	8006b7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d047      	beq.n	8006b4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006aba:	4b1d      	ldr	r3, [pc, #116]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f023 0219 	bic.w	r2, r3, #25
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	491a      	ldr	r1, [pc, #104]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fb fa8a 	bl	8001fe4 <HAL_GetTick>
 8006ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ad4:	f7fb fa86 	bl	8001fe4 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e332      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ae6:	4b12      	ldr	r3, [pc, #72]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f0      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af2:	f7fb fa83 	bl	8001ffc <HAL_GetREVID>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d819      	bhi.n	8006b34 <HAL_RCC_OscConfig+0x28c>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b40      	cmp	r3, #64	@ 0x40
 8006b06:	d108      	bne.n	8006b1a <HAL_RCC_OscConfig+0x272>
 8006b08:	4b09      	ldr	r3, [pc, #36]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006b10:	4a07      	ldr	r2, [pc, #28]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b16:	6053      	str	r3, [r2, #4]
 8006b18:	e030      	b.n	8006b7c <HAL_RCC_OscConfig+0x2d4>
 8006b1a:	4b05      	ldr	r3, [pc, #20]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	031b      	lsls	r3, r3, #12
 8006b28:	4901      	ldr	r1, [pc, #4]	@ (8006b30 <HAL_RCC_OscConfig+0x288>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	604b      	str	r3, [r1, #4]
 8006b2e:	e025      	b.n	8006b7c <HAL_RCC_OscConfig+0x2d4>
 8006b30:	58024400 	.word	0x58024400
 8006b34:	4b9a      	ldr	r3, [pc, #616]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	4997      	ldr	r1, [pc, #604]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]
 8006b48:	e018      	b.n	8006b7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b4a:	4b95      	ldr	r3, [pc, #596]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a94      	ldr	r2, [pc, #592]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006b50:	f023 0301 	bic.w	r3, r3, #1
 8006b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b56:	f7fb fa45 	bl	8001fe4 <HAL_GetTick>
 8006b5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b5e:	f7fb fa41 	bl	8001fe4 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e2ed      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b70:	4b8b      	ldr	r3, [pc, #556]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f0      	bne.n	8006b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80a9 	beq.w	8006cdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b8a:	4b85      	ldr	r3, [pc, #532]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b94:	4b82      	ldr	r3, [pc, #520]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d007      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x308>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b18      	cmp	r3, #24
 8006ba4:	d13a      	bne.n	8006c1c <HAL_RCC_OscConfig+0x374>
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d135      	bne.n	8006c1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x320>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	2b80      	cmp	r3, #128	@ 0x80
 8006bc2:	d001      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e2c1      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bc8:	f7fb fa18 	bl	8001ffc <HAL_GetREVID>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d817      	bhi.n	8006c06 <HAL_RCC_OscConfig+0x35e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d108      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x348>
 8006bde:	4b70      	ldr	r3, [pc, #448]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006be6:	4a6e      	ldr	r2, [pc, #440]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006be8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bee:	e075      	b.n	8006cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	069b      	lsls	r3, r3, #26
 8006bfe:	4968      	ldr	r1, [pc, #416]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c04:	e06a      	b.n	8006cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c06:	4b66      	ldr	r3, [pc, #408]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	061b      	lsls	r3, r3, #24
 8006c14:	4962      	ldr	r1, [pc, #392]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c1a:	e05f      	b.n	8006cdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d042      	beq.n	8006caa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c24:	4b5e      	ldr	r3, [pc, #376]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a5d      	ldr	r2, [pc, #372]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c30:	f7fb f9d8 	bl	8001fe4 <HAL_GetTick>
 8006c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c38:	f7fb f9d4 	bl	8001fe4 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e280      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c4a:	4b55      	ldr	r3, [pc, #340]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0f0      	beq.n	8006c38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c56:	f7fb f9d1 	bl	8001ffc <HAL_GetREVID>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d817      	bhi.n	8006c94 <HAL_RCC_OscConfig+0x3ec>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d108      	bne.n	8006c7e <HAL_RCC_OscConfig+0x3d6>
 8006c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006c74:	4a4a      	ldr	r2, [pc, #296]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c7a:	6053      	str	r3, [r2, #4]
 8006c7c:	e02e      	b.n	8006cdc <HAL_RCC_OscConfig+0x434>
 8006c7e:	4b48      	ldr	r3, [pc, #288]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	069b      	lsls	r3, r3, #26
 8006c8c:	4944      	ldr	r1, [pc, #272]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	604b      	str	r3, [r1, #4]
 8006c92:	e023      	b.n	8006cdc <HAL_RCC_OscConfig+0x434>
 8006c94:	4b42      	ldr	r3, [pc, #264]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	061b      	lsls	r3, r3, #24
 8006ca2:	493f      	ldr	r1, [pc, #252]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60cb      	str	r3, [r1, #12]
 8006ca8:	e018      	b.n	8006cdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006caa:	4b3d      	ldr	r3, [pc, #244]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a3c      	ldr	r2, [pc, #240]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb6:	f7fb f995 	bl	8001fe4 <HAL_GetTick>
 8006cba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006cbe:	f7fb f991 	bl	8001fe4 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e23d      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cd0:	4b33      	ldr	r3, [pc, #204]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f0      	bne.n	8006cbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d036      	beq.n	8006d56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d019      	beq.n	8006d24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006cf6:	f043 0301 	orr.w	r3, r3, #1
 8006cfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfc:	f7fb f972 	bl	8001fe4 <HAL_GetTick>
 8006d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d04:	f7fb f96e 	bl	8001fe4 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e21a      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d16:	4b22      	ldr	r3, [pc, #136]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <HAL_RCC_OscConfig+0x45c>
 8006d22:	e018      	b.n	8006d56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d24:	4b1e      	ldr	r3, [pc, #120]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d28:	4a1d      	ldr	r2, [pc, #116]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d30:	f7fb f958 	bl	8001fe4 <HAL_GetTick>
 8006d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d38:	f7fb f954 	bl	8001fe4 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e200      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d4a:	4b15      	ldr	r3, [pc, #84]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f0      	bne.n	8006d38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d039      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01c      	beq.n	8006da4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006d70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d76:	f7fb f935 	bl	8001fe4 <HAL_GetTick>
 8006d7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d7c:	e008      	b.n	8006d90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d7e:	f7fb f931 	bl	8001fe4 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e1dd      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d90:	4b03      	ldr	r3, [pc, #12]	@ (8006da0 <HAL_RCC_OscConfig+0x4f8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0f0      	beq.n	8006d7e <HAL_RCC_OscConfig+0x4d6>
 8006d9c:	e01b      	b.n	8006dd6 <HAL_RCC_OscConfig+0x52e>
 8006d9e:	bf00      	nop
 8006da0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006da4:	4b9b      	ldr	r3, [pc, #620]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a9a      	ldr	r2, [pc, #616]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006db0:	f7fb f918 	bl	8001fe4 <HAL_GetTick>
 8006db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006db8:	f7fb f914 	bl	8001fe4 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e1c0      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dca:	4b92      	ldr	r3, [pc, #584]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 8081 	beq.w	8006ee6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006de4:	4b8c      	ldr	r3, [pc, #560]	@ (8007018 <HAL_RCC_OscConfig+0x770>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a8b      	ldr	r2, [pc, #556]	@ (8007018 <HAL_RCC_OscConfig+0x770>)
 8006dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006df0:	f7fb f8f8 	bl	8001fe4 <HAL_GetTick>
 8006df4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006df8:	f7fb f8f4 	bl	8001fe4 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b64      	cmp	r3, #100	@ 0x64
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e1a0      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e0a:	4b83      	ldr	r3, [pc, #524]	@ (8007018 <HAL_RCC_OscConfig+0x770>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCC_OscConfig+0x584>
 8006e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e22:	4a7c      	ldr	r2, [pc, #496]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e24:	f043 0301 	orr.w	r3, r3, #1
 8006e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e2a:	e02d      	b.n	8006e88 <HAL_RCC_OscConfig+0x5e0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10c      	bne.n	8006e4e <HAL_RCC_OscConfig+0x5a6>
 8006e34:	4b77      	ldr	r3, [pc, #476]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e38:	4a76      	ldr	r2, [pc, #472]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e40:	4b74      	ldr	r3, [pc, #464]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e44:	4a73      	ldr	r2, [pc, #460]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e46:	f023 0304 	bic.w	r3, r3, #4
 8006e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e4c:	e01c      	b.n	8006e88 <HAL_RCC_OscConfig+0x5e0>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b05      	cmp	r3, #5
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCC_OscConfig+0x5c8>
 8006e56:	4b6f      	ldr	r3, [pc, #444]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e5c:	f043 0304 	orr.w	r3, r3, #4
 8006e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e62:	4b6c      	ldr	r3, [pc, #432]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e66:	4a6b      	ldr	r2, [pc, #428]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e6e:	e00b      	b.n	8006e88 <HAL_RCC_OscConfig+0x5e0>
 8006e70:	4b68      	ldr	r3, [pc, #416]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e74:	4a67      	ldr	r2, [pc, #412]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e76:	f023 0301 	bic.w	r3, r3, #1
 8006e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e7c:	4b65      	ldr	r3, [pc, #404]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e80:	4a64      	ldr	r2, [pc, #400]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006e82:	f023 0304 	bic.w	r3, r3, #4
 8006e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d015      	beq.n	8006ebc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fb f8a8 	bl	8001fe4 <HAL_GetTick>
 8006e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e98:	f7fb f8a4 	bl	8001fe4 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e14e      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eae:	4b59      	ldr	r3, [pc, #356]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0ee      	beq.n	8006e98 <HAL_RCC_OscConfig+0x5f0>
 8006eba:	e014      	b.n	8006ee6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebc:	f7fb f892 	bl	8001fe4 <HAL_GetTick>
 8006ec0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ec2:	e00a      	b.n	8006eda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec4:	f7fb f88e 	bl	8001fe4 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e138      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eda:	4b4e      	ldr	r3, [pc, #312]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1ee      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 812d 	beq.w	800714a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ef0:	4b48      	ldr	r3, [pc, #288]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ef8:	2b18      	cmp	r3, #24
 8006efa:	f000 80bd 	beq.w	8007078 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	f040 809e 	bne.w	8007044 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f08:	4b42      	ldr	r3, [pc, #264]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a41      	ldr	r2, [pc, #260]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fb f866 	bl	8001fe4 <HAL_GetTick>
 8006f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fb f862 	bl	8001fe4 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e10e      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f2e:	4b39      	ldr	r3, [pc, #228]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f3a:	4b36      	ldr	r3, [pc, #216]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f3e:	4b37      	ldr	r3, [pc, #220]	@ (800701c <HAL_RCC_OscConfig+0x774>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006f4a:	0112      	lsls	r2, r2, #4
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	4931      	ldr	r1, [pc, #196]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f62:	3b01      	subs	r3, #1
 8006f64:	025b      	lsls	r3, r3, #9
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	061b      	lsls	r3, r3, #24
 8006f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f84:	4923      	ldr	r1, [pc, #140]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f8a:	4b22      	ldr	r3, [pc, #136]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8e:	4a21      	ldr	r2, [pc, #132]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f96:	4b1f      	ldr	r3, [pc, #124]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f9a:	4b21      	ldr	r3, [pc, #132]	@ (8007020 <HAL_RCC_OscConfig+0x778>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006fa2:	00d2      	lsls	r2, r2, #3
 8006fa4:	491b      	ldr	r1, [pc, #108]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006faa:	4b1a      	ldr	r3, [pc, #104]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	f023 020c 	bic.w	r2, r3, #12
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb6:	4917      	ldr	r1, [pc, #92]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fbc:	4b15      	ldr	r3, [pc, #84]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc0:	f023 0202 	bic.w	r2, r3, #2
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc8:	4912      	ldr	r1, [pc, #72]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fce:	4b11      	ldr	r3, [pc, #68]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd2:	4a10      	ldr	r2, [pc, #64]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fda:	4b0e      	ldr	r3, [pc, #56]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fde:	4a0d      	ldr	r2, [pc, #52]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fea:	4a0a      	ldr	r2, [pc, #40]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ff2:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff6:	4a07      	ldr	r2, [pc, #28]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8006ff8:	f043 0301 	orr.w	r3, r3, #1
 8006ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ffe:	4b05      	ldr	r3, [pc, #20]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a04      	ldr	r2, [pc, #16]	@ (8007014 <HAL_RCC_OscConfig+0x76c>)
 8007004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700a:	f7fa ffeb 	bl	8001fe4 <HAL_GetTick>
 800700e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007010:	e011      	b.n	8007036 <HAL_RCC_OscConfig+0x78e>
 8007012:	bf00      	nop
 8007014:	58024400 	.word	0x58024400
 8007018:	58024800 	.word	0x58024800
 800701c:	fffffc0c 	.word	0xfffffc0c
 8007020:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007024:	f7fa ffde 	bl	8001fe4 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e08a      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007036:	4b47      	ldr	r3, [pc, #284]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f0      	beq.n	8007024 <HAL_RCC_OscConfig+0x77c>
 8007042:	e082      	b.n	800714a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007044:	4b43      	ldr	r3, [pc, #268]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a42      	ldr	r2, [pc, #264]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 800704a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800704e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007050:	f7fa ffc8 	bl	8001fe4 <HAL_GetTick>
 8007054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007058:	f7fa ffc4 	bl	8001fe4 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e070      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800706a:	4b3a      	ldr	r3, [pc, #232]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f0      	bne.n	8007058 <HAL_RCC_OscConfig+0x7b0>
 8007076:	e068      	b.n	800714a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007078:	4b36      	ldr	r3, [pc, #216]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800707e:	4b35      	ldr	r3, [pc, #212]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007082:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007088:	2b01      	cmp	r3, #1
 800708a:	d031      	beq.n	80070f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f003 0203 	and.w	r2, r3, #3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007096:	429a      	cmp	r2, r3
 8007098:	d12a      	bne.n	80070f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d122      	bne.n	80070f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d11a      	bne.n	80070f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	0a5b      	lsrs	r3, r3, #9
 80070be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d111      	bne.n	80070f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	0c1b      	lsrs	r3, r3, #16
 80070d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070da:	429a      	cmp	r2, r3
 80070dc:	d108      	bne.n	80070f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	0e1b      	lsrs	r3, r3, #24
 80070e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e02b      	b.n	800714c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80070f4:	4b17      	ldr	r3, [pc, #92]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 80070f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070f8:	08db      	lsrs	r3, r3, #3
 80070fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	429a      	cmp	r2, r3
 8007108:	d01f      	beq.n	800714a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800710a:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	4a11      	ldr	r2, [pc, #68]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007116:	f7fa ff65 	bl	8001fe4 <HAL_GetTick>
 800711a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800711c:	bf00      	nop
 800711e:	f7fa ff61 	bl	8001fe4 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	4293      	cmp	r3, r2
 8007128:	d0f9      	beq.n	800711e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800712a:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 800712c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800712e:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <HAL_RCC_OscConfig+0x8b0>)
 8007130:	4013      	ands	r3, r2
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007136:	00d2      	lsls	r2, r2, #3
 8007138:	4906      	ldr	r1, [pc, #24]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 800713a:	4313      	orrs	r3, r2
 800713c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800713e:	4b05      	ldr	r3, [pc, #20]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007142:	4a04      	ldr	r2, [pc, #16]	@ (8007154 <HAL_RCC_OscConfig+0x8ac>)
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3730      	adds	r7, #48	@ 0x30
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	58024400 	.word	0x58024400
 8007158:	ffff0007 	.word	0xffff0007

0800715c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e19c      	b.n	80074aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007170:	4b8a      	ldr	r3, [pc, #552]	@ (800739c <HAL_RCC_ClockConfig+0x240>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d910      	bls.n	80071a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717e:	4b87      	ldr	r3, [pc, #540]	@ (800739c <HAL_RCC_ClockConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f023 020f 	bic.w	r2, r3, #15
 8007186:	4985      	ldr	r1, [pc, #532]	@ (800739c <HAL_RCC_ClockConfig+0x240>)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	4313      	orrs	r3, r2
 800718c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800718e:	4b83      	ldr	r3, [pc, #524]	@ (800739c <HAL_RCC_ClockConfig+0x240>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d001      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e184      	b.n	80074aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d010      	beq.n	80071ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	4b7b      	ldr	r3, [pc, #492]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d908      	bls.n	80071ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071bc:	4b78      	ldr	r3, [pc, #480]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	4975      	ldr	r1, [pc, #468]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d010      	beq.n	80071fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695a      	ldr	r2, [r3, #20]
 80071de:	4b70      	ldr	r3, [pc, #448]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d908      	bls.n	80071fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071ea:	4b6d      	ldr	r3, [pc, #436]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	496a      	ldr	r1, [pc, #424]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	d010      	beq.n	800722a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699a      	ldr	r2, [r3, #24]
 800720c:	4b64      	ldr	r3, [pc, #400]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007214:	429a      	cmp	r2, r3
 8007216:	d908      	bls.n	800722a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007218:	4b61      	ldr	r3, [pc, #388]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	495e      	ldr	r1, [pc, #376]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 8007226:	4313      	orrs	r3, r2
 8007228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d010      	beq.n	8007258 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	4b59      	ldr	r3, [pc, #356]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007242:	429a      	cmp	r2, r3
 8007244:	d908      	bls.n	8007258 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007246:	4b56      	ldr	r3, [pc, #344]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	4953      	ldr	r1, [pc, #332]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 8007254:	4313      	orrs	r3, r2
 8007256:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d010      	beq.n	8007286 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	4b4d      	ldr	r3, [pc, #308]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f003 030f 	and.w	r3, r3, #15
 8007270:	429a      	cmp	r2, r3
 8007272:	d908      	bls.n	8007286 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007274:	4b4a      	ldr	r3, [pc, #296]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f023 020f 	bic.w	r2, r3, #15
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	4947      	ldr	r1, [pc, #284]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 8007282:	4313      	orrs	r3, r2
 8007284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d055      	beq.n	800733e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007292:	4b43      	ldr	r3, [pc, #268]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	4940      	ldr	r1, [pc, #256]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d107      	bne.n	80072bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072ac:	4b3c      	ldr	r3, [pc, #240]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d121      	bne.n	80072fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0f6      	b.n	80074aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d107      	bne.n	80072d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072c4:	4b36      	ldr	r3, [pc, #216]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d115      	bne.n	80072fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0ea      	b.n	80074aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d107      	bne.n	80072ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072dc:	4b30      	ldr	r3, [pc, #192]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d109      	bne.n	80072fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0de      	b.n	80074aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072ec:	4b2c      	ldr	r3, [pc, #176]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0d6      	b.n	80074aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072fc:	4b28      	ldr	r3, [pc, #160]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f023 0207 	bic.w	r2, r3, #7
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	4925      	ldr	r1, [pc, #148]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 800730a:	4313      	orrs	r3, r2
 800730c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800730e:	f7fa fe69 	bl	8001fe4 <HAL_GetTick>
 8007312:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007314:	e00a      	b.n	800732c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007316:	f7fa fe65 	bl	8001fe4 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007324:	4293      	cmp	r3, r2
 8007326:	d901      	bls.n	800732c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e0be      	b.n	80074aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732c:	4b1c      	ldr	r3, [pc, #112]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	429a      	cmp	r2, r3
 800733c:	d1eb      	bne.n	8007316 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d010      	beq.n	800736c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68da      	ldr	r2, [r3, #12]
 800734e:	4b14      	ldr	r3, [pc, #80]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	429a      	cmp	r2, r3
 8007358:	d208      	bcs.n	800736c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800735a:	4b11      	ldr	r3, [pc, #68]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f023 020f 	bic.w	r2, r3, #15
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	490e      	ldr	r1, [pc, #56]	@ (80073a0 <HAL_RCC_ClockConfig+0x244>)
 8007368:	4313      	orrs	r3, r2
 800736a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800736c:	4b0b      	ldr	r3, [pc, #44]	@ (800739c <HAL_RCC_ClockConfig+0x240>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d214      	bcs.n	80073a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737a:	4b08      	ldr	r3, [pc, #32]	@ (800739c <HAL_RCC_ClockConfig+0x240>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f023 020f 	bic.w	r2, r3, #15
 8007382:	4906      	ldr	r1, [pc, #24]	@ (800739c <HAL_RCC_ClockConfig+0x240>)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	4313      	orrs	r3, r2
 8007388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800738a:	4b04      	ldr	r3, [pc, #16]	@ (800739c <HAL_RCC_ClockConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d005      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e086      	b.n	80074aa <HAL_RCC_ClockConfig+0x34e>
 800739c:	52002000 	.word	0x52002000
 80073a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d010      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	4b3f      	ldr	r3, [pc, #252]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073bc:	429a      	cmp	r2, r3
 80073be:	d208      	bcs.n	80073d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073c0:	4b3c      	ldr	r3, [pc, #240]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	4939      	ldr	r1, [pc, #228]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d010      	beq.n	8007400 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	4b34      	ldr	r3, [pc, #208]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d208      	bcs.n	8007400 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ee:	4b31      	ldr	r3, [pc, #196]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	492e      	ldr	r1, [pc, #184]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	d010      	beq.n	800742e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699a      	ldr	r2, [r3, #24]
 8007410:	4b28      	ldr	r3, [pc, #160]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007418:	429a      	cmp	r2, r3
 800741a:	d208      	bcs.n	800742e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800741c:	4b25      	ldr	r3, [pc, #148]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	4922      	ldr	r1, [pc, #136]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 800742a:	4313      	orrs	r3, r2
 800742c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d010      	beq.n	800745c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69da      	ldr	r2, [r3, #28]
 800743e:	4b1d      	ldr	r3, [pc, #116]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007446:	429a      	cmp	r2, r3
 8007448:	d208      	bcs.n	800745c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800744a:	4b1a      	ldr	r3, [pc, #104]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	4917      	ldr	r1, [pc, #92]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 8007458:	4313      	orrs	r3, r2
 800745a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800745c:	f000 f834 	bl	80074c8 <HAL_RCC_GetSysClockFreq>
 8007460:	4602      	mov	r2, r0
 8007462:	4b14      	ldr	r3, [pc, #80]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	4912      	ldr	r1, [pc, #72]	@ (80074b8 <HAL_RCC_ClockConfig+0x35c>)
 800746e:	5ccb      	ldrb	r3, [r1, r3]
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
 8007478:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800747a:	4b0e      	ldr	r3, [pc, #56]	@ (80074b4 <HAL_RCC_ClockConfig+0x358>)
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	4a0d      	ldr	r2, [pc, #52]	@ (80074b8 <HAL_RCC_ClockConfig+0x35c>)
 8007484:	5cd3      	ldrb	r3, [r2, r3]
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
 8007490:	4a0a      	ldr	r2, [pc, #40]	@ (80074bc <HAL_RCC_ClockConfig+0x360>)
 8007492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007494:	4a0a      	ldr	r2, [pc, #40]	@ (80074c0 <HAL_RCC_ClockConfig+0x364>)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800749a:	4b0a      	ldr	r3, [pc, #40]	@ (80074c4 <HAL_RCC_ClockConfig+0x368>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7f9 fe38 	bl	8001114 <HAL_InitTick>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	58024400 	.word	0x58024400
 80074b8:	08013f98 	.word	0x08013f98
 80074bc:	24000004 	.word	0x24000004
 80074c0:	24000000 	.word	0x24000000
 80074c4:	24000008 	.word	0x24000008

080074c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b089      	sub	sp, #36	@ 0x24
 80074cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074ce:	4bb3      	ldr	r3, [pc, #716]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074d6:	2b18      	cmp	r3, #24
 80074d8:	f200 8155 	bhi.w	8007786 <HAL_RCC_GetSysClockFreq+0x2be>
 80074dc:	a201      	add	r2, pc, #4	@ (adr r2, 80074e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e2:	bf00      	nop
 80074e4:	08007549 	.word	0x08007549
 80074e8:	08007787 	.word	0x08007787
 80074ec:	08007787 	.word	0x08007787
 80074f0:	08007787 	.word	0x08007787
 80074f4:	08007787 	.word	0x08007787
 80074f8:	08007787 	.word	0x08007787
 80074fc:	08007787 	.word	0x08007787
 8007500:	08007787 	.word	0x08007787
 8007504:	0800756f 	.word	0x0800756f
 8007508:	08007787 	.word	0x08007787
 800750c:	08007787 	.word	0x08007787
 8007510:	08007787 	.word	0x08007787
 8007514:	08007787 	.word	0x08007787
 8007518:	08007787 	.word	0x08007787
 800751c:	08007787 	.word	0x08007787
 8007520:	08007787 	.word	0x08007787
 8007524:	08007575 	.word	0x08007575
 8007528:	08007787 	.word	0x08007787
 800752c:	08007787 	.word	0x08007787
 8007530:	08007787 	.word	0x08007787
 8007534:	08007787 	.word	0x08007787
 8007538:	08007787 	.word	0x08007787
 800753c:	08007787 	.word	0x08007787
 8007540:	08007787 	.word	0x08007787
 8007544:	0800757b 	.word	0x0800757b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007548:	4b94      	ldr	r3, [pc, #592]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d009      	beq.n	8007568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007554:	4b91      	ldr	r3, [pc, #580]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	08db      	lsrs	r3, r3, #3
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	4a90      	ldr	r2, [pc, #576]	@ (80077a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007560:	fa22 f303 	lsr.w	r3, r2, r3
 8007564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007566:	e111      	b.n	800778c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007568:	4b8d      	ldr	r3, [pc, #564]	@ (80077a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800756a:	61bb      	str	r3, [r7, #24]
      break;
 800756c:	e10e      	b.n	800778c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800756e:	4b8d      	ldr	r3, [pc, #564]	@ (80077a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007570:	61bb      	str	r3, [r7, #24]
      break;
 8007572:	e10b      	b.n	800778c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007574:	4b8c      	ldr	r3, [pc, #560]	@ (80077a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007576:	61bb      	str	r3, [r7, #24]
      break;
 8007578:	e108      	b.n	800778c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800757a:	4b88      	ldr	r3, [pc, #544]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007584:	4b85      	ldr	r3, [pc, #532]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800758e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007590:	4b82      	ldr	r3, [pc, #520]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800759a:	4b80      	ldr	r3, [pc, #512]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759e:	08db      	lsrs	r3, r3, #3
 80075a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80e1 	beq.w	8007780 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	f000 8083 	beq.w	80076cc <HAL_RCC_GetSysClockFreq+0x204>
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	f200 80a1 	bhi.w	8007710 <HAL_RCC_GetSysClockFreq+0x248>
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_RCC_GetSysClockFreq+0x114>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d056      	beq.n	8007688 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075da:	e099      	b.n	8007710 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075dc:	4b6f      	ldr	r3, [pc, #444]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d02d      	beq.n	8007644 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075e8:	4b6c      	ldr	r3, [pc, #432]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	08db      	lsrs	r3, r3, #3
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	4a6b      	ldr	r2, [pc, #428]	@ (80077a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075f4:	fa22 f303 	lsr.w	r3, r2, r3
 80075f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	ee07 3a90 	vmov	s15, r3
 8007600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007612:	4b62      	ldr	r3, [pc, #392]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	ed97 6a02 	vldr	s12, [r7, #8]
 8007626:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80077ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007642:	e087      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80077b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007656:	4b51      	ldr	r3, [pc, #324]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007666:	ed97 6a02 	vldr	s12, [r7, #8]
 800766a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80077ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800766e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800767a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007686:	e065      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80077b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769a:	4b40      	ldr	r3, [pc, #256]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80076ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80077ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80076b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076ca:	e043      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80077b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076de:	4b2f      	ldr	r3, [pc, #188]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80076f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80077ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80076f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800770e:	e021      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80077b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800771e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007722:	4b1e      	ldr	r3, [pc, #120]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007732:	ed97 6a02 	vldr	s12, [r7, #8]
 8007736:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80077ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800773a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007752:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007754:	4b11      	ldr	r3, [pc, #68]	@ (800779c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007758:	0a5b      	lsrs	r3, r3, #9
 800775a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800775e:	3301      	adds	r3, #1
 8007760:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800776c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007778:	ee17 3a90 	vmov	r3, s15
 800777c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800777e:	e005      	b.n	800778c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	61bb      	str	r3, [r7, #24]
      break;
 8007784:	e002      	b.n	800778c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007786:	4b07      	ldr	r3, [pc, #28]	@ (80077a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007788:	61bb      	str	r3, [r7, #24]
      break;
 800778a:	bf00      	nop
  }

  return sysclockfreq;
 800778c:	69bb      	ldr	r3, [r7, #24]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3724      	adds	r7, #36	@ 0x24
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400
 80077a0:	03d09000 	.word	0x03d09000
 80077a4:	003d0900 	.word	0x003d0900
 80077a8:	007a1200 	.word	0x007a1200
 80077ac:	46000000 	.word	0x46000000
 80077b0:	4c742400 	.word	0x4c742400
 80077b4:	4a742400 	.word	0x4a742400
 80077b8:	4af42400 	.word	0x4af42400

080077bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077c2:	f7ff fe81 	bl	80074c8 <HAL_RCC_GetSysClockFreq>
 80077c6:	4602      	mov	r2, r0
 80077c8:	4b10      	ldr	r3, [pc, #64]	@ (800780c <HAL_RCC_GetHCLKFreq+0x50>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	0a1b      	lsrs	r3, r3, #8
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	490f      	ldr	r1, [pc, #60]	@ (8007810 <HAL_RCC_GetHCLKFreq+0x54>)
 80077d4:	5ccb      	ldrb	r3, [r1, r3]
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	fa22 f303 	lsr.w	r3, r2, r3
 80077de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077e0:	4b0a      	ldr	r3, [pc, #40]	@ (800780c <HAL_RCC_GetHCLKFreq+0x50>)
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	f003 030f 	and.w	r3, r3, #15
 80077e8:	4a09      	ldr	r2, [pc, #36]	@ (8007810 <HAL_RCC_GetHCLKFreq+0x54>)
 80077ea:	5cd3      	ldrb	r3, [r2, r3]
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	fa22 f303 	lsr.w	r3, r2, r3
 80077f6:	4a07      	ldr	r2, [pc, #28]	@ (8007814 <HAL_RCC_GetHCLKFreq+0x58>)
 80077f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077fa:	4a07      	ldr	r2, [pc, #28]	@ (8007818 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007800:	4b04      	ldr	r3, [pc, #16]	@ (8007814 <HAL_RCC_GetHCLKFreq+0x58>)
 8007802:	681b      	ldr	r3, [r3, #0]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	58024400 	.word	0x58024400
 8007810:	08013f98 	.word	0x08013f98
 8007814:	24000004 	.word	0x24000004
 8007818:	24000000 	.word	0x24000000

0800781c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007820:	f7ff ffcc 	bl	80077bc <HAL_RCC_GetHCLKFreq>
 8007824:	4602      	mov	r2, r0
 8007826:	4b06      	ldr	r3, [pc, #24]	@ (8007840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	091b      	lsrs	r3, r3, #4
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	4904      	ldr	r1, [pc, #16]	@ (8007844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007832:	5ccb      	ldrb	r3, [r1, r3]
 8007834:	f003 031f 	and.w	r3, r3, #31
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800783c:	4618      	mov	r0, r3
 800783e:	bd80      	pop	{r7, pc}
 8007840:	58024400 	.word	0x58024400
 8007844:	08013f98 	.word	0x08013f98

08007848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800784c:	f7ff ffb6 	bl	80077bc <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b06      	ldr	r3, [pc, #24]	@ (800786c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4904      	ldr	r1, [pc, #16]	@ (8007870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007868:	4618      	mov	r0, r3
 800786a:	bd80      	pop	{r7, pc}
 800786c:	58024400 	.word	0x58024400
 8007870:	08013f98 	.word	0x08013f98

08007874 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	223f      	movs	r2, #63	@ 0x3f
 8007882:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007884:	4b1a      	ldr	r3, [pc, #104]	@ (80078f0 <HAL_RCC_GetClockConfig+0x7c>)
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0207 	and.w	r2, r3, #7
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007890:	4b17      	ldr	r3, [pc, #92]	@ (80078f0 <HAL_RCC_GetClockConfig+0x7c>)
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800789c:	4b14      	ldr	r3, [pc, #80]	@ (80078f0 <HAL_RCC_GetClockConfig+0x7c>)
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f003 020f 	and.w	r2, r3, #15
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80078a8:	4b11      	ldr	r3, [pc, #68]	@ (80078f0 <HAL_RCC_GetClockConfig+0x7c>)
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80078b4:	4b0e      	ldr	r3, [pc, #56]	@ (80078f0 <HAL_RCC_GetClockConfig+0x7c>)
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80078c0:	4b0b      	ldr	r3, [pc, #44]	@ (80078f0 <HAL_RCC_GetClockConfig+0x7c>)
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80078cc:	4b08      	ldr	r3, [pc, #32]	@ (80078f0 <HAL_RCC_GetClockConfig+0x7c>)
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078d8:	4b06      	ldr	r3, [pc, #24]	@ (80078f4 <HAL_RCC_GetClockConfig+0x80>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 020f 	and.w	r2, r3, #15
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	58024400 	.word	0x58024400
 80078f4:	52002000 	.word	0x52002000

080078f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078fc:	b0ca      	sub	sp, #296	@ 0x128
 80078fe:	af00      	add	r7, sp, #0
 8007900:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007904:	2300      	movs	r3, #0
 8007906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800790a:	2300      	movs	r3, #0
 800790c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800791c:	2500      	movs	r5, #0
 800791e:	ea54 0305 	orrs.w	r3, r4, r5
 8007922:	d049      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800792a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800792e:	d02f      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007930:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007934:	d828      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800793a:	d01a      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800793c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007940:	d822      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800794a:	d007      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800794c:	e01c      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800794e:	4bb8      	ldr	r3, [pc, #736]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	4ab7      	ldr	r2, [pc, #732]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800795a:	e01a      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800795c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007960:	3308      	adds	r3, #8
 8007962:	2102      	movs	r1, #2
 8007964:	4618      	mov	r0, r3
 8007966:	f002 fb61 	bl	800a02c <RCCEx_PLL2_Config>
 800796a:	4603      	mov	r3, r0
 800796c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007970:	e00f      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	3328      	adds	r3, #40	@ 0x28
 8007978:	2102      	movs	r1, #2
 800797a:	4618      	mov	r0, r3
 800797c:	f002 fc08 	bl	800a190 <RCCEx_PLL3_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007986:	e004      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800799a:	4ba5      	ldr	r3, [pc, #660]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800799c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800799e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079a8:	4aa1      	ldr	r2, [pc, #644]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079aa:	430b      	orrs	r3, r1
 80079ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80079ae:	e003      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80079c4:	f04f 0900 	mov.w	r9, #0
 80079c8:	ea58 0309 	orrs.w	r3, r8, r9
 80079cc:	d047      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d82a      	bhi.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80079d8:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	080079f5 	.word	0x080079f5
 80079e4:	08007a03 	.word	0x08007a03
 80079e8:	08007a19 	.word	0x08007a19
 80079ec:	08007a37 	.word	0x08007a37
 80079f0:	08007a37 	.word	0x08007a37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b8e      	ldr	r3, [pc, #568]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f8:	4a8d      	ldr	r2, [pc, #564]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a00:	e01a      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	3308      	adds	r3, #8
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f002 fb0e 	bl	800a02c <RCCEx_PLL2_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a16:	e00f      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	3328      	adds	r3, #40	@ 0x28
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f002 fbb5 	bl	800a190 <RCCEx_PLL3_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a2c:	e004      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a34:	e000      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a40:	4b7b      	ldr	r3, [pc, #492]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a44:	f023 0107 	bic.w	r1, r3, #7
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a4e:	4a78      	ldr	r2, [pc, #480]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a54:	e003      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007a6a:	f04f 0b00 	mov.w	fp, #0
 8007a6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007a72:	d04c      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a7e:	d030      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a84:	d829      	bhi.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a88:	d02d      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a8c:	d825      	bhi.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a8e:	2b80      	cmp	r3, #128	@ 0x80
 8007a90:	d018      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007a92:	2b80      	cmp	r3, #128	@ 0x80
 8007a94:	d821      	bhi.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007a9a:	2b40      	cmp	r3, #64	@ 0x40
 8007a9c:	d007      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007a9e:	e01c      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa0:	4b63      	ldr	r3, [pc, #396]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa4:	4a62      	ldr	r2, [pc, #392]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007aac:	e01c      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f002 fab8 	bl	800a02c <RCCEx_PLL2_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ac2:	e011      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac8:	3328      	adds	r3, #40	@ 0x28
 8007aca:	2100      	movs	r1, #0
 8007acc:	4618      	mov	r0, r3
 8007ace:	f002 fb5f 	bl	800a190 <RCCEx_PLL3_Config>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ad8:	e006      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ae0:	e002      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007af0:	4b4f      	ldr	r3, [pc, #316]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007af4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007afe:	4a4c      	ldr	r2, [pc, #304]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b00:	430b      	orrs	r3, r1
 8007b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8007b04:	e003      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007b1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007b24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	d053      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b3a:	d035      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007b3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b40:	d82e      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007b46:	d031      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007b48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007b4c:	d828      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b52:	d01a      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007b54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b58:	d822      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d003      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b62:	d007      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007b64:	e01c      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b66:	4b32      	ldr	r3, [pc, #200]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6a:	4a31      	ldr	r2, [pc, #196]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b72:	e01c      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	3308      	adds	r3, #8
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f002 fa55 	bl	800a02c <RCCEx_PLL2_Config>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b88:	e011      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8e:	3328      	adds	r3, #40	@ 0x28
 8007b90:	2100      	movs	r1, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f002 fafc 	bl	800a190 <RCCEx_PLL3_Config>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b9e:	e006      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ba6:	e002      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ba8:	bf00      	nop
 8007baa:	e000      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10b      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bcc:	e003      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007be2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007be6:	2300      	movs	r3, #0
 8007be8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007bec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	d056      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007bfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c02:	d038      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c08:	d831      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c0e:	d034      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007c10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c14:	d82b      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c1a:	d01d      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c20:	d825      	bhi.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d006      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c2a:	d00a      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007c2c:	e01f      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c2e:	bf00      	nop
 8007c30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c34:	4ba2      	ldr	r3, [pc, #648]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	4aa1      	ldr	r2, [pc, #644]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c40:	e01c      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	3308      	adds	r3, #8
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f002 f9ee 	bl	800a02c <RCCEx_PLL2_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c56:	e011      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	3328      	adds	r3, #40	@ 0x28
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f002 fa95 	bl	800a190 <RCCEx_PLL3_Config>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c6c:	e006      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c76:	bf00      	nop
 8007c78:	e000      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007c84:	4b8e      	ldr	r3, [pc, #568]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007c94:	4a8a      	ldr	r2, [pc, #552]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c96:	430b      	orrs	r3, r1
 8007c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c9a:	e003      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007cba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	d03a      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cca:	2b30      	cmp	r3, #48	@ 0x30
 8007ccc:	d01f      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007cce:	2b30      	cmp	r3, #48	@ 0x30
 8007cd0:	d819      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d00c      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d815      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d019      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d111      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ce2:	4b77      	ldr	r3, [pc, #476]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce6:	4a76      	ldr	r2, [pc, #472]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007cee:	e011      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f002 f997 	bl	800a02c <RCCEx_PLL2_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d04:	e006      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d0c:	e002      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d0e:	bf00      	nop
 8007d10:	e000      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d1c:	4b68      	ldr	r3, [pc, #416]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d2a:	4a65      	ldr	r2, [pc, #404]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d30:	e003      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007d46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4313      	orrs	r3, r2
 8007d58:	d051      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d64:	d035      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007d66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d6a:	d82e      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d70:	d031      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007d72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d76:	d828      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d7c:	d01a      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d82:	d822      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d003      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d8c:	d007      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007d8e:	e01c      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d90:	4b4b      	ldr	r3, [pc, #300]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	4a4a      	ldr	r2, [pc, #296]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007d9c:	e01c      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da2:	3308      	adds	r3, #8
 8007da4:	2100      	movs	r1, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f002 f940 	bl	800a02c <RCCEx_PLL2_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007db2:	e011      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db8:	3328      	adds	r3, #40	@ 0x28
 8007dba:	2100      	movs	r1, #0
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f002 f9e7 	bl	800a190 <RCCEx_PLL3_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007dc8:	e006      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dd0:	e002      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007dd2:	bf00      	nop
 8007dd4:	e000      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007de0:	4b37      	ldr	r3, [pc, #220]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007de4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dee:	4a34      	ldr	r2, [pc, #208]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007df0:	430b      	orrs	r3, r1
 8007df2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007df4:	e003      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007e14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	d056      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e28:	d033      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007e2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e2e:	d82c      	bhi.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e34:	d02f      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e3a:	d826      	bhi.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e40:	d02b      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007e42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e46:	d820      	bhi.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4c:	d012      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e52:	d81a      	bhi.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d022      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e5c:	d115      	bne.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e62:	3308      	adds	r3, #8
 8007e64:	2101      	movs	r1, #1
 8007e66:	4618      	mov	r0, r3
 8007e68:	f002 f8e0 	bl	800a02c <RCCEx_PLL2_Config>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e72:	e015      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e78:	3328      	adds	r3, #40	@ 0x28
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f002 f987 	bl	800a190 <RCCEx_PLL3_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007e88:	e00a      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e90:	e006      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e92:	bf00      	nop
 8007e94:	e004      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e96:	bf00      	nop
 8007e98:	e002      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e9a:	bf00      	nop
 8007e9c:	e000      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10d      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ea8:	4b05      	ldr	r3, [pc, #20]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eb6:	4a02      	ldr	r2, [pc, #8]	@ (8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ebc:	e006      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007ebe:	bf00      	nop
 8007ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007edc:	2300      	movs	r3, #0
 8007ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ee2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	d055      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ef8:	d033      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007efe:	d82c      	bhi.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f04:	d02f      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0a:	d826      	bhi.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f10:	d02b      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f16:	d820      	bhi.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f1c:	d012      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f22:	d81a      	bhi.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d022      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f2c:	d115      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f32:	3308      	adds	r3, #8
 8007f34:	2101      	movs	r1, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f002 f878 	bl	800a02c <RCCEx_PLL2_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f42:	e015      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f48:	3328      	adds	r3, #40	@ 0x28
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f002 f91f 	bl	800a190 <RCCEx_PLL3_Config>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007f58:	e00a      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f60:	e006      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f62:	bf00      	nop
 8007f64:	e004      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f66:	bf00      	nop
 8007f68:	e002      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f6a:	bf00      	nop
 8007f6c:	e000      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10b      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f78:	4ba3      	ldr	r3, [pc, #652]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f7c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f88:	4a9f      	ldr	r2, [pc, #636]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f8a:	430b      	orrs	r3, r1
 8007f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f8e:	e003      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	d037      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc2:	d00e      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc8:	d816      	bhi.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d018      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fd2:	d111      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd8:	4a8b      	ldr	r2, [pc, #556]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007fe0:	e00f      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	2101      	movs	r1, #1
 8007fea:	4618      	mov	r0, r3
 8007fec:	f002 f81e 	bl	800a02c <RCCEx_PLL2_Config>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007ff6:	e004      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ffe:	e000      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10a      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800800a:	4b7f      	ldr	r3, [pc, #508]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800800c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800800e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008018:	4a7b      	ldr	r2, [pc, #492]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800801a:	430b      	orrs	r3, r1
 800801c:	6513      	str	r3, [r2, #80]	@ 0x50
 800801e:	e003      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008038:	2300      	movs	r3, #0
 800803a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800803e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008042:	460b      	mov	r3, r1
 8008044:	4313      	orrs	r3, r2
 8008046:	d039      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800804e:	2b03      	cmp	r3, #3
 8008050:	d81c      	bhi.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008052:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	08008095 	.word	0x08008095
 800805c:	08008069 	.word	0x08008069
 8008060:	08008077 	.word	0x08008077
 8008064:	08008095 	.word	0x08008095
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008068:	4b67      	ldr	r3, [pc, #412]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	4a66      	ldr	r2, [pc, #408]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800806e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008074:	e00f      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807a:	3308      	adds	r3, #8
 800807c:	2102      	movs	r1, #2
 800807e:	4618      	mov	r0, r3
 8008080:	f001 ffd4 	bl	800a02c <RCCEx_PLL2_Config>
 8008084:	4603      	mov	r3, r0
 8008086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800808a:	e004      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008092:	e000      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800809e:	4b5a      	ldr	r3, [pc, #360]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a2:	f023 0103 	bic.w	r1, r3, #3
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ac:	4a56      	ldr	r2, [pc, #344]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080ae:	430b      	orrs	r3, r1
 80080b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080b2:	e003      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80080c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080cc:	2300      	movs	r3, #0
 80080ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80080d6:	460b      	mov	r3, r1
 80080d8:	4313      	orrs	r3, r2
 80080da:	f000 809f 	beq.w	800821c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080de:	4b4b      	ldr	r3, [pc, #300]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a4a      	ldr	r2, [pc, #296]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80080e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080ea:	f7f9 ff7b 	bl	8001fe4 <HAL_GetTick>
 80080ee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080f2:	e00b      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080f4:	f7f9 ff76 	bl	8001fe4 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b64      	cmp	r3, #100	@ 0x64
 8008102:	d903      	bls.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800810a:	e005      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800810c:	4b3f      	ldr	r3, [pc, #252]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0ed      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811c:	2b00      	cmp	r3, #0
 800811e:	d179      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008120:	4b39      	ldr	r3, [pc, #228]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008122:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800812c:	4053      	eors	r3, r2
 800812e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008132:	2b00      	cmp	r3, #0
 8008134:	d015      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008136:	4b34      	ldr	r3, [pc, #208]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800813a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800813e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008142:	4b31      	ldr	r3, [pc, #196]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008146:	4a30      	ldr	r2, [pc, #192]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800814c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800814e:	4b2e      	ldr	r3, [pc, #184]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008152:	4a2d      	ldr	r2, [pc, #180]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008158:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800815a:	4a2b      	ldr	r2, [pc, #172]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800815c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008160:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800816a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800816e:	d118      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008170:	f7f9 ff38 	bl	8001fe4 <HAL_GetTick>
 8008174:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008178:	e00d      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800817a:	f7f9 ff33 	bl	8001fe4 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008184:	1ad2      	subs	r2, r2, r3
 8008186:	f241 3388 	movw	r3, #5000	@ 0x1388
 800818a:	429a      	cmp	r2, r3
 800818c:	d903      	bls.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008194:	e005      	b.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008196:	4b1c      	ldr	r3, [pc, #112]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0eb      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80081a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d129      	bne.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081ba:	d10e      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80081bc:	4b12      	ldr	r3, [pc, #72]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081cc:	091a      	lsrs	r2, r3, #4
 80081ce:	4b10      	ldr	r3, [pc, #64]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d4:	430b      	orrs	r3, r1
 80081d6:	6113      	str	r3, [r2, #16]
 80081d8:	e005      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80081da:	4b0b      	ldr	r3, [pc, #44]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	4a0a      	ldr	r2, [pc, #40]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80081e4:	6113      	str	r3, [r2, #16]
 80081e6:	4b08      	ldr	r3, [pc, #32]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081f6:	4a04      	ldr	r2, [pc, #16]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80081fc:	e00e      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008206:	e009      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008208:	58024400 	.word	0x58024400
 800820c:	58024800 	.word	0x58024800
 8008210:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800821c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f002 0301 	and.w	r3, r2, #1
 8008228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800822c:	2300      	movs	r3, #0
 800822e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008232:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008236:	460b      	mov	r3, r1
 8008238:	4313      	orrs	r3, r2
 800823a:	f000 8089 	beq.w	8008350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008244:	2b28      	cmp	r3, #40	@ 0x28
 8008246:	d86b      	bhi.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008248:	a201      	add	r2, pc, #4	@ (adr r2, 8008250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	08008329 	.word	0x08008329
 8008254:	08008321 	.word	0x08008321
 8008258:	08008321 	.word	0x08008321
 800825c:	08008321 	.word	0x08008321
 8008260:	08008321 	.word	0x08008321
 8008264:	08008321 	.word	0x08008321
 8008268:	08008321 	.word	0x08008321
 800826c:	08008321 	.word	0x08008321
 8008270:	080082f5 	.word	0x080082f5
 8008274:	08008321 	.word	0x08008321
 8008278:	08008321 	.word	0x08008321
 800827c:	08008321 	.word	0x08008321
 8008280:	08008321 	.word	0x08008321
 8008284:	08008321 	.word	0x08008321
 8008288:	08008321 	.word	0x08008321
 800828c:	08008321 	.word	0x08008321
 8008290:	0800830b 	.word	0x0800830b
 8008294:	08008321 	.word	0x08008321
 8008298:	08008321 	.word	0x08008321
 800829c:	08008321 	.word	0x08008321
 80082a0:	08008321 	.word	0x08008321
 80082a4:	08008321 	.word	0x08008321
 80082a8:	08008321 	.word	0x08008321
 80082ac:	08008321 	.word	0x08008321
 80082b0:	08008329 	.word	0x08008329
 80082b4:	08008321 	.word	0x08008321
 80082b8:	08008321 	.word	0x08008321
 80082bc:	08008321 	.word	0x08008321
 80082c0:	08008321 	.word	0x08008321
 80082c4:	08008321 	.word	0x08008321
 80082c8:	08008321 	.word	0x08008321
 80082cc:	08008321 	.word	0x08008321
 80082d0:	08008329 	.word	0x08008329
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008321 	.word	0x08008321
 80082dc:	08008321 	.word	0x08008321
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008321 	.word	0x08008321
 80082e8:	08008321 	.word	0x08008321
 80082ec:	08008321 	.word	0x08008321
 80082f0:	08008329 	.word	0x08008329
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f8:	3308      	adds	r3, #8
 80082fa:	2101      	movs	r1, #1
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fe95 	bl	800a02c <RCCEx_PLL2_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008308:	e00f      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800830a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830e:	3328      	adds	r3, #40	@ 0x28
 8008310:	2101      	movs	r1, #1
 8008312:	4618      	mov	r0, r3
 8008314:	f001 ff3c 	bl	800a190 <RCCEx_PLL3_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800831e:	e004      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008326:	e000      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800832a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10a      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008332:	4bbf      	ldr	r3, [pc, #764]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008336:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008340:	4abb      	ldr	r2, [pc, #748]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008342:	430b      	orrs	r3, r1
 8008344:	6553      	str	r3, [r2, #84]	@ 0x54
 8008346:	e003      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	f002 0302 	and.w	r3, r2, #2
 800835c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008360:	2300      	movs	r3, #0
 8008362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008366:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800836a:	460b      	mov	r3, r1
 800836c:	4313      	orrs	r3, r2
 800836e:	d041      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008376:	2b05      	cmp	r3, #5
 8008378:	d824      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800837a:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	080083cd 	.word	0x080083cd
 8008384:	08008399 	.word	0x08008399
 8008388:	080083af 	.word	0x080083af
 800838c:	080083cd 	.word	0x080083cd
 8008390:	080083cd 	.word	0x080083cd
 8008394:	080083cd 	.word	0x080083cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839c:	3308      	adds	r3, #8
 800839e:	2101      	movs	r1, #1
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 fe43 	bl	800a02c <RCCEx_PLL2_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80083ac:	e00f      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b2:	3328      	adds	r3, #40	@ 0x28
 80083b4:	2101      	movs	r1, #1
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 feea 	bl	800a190 <RCCEx_PLL3_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80083c2:	e004      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083ca:	e000      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80083cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80083d6:	4b96      	ldr	r3, [pc, #600]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083da:	f023 0107 	bic.w	r1, r3, #7
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083e4:	4a92      	ldr	r2, [pc, #584]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083e6:	430b      	orrs	r3, r1
 80083e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80083ea:	e003      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f002 0304 	and.w	r3, r2, #4
 8008400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008404:	2300      	movs	r3, #0
 8008406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800840a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800840e:	460b      	mov	r3, r1
 8008410:	4313      	orrs	r3, r2
 8008412:	d044      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800841c:	2b05      	cmp	r3, #5
 800841e:	d825      	bhi.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008420:	a201      	add	r2, pc, #4	@ (adr r2, 8008428 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008426:	bf00      	nop
 8008428:	08008475 	.word	0x08008475
 800842c:	08008441 	.word	0x08008441
 8008430:	08008457 	.word	0x08008457
 8008434:	08008475 	.word	0x08008475
 8008438:	08008475 	.word	0x08008475
 800843c:	08008475 	.word	0x08008475
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008444:	3308      	adds	r3, #8
 8008446:	2101      	movs	r1, #1
 8008448:	4618      	mov	r0, r3
 800844a:	f001 fdef 	bl	800a02c <RCCEx_PLL2_Config>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008454:	e00f      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845a:	3328      	adds	r3, #40	@ 0x28
 800845c:	2101      	movs	r1, #1
 800845e:	4618      	mov	r0, r3
 8008460:	f001 fe96 	bl	800a190 <RCCEx_PLL3_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800846a:	e004      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008472:	e000      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10b      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800847e:	4b6c      	ldr	r3, [pc, #432]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008482:	f023 0107 	bic.w	r1, r3, #7
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800848e:	4a68      	ldr	r2, [pc, #416]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008490:	430b      	orrs	r3, r1
 8008492:	6593      	str	r3, [r2, #88]	@ 0x58
 8008494:	e003      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800849a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800849e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f002 0320 	and.w	r3, r2, #32
 80084aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80084ae:	2300      	movs	r3, #0
 80084b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80084b8:	460b      	mov	r3, r1
 80084ba:	4313      	orrs	r3, r2
 80084bc:	d055      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80084be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084ca:	d033      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80084cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084d0:	d82c      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d6:	d02f      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80084d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084dc:	d826      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084e2:	d02b      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80084e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084e8:	d820      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ee:	d012      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80084f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084f4:	d81a      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d022      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80084fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084fe:	d115      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008504:	3308      	adds	r3, #8
 8008506:	2100      	movs	r1, #0
 8008508:	4618      	mov	r0, r3
 800850a:	f001 fd8f 	bl	800a02c <RCCEx_PLL2_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008514:	e015      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851a:	3328      	adds	r3, #40	@ 0x28
 800851c:	2102      	movs	r1, #2
 800851e:	4618      	mov	r0, r3
 8008520:	f001 fe36 	bl	800a190 <RCCEx_PLL3_Config>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800852a:	e00a      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008532:	e006      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008534:	bf00      	nop
 8008536:	e004      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008538:	bf00      	nop
 800853a:	e002      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800853c:	bf00      	nop
 800853e:	e000      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10b      	bne.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800854a:	4b39      	ldr	r3, [pc, #228]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800854c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800855a:	4a35      	ldr	r2, [pc, #212]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800855c:	430b      	orrs	r3, r1
 800855e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008560:	e003      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800857a:	2300      	movs	r3, #0
 800857c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008580:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008584:	460b      	mov	r3, r1
 8008586:	4313      	orrs	r3, r2
 8008588:	d058      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008592:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008596:	d033      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008598:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800859c:	d82c      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800859e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085a2:	d02f      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80085a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085a8:	d826      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085ae:	d02b      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80085b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085b4:	d820      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085ba:	d012      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80085bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085c0:	d81a      	bhi.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d022      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80085c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ca:	d115      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d0:	3308      	adds	r3, #8
 80085d2:	2100      	movs	r1, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fd29 	bl	800a02c <RCCEx_PLL2_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80085e0:	e015      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e6:	3328      	adds	r3, #40	@ 0x28
 80085e8:	2102      	movs	r1, #2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fdd0 	bl	800a190 <RCCEx_PLL3_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80085f6:	e00a      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085fe:	e006      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008600:	bf00      	nop
 8008602:	e004      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008604:	bf00      	nop
 8008606:	e002      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008608:	bf00      	nop
 800860a:	e000      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800860c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800860e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10e      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008616:	4b06      	ldr	r3, [pc, #24]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800861a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800861e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008626:	4a02      	ldr	r2, [pc, #8]	@ (8008630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008628:	430b      	orrs	r3, r1
 800862a:	6593      	str	r3, [r2, #88]	@ 0x58
 800862c:	e006      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800862e:	bf00      	nop
 8008630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800863c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008652:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008656:	460b      	mov	r3, r1
 8008658:	4313      	orrs	r3, r2
 800865a:	d055      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008660:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008664:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008668:	d033      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800866a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800866e:	d82c      	bhi.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008674:	d02f      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800867a:	d826      	bhi.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800867c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008680:	d02b      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008682:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008686:	d820      	bhi.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800868c:	d012      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800868e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008692:	d81a      	bhi.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d022      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800869c:	d115      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a2:	3308      	adds	r3, #8
 80086a4:	2100      	movs	r1, #0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 fcc0 	bl	800a02c <RCCEx_PLL2_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80086b2:	e015      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b8:	3328      	adds	r3, #40	@ 0x28
 80086ba:	2102      	movs	r1, #2
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 fd67 	bl	800a190 <RCCEx_PLL3_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80086c8:	e00a      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086d0:	e006      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086d2:	bf00      	nop
 80086d4:	e004      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80086de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10b      	bne.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80086e8:	4ba1      	ldr	r3, [pc, #644]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80086f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086f8:	4a9d      	ldr	r2, [pc, #628]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086fa:	430b      	orrs	r3, r1
 80086fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80086fe:	e003      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f002 0308 	and.w	r3, r2, #8
 8008714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008718:	2300      	movs	r3, #0
 800871a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800871e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008722:	460b      	mov	r3, r1
 8008724:	4313      	orrs	r3, r2
 8008726:	d01e      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008734:	d10c      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873a:	3328      	adds	r3, #40	@ 0x28
 800873c:	2102      	movs	r1, #2
 800873e:	4618      	mov	r0, r3
 8008740:	f001 fd26 	bl	800a190 <RCCEx_PLL3_Config>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008750:	4b87      	ldr	r3, [pc, #540]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008754:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008760:	4a83      	ldr	r2, [pc, #524]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008762:	430b      	orrs	r3, r1
 8008764:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f002 0310 	and.w	r3, r2, #16
 8008772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008776:	2300      	movs	r3, #0
 8008778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800877c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008780:	460b      	mov	r3, r1
 8008782:	4313      	orrs	r3, r2
 8008784:	d01e      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800878e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008792:	d10c      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008798:	3328      	adds	r3, #40	@ 0x28
 800879a:	2102      	movs	r1, #2
 800879c:	4618      	mov	r0, r3
 800879e:	f001 fcf7 	bl	800a190 <RCCEx_PLL3_Config>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087ae:	4b70      	ldr	r3, [pc, #448]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087be:	4a6c      	ldr	r2, [pc, #432]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c0:	430b      	orrs	r3, r1
 80087c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80087d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087d4:	2300      	movs	r3, #0
 80087d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80087de:	460b      	mov	r3, r1
 80087e0:	4313      	orrs	r3, r2
 80087e2:	d03e      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80087e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087f0:	d022      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80087f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087f6:	d81b      	bhi.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80087fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008800:	d00b      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008802:	e015      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008808:	3308      	adds	r3, #8
 800880a:	2100      	movs	r1, #0
 800880c:	4618      	mov	r0, r3
 800880e:	f001 fc0d 	bl	800a02c <RCCEx_PLL2_Config>
 8008812:	4603      	mov	r3, r0
 8008814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008818:	e00f      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800881a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800881e:	3328      	adds	r3, #40	@ 0x28
 8008820:	2102      	movs	r1, #2
 8008822:	4618      	mov	r0, r3
 8008824:	f001 fcb4 	bl	800a190 <RCCEx_PLL3_Config>
 8008828:	4603      	mov	r3, r0
 800882a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800882e:	e004      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008836:	e000      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800883a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008842:	4b4b      	ldr	r3, [pc, #300]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008846:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008852:	4a47      	ldr	r2, [pc, #284]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008854:	430b      	orrs	r3, r1
 8008856:	6593      	str	r3, [r2, #88]	@ 0x58
 8008858:	e003      	b.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800885e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800886e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008870:	2300      	movs	r3, #0
 8008872:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008874:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008878:	460b      	mov	r3, r1
 800887a:	4313      	orrs	r3, r2
 800887c:	d03b      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800887e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800888a:	d01f      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800888c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008890:	d818      	bhi.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008896:	d003      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800889c:	d007      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800889e:	e011      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a0:	4b33      	ldr	r3, [pc, #204]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a4:	4a32      	ldr	r2, [pc, #200]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80088ac:	e00f      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b2:	3328      	adds	r3, #40	@ 0x28
 80088b4:	2101      	movs	r1, #1
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 fc6a 	bl	800a190 <RCCEx_PLL3_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80088c2:	e004      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088ca:	e000      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80088cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10b      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80088d6:	4b26      	ldr	r3, [pc, #152]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e6:	4a22      	ldr	r2, [pc, #136]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e8:	430b      	orrs	r3, r1
 80088ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80088ec:	e003      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008902:	673b      	str	r3, [r7, #112]	@ 0x70
 8008904:	2300      	movs	r3, #0
 8008906:	677b      	str	r3, [r7, #116]	@ 0x74
 8008908:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800890c:	460b      	mov	r3, r1
 800890e:	4313      	orrs	r3, r2
 8008910:	d034      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800891c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008920:	d007      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008922:	e011      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008924:	4b12      	ldr	r3, [pc, #72]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	4a11      	ldr	r2, [pc, #68]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800892a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800892e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008930:	e00e      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008936:	3308      	adds	r3, #8
 8008938:	2102      	movs	r1, #2
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fb76 	bl	800a02c <RCCEx_PLL2_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008946:	e003      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800894e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10d      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008958:	4b05      	ldr	r3, [pc, #20]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800895a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800895c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008966:	4a02      	ldr	r2, [pc, #8]	@ (8008970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008968:	430b      	orrs	r3, r1
 800896a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800896c:	e006      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800896e:	bf00      	nop
 8008970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800897c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800898a:	2300      	movs	r3, #0
 800898c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800898e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008992:	460b      	mov	r3, r1
 8008994:	4313      	orrs	r3, r2
 8008996:	d00c      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899c:	3328      	adds	r3, #40	@ 0x28
 800899e:	2102      	movs	r1, #2
 80089a0:	4618      	mov	r0, r3
 80089a2:	f001 fbf5 	bl	800a190 <RCCEx_PLL3_Config>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80089be:	663b      	str	r3, [r7, #96]	@ 0x60
 80089c0:	2300      	movs	r3, #0
 80089c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80089c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80089c8:	460b      	mov	r3, r1
 80089ca:	4313      	orrs	r3, r2
 80089cc:	d038      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089da:	d018      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80089dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089e0:	d811      	bhi.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80089e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e6:	d014      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80089e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ec:	d80b      	bhi.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d011      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80089f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f6:	d106      	bne.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089f8:	4bc3      	ldr	r3, [pc, #780]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	4ac2      	ldr	r2, [pc, #776]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a04:	e008      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a0c:	e004      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a0e:	bf00      	nop
 8008a10:	e002      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a12:	bf00      	nop
 8008a14:	e000      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10b      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a20:	4bb9      	ldr	r3, [pc, #740]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a30:	4ab5      	ldr	r2, [pc, #724]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a32:	430b      	orrs	r3, r1
 8008a34:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a36:	e003      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a4e:	2300      	movs	r3, #0
 8008a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008a56:	460b      	mov	r3, r1
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	d009      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a5c:	4baa      	ldr	r3, [pc, #680]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a6a:	4aa7      	ldr	r2, [pc, #668]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a78:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a7e:	2300      	movs	r3, #0
 8008a80:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008a86:	460b      	mov	r3, r1
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	d00a      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008a9c:	4a9a      	ldr	r2, [pc, #616]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a9e:	430b      	orrs	r3, r1
 8008aa0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ab4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4313      	orrs	r3, r2
 8008abc:	d009      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008abe:	4b92      	ldr	r3, [pc, #584]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008acc:	4a8e      	ldr	r2, [pc, #568]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ae4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4313      	orrs	r3, r2
 8008aec:	d00e      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008aee:	4b86      	ldr	r3, [pc, #536]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	4a85      	ldr	r2, [pc, #532]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008af8:	6113      	str	r3, [r2, #16]
 8008afa:	4b83      	ldr	r3, [pc, #524]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008afc:	6919      	ldr	r1, [r3, #16]
 8008afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008b06:	4a80      	ldr	r2, [pc, #512]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008b18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008b22:	460b      	mov	r3, r1
 8008b24:	4313      	orrs	r3, r2
 8008b26:	d009      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b28:	4b77      	ldr	r3, [pc, #476]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b2c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b36:	4a74      	ldr	r2, [pc, #464]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008b52:	460b      	mov	r3, r1
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d00a      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b58:	4b6b      	ldr	r3, [pc, #428]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b68:	4a67      	ldr	r2, [pc, #412]	@ (8008d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	2100      	movs	r1, #0
 8008b78:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008b84:	460b      	mov	r3, r1
 8008b86:	4313      	orrs	r3, r2
 8008b88:	d011      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	3308      	adds	r3, #8
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 fa4a 	bl	800a02c <RCCEx_PLL2_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	6239      	str	r1, [r7, #32]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bc0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	d011      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	3308      	adds	r3, #8
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 fa2a 	bl	800a02c <RCCEx_PLL2_Config>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	61b9      	str	r1, [r7, #24]
 8008bfa:	f003 0304 	and.w	r3, r3, #4
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c04:	460b      	mov	r3, r1
 8008c06:	4313      	orrs	r3, r2
 8008c08:	d011      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0e:	3308      	adds	r3, #8
 8008c10:	2102      	movs	r1, #2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f001 fa0a 	bl	800a02c <RCCEx_PLL2_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	2100      	movs	r1, #0
 8008c38:	6139      	str	r1, [r7, #16]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008c44:	460b      	mov	r3, r1
 8008c46:	4313      	orrs	r3, r2
 8008c48:	d011      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4e:	3328      	adds	r3, #40	@ 0x28
 8008c50:	2100      	movs	r1, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f001 fa9c 	bl	800a190 <RCCEx_PLL3_Config>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	2100      	movs	r1, #0
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	f003 0310 	and.w	r3, r3, #16
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008c84:	460b      	mov	r3, r1
 8008c86:	4313      	orrs	r3, r2
 8008c88:	d011      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8e:	3328      	adds	r3, #40	@ 0x28
 8008c90:	2101      	movs	r1, #1
 8008c92:	4618      	mov	r0, r3
 8008c94:	f001 fa7c 	bl	800a190 <RCCEx_PLL3_Config>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	607b      	str	r3, [r7, #4]
 8008cc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	d011      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cce:	3328      	adds	r3, #40	@ 0x28
 8008cd0:	2102      	movs	r1, #2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 fa5c 	bl	800a190 <RCCEx_PLL3_Config>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008cee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	e000      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008d02:	46bd      	mov	sp, r7
 8008d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d08:	58024400 	.word	0x58024400

08008d0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b090      	sub	sp, #64	@ 0x40
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008d1e:	430b      	orrs	r3, r1
 8008d20:	f040 8094 	bne.w	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008d24:	4b9e      	ldr	r3, [pc, #632]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	f200 8087 	bhi.w	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008d36:	a201      	add	r2, pc, #4	@ (adr r2, 8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008d51 	.word	0x08008d51
 8008d40:	08008d79 	.word	0x08008d79
 8008d44:	08008da1 	.word	0x08008da1
 8008d48:	08008e3d 	.word	0x08008e3d
 8008d4c:	08008dc9 	.word	0x08008dc9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d50:	4b93      	ldr	r3, [pc, #588]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d5c:	d108      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d62:	4618      	mov	r0, r3
 8008d64:	f001 f810 	bl	8009d88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d6c:	f000 bd45 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d74:	f000 bd41 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d78:	4b89      	ldr	r3, [pc, #548]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d84:	d108      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d86:	f107 0318 	add.w	r3, r7, #24
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 fd54 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d94:	f000 bd31 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d9c:	f000 bd2d 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008da0:	4b7f      	ldr	r3, [pc, #508]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dac:	d108      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dae:	f107 030c 	add.w	r3, r7, #12
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fe94 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dbc:	f000 bd1d 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc4:	f000 bd19 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dc8:	4b75      	ldr	r3, [pc, #468]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008dd0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dd2:	4b73      	ldr	r3, [pc, #460]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d10c      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d109      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008de4:	4b6e      	ldr	r3, [pc, #440]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	08db      	lsrs	r3, r3, #3
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	4a6d      	ldr	r2, [pc, #436]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df6:	e01f      	b.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008df8:	4b69      	ldr	r3, [pc, #420]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e04:	d106      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e0c:	d102      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008e0e:	4b66      	ldr	r3, [pc, #408]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e12:	e011      	b.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e14:	4b62      	ldr	r3, [pc, #392]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e20:	d106      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e28:	d102      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e2a:	4b60      	ldr	r3, [pc, #384]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e2e:	e003      	b.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e34:	f000 bce1 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e38:	f000 bcdf 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e40:	f000 bcdb 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e48:	f000 bcd7 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e50:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008e54:	430b      	orrs	r3, r1
 8008e56:	f040 80ad 	bne.w	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008e5a:	4b51      	ldr	r3, [pc, #324]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e5e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008e62:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e6a:	d056      	beq.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e72:	f200 8090 	bhi.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e78:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e7a:	f000 8088 	beq.w	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e80:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e82:	f200 8088 	bhi.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	2b80      	cmp	r3, #128	@ 0x80
 8008e8a:	d032      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8e:	2b80      	cmp	r3, #128	@ 0x80
 8008e90:	f200 8081 	bhi.w	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9c:	2b40      	cmp	r3, #64	@ 0x40
 8008e9e:	d014      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008ea0:	e079      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008eae:	d108      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 ff67 	bl	8009d88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ebe:	f000 bc9c 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec6:	f000 bc98 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eca:	4b35      	ldr	r3, [pc, #212]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ed6:	d108      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed8:	f107 0318 	add.w	r3, r7, #24
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fcab 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee6:	f000 bc88 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eee:	f000 bc84 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008efe:	d108      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fdeb 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f0e:	f000 bc74 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f16:	f000 bc70 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f1a:	4b21      	ldr	r3, [pc, #132]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f24:	4b1e      	ldr	r3, [pc, #120]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d10c      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d109      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f36:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	08db      	lsrs	r3, r3, #3
 8008f3c:	f003 0303 	and.w	r3, r3, #3
 8008f40:	4a18      	ldr	r2, [pc, #96]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f42:	fa22 f303 	lsr.w	r3, r2, r3
 8008f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f48:	e01f      	b.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f4a:	4b15      	ldr	r3, [pc, #84]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f56:	d106      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f5e:	d102      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f60:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f64:	e011      	b.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f66:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f72:	d106      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f7a:	d102      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f80:	e003      	b.n	8008f8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008f86:	f000 bc38 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f8a:	f000 bc36 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f8e:	4b08      	ldr	r3, [pc, #32]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f92:	f000 bc32 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f96:	2300      	movs	r3, #0
 8008f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f9a:	f000 bc2e 	b.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f9e:	bf00      	nop
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	03d09000 	.word	0x03d09000
 8008fa8:	003d0900 	.word	0x003d0900
 8008fac:	007a1200 	.word	0x007a1200
 8008fb0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	f040 809c 	bne.w	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008fc2:	4b9e      	ldr	r3, [pc, #632]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008fca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008fd2:	d054      	beq.n	800907e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008fda:	f200 808b 	bhi.w	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008fe4:	f000 8083 	beq.w	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008fee:	f200 8081 	bhi.w	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ff8:	d02f      	beq.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009000:	d878      	bhi.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800900e:	d012      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009010:	e070      	b.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009012:	4b8a      	ldr	r3, [pc, #552]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800901a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800901e:	d107      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009024:	4618      	mov	r0, r3
 8009026:	f000 feaf 	bl	8009d88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800902a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800902e:	e3e4      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009034:	e3e1      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009036:	4b81      	ldr	r3, [pc, #516]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800903e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009042:	d107      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009044:	f107 0318 	add.w	r3, r7, #24
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fbf5 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009052:	e3d2      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009058:	e3cf      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800905a:	4b78      	ldr	r3, [pc, #480]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009066:	d107      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009068:	f107 030c 	add.w	r3, r7, #12
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fd37 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009076:	e3c0      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907c:	e3bd      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800907e:	4b6f      	ldr	r3, [pc, #444]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009086:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009088:	4b6c      	ldr	r3, [pc, #432]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b04      	cmp	r3, #4
 8009092:	d10c      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800909a:	4b68      	ldr	r3, [pc, #416]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	08db      	lsrs	r3, r3, #3
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	4a66      	ldr	r2, [pc, #408]	@ (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80090a6:	fa22 f303 	lsr.w	r3, r2, r3
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ac:	e01e      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090ae:	4b63      	ldr	r3, [pc, #396]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ba:	d106      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80090bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090c2:	d102      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090c4:	4b5f      	ldr	r3, [pc, #380]	@ (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c8:	e010      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090ca:	4b5c      	ldr	r3, [pc, #368]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090d6:	d106      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80090d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090de:	d102      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80090e0:	4b59      	ldr	r3, [pc, #356]	@ (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090e4:	e002      	b.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80090ea:	e386      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80090ec:	e385      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80090ee:	4b57      	ldr	r3, [pc, #348]	@ (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090f2:	e382      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80090f4:	2300      	movs	r3, #0
 80090f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090f8:	e37f      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80090fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090fe:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009102:	430b      	orrs	r3, r1
 8009104:	f040 80a7 	bne.w	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009108:	4b4c      	ldr	r3, [pc, #304]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800910a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800910c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009110:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009118:	d055      	beq.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009120:	f200 8096 	bhi.w	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009126:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800912a:	f000 8084 	beq.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009134:	f200 808c 	bhi.w	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800913e:	d030      	beq.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009146:	f200 8083 	bhi.w	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009156:	d012      	beq.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009158:	e07a      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800915a:	4b38      	ldr	r3, [pc, #224]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009166:	d107      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fe0b 	bl	8009d88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009176:	e340      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917c:	e33d      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800917e:	4b2f      	ldr	r3, [pc, #188]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800918a:	d107      	bne.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800918c:	f107 0318 	add.w	r3, r7, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fb51 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800919a:	e32e      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a0:	e32b      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091a2:	4b26      	ldr	r3, [pc, #152]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ae:	d107      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091b0:	f107 030c 	add.w	r3, r7, #12
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fc93 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091be:	e31c      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091c4:	e319      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091c6:	4b1d      	ldr	r3, [pc, #116]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091d0:	4b1a      	ldr	r3, [pc, #104]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b04      	cmp	r3, #4
 80091da:	d10c      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80091dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d109      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091e2:	4b16      	ldr	r3, [pc, #88]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	08db      	lsrs	r3, r3, #3
 80091e8:	f003 0303 	and.w	r3, r3, #3
 80091ec:	4a14      	ldr	r2, [pc, #80]	@ (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80091ee:	fa22 f303 	lsr.w	r3, r2, r3
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091f4:	e01e      	b.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091f6:	4b11      	ldr	r3, [pc, #68]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009202:	d106      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800920a:	d102      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800920c:	4b0d      	ldr	r3, [pc, #52]	@ (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009210:	e010      	b.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009212:	4b0a      	ldr	r3, [pc, #40]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800921a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800921e:	d106      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009226:	d102      	bne.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009228:	4b07      	ldr	r3, [pc, #28]	@ (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800922c:	e002      	b.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800922e:	2300      	movs	r3, #0
 8009230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009232:	e2e2      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009234:	e2e1      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009236:	4b05      	ldr	r3, [pc, #20]	@ (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923a:	e2de      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800923c:	58024400 	.word	0x58024400
 8009240:	03d09000 	.word	0x03d09000
 8009244:	003d0900 	.word	0x003d0900
 8009248:	007a1200 	.word	0x007a1200
 800924c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009254:	e2d1      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800925e:	430b      	orrs	r3, r1
 8009260:	f040 809c 	bne.w	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009264:	4b93      	ldr	r3, [pc, #588]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009268:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800926c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009274:	d054      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800927c:	f200 808b 	bhi.w	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009282:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009286:	f000 8083 	beq.w	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009290:	f200 8081 	bhi.w	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800929a:	d02f      	beq.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800929c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092a2:	d878      	bhi.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092b0:	d012      	beq.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80092b2:	e070      	b.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092b4:	4b7f      	ldr	r3, [pc, #508]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092c0:	d107      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fd5e 	bl	8009d88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092d0:	e293      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d6:	e290      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092d8:	4b76      	ldr	r3, [pc, #472]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092e4:	d107      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e6:	f107 0318 	add.w	r3, r7, #24
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 faa4 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092f4:	e281      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fa:	e27e      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092fc:	4b6d      	ldr	r3, [pc, #436]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009308:	d107      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800930a:	f107 030c 	add.w	r3, r7, #12
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fbe6 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009318:	e26f      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931e:	e26c      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009320:	4b64      	ldr	r3, [pc, #400]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009324:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009328:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800932a:	4b62      	ldr	r3, [pc, #392]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b04      	cmp	r3, #4
 8009334:	d10c      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009338:	2b00      	cmp	r3, #0
 800933a:	d109      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800933c:	4b5d      	ldr	r3, [pc, #372]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	08db      	lsrs	r3, r3, #3
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	4a5c      	ldr	r2, [pc, #368]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009348:	fa22 f303 	lsr.w	r3, r2, r3
 800934c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800934e:	e01e      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009350:	4b58      	ldr	r3, [pc, #352]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800935c:	d106      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800935e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009364:	d102      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009366:	4b55      	ldr	r3, [pc, #340]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800936a:	e010      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800936c:	4b51      	ldr	r3, [pc, #324]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009378:	d106      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800937a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009380:	d102      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009382:	4b4f      	ldr	r3, [pc, #316]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009386:	e002      	b.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009388:	2300      	movs	r3, #0
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800938c:	e235      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800938e:	e234      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009390:	4b4c      	ldr	r3, [pc, #304]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009394:	e231      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939a:	e22e      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800939c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093a0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80093a4:	430b      	orrs	r3, r1
 80093a6:	f040 808f 	bne.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80093aa:	4b42      	ldr	r3, [pc, #264]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80093ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ae:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80093b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80093b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093ba:	d06b      	beq.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80093bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093c2:	d874      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093ca:	d056      	beq.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80093d2:	d86c      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093da:	d03b      	beq.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80093e2:	d864      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ea:	d021      	beq.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80093ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093f2:	d85c      	bhi.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80093fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009400:	d004      	beq.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009402:	e054      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009404:	f7fe fa0a 	bl	800781c <HAL_RCC_GetPCLK1Freq>
 8009408:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800940a:	e1f6      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800940c:	4b29      	ldr	r3, [pc, #164]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009418:	d107      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800941a:	f107 0318 	add.w	r3, r7, #24
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fa0a 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009428:	e1e7      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800942e:	e1e4      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009430:	4b20      	ldr	r3, [pc, #128]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800943c:	d107      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943e:	f107 030c 	add.w	r3, r7, #12
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fb4c 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800944c:	e1d5      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009452:	e1d2      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009454:	4b17      	ldr	r3, [pc, #92]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b04      	cmp	r3, #4
 800945e:	d109      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009460:	4b14      	ldr	r3, [pc, #80]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	08db      	lsrs	r3, r3, #3
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	4a13      	ldr	r2, [pc, #76]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800946c:	fa22 f303 	lsr.w	r3, r2, r3
 8009470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009472:	e1c2      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009478:	e1bf      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800947a:	4b0e      	ldr	r3, [pc, #56]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009486:	d102      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009488:	4b0c      	ldr	r3, [pc, #48]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800948a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800948c:	e1b5      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009492:	e1b2      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009494:	4b07      	ldr	r3, [pc, #28]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800949c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094a0:	d102      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80094a2:	4b07      	ldr	r3, [pc, #28]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80094a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094a6:	e1a8      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ac:	e1a5      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b2:	e1a2      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80094b4:	58024400 	.word	0x58024400
 80094b8:	03d09000 	.word	0x03d09000
 80094bc:	003d0900 	.word	0x003d0900
 80094c0:	007a1200 	.word	0x007a1200
 80094c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80094c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094cc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80094d0:	430b      	orrs	r3, r1
 80094d2:	d173      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80094d4:	4b9c      	ldr	r3, [pc, #624]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80094dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80094de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094e4:	d02f      	beq.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094ec:	d863      	bhi.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80094ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d004      	beq.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094fa:	d012      	beq.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80094fc:	e05b      	b.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094fe:	4b92      	ldr	r3, [pc, #584]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800950a:	d107      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800950c:	f107 0318 	add.w	r3, r7, #24
 8009510:	4618      	mov	r0, r3
 8009512:	f000 f991 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951a:	e16e      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009520:	e16b      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009522:	4b89      	ldr	r3, [pc, #548]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800952a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800952e:	d107      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009530:	f107 030c 	add.w	r3, r7, #12
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fad3 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800953e:	e15c      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009544:	e159      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009546:	4b80      	ldr	r3, [pc, #512]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800954a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800954e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009550:	4b7d      	ldr	r3, [pc, #500]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b04      	cmp	r3, #4
 800955a:	d10c      	bne.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800955c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955e:	2b00      	cmp	r3, #0
 8009560:	d109      	bne.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009562:	4b79      	ldr	r3, [pc, #484]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	08db      	lsrs	r3, r3, #3
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	4a77      	ldr	r2, [pc, #476]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800956e:	fa22 f303 	lsr.w	r3, r2, r3
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009574:	e01e      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009576:	4b74      	ldr	r3, [pc, #464]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800957e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009582:	d106      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800958a:	d102      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800958c:	4b70      	ldr	r3, [pc, #448]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800958e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009590:	e010      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009592:	4b6d      	ldr	r3, [pc, #436]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800959a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800959e:	d106      	bne.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80095a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095a6:	d102      	bne.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095a8:	4b6a      	ldr	r3, [pc, #424]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80095aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ac:	e002      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80095b2:	e122      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80095b4:	e121      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ba:	e11e      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80095bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095c0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80095c4:	430b      	orrs	r3, r1
 80095c6:	d133      	bne.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80095c8:	4b5f      	ldr	r3, [pc, #380]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80095d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d004      	beq.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095de:	d012      	beq.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80095e0:	e023      	b.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095e2:	4b59      	ldr	r3, [pc, #356]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095ee:	d107      	bne.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 fbc7 	bl	8009d88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095fe:	e0fc      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009604:	e0f9      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009606:	4b50      	ldr	r3, [pc, #320]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800960e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009612:	d107      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009614:	f107 0318 	add.w	r3, r7, #24
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f90d 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009622:	e0ea      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009628:	e0e7      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962e:	e0e4      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009634:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009638:	430b      	orrs	r3, r1
 800963a:	f040 808d 	bne.w	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800963e:	4b42      	ldr	r3, [pc, #264]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009642:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009646:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800964e:	d06b      	beq.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009656:	d874      	bhi.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800965e:	d056      	beq.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009666:	d86c      	bhi.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800966e:	d03b      	beq.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009672:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009676:	d864      	bhi.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800967e:	d021      	beq.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009686:	d85c      	bhi.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	2b00      	cmp	r3, #0
 800968c:	d004      	beq.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009694:	d004      	beq.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009696:	e054      	b.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009698:	f000 f8b8 	bl	800980c <HAL_RCCEx_GetD3PCLK1Freq>
 800969c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800969e:	e0ac      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096a0:	4b29      	ldr	r3, [pc, #164]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096ac:	d107      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ae:	f107 0318 	add.w	r3, r7, #24
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 f8c0 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096bc:	e09d      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c2:	e09a      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096c4:	4b20      	ldr	r3, [pc, #128]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d0:	d107      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d2:	f107 030c 	add.w	r3, r7, #12
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fa02 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096e0:	e08b      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e6:	e088      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096e8:	4b17      	ldr	r3, [pc, #92]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d109      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096f4:	4b14      	ldr	r3, [pc, #80]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	08db      	lsrs	r3, r3, #3
 80096fa:	f003 0303 	and.w	r3, r3, #3
 80096fe:	4a13      	ldr	r2, [pc, #76]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009700:	fa22 f303 	lsr.w	r3, r2, r3
 8009704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009706:	e078      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970c:	e075      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800970e:	4b0e      	ldr	r3, [pc, #56]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800971a:	d102      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800971c:	4b0c      	ldr	r3, [pc, #48]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009720:	e06b      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009726:	e068      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009728:	4b07      	ldr	r3, [pc, #28]	@ (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009734:	d102      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009736:	4b07      	ldr	r3, [pc, #28]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800973a:	e05e      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009740:	e05b      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009746:	e058      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009748:	58024400 	.word	0x58024400
 800974c:	03d09000 	.word	0x03d09000
 8009750:	003d0900 	.word	0x003d0900
 8009754:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800975c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009760:	430b      	orrs	r3, r1
 8009762:	d148      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009764:	4b27      	ldr	r3, [pc, #156]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009768:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800976c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800976e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009774:	d02a      	beq.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800977c:	d838      	bhi.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800977e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800978a:	d00d      	beq.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800978c:	e030      	b.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800978e:	4b1d      	ldr	r3, [pc, #116]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800979a:	d102      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800979c:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a0:	e02b      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a6:	e028      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097a8:	4b16      	ldr	r3, [pc, #88]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097b4:	d107      	bne.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fae4 	bl	8009d88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097c4:	e019      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ca:	e016      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097d8:	d107      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097da:	f107 0318 	add.w	r3, r7, #24
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f82a 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e8:	e007      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ee:	e004      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097f4:	e001      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80097fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3740      	adds	r7, #64	@ 0x40
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	58024400 	.word	0x58024400
 8009808:	007a1200 	.word	0x007a1200

0800980c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009810:	f7fd ffd4 	bl	80077bc <HAL_RCC_GetHCLKFreq>
 8009814:	4602      	mov	r2, r0
 8009816:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	091b      	lsrs	r3, r3, #4
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	4904      	ldr	r1, [pc, #16]	@ (8009834 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009822:	5ccb      	ldrb	r3, [r1, r3]
 8009824:	f003 031f 	and.w	r3, r3, #31
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800982c:	4618      	mov	r0, r3
 800982e:	bd80      	pop	{r7, pc}
 8009830:	58024400 	.word	0x58024400
 8009834:	08013f98 	.word	0x08013f98

08009838 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009838:	b480      	push	{r7}
 800983a:	b089      	sub	sp, #36	@ 0x24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009840:	4ba1      	ldr	r3, [pc, #644]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009844:	f003 0303 	and.w	r3, r3, #3
 8009848:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800984a:	4b9f      	ldr	r3, [pc, #636]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800984c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984e:	0b1b      	lsrs	r3, r3, #12
 8009850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009854:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009856:	4b9c      	ldr	r3, [pc, #624]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985a:	091b      	lsrs	r3, r3, #4
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009862:	4b99      	ldr	r3, [pc, #612]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009866:	08db      	lsrs	r3, r3, #3
 8009868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	fb02 f303 	mul.w	r3, r2, r3
 8009872:	ee07 3a90 	vmov	s15, r3
 8009876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 8111 	beq.w	8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	2b02      	cmp	r3, #2
 800988a:	f000 8083 	beq.w	8009994 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	2b02      	cmp	r3, #2
 8009892:	f200 80a1 	bhi.w	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d056      	beq.n	8009950 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80098a2:	e099      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a4:	4b88      	ldr	r3, [pc, #544]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0320 	and.w	r3, r3, #32
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d02d      	beq.n	800990c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098b0:	4b85      	ldr	r3, [pc, #532]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	08db      	lsrs	r3, r3, #3
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	4a84      	ldr	r2, [pc, #528]	@ (8009acc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
 80098c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	ee07 3a90 	vmov	s15, r3
 80098c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b7b      	ldr	r3, [pc, #492]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800990a:	e087      	b.n	8009a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b6a      	ldr	r3, [pc, #424]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009932:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800994e:	e065      	b.n	8009a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b59      	ldr	r3, [pc, #356]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a03 	vldr	s12, [r7, #12]
 8009976:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009992:	e043      	b.n	8009a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b48      	ldr	r3, [pc, #288]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099d6:	e021      	b.n	8009a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ea:	4b37      	ldr	r3, [pc, #220]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80099fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a20:	0a5b      	lsrs	r3, r3, #9
 8009a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a42:	ee17 2a90 	vmov	r2, s15
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a4e:	0c1b      	lsrs	r3, r3, #16
 8009a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a54:	ee07 3a90 	vmov	s15, r3
 8009a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a70:	ee17 2a90 	vmov	r2, s15
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a78:	4b13      	ldr	r3, [pc, #76]	@ (8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7c:	0e1b      	lsrs	r3, r3, #24
 8009a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9e:	ee17 2a90 	vmov	r2, s15
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009aa6:	e008      	b.n	8009aba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	609a      	str	r2, [r3, #8]
}
 8009aba:	bf00      	nop
 8009abc:	3724      	adds	r7, #36	@ 0x24
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	58024400 	.word	0x58024400
 8009acc:	03d09000 	.word	0x03d09000
 8009ad0:	46000000 	.word	0x46000000
 8009ad4:	4c742400 	.word	0x4c742400
 8009ad8:	4a742400 	.word	0x4a742400
 8009adc:	4af42400 	.word	0x4af42400

08009ae0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b089      	sub	sp, #36	@ 0x24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ae8:	4ba1      	ldr	r3, [pc, #644]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aec:	f003 0303 	and.w	r3, r3, #3
 8009af0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009af2:	4b9f      	ldr	r3, [pc, #636]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af6:	0d1b      	lsrs	r3, r3, #20
 8009af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009afc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009afe:	4b9c      	ldr	r3, [pc, #624]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b02:	0a1b      	lsrs	r3, r3, #8
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009b0a:	4b99      	ldr	r3, [pc, #612]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0e:	08db      	lsrs	r3, r3, #3
 8009b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	fb02 f303 	mul.w	r3, r2, r3
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 8111 	beq.w	8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	f000 8083 	beq.w	8009c3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	f200 80a1 	bhi.w	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d056      	beq.n	8009bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b4a:	e099      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b4c:	4b88      	ldr	r3, [pc, #544]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d02d      	beq.n	8009bb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b58:	4b85      	ldr	r3, [pc, #532]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	08db      	lsrs	r3, r3, #3
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	4a84      	ldr	r2, [pc, #528]	@ (8009d74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b64:	fa22 f303 	lsr.w	r3, r2, r3
 8009b68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	ee07 3a90 	vmov	s15, r3
 8009b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b82:	4b7b      	ldr	r3, [pc, #492]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bb2:	e087      	b.n	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bf6:	e065      	b.n	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0a:	4b59      	ldr	r3, [pc, #356]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c3a:	e043      	b.n	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4e:	4b48      	ldr	r3, [pc, #288]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c7e:	e021      	b.n	8009cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c92:	4b37      	ldr	r3, [pc, #220]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9a:	ee07 3a90 	vmov	s15, r3
 8009c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ca6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc8:	0a5b      	lsrs	r3, r3, #9
 8009cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cea:	ee17 2a90 	vmov	r2, s15
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf6:	0c1b      	lsrs	r3, r3, #16
 8009cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cfc:	ee07 3a90 	vmov	s15, r3
 8009d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d18:	ee17 2a90 	vmov	r2, s15
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009d20:	4b13      	ldr	r3, [pc, #76]	@ (8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d24:	0e1b      	lsrs	r3, r3, #24
 8009d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d46:	ee17 2a90 	vmov	r2, s15
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d4e:	e008      	b.n	8009d62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	609a      	str	r2, [r3, #8]
}
 8009d62:	bf00      	nop
 8009d64:	3724      	adds	r7, #36	@ 0x24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	58024400 	.word	0x58024400
 8009d74:	03d09000 	.word	0x03d09000
 8009d78:	46000000 	.word	0x46000000
 8009d7c:	4c742400 	.word	0x4c742400
 8009d80:	4a742400 	.word	0x4a742400
 8009d84:	4af42400 	.word	0x4af42400

08009d88 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b089      	sub	sp, #36	@ 0x24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d90:	4ba0      	ldr	r3, [pc, #640]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d94:	f003 0303 	and.w	r3, r3, #3
 8009d98:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009d9a:	4b9e      	ldr	r3, [pc, #632]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	091b      	lsrs	r3, r3, #4
 8009da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009da4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009da6:	4b9b      	ldr	r3, [pc, #620]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009db0:	4b98      	ldr	r3, [pc, #608]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db4:	08db      	lsrs	r3, r3, #3
 8009db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	fb02 f303 	mul.w	r3, r2, r3
 8009dc0:	ee07 3a90 	vmov	s15, r3
 8009dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8111 	beq.w	8009ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	f000 8083 	beq.w	8009ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	f200 80a1 	bhi.w	8009f26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d056      	beq.n	8009e9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009df0:	e099      	b.n	8009f26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009df2:	4b88      	ldr	r3, [pc, #544]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d02d      	beq.n	8009e5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dfe:	4b85      	ldr	r3, [pc, #532]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	08db      	lsrs	r3, r3, #3
 8009e04:	f003 0303 	and.w	r3, r3, #3
 8009e08:	4a83      	ldr	r2, [pc, #524]	@ (800a018 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e28:	4b7a      	ldr	r3, [pc, #488]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e3c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a01c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e54:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e58:	e087      	b.n	8009f6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	ee07 3a90 	vmov	s15, r3
 8009e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e64:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a020 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e6c:	4b69      	ldr	r3, [pc, #420]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e74:	ee07 3a90 	vmov	s15, r3
 8009e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e80:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a01c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e9c:	e065      	b.n	8009f6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	ee07 3a90 	vmov	s15, r3
 8009ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a024 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb0:	4b58      	ldr	r3, [pc, #352]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb8:	ee07 3a90 	vmov	s15, r3
 8009ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ec4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a01c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009edc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ee0:	e043      	b.n	8009f6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	ee07 3a90 	vmov	s15, r3
 8009ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eec:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a028 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef4:	4b47      	ldr	r3, [pc, #284]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efc:	ee07 3a90 	vmov	s15, r3
 8009f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f08:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a01c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f24:	e021      	b.n	8009f6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	ee07 3a90 	vmov	s15, r3
 8009f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f30:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a020 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f38:	4b36      	ldr	r3, [pc, #216]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f40:	ee07 3a90 	vmov	s15, r3
 8009f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f4c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a01c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009f6a:	4b2a      	ldr	r3, [pc, #168]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6e:	0a5b      	lsrs	r3, r3, #9
 8009f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f74:	ee07 3a90 	vmov	s15, r3
 8009f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f90:	ee17 2a90 	vmov	r2, s15
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009f98:	4b1e      	ldr	r3, [pc, #120]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fbe:	ee17 2a90 	vmov	r2, s15
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009fc6:	4b13      	ldr	r3, [pc, #76]	@ (800a014 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fca:	0e1b      	lsrs	r3, r3, #24
 8009fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fd0:	ee07 3a90 	vmov	s15, r3
 8009fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fec:	ee17 2a90 	vmov	r2, s15
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ff4:	e008      	b.n	800a008 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	609a      	str	r2, [r3, #8]
}
 800a008:	bf00      	nop
 800a00a:	3724      	adds	r7, #36	@ 0x24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	58024400 	.word	0x58024400
 800a018:	03d09000 	.word	0x03d09000
 800a01c:	46000000 	.word	0x46000000
 800a020:	4c742400 	.word	0x4c742400
 800a024:	4a742400 	.word	0x4a742400
 800a028:	4af42400 	.word	0x4af42400

0800a02c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a03a:	4b53      	ldr	r3, [pc, #332]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	2b03      	cmp	r3, #3
 800a044:	d101      	bne.n	800a04a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e099      	b.n	800a17e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a04a:	4b4f      	ldr	r3, [pc, #316]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a4e      	ldr	r2, [pc, #312]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a050:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a056:	f7f7 ffc5 	bl	8001fe4 <HAL_GetTick>
 800a05a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a05c:	e008      	b.n	800a070 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a05e:	f7f7 ffc1 	bl	8001fe4 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d901      	bls.n	800a070 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e086      	b.n	800a17e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a070:	4b45      	ldr	r3, [pc, #276]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1f0      	bne.n	800a05e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a07c:	4b42      	ldr	r3, [pc, #264]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a080:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	031b      	lsls	r3, r3, #12
 800a08a:	493f      	ldr	r1, [pc, #252]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	3b01      	subs	r3, #1
 800a096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	025b      	lsls	r3, r3, #9
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	041b      	lsls	r3, r3, #16
 800a0ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	061b      	lsls	r3, r3, #24
 800a0bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a0c0:	4931      	ldr	r1, [pc, #196]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a0c6:	4b30      	ldr	r3, [pc, #192]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	492d      	ldr	r1, [pc, #180]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a0d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0dc:	f023 0220 	bic.w	r2, r3, #32
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	4928      	ldr	r1, [pc, #160]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a0ea:	4b27      	ldr	r3, [pc, #156]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ee:	4a26      	ldr	r2, [pc, #152]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	f023 0310 	bic.w	r3, r3, #16
 800a0f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0f6:	4b24      	ldr	r3, [pc, #144]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a0f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0fa:	4b24      	ldr	r3, [pc, #144]	@ (800a18c <RCCEx_PLL2_Config+0x160>)
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	69d2      	ldr	r2, [r2, #28]
 800a102:	00d2      	lsls	r2, r2, #3
 800a104:	4920      	ldr	r1, [pc, #128]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a106:	4313      	orrs	r3, r2
 800a108:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a10a:	4b1f      	ldr	r3, [pc, #124]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10e:	4a1e      	ldr	r2, [pc, #120]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a110:	f043 0310 	orr.w	r3, r3, #16
 800a114:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d106      	bne.n	800a12a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a11c:	4b1a      	ldr	r3, [pc, #104]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a120:	4a19      	ldr	r2, [pc, #100]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a122:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a126:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a128:	e00f      	b.n	800a14a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d106      	bne.n	800a13e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a130:	4b15      	ldr	r3, [pc, #84]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a134:	4a14      	ldr	r2, [pc, #80]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a13a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a13c:	e005      	b.n	800a14a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a13e:	4b12      	ldr	r3, [pc, #72]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a142:	4a11      	ldr	r2, [pc, #68]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a144:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a148:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a14a:	4b0f      	ldr	r3, [pc, #60]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a0e      	ldr	r2, [pc, #56]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a150:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a156:	f7f7 ff45 	bl	8001fe4 <HAL_GetTick>
 800a15a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a15c:	e008      	b.n	800a170 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a15e:	f7f7 ff41 	bl	8001fe4 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d901      	bls.n	800a170 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e006      	b.n	800a17e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a170:	4b05      	ldr	r3, [pc, #20]	@ (800a188 <RCCEx_PLL2_Config+0x15c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d0f0      	beq.n	800a15e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	58024400 	.word	0x58024400
 800a18c:	ffff0007 	.word	0xffff0007

0800a190 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a19e:	4b53      	ldr	r3, [pc, #332]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a2:	f003 0303 	and.w	r3, r3, #3
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d101      	bne.n	800a1ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e099      	b.n	800a2e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1ae:	4b4f      	ldr	r3, [pc, #316]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a4e      	ldr	r2, [pc, #312]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a1b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ba:	f7f7 ff13 	bl	8001fe4 <HAL_GetTick>
 800a1be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1c0:	e008      	b.n	800a1d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1c2:	f7f7 ff0f 	bl	8001fe4 <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d901      	bls.n	800a1d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e086      	b.n	800a2e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1d4:	4b45      	ldr	r3, [pc, #276]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f0      	bne.n	800a1c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a1e0:	4b42      	ldr	r3, [pc, #264]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	051b      	lsls	r3, r3, #20
 800a1ee:	493f      	ldr	r1, [pc, #252]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	3b01      	subs	r3, #1
 800a204:	025b      	lsls	r3, r3, #9
 800a206:	b29b      	uxth	r3, r3
 800a208:	431a      	orrs	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	3b01      	subs	r3, #1
 800a210:	041b      	lsls	r3, r3, #16
 800a212:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	061b      	lsls	r3, r3, #24
 800a220:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a224:	4931      	ldr	r1, [pc, #196]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a226:	4313      	orrs	r3, r2
 800a228:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a22a:	4b30      	ldr	r3, [pc, #192]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a22e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	492d      	ldr	r1, [pc, #180]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a23c:	4b2b      	ldr	r3, [pc, #172]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	4928      	ldr	r1, [pc, #160]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a24a:	4313      	orrs	r3, r2
 800a24c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a24e:	4b27      	ldr	r3, [pc, #156]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a252:	4a26      	ldr	r2, [pc, #152]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a258:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a25a:	4b24      	ldr	r3, [pc, #144]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a25c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a25e:	4b24      	ldr	r3, [pc, #144]	@ (800a2f0 <RCCEx_PLL3_Config+0x160>)
 800a260:	4013      	ands	r3, r2
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	69d2      	ldr	r2, [r2, #28]
 800a266:	00d2      	lsls	r2, r2, #3
 800a268:	4920      	ldr	r1, [pc, #128]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a26e:	4b1f      	ldr	r3, [pc, #124]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a272:	4a1e      	ldr	r2, [pc, #120]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a278:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d106      	bne.n	800a28e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a280:	4b1a      	ldr	r3, [pc, #104]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a284:	4a19      	ldr	r2, [pc, #100]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a286:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a28a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a28c:	e00f      	b.n	800a2ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d106      	bne.n	800a2a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a294:	4b15      	ldr	r3, [pc, #84]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a298:	4a14      	ldr	r2, [pc, #80]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a29a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a29e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a2a0:	e005      	b.n	800a2ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2a2:	4b12      	ldr	r3, [pc, #72]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a6:	4a11      	ldr	r2, [pc, #68]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a2a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a2ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a0e      	ldr	r2, [pc, #56]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a2b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ba:	f7f7 fe93 	bl	8001fe4 <HAL_GetTick>
 800a2be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2c0:	e008      	b.n	800a2d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2c2:	f7f7 fe8f 	bl	8001fe4 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d901      	bls.n	800a2d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e006      	b.n	800a2e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2d4:	4b05      	ldr	r3, [pc, #20]	@ (800a2ec <RCCEx_PLL3_Config+0x15c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d0f0      	beq.n	800a2c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	58024400 	.word	0x58024400
 800a2f0:	ffff0007 	.word	0xffff0007

0800a2f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e049      	b.n	800a39a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d106      	bne.n	800a320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f841 	bl	800a3a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3304      	adds	r3, #4
 800a330:	4619      	mov	r1, r3
 800a332:	4610      	mov	r0, r2
 800a334:	f000 f9e8 	bl	800a708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
	...

0800a3b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d001      	beq.n	800a3d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e054      	b.n	800a47a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f042 0201 	orr.w	r2, r2, #1
 800a3e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a26      	ldr	r2, [pc, #152]	@ (800a488 <HAL_TIM_Base_Start_IT+0xd0>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d022      	beq.n	800a438 <HAL_TIM_Base_Start_IT+0x80>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3fa:	d01d      	beq.n	800a438 <HAL_TIM_Base_Start_IT+0x80>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a22      	ldr	r2, [pc, #136]	@ (800a48c <HAL_TIM_Base_Start_IT+0xd4>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d018      	beq.n	800a438 <HAL_TIM_Base_Start_IT+0x80>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a21      	ldr	r2, [pc, #132]	@ (800a490 <HAL_TIM_Base_Start_IT+0xd8>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d013      	beq.n	800a438 <HAL_TIM_Base_Start_IT+0x80>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a1f      	ldr	r2, [pc, #124]	@ (800a494 <HAL_TIM_Base_Start_IT+0xdc>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d00e      	beq.n	800a438 <HAL_TIM_Base_Start_IT+0x80>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a1e      	ldr	r2, [pc, #120]	@ (800a498 <HAL_TIM_Base_Start_IT+0xe0>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d009      	beq.n	800a438 <HAL_TIM_Base_Start_IT+0x80>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a1c      	ldr	r2, [pc, #112]	@ (800a49c <HAL_TIM_Base_Start_IT+0xe4>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d004      	beq.n	800a438 <HAL_TIM_Base_Start_IT+0x80>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a1b      	ldr	r2, [pc, #108]	@ (800a4a0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d115      	bne.n	800a464 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689a      	ldr	r2, [r3, #8]
 800a43e:	4b19      	ldr	r3, [pc, #100]	@ (800a4a4 <HAL_TIM_Base_Start_IT+0xec>)
 800a440:	4013      	ands	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b06      	cmp	r3, #6
 800a448:	d015      	beq.n	800a476 <HAL_TIM_Base_Start_IT+0xbe>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a450:	d011      	beq.n	800a476 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f042 0201 	orr.w	r2, r2, #1
 800a460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a462:	e008      	b.n	800a476 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0201 	orr.w	r2, r2, #1
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	e000      	b.n	800a478 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a476:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	40010000 	.word	0x40010000
 800a48c:	40000400 	.word	0x40000400
 800a490:	40000800 	.word	0x40000800
 800a494:	40000c00 	.word	0x40000c00
 800a498:	40010400 	.word	0x40010400
 800a49c:	40001800 	.word	0x40001800
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	00010007 	.word	0x00010007

0800a4a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f003 0302 	and.w	r3, r3, #2
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d020      	beq.n	800a50c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d01b      	beq.n	800a50c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f06f 0202 	mvn.w	r2, #2
 800a4dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f8e9 	bl	800a6ca <HAL_TIM_IC_CaptureCallback>
 800a4f8:	e005      	b.n	800a506 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f8db 	bl	800a6b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f8ec 	bl	800a6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	2b00      	cmp	r3, #0
 800a514:	d020      	beq.n	800a558 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d01b      	beq.n	800a558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f06f 0204 	mvn.w	r2, #4
 800a528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2202      	movs	r2, #2
 800a52e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f8c3 	bl	800a6ca <HAL_TIM_IC_CaptureCallback>
 800a544:	e005      	b.n	800a552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f8b5 	bl	800a6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f8c6 	bl	800a6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f003 0308 	and.w	r3, r3, #8
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d020      	beq.n	800a5a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f003 0308 	and.w	r3, r3, #8
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d01b      	beq.n	800a5a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f06f 0208 	mvn.w	r2, #8
 800a574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2204      	movs	r2, #4
 800a57a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	f003 0303 	and.w	r3, r3, #3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f89d 	bl	800a6ca <HAL_TIM_IC_CaptureCallback>
 800a590:	e005      	b.n	800a59e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f88f 	bl	800a6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f8a0 	bl	800a6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0310 	and.w	r3, r3, #16
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d020      	beq.n	800a5f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f003 0310 	and.w	r3, r3, #16
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d01b      	beq.n	800a5f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f06f 0210 	mvn.w	r2, #16
 800a5c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2208      	movs	r2, #8
 800a5c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	69db      	ldr	r3, [r3, #28]
 800a5ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f877 	bl	800a6ca <HAL_TIM_IC_CaptureCallback>
 800a5dc:	e005      	b.n	800a5ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f869 	bl	800a6b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f87a 	bl	800a6de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00c      	beq.n	800a614 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d007      	beq.n	800a614 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f06f 0201 	mvn.w	r2, #1
 800a60c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7f6 fd4a 	bl	80010a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d104      	bne.n	800a628 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00c      	beq.n	800a642 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f913 	bl	800a868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00c      	beq.n	800a666 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a652:	2b00      	cmp	r3, #0
 800a654:	d007      	beq.n	800a666 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a65e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f90b 	bl	800a87c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00c      	beq.n	800a68a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a676:	2b00      	cmp	r3, #0
 800a678:	d007      	beq.n	800a68a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f834 	bl	800a6f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00c      	beq.n	800a6ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d007      	beq.n	800a6ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f06f 0220 	mvn.w	r2, #32
 800a6a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f8d3 	bl	800a854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6ae:	bf00      	nop
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6d2:	bf00      	nop
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
	...

0800a708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a46      	ldr	r2, [pc, #280]	@ (800a834 <TIM_Base_SetConfig+0x12c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d013      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a726:	d00f      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a43      	ldr	r2, [pc, #268]	@ (800a838 <TIM_Base_SetConfig+0x130>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d00b      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a42      	ldr	r2, [pc, #264]	@ (800a83c <TIM_Base_SetConfig+0x134>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d007      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a41      	ldr	r2, [pc, #260]	@ (800a840 <TIM_Base_SetConfig+0x138>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d003      	beq.n	800a748 <TIM_Base_SetConfig+0x40>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a40      	ldr	r2, [pc, #256]	@ (800a844 <TIM_Base_SetConfig+0x13c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d108      	bne.n	800a75a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a74e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a35      	ldr	r2, [pc, #212]	@ (800a834 <TIM_Base_SetConfig+0x12c>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d01f      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a768:	d01b      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a32      	ldr	r2, [pc, #200]	@ (800a838 <TIM_Base_SetConfig+0x130>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d017      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a31      	ldr	r2, [pc, #196]	@ (800a83c <TIM_Base_SetConfig+0x134>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d013      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a30      	ldr	r2, [pc, #192]	@ (800a840 <TIM_Base_SetConfig+0x138>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00f      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a2f      	ldr	r2, [pc, #188]	@ (800a844 <TIM_Base_SetConfig+0x13c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00b      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a2e      	ldr	r2, [pc, #184]	@ (800a848 <TIM_Base_SetConfig+0x140>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d007      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a2d      	ldr	r2, [pc, #180]	@ (800a84c <TIM_Base_SetConfig+0x144>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d003      	beq.n	800a7a2 <TIM_Base_SetConfig+0x9a>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a2c      	ldr	r2, [pc, #176]	@ (800a850 <TIM_Base_SetConfig+0x148>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d108      	bne.n	800a7b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a16      	ldr	r2, [pc, #88]	@ (800a834 <TIM_Base_SetConfig+0x12c>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d00f      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a18      	ldr	r2, [pc, #96]	@ (800a844 <TIM_Base_SetConfig+0x13c>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d00b      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a17      	ldr	r2, [pc, #92]	@ (800a848 <TIM_Base_SetConfig+0x140>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d007      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a16      	ldr	r2, [pc, #88]	@ (800a84c <TIM_Base_SetConfig+0x144>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d003      	beq.n	800a800 <TIM_Base_SetConfig+0xf8>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a15      	ldr	r2, [pc, #84]	@ (800a850 <TIM_Base_SetConfig+0x148>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d103      	bne.n	800a808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	691a      	ldr	r2, [r3, #16]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b01      	cmp	r3, #1
 800a818:	d105      	bne.n	800a826 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	f023 0201 	bic.w	r2, r3, #1
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	611a      	str	r2, [r3, #16]
  }
}
 800a826:	bf00      	nop
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	40010000 	.word	0x40010000
 800a838:	40000400 	.word	0x40000400
 800a83c:	40000800 	.word	0x40000800
 800a840:	40000c00 	.word	0x40000c00
 800a844:	40010400 	.word	0x40010400
 800a848:	40014000 	.word	0x40014000
 800a84c:	40014400 	.word	0x40014400
 800a850:	40014800 	.word	0x40014800

0800a854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e042      	b.n	800a928 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7f7 f8a7 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2224      	movs	r2, #36	@ 0x24
 800a8be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f022 0201 	bic.w	r2, r2, #1
 800a8d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d002      	beq.n	800a8e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f001 fa4a 	bl	800bd74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fcdf 	bl	800b2a4 <UART_SetConfig>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d101      	bne.n	800a8f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e01b      	b.n	800a928 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a8fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689a      	ldr	r2, [r3, #8]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a90e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0201 	orr.w	r2, r2, #1
 800a91e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 fac9 	bl	800beb8 <UART_CheckIdleState>
 800a926:	4603      	mov	r3, r0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08a      	sub	sp, #40	@ 0x28
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	4613      	mov	r3, r2
 800a93c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a944:	2b20      	cmp	r3, #32
 800a946:	d167      	bne.n	800aa18 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <HAL_UART_Transmit_DMA+0x24>
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	e060      	b.n	800aa1a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	88fa      	ldrh	r2, [r7, #6]
 800a962:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	88fa      	ldrh	r2, [r7, #6]
 800a96a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2221      	movs	r2, #33	@ 0x21
 800a97a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a982:	2b00      	cmp	r3, #0
 800a984:	d028      	beq.n	800a9d8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a98a:	4a26      	ldr	r2, [pc, #152]	@ (800aa24 <HAL_UART_Transmit_DMA+0xf4>)
 800a98c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a992:	4a25      	ldr	r2, [pc, #148]	@ (800aa28 <HAL_UART_Transmit_DMA+0xf8>)
 800a994:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a99a:	4a24      	ldr	r2, [pc, #144]	@ (800aa2c <HAL_UART_Transmit_DMA+0xfc>)
 800a99c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3328      	adds	r3, #40	@ 0x28
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	88fb      	ldrh	r3, [r7, #6]
 800a9ba:	f7f9 fa5d 	bl	8003e78 <HAL_DMA_Start_IT>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d009      	beq.n	800a9d8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2210      	movs	r2, #16
 800a9c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e020      	b.n	800aa1a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2240      	movs	r2, #64	@ 0x40
 800a9de:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	e853 3f00 	ldrex	r3, [r3]
 800a9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa00:	623a      	str	r2, [r7, #32]
 800aa02:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa04:	69f9      	ldr	r1, [r7, #28]
 800aa06:	6a3a      	ldr	r2, [r7, #32]
 800aa08:	e841 2300 	strex	r3, r2, [r1]
 800aa0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1e5      	bne.n	800a9e0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	e000      	b.n	800aa1a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aa18:	2302      	movs	r3, #2
  }
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3728      	adds	r7, #40	@ 0x28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	0800c385 	.word	0x0800c385
 800aa28:	0800c41b 	.word	0x0800c41b
 800aa2c:	0800c59d 	.word	0x0800c59d

0800aa30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08a      	sub	sp, #40	@ 0x28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa44:	2b20      	cmp	r3, #32
 800aa46:	d137      	bne.n	800aab8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <HAL_UART_Receive_DMA+0x24>
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e030      	b.n	800aaba <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a18      	ldr	r2, [pc, #96]	@ (800aac4 <HAL_UART_Receive_DMA+0x94>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d01f      	beq.n	800aaa8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d018      	beq.n	800aaa8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	613b      	str	r3, [r7, #16]
   return(result);
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	623b      	str	r3, [r7, #32]
 800aa96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	69f9      	ldr	r1, [r7, #28]
 800aa9a:	6a3a      	ldr	r2, [r7, #32]
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e6      	bne.n	800aa76 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aaa8:	88fb      	ldrh	r3, [r7, #6]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f001 fb1a 	bl	800c0e8 <UART_Start_Receive_DMA>
 800aab4:	4603      	mov	r3, r0
 800aab6:	e000      	b.n	800aaba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aab8:	2302      	movs	r3, #2
  }
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3728      	adds	r7, #40	@ 0x28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	58000c00 	.word	0x58000c00

0800aac8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b0ba      	sub	sp, #232	@ 0xe8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aaee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aaf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aafc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d11b      	bne.n	800ab3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab08:	f003 0320 	and.w	r3, r3, #32
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d015      	beq.n	800ab3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab14:	f003 0320 	and.w	r3, r3, #32
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d105      	bne.n	800ab28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d009      	beq.n	800ab3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 8377 	beq.w	800b220 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	4798      	blx	r3
      }
      return;
 800ab3a:	e371      	b.n	800b220 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 8123 	beq.w	800ad8c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab4a:	4b8d      	ldr	r3, [pc, #564]	@ (800ad80 <HAL_UART_IRQHandler+0x2b8>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ab56:	4b8b      	ldr	r3, [pc, #556]	@ (800ad84 <HAL_UART_IRQHandler+0x2bc>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 8116 	beq.w	800ad8c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d011      	beq.n	800ab90 <HAL_UART_IRQHandler+0xc8>
 800ab6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00b      	beq.n	800ab90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab86:	f043 0201 	orr.w	r2, r3, #1
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab94:	f003 0302 	and.w	r3, r3, #2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d011      	beq.n	800abc0 <HAL_UART_IRQHandler+0xf8>
 800ab9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2202      	movs	r2, #2
 800abae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb6:	f043 0204 	orr.w	r2, r3, #4
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d011      	beq.n	800abf0 <HAL_UART_IRQHandler+0x128>
 800abcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00b      	beq.n	800abf0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2204      	movs	r2, #4
 800abde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abe6:	f043 0202 	orr.w	r2, r3, #2
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abf4:	f003 0308 	and.w	r3, r3, #8
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d017      	beq.n	800ac2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800abfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac00:	f003 0320 	and.w	r3, r3, #32
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d105      	bne.n	800ac14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ac0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ad80 <HAL_UART_IRQHandler+0x2b8>)
 800ac0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00b      	beq.n	800ac2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2208      	movs	r2, #8
 800ac1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac22:	f043 0208 	orr.w	r2, r3, #8
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d012      	beq.n	800ac5e <HAL_UART_IRQHandler+0x196>
 800ac38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00c      	beq.n	800ac5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac54:	f043 0220 	orr.w	r2, r3, #32
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 82dd 	beq.w	800b224 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac6e:	f003 0320 	and.w	r3, r3, #32
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d013      	beq.n	800ac9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d105      	bne.n	800ac8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d007      	beq.n	800ac9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aca4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acb2:	2b40      	cmp	r3, #64	@ 0x40
 800acb4:	d005      	beq.n	800acc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800acba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d054      	beq.n	800ad6c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 faf8 	bl	800c2b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd2:	2b40      	cmp	r3, #64	@ 0x40
 800acd4:	d146      	bne.n	800ad64 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3308      	adds	r3, #8
 800acdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800acec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800acf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3308      	adds	r3, #8
 800acfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ad02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ad06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ad0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ad1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1d9      	bne.n	800acd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d017      	beq.n	800ad5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad32:	4a15      	ldr	r2, [pc, #84]	@ (800ad88 <HAL_UART_IRQHandler+0x2c0>)
 800ad34:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7f9 fe23 	bl	8004988 <HAL_DMA_Abort_IT>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d019      	beq.n	800ad7c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ad56:	4610      	mov	r0, r2
 800ad58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad5a:	e00f      	b.n	800ad7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fa8b 	bl	800b278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad62:	e00b      	b.n	800ad7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fa87 	bl	800b278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad6a:	e007      	b.n	800ad7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fa83 	bl	800b278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ad7a:	e253      	b.n	800b224 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad7c:	bf00      	nop
    return;
 800ad7e:	e251      	b.n	800b224 <HAL_UART_IRQHandler+0x75c>
 800ad80:	10000001 	.word	0x10000001
 800ad84:	04000120 	.word	0x04000120
 800ad88:	0800c61d 	.word	0x0800c61d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	f040 81e7 	bne.w	800b164 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad9a:	f003 0310 	and.w	r3, r3, #16
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 81e0 	beq.w	800b164 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ada4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ada8:	f003 0310 	and.w	r3, r3, #16
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 81d9 	beq.w	800b164 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2210      	movs	r2, #16
 800adb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc4:	2b40      	cmp	r3, #64	@ 0x40
 800adc6:	f040 8151 	bne.w	800b06c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a96      	ldr	r2, [pc, #600]	@ (800b02c <HAL_UART_IRQHandler+0x564>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d068      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a93      	ldr	r2, [pc, #588]	@ (800b030 <HAL_UART_IRQHandler+0x568>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d061      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a91      	ldr	r2, [pc, #580]	@ (800b034 <HAL_UART_IRQHandler+0x56c>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d05a      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a8e      	ldr	r2, [pc, #568]	@ (800b038 <HAL_UART_IRQHandler+0x570>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d053      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a8c      	ldr	r2, [pc, #560]	@ (800b03c <HAL_UART_IRQHandler+0x574>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d04c      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a89      	ldr	r2, [pc, #548]	@ (800b040 <HAL_UART_IRQHandler+0x578>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d045      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a87      	ldr	r2, [pc, #540]	@ (800b044 <HAL_UART_IRQHandler+0x57c>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d03e      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a84      	ldr	r2, [pc, #528]	@ (800b048 <HAL_UART_IRQHandler+0x580>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d037      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a82      	ldr	r2, [pc, #520]	@ (800b04c <HAL_UART_IRQHandler+0x584>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d030      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a7f      	ldr	r2, [pc, #508]	@ (800b050 <HAL_UART_IRQHandler+0x588>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d029      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a7d      	ldr	r2, [pc, #500]	@ (800b054 <HAL_UART_IRQHandler+0x58c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d022      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a7a      	ldr	r2, [pc, #488]	@ (800b058 <HAL_UART_IRQHandler+0x590>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d01b      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a78      	ldr	r2, [pc, #480]	@ (800b05c <HAL_UART_IRQHandler+0x594>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d014      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a75      	ldr	r2, [pc, #468]	@ (800b060 <HAL_UART_IRQHandler+0x598>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d00d      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a73      	ldr	r2, [pc, #460]	@ (800b064 <HAL_UART_IRQHandler+0x59c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d006      	beq.n	800aeaa <HAL_UART_IRQHandler+0x3e2>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a70      	ldr	r2, [pc, #448]	@ (800b068 <HAL_UART_IRQHandler+0x5a0>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d106      	bne.n	800aeb8 <HAL_UART_IRQHandler+0x3f0>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	e005      	b.n	800aec4 <HAL_UART_IRQHandler+0x3fc>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aec8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 81ab 	beq.w	800b228 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aed8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aedc:	429a      	cmp	r2, r3
 800aede:	f080 81a3 	bcs.w	800b228 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aee8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aef2:	69db      	ldr	r3, [r3, #28]
 800aef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aef8:	f000 8087 	beq.w	800b00a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800af10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800af2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800af32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800af36:	e841 2300 	strex	r3, r2, [r1]
 800af3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800af3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1da      	bne.n	800aefc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3308      	adds	r3, #8
 800af4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3308      	adds	r3, #8
 800af66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800af6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e1      	bne.n	800af46 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3308      	adds	r3, #8
 800af88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af8c:	e853 3f00 	ldrex	r3, [r3]
 800af90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3308      	adds	r3, #8
 800afa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800afa6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800afa8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800afac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800afb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e3      	bne.n	800af82 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afd0:	e853 3f00 	ldrex	r3, [r3]
 800afd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800afd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afd8:	f023 0310 	bic.w	r3, r3, #16
 800afdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	461a      	mov	r2, r3
 800afe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aff0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e4      	bne.n	800afc8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b004:	4618      	mov	r0, r3
 800b006:	f7f9 f9a1 	bl	800434c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2202      	movs	r2, #2
 800b00e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	b29b      	uxth	r3, r3
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f931 	bl	800b28c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b02a:	e0fd      	b.n	800b228 <HAL_UART_IRQHandler+0x760>
 800b02c:	40020010 	.word	0x40020010
 800b030:	40020028 	.word	0x40020028
 800b034:	40020040 	.word	0x40020040
 800b038:	40020058 	.word	0x40020058
 800b03c:	40020070 	.word	0x40020070
 800b040:	40020088 	.word	0x40020088
 800b044:	400200a0 	.word	0x400200a0
 800b048:	400200b8 	.word	0x400200b8
 800b04c:	40020410 	.word	0x40020410
 800b050:	40020428 	.word	0x40020428
 800b054:	40020440 	.word	0x40020440
 800b058:	40020458 	.word	0x40020458
 800b05c:	40020470 	.word	0x40020470
 800b060:	40020488 	.word	0x40020488
 800b064:	400204a0 	.word	0x400204a0
 800b068:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b078:	b29b      	uxth	r3, r3
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b086:	b29b      	uxth	r3, r3
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 80cf 	beq.w	800b22c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b08e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 80ca 	beq.w	800b22c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b0ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e4      	bne.n	800b098 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3308      	adds	r3, #8
 800b0d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b0de:	6a3a      	ldr	r2, [r7, #32]
 800b0e0:	4b55      	ldr	r3, [pc, #340]	@ (800b238 <HAL_UART_IRQHandler+0x770>)
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b0f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e3      	bne.n	800b0ce <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	60fb      	str	r3, [r7, #12]
   return(result);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f023 0310 	bic.w	r3, r3, #16
 800b12e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b13c:	61fb      	str	r3, [r7, #28]
 800b13e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	69b9      	ldr	r1, [r7, #24]
 800b142:	69fa      	ldr	r2, [r7, #28]
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	617b      	str	r3, [r7, #20]
   return(result);
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e4      	bne.n	800b11a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f895 	bl	800b28c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b162:	e063      	b.n	800b22c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00e      	beq.n	800b18e <HAL_UART_IRQHandler+0x6c6>
 800b170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d008      	beq.n	800b18e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b184:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f001 fa89 	bl	800c69e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b18c:	e051      	b.n	800b232 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b196:	2b00      	cmp	r3, #0
 800b198:	d014      	beq.n	800b1c4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b19e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d105      	bne.n	800b1b2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d008      	beq.n	800b1c4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d03a      	beq.n	800b230 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	4798      	blx	r3
    }
    return;
 800b1c2:	e035      	b.n	800b230 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d009      	beq.n	800b1e4 <HAL_UART_IRQHandler+0x71c>
 800b1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d003      	beq.n	800b1e4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f001 fa33 	bl	800c648 <UART_EndTransmit_IT>
    return;
 800b1e2:	e026      	b.n	800b232 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <HAL_UART_IRQHandler+0x73c>
 800b1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d003      	beq.n	800b204 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 fa62 	bl	800c6c6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b202:	e016      	b.n	800b232 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d010      	beq.n	800b232 <HAL_UART_IRQHandler+0x76a>
 800b210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b214:	2b00      	cmp	r3, #0
 800b216:	da0c      	bge.n	800b232 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f001 fa4a 	bl	800c6b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b21e:	e008      	b.n	800b232 <HAL_UART_IRQHandler+0x76a>
      return;
 800b220:	bf00      	nop
 800b222:	e006      	b.n	800b232 <HAL_UART_IRQHandler+0x76a>
    return;
 800b224:	bf00      	nop
 800b226:	e004      	b.n	800b232 <HAL_UART_IRQHandler+0x76a>
      return;
 800b228:	bf00      	nop
 800b22a:	e002      	b.n	800b232 <HAL_UART_IRQHandler+0x76a>
      return;
 800b22c:	bf00      	nop
 800b22e:	e000      	b.n	800b232 <HAL_UART_IRQHandler+0x76a>
    return;
 800b230:	bf00      	nop
  }
}
 800b232:	37e8      	adds	r7, #232	@ 0xe8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	effffffe 	.word	0xeffffffe

0800b23c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b258:	bf00      	nop
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr

0800b28c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2a8:	b092      	sub	sp, #72	@ 0x48
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	431a      	orrs	r2, r3
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	69db      	ldr	r3, [r3, #28]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	4bbe      	ldr	r3, [pc, #760]	@ (800b5cc <UART_SetConfig+0x328>)
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	6812      	ldr	r2, [r2, #0]
 800b2da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	430a      	orrs	r2, r1
 800b2f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4ab3      	ldr	r2, [pc, #716]	@ (800b5d0 <UART_SetConfig+0x32c>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d004      	beq.n	800b310 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b30c:	4313      	orrs	r3, r2
 800b30e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	4baf      	ldr	r3, [pc, #700]	@ (800b5d4 <UART_SetConfig+0x330>)
 800b318:	4013      	ands	r3, r2
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	6812      	ldr	r2, [r2, #0]
 800b31e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b320:	430b      	orrs	r3, r1
 800b322:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32a:	f023 010f 	bic.w	r1, r3, #15
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4aa6      	ldr	r2, [pc, #664]	@ (800b5d8 <UART_SetConfig+0x334>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d177      	bne.n	800b434 <UART_SetConfig+0x190>
 800b344:	4ba5      	ldr	r3, [pc, #660]	@ (800b5dc <UART_SetConfig+0x338>)
 800b346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b348:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b34c:	2b28      	cmp	r3, #40	@ 0x28
 800b34e:	d86d      	bhi.n	800b42c <UART_SetConfig+0x188>
 800b350:	a201      	add	r2, pc, #4	@ (adr r2, 800b358 <UART_SetConfig+0xb4>)
 800b352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b356:	bf00      	nop
 800b358:	0800b3fd 	.word	0x0800b3fd
 800b35c:	0800b42d 	.word	0x0800b42d
 800b360:	0800b42d 	.word	0x0800b42d
 800b364:	0800b42d 	.word	0x0800b42d
 800b368:	0800b42d 	.word	0x0800b42d
 800b36c:	0800b42d 	.word	0x0800b42d
 800b370:	0800b42d 	.word	0x0800b42d
 800b374:	0800b42d 	.word	0x0800b42d
 800b378:	0800b405 	.word	0x0800b405
 800b37c:	0800b42d 	.word	0x0800b42d
 800b380:	0800b42d 	.word	0x0800b42d
 800b384:	0800b42d 	.word	0x0800b42d
 800b388:	0800b42d 	.word	0x0800b42d
 800b38c:	0800b42d 	.word	0x0800b42d
 800b390:	0800b42d 	.word	0x0800b42d
 800b394:	0800b42d 	.word	0x0800b42d
 800b398:	0800b40d 	.word	0x0800b40d
 800b39c:	0800b42d 	.word	0x0800b42d
 800b3a0:	0800b42d 	.word	0x0800b42d
 800b3a4:	0800b42d 	.word	0x0800b42d
 800b3a8:	0800b42d 	.word	0x0800b42d
 800b3ac:	0800b42d 	.word	0x0800b42d
 800b3b0:	0800b42d 	.word	0x0800b42d
 800b3b4:	0800b42d 	.word	0x0800b42d
 800b3b8:	0800b415 	.word	0x0800b415
 800b3bc:	0800b42d 	.word	0x0800b42d
 800b3c0:	0800b42d 	.word	0x0800b42d
 800b3c4:	0800b42d 	.word	0x0800b42d
 800b3c8:	0800b42d 	.word	0x0800b42d
 800b3cc:	0800b42d 	.word	0x0800b42d
 800b3d0:	0800b42d 	.word	0x0800b42d
 800b3d4:	0800b42d 	.word	0x0800b42d
 800b3d8:	0800b41d 	.word	0x0800b41d
 800b3dc:	0800b42d 	.word	0x0800b42d
 800b3e0:	0800b42d 	.word	0x0800b42d
 800b3e4:	0800b42d 	.word	0x0800b42d
 800b3e8:	0800b42d 	.word	0x0800b42d
 800b3ec:	0800b42d 	.word	0x0800b42d
 800b3f0:	0800b42d 	.word	0x0800b42d
 800b3f4:	0800b42d 	.word	0x0800b42d
 800b3f8:	0800b425 	.word	0x0800b425
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b402:	e222      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b404:	2304      	movs	r3, #4
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b40a:	e21e      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b40c:	2308      	movs	r3, #8
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b412:	e21a      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b414:	2310      	movs	r3, #16
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b41a:	e216      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b41c:	2320      	movs	r3, #32
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b422:	e212      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b424:	2340      	movs	r3, #64	@ 0x40
 800b426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b42a:	e20e      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b42c:	2380      	movs	r3, #128	@ 0x80
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b432:	e20a      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a69      	ldr	r2, [pc, #420]	@ (800b5e0 <UART_SetConfig+0x33c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d130      	bne.n	800b4a0 <UART_SetConfig+0x1fc>
 800b43e:	4b67      	ldr	r3, [pc, #412]	@ (800b5dc <UART_SetConfig+0x338>)
 800b440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	2b05      	cmp	r3, #5
 800b448:	d826      	bhi.n	800b498 <UART_SetConfig+0x1f4>
 800b44a:	a201      	add	r2, pc, #4	@ (adr r2, 800b450 <UART_SetConfig+0x1ac>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b469 	.word	0x0800b469
 800b454:	0800b471 	.word	0x0800b471
 800b458:	0800b479 	.word	0x0800b479
 800b45c:	0800b481 	.word	0x0800b481
 800b460:	0800b489 	.word	0x0800b489
 800b464:	0800b491 	.word	0x0800b491
 800b468:	2300      	movs	r3, #0
 800b46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b46e:	e1ec      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b470:	2304      	movs	r3, #4
 800b472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b476:	e1e8      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b478:	2308      	movs	r3, #8
 800b47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b47e:	e1e4      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b480:	2310      	movs	r3, #16
 800b482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b486:	e1e0      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b488:	2320      	movs	r3, #32
 800b48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b48e:	e1dc      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b490:	2340      	movs	r3, #64	@ 0x40
 800b492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b496:	e1d8      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b498:	2380      	movs	r3, #128	@ 0x80
 800b49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b49e:	e1d4      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a4f      	ldr	r2, [pc, #316]	@ (800b5e4 <UART_SetConfig+0x340>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d130      	bne.n	800b50c <UART_SetConfig+0x268>
 800b4aa:	4b4c      	ldr	r3, [pc, #304]	@ (800b5dc <UART_SetConfig+0x338>)
 800b4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4ae:	f003 0307 	and.w	r3, r3, #7
 800b4b2:	2b05      	cmp	r3, #5
 800b4b4:	d826      	bhi.n	800b504 <UART_SetConfig+0x260>
 800b4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4bc <UART_SetConfig+0x218>)
 800b4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4bc:	0800b4d5 	.word	0x0800b4d5
 800b4c0:	0800b4dd 	.word	0x0800b4dd
 800b4c4:	0800b4e5 	.word	0x0800b4e5
 800b4c8:	0800b4ed 	.word	0x0800b4ed
 800b4cc:	0800b4f5 	.word	0x0800b4f5
 800b4d0:	0800b4fd 	.word	0x0800b4fd
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4da:	e1b6      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b4dc:	2304      	movs	r3, #4
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4e2:	e1b2      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ea:	e1ae      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b4ec:	2310      	movs	r3, #16
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f2:	e1aa      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fa:	e1a6      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b4fc:	2340      	movs	r3, #64	@ 0x40
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b502:	e1a2      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b504:	2380      	movs	r3, #128	@ 0x80
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b50a:	e19e      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a35      	ldr	r2, [pc, #212]	@ (800b5e8 <UART_SetConfig+0x344>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d130      	bne.n	800b578 <UART_SetConfig+0x2d4>
 800b516:	4b31      	ldr	r3, [pc, #196]	@ (800b5dc <UART_SetConfig+0x338>)
 800b518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b51a:	f003 0307 	and.w	r3, r3, #7
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d826      	bhi.n	800b570 <UART_SetConfig+0x2cc>
 800b522:	a201      	add	r2, pc, #4	@ (adr r2, 800b528 <UART_SetConfig+0x284>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b541 	.word	0x0800b541
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	0800b551 	.word	0x0800b551
 800b534:	0800b559 	.word	0x0800b559
 800b538:	0800b561 	.word	0x0800b561
 800b53c:	0800b569 	.word	0x0800b569
 800b540:	2300      	movs	r3, #0
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b546:	e180      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b548:	2304      	movs	r3, #4
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b54e:	e17c      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b550:	2308      	movs	r3, #8
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b556:	e178      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b558:	2310      	movs	r3, #16
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b55e:	e174      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b560:	2320      	movs	r3, #32
 800b562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b566:	e170      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b568:	2340      	movs	r3, #64	@ 0x40
 800b56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b56e:	e16c      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b570:	2380      	movs	r3, #128	@ 0x80
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b576:	e168      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a1b      	ldr	r2, [pc, #108]	@ (800b5ec <UART_SetConfig+0x348>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d142      	bne.n	800b608 <UART_SetConfig+0x364>
 800b582:	4b16      	ldr	r3, [pc, #88]	@ (800b5dc <UART_SetConfig+0x338>)
 800b584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b586:	f003 0307 	and.w	r3, r3, #7
 800b58a:	2b05      	cmp	r3, #5
 800b58c:	d838      	bhi.n	800b600 <UART_SetConfig+0x35c>
 800b58e:	a201      	add	r2, pc, #4	@ (adr r2, 800b594 <UART_SetConfig+0x2f0>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5ad 	.word	0x0800b5ad
 800b598:	0800b5b5 	.word	0x0800b5b5
 800b59c:	0800b5bd 	.word	0x0800b5bd
 800b5a0:	0800b5c5 	.word	0x0800b5c5
 800b5a4:	0800b5f1 	.word	0x0800b5f1
 800b5a8:	0800b5f9 	.word	0x0800b5f9
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5b2:	e14a      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b5b4:	2304      	movs	r3, #4
 800b5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ba:	e146      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b5bc:	2308      	movs	r3, #8
 800b5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5c2:	e142      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b5c4:	2310      	movs	r3, #16
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ca:	e13e      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b5cc:	cfff69f3 	.word	0xcfff69f3
 800b5d0:	58000c00 	.word	0x58000c00
 800b5d4:	11fff4ff 	.word	0x11fff4ff
 800b5d8:	40011000 	.word	0x40011000
 800b5dc:	58024400 	.word	0x58024400
 800b5e0:	40004400 	.word	0x40004400
 800b5e4:	40004800 	.word	0x40004800
 800b5e8:	40004c00 	.word	0x40004c00
 800b5ec:	40005000 	.word	0x40005000
 800b5f0:	2320      	movs	r3, #32
 800b5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f6:	e128      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b5f8:	2340      	movs	r3, #64	@ 0x40
 800b5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fe:	e124      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b600:	2380      	movs	r3, #128	@ 0x80
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b606:	e120      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4acb      	ldr	r2, [pc, #812]	@ (800b93c <UART_SetConfig+0x698>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d176      	bne.n	800b700 <UART_SetConfig+0x45c>
 800b612:	4bcb      	ldr	r3, [pc, #812]	@ (800b940 <UART_SetConfig+0x69c>)
 800b614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b61a:	2b28      	cmp	r3, #40	@ 0x28
 800b61c:	d86c      	bhi.n	800b6f8 <UART_SetConfig+0x454>
 800b61e:	a201      	add	r2, pc, #4	@ (adr r2, 800b624 <UART_SetConfig+0x380>)
 800b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b624:	0800b6c9 	.word	0x0800b6c9
 800b628:	0800b6f9 	.word	0x0800b6f9
 800b62c:	0800b6f9 	.word	0x0800b6f9
 800b630:	0800b6f9 	.word	0x0800b6f9
 800b634:	0800b6f9 	.word	0x0800b6f9
 800b638:	0800b6f9 	.word	0x0800b6f9
 800b63c:	0800b6f9 	.word	0x0800b6f9
 800b640:	0800b6f9 	.word	0x0800b6f9
 800b644:	0800b6d1 	.word	0x0800b6d1
 800b648:	0800b6f9 	.word	0x0800b6f9
 800b64c:	0800b6f9 	.word	0x0800b6f9
 800b650:	0800b6f9 	.word	0x0800b6f9
 800b654:	0800b6f9 	.word	0x0800b6f9
 800b658:	0800b6f9 	.word	0x0800b6f9
 800b65c:	0800b6f9 	.word	0x0800b6f9
 800b660:	0800b6f9 	.word	0x0800b6f9
 800b664:	0800b6d9 	.word	0x0800b6d9
 800b668:	0800b6f9 	.word	0x0800b6f9
 800b66c:	0800b6f9 	.word	0x0800b6f9
 800b670:	0800b6f9 	.word	0x0800b6f9
 800b674:	0800b6f9 	.word	0x0800b6f9
 800b678:	0800b6f9 	.word	0x0800b6f9
 800b67c:	0800b6f9 	.word	0x0800b6f9
 800b680:	0800b6f9 	.word	0x0800b6f9
 800b684:	0800b6e1 	.word	0x0800b6e1
 800b688:	0800b6f9 	.word	0x0800b6f9
 800b68c:	0800b6f9 	.word	0x0800b6f9
 800b690:	0800b6f9 	.word	0x0800b6f9
 800b694:	0800b6f9 	.word	0x0800b6f9
 800b698:	0800b6f9 	.word	0x0800b6f9
 800b69c:	0800b6f9 	.word	0x0800b6f9
 800b6a0:	0800b6f9 	.word	0x0800b6f9
 800b6a4:	0800b6e9 	.word	0x0800b6e9
 800b6a8:	0800b6f9 	.word	0x0800b6f9
 800b6ac:	0800b6f9 	.word	0x0800b6f9
 800b6b0:	0800b6f9 	.word	0x0800b6f9
 800b6b4:	0800b6f9 	.word	0x0800b6f9
 800b6b8:	0800b6f9 	.word	0x0800b6f9
 800b6bc:	0800b6f9 	.word	0x0800b6f9
 800b6c0:	0800b6f9 	.word	0x0800b6f9
 800b6c4:	0800b6f1 	.word	0x0800b6f1
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ce:	e0bc      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b6d0:	2304      	movs	r3, #4
 800b6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d6:	e0b8      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b6d8:	2308      	movs	r3, #8
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6de:	e0b4      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b6e0:	2310      	movs	r3, #16
 800b6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6e6:	e0b0      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b6e8:	2320      	movs	r3, #32
 800b6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ee:	e0ac      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b6f0:	2340      	movs	r3, #64	@ 0x40
 800b6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6f6:	e0a8      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b6f8:	2380      	movs	r3, #128	@ 0x80
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6fe:	e0a4      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a8f      	ldr	r2, [pc, #572]	@ (800b944 <UART_SetConfig+0x6a0>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d130      	bne.n	800b76c <UART_SetConfig+0x4c8>
 800b70a:	4b8d      	ldr	r3, [pc, #564]	@ (800b940 <UART_SetConfig+0x69c>)
 800b70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b70e:	f003 0307 	and.w	r3, r3, #7
 800b712:	2b05      	cmp	r3, #5
 800b714:	d826      	bhi.n	800b764 <UART_SetConfig+0x4c0>
 800b716:	a201      	add	r2, pc, #4	@ (adr r2, 800b71c <UART_SetConfig+0x478>)
 800b718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71c:	0800b735 	.word	0x0800b735
 800b720:	0800b73d 	.word	0x0800b73d
 800b724:	0800b745 	.word	0x0800b745
 800b728:	0800b74d 	.word	0x0800b74d
 800b72c:	0800b755 	.word	0x0800b755
 800b730:	0800b75d 	.word	0x0800b75d
 800b734:	2300      	movs	r3, #0
 800b736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b73a:	e086      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b73c:	2304      	movs	r3, #4
 800b73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b742:	e082      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b744:	2308      	movs	r3, #8
 800b746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b74a:	e07e      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b74c:	2310      	movs	r3, #16
 800b74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b752:	e07a      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b754:	2320      	movs	r3, #32
 800b756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b75a:	e076      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b75c:	2340      	movs	r3, #64	@ 0x40
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b762:	e072      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b764:	2380      	movs	r3, #128	@ 0x80
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b76a:	e06e      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a75      	ldr	r2, [pc, #468]	@ (800b948 <UART_SetConfig+0x6a4>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d130      	bne.n	800b7d8 <UART_SetConfig+0x534>
 800b776:	4b72      	ldr	r3, [pc, #456]	@ (800b940 <UART_SetConfig+0x69c>)
 800b778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b77a:	f003 0307 	and.w	r3, r3, #7
 800b77e:	2b05      	cmp	r3, #5
 800b780:	d826      	bhi.n	800b7d0 <UART_SetConfig+0x52c>
 800b782:	a201      	add	r2, pc, #4	@ (adr r2, 800b788 <UART_SetConfig+0x4e4>)
 800b784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b788:	0800b7a1 	.word	0x0800b7a1
 800b78c:	0800b7a9 	.word	0x0800b7a9
 800b790:	0800b7b1 	.word	0x0800b7b1
 800b794:	0800b7b9 	.word	0x0800b7b9
 800b798:	0800b7c1 	.word	0x0800b7c1
 800b79c:	0800b7c9 	.word	0x0800b7c9
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a6:	e050      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b7a8:	2304      	movs	r3, #4
 800b7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ae:	e04c      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b7b0:	2308      	movs	r3, #8
 800b7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b6:	e048      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b7b8:	2310      	movs	r3, #16
 800b7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7be:	e044      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c6:	e040      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b7c8:	2340      	movs	r3, #64	@ 0x40
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ce:	e03c      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b7d0:	2380      	movs	r3, #128	@ 0x80
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7d6:	e038      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a5b      	ldr	r2, [pc, #364]	@ (800b94c <UART_SetConfig+0x6a8>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d130      	bne.n	800b844 <UART_SetConfig+0x5a0>
 800b7e2:	4b57      	ldr	r3, [pc, #348]	@ (800b940 <UART_SetConfig+0x69c>)
 800b7e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7e6:	f003 0307 	and.w	r3, r3, #7
 800b7ea:	2b05      	cmp	r3, #5
 800b7ec:	d826      	bhi.n	800b83c <UART_SetConfig+0x598>
 800b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <UART_SetConfig+0x550>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b80d 	.word	0x0800b80d
 800b7f8:	0800b815 	.word	0x0800b815
 800b7fc:	0800b81d 	.word	0x0800b81d
 800b800:	0800b825 	.word	0x0800b825
 800b804:	0800b82d 	.word	0x0800b82d
 800b808:	0800b835 	.word	0x0800b835
 800b80c:	2302      	movs	r3, #2
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b812:	e01a      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b814:	2304      	movs	r3, #4
 800b816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81a:	e016      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b81c:	2308      	movs	r3, #8
 800b81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b822:	e012      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b824:	2310      	movs	r3, #16
 800b826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82a:	e00e      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b82c:	2320      	movs	r3, #32
 800b82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b832:	e00a      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b834:	2340      	movs	r3, #64	@ 0x40
 800b836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83a:	e006      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b83c:	2380      	movs	r3, #128	@ 0x80
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b842:	e002      	b.n	800b84a <UART_SetConfig+0x5a6>
 800b844:	2380      	movs	r3, #128	@ 0x80
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a3f      	ldr	r2, [pc, #252]	@ (800b94c <UART_SetConfig+0x6a8>)
 800b850:	4293      	cmp	r3, r2
 800b852:	f040 80f8 	bne.w	800ba46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b856:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b85a:	2b20      	cmp	r3, #32
 800b85c:	dc46      	bgt.n	800b8ec <UART_SetConfig+0x648>
 800b85e:	2b02      	cmp	r3, #2
 800b860:	f2c0 8082 	blt.w	800b968 <UART_SetConfig+0x6c4>
 800b864:	3b02      	subs	r3, #2
 800b866:	2b1e      	cmp	r3, #30
 800b868:	d87e      	bhi.n	800b968 <UART_SetConfig+0x6c4>
 800b86a:	a201      	add	r2, pc, #4	@ (adr r2, 800b870 <UART_SetConfig+0x5cc>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b8f3 	.word	0x0800b8f3
 800b874:	0800b969 	.word	0x0800b969
 800b878:	0800b8fb 	.word	0x0800b8fb
 800b87c:	0800b969 	.word	0x0800b969
 800b880:	0800b969 	.word	0x0800b969
 800b884:	0800b969 	.word	0x0800b969
 800b888:	0800b90b 	.word	0x0800b90b
 800b88c:	0800b969 	.word	0x0800b969
 800b890:	0800b969 	.word	0x0800b969
 800b894:	0800b969 	.word	0x0800b969
 800b898:	0800b969 	.word	0x0800b969
 800b89c:	0800b969 	.word	0x0800b969
 800b8a0:	0800b969 	.word	0x0800b969
 800b8a4:	0800b969 	.word	0x0800b969
 800b8a8:	0800b91b 	.word	0x0800b91b
 800b8ac:	0800b969 	.word	0x0800b969
 800b8b0:	0800b969 	.word	0x0800b969
 800b8b4:	0800b969 	.word	0x0800b969
 800b8b8:	0800b969 	.word	0x0800b969
 800b8bc:	0800b969 	.word	0x0800b969
 800b8c0:	0800b969 	.word	0x0800b969
 800b8c4:	0800b969 	.word	0x0800b969
 800b8c8:	0800b969 	.word	0x0800b969
 800b8cc:	0800b969 	.word	0x0800b969
 800b8d0:	0800b969 	.word	0x0800b969
 800b8d4:	0800b969 	.word	0x0800b969
 800b8d8:	0800b969 	.word	0x0800b969
 800b8dc:	0800b969 	.word	0x0800b969
 800b8e0:	0800b969 	.word	0x0800b969
 800b8e4:	0800b969 	.word	0x0800b969
 800b8e8:	0800b95b 	.word	0x0800b95b
 800b8ec:	2b40      	cmp	r3, #64	@ 0x40
 800b8ee:	d037      	beq.n	800b960 <UART_SetConfig+0x6bc>
 800b8f0:	e03a      	b.n	800b968 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b8f2:	f7fd ff8b 	bl	800980c <HAL_RCCEx_GetD3PCLK1Freq>
 800b8f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8f8:	e03c      	b.n	800b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fd ff9a 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b908:	e034      	b.n	800b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b90a:	f107 0318 	add.w	r3, r7, #24
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe f8e6 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b918:	e02c      	b.n	800b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b91a:	4b09      	ldr	r3, [pc, #36]	@ (800b940 <UART_SetConfig+0x69c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0320 	and.w	r3, r3, #32
 800b922:	2b00      	cmp	r3, #0
 800b924:	d016      	beq.n	800b954 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b926:	4b06      	ldr	r3, [pc, #24]	@ (800b940 <UART_SetConfig+0x69c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	08db      	lsrs	r3, r3, #3
 800b92c:	f003 0303 	and.w	r3, r3, #3
 800b930:	4a07      	ldr	r2, [pc, #28]	@ (800b950 <UART_SetConfig+0x6ac>)
 800b932:	fa22 f303 	lsr.w	r3, r2, r3
 800b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b938:	e01c      	b.n	800b974 <UART_SetConfig+0x6d0>
 800b93a:	bf00      	nop
 800b93c:	40011400 	.word	0x40011400
 800b940:	58024400 	.word	0x58024400
 800b944:	40007800 	.word	0x40007800
 800b948:	40007c00 	.word	0x40007c00
 800b94c:	58000c00 	.word	0x58000c00
 800b950:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b954:	4b9d      	ldr	r3, [pc, #628]	@ (800bbcc <UART_SetConfig+0x928>)
 800b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b958:	e00c      	b.n	800b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b95a:	4b9d      	ldr	r3, [pc, #628]	@ (800bbd0 <UART_SetConfig+0x92c>)
 800b95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b95e:	e009      	b.n	800b974 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b966:	e005      	b.n	800b974 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b972:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 81de 	beq.w	800bd38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b980:	4a94      	ldr	r2, [pc, #592]	@ (800bbd4 <UART_SetConfig+0x930>)
 800b982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b986:	461a      	mov	r2, r3
 800b988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b98e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	4613      	mov	r3, r2
 800b996:	005b      	lsls	r3, r3, #1
 800b998:	4413      	add	r3, r2
 800b99a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d305      	bcc.n	800b9ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d903      	bls.n	800b9b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b9b2:	e1c1      	b.n	800bd38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	60bb      	str	r3, [r7, #8]
 800b9ba:	60fa      	str	r2, [r7, #12]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c0:	4a84      	ldr	r2, [pc, #528]	@ (800bbd4 <UART_SetConfig+0x930>)
 800b9c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	607a      	str	r2, [r7, #4]
 800b9ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9d6:	f7f4 fc95 	bl	8000304 <__aeabi_uldivmod>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4610      	mov	r0, r2
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	f04f 0200 	mov.w	r2, #0
 800b9e6:	f04f 0300 	mov.w	r3, #0
 800b9ea:	020b      	lsls	r3, r1, #8
 800b9ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9f0:	0202      	lsls	r2, r0, #8
 800b9f2:	6979      	ldr	r1, [r7, #20]
 800b9f4:	6849      	ldr	r1, [r1, #4]
 800b9f6:	0849      	lsrs	r1, r1, #1
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	eb12 0804 	adds.w	r8, r2, r4
 800ba02:	eb43 0905 	adc.w	r9, r3, r5
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	469a      	mov	sl, r3
 800ba0e:	4693      	mov	fp, r2
 800ba10:	4652      	mov	r2, sl
 800ba12:	465b      	mov	r3, fp
 800ba14:	4640      	mov	r0, r8
 800ba16:	4649      	mov	r1, r9
 800ba18:	f7f4 fc74 	bl	8000304 <__aeabi_uldivmod>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4613      	mov	r3, r2
 800ba22:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba2a:	d308      	bcc.n	800ba3e <UART_SetConfig+0x79a>
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba32:	d204      	bcs.n	800ba3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba3a:	60da      	str	r2, [r3, #12]
 800ba3c:	e17c      	b.n	800bd38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba44:	e178      	b.n	800bd38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba4e:	f040 80c5 	bne.w	800bbdc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ba52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba56:	2b20      	cmp	r3, #32
 800ba58:	dc48      	bgt.n	800baec <UART_SetConfig+0x848>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	db7b      	blt.n	800bb56 <UART_SetConfig+0x8b2>
 800ba5e:	2b20      	cmp	r3, #32
 800ba60:	d879      	bhi.n	800bb56 <UART_SetConfig+0x8b2>
 800ba62:	a201      	add	r2, pc, #4	@ (adr r2, 800ba68 <UART_SetConfig+0x7c4>)
 800ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba68:	0800baf3 	.word	0x0800baf3
 800ba6c:	0800bafb 	.word	0x0800bafb
 800ba70:	0800bb57 	.word	0x0800bb57
 800ba74:	0800bb57 	.word	0x0800bb57
 800ba78:	0800bb03 	.word	0x0800bb03
 800ba7c:	0800bb57 	.word	0x0800bb57
 800ba80:	0800bb57 	.word	0x0800bb57
 800ba84:	0800bb57 	.word	0x0800bb57
 800ba88:	0800bb13 	.word	0x0800bb13
 800ba8c:	0800bb57 	.word	0x0800bb57
 800ba90:	0800bb57 	.word	0x0800bb57
 800ba94:	0800bb57 	.word	0x0800bb57
 800ba98:	0800bb57 	.word	0x0800bb57
 800ba9c:	0800bb57 	.word	0x0800bb57
 800baa0:	0800bb57 	.word	0x0800bb57
 800baa4:	0800bb57 	.word	0x0800bb57
 800baa8:	0800bb23 	.word	0x0800bb23
 800baac:	0800bb57 	.word	0x0800bb57
 800bab0:	0800bb57 	.word	0x0800bb57
 800bab4:	0800bb57 	.word	0x0800bb57
 800bab8:	0800bb57 	.word	0x0800bb57
 800babc:	0800bb57 	.word	0x0800bb57
 800bac0:	0800bb57 	.word	0x0800bb57
 800bac4:	0800bb57 	.word	0x0800bb57
 800bac8:	0800bb57 	.word	0x0800bb57
 800bacc:	0800bb57 	.word	0x0800bb57
 800bad0:	0800bb57 	.word	0x0800bb57
 800bad4:	0800bb57 	.word	0x0800bb57
 800bad8:	0800bb57 	.word	0x0800bb57
 800badc:	0800bb57 	.word	0x0800bb57
 800bae0:	0800bb57 	.word	0x0800bb57
 800bae4:	0800bb57 	.word	0x0800bb57
 800bae8:	0800bb49 	.word	0x0800bb49
 800baec:	2b40      	cmp	r3, #64	@ 0x40
 800baee:	d02e      	beq.n	800bb4e <UART_SetConfig+0x8aa>
 800baf0:	e031      	b.n	800bb56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800baf2:	f7fb fe93 	bl	800781c <HAL_RCC_GetPCLK1Freq>
 800baf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800baf8:	e033      	b.n	800bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bafa:	f7fb fea5 	bl	8007848 <HAL_RCC_GetPCLK2Freq>
 800bafe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb00:	e02f      	b.n	800bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7fd fe96 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb10:	e027      	b.n	800bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb12:	f107 0318 	add.w	r3, r7, #24
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fd ffe2 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb20:	e01f      	b.n	800bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb22:	4b2d      	ldr	r3, [pc, #180]	@ (800bbd8 <UART_SetConfig+0x934>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0320 	and.w	r3, r3, #32
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d009      	beq.n	800bb42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bbd8 <UART_SetConfig+0x934>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	08db      	lsrs	r3, r3, #3
 800bb34:	f003 0303 	and.w	r3, r3, #3
 800bb38:	4a24      	ldr	r2, [pc, #144]	@ (800bbcc <UART_SetConfig+0x928>)
 800bb3a:	fa22 f303 	lsr.w	r3, r2, r3
 800bb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb40:	e00f      	b.n	800bb62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bb42:	4b22      	ldr	r3, [pc, #136]	@ (800bbcc <UART_SetConfig+0x928>)
 800bb44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb46:	e00c      	b.n	800bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb48:	4b21      	ldr	r3, [pc, #132]	@ (800bbd0 <UART_SetConfig+0x92c>)
 800bb4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb4c:	e009      	b.n	800bb62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb54:	e005      	b.n	800bb62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bb56:	2300      	movs	r3, #0
 800bb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bb60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 80e7 	beq.w	800bd38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6e:	4a19      	ldr	r2, [pc, #100]	@ (800bbd4 <UART_SetConfig+0x930>)
 800bb70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb74:	461a      	mov	r2, r3
 800bb76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb78:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb7c:	005a      	lsls	r2, r3, #1
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	085b      	lsrs	r3, r3, #1
 800bb84:	441a      	add	r2, r3
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb92:	2b0f      	cmp	r3, #15
 800bb94:	d916      	bls.n	800bbc4 <UART_SetConfig+0x920>
 800bb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb9c:	d212      	bcs.n	800bbc4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	f023 030f 	bic.w	r3, r3, #15
 800bba6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbaa:	085b      	lsrs	r3, r3, #1
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	f003 0307 	and.w	r3, r3, #7
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bbc0:	60da      	str	r2, [r3, #12]
 800bbc2:	e0b9      	b.n	800bd38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bbca:	e0b5      	b.n	800bd38 <UART_SetConfig+0xa94>
 800bbcc:	03d09000 	.word	0x03d09000
 800bbd0:	003d0900 	.word	0x003d0900
 800bbd4:	08013fb0 	.word	0x08013fb0
 800bbd8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bbe0:	2b20      	cmp	r3, #32
 800bbe2:	dc49      	bgt.n	800bc78 <UART_SetConfig+0x9d4>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	db7c      	blt.n	800bce2 <UART_SetConfig+0xa3e>
 800bbe8:	2b20      	cmp	r3, #32
 800bbea:	d87a      	bhi.n	800bce2 <UART_SetConfig+0xa3e>
 800bbec:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf4 <UART_SetConfig+0x950>)
 800bbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf2:	bf00      	nop
 800bbf4:	0800bc7f 	.word	0x0800bc7f
 800bbf8:	0800bc87 	.word	0x0800bc87
 800bbfc:	0800bce3 	.word	0x0800bce3
 800bc00:	0800bce3 	.word	0x0800bce3
 800bc04:	0800bc8f 	.word	0x0800bc8f
 800bc08:	0800bce3 	.word	0x0800bce3
 800bc0c:	0800bce3 	.word	0x0800bce3
 800bc10:	0800bce3 	.word	0x0800bce3
 800bc14:	0800bc9f 	.word	0x0800bc9f
 800bc18:	0800bce3 	.word	0x0800bce3
 800bc1c:	0800bce3 	.word	0x0800bce3
 800bc20:	0800bce3 	.word	0x0800bce3
 800bc24:	0800bce3 	.word	0x0800bce3
 800bc28:	0800bce3 	.word	0x0800bce3
 800bc2c:	0800bce3 	.word	0x0800bce3
 800bc30:	0800bce3 	.word	0x0800bce3
 800bc34:	0800bcaf 	.word	0x0800bcaf
 800bc38:	0800bce3 	.word	0x0800bce3
 800bc3c:	0800bce3 	.word	0x0800bce3
 800bc40:	0800bce3 	.word	0x0800bce3
 800bc44:	0800bce3 	.word	0x0800bce3
 800bc48:	0800bce3 	.word	0x0800bce3
 800bc4c:	0800bce3 	.word	0x0800bce3
 800bc50:	0800bce3 	.word	0x0800bce3
 800bc54:	0800bce3 	.word	0x0800bce3
 800bc58:	0800bce3 	.word	0x0800bce3
 800bc5c:	0800bce3 	.word	0x0800bce3
 800bc60:	0800bce3 	.word	0x0800bce3
 800bc64:	0800bce3 	.word	0x0800bce3
 800bc68:	0800bce3 	.word	0x0800bce3
 800bc6c:	0800bce3 	.word	0x0800bce3
 800bc70:	0800bce3 	.word	0x0800bce3
 800bc74:	0800bcd5 	.word	0x0800bcd5
 800bc78:	2b40      	cmp	r3, #64	@ 0x40
 800bc7a:	d02e      	beq.n	800bcda <UART_SetConfig+0xa36>
 800bc7c:	e031      	b.n	800bce2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc7e:	f7fb fdcd 	bl	800781c <HAL_RCC_GetPCLK1Freq>
 800bc82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc84:	e033      	b.n	800bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc86:	f7fb fddf 	bl	8007848 <HAL_RCC_GetPCLK2Freq>
 800bc8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc8c:	e02f      	b.n	800bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fd fdd0 	bl	8009838 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc9c:	e027      	b.n	800bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc9e:	f107 0318 	add.w	r3, r7, #24
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fd ff1c 	bl	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcac:	e01f      	b.n	800bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcae:	4b2d      	ldr	r3, [pc, #180]	@ (800bd64 <UART_SetConfig+0xac0>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0320 	and.w	r3, r3, #32
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d009      	beq.n	800bcce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bcba:	4b2a      	ldr	r3, [pc, #168]	@ (800bd64 <UART_SetConfig+0xac0>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	08db      	lsrs	r3, r3, #3
 800bcc0:	f003 0303 	and.w	r3, r3, #3
 800bcc4:	4a28      	ldr	r2, [pc, #160]	@ (800bd68 <UART_SetConfig+0xac4>)
 800bcc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bccc:	e00f      	b.n	800bcee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bcce:	4b26      	ldr	r3, [pc, #152]	@ (800bd68 <UART_SetConfig+0xac4>)
 800bcd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd2:	e00c      	b.n	800bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bcd4:	4b25      	ldr	r3, [pc, #148]	@ (800bd6c <UART_SetConfig+0xac8>)
 800bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcd8:	e009      	b.n	800bcee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce0:	e005      	b.n	800bcee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bce2:	2300      	movs	r3, #0
 800bce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bcec:	bf00      	nop
    }

    if (pclk != 0U)
 800bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d021      	beq.n	800bd38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf8:	4a1d      	ldr	r2, [pc, #116]	@ (800bd70 <UART_SetConfig+0xacc>)
 800bcfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd02:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	085b      	lsrs	r3, r3, #1
 800bd0c:	441a      	add	r2, r3
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	2b0f      	cmp	r3, #15
 800bd1c:	d909      	bls.n	800bd32 <UART_SetConfig+0xa8e>
 800bd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd24:	d205      	bcs.n	800bd32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60da      	str	r2, [r3, #12]
 800bd30:	e002      	b.n	800bd38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2200      	movs	r2, #0
 800bd52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd54:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3748      	adds	r7, #72	@ 0x48
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd62:	bf00      	nop
 800bd64:	58024400 	.word	0x58024400
 800bd68:	03d09000 	.word	0x03d09000
 800bd6c:	003d0900 	.word	0x003d0900
 800bd70:	08013fb0 	.word	0x08013fb0

0800bd74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd80:	f003 0308 	and.w	r3, r3, #8
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00a      	beq.n	800bd9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc4:	f003 0302 	and.w	r3, r3, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00a      	beq.n	800bde2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	430a      	orrs	r2, r1
 800bde0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bde6:	f003 0304 	and.w	r3, r3, #4
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00a      	beq.n	800be04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be08:	f003 0310 	and.w	r3, r3, #16
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00a      	beq.n	800be26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be2a:	f003 0320 	and.w	r3, r3, #32
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00a      	beq.n	800be48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	430a      	orrs	r2, r1
 800be46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be50:	2b00      	cmp	r3, #0
 800be52:	d01a      	beq.n	800be8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	430a      	orrs	r2, r1
 800be68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be72:	d10a      	bne.n	800be8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	430a      	orrs	r2, r1
 800be88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	430a      	orrs	r2, r1
 800beaa:	605a      	str	r2, [r3, #4]
  }
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b098      	sub	sp, #96	@ 0x60
 800bebc:	af02      	add	r7, sp, #8
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bec8:	f7f6 f88c 	bl	8001fe4 <HAL_GetTick>
 800becc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f003 0308 	and.w	r3, r3, #8
 800bed8:	2b08      	cmp	r3, #8
 800beda:	d12f      	bne.n	800bf3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bedc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bee4:	2200      	movs	r2, #0
 800bee6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f88e 	bl	800c00c <UART_WaitOnFlagUntilTimeout>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d022      	beq.n	800bf3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befe:	e853 3f00 	ldrex	r3, [r3]
 800bf02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	461a      	mov	r2, r3
 800bf12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf14:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf1c:	e841 2300 	strex	r3, r2, [r1]
 800bf20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d1e6      	bne.n	800bef6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2220      	movs	r2, #32
 800bf2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e063      	b.n	800c004 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 0304 	and.w	r3, r3, #4
 800bf46:	2b04      	cmp	r3, #4
 800bf48:	d149      	bne.n	800bfde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf52:	2200      	movs	r2, #0
 800bf54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f857 	bl	800c00c <UART_WaitOnFlagUntilTimeout>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d03c      	beq.n	800bfde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6c:	e853 3f00 	ldrex	r3, [r3]
 800bf70:	623b      	str	r3, [r7, #32]
   return(result);
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf82:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf8a:	e841 2300 	strex	r3, r2, [r1]
 800bf8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1e6      	bne.n	800bf64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	e853 3f00 	ldrex	r3, [r3]
 800bfa4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f023 0301 	bic.w	r3, r3, #1
 800bfac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3308      	adds	r3, #8
 800bfb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfb6:	61fa      	str	r2, [r7, #28]
 800bfb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfba:	69b9      	ldr	r1, [r7, #24]
 800bfbc:	69fa      	ldr	r2, [r7, #28]
 800bfbe:	e841 2300 	strex	r3, r2, [r1]
 800bfc2:	617b      	str	r3, [r7, #20]
   return(result);
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1e5      	bne.n	800bf96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2220      	movs	r2, #32
 800bfce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	e012      	b.n	800c004 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2220      	movs	r2, #32
 800bfe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2220      	movs	r2, #32
 800bfea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3758      	adds	r7, #88	@ 0x58
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	603b      	str	r3, [r7, #0]
 800c018:	4613      	mov	r3, r2
 800c01a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c01c:	e04f      	b.n	800c0be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c024:	d04b      	beq.n	800c0be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c026:	f7f5 ffdd 	bl	8001fe4 <HAL_GetTick>
 800c02a:	4602      	mov	r2, r0
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	1ad3      	subs	r3, r2, r3
 800c030:	69ba      	ldr	r2, [r7, #24]
 800c032:	429a      	cmp	r2, r3
 800c034:	d302      	bcc.n	800c03c <UART_WaitOnFlagUntilTimeout+0x30>
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e04e      	b.n	800c0de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0304 	and.w	r3, r3, #4
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d037      	beq.n	800c0be <UART_WaitOnFlagUntilTimeout+0xb2>
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	2b80      	cmp	r3, #128	@ 0x80
 800c052:	d034      	beq.n	800c0be <UART_WaitOnFlagUntilTimeout+0xb2>
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	2b40      	cmp	r3, #64	@ 0x40
 800c058:	d031      	beq.n	800c0be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	69db      	ldr	r3, [r3, #28]
 800c060:	f003 0308 	and.w	r3, r3, #8
 800c064:	2b08      	cmp	r3, #8
 800c066:	d110      	bne.n	800c08a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2208      	movs	r2, #8
 800c06e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 f921 	bl	800c2b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2208      	movs	r2, #8
 800c07a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e029      	b.n	800c0de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	69db      	ldr	r3, [r3, #28]
 800c090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c098:	d111      	bne.n	800c0be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f000 f907 	bl	800c2b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e00f      	b.n	800c0de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69da      	ldr	r2, [r3, #28]
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	bf0c      	ite	eq
 800c0ce:	2301      	moveq	r3, #1
 800c0d0:	2300      	movne	r3, #0
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	79fb      	ldrb	r3, [r7, #7]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d0a0      	beq.n	800c01e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b096      	sub	sp, #88	@ 0x58
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	88fa      	ldrh	r2, [r7, #6]
 800c100:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2222      	movs	r2, #34	@ 0x22
 800c110:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d02d      	beq.n	800c17a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c124:	4a40      	ldr	r2, [pc, #256]	@ (800c228 <UART_Start_Receive_DMA+0x140>)
 800c126:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c12e:	4a3f      	ldr	r2, [pc, #252]	@ (800c22c <UART_Start_Receive_DMA+0x144>)
 800c130:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c138:	4a3d      	ldr	r2, [pc, #244]	@ (800c230 <UART_Start_Receive_DMA+0x148>)
 800c13a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c142:	2200      	movs	r2, #0
 800c144:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3324      	adds	r3, #36	@ 0x24
 800c152:	4619      	mov	r1, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c158:	461a      	mov	r2, r3
 800c15a:	88fb      	ldrh	r3, [r7, #6]
 800c15c:	f7f7 fe8c 	bl	8003e78 <HAL_DMA_Start_IT>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d009      	beq.n	800c17a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2210      	movs	r2, #16
 800c16a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2220      	movs	r2, #32
 800c172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e051      	b.n	800c21e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d018      	beq.n	800c1b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c18a:	e853 3f00 	ldrex	r3, [r3]
 800c18e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c196:	657b      	str	r3, [r7, #84]	@ 0x54
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	461a      	mov	r2, r3
 800c19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1a8:	e841 2300 	strex	r3, r2, [r1]
 800c1ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c1ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1e6      	bne.n	800c182 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	f043 0301 	orr.w	r3, r3, #1
 800c1ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c1d4:	637a      	str	r2, [r7, #52]	@ 0x34
 800c1d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c1da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e5      	bne.n	800c1b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	e853 3f00 	ldrex	r3, [r3]
 800c1f6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3308      	adds	r3, #8
 800c206:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c208:	623a      	str	r2, [r7, #32]
 800c20a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20c:	69f9      	ldr	r1, [r7, #28]
 800c20e:	6a3a      	ldr	r2, [r7, #32]
 800c210:	e841 2300 	strex	r3, r2, [r1]
 800c214:	61bb      	str	r3, [r7, #24]
   return(result);
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e5      	bne.n	800c1e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3758      	adds	r7, #88	@ 0x58
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	0800c437 	.word	0x0800c437
 800c22c:	0800c55f 	.word	0x0800c55f
 800c230:	0800c59d 	.word	0x0800c59d

0800c234 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c234:	b480      	push	{r7}
 800c236:	b08f      	sub	sp, #60	@ 0x3c
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	e853 3f00 	ldrex	r3, [r3]
 800c248:	61fb      	str	r3, [r7, #28]
   return(result);
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c250:	637b      	str	r3, [r7, #52]	@ 0x34
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c25a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c25c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c262:	e841 2300 	strex	r3, r2, [r1]
 800c266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e6      	bne.n	800c23c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3308      	adds	r3, #8
 800c274:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	e853 3f00 	ldrex	r3, [r3]
 800c27c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c284:	633b      	str	r3, [r7, #48]	@ 0x30
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3308      	adds	r3, #8
 800c28c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c28e:	61ba      	str	r2, [r7, #24]
 800c290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	6979      	ldr	r1, [r7, #20]
 800c294:	69ba      	ldr	r2, [r7, #24]
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	613b      	str	r3, [r7, #16]
   return(result);
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1e5      	bne.n	800c26e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2220      	movs	r2, #32
 800c2a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c2aa:	bf00      	nop
 800c2ac:	373c      	adds	r7, #60	@ 0x3c
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
	...

0800c2b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b095      	sub	sp, #84	@ 0x54
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2c8:	e853 3f00 	ldrex	r3, [r3]
 800c2cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2de:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2e6:	e841 2300 	strex	r3, r2, [r1]
 800c2ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1e6      	bne.n	800c2c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3308      	adds	r3, #8
 800c2f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fa:	6a3b      	ldr	r3, [r7, #32]
 800c2fc:	e853 3f00 	ldrex	r3, [r3]
 800c300:	61fb      	str	r3, [r7, #28]
   return(result);
 800c302:	69fa      	ldr	r2, [r7, #28]
 800c304:	4b1e      	ldr	r3, [pc, #120]	@ (800c380 <UART_EndRxTransfer+0xc8>)
 800c306:	4013      	ands	r3, r2
 800c308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3308      	adds	r3, #8
 800c310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c312:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c316:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c31a:	e841 2300 	strex	r3, r2, [r1]
 800c31e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1e5      	bne.n	800c2f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d118      	bne.n	800c360 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	e853 3f00 	ldrex	r3, [r3]
 800c33a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	f023 0310 	bic.w	r3, r3, #16
 800c342:	647b      	str	r3, [r7, #68]	@ 0x44
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	461a      	mov	r2, r3
 800c34a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c34c:	61bb      	str	r3, [r7, #24]
 800c34e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c350:	6979      	ldr	r1, [r7, #20]
 800c352:	69ba      	ldr	r2, [r7, #24]
 800c354:	e841 2300 	strex	r3, r2, [r1]
 800c358:	613b      	str	r3, [r7, #16]
   return(result);
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e6      	bne.n	800c32e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2220      	movs	r2, #32
 800c364:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c374:	bf00      	nop
 800c376:	3754      	adds	r7, #84	@ 0x54
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	effffffe 	.word	0xeffffffe

0800c384 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b090      	sub	sp, #64	@ 0x40
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c390:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	69db      	ldr	r3, [r3, #28]
 800c396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c39a:	d037      	beq.n	800c40c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3308      	adds	r3, #8
 800c3aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ae:	e853 3f00 	ldrex	r3, [r3]
 800c3b2:	623b      	str	r3, [r7, #32]
   return(result);
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800c3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3cc:	e841 2300 	strex	r3, r2, [r1]
 800c3d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1e5      	bne.n	800c3a4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	e853 3f00 	ldrex	r3, [r3]
 800c3e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f6:	61fb      	str	r3, [r7, #28]
 800c3f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fa:	69b9      	ldr	r1, [r7, #24]
 800c3fc:	69fa      	ldr	r2, [r7, #28]
 800c3fe:	e841 2300 	strex	r3, r2, [r1]
 800c402:	617b      	str	r3, [r7, #20]
   return(result);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1e6      	bne.n	800c3d8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c40a:	e002      	b.n	800c412 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c40c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c40e:	f7fe ff15 	bl	800b23c <HAL_UART_TxCpltCallback>
}
 800c412:	bf00      	nop
 800c414:	3740      	adds	r7, #64	@ 0x40
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c426:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f7fe ff11 	bl	800b250 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c42e:	bf00      	nop
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b09c      	sub	sp, #112	@ 0x70
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c442:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	69db      	ldr	r3, [r3, #28]
 800c448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c44c:	d071      	beq.n	800c532 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c44e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c450:	2200      	movs	r2, #0
 800c452:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c45e:	e853 3f00 	ldrex	r3, [r3]
 800c462:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c46a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c46c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c474:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c476:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c47a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e6      	bne.n	800c456 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3308      	adds	r3, #8
 800c48e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c492:	e853 3f00 	ldrex	r3, [r3]
 800c496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c49a:	f023 0301 	bic.w	r3, r3, #1
 800c49e:	667b      	str	r3, [r7, #100]	@ 0x64
 800c4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3308      	adds	r3, #8
 800c4a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c4a8:	647a      	str	r2, [r7, #68]	@ 0x44
 800c4aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4b0:	e841 2300 	strex	r3, r2, [r1]
 800c4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1e5      	bne.n	800c488 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c6:	e853 3f00 	ldrex	r3, [r3]
 800c4ca:	623b      	str	r3, [r7, #32]
   return(result);
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	3308      	adds	r3, #8
 800c4da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800c4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4e4:	e841 2300 	strex	r3, r2, [r1]
 800c4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1e5      	bne.n	800c4bc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c4f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4f2:	2220      	movs	r2, #32
 800c4f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d118      	bne.n	800c532 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	e853 3f00 	ldrex	r3, [r3]
 800c50c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f023 0310 	bic.w	r3, r3, #16
 800c514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c51e:	61fb      	str	r3, [r7, #28]
 800c520:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	69b9      	ldr	r1, [r7, #24]
 800c524:	69fa      	ldr	r2, [r7, #28]
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	617b      	str	r3, [r7, #20]
   return(result);
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e6      	bne.n	800c500 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c534:	2200      	movs	r2, #0
 800c536:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c53a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d107      	bne.n	800c550 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c542:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c546:	4619      	mov	r1, r3
 800c548:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c54a:	f7fe fe9f 	bl	800b28c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c54e:	e002      	b.n	800c556 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c550:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c552:	f7f4 fc4f 	bl	8000df4 <HAL_UART_RxCpltCallback>
}
 800c556:	bf00      	nop
 800c558:	3770      	adds	r7, #112	@ 0x70
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c576:	2b01      	cmp	r3, #1
 800c578:	d109      	bne.n	800c58e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c580:	085b      	lsrs	r3, r3, #1
 800c582:	b29b      	uxth	r3, r3
 800c584:	4619      	mov	r1, r3
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7fe fe80 	bl	800b28c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c58c:	e002      	b.n	800c594 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f7fe fe68 	bl	800b264 <HAL_UART_RxHalfCpltCallback>
}
 800c594:	bf00      	nop
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5b0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5b8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c4:	2b80      	cmp	r3, #128	@ 0x80
 800c5c6:	d109      	bne.n	800c5dc <UART_DMAError+0x40>
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	2b21      	cmp	r3, #33	@ 0x21
 800c5cc:	d106      	bne.n	800c5dc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c5d6:	6978      	ldr	r0, [r7, #20]
 800c5d8:	f7ff fe2c 	bl	800c234 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e6:	2b40      	cmp	r3, #64	@ 0x40
 800c5e8:	d109      	bne.n	800c5fe <UART_DMAError+0x62>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b22      	cmp	r3, #34	@ 0x22
 800c5ee:	d106      	bne.n	800c5fe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c5f8:	6978      	ldr	r0, [r7, #20]
 800c5fa:	f7ff fe5d 	bl	800c2b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c604:	f043 0210 	orr.w	r2, r3, #16
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c60e:	6978      	ldr	r0, [r7, #20]
 800c610:	f7fe fe32 	bl	800b278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c614:	bf00      	nop
 800c616:	3718      	adds	r7, #24
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c628:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2200      	movs	r2, #0
 800c636:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f7fe fe1c 	bl	800b278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c640:	bf00      	nop
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	e853 3f00 	ldrex	r3, [r3]
 800c65c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	61bb      	str	r3, [r7, #24]
 800c670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c672:	6979      	ldr	r1, [r7, #20]
 800c674:	69ba      	ldr	r2, [r7, #24]
 800c676:	e841 2300 	strex	r3, r2, [r1]
 800c67a:	613b      	str	r3, [r7, #16]
   return(result);
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1e6      	bne.n	800c650 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2220      	movs	r2, #32
 800c686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7fe fdd3 	bl	800b23c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c696:	bf00      	nop
 800c698:	3720      	adds	r7, #32
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6a6:	bf00      	nop
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c6ce:	bf00      	nop
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b085      	sub	sp, #20
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d101      	bne.n	800c6f0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	e027      	b.n	800c740 <HAL_UARTEx_DisableFifoMode+0x66>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2224      	movs	r2, #36	@ 0x24
 800c6fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f022 0201 	bic.w	r2, r2, #1
 800c716:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c71e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2220      	movs	r2, #32
 800c732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr

0800c74c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c760:	2302      	movs	r3, #2
 800c762:	e02d      	b.n	800c7c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2224      	movs	r2, #36	@ 0x24
 800c770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f022 0201 	bic.w	r2, r2, #1
 800c78a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	430a      	orrs	r2, r1
 800c79e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f84f 	bl	800c844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2220      	movs	r2, #32
 800c7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d101      	bne.n	800c7e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7dc:	2302      	movs	r3, #2
 800c7de:	e02d      	b.n	800c83c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2224      	movs	r2, #36	@ 0x24
 800c7ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f022 0201 	bic.w	r2, r2, #1
 800c806:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	430a      	orrs	r2, r1
 800c81a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f811 	bl	800c844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2220      	movs	r2, #32
 800c82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c850:	2b00      	cmp	r3, #0
 800c852:	d108      	bne.n	800c866 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c864:	e031      	b.n	800c8ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c866:	2310      	movs	r3, #16
 800c868:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c86a:	2310      	movs	r3, #16
 800c86c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	0e5b      	lsrs	r3, r3, #25
 800c876:	b2db      	uxtb	r3, r3
 800c878:	f003 0307 	and.w	r3, r3, #7
 800c87c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	0f5b      	lsrs	r3, r3, #29
 800c886:	b2db      	uxtb	r3, r3
 800c888:	f003 0307 	and.w	r3, r3, #7
 800c88c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c88e:	7bbb      	ldrb	r3, [r7, #14]
 800c890:	7b3a      	ldrb	r2, [r7, #12]
 800c892:	4911      	ldr	r1, [pc, #68]	@ (800c8d8 <UARTEx_SetNbDataToProcess+0x94>)
 800c894:	5c8a      	ldrb	r2, [r1, r2]
 800c896:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c89a:	7b3a      	ldrb	r2, [r7, #12]
 800c89c:	490f      	ldr	r1, [pc, #60]	@ (800c8dc <UARTEx_SetNbDataToProcess+0x98>)
 800c89e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	7b7a      	ldrb	r2, [r7, #13]
 800c8b0:	4909      	ldr	r1, [pc, #36]	@ (800c8d8 <UARTEx_SetNbDataToProcess+0x94>)
 800c8b2:	5c8a      	ldrb	r2, [r1, r2]
 800c8b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8b8:	7b7a      	ldrb	r2, [r7, #13]
 800c8ba:	4908      	ldr	r1, [pc, #32]	@ (800c8dc <UARTEx_SetNbDataToProcess+0x98>)
 800c8bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8be:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c8ca:	bf00      	nop
 800c8cc:	3714      	adds	r7, #20
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	08013fc8 	.word	0x08013fc8
 800c8dc:	08013fd0 	.word	0x08013fd0

0800c8e0 <__NVIC_SetPriority>:
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	6039      	str	r1, [r7, #0]
 800c8ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c8ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	db0a      	blt.n	800c90a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	490c      	ldr	r1, [pc, #48]	@ (800c92c <__NVIC_SetPriority+0x4c>)
 800c8fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8fe:	0112      	lsls	r2, r2, #4
 800c900:	b2d2      	uxtb	r2, r2
 800c902:	440b      	add	r3, r1
 800c904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c908:	e00a      	b.n	800c920 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	4908      	ldr	r1, [pc, #32]	@ (800c930 <__NVIC_SetPriority+0x50>)
 800c910:	88fb      	ldrh	r3, [r7, #6]
 800c912:	f003 030f 	and.w	r3, r3, #15
 800c916:	3b04      	subs	r3, #4
 800c918:	0112      	lsls	r2, r2, #4
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	440b      	add	r3, r1
 800c91e:	761a      	strb	r2, [r3, #24]
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	e000e100 	.word	0xe000e100
 800c930:	e000ed00 	.word	0xe000ed00

0800c934 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c934:	b580      	push	{r7, lr}
 800c936:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c938:	4b05      	ldr	r3, [pc, #20]	@ (800c950 <SysTick_Handler+0x1c>)
 800c93a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c93c:	f002 f976 	bl	800ec2c <xTaskGetSchedulerState>
 800c940:	4603      	mov	r3, r0
 800c942:	2b01      	cmp	r3, #1
 800c944:	d001      	beq.n	800c94a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c946:	f003 fa77 	bl	800fe38 <xPortSysTickHandler>
  }
}
 800c94a:	bf00      	nop
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	e000e010 	.word	0xe000e010

0800c954 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c954:	b580      	push	{r7, lr}
 800c956:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c958:	2100      	movs	r1, #0
 800c95a:	f06f 0004 	mvn.w	r0, #4
 800c95e:	f7ff ffbf 	bl	800c8e0 <__NVIC_SetPriority>
#endif
}
 800c962:	bf00      	nop
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c96e:	f3ef 8305 	mrs	r3, IPSR
 800c972:	603b      	str	r3, [r7, #0]
  return(result);
 800c974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c976:	2b00      	cmp	r3, #0
 800c978:	d003      	beq.n	800c982 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c97a:	f06f 0305 	mvn.w	r3, #5
 800c97e:	607b      	str	r3, [r7, #4]
 800c980:	e00c      	b.n	800c99c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c982:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <osKernelInitialize+0x44>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c98a:	4b08      	ldr	r3, [pc, #32]	@ (800c9ac <osKernelInitialize+0x44>)
 800c98c:	2201      	movs	r2, #1
 800c98e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c990:	2300      	movs	r3, #0
 800c992:	607b      	str	r3, [r7, #4]
 800c994:	e002      	b.n	800c99c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c99a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c99c:	687b      	ldr	r3, [r7, #4]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	370c      	adds	r7, #12
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	240018b8 	.word	0x240018b8

0800c9b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9b6:	f3ef 8305 	mrs	r3, IPSR
 800c9ba:	603b      	str	r3, [r7, #0]
  return(result);
 800c9bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d003      	beq.n	800c9ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800c9c2:	f06f 0305 	mvn.w	r3, #5
 800c9c6:	607b      	str	r3, [r7, #4]
 800c9c8:	e010      	b.n	800c9ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c9ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c9f8 <osKernelStart+0x48>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d109      	bne.n	800c9e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c9d2:	f7ff ffbf 	bl	800c954 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c9d6:	4b08      	ldr	r3, [pc, #32]	@ (800c9f8 <osKernelStart+0x48>)
 800c9d8:	2202      	movs	r2, #2
 800c9da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c9dc:	f001 fca0 	bl	800e320 <vTaskStartScheduler>
      stat = osOK;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	607b      	str	r3, [r7, #4]
 800c9e4:	e002      	b.n	800c9ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c9e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c9ec:	687b      	ldr	r3, [r7, #4]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	240018b8 	.word	0x240018b8

0800c9fc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca02:	f3ef 8305 	mrs	r3, IPSR
 800ca06:	603b      	str	r3, [r7, #0]
  return(result);
 800ca08:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ca0e:	f001 fdb3 	bl	800e578 <xTaskGetTickCountFromISR>
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	e002      	b.n	800ca1c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ca16:	f001 fd9f 	bl	800e558 <xTaskGetTickCount>
 800ca1a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ca1c:	687b      	ldr	r3, [r7, #4]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b08e      	sub	sp, #56	@ 0x38
 800ca2a:	af04      	add	r7, sp, #16
 800ca2c:	60f8      	str	r0, [r7, #12]
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca36:	f3ef 8305 	mrs	r3, IPSR
 800ca3a:	617b      	str	r3, [r7, #20]
  return(result);
 800ca3c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d17e      	bne.n	800cb40 <osThreadNew+0x11a>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d07b      	beq.n	800cb40 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ca48:	2380      	movs	r3, #128	@ 0x80
 800ca4a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ca4c:	2318      	movs	r3, #24
 800ca4e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ca50:	2300      	movs	r3, #0
 800ca52:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d045      	beq.n	800caec <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <osThreadNew+0x48>
        name = attr->name;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	699b      	ldr	r3, [r3, #24]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d008      	beq.n	800ca94 <osThreadNew+0x6e>
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	2b38      	cmp	r3, #56	@ 0x38
 800ca86:	d805      	bhi.n	800ca94 <osThreadNew+0x6e>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <osThreadNew+0x72>
        return (NULL);
 800ca94:	2300      	movs	r3, #0
 800ca96:	e054      	b.n	800cb42 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d003      	beq.n	800caa8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	695b      	ldr	r3, [r3, #20]
 800caa4:	089b      	lsrs	r3, r3, #2
 800caa6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00e      	beq.n	800cace <osThreadNew+0xa8>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	2ba7      	cmp	r3, #167	@ 0xa7
 800cab6:	d90a      	bls.n	800cace <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d006      	beq.n	800cace <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <osThreadNew+0xa8>
        mem = 1;
 800cac8:	2301      	movs	r3, #1
 800caca:	61bb      	str	r3, [r7, #24]
 800cacc:	e010      	b.n	800caf0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10c      	bne.n	800caf0 <osThreadNew+0xca>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d108      	bne.n	800caf0 <osThreadNew+0xca>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d104      	bne.n	800caf0 <osThreadNew+0xca>
          mem = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	61bb      	str	r3, [r7, #24]
 800caea:	e001      	b.n	800caf0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d110      	bne.n	800cb18 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cafe:	9202      	str	r2, [sp, #8]
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	6a3a      	ldr	r2, [r7, #32]
 800cb0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f001 fa13 	bl	800df38 <xTaskCreateStatic>
 800cb12:	4603      	mov	r3, r0
 800cb14:	613b      	str	r3, [r7, #16]
 800cb16:	e013      	b.n	800cb40 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d110      	bne.n	800cb40 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cb1e:	6a3b      	ldr	r3, [r7, #32]
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	f107 0310 	add.w	r3, r7, #16
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f001 fa61 	bl	800dff8 <xTaskCreate>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d001      	beq.n	800cb40 <osThreadNew+0x11a>
            hTask = NULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cb40:	693b      	ldr	r3, [r7, #16]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3728      	adds	r7, #40	@ 0x28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af02      	add	r7, sp, #8
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <osThreadFlagsSet+0x1a>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	da03      	bge.n	800cb6e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800cb66:	f06f 0303 	mvn.w	r3, #3
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	e035      	b.n	800cbda <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800cb6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb74:	f3ef 8305 	mrs	r3, IPSR
 800cb78:	613b      	str	r3, [r7, #16]
  return(result);
 800cb7a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d01f      	beq.n	800cbc0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800cb80:	2300      	movs	r3, #0
 800cb82:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800cb84:	f107 0308 	add.w	r3, r7, #8
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	6839      	ldr	r1, [r7, #0]
 800cb90:	6978      	ldr	r0, [r7, #20]
 800cb92:	f002 fafb 	bl	800f18c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800cb96:	f107 030c 	add.w	r3, r7, #12
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	9200      	str	r2, [sp, #0]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2100      	movs	r1, #0
 800cba2:	6978      	ldr	r0, [r7, #20]
 800cba4:	f002 faf2 	bl	800f18c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d015      	beq.n	800cbda <osThreadFlagsSet+0x8e>
 800cbae:	4b0d      	ldr	r3, [pc, #52]	@ (800cbe4 <osThreadFlagsSet+0x98>)
 800cbb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	e00c      	b.n	800cbda <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6978      	ldr	r0, [r7, #20]
 800cbc8:	f002 fa1e 	bl	800f008 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800cbcc:	f107 030c 	add.w	r3, r7, #12
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	6978      	ldr	r0, [r7, #20]
 800cbd6:	f002 fa17 	bl	800f008 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800cbda:	68fb      	ldr	r3, [r7, #12]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3718      	adds	r7, #24
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	e000ed04 	.word	0xe000ed04

0800cbe8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08c      	sub	sp, #48	@ 0x30
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbf4:	f3ef 8305 	mrs	r3, IPSR
 800cbf8:	617b      	str	r3, [r7, #20]
  return(result);
 800cbfa:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d003      	beq.n	800cc08 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800cc00:	f06f 0305 	mvn.w	r3, #5
 800cc04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc06:	e06b      	b.n	800cce0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	da03      	bge.n	800cc16 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800cc0e:	f06f 0303 	mvn.w	r3, #3
 800cc12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc14:	e064      	b.n	800cce0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	f003 0302 	and.w	r3, r3, #2
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800cc20:	2300      	movs	r3, #0
 800cc22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc24:	e001      	b.n	800cc2a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800cc32:	f001 fc91 	bl	800e558 <xTaskGetTickCount>
 800cc36:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800cc38:	f107 0210 	add.w	r2, r7, #16
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc40:	2000      	movs	r0, #0
 800cc42:	f002 f981 	bl	800ef48 <xTaskNotifyWait>
 800cc46:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d137      	bne.n	800ccbe <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800cc4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4013      	ands	r3, r2
 800cc54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00c      	beq.n	800cc82 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d032      	beq.n	800ccda <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10f      	bne.n	800cc9a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cc7a:	f06f 0302 	mvn.w	r3, #2
 800cc7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cc80:	e02e      	b.n	800cce0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc86:	4013      	ands	r3, r2
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d128      	bne.n	800ccde <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d103      	bne.n	800cc9a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800cc92:	f06f 0302 	mvn.w	r3, #2
 800cc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800cc98:	e022      	b.n	800cce0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800cc9a:	f001 fc5d 	bl	800e558 <xTaskGetTickCount>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	6a3b      	ldr	r3, [r7, #32]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d902      	bls.n	800ccb4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccb2:	e00e      	b.n	800ccd2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800ccb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccbc:	e009      	b.n	800ccd2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d103      	bne.n	800cccc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800ccc4:	f06f 0302 	mvn.w	r3, #2
 800ccc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ccca:	e002      	b.n	800ccd2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800cccc:	f06f 0301 	mvn.w	r3, #1
 800ccd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1af      	bne.n	800cc38 <osThreadFlagsWait+0x50>
 800ccd8:	e002      	b.n	800cce0 <osThreadFlagsWait+0xf8>
            break;
 800ccda:	bf00      	nop
 800ccdc:	e000      	b.n	800cce0 <osThreadFlagsWait+0xf8>
            break;
 800ccde:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800cce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3730      	adds	r7, #48	@ 0x30
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccf2:	f3ef 8305 	mrs	r3, IPSR
 800ccf6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccf8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <osDelay+0x1c>
    stat = osErrorISR;
 800ccfe:	f06f 0305 	mvn.w	r3, #5
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	e007      	b.n	800cd16 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f001 facf 	bl	800e2b4 <vTaskDelay>
    }
  }

  return (stat);
 800cd16:	68fb      	ldr	r3, [r7, #12]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b088      	sub	sp, #32
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd2c:	f3ef 8305 	mrs	r3, IPSR
 800cd30:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd32:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d174      	bne.n	800ce22 <osMutexNew+0x102>
    if (attr != NULL) {
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d003      	beq.n	800cd46 <osMutexNew+0x26>
      type = attr->attr_bits;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	61bb      	str	r3, [r7, #24]
 800cd44:	e001      	b.n	800cd4a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cd46:	2300      	movs	r3, #0
 800cd48:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	f003 0301 	and.w	r3, r3, #1
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d002      	beq.n	800cd5a <osMutexNew+0x3a>
      rmtx = 1U;
 800cd54:	2301      	movs	r3, #1
 800cd56:	617b      	str	r3, [r7, #20]
 800cd58:	e001      	b.n	800cd5e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	f003 0308 	and.w	r3, r3, #8
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d15c      	bne.n	800ce22 <osMutexNew+0x102>
      mem = -1;
 800cd68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd6c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d015      	beq.n	800cda0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d006      	beq.n	800cd8a <osMutexNew+0x6a>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	2b4f      	cmp	r3, #79	@ 0x4f
 800cd82:	d902      	bls.n	800cd8a <osMutexNew+0x6a>
          mem = 1;
 800cd84:	2301      	movs	r3, #1
 800cd86:	613b      	str	r3, [r7, #16]
 800cd88:	e00c      	b.n	800cda4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d108      	bne.n	800cda4 <osMutexNew+0x84>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d104      	bne.n	800cda4 <osMutexNew+0x84>
            mem = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	613b      	str	r3, [r7, #16]
 800cd9e:	e001      	b.n	800cda4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d112      	bne.n	800cdd0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d007      	beq.n	800cdc0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	2004      	movs	r0, #4
 800cdb8:	f000 fb1f 	bl	800d3fa <xQueueCreateMutexStatic>
 800cdbc:	61f8      	str	r0, [r7, #28]
 800cdbe:	e016      	b.n	800cdee <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	f000 fb17 	bl	800d3fa <xQueueCreateMutexStatic>
 800cdcc:	61f8      	str	r0, [r7, #28]
 800cdce:	e00e      	b.n	800cdee <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cddc:	2004      	movs	r0, #4
 800cdde:	f000 faf4 	bl	800d3ca <xQueueCreateMutex>
 800cde2:	61f8      	str	r0, [r7, #28]
 800cde4:	e003      	b.n	800cdee <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cde6:	2001      	movs	r0, #1
 800cde8:	f000 faef 	bl	800d3ca <xQueueCreateMutex>
 800cdec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00c      	beq.n	800ce0e <osMutexNew+0xee>
        if (attr != NULL) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d003      	beq.n	800ce02 <osMutexNew+0xe2>
          name = attr->name;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	e001      	b.n	800ce06 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ce06:	68f9      	ldr	r1, [r7, #12]
 800ce08:	69f8      	ldr	r0, [r7, #28]
 800ce0a:	f001 f837 	bl	800de7c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d006      	beq.n	800ce22 <osMutexNew+0x102>
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d003      	beq.n	800ce22 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	f043 0301 	orr.w	r3, r3, #1
 800ce20:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ce22:	69fb      	ldr	r3, [r7, #28]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3720      	adds	r7, #32
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f023 0301 	bic.w	r3, r3, #1
 800ce3c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce4a:	f3ef 8305 	mrs	r3, IPSR
 800ce4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce50:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ce56:	f06f 0305 	mvn.w	r3, #5
 800ce5a:	617b      	str	r3, [r7, #20]
 800ce5c:	e02c      	b.n	800ceb8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d103      	bne.n	800ce6c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ce64:	f06f 0303 	mvn.w	r3, #3
 800ce68:	617b      	str	r3, [r7, #20]
 800ce6a:	e025      	b.n	800ceb8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d011      	beq.n	800ce96 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6938      	ldr	r0, [r7, #16]
 800ce76:	f000 fb10 	bl	800d49a <xQueueTakeMutexRecursive>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d01b      	beq.n	800ceb8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ce86:	f06f 0301 	mvn.w	r3, #1
 800ce8a:	617b      	str	r3, [r7, #20]
 800ce8c:	e014      	b.n	800ceb8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ce8e:	f06f 0302 	mvn.w	r3, #2
 800ce92:	617b      	str	r3, [r7, #20]
 800ce94:	e010      	b.n	800ceb8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6938      	ldr	r0, [r7, #16]
 800ce9a:	f000 fdb7 	bl	800da0c <xQueueSemaphoreTake>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d009      	beq.n	800ceb8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d003      	beq.n	800ceb2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ceaa:	f06f 0301 	mvn.w	r3, #1
 800ceae:	617b      	str	r3, [r7, #20]
 800ceb0:	e002      	b.n	800ceb8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ceb2:	f06f 0302 	mvn.w	r3, #2
 800ceb6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ceb8:	697b      	ldr	r3, [r7, #20]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b086      	sub	sp, #24
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f023 0301 	bic.w	r3, r3, #1
 800ced0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cede:	f3ef 8305 	mrs	r3, IPSR
 800cee2:	60bb      	str	r3, [r7, #8]
  return(result);
 800cee4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d003      	beq.n	800cef2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ceea:	f06f 0305 	mvn.w	r3, #5
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	e01f      	b.n	800cf32 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d103      	bne.n	800cf00 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cef8:	f06f 0303 	mvn.w	r3, #3
 800cefc:	617b      	str	r3, [r7, #20]
 800cefe:	e018      	b.n	800cf32 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d009      	beq.n	800cf1a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cf06:	6938      	ldr	r0, [r7, #16]
 800cf08:	f000 fa92 	bl	800d430 <xQueueGiveMutexRecursive>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d00f      	beq.n	800cf32 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cf12:	f06f 0302 	mvn.w	r3, #2
 800cf16:	617b      	str	r3, [r7, #20]
 800cf18:	e00b      	b.n	800cf32 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	2100      	movs	r1, #0
 800cf20:	6938      	ldr	r0, [r7, #16]
 800cf22:	f000 faf1 	bl	800d508 <xQueueGenericSend>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d002      	beq.n	800cf32 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cf2c:	f06f 0302 	mvn.w	r3, #2
 800cf30:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cf32:	697b      	ldr	r3, [r7, #20]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4a07      	ldr	r2, [pc, #28]	@ (800cf68 <vApplicationGetIdleTaskMemory+0x2c>)
 800cf4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	4a06      	ldr	r2, [pc, #24]	@ (800cf6c <vApplicationGetIdleTaskMemory+0x30>)
 800cf52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2280      	movs	r2, #128	@ 0x80
 800cf58:	601a      	str	r2, [r3, #0]
}
 800cf5a:	bf00      	nop
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	240018bc 	.word	0x240018bc
 800cf6c:	24001964 	.word	0x24001964

0800cf70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4a07      	ldr	r2, [pc, #28]	@ (800cf9c <vApplicationGetTimerTaskMemory+0x2c>)
 800cf80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	4a06      	ldr	r2, [pc, #24]	@ (800cfa0 <vApplicationGetTimerTaskMemory+0x30>)
 800cf86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf8e:	601a      	str	r2, [r3, #0]
}
 800cf90:	bf00      	nop
 800cf92:	3714      	adds	r7, #20
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	24001b64 	.word	0x24001b64
 800cfa0:	24001c0c 	.word	0x24001c0c

0800cfa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f103 0208 	add.w	r2, r3, #8
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cfbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f103 0208 	add.w	r2, r3, #8
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f103 0208 	add.w	r2, r3, #8
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cff2:	bf00      	nop
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr

0800cffe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cffe:	b480      	push	{r7}
 800d000:	b085      	sub	sp, #20
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	689a      	ldr	r2, [r3, #8]
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	601a      	str	r2, [r3, #0]
}
 800d03a:	bf00      	nop
 800d03c:	3714      	adds	r7, #20
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr

0800d046 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d046:	b480      	push	{r7}
 800d048:	b085      	sub	sp, #20
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d05c:	d103      	bne.n	800d066 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	e00c      	b.n	800d080 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	3308      	adds	r3, #8
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	e002      	b.n	800d074 <vListInsert+0x2e>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	60fb      	str	r3, [r7, #12]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d2f6      	bcs.n	800d06e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	601a      	str	r2, [r3, #0]
}
 800d0ac:	bf00      	nop
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	6892      	ldr	r2, [r2, #8]
 800d0ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	6852      	ldr	r2, [r2, #4]
 800d0d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d103      	bne.n	800d0ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	689a      	ldr	r2, [r3, #8]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	1e5a      	subs	r2, r3, #1
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10b      	bne.n	800d138 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d132:	bf00      	nop
 800d134:	bf00      	nop
 800d136:	e7fd      	b.n	800d134 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d138:	f002 fdee 	bl	800fd18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d144:	68f9      	ldr	r1, [r7, #12]
 800d146:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d148:	fb01 f303 	mul.w	r3, r1, r3
 800d14c:	441a      	add	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d168:	3b01      	subs	r3, #1
 800d16a:	68f9      	ldr	r1, [r7, #12]
 800d16c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d16e:	fb01 f303 	mul.w	r3, r1, r3
 800d172:	441a      	add	r2, r3
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	22ff      	movs	r2, #255	@ 0xff
 800d17c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	22ff      	movs	r2, #255	@ 0xff
 800d184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d114      	bne.n	800d1b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d01a      	beq.n	800d1cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	3310      	adds	r3, #16
 800d19a:	4618      	mov	r0, r3
 800d19c:	f001 fb70 	bl	800e880 <xTaskRemoveFromEventList>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d012      	beq.n	800d1cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d1dc <xQueueGenericReset+0xd0>)
 800d1a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1ac:	601a      	str	r2, [r3, #0]
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	e009      	b.n	800d1cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3310      	adds	r3, #16
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff fef1 	bl	800cfa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3324      	adds	r3, #36	@ 0x24
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff feec 	bl	800cfa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d1cc:	f002 fdd6 	bl	800fd7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d1d0:	2301      	movs	r3, #1
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	e000ed04 	.word	0xe000ed04

0800d1e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08e      	sub	sp, #56	@ 0x38
 800d1e4:	af02      	add	r7, sp, #8
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
 800d1ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10b      	bne.n	800d20c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d206:	bf00      	nop
 800d208:	bf00      	nop
 800d20a:	e7fd      	b.n	800d208 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10b      	bne.n	800d22a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d224:	bf00      	nop
 800d226:	bf00      	nop
 800d228:	e7fd      	b.n	800d226 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d002      	beq.n	800d236 <xQueueGenericCreateStatic+0x56>
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d001      	beq.n	800d23a <xQueueGenericCreateStatic+0x5a>
 800d236:	2301      	movs	r3, #1
 800d238:	e000      	b.n	800d23c <xQueueGenericCreateStatic+0x5c>
 800d23a:	2300      	movs	r3, #0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10b      	bne.n	800d258 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	623b      	str	r3, [r7, #32]
}
 800d252:	bf00      	nop
 800d254:	bf00      	nop
 800d256:	e7fd      	b.n	800d254 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d102      	bne.n	800d264 <xQueueGenericCreateStatic+0x84>
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d101      	bne.n	800d268 <xQueueGenericCreateStatic+0x88>
 800d264:	2301      	movs	r3, #1
 800d266:	e000      	b.n	800d26a <xQueueGenericCreateStatic+0x8a>
 800d268:	2300      	movs	r3, #0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10b      	bne.n	800d286 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	61fb      	str	r3, [r7, #28]
}
 800d280:	bf00      	nop
 800d282:	bf00      	nop
 800d284:	e7fd      	b.n	800d282 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d286:	2350      	movs	r3, #80	@ 0x50
 800d288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b50      	cmp	r3, #80	@ 0x50
 800d28e:	d00b      	beq.n	800d2a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	61bb      	str	r3, [r7, #24]
}
 800d2a2:	bf00      	nop
 800d2a4:	bf00      	nop
 800d2a6:	e7fd      	b.n	800d2a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d2a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00d      	beq.n	800d2d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	68b9      	ldr	r1, [r7, #8]
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f000 f840 	bl	800d350 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3730      	adds	r7, #48	@ 0x30
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b08a      	sub	sp, #40	@ 0x28
 800d2de:	af02      	add	r7, sp, #8
 800d2e0:	60f8      	str	r0, [r7, #12]
 800d2e2:	60b9      	str	r1, [r7, #8]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10b      	bne.n	800d306 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	613b      	str	r3, [r7, #16]
}
 800d300:	bf00      	nop
 800d302:	bf00      	nop
 800d304:	e7fd      	b.n	800d302 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	fb02 f303 	mul.w	r3, r2, r3
 800d30e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	3350      	adds	r3, #80	@ 0x50
 800d314:	4618      	mov	r0, r3
 800d316:	f002 fe21 	bl	800ff5c <pvPortMalloc>
 800d31a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d011      	beq.n	800d346 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	3350      	adds	r3, #80	@ 0x50
 800d32a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d334:	79fa      	ldrb	r2, [r7, #7]
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	4613      	mov	r3, r2
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	68b9      	ldr	r1, [r7, #8]
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f000 f805 	bl	800d350 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d346:	69bb      	ldr	r3, [r7, #24]
	}
 800d348:	4618      	mov	r0, r3
 800d34a:	3720      	adds	r7, #32
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	69ba      	ldr	r2, [r7, #24]
 800d368:	601a      	str	r2, [r3, #0]
 800d36a:	e002      	b.n	800d372 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d37e:	2101      	movs	r1, #1
 800d380:	69b8      	ldr	r0, [r7, #24]
 800d382:	f7ff fec3 	bl	800d10c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	78fa      	ldrb	r2, [r7, #3]
 800d38a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d38e:	bf00      	nop
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d396:	b580      	push	{r7, lr}
 800d398:	b082      	sub	sp, #8
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00e      	beq.n	800d3c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f8a3 	bl	800d508 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d3c2:	bf00      	nop
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b086      	sub	sp, #24
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	617b      	str	r3, [r7, #20]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d3dc:	79fb      	ldrb	r3, [r7, #7]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	6939      	ldr	r1, [r7, #16]
 800d3e2:	6978      	ldr	r0, [r7, #20]
 800d3e4:	f7ff ff79 	bl	800d2da <xQueueGenericCreate>
 800d3e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	f7ff ffd3 	bl	800d396 <prvInitialiseMutex>

		return xNewQueue;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
	}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b088      	sub	sp, #32
 800d3fe:	af02      	add	r7, sp, #8
 800d400:	4603      	mov	r3, r0
 800d402:	6039      	str	r1, [r7, #0]
 800d404:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d406:	2301      	movs	r3, #1
 800d408:	617b      	str	r3, [r7, #20]
 800d40a:	2300      	movs	r3, #0
 800d40c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	2200      	movs	r2, #0
 800d416:	6939      	ldr	r1, [r7, #16]
 800d418:	6978      	ldr	r0, [r7, #20]
 800d41a:	f7ff fee1 	bl	800d1e0 <xQueueGenericCreateStatic>
 800d41e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f7ff ffb8 	bl	800d396 <prvInitialiseMutex>

		return xNewQueue;
 800d426:	68fb      	ldr	r3, [r7, #12]
	}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d430:	b590      	push	{r4, r7, lr}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10b      	bne.n	800d45a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	60fb      	str	r3, [r7, #12]
}
 800d454:	bf00      	nop
 800d456:	bf00      	nop
 800d458:	e7fd      	b.n	800d456 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	689c      	ldr	r4, [r3, #8]
 800d45e:	f001 fbd5 	bl	800ec0c <xTaskGetCurrentTaskHandle>
 800d462:	4603      	mov	r3, r0
 800d464:	429c      	cmp	r4, r3
 800d466:	d111      	bne.n	800d48c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	1e5a      	subs	r2, r3, #1
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d105      	bne.n	800d486 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d47a:	2300      	movs	r3, #0
 800d47c:	2200      	movs	r2, #0
 800d47e:	2100      	movs	r1, #0
 800d480:	6938      	ldr	r0, [r7, #16]
 800d482:	f000 f841 	bl	800d508 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d486:	2301      	movs	r3, #1
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	e001      	b.n	800d490 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d48c:	2300      	movs	r3, #0
 800d48e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d490:	697b      	ldr	r3, [r7, #20]
	}
 800d492:	4618      	mov	r0, r3
 800d494:	371c      	adds	r7, #28
 800d496:	46bd      	mov	sp, r7
 800d498:	bd90      	pop	{r4, r7, pc}

0800d49a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d49a:	b590      	push	{r4, r7, lr}
 800d49c:	b087      	sub	sp, #28
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10b      	bne.n	800d4c6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	60fb      	str	r3, [r7, #12]
}
 800d4c0:	bf00      	nop
 800d4c2:	bf00      	nop
 800d4c4:	e7fd      	b.n	800d4c2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	689c      	ldr	r4, [r3, #8]
 800d4ca:	f001 fb9f 	bl	800ec0c <xTaskGetCurrentTaskHandle>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	429c      	cmp	r4, r3
 800d4d2:	d107      	bne.n	800d4e4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	617b      	str	r3, [r7, #20]
 800d4e2:	e00c      	b.n	800d4fe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d4e4:	6839      	ldr	r1, [r7, #0]
 800d4e6:	6938      	ldr	r0, [r7, #16]
 800d4e8:	f000 fa90 	bl	800da0c <xQueueSemaphoreTake>
 800d4ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d004      	beq.n	800d4fe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	1c5a      	adds	r2, r3, #1
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d4fe:	697b      	ldr	r3, [r7, #20]
	}
 800d500:	4618      	mov	r0, r3
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	bd90      	pop	{r4, r7, pc}

0800d508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08e      	sub	sp, #56	@ 0x38
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
 800d514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d516:	2300      	movs	r3, #0
 800d518:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10b      	bne.n	800d53c <xQueueGenericSend+0x34>
	__asm volatile
 800d524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d528:	f383 8811 	msr	BASEPRI, r3
 800d52c:	f3bf 8f6f 	isb	sy
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d536:	bf00      	nop
 800d538:	bf00      	nop
 800d53a:	e7fd      	b.n	800d538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d103      	bne.n	800d54a <xQueueGenericSend+0x42>
 800d542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d546:	2b00      	cmp	r3, #0
 800d548:	d101      	bne.n	800d54e <xQueueGenericSend+0x46>
 800d54a:	2301      	movs	r3, #1
 800d54c:	e000      	b.n	800d550 <xQueueGenericSend+0x48>
 800d54e:	2300      	movs	r3, #0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d10b      	bne.n	800d56c <xQueueGenericSend+0x64>
	__asm volatile
 800d554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d566:	bf00      	nop
 800d568:	bf00      	nop
 800d56a:	e7fd      	b.n	800d568 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d103      	bne.n	800d57a <xQueueGenericSend+0x72>
 800d572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d576:	2b01      	cmp	r3, #1
 800d578:	d101      	bne.n	800d57e <xQueueGenericSend+0x76>
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <xQueueGenericSend+0x78>
 800d57e:	2300      	movs	r3, #0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10b      	bne.n	800d59c <xQueueGenericSend+0x94>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	623b      	str	r3, [r7, #32]
}
 800d596:	bf00      	nop
 800d598:	bf00      	nop
 800d59a:	e7fd      	b.n	800d598 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d59c:	f001 fb46 	bl	800ec2c <xTaskGetSchedulerState>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d102      	bne.n	800d5ac <xQueueGenericSend+0xa4>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <xQueueGenericSend+0xa8>
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e000      	b.n	800d5b2 <xQueueGenericSend+0xaa>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10b      	bne.n	800d5ce <xQueueGenericSend+0xc6>
	__asm volatile
 800d5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ba:	f383 8811 	msr	BASEPRI, r3
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	61fb      	str	r3, [r7, #28]
}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	e7fd      	b.n	800d5ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5ce:	f002 fba3 	bl	800fd18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d302      	bcc.n	800d5e4 <xQueueGenericSend+0xdc>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d129      	bne.n	800d638 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5ea:	f000 fb37 	bl	800dc5c <prvCopyDataToQueue>
 800d5ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d010      	beq.n	800d61a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fa:	3324      	adds	r3, #36	@ 0x24
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f001 f93f 	bl	800e880 <xTaskRemoveFromEventList>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d013      	beq.n	800d630 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d608:	4b3f      	ldr	r3, [pc, #252]	@ (800d708 <xQueueGenericSend+0x200>)
 800d60a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	e00a      	b.n	800d630 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d620:	4b39      	ldr	r3, [pc, #228]	@ (800d708 <xQueueGenericSend+0x200>)
 800d622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d626:	601a      	str	r2, [r3, #0]
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d630:	f002 fba4 	bl	800fd7c <vPortExitCritical>
				return pdPASS;
 800d634:	2301      	movs	r3, #1
 800d636:	e063      	b.n	800d700 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d103      	bne.n	800d646 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d63e:	f002 fb9d 	bl	800fd7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d642:	2300      	movs	r3, #0
 800d644:	e05c      	b.n	800d700 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d106      	bne.n	800d65a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d64c:	f107 0314 	add.w	r3, r7, #20
 800d650:	4618      	mov	r0, r3
 800d652:	f001 f979 	bl	800e948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d656:	2301      	movs	r3, #1
 800d658:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d65a:	f002 fb8f 	bl	800fd7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d65e:	f000 fecf 	bl	800e400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d662:	f002 fb59 	bl	800fd18 <vPortEnterCritical>
 800d666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d66c:	b25b      	sxtb	r3, r3
 800d66e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d672:	d103      	bne.n	800d67c <xQueueGenericSend+0x174>
 800d674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d676:	2200      	movs	r2, #0
 800d678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d682:	b25b      	sxtb	r3, r3
 800d684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d688:	d103      	bne.n	800d692 <xQueueGenericSend+0x18a>
 800d68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d692:	f002 fb73 	bl	800fd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d696:	1d3a      	adds	r2, r7, #4
 800d698:	f107 0314 	add.w	r3, r7, #20
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 f968 	bl	800e974 <xTaskCheckForTimeOut>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d124      	bne.n	800d6f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d6aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ac:	f000 fbce 	bl	800de4c <prvIsQueueFull>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d018      	beq.n	800d6e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b8:	3310      	adds	r3, #16
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f001 f88c 	bl	800e7dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d6c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6c6:	f000 fb59 	bl	800dd7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d6ca:	f000 fea7 	bl	800e41c <xTaskResumeAll>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f47f af7c 	bne.w	800d5ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d708 <xQueueGenericSend+0x200>)
 800d6d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	e772      	b.n	800d5ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ea:	f000 fb47 	bl	800dd7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ee:	f000 fe95 	bl	800e41c <xTaskResumeAll>
 800d6f2:	e76c      	b.n	800d5ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6f6:	f000 fb41 	bl	800dd7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6fa:	f000 fe8f 	bl	800e41c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d700:	4618      	mov	r0, r3
 800d702:	3738      	adds	r7, #56	@ 0x38
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	e000ed04 	.word	0xe000ed04

0800d70c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b090      	sub	sp, #64	@ 0x40
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10b      	bne.n	800d73c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d736:	bf00      	nop
 800d738:	bf00      	nop
 800d73a:	e7fd      	b.n	800d738 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d103      	bne.n	800d74a <xQueueGenericSendFromISR+0x3e>
 800d742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d746:	2b00      	cmp	r3, #0
 800d748:	d101      	bne.n	800d74e <xQueueGenericSendFromISR+0x42>
 800d74a:	2301      	movs	r3, #1
 800d74c:	e000      	b.n	800d750 <xQueueGenericSendFromISR+0x44>
 800d74e:	2300      	movs	r3, #0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10b      	bne.n	800d76c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	e7fd      	b.n	800d768 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d103      	bne.n	800d77a <xQueueGenericSendFromISR+0x6e>
 800d772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d776:	2b01      	cmp	r3, #1
 800d778:	d101      	bne.n	800d77e <xQueueGenericSendFromISR+0x72>
 800d77a:	2301      	movs	r3, #1
 800d77c:	e000      	b.n	800d780 <xQueueGenericSendFromISR+0x74>
 800d77e:	2300      	movs	r3, #0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10b      	bne.n	800d79c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	623b      	str	r3, [r7, #32]
}
 800d796:	bf00      	nop
 800d798:	bf00      	nop
 800d79a:	e7fd      	b.n	800d798 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d79c:	f002 fb9c 	bl	800fed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d7a0:	f3ef 8211 	mrs	r2, BASEPRI
 800d7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	61fa      	str	r2, [r7, #28]
 800d7b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d7b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d302      	bcc.n	800d7ce <xQueueGenericSendFromISR+0xc2>
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d12f      	bne.n	800d82e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	68b9      	ldr	r1, [r7, #8]
 800d7e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7e4:	f000 fa3a 	bl	800dc5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7f0:	d112      	bne.n	800d818 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d016      	beq.n	800d828 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fc:	3324      	adds	r3, #36	@ 0x24
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 f83e 	bl	800e880 <xTaskRemoveFromEventList>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00e      	beq.n	800d828 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2201      	movs	r2, #1
 800d814:	601a      	str	r2, [r3, #0]
 800d816:	e007      	b.n	800d828 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d81c:	3301      	adds	r3, #1
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	b25a      	sxtb	r2, r3
 800d822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d828:	2301      	movs	r3, #1
 800d82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d82c:	e001      	b.n	800d832 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d82e:	2300      	movs	r3, #0
 800d830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d834:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d83c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d840:	4618      	mov	r0, r3
 800d842:	3740      	adds	r7, #64	@ 0x40
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08c      	sub	sp, #48	@ 0x30
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d854:	2300      	movs	r3, #0
 800d856:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d10b      	bne.n	800d87a <xQueueReceive+0x32>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	623b      	str	r3, [r7, #32]
}
 800d874:	bf00      	nop
 800d876:	bf00      	nop
 800d878:	e7fd      	b.n	800d876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d103      	bne.n	800d888 <xQueueReceive+0x40>
 800d880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d884:	2b00      	cmp	r3, #0
 800d886:	d101      	bne.n	800d88c <xQueueReceive+0x44>
 800d888:	2301      	movs	r3, #1
 800d88a:	e000      	b.n	800d88e <xQueueReceive+0x46>
 800d88c:	2300      	movs	r3, #0
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d10b      	bne.n	800d8aa <xQueueReceive+0x62>
	__asm volatile
 800d892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d896:	f383 8811 	msr	BASEPRI, r3
 800d89a:	f3bf 8f6f 	isb	sy
 800d89e:	f3bf 8f4f 	dsb	sy
 800d8a2:	61fb      	str	r3, [r7, #28]
}
 800d8a4:	bf00      	nop
 800d8a6:	bf00      	nop
 800d8a8:	e7fd      	b.n	800d8a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8aa:	f001 f9bf 	bl	800ec2c <xTaskGetSchedulerState>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d102      	bne.n	800d8ba <xQueueReceive+0x72>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d101      	bne.n	800d8be <xQueueReceive+0x76>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e000      	b.n	800d8c0 <xQueueReceive+0x78>
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10b      	bne.n	800d8dc <xQueueReceive+0x94>
	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	61bb      	str	r3, [r7, #24]
}
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	e7fd      	b.n	800d8d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8dc:	f002 fa1c 	bl	800fd18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d01f      	beq.n	800d92c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8ec:	68b9      	ldr	r1, [r7, #8]
 800d8ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8f0:	f000 fa1e 	bl	800dd30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f6:	1e5a      	subs	r2, r3, #1
 800d8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00f      	beq.n	800d924 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d906:	3310      	adds	r3, #16
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 ffb9 	bl	800e880 <xTaskRemoveFromEventList>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d007      	beq.n	800d924 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d914:	4b3c      	ldr	r3, [pc, #240]	@ (800da08 <xQueueReceive+0x1c0>)
 800d916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d924:	f002 fa2a 	bl	800fd7c <vPortExitCritical>
				return pdPASS;
 800d928:	2301      	movs	r3, #1
 800d92a:	e069      	b.n	800da00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d103      	bne.n	800d93a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d932:	f002 fa23 	bl	800fd7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d936:	2300      	movs	r3, #0
 800d938:	e062      	b.n	800da00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d106      	bne.n	800d94e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d940:	f107 0310 	add.w	r3, r7, #16
 800d944:	4618      	mov	r0, r3
 800d946:	f000 ffff 	bl	800e948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d94a:	2301      	movs	r3, #1
 800d94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d94e:	f002 fa15 	bl	800fd7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d952:	f000 fd55 	bl	800e400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d956:	f002 f9df 	bl	800fd18 <vPortEnterCritical>
 800d95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d960:	b25b      	sxtb	r3, r3
 800d962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d966:	d103      	bne.n	800d970 <xQueueReceive+0x128>
 800d968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d972:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d976:	b25b      	sxtb	r3, r3
 800d978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d97c:	d103      	bne.n	800d986 <xQueueReceive+0x13e>
 800d97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d980:	2200      	movs	r2, #0
 800d982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d986:	f002 f9f9 	bl	800fd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d98a:	1d3a      	adds	r2, r7, #4
 800d98c:	f107 0310 	add.w	r3, r7, #16
 800d990:	4611      	mov	r1, r2
 800d992:	4618      	mov	r0, r3
 800d994:	f000 ffee 	bl	800e974 <xTaskCheckForTimeOut>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d123      	bne.n	800d9e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d99e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9a0:	f000 fa3e 	bl	800de20 <prvIsQueueEmpty>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d017      	beq.n	800d9da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ac:	3324      	adds	r3, #36	@ 0x24
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 ff12 	bl	800e7dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9ba:	f000 f9df 	bl	800dd7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9be:	f000 fd2d 	bl	800e41c <xTaskResumeAll>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d189      	bne.n	800d8dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d9c8:	4b0f      	ldr	r3, [pc, #60]	@ (800da08 <xQueueReceive+0x1c0>)
 800d9ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	e780      	b.n	800d8dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9dc:	f000 f9ce 	bl	800dd7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9e0:	f000 fd1c 	bl	800e41c <xTaskResumeAll>
 800d9e4:	e77a      	b.n	800d8dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d9e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9e8:	f000 f9c8 	bl	800dd7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9ec:	f000 fd16 	bl	800e41c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9f2:	f000 fa15 	bl	800de20 <prvIsQueueEmpty>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f43f af6f 	beq.w	800d8dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da00:	4618      	mov	r0, r3
 800da02:	3730      	adds	r7, #48	@ 0x30
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	e000ed04 	.word	0xe000ed04

0800da0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08e      	sub	sp, #56	@ 0x38
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da16:	2300      	movs	r3, #0
 800da18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da1e:	2300      	movs	r3, #0
 800da20:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da24:	2b00      	cmp	r3, #0
 800da26:	d10b      	bne.n	800da40 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800da28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	623b      	str	r3, [r7, #32]
}
 800da3a:	bf00      	nop
 800da3c:	bf00      	nop
 800da3e:	e7fd      	b.n	800da3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00b      	beq.n	800da60 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800da48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	61fb      	str	r3, [r7, #28]
}
 800da5a:	bf00      	nop
 800da5c:	bf00      	nop
 800da5e:	e7fd      	b.n	800da5c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da60:	f001 f8e4 	bl	800ec2c <xTaskGetSchedulerState>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d102      	bne.n	800da70 <xQueueSemaphoreTake+0x64>
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d101      	bne.n	800da74 <xQueueSemaphoreTake+0x68>
 800da70:	2301      	movs	r3, #1
 800da72:	e000      	b.n	800da76 <xQueueSemaphoreTake+0x6a>
 800da74:	2300      	movs	r3, #0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d10b      	bne.n	800da92 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	61bb      	str	r3, [r7, #24]
}
 800da8c:	bf00      	nop
 800da8e:	bf00      	nop
 800da90:	e7fd      	b.n	800da8e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da92:	f002 f941 	bl	800fd18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da9a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d024      	beq.n	800daec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800daa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa4:	1e5a      	subs	r2, r3, #1
 800daa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d104      	bne.n	800dabc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dab2:	f001 fa35 	bl	800ef20 <pvTaskIncrementMutexHeldCount>
 800dab6:	4602      	mov	r2, r0
 800dab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00f      	beq.n	800dae4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac6:	3310      	adds	r3, #16
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 fed9 	bl	800e880 <xTaskRemoveFromEventList>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d007      	beq.n	800dae4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dad4:	4b54      	ldr	r3, [pc, #336]	@ (800dc28 <xQueueSemaphoreTake+0x21c>)
 800dad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dae4:	f002 f94a 	bl	800fd7c <vPortExitCritical>
				return pdPASS;
 800dae8:	2301      	movs	r3, #1
 800daea:	e098      	b.n	800dc1e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d112      	bne.n	800db18 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00b      	beq.n	800db10 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800daf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafc:	f383 8811 	msr	BASEPRI, r3
 800db00:	f3bf 8f6f 	isb	sy
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	617b      	str	r3, [r7, #20]
}
 800db0a:	bf00      	nop
 800db0c:	bf00      	nop
 800db0e:	e7fd      	b.n	800db0c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db10:	f002 f934 	bl	800fd7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db14:	2300      	movs	r3, #0
 800db16:	e082      	b.n	800dc1e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d106      	bne.n	800db2c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db1e:	f107 030c 	add.w	r3, r7, #12
 800db22:	4618      	mov	r0, r3
 800db24:	f000 ff10 	bl	800e948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db28:	2301      	movs	r3, #1
 800db2a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db2c:	f002 f926 	bl	800fd7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db30:	f000 fc66 	bl	800e400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db34:	f002 f8f0 	bl	800fd18 <vPortEnterCritical>
 800db38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db3e:	b25b      	sxtb	r3, r3
 800db40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db44:	d103      	bne.n	800db4e <xQueueSemaphoreTake+0x142>
 800db46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db54:	b25b      	sxtb	r3, r3
 800db56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db5a:	d103      	bne.n	800db64 <xQueueSemaphoreTake+0x158>
 800db5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db64:	f002 f90a 	bl	800fd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db68:	463a      	mov	r2, r7
 800db6a:	f107 030c 	add.w	r3, r7, #12
 800db6e:	4611      	mov	r1, r2
 800db70:	4618      	mov	r0, r3
 800db72:	f000 feff 	bl	800e974 <xTaskCheckForTimeOut>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d132      	bne.n	800dbe2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db7e:	f000 f94f 	bl	800de20 <prvIsQueueEmpty>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d026      	beq.n	800dbd6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d109      	bne.n	800dba4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800db90:	f002 f8c2 	bl	800fd18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	4618      	mov	r0, r3
 800db9a:	f001 f865 	bl	800ec68 <xTaskPriorityInherit>
 800db9e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800dba0:	f002 f8ec 	bl	800fd7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dba6:	3324      	adds	r3, #36	@ 0x24
 800dba8:	683a      	ldr	r2, [r7, #0]
 800dbaa:	4611      	mov	r1, r2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 fe15 	bl	800e7dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbb4:	f000 f8e2 	bl	800dd7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbb8:	f000 fc30 	bl	800e41c <xTaskResumeAll>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f47f af67 	bne.w	800da92 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dbc4:	4b18      	ldr	r3, [pc, #96]	@ (800dc28 <xQueueSemaphoreTake+0x21c>)
 800dbc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbca:	601a      	str	r2, [r3, #0]
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	e75d      	b.n	800da92 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dbd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbd8:	f000 f8d0 	bl	800dd7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbdc:	f000 fc1e 	bl	800e41c <xTaskResumeAll>
 800dbe0:	e757      	b.n	800da92 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dbe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbe4:	f000 f8ca 	bl	800dd7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbe8:	f000 fc18 	bl	800e41c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbee:	f000 f917 	bl	800de20 <prvIsQueueEmpty>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f43f af4c 	beq.w	800da92 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00d      	beq.n	800dc1c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dc00:	f002 f88a 	bl	800fd18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc06:	f000 f811 	bl	800dc2c <prvGetDisinheritPriorityAfterTimeout>
 800dc0a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dc12:	4618      	mov	r0, r3
 800dc14:	f001 f900 	bl	800ee18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc18:	f002 f8b0 	bl	800fd7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3738      	adds	r7, #56	@ 0x38
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d006      	beq.n	800dc4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	e001      	b.n	800dc4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10d      	bne.n	800dc96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d14d      	bne.n	800dd1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f001 f856 	bl	800ed38 <xTaskPriorityDisinherit>
 800dc8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2200      	movs	r2, #0
 800dc92:	609a      	str	r2, [r3, #8]
 800dc94:	e043      	b.n	800dd1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d119      	bne.n	800dcd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6858      	ldr	r0, [r3, #4]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dca4:	461a      	mov	r2, r3
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	f005 ff87 	bl	8013bba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	685a      	ldr	r2, [r3, #4]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb4:	441a      	add	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d32b      	bcc.n	800dd1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	605a      	str	r2, [r3, #4]
 800dcce:	e026      	b.n	800dd1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68d8      	ldr	r0, [r3, #12]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcd8:	461a      	mov	r2, r3
 800dcda:	68b9      	ldr	r1, [r7, #8]
 800dcdc:	f005 ff6d 	bl	8013bba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68da      	ldr	r2, [r3, #12]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dce8:	425b      	negs	r3, r3
 800dcea:	441a      	add	r2, r3
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	68da      	ldr	r2, [r3, #12]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d207      	bcs.n	800dd0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	689a      	ldr	r2, [r3, #8]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd04:	425b      	negs	r3, r3
 800dd06:	441a      	add	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d105      	bne.n	800dd1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dd26:	697b      	ldr	r3, [r7, #20]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d018      	beq.n	800dd74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68da      	ldr	r2, [r3, #12]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd4a:	441a      	add	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	68da      	ldr	r2, [r3, #12]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d303      	bcc.n	800dd64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	68d9      	ldr	r1, [r3, #12]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	6838      	ldr	r0, [r7, #0]
 800dd70:	f005 ff23 	bl	8013bba <memcpy>
	}
}
 800dd74:	bf00      	nop
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd84:	f001 ffc8 	bl	800fd18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd90:	e011      	b.n	800ddb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d012      	beq.n	800ddc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	3324      	adds	r3, #36	@ 0x24
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 fd6e 	bl	800e880 <xTaskRemoveFromEventList>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ddaa:	f000 fe47 	bl	800ea3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	dce9      	bgt.n	800dd92 <prvUnlockQueue+0x16>
 800ddbe:	e000      	b.n	800ddc2 <prvUnlockQueue+0x46>
					break;
 800ddc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	22ff      	movs	r2, #255	@ 0xff
 800ddc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ddca:	f001 ffd7 	bl	800fd7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ddce:	f001 ffa3 	bl	800fd18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ddd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddda:	e011      	b.n	800de00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	691b      	ldr	r3, [r3, #16]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d012      	beq.n	800de0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3310      	adds	r3, #16
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 fd49 	bl	800e880 <xTaskRemoveFromEventList>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddf4:	f000 fe22 	bl	800ea3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ddf8:	7bbb      	ldrb	r3, [r7, #14]
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de04:	2b00      	cmp	r3, #0
 800de06:	dce9      	bgt.n	800dddc <prvUnlockQueue+0x60>
 800de08:	e000      	b.n	800de0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	22ff      	movs	r2, #255	@ 0xff
 800de10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800de14:	f001 ffb2 	bl	800fd7c <vPortExitCritical>
}
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de28:	f001 ff76 	bl	800fd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de30:	2b00      	cmp	r3, #0
 800de32:	d102      	bne.n	800de3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de34:	2301      	movs	r3, #1
 800de36:	60fb      	str	r3, [r7, #12]
 800de38:	e001      	b.n	800de3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de3a:	2300      	movs	r3, #0
 800de3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de3e:	f001 ff9d 	bl	800fd7c <vPortExitCritical>

	return xReturn;
 800de42:	68fb      	ldr	r3, [r7, #12]
}
 800de44:	4618      	mov	r0, r3
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de54:	f001 ff60 	bl	800fd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de60:	429a      	cmp	r2, r3
 800de62:	d102      	bne.n	800de6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	60fb      	str	r3, [r7, #12]
 800de68:	e001      	b.n	800de6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de6e:	f001 ff85 	bl	800fd7c <vPortExitCritical>

	return xReturn;
 800de72:	68fb      	ldr	r3, [r7, #12]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de86:	2300      	movs	r3, #0
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	e014      	b.n	800deb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de8c:	4a0f      	ldr	r2, [pc, #60]	@ (800decc <vQueueAddToRegistry+0x50>)
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10b      	bne.n	800deb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de98:	490c      	ldr	r1, [pc, #48]	@ (800decc <vQueueAddToRegistry+0x50>)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	683a      	ldr	r2, [r7, #0]
 800de9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dea2:	4a0a      	ldr	r2, [pc, #40]	@ (800decc <vQueueAddToRegistry+0x50>)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	4413      	add	r3, r2
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800deae:	e006      	b.n	800debe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3301      	adds	r3, #1
 800deb4:	60fb      	str	r3, [r7, #12]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2b07      	cmp	r3, #7
 800deba:	d9e7      	bls.n	800de8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800debc:	bf00      	nop
 800debe:	bf00      	nop
 800dec0:	3714      	adds	r7, #20
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	2400200c 	.word	0x2400200c

0800ded0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dee0:	f001 ff1a 	bl	800fd18 <vPortEnterCritical>
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800deea:	b25b      	sxtb	r3, r3
 800deec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800def0:	d103      	bne.n	800defa <vQueueWaitForMessageRestricted+0x2a>
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2200      	movs	r2, #0
 800def6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df00:	b25b      	sxtb	r3, r3
 800df02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df06:	d103      	bne.n	800df10 <vQueueWaitForMessageRestricted+0x40>
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df10:	f001 ff34 	bl	800fd7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d106      	bne.n	800df2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	3324      	adds	r3, #36	@ 0x24
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	68b9      	ldr	r1, [r7, #8]
 800df24:	4618      	mov	r0, r3
 800df26:	f000 fc7f 	bl	800e828 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df2a:	6978      	ldr	r0, [r7, #20]
 800df2c:	f7ff ff26 	bl	800dd7c <prvUnlockQueue>
	}
 800df30:	bf00      	nop
 800df32:	3718      	adds	r7, #24
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b08e      	sub	sp, #56	@ 0x38
 800df3c:	af04      	add	r7, sp, #16
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
 800df44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10b      	bne.n	800df64 <xTaskCreateStatic+0x2c>
	__asm volatile
 800df4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df50:	f383 8811 	msr	BASEPRI, r3
 800df54:	f3bf 8f6f 	isb	sy
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	623b      	str	r3, [r7, #32]
}
 800df5e:	bf00      	nop
 800df60:	bf00      	nop
 800df62:	e7fd      	b.n	800df60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10b      	bne.n	800df82 <xTaskCreateStatic+0x4a>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	61fb      	str	r3, [r7, #28]
}
 800df7c:	bf00      	nop
 800df7e:	bf00      	nop
 800df80:	e7fd      	b.n	800df7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df82:	23a8      	movs	r3, #168	@ 0xa8
 800df84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	2ba8      	cmp	r3, #168	@ 0xa8
 800df8a:	d00b      	beq.n	800dfa4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	61bb      	str	r3, [r7, #24]
}
 800df9e:	bf00      	nop
 800dfa0:	bf00      	nop
 800dfa2:	e7fd      	b.n	800dfa0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dfa4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01e      	beq.n	800dfea <xTaskCreateStatic+0xb2>
 800dfac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d01b      	beq.n	800dfea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfbe:	2202      	movs	r2, #2
 800dfc0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	9303      	str	r3, [sp, #12]
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfca:	9302      	str	r3, [sp, #8]
 800dfcc:	f107 0314 	add.w	r3, r7, #20
 800dfd0:	9301      	str	r3, [sp, #4]
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd4:	9300      	str	r3, [sp, #0]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f000 f851 	bl	800e084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfe2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dfe4:	f000 f8f6 	bl	800e1d4 <prvAddNewTaskToReadyList>
 800dfe8:	e001      	b.n	800dfee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dfea:	2300      	movs	r3, #0
 800dfec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfee:	697b      	ldr	r3, [r7, #20]
	}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3728      	adds	r7, #40	@ 0x28
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b08c      	sub	sp, #48	@ 0x30
 800dffc:	af04      	add	r7, sp, #16
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	603b      	str	r3, [r7, #0]
 800e004:	4613      	mov	r3, r2
 800e006:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e008:	88fb      	ldrh	r3, [r7, #6]
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4618      	mov	r0, r3
 800e00e:	f001 ffa5 	bl	800ff5c <pvPortMalloc>
 800e012:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00e      	beq.n	800e038 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e01a:	20a8      	movs	r0, #168	@ 0xa8
 800e01c:	f001 ff9e 	bl	800ff5c <pvPortMalloc>
 800e020:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d003      	beq.n	800e030 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	697a      	ldr	r2, [r7, #20]
 800e02c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e02e:	e005      	b.n	800e03c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e030:	6978      	ldr	r0, [r7, #20]
 800e032:	f002 f861 	bl	80100f8 <vPortFree>
 800e036:	e001      	b.n	800e03c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e038:	2300      	movs	r3, #0
 800e03a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d017      	beq.n	800e072 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	2200      	movs	r2, #0
 800e046:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e04a:	88fa      	ldrh	r2, [r7, #6]
 800e04c:	2300      	movs	r3, #0
 800e04e:	9303      	str	r3, [sp, #12]
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	9302      	str	r3, [sp, #8]
 800e054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e056:	9301      	str	r3, [sp, #4]
 800e058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	68b9      	ldr	r1, [r7, #8]
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f000 f80f 	bl	800e084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e066:	69f8      	ldr	r0, [r7, #28]
 800e068:	f000 f8b4 	bl	800e1d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e06c:	2301      	movs	r3, #1
 800e06e:	61bb      	str	r3, [r7, #24]
 800e070:	e002      	b.n	800e078 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e076:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e078:	69bb      	ldr	r3, [r7, #24]
	}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3720      	adds	r7, #32
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
	...

0800e084 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
 800e090:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e094:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	461a      	mov	r2, r3
 800e09c:	21a5      	movs	r1, #165	@ 0xa5
 800e09e:	f005 fcab 	bl	80139f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e0a6:	6879      	ldr	r1, [r7, #4]
 800e0a8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e0ac:	440b      	add	r3, r1
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	f023 0307 	bic.w	r3, r3, #7
 800e0ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	f003 0307 	and.w	r3, r3, #7
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00b      	beq.n	800e0de <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	617b      	str	r3, [r7, #20]
}
 800e0d8:	bf00      	nop
 800e0da:	bf00      	nop
 800e0dc:	e7fd      	b.n	800e0da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d01f      	beq.n	800e124 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	61fb      	str	r3, [r7, #28]
 800e0e8:	e012      	b.n	800e110 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	7819      	ldrb	r1, [r3, #0]
 800e0f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	3334      	adds	r3, #52	@ 0x34
 800e0fa:	460a      	mov	r2, r1
 800e0fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	4413      	add	r3, r2
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d006      	beq.n	800e118 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	3301      	adds	r3, #1
 800e10e:	61fb      	str	r3, [r7, #28]
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2b0f      	cmp	r3, #15
 800e114:	d9e9      	bls.n	800e0ea <prvInitialiseNewTask+0x66>
 800e116:	e000      	b.n	800e11a <prvInitialiseNewTask+0x96>
			{
				break;
 800e118:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e122:	e003      	b.n	800e12c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e126:	2200      	movs	r2, #0
 800e128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e12e:	2b37      	cmp	r3, #55	@ 0x37
 800e130:	d901      	bls.n	800e136 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e132:	2337      	movs	r3, #55	@ 0x37
 800e134:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e13a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e13e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e140:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e144:	2200      	movs	r2, #0
 800e146:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14a:	3304      	adds	r3, #4
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe ff49 	bl	800cfe4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e154:	3318      	adds	r3, #24
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe ff44 	bl	800cfe4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e160:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e164:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e16a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e16e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e170:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e174:	2200      	movs	r2, #0
 800e176:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e184:	3354      	adds	r3, #84	@ 0x54
 800e186:	224c      	movs	r2, #76	@ 0x4c
 800e188:	2100      	movs	r1, #0
 800e18a:	4618      	mov	r0, r3
 800e18c:	f005 fc34 	bl	80139f8 <memset>
 800e190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e192:	4a0d      	ldr	r2, [pc, #52]	@ (800e1c8 <prvInitialiseNewTask+0x144>)
 800e194:	659a      	str	r2, [r3, #88]	@ 0x58
 800e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e198:	4a0c      	ldr	r2, [pc, #48]	@ (800e1cc <prvInitialiseNewTask+0x148>)
 800e19a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19e:	4a0c      	ldr	r2, [pc, #48]	@ (800e1d0 <prvInitialiseNewTask+0x14c>)
 800e1a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1a2:	683a      	ldr	r2, [r7, #0]
 800e1a4:	68f9      	ldr	r1, [r7, #12]
 800e1a6:	69b8      	ldr	r0, [r7, #24]
 800e1a8:	f001 fc84 	bl	800fab4 <pxPortInitialiseStack>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1be:	bf00      	nop
 800e1c0:	3720      	adds	r7, #32
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	240333e8 	.word	0x240333e8
 800e1cc:	24033450 	.word	0x24033450
 800e1d0:	240334b8 	.word	0x240334b8

0800e1d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1dc:	f001 fd9c 	bl	800fd18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1e0:	4b2d      	ldr	r3, [pc, #180]	@ (800e298 <prvAddNewTaskToReadyList+0xc4>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	4a2c      	ldr	r2, [pc, #176]	@ (800e298 <prvAddNewTaskToReadyList+0xc4>)
 800e1e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1ea:	4b2c      	ldr	r3, [pc, #176]	@ (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d109      	bne.n	800e206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1f2:	4a2a      	ldr	r2, [pc, #168]	@ (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1f8:	4b27      	ldr	r3, [pc, #156]	@ (800e298 <prvAddNewTaskToReadyList+0xc4>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d110      	bne.n	800e222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e200:	f000 fc40 	bl	800ea84 <prvInitialiseTaskLists>
 800e204:	e00d      	b.n	800e222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e206:	4b26      	ldr	r3, [pc, #152]	@ (800e2a0 <prvAddNewTaskToReadyList+0xcc>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d109      	bne.n	800e222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e20e:	4b23      	ldr	r3, [pc, #140]	@ (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e218:	429a      	cmp	r2, r3
 800e21a:	d802      	bhi.n	800e222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e21c:	4a1f      	ldr	r2, [pc, #124]	@ (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e222:	4b20      	ldr	r3, [pc, #128]	@ (800e2a4 <prvAddNewTaskToReadyList+0xd0>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	3301      	adds	r3, #1
 800e228:	4a1e      	ldr	r2, [pc, #120]	@ (800e2a4 <prvAddNewTaskToReadyList+0xd0>)
 800e22a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e22c:	4b1d      	ldr	r3, [pc, #116]	@ (800e2a4 <prvAddNewTaskToReadyList+0xd0>)
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e238:	4b1b      	ldr	r3, [pc, #108]	@ (800e2a8 <prvAddNewTaskToReadyList+0xd4>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d903      	bls.n	800e248 <prvAddNewTaskToReadyList+0x74>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e244:	4a18      	ldr	r2, [pc, #96]	@ (800e2a8 <prvAddNewTaskToReadyList+0xd4>)
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e24c:	4613      	mov	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4a15      	ldr	r2, [pc, #84]	@ (800e2ac <prvAddNewTaskToReadyList+0xd8>)
 800e256:	441a      	add	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	3304      	adds	r3, #4
 800e25c:	4619      	mov	r1, r3
 800e25e:	4610      	mov	r0, r2
 800e260:	f7fe fecd 	bl	800cffe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e264:	f001 fd8a 	bl	800fd7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e268:	4b0d      	ldr	r3, [pc, #52]	@ (800e2a0 <prvAddNewTaskToReadyList+0xcc>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00e      	beq.n	800e28e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e270:	4b0a      	ldr	r3, [pc, #40]	@ (800e29c <prvAddNewTaskToReadyList+0xc8>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d207      	bcs.n	800e28e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e27e:	4b0c      	ldr	r3, [pc, #48]	@ (800e2b0 <prvAddNewTaskToReadyList+0xdc>)
 800e280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e28e:	bf00      	nop
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	24002520 	.word	0x24002520
 800e29c:	2400204c 	.word	0x2400204c
 800e2a0:	2400252c 	.word	0x2400252c
 800e2a4:	2400253c 	.word	0x2400253c
 800e2a8:	24002528 	.word	0x24002528
 800e2ac:	24002050 	.word	0x24002050
 800e2b0:	e000ed04 	.word	0xe000ed04

0800e2b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d018      	beq.n	800e2f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2c6:	4b14      	ldr	r3, [pc, #80]	@ (800e318 <vTaskDelay+0x64>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00b      	beq.n	800e2e6 <vTaskDelay+0x32>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	60bb      	str	r3, [r7, #8]
}
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
 800e2e4:	e7fd      	b.n	800e2e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e2e6:	f000 f88b 	bl	800e400 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f001 f833 	bl	800f358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2f2:	f000 f893 	bl	800e41c <xTaskResumeAll>
 800e2f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d107      	bne.n	800e30e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e2fe:	4b07      	ldr	r3, [pc, #28]	@ (800e31c <vTaskDelay+0x68>)
 800e300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e30e:	bf00      	nop
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	24002548 	.word	0x24002548
 800e31c:	e000ed04 	.word	0xe000ed04

0800e320 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08a      	sub	sp, #40	@ 0x28
 800e324:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e326:	2300      	movs	r3, #0
 800e328:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e32e:	463a      	mov	r2, r7
 800e330:	1d39      	adds	r1, r7, #4
 800e332:	f107 0308 	add.w	r3, r7, #8
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe fe00 	bl	800cf3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	9202      	str	r2, [sp, #8]
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	2300      	movs	r3, #0
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	2300      	movs	r3, #0
 800e34c:	460a      	mov	r2, r1
 800e34e:	4924      	ldr	r1, [pc, #144]	@ (800e3e0 <vTaskStartScheduler+0xc0>)
 800e350:	4824      	ldr	r0, [pc, #144]	@ (800e3e4 <vTaskStartScheduler+0xc4>)
 800e352:	f7ff fdf1 	bl	800df38 <xTaskCreateStatic>
 800e356:	4603      	mov	r3, r0
 800e358:	4a23      	ldr	r2, [pc, #140]	@ (800e3e8 <vTaskStartScheduler+0xc8>)
 800e35a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e35c:	4b22      	ldr	r3, [pc, #136]	@ (800e3e8 <vTaskStartScheduler+0xc8>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d002      	beq.n	800e36a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e364:	2301      	movs	r3, #1
 800e366:	617b      	str	r3, [r7, #20]
 800e368:	e001      	b.n	800e36e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e36a:	2300      	movs	r3, #0
 800e36c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d102      	bne.n	800e37a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e374:	f001 f844 	bl	800f400 <xTimerCreateTimerTask>
 800e378:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d11b      	bne.n	800e3b8 <vTaskStartScheduler+0x98>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	613b      	str	r3, [r7, #16]
}
 800e392:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e394:	4b15      	ldr	r3, [pc, #84]	@ (800e3ec <vTaskStartScheduler+0xcc>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3354      	adds	r3, #84	@ 0x54
 800e39a:	4a15      	ldr	r2, [pc, #84]	@ (800e3f0 <vTaskStartScheduler+0xd0>)
 800e39c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e39e:	4b15      	ldr	r3, [pc, #84]	@ (800e3f4 <vTaskStartScheduler+0xd4>)
 800e3a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3a6:	4b14      	ldr	r3, [pc, #80]	@ (800e3f8 <vTaskStartScheduler+0xd8>)
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3ac:	4b13      	ldr	r3, [pc, #76]	@ (800e3fc <vTaskStartScheduler+0xdc>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3b2:	f001 fc0d 	bl	800fbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3b6:	e00f      	b.n	800e3d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3be:	d10b      	bne.n	800e3d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	60fb      	str	r3, [r7, #12]
}
 800e3d2:	bf00      	nop
 800e3d4:	bf00      	nop
 800e3d6:	e7fd      	b.n	800e3d4 <vTaskStartScheduler+0xb4>
}
 800e3d8:	bf00      	nop
 800e3da:	3718      	adds	r7, #24
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	08013f3c 	.word	0x08013f3c
 800e3e4:	0800ea55 	.word	0x0800ea55
 800e3e8:	24002544 	.word	0x24002544
 800e3ec:	2400204c 	.word	0x2400204c
 800e3f0:	2400139c 	.word	0x2400139c
 800e3f4:	24002540 	.word	0x24002540
 800e3f8:	2400252c 	.word	0x2400252c
 800e3fc:	24002524 	.word	0x24002524

0800e400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e400:	b480      	push	{r7}
 800e402:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e404:	4b04      	ldr	r3, [pc, #16]	@ (800e418 <vTaskSuspendAll+0x18>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3301      	adds	r3, #1
 800e40a:	4a03      	ldr	r2, [pc, #12]	@ (800e418 <vTaskSuspendAll+0x18>)
 800e40c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e40e:	bf00      	nop
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	24002548 	.word	0x24002548

0800e41c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e422:	2300      	movs	r3, #0
 800e424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e426:	2300      	movs	r3, #0
 800e428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e42a:	4b42      	ldr	r3, [pc, #264]	@ (800e534 <xTaskResumeAll+0x118>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10b      	bne.n	800e44a <xTaskResumeAll+0x2e>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	603b      	str	r3, [r7, #0]
}
 800e444:	bf00      	nop
 800e446:	bf00      	nop
 800e448:	e7fd      	b.n	800e446 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e44a:	f001 fc65 	bl	800fd18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e44e:	4b39      	ldr	r3, [pc, #228]	@ (800e534 <xTaskResumeAll+0x118>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	3b01      	subs	r3, #1
 800e454:	4a37      	ldr	r2, [pc, #220]	@ (800e534 <xTaskResumeAll+0x118>)
 800e456:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e458:	4b36      	ldr	r3, [pc, #216]	@ (800e534 <xTaskResumeAll+0x118>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d162      	bne.n	800e526 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e460:	4b35      	ldr	r3, [pc, #212]	@ (800e538 <xTaskResumeAll+0x11c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d05e      	beq.n	800e526 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e468:	e02f      	b.n	800e4ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e46a:	4b34      	ldr	r3, [pc, #208]	@ (800e53c <xTaskResumeAll+0x120>)
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3318      	adds	r3, #24
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe fe1e 	bl	800d0b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	3304      	adds	r3, #4
 800e480:	4618      	mov	r0, r3
 800e482:	f7fe fe19 	bl	800d0b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e48a:	4b2d      	ldr	r3, [pc, #180]	@ (800e540 <xTaskResumeAll+0x124>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d903      	bls.n	800e49a <xTaskResumeAll+0x7e>
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e496:	4a2a      	ldr	r2, [pc, #168]	@ (800e540 <xTaskResumeAll+0x124>)
 800e498:	6013      	str	r3, [r2, #0]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e49e:	4613      	mov	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	4a27      	ldr	r2, [pc, #156]	@ (800e544 <xTaskResumeAll+0x128>)
 800e4a8:	441a      	add	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	f7fe fda4 	bl	800cffe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ba:	4b23      	ldr	r3, [pc, #140]	@ (800e548 <xTaskResumeAll+0x12c>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d302      	bcc.n	800e4ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e4c4:	4b21      	ldr	r3, [pc, #132]	@ (800e54c <xTaskResumeAll+0x130>)
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4ca:	4b1c      	ldr	r3, [pc, #112]	@ (800e53c <xTaskResumeAll+0x120>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1cb      	bne.n	800e46a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4d8:	f000 fb78 	bl	800ebcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e4dc:	4b1c      	ldr	r3, [pc, #112]	@ (800e550 <xTaskResumeAll+0x134>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d010      	beq.n	800e50a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4e8:	f000 f858 	bl	800e59c <xTaskIncrementTick>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d002      	beq.n	800e4f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e4f2:	4b16      	ldr	r3, [pc, #88]	@ (800e54c <xTaskResumeAll+0x130>)
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1f1      	bne.n	800e4e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e504:	4b12      	ldr	r3, [pc, #72]	@ (800e550 <xTaskResumeAll+0x134>)
 800e506:	2200      	movs	r2, #0
 800e508:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e50a:	4b10      	ldr	r3, [pc, #64]	@ (800e54c <xTaskResumeAll+0x130>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d009      	beq.n	800e526 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e512:	2301      	movs	r3, #1
 800e514:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e516:	4b0f      	ldr	r3, [pc, #60]	@ (800e554 <xTaskResumeAll+0x138>)
 800e518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e526:	f001 fc29 	bl	800fd7c <vPortExitCritical>

	return xAlreadyYielded;
 800e52a:	68bb      	ldr	r3, [r7, #8]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3710      	adds	r7, #16
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	24002548 	.word	0x24002548
 800e538:	24002520 	.word	0x24002520
 800e53c:	240024e0 	.word	0x240024e0
 800e540:	24002528 	.word	0x24002528
 800e544:	24002050 	.word	0x24002050
 800e548:	2400204c 	.word	0x2400204c
 800e54c:	24002534 	.word	0x24002534
 800e550:	24002530 	.word	0x24002530
 800e554:	e000ed04 	.word	0xe000ed04

0800e558 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e55e:	4b05      	ldr	r3, [pc, #20]	@ (800e574 <xTaskGetTickCount+0x1c>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e564:	687b      	ldr	r3, [r7, #4]
}
 800e566:	4618      	mov	r0, r3
 800e568:	370c      	adds	r7, #12
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr
 800e572:	bf00      	nop
 800e574:	24002524 	.word	0x24002524

0800e578 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e57e:	f001 fcab 	bl	800fed8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e582:	2300      	movs	r3, #0
 800e584:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e586:	4b04      	ldr	r3, [pc, #16]	@ (800e598 <xTaskGetTickCountFromISR+0x20>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e58c:	683b      	ldr	r3, [r7, #0]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	24002524 	.word	0x24002524

0800e59c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5a6:	4b4f      	ldr	r3, [pc, #316]	@ (800e6e4 <xTaskIncrementTick+0x148>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f040 8090 	bne.w	800e6d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5b0:	4b4d      	ldr	r3, [pc, #308]	@ (800e6e8 <xTaskIncrementTick+0x14c>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5b8:	4a4b      	ldr	r2, [pc, #300]	@ (800e6e8 <xTaskIncrementTick+0x14c>)
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d121      	bne.n	800e608 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5c4:	4b49      	ldr	r3, [pc, #292]	@ (800e6ec <xTaskIncrementTick+0x150>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00b      	beq.n	800e5e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	603b      	str	r3, [r7, #0]
}
 800e5e0:	bf00      	nop
 800e5e2:	bf00      	nop
 800e5e4:	e7fd      	b.n	800e5e2 <xTaskIncrementTick+0x46>
 800e5e6:	4b41      	ldr	r3, [pc, #260]	@ (800e6ec <xTaskIncrementTick+0x150>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	4b40      	ldr	r3, [pc, #256]	@ (800e6f0 <xTaskIncrementTick+0x154>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a3e      	ldr	r2, [pc, #248]	@ (800e6ec <xTaskIncrementTick+0x150>)
 800e5f2:	6013      	str	r3, [r2, #0]
 800e5f4:	4a3e      	ldr	r2, [pc, #248]	@ (800e6f0 <xTaskIncrementTick+0x154>)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	6013      	str	r3, [r2, #0]
 800e5fa:	4b3e      	ldr	r3, [pc, #248]	@ (800e6f4 <xTaskIncrementTick+0x158>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	3301      	adds	r3, #1
 800e600:	4a3c      	ldr	r2, [pc, #240]	@ (800e6f4 <xTaskIncrementTick+0x158>)
 800e602:	6013      	str	r3, [r2, #0]
 800e604:	f000 fae2 	bl	800ebcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e608:	4b3b      	ldr	r3, [pc, #236]	@ (800e6f8 <xTaskIncrementTick+0x15c>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d349      	bcc.n	800e6a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e612:	4b36      	ldr	r3, [pc, #216]	@ (800e6ec <xTaskIncrementTick+0x150>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d104      	bne.n	800e626 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e61c:	4b36      	ldr	r3, [pc, #216]	@ (800e6f8 <xTaskIncrementTick+0x15c>)
 800e61e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e622:	601a      	str	r2, [r3, #0]
					break;
 800e624:	e03f      	b.n	800e6a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e626:	4b31      	ldr	r3, [pc, #196]	@ (800e6ec <xTaskIncrementTick+0x150>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e636:	693a      	ldr	r2, [r7, #16]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d203      	bcs.n	800e646 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e63e:	4a2e      	ldr	r2, [pc, #184]	@ (800e6f8 <xTaskIncrementTick+0x15c>)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e644:	e02f      	b.n	800e6a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	3304      	adds	r3, #4
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe fd34 	bl	800d0b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e654:	2b00      	cmp	r3, #0
 800e656:	d004      	beq.n	800e662 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	3318      	adds	r3, #24
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fe fd2b 	bl	800d0b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e666:	4b25      	ldr	r3, [pc, #148]	@ (800e6fc <xTaskIncrementTick+0x160>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d903      	bls.n	800e676 <xTaskIncrementTick+0xda>
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e672:	4a22      	ldr	r2, [pc, #136]	@ (800e6fc <xTaskIncrementTick+0x160>)
 800e674:	6013      	str	r3, [r2, #0]
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e67a:	4613      	mov	r3, r2
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4413      	add	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4a1f      	ldr	r2, [pc, #124]	@ (800e700 <xTaskIncrementTick+0x164>)
 800e684:	441a      	add	r2, r3
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	3304      	adds	r3, #4
 800e68a:	4619      	mov	r1, r3
 800e68c:	4610      	mov	r0, r2
 800e68e:	f7fe fcb6 	bl	800cffe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e696:	4b1b      	ldr	r3, [pc, #108]	@ (800e704 <xTaskIncrementTick+0x168>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d3b8      	bcc.n	800e612 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6a4:	e7b5      	b.n	800e612 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6a6:	4b17      	ldr	r3, [pc, #92]	@ (800e704 <xTaskIncrementTick+0x168>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6ac:	4914      	ldr	r1, [pc, #80]	@ (800e700 <xTaskIncrementTick+0x164>)
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	440b      	add	r3, r1
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d901      	bls.n	800e6c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e6c2:	4b11      	ldr	r3, [pc, #68]	@ (800e708 <xTaskIncrementTick+0x16c>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	617b      	str	r3, [r7, #20]
 800e6ce:	e004      	b.n	800e6da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e6d0:	4b0e      	ldr	r3, [pc, #56]	@ (800e70c <xTaskIncrementTick+0x170>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	4a0d      	ldr	r2, [pc, #52]	@ (800e70c <xTaskIncrementTick+0x170>)
 800e6d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e6da:	697b      	ldr	r3, [r7, #20]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3718      	adds	r7, #24
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	24002548 	.word	0x24002548
 800e6e8:	24002524 	.word	0x24002524
 800e6ec:	240024d8 	.word	0x240024d8
 800e6f0:	240024dc 	.word	0x240024dc
 800e6f4:	24002538 	.word	0x24002538
 800e6f8:	24002540 	.word	0x24002540
 800e6fc:	24002528 	.word	0x24002528
 800e700:	24002050 	.word	0x24002050
 800e704:	2400204c 	.word	0x2400204c
 800e708:	24002534 	.word	0x24002534
 800e70c:	24002530 	.word	0x24002530

0800e710 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e710:	b480      	push	{r7}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e716:	4b2b      	ldr	r3, [pc, #172]	@ (800e7c4 <vTaskSwitchContext+0xb4>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d003      	beq.n	800e726 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e71e:	4b2a      	ldr	r3, [pc, #168]	@ (800e7c8 <vTaskSwitchContext+0xb8>)
 800e720:	2201      	movs	r2, #1
 800e722:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e724:	e047      	b.n	800e7b6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e726:	4b28      	ldr	r3, [pc, #160]	@ (800e7c8 <vTaskSwitchContext+0xb8>)
 800e728:	2200      	movs	r2, #0
 800e72a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e72c:	4b27      	ldr	r3, [pc, #156]	@ (800e7cc <vTaskSwitchContext+0xbc>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	60fb      	str	r3, [r7, #12]
 800e732:	e011      	b.n	800e758 <vTaskSwitchContext+0x48>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10b      	bne.n	800e752 <vTaskSwitchContext+0x42>
	__asm volatile
 800e73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73e:	f383 8811 	msr	BASEPRI, r3
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	f3bf 8f4f 	dsb	sy
 800e74a:	607b      	str	r3, [r7, #4]
}
 800e74c:	bf00      	nop
 800e74e:	bf00      	nop
 800e750:	e7fd      	b.n	800e74e <vTaskSwitchContext+0x3e>
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3b01      	subs	r3, #1
 800e756:	60fb      	str	r3, [r7, #12]
 800e758:	491d      	ldr	r1, [pc, #116]	@ (800e7d0 <vTaskSwitchContext+0xc0>)
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	4613      	mov	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4413      	add	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	440b      	add	r3, r1
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d0e3      	beq.n	800e734 <vTaskSwitchContext+0x24>
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	4613      	mov	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	4413      	add	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4a16      	ldr	r2, [pc, #88]	@ (800e7d0 <vTaskSwitchContext+0xc0>)
 800e778:	4413      	add	r3, r2
 800e77a:	60bb      	str	r3, [r7, #8]
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	685a      	ldr	r2, [r3, #4]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	605a      	str	r2, [r3, #4]
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	685a      	ldr	r2, [r3, #4]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	3308      	adds	r3, #8
 800e78e:	429a      	cmp	r2, r3
 800e790:	d104      	bne.n	800e79c <vTaskSwitchContext+0x8c>
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	605a      	str	r2, [r3, #4]
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	4a0c      	ldr	r2, [pc, #48]	@ (800e7d4 <vTaskSwitchContext+0xc4>)
 800e7a4:	6013      	str	r3, [r2, #0]
 800e7a6:	4a09      	ldr	r2, [pc, #36]	@ (800e7cc <vTaskSwitchContext+0xbc>)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e7ac:	4b09      	ldr	r3, [pc, #36]	@ (800e7d4 <vTaskSwitchContext+0xc4>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	3354      	adds	r3, #84	@ 0x54
 800e7b2:	4a09      	ldr	r2, [pc, #36]	@ (800e7d8 <vTaskSwitchContext+0xc8>)
 800e7b4:	6013      	str	r3, [r2, #0]
}
 800e7b6:	bf00      	nop
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	24002548 	.word	0x24002548
 800e7c8:	24002534 	.word	0x24002534
 800e7cc:	24002528 	.word	0x24002528
 800e7d0:	24002050 	.word	0x24002050
 800e7d4:	2400204c 	.word	0x2400204c
 800e7d8:	2400139c 	.word	0x2400139c

0800e7dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10b      	bne.n	800e804 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	60fb      	str	r3, [r7, #12]
}
 800e7fe:	bf00      	nop
 800e800:	bf00      	nop
 800e802:	e7fd      	b.n	800e800 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e804:	4b07      	ldr	r3, [pc, #28]	@ (800e824 <vTaskPlaceOnEventList+0x48>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	3318      	adds	r3, #24
 800e80a:	4619      	mov	r1, r3
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f7fe fc1a 	bl	800d046 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e812:	2101      	movs	r1, #1
 800e814:	6838      	ldr	r0, [r7, #0]
 800e816:	f000 fd9f 	bl	800f358 <prvAddCurrentTaskToDelayedList>
}
 800e81a:	bf00      	nop
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	2400204c 	.word	0x2400204c

0800e828 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b086      	sub	sp, #24
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10b      	bne.n	800e852 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83e:	f383 8811 	msr	BASEPRI, r3
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	617b      	str	r3, [r7, #20]
}
 800e84c:	bf00      	nop
 800e84e:	bf00      	nop
 800e850:	e7fd      	b.n	800e84e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e852:	4b0a      	ldr	r3, [pc, #40]	@ (800e87c <vTaskPlaceOnEventListRestricted+0x54>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3318      	adds	r3, #24
 800e858:	4619      	mov	r1, r3
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f7fe fbcf 	bl	800cffe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d002      	beq.n	800e86c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e86a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e86c:	6879      	ldr	r1, [r7, #4]
 800e86e:	68b8      	ldr	r0, [r7, #8]
 800e870:	f000 fd72 	bl	800f358 <prvAddCurrentTaskToDelayedList>
	}
 800e874:	bf00      	nop
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	2400204c 	.word	0x2400204c

0800e880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b086      	sub	sp, #24
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10b      	bne.n	800e8ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	60fb      	str	r3, [r7, #12]
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	e7fd      	b.n	800e8aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	3318      	adds	r3, #24
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fe fc00 	bl	800d0b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8b8:	4b1d      	ldr	r3, [pc, #116]	@ (800e930 <xTaskRemoveFromEventList+0xb0>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d11d      	bne.n	800e8fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fe fbf7 	bl	800d0b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ce:	4b19      	ldr	r3, [pc, #100]	@ (800e934 <xTaskRemoveFromEventList+0xb4>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d903      	bls.n	800e8de <xTaskRemoveFromEventList+0x5e>
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8da:	4a16      	ldr	r2, [pc, #88]	@ (800e934 <xTaskRemoveFromEventList+0xb4>)
 800e8dc:	6013      	str	r3, [r2, #0]
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	4413      	add	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4a13      	ldr	r2, [pc, #76]	@ (800e938 <xTaskRemoveFromEventList+0xb8>)
 800e8ec:	441a      	add	r2, r3
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	f7fe fb82 	bl	800cffe <vListInsertEnd>
 800e8fa:	e005      	b.n	800e908 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	3318      	adds	r3, #24
 800e900:	4619      	mov	r1, r3
 800e902:	480e      	ldr	r0, [pc, #56]	@ (800e93c <xTaskRemoveFromEventList+0xbc>)
 800e904:	f7fe fb7b 	bl	800cffe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e90c:	4b0c      	ldr	r3, [pc, #48]	@ (800e940 <xTaskRemoveFromEventList+0xc0>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e912:	429a      	cmp	r2, r3
 800e914:	d905      	bls.n	800e922 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e916:	2301      	movs	r3, #1
 800e918:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e91a:	4b0a      	ldr	r3, [pc, #40]	@ (800e944 <xTaskRemoveFromEventList+0xc4>)
 800e91c:	2201      	movs	r2, #1
 800e91e:	601a      	str	r2, [r3, #0]
 800e920:	e001      	b.n	800e926 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e922:	2300      	movs	r3, #0
 800e924:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e926:	697b      	ldr	r3, [r7, #20]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3718      	adds	r7, #24
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	24002548 	.word	0x24002548
 800e934:	24002528 	.word	0x24002528
 800e938:	24002050 	.word	0x24002050
 800e93c:	240024e0 	.word	0x240024e0
 800e940:	2400204c 	.word	0x2400204c
 800e944:	24002534 	.word	0x24002534

0800e948 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e950:	4b06      	ldr	r3, [pc, #24]	@ (800e96c <vTaskInternalSetTimeOutState+0x24>)
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e958:	4b05      	ldr	r3, [pc, #20]	@ (800e970 <vTaskInternalSetTimeOutState+0x28>)
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	605a      	str	r2, [r3, #4]
}
 800e960:	bf00      	nop
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	24002538 	.word	0x24002538
 800e970:	24002524 	.word	0x24002524

0800e974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b088      	sub	sp, #32
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d10b      	bne.n	800e99c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e988:	f383 8811 	msr	BASEPRI, r3
 800e98c:	f3bf 8f6f 	isb	sy
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	613b      	str	r3, [r7, #16]
}
 800e996:	bf00      	nop
 800e998:	bf00      	nop
 800e99a:	e7fd      	b.n	800e998 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10b      	bne.n	800e9ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a6:	f383 8811 	msr	BASEPRI, r3
 800e9aa:	f3bf 8f6f 	isb	sy
 800e9ae:	f3bf 8f4f 	dsb	sy
 800e9b2:	60fb      	str	r3, [r7, #12]
}
 800e9b4:	bf00      	nop
 800e9b6:	bf00      	nop
 800e9b8:	e7fd      	b.n	800e9b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e9ba:	f001 f9ad 	bl	800fd18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9be:	4b1d      	ldr	r3, [pc, #116]	@ (800ea34 <xTaskCheckForTimeOut+0xc0>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	69ba      	ldr	r2, [r7, #24]
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9d6:	d102      	bne.n	800e9de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	61fb      	str	r3, [r7, #28]
 800e9dc:	e023      	b.n	800ea26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	4b15      	ldr	r3, [pc, #84]	@ (800ea38 <xTaskCheckForTimeOut+0xc4>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d007      	beq.n	800e9fa <xTaskCheckForTimeOut+0x86>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	69ba      	ldr	r2, [r7, #24]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d302      	bcc.n	800e9fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	61fb      	str	r3, [r7, #28]
 800e9f8:	e015      	b.n	800ea26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	697a      	ldr	r2, [r7, #20]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d20b      	bcs.n	800ea1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	1ad2      	subs	r2, r2, r3
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f7ff ff99 	bl	800e948 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea16:	2300      	movs	r3, #0
 800ea18:	61fb      	str	r3, [r7, #28]
 800ea1a:	e004      	b.n	800ea26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea22:	2301      	movs	r3, #1
 800ea24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea26:	f001 f9a9 	bl	800fd7c <vPortExitCritical>

	return xReturn;
 800ea2a:	69fb      	ldr	r3, [r7, #28]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3720      	adds	r7, #32
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	24002524 	.word	0x24002524
 800ea38:	24002538 	.word	0x24002538

0800ea3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea40:	4b03      	ldr	r3, [pc, #12]	@ (800ea50 <vTaskMissedYield+0x14>)
 800ea42:	2201      	movs	r2, #1
 800ea44:	601a      	str	r2, [r3, #0]
}
 800ea46:	bf00      	nop
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr
 800ea50:	24002534 	.word	0x24002534

0800ea54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea5c:	f000 f852 	bl	800eb04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea60:	4b06      	ldr	r3, [pc, #24]	@ (800ea7c <prvIdleTask+0x28>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d9f9      	bls.n	800ea5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ea68:	4b05      	ldr	r3, [pc, #20]	@ (800ea80 <prvIdleTask+0x2c>)
 800ea6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea6e:	601a      	str	r2, [r3, #0]
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea78:	e7f0      	b.n	800ea5c <prvIdleTask+0x8>
 800ea7a:	bf00      	nop
 800ea7c:	24002050 	.word	0x24002050
 800ea80:	e000ed04 	.word	0xe000ed04

0800ea84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	607b      	str	r3, [r7, #4]
 800ea8e:	e00c      	b.n	800eaaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	4613      	mov	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	4a12      	ldr	r2, [pc, #72]	@ (800eae4 <prvInitialiseTaskLists+0x60>)
 800ea9c:	4413      	add	r3, r2
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fe fa80 	bl	800cfa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	607b      	str	r3, [r7, #4]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2b37      	cmp	r3, #55	@ 0x37
 800eaae:	d9ef      	bls.n	800ea90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eab0:	480d      	ldr	r0, [pc, #52]	@ (800eae8 <prvInitialiseTaskLists+0x64>)
 800eab2:	f7fe fa77 	bl	800cfa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eab6:	480d      	ldr	r0, [pc, #52]	@ (800eaec <prvInitialiseTaskLists+0x68>)
 800eab8:	f7fe fa74 	bl	800cfa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eabc:	480c      	ldr	r0, [pc, #48]	@ (800eaf0 <prvInitialiseTaskLists+0x6c>)
 800eabe:	f7fe fa71 	bl	800cfa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eac2:	480c      	ldr	r0, [pc, #48]	@ (800eaf4 <prvInitialiseTaskLists+0x70>)
 800eac4:	f7fe fa6e 	bl	800cfa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eac8:	480b      	ldr	r0, [pc, #44]	@ (800eaf8 <prvInitialiseTaskLists+0x74>)
 800eaca:	f7fe fa6b 	bl	800cfa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eace:	4b0b      	ldr	r3, [pc, #44]	@ (800eafc <prvInitialiseTaskLists+0x78>)
 800ead0:	4a05      	ldr	r2, [pc, #20]	@ (800eae8 <prvInitialiseTaskLists+0x64>)
 800ead2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ead4:	4b0a      	ldr	r3, [pc, #40]	@ (800eb00 <prvInitialiseTaskLists+0x7c>)
 800ead6:	4a05      	ldr	r2, [pc, #20]	@ (800eaec <prvInitialiseTaskLists+0x68>)
 800ead8:	601a      	str	r2, [r3, #0]
}
 800eada:	bf00      	nop
 800eadc:	3708      	adds	r7, #8
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	24002050 	.word	0x24002050
 800eae8:	240024b0 	.word	0x240024b0
 800eaec:	240024c4 	.word	0x240024c4
 800eaf0:	240024e0 	.word	0x240024e0
 800eaf4:	240024f4 	.word	0x240024f4
 800eaf8:	2400250c 	.word	0x2400250c
 800eafc:	240024d8 	.word	0x240024d8
 800eb00:	240024dc 	.word	0x240024dc

0800eb04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb0a:	e019      	b.n	800eb40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb0c:	f001 f904 	bl	800fd18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb10:	4b10      	ldr	r3, [pc, #64]	@ (800eb54 <prvCheckTasksWaitingTermination+0x50>)
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	3304      	adds	r3, #4
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fe facb 	bl	800d0b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb22:	4b0d      	ldr	r3, [pc, #52]	@ (800eb58 <prvCheckTasksWaitingTermination+0x54>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3b01      	subs	r3, #1
 800eb28:	4a0b      	ldr	r2, [pc, #44]	@ (800eb58 <prvCheckTasksWaitingTermination+0x54>)
 800eb2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb2c:	4b0b      	ldr	r3, [pc, #44]	@ (800eb5c <prvCheckTasksWaitingTermination+0x58>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	3b01      	subs	r3, #1
 800eb32:	4a0a      	ldr	r2, [pc, #40]	@ (800eb5c <prvCheckTasksWaitingTermination+0x58>)
 800eb34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb36:	f001 f921 	bl	800fd7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 f810 	bl	800eb60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb40:	4b06      	ldr	r3, [pc, #24]	@ (800eb5c <prvCheckTasksWaitingTermination+0x58>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1e1      	bne.n	800eb0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb48:	bf00      	nop
 800eb4a:	bf00      	nop
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	240024f4 	.word	0x240024f4
 800eb58:	24002520 	.word	0x24002520
 800eb5c:	24002508 	.word	0x24002508

0800eb60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	3354      	adds	r3, #84	@ 0x54
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f004 ff5b 	bl	8013a28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d108      	bne.n	800eb8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb80:	4618      	mov	r0, r3
 800eb82:	f001 fab9 	bl	80100f8 <vPortFree>
				vPortFree( pxTCB );
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f001 fab6 	bl	80100f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb8c:	e019      	b.n	800ebc2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d103      	bne.n	800eba0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f001 faad 	bl	80100f8 <vPortFree>
	}
 800eb9e:	e010      	b.n	800ebc2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d00b      	beq.n	800ebc2 <prvDeleteTCB+0x62>
	__asm volatile
 800ebaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebae:	f383 8811 	msr	BASEPRI, r3
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	f3bf 8f4f 	dsb	sy
 800ebba:	60fb      	str	r3, [r7, #12]
}
 800ebbc:	bf00      	nop
 800ebbe:	bf00      	nop
 800ebc0:	e7fd      	b.n	800ebbe <prvDeleteTCB+0x5e>
	}
 800ebc2:	bf00      	nop
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
	...

0800ebcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ec04 <prvResetNextTaskUnblockTime+0x38>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d104      	bne.n	800ebe6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebdc:	4b0a      	ldr	r3, [pc, #40]	@ (800ec08 <prvResetNextTaskUnblockTime+0x3c>)
 800ebde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ebe2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebe4:	e008      	b.n	800ebf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebe6:	4b07      	ldr	r3, [pc, #28]	@ (800ec04 <prvResetNextTaskUnblockTime+0x38>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	68db      	ldr	r3, [r3, #12]
 800ebee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	4a04      	ldr	r2, [pc, #16]	@ (800ec08 <prvResetNextTaskUnblockTime+0x3c>)
 800ebf6:	6013      	str	r3, [r2, #0]
}
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr
 800ec04:	240024d8 	.word	0x240024d8
 800ec08:	24002540 	.word	0x24002540

0800ec0c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ec12:	4b05      	ldr	r3, [pc, #20]	@ (800ec28 <xTaskGetCurrentTaskHandle+0x1c>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ec18:	687b      	ldr	r3, [r7, #4]
	}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	2400204c 	.word	0x2400204c

0800ec2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec32:	4b0b      	ldr	r3, [pc, #44]	@ (800ec60 <xTaskGetSchedulerState+0x34>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d102      	bne.n	800ec40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	607b      	str	r3, [r7, #4]
 800ec3e:	e008      	b.n	800ec52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec40:	4b08      	ldr	r3, [pc, #32]	@ (800ec64 <xTaskGetSchedulerState+0x38>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d102      	bne.n	800ec4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec48:	2302      	movs	r3, #2
 800ec4a:	607b      	str	r3, [r7, #4]
 800ec4c:	e001      	b.n	800ec52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec52:	687b      	ldr	r3, [r7, #4]
	}
 800ec54:	4618      	mov	r0, r3
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	2400252c 	.word	0x2400252c
 800ec64:	24002548 	.word	0x24002548

0800ec68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec74:	2300      	movs	r3, #0
 800ec76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d051      	beq.n	800ed22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec82:	4b2a      	ldr	r3, [pc, #168]	@ (800ed2c <xTaskPriorityInherit+0xc4>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d241      	bcs.n	800ed10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	699b      	ldr	r3, [r3, #24]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	db06      	blt.n	800eca2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec94:	4b25      	ldr	r3, [pc, #148]	@ (800ed2c <xTaskPriorityInherit+0xc4>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	6959      	ldr	r1, [r3, #20]
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecaa:	4613      	mov	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	4413      	add	r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	4a1f      	ldr	r2, [pc, #124]	@ (800ed30 <xTaskPriorityInherit+0xc8>)
 800ecb4:	4413      	add	r3, r2
 800ecb6:	4299      	cmp	r1, r3
 800ecb8:	d122      	bne.n	800ed00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe f9fa 	bl	800d0b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecc4:	4b19      	ldr	r3, [pc, #100]	@ (800ed2c <xTaskPriorityInherit+0xc4>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecd2:	4b18      	ldr	r3, [pc, #96]	@ (800ed34 <xTaskPriorityInherit+0xcc>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d903      	bls.n	800ece2 <xTaskPriorityInherit+0x7a>
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecde:	4a15      	ldr	r2, [pc, #84]	@ (800ed34 <xTaskPriorityInherit+0xcc>)
 800ece0:	6013      	str	r3, [r2, #0]
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ece6:	4613      	mov	r3, r2
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4413      	add	r3, r2
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	4a10      	ldr	r2, [pc, #64]	@ (800ed30 <xTaskPriorityInherit+0xc8>)
 800ecf0:	441a      	add	r2, r3
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	3304      	adds	r3, #4
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	4610      	mov	r0, r2
 800ecfa:	f7fe f980 	bl	800cffe <vListInsertEnd>
 800ecfe:	e004      	b.n	800ed0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed00:	4b0a      	ldr	r3, [pc, #40]	@ (800ed2c <xTaskPriorityInherit+0xc4>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	60fb      	str	r3, [r7, #12]
 800ed0e:	e008      	b.n	800ed22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed14:	4b05      	ldr	r3, [pc, #20]	@ (800ed2c <xTaskPriorityInherit+0xc4>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d201      	bcs.n	800ed22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed1e:	2301      	movs	r3, #1
 800ed20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed22:	68fb      	ldr	r3, [r7, #12]
	}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	2400204c 	.word	0x2400204c
 800ed30:	24002050 	.word	0x24002050
 800ed34:	24002528 	.word	0x24002528

0800ed38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b086      	sub	sp, #24
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed44:	2300      	movs	r3, #0
 800ed46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d058      	beq.n	800ee00 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed4e:	4b2f      	ldr	r3, [pc, #188]	@ (800ee0c <xTaskPriorityDisinherit+0xd4>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	693a      	ldr	r2, [r7, #16]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d00b      	beq.n	800ed70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed5c:	f383 8811 	msr	BASEPRI, r3
 800ed60:	f3bf 8f6f 	isb	sy
 800ed64:	f3bf 8f4f 	dsb	sy
 800ed68:	60fb      	str	r3, [r7, #12]
}
 800ed6a:	bf00      	nop
 800ed6c:	bf00      	nop
 800ed6e:	e7fd      	b.n	800ed6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10b      	bne.n	800ed90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7c:	f383 8811 	msr	BASEPRI, r3
 800ed80:	f3bf 8f6f 	isb	sy
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	60bb      	str	r3, [r7, #8]
}
 800ed8a:	bf00      	nop
 800ed8c:	bf00      	nop
 800ed8e:	e7fd      	b.n	800ed8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed94:	1e5a      	subs	r2, r3, #1
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d02c      	beq.n	800ee00 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d128      	bne.n	800ee00 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	3304      	adds	r3, #4
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe f980 	bl	800d0b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ee10 <xTaskPriorityDisinherit+0xd8>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d903      	bls.n	800ede0 <xTaskPriorityDisinherit+0xa8>
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eddc:	4a0c      	ldr	r2, [pc, #48]	@ (800ee10 <xTaskPriorityDisinherit+0xd8>)
 800edde:	6013      	str	r3, [r2, #0]
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ede4:	4613      	mov	r3, r2
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4a09      	ldr	r2, [pc, #36]	@ (800ee14 <xTaskPriorityDisinherit+0xdc>)
 800edee:	441a      	add	r2, r3
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	3304      	adds	r3, #4
 800edf4:	4619      	mov	r1, r3
 800edf6:	4610      	mov	r0, r2
 800edf8:	f7fe f901 	bl	800cffe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800edfc:	2301      	movs	r3, #1
 800edfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee00:	697b      	ldr	r3, [r7, #20]
	}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3718      	adds	r7, #24
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	2400204c 	.word	0x2400204c
 800ee10:	24002528 	.word	0x24002528
 800ee14:	24002050 	.word	0x24002050

0800ee18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b088      	sub	sp, #32
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee26:	2301      	movs	r3, #1
 800ee28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d06c      	beq.n	800ef0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10b      	bne.n	800ee50 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	60fb      	str	r3, [r7, #12]
}
 800ee4a:	bf00      	nop
 800ee4c:	bf00      	nop
 800ee4e:	e7fd      	b.n	800ee4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee50:	69bb      	ldr	r3, [r7, #24]
 800ee52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee54:	683a      	ldr	r2, [r7, #0]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d902      	bls.n	800ee60 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	61fb      	str	r3, [r7, #28]
 800ee5e:	e002      	b.n	800ee66 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee64:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee6a:	69fa      	ldr	r2, [r7, #28]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d04c      	beq.n	800ef0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee74:	697a      	ldr	r2, [r7, #20]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d147      	bne.n	800ef0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee7a:	4b26      	ldr	r3, [pc, #152]	@ (800ef14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	69ba      	ldr	r2, [r7, #24]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d10b      	bne.n	800ee9c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ee84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	60bb      	str	r3, [r7, #8]
}
 800ee96:	bf00      	nop
 800ee98:	bf00      	nop
 800ee9a:	e7fd      	b.n	800ee98 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	69fa      	ldr	r2, [r7, #28]
 800eea6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	699b      	ldr	r3, [r3, #24]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	db04      	blt.n	800eeba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	6959      	ldr	r1, [r3, #20]
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	4613      	mov	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4a13      	ldr	r2, [pc, #76]	@ (800ef18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eeca:	4413      	add	r3, r2
 800eecc:	4299      	cmp	r1, r3
 800eece:	d11c      	bne.n	800ef0a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	3304      	adds	r3, #4
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fe f8ef 	bl	800d0b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eede:	4b0f      	ldr	r3, [pc, #60]	@ (800ef1c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d903      	bls.n	800eeee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeea:	4a0c      	ldr	r2, [pc, #48]	@ (800ef1c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eeec:	6013      	str	r3, [r2, #0]
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eef2:	4613      	mov	r3, r2
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	4413      	add	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4a07      	ldr	r2, [pc, #28]	@ (800ef18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eefc:	441a      	add	r2, r3
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	3304      	adds	r3, #4
 800ef02:	4619      	mov	r1, r3
 800ef04:	4610      	mov	r0, r2
 800ef06:	f7fe f87a 	bl	800cffe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef0a:	bf00      	nop
 800ef0c:	3720      	adds	r7, #32
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	2400204c 	.word	0x2400204c
 800ef18:	24002050 	.word	0x24002050
 800ef1c:	24002528 	.word	0x24002528

0800ef20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef20:	b480      	push	{r7}
 800ef22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef24:	4b07      	ldr	r3, [pc, #28]	@ (800ef44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d004      	beq.n	800ef36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef2c:	4b05      	ldr	r3, [pc, #20]	@ (800ef44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef32:	3201      	adds	r2, #1
 800ef34:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ef36:	4b03      	ldr	r3, [pc, #12]	@ (800ef44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef38:	681b      	ldr	r3, [r3, #0]
	}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr
 800ef44:	2400204c 	.word	0x2400204c

0800ef48 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ef56:	f000 fedf 	bl	800fd18 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ef5a:	4b29      	ldr	r3, [pc, #164]	@ (800f000 <xTaskNotifyWait+0xb8>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b02      	cmp	r3, #2
 800ef66:	d01c      	beq.n	800efa2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ef68:	4b25      	ldr	r3, [pc, #148]	@ (800f000 <xTaskNotifyWait+0xb8>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ef70:	68fa      	ldr	r2, [r7, #12]
 800ef72:	43d2      	mvns	r2, r2
 800ef74:	400a      	ands	r2, r1
 800ef76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ef7a:	4b21      	ldr	r3, [pc, #132]	@ (800f000 <xTaskNotifyWait+0xb8>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00b      	beq.n	800efa2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	6838      	ldr	r0, [r7, #0]
 800ef8e:	f000 f9e3 	bl	800f358 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ef92:	4b1c      	ldr	r3, [pc, #112]	@ (800f004 <xTaskNotifyWait+0xbc>)
 800ef94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800efa2:	f000 feeb 	bl	800fd7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800efa6:	f000 feb7 	bl	800fd18 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d005      	beq.n	800efbc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800efb0:	4b13      	ldr	r3, [pc, #76]	@ (800f000 <xTaskNotifyWait+0xb8>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800efbc:	4b10      	ldr	r3, [pc, #64]	@ (800f000 <xTaskNotifyWait+0xb8>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d002      	beq.n	800efd0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800efca:	2300      	movs	r3, #0
 800efcc:	617b      	str	r3, [r7, #20]
 800efce:	e00a      	b.n	800efe6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800efd0:	4b0b      	ldr	r3, [pc, #44]	@ (800f000 <xTaskNotifyWait+0xb8>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800efd8:	68ba      	ldr	r2, [r7, #8]
 800efda:	43d2      	mvns	r2, r2
 800efdc:	400a      	ands	r2, r1
 800efde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800efe2:	2301      	movs	r3, #1
 800efe4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800efe6:	4b06      	ldr	r3, [pc, #24]	@ (800f000 <xTaskNotifyWait+0xb8>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2200      	movs	r2, #0
 800efec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800eff0:	f000 fec4 	bl	800fd7c <vPortExitCritical>

		return xReturn;
 800eff4:	697b      	ldr	r3, [r7, #20]
	}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	2400204c 	.word	0x2400204c
 800f004:	e000ed04 	.word	0xe000ed04

0800f008 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b08a      	sub	sp, #40	@ 0x28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	603b      	str	r3, [r7, #0]
 800f014:	4613      	mov	r3, r2
 800f016:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f018:	2301      	movs	r3, #1
 800f01a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d10b      	bne.n	800f03a <xTaskGenericNotify+0x32>
	__asm volatile
 800f022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f026:	f383 8811 	msr	BASEPRI, r3
 800f02a:	f3bf 8f6f 	isb	sy
 800f02e:	f3bf 8f4f 	dsb	sy
 800f032:	61bb      	str	r3, [r7, #24]
}
 800f034:	bf00      	nop
 800f036:	bf00      	nop
 800f038:	e7fd      	b.n	800f036 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f03e:	f000 fe6b 	bl	800fd18 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d004      	beq.n	800f052 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f048:	6a3b      	ldr	r3, [r7, #32]
 800f04a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f052:	6a3b      	ldr	r3, [r7, #32]
 800f054:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f058:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f05a:	6a3b      	ldr	r3, [r7, #32]
 800f05c:	2202      	movs	r2, #2
 800f05e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f062:	79fb      	ldrb	r3, [r7, #7]
 800f064:	2b04      	cmp	r3, #4
 800f066:	d82e      	bhi.n	800f0c6 <xTaskGenericNotify+0xbe>
 800f068:	a201      	add	r2, pc, #4	@ (adr r2, 800f070 <xTaskGenericNotify+0x68>)
 800f06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f06e:	bf00      	nop
 800f070:	0800f0eb 	.word	0x0800f0eb
 800f074:	0800f085 	.word	0x0800f085
 800f078:	0800f097 	.word	0x0800f097
 800f07c:	0800f0a7 	.word	0x0800f0a7
 800f080:	0800f0b1 	.word	0x0800f0b1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f084:	6a3b      	ldr	r3, [r7, #32]
 800f086:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	431a      	orrs	r2, r3
 800f08e:	6a3b      	ldr	r3, [r7, #32]
 800f090:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f094:	e02c      	b.n	800f0f0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f096:	6a3b      	ldr	r3, [r7, #32]
 800f098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f09c:	1c5a      	adds	r2, r3, #1
 800f09e:	6a3b      	ldr	r3, [r7, #32]
 800f0a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f0a4:	e024      	b.n	800f0f0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f0a6:	6a3b      	ldr	r3, [r7, #32]
 800f0a8:	68ba      	ldr	r2, [r7, #8]
 800f0aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f0ae:	e01f      	b.n	800f0f0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f0b0:	7ffb      	ldrb	r3, [r7, #31]
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	d004      	beq.n	800f0c0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f0b6:	6a3b      	ldr	r3, [r7, #32]
 800f0b8:	68ba      	ldr	r2, [r7, #8]
 800f0ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f0be:	e017      	b.n	800f0f0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f0c4:	e014      	b.n	800f0f0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f0c6:	6a3b      	ldr	r3, [r7, #32]
 800f0c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f0cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0d0:	d00d      	beq.n	800f0ee <xTaskGenericNotify+0xe6>
	__asm volatile
 800f0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	617b      	str	r3, [r7, #20]
}
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop
 800f0e8:	e7fd      	b.n	800f0e6 <xTaskGenericNotify+0xde>
					break;
 800f0ea:	bf00      	nop
 800f0ec:	e000      	b.n	800f0f0 <xTaskGenericNotify+0xe8>

					break;
 800f0ee:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f0f0:	7ffb      	ldrb	r3, [r7, #31]
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d13b      	bne.n	800f16e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fd ffdc 	bl	800d0b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f104:	4b1d      	ldr	r3, [pc, #116]	@ (800f17c <xTaskGenericNotify+0x174>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d903      	bls.n	800f114 <xTaskGenericNotify+0x10c>
 800f10c:	6a3b      	ldr	r3, [r7, #32]
 800f10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f110:	4a1a      	ldr	r2, [pc, #104]	@ (800f17c <xTaskGenericNotify+0x174>)
 800f112:	6013      	str	r3, [r2, #0]
 800f114:	6a3b      	ldr	r3, [r7, #32]
 800f116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f118:	4613      	mov	r3, r2
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	4413      	add	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4a17      	ldr	r2, [pc, #92]	@ (800f180 <xTaskGenericNotify+0x178>)
 800f122:	441a      	add	r2, r3
 800f124:	6a3b      	ldr	r3, [r7, #32]
 800f126:	3304      	adds	r3, #4
 800f128:	4619      	mov	r1, r3
 800f12a:	4610      	mov	r0, r2
 800f12c:	f7fd ff67 	bl	800cffe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f130:	6a3b      	ldr	r3, [r7, #32]
 800f132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00b      	beq.n	800f150 <xTaskGenericNotify+0x148>
	__asm volatile
 800f138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f13c:	f383 8811 	msr	BASEPRI, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	613b      	str	r3, [r7, #16]
}
 800f14a:	bf00      	nop
 800f14c:	bf00      	nop
 800f14e:	e7fd      	b.n	800f14c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f150:	6a3b      	ldr	r3, [r7, #32]
 800f152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f154:	4b0b      	ldr	r3, [pc, #44]	@ (800f184 <xTaskGenericNotify+0x17c>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d907      	bls.n	800f16e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f15e:	4b0a      	ldr	r3, [pc, #40]	@ (800f188 <xTaskGenericNotify+0x180>)
 800f160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	f3bf 8f4f 	dsb	sy
 800f16a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f16e:	f000 fe05 	bl	800fd7c <vPortExitCritical>

		return xReturn;
 800f172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f174:	4618      	mov	r0, r3
 800f176:	3728      	adds	r7, #40	@ 0x28
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	24002528 	.word	0x24002528
 800f180:	24002050 	.word	0x24002050
 800f184:	2400204c 	.word	0x2400204c
 800f188:	e000ed04 	.word	0xe000ed04

0800f18c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b08e      	sub	sp, #56	@ 0x38
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	603b      	str	r3, [r7, #0]
 800f198:	4613      	mov	r3, r2
 800f19a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f19c:	2301      	movs	r3, #1
 800f19e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d10b      	bne.n	800f1be <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f1b8:	bf00      	nop
 800f1ba:	bf00      	nop
 800f1bc:	e7fd      	b.n	800f1ba <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f1be:	f000 fe8b 	bl	800fed8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f1c6:	f3ef 8211 	mrs	r2, BASEPRI
 800f1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	623a      	str	r2, [r7, #32]
 800f1dc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f1de:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d004      	beq.n	800f1f2 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f1f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fe:	2202      	movs	r2, #2
 800f200:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f204:	79fb      	ldrb	r3, [r7, #7]
 800f206:	2b04      	cmp	r3, #4
 800f208:	d82e      	bhi.n	800f268 <xTaskGenericNotifyFromISR+0xdc>
 800f20a:	a201      	add	r2, pc, #4	@ (adr r2, 800f210 <xTaskGenericNotifyFromISR+0x84>)
 800f20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f210:	0800f28d 	.word	0x0800f28d
 800f214:	0800f225 	.word	0x0800f225
 800f218:	0800f237 	.word	0x0800f237
 800f21c:	0800f247 	.word	0x0800f247
 800f220:	0800f251 	.word	0x0800f251
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f226:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	431a      	orrs	r2, r3
 800f22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f230:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f234:	e02d      	b.n	800f292 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f23c:	1c5a      	adds	r2, r3, #1
 800f23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f240:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f244:	e025      	b.n	800f292 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f24e:	e020      	b.n	800f292 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f250:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f254:	2b02      	cmp	r3, #2
 800f256:	d004      	beq.n	800f262 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f25a:	68ba      	ldr	r2, [r7, #8]
 800f25c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f260:	e017      	b.n	800f292 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f262:	2300      	movs	r3, #0
 800f264:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f266:	e014      	b.n	800f292 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f26a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f26e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f272:	d00d      	beq.n	800f290 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	61bb      	str	r3, [r7, #24]
}
 800f286:	bf00      	nop
 800f288:	bf00      	nop
 800f28a:	e7fd      	b.n	800f288 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f28c:	bf00      	nop
 800f28e:	e000      	b.n	800f292 <xTaskGenericNotifyFromISR+0x106>
					break;
 800f290:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f292:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f296:	2b01      	cmp	r3, #1
 800f298:	d147      	bne.n	800f32a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00b      	beq.n	800f2ba <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a6:	f383 8811 	msr	BASEPRI, r3
 800f2aa:	f3bf 8f6f 	isb	sy
 800f2ae:	f3bf 8f4f 	dsb	sy
 800f2b2:	617b      	str	r3, [r7, #20]
}
 800f2b4:	bf00      	nop
 800f2b6:	bf00      	nop
 800f2b8:	e7fd      	b.n	800f2b6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2ba:	4b21      	ldr	r3, [pc, #132]	@ (800f340 <xTaskGenericNotifyFromISR+0x1b4>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d11d      	bne.n	800f2fe <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2c4:	3304      	adds	r3, #4
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fd fef6 	bl	800d0b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2d0:	4b1c      	ldr	r3, [pc, #112]	@ (800f344 <xTaskGenericNotifyFromISR+0x1b8>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d903      	bls.n	800f2e0 <xTaskGenericNotifyFromISR+0x154>
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2dc:	4a19      	ldr	r2, [pc, #100]	@ (800f344 <xTaskGenericNotifyFromISR+0x1b8>)
 800f2de:	6013      	str	r3, [r2, #0]
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	4413      	add	r3, r2
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4a16      	ldr	r2, [pc, #88]	@ (800f348 <xTaskGenericNotifyFromISR+0x1bc>)
 800f2ee:	441a      	add	r2, r3
 800f2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2f2:	3304      	adds	r3, #4
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	4610      	mov	r0, r2
 800f2f8:	f7fd fe81 	bl	800cffe <vListInsertEnd>
 800f2fc:	e005      	b.n	800f30a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f300:	3318      	adds	r3, #24
 800f302:	4619      	mov	r1, r3
 800f304:	4811      	ldr	r0, [pc, #68]	@ (800f34c <xTaskGenericNotifyFromISR+0x1c0>)
 800f306:	f7fd fe7a 	bl	800cffe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f30e:	4b10      	ldr	r3, [pc, #64]	@ (800f350 <xTaskGenericNotifyFromISR+0x1c4>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f314:	429a      	cmp	r2, r3
 800f316:	d908      	bls.n	800f32a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d002      	beq.n	800f324 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f31e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f320:	2201      	movs	r2, #1
 800f322:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f324:	4b0b      	ldr	r3, [pc, #44]	@ (800f354 <xTaskGenericNotifyFromISR+0x1c8>)
 800f326:	2201      	movs	r2, #1
 800f328:	601a      	str	r2, [r3, #0]
 800f32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f32c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	f383 8811 	msr	BASEPRI, r3
}
 800f334:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f338:	4618      	mov	r0, r3
 800f33a:	3738      	adds	r7, #56	@ 0x38
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	24002548 	.word	0x24002548
 800f344:	24002528 	.word	0x24002528
 800f348:	24002050 	.word	0x24002050
 800f34c:	240024e0 	.word	0x240024e0
 800f350:	2400204c 	.word	0x2400204c
 800f354:	24002534 	.word	0x24002534

0800f358 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f362:	4b21      	ldr	r3, [pc, #132]	@ (800f3e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f368:	4b20      	ldr	r3, [pc, #128]	@ (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3304      	adds	r3, #4
 800f36e:	4618      	mov	r0, r3
 800f370:	f7fd fea2 	bl	800d0b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f37a:	d10a      	bne.n	800f392 <prvAddCurrentTaskToDelayedList+0x3a>
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d007      	beq.n	800f392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f382:	4b1a      	ldr	r3, [pc, #104]	@ (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	3304      	adds	r3, #4
 800f388:	4619      	mov	r1, r3
 800f38a:	4819      	ldr	r0, [pc, #100]	@ (800f3f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f38c:	f7fd fe37 	bl	800cffe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f390:	e026      	b.n	800f3e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4413      	add	r3, r2
 800f398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f39a:	4b14      	ldr	r3, [pc, #80]	@ (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3a2:	68ba      	ldr	r2, [r7, #8]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d209      	bcs.n	800f3be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3aa:	4b12      	ldr	r3, [pc, #72]	@ (800f3f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	4b0f      	ldr	r3, [pc, #60]	@ (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3304      	adds	r3, #4
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	4610      	mov	r0, r2
 800f3b8:	f7fd fe45 	bl	800d046 <vListInsert>
}
 800f3bc:	e010      	b.n	800f3e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3be:	4b0e      	ldr	r3, [pc, #56]	@ (800f3f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7fd fe3b 	bl	800d046 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f3fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d202      	bcs.n	800f3e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f3da:	4a08      	ldr	r2, [pc, #32]	@ (800f3fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	6013      	str	r3, [r2, #0]
}
 800f3e0:	bf00      	nop
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	24002524 	.word	0x24002524
 800f3ec:	2400204c 	.word	0x2400204c
 800f3f0:	2400250c 	.word	0x2400250c
 800f3f4:	240024dc 	.word	0x240024dc
 800f3f8:	240024d8 	.word	0x240024d8
 800f3fc:	24002540 	.word	0x24002540

0800f400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b08a      	sub	sp, #40	@ 0x28
 800f404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f406:	2300      	movs	r3, #0
 800f408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f40a:	f000 fb13 	bl	800fa34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f40e:	4b1d      	ldr	r3, [pc, #116]	@ (800f484 <xTimerCreateTimerTask+0x84>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d021      	beq.n	800f45a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f416:	2300      	movs	r3, #0
 800f418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f41a:	2300      	movs	r3, #0
 800f41c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f41e:	1d3a      	adds	r2, r7, #4
 800f420:	f107 0108 	add.w	r1, r7, #8
 800f424:	f107 030c 	add.w	r3, r7, #12
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fd fda1 	bl	800cf70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f42e:	6879      	ldr	r1, [r7, #4]
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	9202      	str	r2, [sp, #8]
 800f436:	9301      	str	r3, [sp, #4]
 800f438:	2302      	movs	r3, #2
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	2300      	movs	r3, #0
 800f43e:	460a      	mov	r2, r1
 800f440:	4911      	ldr	r1, [pc, #68]	@ (800f488 <xTimerCreateTimerTask+0x88>)
 800f442:	4812      	ldr	r0, [pc, #72]	@ (800f48c <xTimerCreateTimerTask+0x8c>)
 800f444:	f7fe fd78 	bl	800df38 <xTaskCreateStatic>
 800f448:	4603      	mov	r3, r0
 800f44a:	4a11      	ldr	r2, [pc, #68]	@ (800f490 <xTimerCreateTimerTask+0x90>)
 800f44c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f44e:	4b10      	ldr	r3, [pc, #64]	@ (800f490 <xTimerCreateTimerTask+0x90>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d001      	beq.n	800f45a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f456:	2301      	movs	r3, #1
 800f458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10b      	bne.n	800f478 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	613b      	str	r3, [r7, #16]
}
 800f472:	bf00      	nop
 800f474:	bf00      	nop
 800f476:	e7fd      	b.n	800f474 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f478:	697b      	ldr	r3, [r7, #20]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
 800f482:	bf00      	nop
 800f484:	2400257c 	.word	0x2400257c
 800f488:	08013f44 	.word	0x08013f44
 800f48c:	0800f5cd 	.word	0x0800f5cd
 800f490:	24002580 	.word	0x24002580

0800f494 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b08a      	sub	sp, #40	@ 0x28
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d10b      	bne.n	800f4c4 <xTimerGenericCommand+0x30>
	__asm volatile
 800f4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b0:	f383 8811 	msr	BASEPRI, r3
 800f4b4:	f3bf 8f6f 	isb	sy
 800f4b8:	f3bf 8f4f 	dsb	sy
 800f4bc:	623b      	str	r3, [r7, #32]
}
 800f4be:	bf00      	nop
 800f4c0:	bf00      	nop
 800f4c2:	e7fd      	b.n	800f4c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f4c4:	4b19      	ldr	r3, [pc, #100]	@ (800f52c <xTimerGenericCommand+0x98>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d02a      	beq.n	800f522 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b05      	cmp	r3, #5
 800f4dc:	dc18      	bgt.n	800f510 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f4de:	f7ff fba5 	bl	800ec2c <xTaskGetSchedulerState>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b02      	cmp	r3, #2
 800f4e6:	d109      	bne.n	800f4fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f4e8:	4b10      	ldr	r3, [pc, #64]	@ (800f52c <xTimerGenericCommand+0x98>)
 800f4ea:	6818      	ldr	r0, [r3, #0]
 800f4ec:	f107 0110 	add.w	r1, r7, #16
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4f4:	f7fe f808 	bl	800d508 <xQueueGenericSend>
 800f4f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4fa:	e012      	b.n	800f522 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f4fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f52c <xTimerGenericCommand+0x98>)
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	f107 0110 	add.w	r1, r7, #16
 800f504:	2300      	movs	r3, #0
 800f506:	2200      	movs	r2, #0
 800f508:	f7fd fffe 	bl	800d508 <xQueueGenericSend>
 800f50c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f50e:	e008      	b.n	800f522 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f510:	4b06      	ldr	r3, [pc, #24]	@ (800f52c <xTimerGenericCommand+0x98>)
 800f512:	6818      	ldr	r0, [r3, #0]
 800f514:	f107 0110 	add.w	r1, r7, #16
 800f518:	2300      	movs	r3, #0
 800f51a:	683a      	ldr	r2, [r7, #0]
 800f51c:	f7fe f8f6 	bl	800d70c <xQueueGenericSendFromISR>
 800f520:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f524:	4618      	mov	r0, r3
 800f526:	3728      	adds	r7, #40	@ 0x28
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	2400257c 	.word	0x2400257c

0800f530 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b088      	sub	sp, #32
 800f534:	af02      	add	r7, sp, #8
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f53a:	4b23      	ldr	r3, [pc, #140]	@ (800f5c8 <prvProcessExpiredTimer+0x98>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	3304      	adds	r3, #4
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fd fdb5 	bl	800d0b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f554:	f003 0304 	and.w	r3, r3, #4
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d023      	beq.n	800f5a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	699a      	ldr	r2, [r3, #24]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	18d1      	adds	r1, r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	6978      	ldr	r0, [r7, #20]
 800f56a:	f000 f8d5 	bl	800f718 <prvInsertTimerInActiveList>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	d020      	beq.n	800f5b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f574:	2300      	movs	r3, #0
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	2300      	movs	r3, #0
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	2100      	movs	r1, #0
 800f57e:	6978      	ldr	r0, [r7, #20]
 800f580:	f7ff ff88 	bl	800f494 <xTimerGenericCommand>
 800f584:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d114      	bne.n	800f5b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f590:	f383 8811 	msr	BASEPRI, r3
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	60fb      	str	r3, [r7, #12]
}
 800f59e:	bf00      	nop
 800f5a0:	bf00      	nop
 800f5a2:	e7fd      	b.n	800f5a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5aa:	f023 0301 	bic.w	r3, r3, #1
 800f5ae:	b2da      	uxtb	r2, r3
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	6a1b      	ldr	r3, [r3, #32]
 800f5ba:	6978      	ldr	r0, [r7, #20]
 800f5bc:	4798      	blx	r3
}
 800f5be:	bf00      	nop
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	24002574 	.word	0x24002574

0800f5cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5d4:	f107 0308 	add.w	r3, r7, #8
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f000 f859 	bl	800f690 <prvGetNextExpireTime>
 800f5de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f000 f805 	bl	800f5f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f5ea:	f000 f8d7 	bl	800f79c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5ee:	bf00      	nop
 800f5f0:	e7f0      	b.n	800f5d4 <prvTimerTask+0x8>
	...

0800f5f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f5fe:	f7fe feff 	bl	800e400 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f602:	f107 0308 	add.w	r3, r7, #8
 800f606:	4618      	mov	r0, r3
 800f608:	f000 f866 	bl	800f6d8 <prvSampleTimeNow>
 800f60c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d130      	bne.n	800f676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d10a      	bne.n	800f630 <prvProcessTimerOrBlockTask+0x3c>
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d806      	bhi.n	800f630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f622:	f7fe fefb 	bl	800e41c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f626:	68f9      	ldr	r1, [r7, #12]
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f7ff ff81 	bl	800f530 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f62e:	e024      	b.n	800f67a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d008      	beq.n	800f648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f636:	4b13      	ldr	r3, [pc, #76]	@ (800f684 <prvProcessTimerOrBlockTask+0x90>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d101      	bne.n	800f644 <prvProcessTimerOrBlockTask+0x50>
 800f640:	2301      	movs	r3, #1
 800f642:	e000      	b.n	800f646 <prvProcessTimerOrBlockTask+0x52>
 800f644:	2300      	movs	r3, #0
 800f646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f648:	4b0f      	ldr	r3, [pc, #60]	@ (800f688 <prvProcessTimerOrBlockTask+0x94>)
 800f64a:	6818      	ldr	r0, [r3, #0]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	683a      	ldr	r2, [r7, #0]
 800f654:	4619      	mov	r1, r3
 800f656:	f7fe fc3b 	bl	800ded0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f65a:	f7fe fedf 	bl	800e41c <xTaskResumeAll>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d10a      	bne.n	800f67a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f664:	4b09      	ldr	r3, [pc, #36]	@ (800f68c <prvProcessTimerOrBlockTask+0x98>)
 800f666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f66a:	601a      	str	r2, [r3, #0]
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	f3bf 8f6f 	isb	sy
}
 800f674:	e001      	b.n	800f67a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f676:	f7fe fed1 	bl	800e41c <xTaskResumeAll>
}
 800f67a:	bf00      	nop
 800f67c:	3710      	adds	r7, #16
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	24002578 	.word	0x24002578
 800f688:	2400257c 	.word	0x2400257c
 800f68c:	e000ed04 	.word	0xe000ed04

0800f690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f690:	b480      	push	{r7}
 800f692:	b085      	sub	sp, #20
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f698:	4b0e      	ldr	r3, [pc, #56]	@ (800f6d4 <prvGetNextExpireTime+0x44>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d101      	bne.n	800f6a6 <prvGetNextExpireTime+0x16>
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	e000      	b.n	800f6a8 <prvGetNextExpireTime+0x18>
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d105      	bne.n	800f6c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6b4:	4b07      	ldr	r3, [pc, #28]	@ (800f6d4 <prvGetNextExpireTime+0x44>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	60fb      	str	r3, [r7, #12]
 800f6be:	e001      	b.n	800f6c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	24002574 	.word	0x24002574

0800f6d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6e0:	f7fe ff3a 	bl	800e558 <xTaskGetTickCount>
 800f6e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f6e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f714 <prvSampleTimeNow+0x3c>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d205      	bcs.n	800f6fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f6f0:	f000 f93a 	bl	800f968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	e002      	b.n	800f702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2200      	movs	r2, #0
 800f700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f702:	4a04      	ldr	r2, [pc, #16]	@ (800f714 <prvSampleTimeNow+0x3c>)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f708:	68fb      	ldr	r3, [r7, #12]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	24002584 	.word	0x24002584

0800f718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b086      	sub	sp, #24
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
 800f724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f726:	2300      	movs	r3, #0
 800f728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f736:	68ba      	ldr	r2, [r7, #8]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d812      	bhi.n	800f764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	1ad2      	subs	r2, r2, r3
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	699b      	ldr	r3, [r3, #24]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d302      	bcc.n	800f752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f74c:	2301      	movs	r3, #1
 800f74e:	617b      	str	r3, [r7, #20]
 800f750:	e01b      	b.n	800f78a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f752:	4b10      	ldr	r3, [pc, #64]	@ (800f794 <prvInsertTimerInActiveList+0x7c>)
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3304      	adds	r3, #4
 800f75a:	4619      	mov	r1, r3
 800f75c:	4610      	mov	r0, r2
 800f75e:	f7fd fc72 	bl	800d046 <vListInsert>
 800f762:	e012      	b.n	800f78a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d206      	bcs.n	800f77a <prvInsertTimerInActiveList+0x62>
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	429a      	cmp	r2, r3
 800f772:	d302      	bcc.n	800f77a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f774:	2301      	movs	r3, #1
 800f776:	617b      	str	r3, [r7, #20]
 800f778:	e007      	b.n	800f78a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f77a:	4b07      	ldr	r3, [pc, #28]	@ (800f798 <prvInsertTimerInActiveList+0x80>)
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	3304      	adds	r3, #4
 800f782:	4619      	mov	r1, r3
 800f784:	4610      	mov	r0, r2
 800f786:	f7fd fc5e 	bl	800d046 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f78a:	697b      	ldr	r3, [r7, #20]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3718      	adds	r7, #24
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	24002578 	.word	0x24002578
 800f798:	24002574 	.word	0x24002574

0800f79c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b08e      	sub	sp, #56	@ 0x38
 800f7a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7a2:	e0ce      	b.n	800f942 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	da19      	bge.n	800f7de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f7aa:	1d3b      	adds	r3, r7, #4
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d10b      	bne.n	800f7ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ba:	f383 8811 	msr	BASEPRI, r3
 800f7be:	f3bf 8f6f 	isb	sy
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	61fb      	str	r3, [r7, #28]
}
 800f7c8:	bf00      	nop
 800f7ca:	bf00      	nop
 800f7cc:	e7fd      	b.n	800f7ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7d4:	6850      	ldr	r0, [r2, #4]
 800f7d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7d8:	6892      	ldr	r2, [r2, #8]
 800f7da:	4611      	mov	r1, r2
 800f7dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f2c0 80ae 	blt.w	800f942 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ec:	695b      	ldr	r3, [r3, #20]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d004      	beq.n	800f7fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fd fc5e 	bl	800d0b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7fc:	463b      	mov	r3, r7
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7ff ff6a 	bl	800f6d8 <prvSampleTimeNow>
 800f804:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b09      	cmp	r3, #9
 800f80a:	f200 8097 	bhi.w	800f93c <prvProcessReceivedCommands+0x1a0>
 800f80e:	a201      	add	r2, pc, #4	@ (adr r2, 800f814 <prvProcessReceivedCommands+0x78>)
 800f810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f814:	0800f83d 	.word	0x0800f83d
 800f818:	0800f83d 	.word	0x0800f83d
 800f81c:	0800f83d 	.word	0x0800f83d
 800f820:	0800f8b3 	.word	0x0800f8b3
 800f824:	0800f8c7 	.word	0x0800f8c7
 800f828:	0800f913 	.word	0x0800f913
 800f82c:	0800f83d 	.word	0x0800f83d
 800f830:	0800f83d 	.word	0x0800f83d
 800f834:	0800f8b3 	.word	0x0800f8b3
 800f838:	0800f8c7 	.word	0x0800f8c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f83e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f842:	f043 0301 	orr.w	r3, r3, #1
 800f846:	b2da      	uxtb	r2, r3
 800f848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f84a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f84e:	68ba      	ldr	r2, [r7, #8]
 800f850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f852:	699b      	ldr	r3, [r3, #24]
 800f854:	18d1      	adds	r1, r2, r3
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f85a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f85c:	f7ff ff5c 	bl	800f718 <prvInsertTimerInActiveList>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d06c      	beq.n	800f940 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f868:	6a1b      	ldr	r3, [r3, #32]
 800f86a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f86c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f874:	f003 0304 	and.w	r3, r3, #4
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d061      	beq.n	800f940 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f880:	699b      	ldr	r3, [r3, #24]
 800f882:	441a      	add	r2, r3
 800f884:	2300      	movs	r3, #0
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	2300      	movs	r3, #0
 800f88a:	2100      	movs	r1, #0
 800f88c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f88e:	f7ff fe01 	bl	800f494 <xTimerGenericCommand>
 800f892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f894:	6a3b      	ldr	r3, [r7, #32]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d152      	bne.n	800f940 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	61bb      	str	r3, [r7, #24]
}
 800f8ac:	bf00      	nop
 800f8ae:	bf00      	nop
 800f8b0:	e7fd      	b.n	800f8ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8b8:	f023 0301 	bic.w	r3, r3, #1
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f8c4:	e03d      	b.n	800f942 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8cc:	f043 0301 	orr.w	r3, r3, #1
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8d8:	68ba      	ldr	r2, [r7, #8]
 800f8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e0:	699b      	ldr	r3, [r3, #24]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10b      	bne.n	800f8fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ea:	f383 8811 	msr	BASEPRI, r3
 800f8ee:	f3bf 8f6f 	isb	sy
 800f8f2:	f3bf 8f4f 	dsb	sy
 800f8f6:	617b      	str	r3, [r7, #20]
}
 800f8f8:	bf00      	nop
 800f8fa:	bf00      	nop
 800f8fc:	e7fd      	b.n	800f8fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f900:	699a      	ldr	r2, [r3, #24]
 800f902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f904:	18d1      	adds	r1, r2, r3
 800f906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f90a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f90c:	f7ff ff04 	bl	800f718 <prvInsertTimerInActiveList>
					break;
 800f910:	e017      	b.n	800f942 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f918:	f003 0302 	and.w	r3, r3, #2
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d103      	bne.n	800f928 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f922:	f000 fbe9 	bl	80100f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f926:	e00c      	b.n	800f942 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f92a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f92e:	f023 0301 	bic.w	r3, r3, #1
 800f932:	b2da      	uxtb	r2, r3
 800f934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f93a:	e002      	b.n	800f942 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f93c:	bf00      	nop
 800f93e:	e000      	b.n	800f942 <prvProcessReceivedCommands+0x1a6>
					break;
 800f940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f942:	4b08      	ldr	r3, [pc, #32]	@ (800f964 <prvProcessReceivedCommands+0x1c8>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	1d39      	adds	r1, r7, #4
 800f948:	2200      	movs	r2, #0
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fd ff7c 	bl	800d848 <xQueueReceive>
 800f950:	4603      	mov	r3, r0
 800f952:	2b00      	cmp	r3, #0
 800f954:	f47f af26 	bne.w	800f7a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f958:	bf00      	nop
 800f95a:	bf00      	nop
 800f95c:	3730      	adds	r7, #48	@ 0x30
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	2400257c 	.word	0x2400257c

0800f968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f96e:	e049      	b.n	800fa04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f970:	4b2e      	ldr	r3, [pc, #184]	@ (800fa2c <prvSwitchTimerLists+0xc4>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f97a:	4b2c      	ldr	r3, [pc, #176]	@ (800fa2c <prvSwitchTimerLists+0xc4>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	3304      	adds	r3, #4
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fd fb95 	bl	800d0b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f99c:	f003 0304 	and.w	r3, r3, #4
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d02f      	beq.n	800fa04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	699b      	ldr	r3, [r3, #24]
 800f9a8:	693a      	ldr	r2, [r7, #16]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f9ae:	68ba      	ldr	r2, [r7, #8]
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d90e      	bls.n	800f9d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	68ba      	ldr	r2, [r7, #8]
 800f9ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f9c2:	4b1a      	ldr	r3, [pc, #104]	@ (800fa2c <prvSwitchTimerLists+0xc4>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	3304      	adds	r3, #4
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	f7fd fb3a 	bl	800d046 <vListInsert>
 800f9d2:	e017      	b.n	800fa04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	9300      	str	r3, [sp, #0]
 800f9d8:	2300      	movs	r3, #0
 800f9da:	693a      	ldr	r2, [r7, #16]
 800f9dc:	2100      	movs	r1, #0
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f7ff fd58 	bl	800f494 <xTimerGenericCommand>
 800f9e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d10b      	bne.n	800fa04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f0:	f383 8811 	msr	BASEPRI, r3
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	603b      	str	r3, [r7, #0]
}
 800f9fe:	bf00      	nop
 800fa00:	bf00      	nop
 800fa02:	e7fd      	b.n	800fa00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fa04:	4b09      	ldr	r3, [pc, #36]	@ (800fa2c <prvSwitchTimerLists+0xc4>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d1b0      	bne.n	800f970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fa0e:	4b07      	ldr	r3, [pc, #28]	@ (800fa2c <prvSwitchTimerLists+0xc4>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fa14:	4b06      	ldr	r3, [pc, #24]	@ (800fa30 <prvSwitchTimerLists+0xc8>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a04      	ldr	r2, [pc, #16]	@ (800fa2c <prvSwitchTimerLists+0xc4>)
 800fa1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fa1c:	4a04      	ldr	r2, [pc, #16]	@ (800fa30 <prvSwitchTimerLists+0xc8>)
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	6013      	str	r3, [r2, #0]
}
 800fa22:	bf00      	nop
 800fa24:	3718      	adds	r7, #24
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	24002574 	.word	0x24002574
 800fa30:	24002578 	.word	0x24002578

0800fa34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa3a:	f000 f96d 	bl	800fd18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa3e:	4b15      	ldr	r3, [pc, #84]	@ (800fa94 <prvCheckForValidListAndQueue+0x60>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d120      	bne.n	800fa88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa46:	4814      	ldr	r0, [pc, #80]	@ (800fa98 <prvCheckForValidListAndQueue+0x64>)
 800fa48:	f7fd faac 	bl	800cfa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa4c:	4813      	ldr	r0, [pc, #76]	@ (800fa9c <prvCheckForValidListAndQueue+0x68>)
 800fa4e:	f7fd faa9 	bl	800cfa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa52:	4b13      	ldr	r3, [pc, #76]	@ (800faa0 <prvCheckForValidListAndQueue+0x6c>)
 800fa54:	4a10      	ldr	r2, [pc, #64]	@ (800fa98 <prvCheckForValidListAndQueue+0x64>)
 800fa56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa58:	4b12      	ldr	r3, [pc, #72]	@ (800faa4 <prvCheckForValidListAndQueue+0x70>)
 800fa5a:	4a10      	ldr	r2, [pc, #64]	@ (800fa9c <prvCheckForValidListAndQueue+0x68>)
 800fa5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa5e:	2300      	movs	r3, #0
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	4b11      	ldr	r3, [pc, #68]	@ (800faa8 <prvCheckForValidListAndQueue+0x74>)
 800fa64:	4a11      	ldr	r2, [pc, #68]	@ (800faac <prvCheckForValidListAndQueue+0x78>)
 800fa66:	2110      	movs	r1, #16
 800fa68:	200a      	movs	r0, #10
 800fa6a:	f7fd fbb9 	bl	800d1e0 <xQueueGenericCreateStatic>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	4a08      	ldr	r2, [pc, #32]	@ (800fa94 <prvCheckForValidListAndQueue+0x60>)
 800fa72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa74:	4b07      	ldr	r3, [pc, #28]	@ (800fa94 <prvCheckForValidListAndQueue+0x60>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d005      	beq.n	800fa88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa7c:	4b05      	ldr	r3, [pc, #20]	@ (800fa94 <prvCheckForValidListAndQueue+0x60>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	490b      	ldr	r1, [pc, #44]	@ (800fab0 <prvCheckForValidListAndQueue+0x7c>)
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fe f9fa 	bl	800de7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa88:	f000 f978 	bl	800fd7c <vPortExitCritical>
}
 800fa8c:	bf00      	nop
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	2400257c 	.word	0x2400257c
 800fa98:	2400254c 	.word	0x2400254c
 800fa9c:	24002560 	.word	0x24002560
 800faa0:	24002574 	.word	0x24002574
 800faa4:	24002578 	.word	0x24002578
 800faa8:	24002628 	.word	0x24002628
 800faac:	24002588 	.word	0x24002588
 800fab0:	08013f4c 	.word	0x08013f4c

0800fab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	3b04      	subs	r3, #4
 800fac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800facc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	3b04      	subs	r3, #4
 800fad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	f023 0201 	bic.w	r2, r3, #1
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	3b04      	subs	r3, #4
 800fae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fae4:	4a0c      	ldr	r2, [pc, #48]	@ (800fb18 <pxPortInitialiseStack+0x64>)
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	3b14      	subs	r3, #20
 800faee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	3b04      	subs	r3, #4
 800fafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f06f 0202 	mvn.w	r2, #2
 800fb02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	3b20      	subs	r3, #32
 800fb08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3714      	adds	r7, #20
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	0800fb1d 	.word	0x0800fb1d

0800fb1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb22:	2300      	movs	r3, #0
 800fb24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb26:	4b13      	ldr	r3, [pc, #76]	@ (800fb74 <prvTaskExitError+0x58>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb2e:	d00b      	beq.n	800fb48 <prvTaskExitError+0x2c>
	__asm volatile
 800fb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb34:	f383 8811 	msr	BASEPRI, r3
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	f3bf 8f4f 	dsb	sy
 800fb40:	60fb      	str	r3, [r7, #12]
}
 800fb42:	bf00      	nop
 800fb44:	bf00      	nop
 800fb46:	e7fd      	b.n	800fb44 <prvTaskExitError+0x28>
	__asm volatile
 800fb48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb4c:	f383 8811 	msr	BASEPRI, r3
 800fb50:	f3bf 8f6f 	isb	sy
 800fb54:	f3bf 8f4f 	dsb	sy
 800fb58:	60bb      	str	r3, [r7, #8]
}
 800fb5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb5c:	bf00      	nop
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d0fc      	beq.n	800fb5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb64:	bf00      	nop
 800fb66:	bf00      	nop
 800fb68:	3714      	adds	r7, #20
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	24000010 	.word	0x24000010
	...

0800fb80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb80:	4b07      	ldr	r3, [pc, #28]	@ (800fba0 <pxCurrentTCBConst2>)
 800fb82:	6819      	ldr	r1, [r3, #0]
 800fb84:	6808      	ldr	r0, [r1, #0]
 800fb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8a:	f380 8809 	msr	PSP, r0
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f04f 0000 	mov.w	r0, #0
 800fb96:	f380 8811 	msr	BASEPRI, r0
 800fb9a:	4770      	bx	lr
 800fb9c:	f3af 8000 	nop.w

0800fba0 <pxCurrentTCBConst2>:
 800fba0:	2400204c 	.word	0x2400204c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop

0800fba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fba8:	4808      	ldr	r0, [pc, #32]	@ (800fbcc <prvPortStartFirstTask+0x24>)
 800fbaa:	6800      	ldr	r0, [r0, #0]
 800fbac:	6800      	ldr	r0, [r0, #0]
 800fbae:	f380 8808 	msr	MSP, r0
 800fbb2:	f04f 0000 	mov.w	r0, #0
 800fbb6:	f380 8814 	msr	CONTROL, r0
 800fbba:	b662      	cpsie	i
 800fbbc:	b661      	cpsie	f
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	f3bf 8f6f 	isb	sy
 800fbc6:	df00      	svc	0
 800fbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbca:	bf00      	nop
 800fbcc:	e000ed08 	.word	0xe000ed08

0800fbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbd6:	4b47      	ldr	r3, [pc, #284]	@ (800fcf4 <xPortStartScheduler+0x124>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4a47      	ldr	r2, [pc, #284]	@ (800fcf8 <xPortStartScheduler+0x128>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d10b      	bne.n	800fbf8 <xPortStartScheduler+0x28>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	613b      	str	r3, [r7, #16]
}
 800fbf2:	bf00      	nop
 800fbf4:	bf00      	nop
 800fbf6:	e7fd      	b.n	800fbf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbf8:	4b3e      	ldr	r3, [pc, #248]	@ (800fcf4 <xPortStartScheduler+0x124>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a3f      	ldr	r2, [pc, #252]	@ (800fcfc <xPortStartScheduler+0x12c>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d10b      	bne.n	800fc1a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc06:	f383 8811 	msr	BASEPRI, r3
 800fc0a:	f3bf 8f6f 	isb	sy
 800fc0e:	f3bf 8f4f 	dsb	sy
 800fc12:	60fb      	str	r3, [r7, #12]
}
 800fc14:	bf00      	nop
 800fc16:	bf00      	nop
 800fc18:	e7fd      	b.n	800fc16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc1a:	4b39      	ldr	r3, [pc, #228]	@ (800fd00 <xPortStartScheduler+0x130>)
 800fc1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	22ff      	movs	r2, #255	@ 0xff
 800fc2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc34:	78fb      	ldrb	r3, [r7, #3]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc3c:	b2da      	uxtb	r2, r3
 800fc3e:	4b31      	ldr	r3, [pc, #196]	@ (800fd04 <xPortStartScheduler+0x134>)
 800fc40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc42:	4b31      	ldr	r3, [pc, #196]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc44:	2207      	movs	r2, #7
 800fc46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc48:	e009      	b.n	800fc5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc4a:	4b2f      	ldr	r3, [pc, #188]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	4a2d      	ldr	r2, [pc, #180]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc54:	78fb      	ldrb	r3, [r7, #3]
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	005b      	lsls	r3, r3, #1
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc5e:	78fb      	ldrb	r3, [r7, #3]
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc66:	2b80      	cmp	r3, #128	@ 0x80
 800fc68:	d0ef      	beq.n	800fc4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc6a:	4b27      	ldr	r3, [pc, #156]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f1c3 0307 	rsb	r3, r3, #7
 800fc72:	2b04      	cmp	r3, #4
 800fc74:	d00b      	beq.n	800fc8e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc7a:	f383 8811 	msr	BASEPRI, r3
 800fc7e:	f3bf 8f6f 	isb	sy
 800fc82:	f3bf 8f4f 	dsb	sy
 800fc86:	60bb      	str	r3, [r7, #8]
}
 800fc88:	bf00      	nop
 800fc8a:	bf00      	nop
 800fc8c:	e7fd      	b.n	800fc8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc8e:	4b1e      	ldr	r3, [pc, #120]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	021b      	lsls	r3, r3, #8
 800fc94:	4a1c      	ldr	r2, [pc, #112]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc98:	4b1b      	ldr	r3, [pc, #108]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fca0:	4a19      	ldr	r2, [pc, #100]	@ (800fd08 <xPortStartScheduler+0x138>)
 800fca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	b2da      	uxtb	r2, r3
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fcac:	4b17      	ldr	r3, [pc, #92]	@ (800fd0c <xPortStartScheduler+0x13c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	4a16      	ldr	r2, [pc, #88]	@ (800fd0c <xPortStartScheduler+0x13c>)
 800fcb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fcb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fcb8:	4b14      	ldr	r3, [pc, #80]	@ (800fd0c <xPortStartScheduler+0x13c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4a13      	ldr	r2, [pc, #76]	@ (800fd0c <xPortStartScheduler+0x13c>)
 800fcbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fcc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcc4:	f000 f8da 	bl	800fe7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fcc8:	4b11      	ldr	r3, [pc, #68]	@ (800fd10 <xPortStartScheduler+0x140>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcce:	f000 f8f9 	bl	800fec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fcd2:	4b10      	ldr	r3, [pc, #64]	@ (800fd14 <xPortStartScheduler+0x144>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a0f      	ldr	r2, [pc, #60]	@ (800fd14 <xPortStartScheduler+0x144>)
 800fcd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fcdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcde:	f7ff ff63 	bl	800fba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fce2:	f7fe fd15 	bl	800e710 <vTaskSwitchContext>
	prvTaskExitError();
 800fce6:	f7ff ff19 	bl	800fb1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3718      	adds	r7, #24
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	e000ed00 	.word	0xe000ed00
 800fcf8:	410fc271 	.word	0x410fc271
 800fcfc:	410fc270 	.word	0x410fc270
 800fd00:	e000e400 	.word	0xe000e400
 800fd04:	24002678 	.word	0x24002678
 800fd08:	2400267c 	.word	0x2400267c
 800fd0c:	e000ed20 	.word	0xe000ed20
 800fd10:	24000010 	.word	0x24000010
 800fd14:	e000ef34 	.word	0xe000ef34

0800fd18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	607b      	str	r3, [r7, #4]
}
 800fd30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd32:	4b10      	ldr	r3, [pc, #64]	@ (800fd74 <vPortEnterCritical+0x5c>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	3301      	adds	r3, #1
 800fd38:	4a0e      	ldr	r2, [pc, #56]	@ (800fd74 <vPortEnterCritical+0x5c>)
 800fd3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd74 <vPortEnterCritical+0x5c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d110      	bne.n	800fd66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd44:	4b0c      	ldr	r3, [pc, #48]	@ (800fd78 <vPortEnterCritical+0x60>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00b      	beq.n	800fd66 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	603b      	str	r3, [r7, #0]
}
 800fd60:	bf00      	nop
 800fd62:	bf00      	nop
 800fd64:	e7fd      	b.n	800fd62 <vPortEnterCritical+0x4a>
	}
}
 800fd66:	bf00      	nop
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	24000010 	.word	0x24000010
 800fd78:	e000ed04 	.word	0xe000ed04

0800fd7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd82:	4b12      	ldr	r3, [pc, #72]	@ (800fdcc <vPortExitCritical+0x50>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d10b      	bne.n	800fda2 <vPortExitCritical+0x26>
	__asm volatile
 800fd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	607b      	str	r3, [r7, #4]
}
 800fd9c:	bf00      	nop
 800fd9e:	bf00      	nop
 800fda0:	e7fd      	b.n	800fd9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fda2:	4b0a      	ldr	r3, [pc, #40]	@ (800fdcc <vPortExitCritical+0x50>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3b01      	subs	r3, #1
 800fda8:	4a08      	ldr	r2, [pc, #32]	@ (800fdcc <vPortExitCritical+0x50>)
 800fdaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fdac:	4b07      	ldr	r3, [pc, #28]	@ (800fdcc <vPortExitCritical+0x50>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d105      	bne.n	800fdc0 <vPortExitCritical+0x44>
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	f383 8811 	msr	BASEPRI, r3
}
 800fdbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fdc0:	bf00      	nop
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr
 800fdcc:	24000010 	.word	0x24000010

0800fdd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fdd0:	f3ef 8009 	mrs	r0, PSP
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	4b15      	ldr	r3, [pc, #84]	@ (800fe30 <pxCurrentTCBConst>)
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	f01e 0f10 	tst.w	lr, #16
 800fde0:	bf08      	it	eq
 800fde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdea:	6010      	str	r0, [r2, #0]
 800fdec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fdf4:	f380 8811 	msr	BASEPRI, r0
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	f3bf 8f6f 	isb	sy
 800fe00:	f7fe fc86 	bl	800e710 <vTaskSwitchContext>
 800fe04:	f04f 0000 	mov.w	r0, #0
 800fe08:	f380 8811 	msr	BASEPRI, r0
 800fe0c:	bc09      	pop	{r0, r3}
 800fe0e:	6819      	ldr	r1, [r3, #0]
 800fe10:	6808      	ldr	r0, [r1, #0]
 800fe12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe16:	f01e 0f10 	tst.w	lr, #16
 800fe1a:	bf08      	it	eq
 800fe1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe20:	f380 8809 	msr	PSP, r0
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	f3af 8000 	nop.w

0800fe30 <pxCurrentTCBConst>:
 800fe30:	2400204c 	.word	0x2400204c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe34:	bf00      	nop
 800fe36:	bf00      	nop

0800fe38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe42:	f383 8811 	msr	BASEPRI, r3
 800fe46:	f3bf 8f6f 	isb	sy
 800fe4a:	f3bf 8f4f 	dsb	sy
 800fe4e:	607b      	str	r3, [r7, #4]
}
 800fe50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe52:	f7fe fba3 	bl	800e59c <xTaskIncrementTick>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d003      	beq.n	800fe64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe5c:	4b06      	ldr	r3, [pc, #24]	@ (800fe78 <xPortSysTickHandler+0x40>)
 800fe5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	2300      	movs	r3, #0
 800fe66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	f383 8811 	msr	BASEPRI, r3
}
 800fe6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	e000ed04 	.word	0xe000ed04

0800fe7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe80:	4b0b      	ldr	r3, [pc, #44]	@ (800feb0 <vPortSetupTimerInterrupt+0x34>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe86:	4b0b      	ldr	r3, [pc, #44]	@ (800feb4 <vPortSetupTimerInterrupt+0x38>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe8c:	4b0a      	ldr	r3, [pc, #40]	@ (800feb8 <vPortSetupTimerInterrupt+0x3c>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a0a      	ldr	r2, [pc, #40]	@ (800febc <vPortSetupTimerInterrupt+0x40>)
 800fe92:	fba2 2303 	umull	r2, r3, r2, r3
 800fe96:	099b      	lsrs	r3, r3, #6
 800fe98:	4a09      	ldr	r2, [pc, #36]	@ (800fec0 <vPortSetupTimerInterrupt+0x44>)
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe9e:	4b04      	ldr	r3, [pc, #16]	@ (800feb0 <vPortSetupTimerInterrupt+0x34>)
 800fea0:	2207      	movs	r2, #7
 800fea2:	601a      	str	r2, [r3, #0]
}
 800fea4:	bf00      	nop
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop
 800feb0:	e000e010 	.word	0xe000e010
 800feb4:	e000e018 	.word	0xe000e018
 800feb8:	24000000 	.word	0x24000000
 800febc:	10624dd3 	.word	0x10624dd3
 800fec0:	e000e014 	.word	0xe000e014

0800fec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fed4 <vPortEnableVFP+0x10>
 800fec8:	6801      	ldr	r1, [r0, #0]
 800feca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fece:	6001      	str	r1, [r0, #0]
 800fed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fed2:	bf00      	nop
 800fed4:	e000ed88 	.word	0xe000ed88

0800fed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fede:	f3ef 8305 	mrs	r3, IPSR
 800fee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2b0f      	cmp	r3, #15
 800fee8:	d915      	bls.n	800ff16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feea:	4a18      	ldr	r2, [pc, #96]	@ (800ff4c <vPortValidateInterruptPriority+0x74>)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	4413      	add	r3, r2
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fef4:	4b16      	ldr	r3, [pc, #88]	@ (800ff50 <vPortValidateInterruptPriority+0x78>)
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	7afa      	ldrb	r2, [r7, #11]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d20b      	bcs.n	800ff16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	607b      	str	r3, [r7, #4]
}
 800ff10:	bf00      	nop
 800ff12:	bf00      	nop
 800ff14:	e7fd      	b.n	800ff12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff16:	4b0f      	ldr	r3, [pc, #60]	@ (800ff54 <vPortValidateInterruptPriority+0x7c>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff58 <vPortValidateInterruptPriority+0x80>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d90b      	bls.n	800ff3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff2a:	f383 8811 	msr	BASEPRI, r3
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	f3bf 8f4f 	dsb	sy
 800ff36:	603b      	str	r3, [r7, #0]
}
 800ff38:	bf00      	nop
 800ff3a:	bf00      	nop
 800ff3c:	e7fd      	b.n	800ff3a <vPortValidateInterruptPriority+0x62>
	}
 800ff3e:	bf00      	nop
 800ff40:	3714      	adds	r7, #20
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	e000e3f0 	.word	0xe000e3f0
 800ff50:	24002678 	.word	0x24002678
 800ff54:	e000ed0c 	.word	0xe000ed0c
 800ff58:	2400267c 	.word	0x2400267c

0800ff5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b08a      	sub	sp, #40	@ 0x28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff64:	2300      	movs	r3, #0
 800ff66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff68:	f7fe fa4a 	bl	800e400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff6c:	4b5c      	ldr	r3, [pc, #368]	@ (80100e0 <pvPortMalloc+0x184>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d101      	bne.n	800ff78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff74:	f000 f924 	bl	80101c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff78:	4b5a      	ldr	r3, [pc, #360]	@ (80100e4 <pvPortMalloc+0x188>)
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4013      	ands	r3, r2
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f040 8095 	bne.w	80100b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d01e      	beq.n	800ffca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff8c:	2208      	movs	r2, #8
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4413      	add	r3, r2
 800ff92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f003 0307 	and.w	r3, r3, #7
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d015      	beq.n	800ffca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f023 0307 	bic.w	r3, r3, #7
 800ffa4:	3308      	adds	r3, #8
 800ffa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f003 0307 	and.w	r3, r3, #7
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00b      	beq.n	800ffca <pvPortMalloc+0x6e>
	__asm volatile
 800ffb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb6:	f383 8811 	msr	BASEPRI, r3
 800ffba:	f3bf 8f6f 	isb	sy
 800ffbe:	f3bf 8f4f 	dsb	sy
 800ffc2:	617b      	str	r3, [r7, #20]
}
 800ffc4:	bf00      	nop
 800ffc6:	bf00      	nop
 800ffc8:	e7fd      	b.n	800ffc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d06f      	beq.n	80100b0 <pvPortMalloc+0x154>
 800ffd0:	4b45      	ldr	r3, [pc, #276]	@ (80100e8 <pvPortMalloc+0x18c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d86a      	bhi.n	80100b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffda:	4b44      	ldr	r3, [pc, #272]	@ (80100ec <pvPortMalloc+0x190>)
 800ffdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffde:	4b43      	ldr	r3, [pc, #268]	@ (80100ec <pvPortMalloc+0x190>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffe4:	e004      	b.n	800fff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ffea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d903      	bls.n	8010002 <pvPortMalloc+0xa6>
 800fffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d1f1      	bne.n	800ffe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010002:	4b37      	ldr	r3, [pc, #220]	@ (80100e0 <pvPortMalloc+0x184>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010008:	429a      	cmp	r2, r3
 801000a:	d051      	beq.n	80100b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801000c:	6a3b      	ldr	r3, [r7, #32]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2208      	movs	r2, #8
 8010012:	4413      	add	r3, r2
 8010014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	6a3b      	ldr	r3, [r7, #32]
 801001c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801001e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010020:	685a      	ldr	r2, [r3, #4]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	1ad2      	subs	r2, r2, r3
 8010026:	2308      	movs	r3, #8
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	429a      	cmp	r2, r3
 801002c:	d920      	bls.n	8010070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801002e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4413      	add	r3, r2
 8010034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	f003 0307 	and.w	r3, r3, #7
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00b      	beq.n	8010058 <pvPortMalloc+0xfc>
	__asm volatile
 8010040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	613b      	str	r3, [r7, #16]
}
 8010052:	bf00      	nop
 8010054:	bf00      	nop
 8010056:	e7fd      	b.n	8010054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	1ad2      	subs	r2, r2, r3
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801006a:	69b8      	ldr	r0, [r7, #24]
 801006c:	f000 f90c 	bl	8010288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010070:	4b1d      	ldr	r3, [pc, #116]	@ (80100e8 <pvPortMalloc+0x18c>)
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	4a1b      	ldr	r2, [pc, #108]	@ (80100e8 <pvPortMalloc+0x18c>)
 801007c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801007e:	4b1a      	ldr	r3, [pc, #104]	@ (80100e8 <pvPortMalloc+0x18c>)
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	4b1b      	ldr	r3, [pc, #108]	@ (80100f0 <pvPortMalloc+0x194>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	429a      	cmp	r2, r3
 8010088:	d203      	bcs.n	8010092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801008a:	4b17      	ldr	r3, [pc, #92]	@ (80100e8 <pvPortMalloc+0x18c>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	4a18      	ldr	r2, [pc, #96]	@ (80100f0 <pvPortMalloc+0x194>)
 8010090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010094:	685a      	ldr	r2, [r3, #4]
 8010096:	4b13      	ldr	r3, [pc, #76]	@ (80100e4 <pvPortMalloc+0x188>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	431a      	orrs	r2, r3
 801009c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80100a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a2:	2200      	movs	r2, #0
 80100a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80100a6:	4b13      	ldr	r3, [pc, #76]	@ (80100f4 <pvPortMalloc+0x198>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3301      	adds	r3, #1
 80100ac:	4a11      	ldr	r2, [pc, #68]	@ (80100f4 <pvPortMalloc+0x198>)
 80100ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100b0:	f7fe f9b4 	bl	800e41c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	f003 0307 	and.w	r3, r3, #7
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00b      	beq.n	80100d6 <pvPortMalloc+0x17a>
	__asm volatile
 80100be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c2:	f383 8811 	msr	BASEPRI, r3
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	60fb      	str	r3, [r7, #12]
}
 80100d0:	bf00      	nop
 80100d2:	bf00      	nop
 80100d4:	e7fd      	b.n	80100d2 <pvPortMalloc+0x176>
	return pvReturn;
 80100d6:	69fb      	ldr	r3, [r7, #28]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3728      	adds	r7, #40	@ 0x28
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	240333c8 	.word	0x240333c8
 80100e4:	240333dc 	.word	0x240333dc
 80100e8:	240333cc 	.word	0x240333cc
 80100ec:	240333c0 	.word	0x240333c0
 80100f0:	240333d0 	.word	0x240333d0
 80100f4:	240333d4 	.word	0x240333d4

080100f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d04f      	beq.n	80101aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801010a:	2308      	movs	r3, #8
 801010c:	425b      	negs	r3, r3
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	4413      	add	r3, r2
 8010112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	4b25      	ldr	r3, [pc, #148]	@ (80101b4 <vPortFree+0xbc>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4013      	ands	r3, r2
 8010122:	2b00      	cmp	r3, #0
 8010124:	d10b      	bne.n	801013e <vPortFree+0x46>
	__asm volatile
 8010126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	60fb      	str	r3, [r7, #12]
}
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	e7fd      	b.n	801013a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00b      	beq.n	801015e <vPortFree+0x66>
	__asm volatile
 8010146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	60bb      	str	r3, [r7, #8]
}
 8010158:	bf00      	nop
 801015a:	bf00      	nop
 801015c:	e7fd      	b.n	801015a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	685a      	ldr	r2, [r3, #4]
 8010162:	4b14      	ldr	r3, [pc, #80]	@ (80101b4 <vPortFree+0xbc>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	4013      	ands	r3, r2
 8010168:	2b00      	cmp	r3, #0
 801016a:	d01e      	beq.n	80101aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d11a      	bne.n	80101aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	685a      	ldr	r2, [r3, #4]
 8010178:	4b0e      	ldr	r3, [pc, #56]	@ (80101b4 <vPortFree+0xbc>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	43db      	mvns	r3, r3
 801017e:	401a      	ands	r2, r3
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010184:	f7fe f93c 	bl	800e400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	685a      	ldr	r2, [r3, #4]
 801018c:	4b0a      	ldr	r3, [pc, #40]	@ (80101b8 <vPortFree+0xc0>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4413      	add	r3, r2
 8010192:	4a09      	ldr	r2, [pc, #36]	@ (80101b8 <vPortFree+0xc0>)
 8010194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010196:	6938      	ldr	r0, [r7, #16]
 8010198:	f000 f876 	bl	8010288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801019c:	4b07      	ldr	r3, [pc, #28]	@ (80101bc <vPortFree+0xc4>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	3301      	adds	r3, #1
 80101a2:	4a06      	ldr	r2, [pc, #24]	@ (80101bc <vPortFree+0xc4>)
 80101a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80101a6:	f7fe f939 	bl	800e41c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80101aa:	bf00      	nop
 80101ac:	3718      	adds	r7, #24
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	240333dc 	.word	0x240333dc
 80101b8:	240333cc 	.word	0x240333cc
 80101bc:	240333d8 	.word	0x240333d8

080101c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101c6:	4b29      	ldr	r3, [pc, #164]	@ (801026c <prvHeapInit+0xac>)
 80101c8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101ca:	4b29      	ldr	r3, [pc, #164]	@ (8010270 <prvHeapInit+0xb0>)
 80101cc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f003 0307 	and.w	r3, r3, #7
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00c      	beq.n	80101f2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	3307      	adds	r3, #7
 80101dc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f023 0307 	bic.w	r3, r3, #7
 80101e4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	4a20      	ldr	r2, [pc, #128]	@ (8010270 <prvHeapInit+0xb0>)
 80101ee:	4413      	add	r3, r2
 80101f0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101f6:	4a1f      	ldr	r2, [pc, #124]	@ (8010274 <prvHeapInit+0xb4>)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101fc:	4b1d      	ldr	r3, [pc, #116]	@ (8010274 <prvHeapInit+0xb4>)
 80101fe:	2200      	movs	r2, #0
 8010200:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	4413      	add	r3, r2
 8010208:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801020a:	2208      	movs	r2, #8
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	1a9b      	subs	r3, r3, r2
 8010210:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	f023 0307 	bic.w	r3, r3, #7
 8010218:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	4a16      	ldr	r2, [pc, #88]	@ (8010278 <prvHeapInit+0xb8>)
 801021e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010220:	4b15      	ldr	r3, [pc, #84]	@ (8010278 <prvHeapInit+0xb8>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	2200      	movs	r2, #0
 8010226:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010228:	4b13      	ldr	r3, [pc, #76]	@ (8010278 <prvHeapInit+0xb8>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2200      	movs	r2, #0
 801022e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	1ad2      	subs	r2, r2, r3
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801023e:	4b0e      	ldr	r3, [pc, #56]	@ (8010278 <prvHeapInit+0xb8>)
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	4a0c      	ldr	r2, [pc, #48]	@ (801027c <prvHeapInit+0xbc>)
 801024c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	4a0b      	ldr	r2, [pc, #44]	@ (8010280 <prvHeapInit+0xc0>)
 8010254:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010256:	4b0b      	ldr	r3, [pc, #44]	@ (8010284 <prvHeapInit+0xc4>)
 8010258:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801025c:	601a      	str	r2, [r3, #0]
}
 801025e:	bf00      	nop
 8010260:	3714      	adds	r7, #20
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	00030d40 	.word	0x00030d40
 8010270:	24002680 	.word	0x24002680
 8010274:	240333c0 	.word	0x240333c0
 8010278:	240333c8 	.word	0x240333c8
 801027c:	240333d0 	.word	0x240333d0
 8010280:	240333cc 	.word	0x240333cc
 8010284:	240333dc 	.word	0x240333dc

08010288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010288:	b480      	push	{r7}
 801028a:	b085      	sub	sp, #20
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010290:	4b28      	ldr	r3, [pc, #160]	@ (8010334 <prvInsertBlockIntoFreeList+0xac>)
 8010292:	60fb      	str	r3, [r7, #12]
 8010294:	e002      	b.n	801029c <prvInsertBlockIntoFreeList+0x14>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	60fb      	str	r3, [r7, #12]
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d8f7      	bhi.n	8010296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	4413      	add	r3, r2
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d108      	bne.n	80102ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	685a      	ldr	r2, [r3, #4]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	441a      	add	r2, r3
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	441a      	add	r2, r3
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d118      	bne.n	8010310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	4b15      	ldr	r3, [pc, #84]	@ (8010338 <prvInsertBlockIntoFreeList+0xb0>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d00d      	beq.n	8010306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	685a      	ldr	r2, [r3, #4]
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	441a      	add	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	601a      	str	r2, [r3, #0]
 8010304:	e008      	b.n	8010318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010306:	4b0c      	ldr	r3, [pc, #48]	@ (8010338 <prvInsertBlockIntoFreeList+0xb0>)
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	601a      	str	r2, [r3, #0]
 801030e:	e003      	b.n	8010318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	429a      	cmp	r2, r3
 801031e:	d002      	beq.n	8010326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010326:	bf00      	nop
 8010328:	3714      	adds	r7, #20
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	240333c0 	.word	0x240333c0
 8010338:	240333c8 	.word	0x240333c8

0801033c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 801033c:	4a02      	ldr	r2, [pc, #8]	@ (8010348 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0xc>)
 801033e:	4b03      	ldr	r3, [pc, #12]	@ (801034c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x10>)
 8010340:	6812      	ldr	r2, [r2, #0]
 8010342:	601a      	str	r2, [r3, #0]
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	24000e0c 	.word	0x24000e0c
 801034c:	2400001c 	.word	0x2400001c

08010350 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_init_function>:
 8010350:	f002 bb96 	b.w	8012a80 <autoware_control_msgs__msg__Control__init>

08010354 <autoware_control_msgs__msg__Control__rosidl_typesupport_introspection_c__Control_fini_function>:
 8010354:	f002 bbea 	b.w	8012b2c <autoware_control_msgs__msg__Control__fini>

08010358 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 8010358:	b510      	push	{r4, lr}
 801035a:	4c0c      	ldr	r4, [pc, #48]	@ (801038c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x34>)
 801035c:	f001 f892 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010360:	60e0      	str	r0, [r4, #12]
 8010362:	f001 f88f 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010366:	64a0      	str	r0, [r4, #72]	@ 0x48
 8010368:	f000 f81a 	bl	80103a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 801036c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8010370:	f000 f832 	bl	80103d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8010374:	4b06      	ldr	r3, [pc, #24]	@ (8010390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8010376:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	b10a      	cbz	r2, 8010382 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x2a>
 801037e:	4804      	ldr	r0, [pc, #16]	@ (8010390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8010380:	bd10      	pop	{r4, pc}
 8010382:	4a04      	ldr	r2, [pc, #16]	@ (8010394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x3c>)
 8010384:	4802      	ldr	r0, [pc, #8]	@ (8010390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x38>)
 8010386:	6812      	ldr	r2, [r2, #0]
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	bd10      	pop	{r4, pc}
 801038c:	24000028 	.word	0x24000028
 8010390:	24000118 	.word	0x24000118
 8010394:	24000e10 	.word	0x24000e10

08010398 <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_init_function>:
 8010398:	f002 bbdc 	b.w	8012b54 <autoware_control_msgs__msg__Lateral__init>

0801039c <autoware_control_msgs__msg__Lateral__rosidl_typesupport_introspection_c__Lateral_fini_function>:
 801039c:	f002 bbfe 	b.w	8012b9c <autoware_control_msgs__msg__Lateral__fini>

080103a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 80103a0:	b510      	push	{r4, lr}
 80103a2:	4c08      	ldr	r4, [pc, #32]	@ (80103c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x24>)
 80103a4:	f001 f86e 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103a8:	60e0      	str	r0, [r4, #12]
 80103aa:	f001 f86b 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103ae:	4b06      	ldr	r3, [pc, #24]	@ (80103c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 80103b0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	b10a      	cbz	r2, 80103ba <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x1a>
 80103b6:	4804      	ldr	r0, [pc, #16]	@ (80103c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 80103b8:	bd10      	pop	{r4, pc}
 80103ba:	4a04      	ldr	r2, [pc, #16]	@ (80103cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x2c>)
 80103bc:	4802      	ldr	r0, [pc, #8]	@ (80103c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x28>)
 80103be:	6812      	ldr	r2, [r2, #0]
 80103c0:	601a      	str	r2, [r3, #0]
 80103c2:	bd10      	pop	{r4, pc}
 80103c4:	24000124 	.word	0x24000124
 80103c8:	24000250 	.word	0x24000250
 80103cc:	24000e10 	.word	0x24000e10

080103d0 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_init_function>:
 80103d0:	f002 bbf0 	b.w	8012bb4 <autoware_control_msgs__msg__Longitudinal__init>

080103d4 <autoware_control_msgs__msg__Longitudinal__rosidl_typesupport_introspection_c__Longitudinal_fini_function>:
 80103d4:	f002 bc12 	b.w	8012bfc <autoware_control_msgs__msg__Longitudinal__fini>

080103d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 80103d8:	b510      	push	{r4, lr}
 80103da:	4c08      	ldr	r4, [pc, #32]	@ (80103fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x24>)
 80103dc:	f001 f852 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103e0:	60e0      	str	r0, [r4, #12]
 80103e2:	f001 f84f 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80103e6:	4b06      	ldr	r3, [pc, #24]	@ (8010400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 80103e8:	64a0      	str	r0, [r4, #72]	@ 0x48
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	b10a      	cbz	r2, 80103f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x1a>
 80103ee:	4804      	ldr	r0, [pc, #16]	@ (8010400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 80103f0:	bd10      	pop	{r4, pc}
 80103f2:	4a04      	ldr	r2, [pc, #16]	@ (8010404 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x2c>)
 80103f4:	4802      	ldr	r0, [pc, #8]	@ (8010400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x28>)
 80103f6:	6812      	ldr	r2, [r2, #0]
 80103f8:	601a      	str	r2, [r3, #0]
 80103fa:	bd10      	pop	{r4, pc}
 80103fc:	2400025c 	.word	0x2400025c
 8010400:	24000400 	.word	0x24000400
 8010404:	24000e10 	.word	0x24000e10

08010408 <get_serialized_size_autoware_control_msgs__msg__Control>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	4604      	mov	r4, r0
 801040c:	b1c8      	cbz	r0, 8010442 <get_serialized_size_autoware_control_msgs__msg__Control+0x3a>
 801040e:	460f      	mov	r7, r1
 8010410:	f001 f846 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010414:	4606      	mov	r6, r0
 8010416:	f104 0008 	add.w	r0, r4, #8
 801041a:	443e      	add	r6, r7
 801041c:	4631      	mov	r1, r6
 801041e:	f001 f83f 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010422:	4605      	mov	r5, r0
 8010424:	f104 0010 	add.w	r0, r4, #16
 8010428:	4435      	add	r5, r6
 801042a:	4629      	mov	r1, r5
 801042c:	f000 f8a2 	bl	8010574 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8010430:	4601      	mov	r1, r0
 8010432:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8010436:	440d      	add	r5, r1
 8010438:	4629      	mov	r1, r5
 801043a:	f000 f9a7 	bl	801078c <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 801043e:	1bc0      	subs	r0, r0, r7
 8010440:	4428      	add	r0, r5
 8010442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010444 <_Control__cdr_deserialize>:
 8010444:	b570      	push	{r4, r5, r6, lr}
 8010446:	460c      	mov	r4, r1
 8010448:	b329      	cbz	r1, 8010496 <_Control__cdr_deserialize+0x52>
 801044a:	4605      	mov	r5, r0
 801044c:	f001 f88c 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010450:	4603      	mov	r3, r0
 8010452:	4621      	mov	r1, r4
 8010454:	4628      	mov	r0, r5
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	4798      	blx	r3
 801045c:	f001 f884 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010460:	4603      	mov	r3, r0
 8010462:	f104 0108 	add.w	r1, r4, #8
 8010466:	4628      	mov	r0, r5
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	4798      	blx	r3
 801046e:	f000 f95b 	bl	8010728 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 8010472:	4603      	mov	r3, r0
 8010474:	f104 0110 	add.w	r1, r4, #16
 8010478:	4628      	mov	r0, r5
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	4798      	blx	r3
 8010480:	f000 fa28 	bl	80108d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 8010484:	4603      	mov	r3, r0
 8010486:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 801048a:	4628      	mov	r0, r5
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	4718      	bx	r3
 8010496:	4608      	mov	r0, r1
 8010498:	bd70      	pop	{r4, r5, r6, pc}
 801049a:	bf00      	nop

0801049c <_Control__cdr_serialize>:
 801049c:	b338      	cbz	r0, 80104ee <_Control__cdr_serialize+0x52>
 801049e:	b570      	push	{r4, r5, r6, lr}
 80104a0:	4604      	mov	r4, r0
 80104a2:	460d      	mov	r5, r1
 80104a4:	f001 f860 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80104a8:	4603      	mov	r3, r0
 80104aa:	4629      	mov	r1, r5
 80104ac:	4620      	mov	r0, r4
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	689b      	ldr	r3, [r3, #8]
 80104b2:	4798      	blx	r3
 80104b4:	f001 f858 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80104b8:	4603      	mov	r3, r0
 80104ba:	4629      	mov	r1, r5
 80104bc:	f104 0008 	add.w	r0, r4, #8
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	689b      	ldr	r3, [r3, #8]
 80104c4:	4798      	blx	r3
 80104c6:	f000 f92f 	bl	8010728 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>
 80104ca:	4603      	mov	r3, r0
 80104cc:	4629      	mov	r1, r5
 80104ce:	f104 0010 	add.w	r0, r4, #16
 80104d2:	685b      	ldr	r3, [r3, #4]
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	4798      	blx	r3
 80104d8:	f000 f9fc 	bl	80108d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>
 80104dc:	4603      	mov	r3, r0
 80104de:	4629      	mov	r1, r5
 80104e0:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	4718      	bx	r3
 80104ee:	4770      	bx	lr

080104f0 <_Control__get_serialized_size>:
 80104f0:	b538      	push	{r3, r4, r5, lr}
 80104f2:	4604      	mov	r4, r0
 80104f4:	b1b8      	cbz	r0, 8010526 <_Control__get_serialized_size+0x36>
 80104f6:	2100      	movs	r1, #0
 80104f8:	f000 ffd2 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 80104fc:	4605      	mov	r5, r0
 80104fe:	f104 0008 	add.w	r0, r4, #8
 8010502:	4629      	mov	r1, r5
 8010504:	f000 ffcc 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010508:	4601      	mov	r1, r0
 801050a:	f104 0010 	add.w	r0, r4, #16
 801050e:	440d      	add	r5, r1
 8010510:	4629      	mov	r1, r5
 8010512:	f000 f82f 	bl	8010574 <get_serialized_size_autoware_control_msgs__msg__Lateral>
 8010516:	4601      	mov	r1, r0
 8010518:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801051c:	440d      	add	r5, r1
 801051e:	4629      	mov	r1, r5
 8010520:	f000 f934 	bl	801078c <get_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010524:	4428      	add	r0, r5
 8010526:	bd38      	pop	{r3, r4, r5, pc}

08010528 <_Control__max_serialized_size>:
 8010528:	b530      	push	{r4, r5, lr}
 801052a:	b083      	sub	sp, #12
 801052c:	2301      	movs	r3, #1
 801052e:	2100      	movs	r1, #0
 8010530:	f10d 0007 	add.w	r0, sp, #7
 8010534:	f88d 3007 	strb.w	r3, [sp, #7]
 8010538:	f001 f802 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 801053c:	4604      	mov	r4, r0
 801053e:	f10d 0007 	add.w	r0, sp, #7
 8010542:	4621      	mov	r1, r4
 8010544:	f000 fffc 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8010548:	4605      	mov	r5, r0
 801054a:	f10d 0007 	add.w	r0, sp, #7
 801054e:	4425      	add	r5, r4
 8010550:	4629      	mov	r1, r5
 8010552:	f000 f8c7 	bl	80106e4 <max_serialized_size_autoware_control_msgs__msg__Lateral>
 8010556:	4604      	mov	r4, r0
 8010558:	f10d 0007 	add.w	r0, sp, #7
 801055c:	442c      	add	r4, r5
 801055e:	4621      	mov	r1, r4
 8010560:	f000 f980 	bl	8010864 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 8010564:	4420      	add	r0, r4
 8010566:	b003      	add	sp, #12
 8010568:	bd30      	pop	{r4, r5, pc}
 801056a:	bf00      	nop

0801056c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control>:
 801056c:	4800      	ldr	r0, [pc, #0]	@ (8010570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Control+0x4>)
 801056e:	4770      	bx	lr
 8010570:	2400040c 	.word	0x2400040c

08010574 <get_serialized_size_autoware_control_msgs__msg__Lateral>:
 8010574:	b5b0      	push	{r4, r5, r7, lr}
 8010576:	4604      	mov	r4, r0
 8010578:	b1f0      	cbz	r0, 80105b8 <get_serialized_size_autoware_control_msgs__msg__Lateral+0x44>
 801057a:	460d      	mov	r5, r1
 801057c:	f000 ff90 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010580:	4607      	mov	r7, r0
 8010582:	f104 0008 	add.w	r0, r4, #8
 8010586:	442f      	add	r7, r5
 8010588:	f1c5 0501 	rsb	r5, r5, #1
 801058c:	4639      	mov	r1, r7
 801058e:	f000 ff87 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010592:	4407      	add	r7, r0
 8010594:	2104      	movs	r1, #4
 8010596:	4638      	mov	r0, r7
 8010598:	f001 fea8 	bl	80122ec <ucdr_alignment>
 801059c:	2104      	movs	r1, #4
 801059e:	1844      	adds	r4, r0, r1
 80105a0:	443c      	add	r4, r7
 80105a2:	4620      	mov	r0, r4
 80105a4:	f001 fea2 	bl	80122ec <ucdr_alignment>
 80105a8:	3004      	adds	r0, #4
 80105aa:	2101      	movs	r1, #1
 80105ac:	4404      	add	r4, r0
 80105ae:	4620      	mov	r0, r4
 80105b0:	f001 fe9c 	bl	80122ec <ucdr_alignment>
 80105b4:	4428      	add	r0, r5
 80105b6:	4420      	add	r0, r4
 80105b8:	bdb0      	pop	{r4, r5, r7, pc}
 80105ba:	bf00      	nop

080105bc <_Lateral__cdr_deserialize>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	460c      	mov	r4, r1
 80105c0:	b311      	cbz	r1, 8010608 <_Lateral__cdr_deserialize+0x4c>
 80105c2:	4605      	mov	r5, r0
 80105c4:	f000 ffd0 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80105c8:	4603      	mov	r3, r0
 80105ca:	4621      	mov	r1, r4
 80105cc:	4628      	mov	r0, r5
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	4798      	blx	r3
 80105d4:	f000 ffc8 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80105d8:	4603      	mov	r3, r0
 80105da:	f104 0108 	add.w	r1, r4, #8
 80105de:	4628      	mov	r0, r5
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	4798      	blx	r3
 80105e6:	f104 0110 	add.w	r1, r4, #16
 80105ea:	4628      	mov	r0, r5
 80105ec:	f001 fc30 	bl	8011e50 <ucdr_deserialize_float>
 80105f0:	f104 0114 	add.w	r1, r4, #20
 80105f4:	4628      	mov	r0, r5
 80105f6:	f001 fc2b 	bl	8011e50 <ucdr_deserialize_float>
 80105fa:	f104 0118 	add.w	r1, r4, #24
 80105fe:	4628      	mov	r0, r5
 8010600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010604:	f000 bfca 	b.w	801159c <ucdr_deserialize_bool>
 8010608:	4608      	mov	r0, r1
 801060a:	bd38      	pop	{r3, r4, r5, pc}

0801060c <_Lateral__cdr_serialize>:
 801060c:	b318      	cbz	r0, 8010656 <_Lateral__cdr_serialize+0x4a>
 801060e:	b538      	push	{r3, r4, r5, lr}
 8010610:	4604      	mov	r4, r0
 8010612:	460d      	mov	r5, r1
 8010614:	f000 ffa8 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010618:	4603      	mov	r3, r0
 801061a:	4629      	mov	r1, r5
 801061c:	4620      	mov	r0, r4
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	689b      	ldr	r3, [r3, #8]
 8010622:	4798      	blx	r3
 8010624:	f000 ffa0 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010628:	4603      	mov	r3, r0
 801062a:	4629      	mov	r1, r5
 801062c:	f104 0008 	add.w	r0, r4, #8
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	689b      	ldr	r3, [r3, #8]
 8010634:	4798      	blx	r3
 8010636:	ed94 0a04 	vldr	s0, [r4, #16]
 801063a:	4628      	mov	r0, r5
 801063c:	f001 fb70 	bl	8011d20 <ucdr_serialize_float>
 8010640:	ed94 0a05 	vldr	s0, [r4, #20]
 8010644:	4628      	mov	r0, r5
 8010646:	f001 fb6b 	bl	8011d20 <ucdr_serialize_float>
 801064a:	7e21      	ldrb	r1, [r4, #24]
 801064c:	4628      	mov	r0, r5
 801064e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010652:	f000 bf8d 	b.w	8011570 <ucdr_serialize_bool>
 8010656:	4770      	bx	lr

08010658 <_Lateral__get_serialized_size>:
 8010658:	b538      	push	{r3, r4, r5, lr}
 801065a:	4604      	mov	r4, r0
 801065c:	b1d8      	cbz	r0, 8010696 <_Lateral__get_serialized_size+0x3e>
 801065e:	2100      	movs	r1, #0
 8010660:	f000 ff1e 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010664:	4605      	mov	r5, r0
 8010666:	f104 0008 	add.w	r0, r4, #8
 801066a:	4629      	mov	r1, r5
 801066c:	f000 ff18 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010670:	4405      	add	r5, r0
 8010672:	2104      	movs	r1, #4
 8010674:	4628      	mov	r0, r5
 8010676:	f001 fe39 	bl	80122ec <ucdr_alignment>
 801067a:	2104      	movs	r1, #4
 801067c:	4408      	add	r0, r1
 801067e:	1944      	adds	r4, r0, r5
 8010680:	4620      	mov	r0, r4
 8010682:	f001 fe33 	bl	80122ec <ucdr_alignment>
 8010686:	3004      	adds	r0, #4
 8010688:	2101      	movs	r1, #1
 801068a:	4404      	add	r4, r0
 801068c:	4620      	mov	r0, r4
 801068e:	f001 fe2d 	bl	80122ec <ucdr_alignment>
 8010692:	3001      	adds	r0, #1
 8010694:	4420      	add	r0, r4
 8010696:	bd38      	pop	{r3, r4, r5, pc}

08010698 <_Lateral__max_serialized_size>:
 8010698:	b530      	push	{r4, r5, lr}
 801069a:	b083      	sub	sp, #12
 801069c:	2501      	movs	r5, #1
 801069e:	2100      	movs	r1, #0
 80106a0:	f10d 0007 	add.w	r0, sp, #7
 80106a4:	f88d 5007 	strb.w	r5, [sp, #7]
 80106a8:	f000 ff4a 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 80106ac:	4604      	mov	r4, r0
 80106ae:	f10d 0007 	add.w	r0, sp, #7
 80106b2:	4621      	mov	r1, r4
 80106b4:	f000 ff44 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 80106b8:	4404      	add	r4, r0
 80106ba:	2104      	movs	r1, #4
 80106bc:	4620      	mov	r0, r4
 80106be:	f001 fe15 	bl	80122ec <ucdr_alignment>
 80106c2:	2104      	movs	r1, #4
 80106c4:	4408      	add	r0, r1
 80106c6:	4404      	add	r4, r0
 80106c8:	4620      	mov	r0, r4
 80106ca:	f001 fe0f 	bl	80122ec <ucdr_alignment>
 80106ce:	3004      	adds	r0, #4
 80106d0:	4629      	mov	r1, r5
 80106d2:	4404      	add	r4, r0
 80106d4:	4620      	mov	r0, r4
 80106d6:	f001 fe09 	bl	80122ec <ucdr_alignment>
 80106da:	4428      	add	r0, r5
 80106dc:	4420      	add	r0, r4
 80106de:	b003      	add	sp, #12
 80106e0:	bd30      	pop	{r4, r5, pc}
 80106e2:	bf00      	nop

080106e4 <max_serialized_size_autoware_control_msgs__msg__Lateral>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	2701      	movs	r7, #1
 80106e8:	460c      	mov	r4, r1
 80106ea:	4606      	mov	r6, r0
 80106ec:	7007      	strb	r7, [r0, #0]
 80106ee:	f000 ff27 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 80106f2:	4605      	mov	r5, r0
 80106f4:	4630      	mov	r0, r6
 80106f6:	4425      	add	r5, r4
 80106f8:	1b3c      	subs	r4, r7, r4
 80106fa:	4629      	mov	r1, r5
 80106fc:	f000 ff20 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8010700:	4405      	add	r5, r0
 8010702:	2104      	movs	r1, #4
 8010704:	4628      	mov	r0, r5
 8010706:	f001 fdf1 	bl	80122ec <ucdr_alignment>
 801070a:	2104      	movs	r1, #4
 801070c:	4408      	add	r0, r1
 801070e:	4405      	add	r5, r0
 8010710:	4628      	mov	r0, r5
 8010712:	f001 fdeb 	bl	80122ec <ucdr_alignment>
 8010716:	3004      	adds	r0, #4
 8010718:	4639      	mov	r1, r7
 801071a:	4405      	add	r5, r0
 801071c:	4628      	mov	r0, r5
 801071e:	f001 fde5 	bl	80122ec <ucdr_alignment>
 8010722:	4420      	add	r0, r4
 8010724:	4428      	add	r0, r5
 8010726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010728 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral>:
 8010728:	4800      	ldr	r0, [pc, #0]	@ (801072c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Lateral+0x4>)
 801072a:	4770      	bx	lr
 801072c:	24000434 	.word	0x24000434

08010730 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>:
 8010730:	b570      	push	{r4, r5, r6, lr}
 8010732:	460c      	mov	r4, r1
 8010734:	4606      	mov	r6, r0
 8010736:	f000 feb3 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 801073a:	4605      	mov	r5, r0
 801073c:	f106 0008 	add.w	r0, r6, #8
 8010740:	4425      	add	r5, r4
 8010742:	f1c4 0401 	rsb	r4, r4, #1
 8010746:	4629      	mov	r1, r5
 8010748:	f000 feaa 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 801074c:	4405      	add	r5, r0
 801074e:	2104      	movs	r1, #4
 8010750:	4628      	mov	r0, r5
 8010752:	f001 fdcb 	bl	80122ec <ucdr_alignment>
 8010756:	2104      	movs	r1, #4
 8010758:	4408      	add	r0, r1
 801075a:	4405      	add	r5, r0
 801075c:	4628      	mov	r0, r5
 801075e:	f001 fdc5 	bl	80122ec <ucdr_alignment>
 8010762:	2104      	movs	r1, #4
 8010764:	4408      	add	r0, r1
 8010766:	1946      	adds	r6, r0, r5
 8010768:	4630      	mov	r0, r6
 801076a:	f001 fdbf 	bl	80122ec <ucdr_alignment>
 801076e:	1d05      	adds	r5, r0, #4
 8010770:	2101      	movs	r1, #1
 8010772:	4435      	add	r5, r6
 8010774:	4628      	mov	r0, r5
 8010776:	f001 fdb9 	bl	80122ec <ucdr_alignment>
 801077a:	2101      	movs	r1, #1
 801077c:	4408      	add	r0, r1
 801077e:	4405      	add	r5, r0
 8010780:	4628      	mov	r0, r5
 8010782:	f001 fdb3 	bl	80122ec <ucdr_alignment>
 8010786:	4420      	add	r0, r4
 8010788:	4428      	add	r0, r5
 801078a:	bd70      	pop	{r4, r5, r6, pc}

0801078c <get_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 801078c:	b108      	cbz	r0, 8010792 <get_serialized_size_autoware_control_msgs__msg__Longitudinal+0x6>
 801078e:	f7ff bfcf 	b.w	8010730 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 8010792:	4770      	bx	lr

08010794 <_Longitudinal__get_serialized_size>:
 8010794:	b110      	cbz	r0, 801079c <_Longitudinal__get_serialized_size+0x8>
 8010796:	2100      	movs	r1, #0
 8010798:	f7ff bfca 	b.w	8010730 <get_serialized_size_autoware_control_msgs__msg__Longitudinal.part.0>
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop

080107a0 <_Longitudinal__cdr_deserialize>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	460c      	mov	r4, r1
 80107a4:	b361      	cbz	r1, 8010800 <_Longitudinal__cdr_deserialize+0x60>
 80107a6:	4605      	mov	r5, r0
 80107a8:	f000 fede 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80107ac:	4603      	mov	r3, r0
 80107ae:	4621      	mov	r1, r4
 80107b0:	4628      	mov	r0, r5
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	4798      	blx	r3
 80107b8:	f000 fed6 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80107bc:	4603      	mov	r3, r0
 80107be:	f104 0108 	add.w	r1, r4, #8
 80107c2:	4628      	mov	r0, r5
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	4798      	blx	r3
 80107ca:	f104 0110 	add.w	r1, r4, #16
 80107ce:	4628      	mov	r0, r5
 80107d0:	f001 fb3e 	bl	8011e50 <ucdr_deserialize_float>
 80107d4:	f104 0114 	add.w	r1, r4, #20
 80107d8:	4628      	mov	r0, r5
 80107da:	f001 fb39 	bl	8011e50 <ucdr_deserialize_float>
 80107de:	f104 0118 	add.w	r1, r4, #24
 80107e2:	4628      	mov	r0, r5
 80107e4:	f001 fb34 	bl	8011e50 <ucdr_deserialize_float>
 80107e8:	f104 011c 	add.w	r1, r4, #28
 80107ec:	4628      	mov	r0, r5
 80107ee:	f000 fed5 	bl	801159c <ucdr_deserialize_bool>
 80107f2:	f104 011d 	add.w	r1, r4, #29
 80107f6:	4628      	mov	r0, r5
 80107f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107fc:	f000 bece 	b.w	801159c <ucdr_deserialize_bool>
 8010800:	4608      	mov	r0, r1
 8010802:	bd38      	pop	{r3, r4, r5, pc}

08010804 <_Longitudinal__cdr_serialize>:
 8010804:	b360      	cbz	r0, 8010860 <_Longitudinal__cdr_serialize+0x5c>
 8010806:	b538      	push	{r3, r4, r5, lr}
 8010808:	4604      	mov	r4, r0
 801080a:	460d      	mov	r5, r1
 801080c:	f000 feac 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010810:	4603      	mov	r3, r0
 8010812:	4629      	mov	r1, r5
 8010814:	4620      	mov	r0, r4
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	689b      	ldr	r3, [r3, #8]
 801081a:	4798      	blx	r3
 801081c:	f000 fea4 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010820:	4603      	mov	r3, r0
 8010822:	4629      	mov	r1, r5
 8010824:	f104 0008 	add.w	r0, r4, #8
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	4798      	blx	r3
 801082e:	ed94 0a04 	vldr	s0, [r4, #16]
 8010832:	4628      	mov	r0, r5
 8010834:	f001 fa74 	bl	8011d20 <ucdr_serialize_float>
 8010838:	ed94 0a05 	vldr	s0, [r4, #20]
 801083c:	4628      	mov	r0, r5
 801083e:	f001 fa6f 	bl	8011d20 <ucdr_serialize_float>
 8010842:	ed94 0a06 	vldr	s0, [r4, #24]
 8010846:	4628      	mov	r0, r5
 8010848:	f001 fa6a 	bl	8011d20 <ucdr_serialize_float>
 801084c:	7f21      	ldrb	r1, [r4, #28]
 801084e:	4628      	mov	r0, r5
 8010850:	f000 fe8e 	bl	8011570 <ucdr_serialize_bool>
 8010854:	7f61      	ldrb	r1, [r4, #29]
 8010856:	4628      	mov	r0, r5
 8010858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801085c:	f000 be88 	b.w	8011570 <ucdr_serialize_bool>
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop

08010864 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>:
 8010864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010866:	2701      	movs	r7, #1
 8010868:	460c      	mov	r4, r1
 801086a:	4606      	mov	r6, r0
 801086c:	7007      	strb	r7, [r0, #0]
 801086e:	f000 fe67 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8010872:	4605      	mov	r5, r0
 8010874:	4630      	mov	r0, r6
 8010876:	4425      	add	r5, r4
 8010878:	1b3c      	subs	r4, r7, r4
 801087a:	4629      	mov	r1, r5
 801087c:	f000 fe60 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8010880:	4405      	add	r5, r0
 8010882:	2104      	movs	r1, #4
 8010884:	4628      	mov	r0, r5
 8010886:	f001 fd31 	bl	80122ec <ucdr_alignment>
 801088a:	2104      	movs	r1, #4
 801088c:	4408      	add	r0, r1
 801088e:	4405      	add	r5, r0
 8010890:	4628      	mov	r0, r5
 8010892:	f001 fd2b 	bl	80122ec <ucdr_alignment>
 8010896:	2104      	movs	r1, #4
 8010898:	4408      	add	r0, r1
 801089a:	1946      	adds	r6, r0, r5
 801089c:	4630      	mov	r0, r6
 801089e:	f001 fd25 	bl	80122ec <ucdr_alignment>
 80108a2:	1d05      	adds	r5, r0, #4
 80108a4:	4639      	mov	r1, r7
 80108a6:	4435      	add	r5, r6
 80108a8:	4628      	mov	r0, r5
 80108aa:	f001 fd1f 	bl	80122ec <ucdr_alignment>
 80108ae:	4438      	add	r0, r7
 80108b0:	4639      	mov	r1, r7
 80108b2:	4405      	add	r5, r0
 80108b4:	4628      	mov	r0, r5
 80108b6:	f001 fd19 	bl	80122ec <ucdr_alignment>
 80108ba:	4420      	add	r0, r4
 80108bc:	4428      	add	r0, r5
 80108be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108c0 <_Longitudinal__max_serialized_size>:
 80108c0:	b500      	push	{lr}
 80108c2:	b083      	sub	sp, #12
 80108c4:	2100      	movs	r1, #0
 80108c6:	f10d 0007 	add.w	r0, sp, #7
 80108ca:	f7ff ffcb 	bl	8010864 <max_serialized_size_autoware_control_msgs__msg__Longitudinal>
 80108ce:	b003      	add	sp, #12
 80108d0:	f85d fb04 	ldr.w	pc, [sp], #4

080108d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal>:
 80108d4:	4800      	ldr	r0, [pc, #0]	@ (80108d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_control_msgs__msg__Longitudinal+0x4>)
 80108d6:	4770      	bx	lr
 80108d8:	2400045c 	.word	0x2400045c

080108dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80108dc:	4b04      	ldr	r3, [pc, #16]	@ (80108f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>)
 80108de:	4805      	ldr	r0, [pc, #20]	@ (80108f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x18>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4905      	ldr	r1, [pc, #20]	@ (80108f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>)
 80108e4:	4a05      	ldr	r2, [pc, #20]	@ (80108fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80108e6:	6003      	str	r3, [r0, #0]
 80108e8:	600b      	str	r3, [r1, #0]
 80108ea:	6013      	str	r3, [r2, #0]
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop
 80108f0:	24000e0c 	.word	0x24000e0c
 80108f4:	240004a8 	.word	0x240004a8
 80108f8:	240004b4 	.word	0x240004b4
 80108fc:	2400048c 	.word	0x2400048c

08010900 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010900:	4a02      	ldr	r2, [pc, #8]	@ (801090c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0xc>)
 8010902:	4b03      	ldr	r3, [pc, #12]	@ (8010910 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x10>)
 8010904:	6812      	ldr	r2, [r2, #0]
 8010906:	601a      	str	r2, [r3, #0]
 8010908:	4770      	bx	lr
 801090a:	bf00      	nop
 801090c:	24000e0c 	.word	0x24000e0c
 8010910:	240004c8 	.word	0x240004c8

08010914 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010914:	4a02      	ldr	r2, [pc, #8]	@ (8010920 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0xc>)
 8010916:	4b03      	ldr	r3, [pc, #12]	@ (8010924 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x10>)
 8010918:	6812      	ldr	r2, [r2, #0]
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	24000e0c 	.word	0x24000e0c
 8010924:	240004dc 	.word	0x240004dc

08010928 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010928:	4a02      	ldr	r2, [pc, #8]	@ (8010934 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0xc>)
 801092a:	4b03      	ldr	r3, [pc, #12]	@ (8010938 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x10>)
 801092c:	6812      	ldr	r2, [r2, #0]
 801092e:	601a      	str	r2, [r3, #0]
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	24000e0c 	.word	0x24000e0c
 8010938:	240004f0 	.word	0x240004f0

0801093c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 801093c:	4a02      	ldr	r2, [pc, #8]	@ (8010948 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0xc>)
 801093e:	4b03      	ldr	r3, [pc, #12]	@ (801094c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x10>)
 8010940:	6812      	ldr	r2, [r2, #0]
 8010942:	601a      	str	r2, [r3, #0]
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	24000e0c 	.word	0x24000e0c
 801094c:	24000504 	.word	0x24000504

08010950 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010950:	4a02      	ldr	r2, [pc, #8]	@ (801095c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0xc>)
 8010952:	4b03      	ldr	r3, [pc, #12]	@ (8010960 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x10>)
 8010954:	6812      	ldr	r2, [r2, #0]
 8010956:	601a      	str	r2, [r3, #0]
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop
 801095c:	24000e0c 	.word	0x24000e0c
 8010960:	24000518 	.word	0x24000518

08010964 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8010964:	4a02      	ldr	r2, [pc, #8]	@ (8010970 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0xc>)
 8010966:	4b03      	ldr	r3, [pc, #12]	@ (8010974 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x10>)
 8010968:	6812      	ldr	r2, [r2, #0]
 801096a:	601a      	str	r2, [r3, #0]
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	24000e0c 	.word	0x24000e0c
 8010974:	2400052c 	.word	0x2400052c

08010978 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010978:	4a02      	ldr	r2, [pc, #8]	@ (8010984 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0xc>)
 801097a:	4b03      	ldr	r3, [pc, #12]	@ (8010988 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x10>)
 801097c:	6812      	ldr	r2, [r2, #0]
 801097e:	601a      	str	r2, [r3, #0]
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	24000e0c 	.word	0x24000e0c
 8010988:	24000540 	.word	0x24000540

0801098c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 801098c:	4a02      	ldr	r2, [pc, #8]	@ (8010998 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0xc>)
 801098e:	4b03      	ldr	r3, [pc, #12]	@ (801099c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x10>)
 8010990:	6812      	ldr	r2, [r2, #0]
 8010992:	601a      	str	r2, [r3, #0]
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop
 8010998:	24000e0c 	.word	0x24000e0c
 801099c:	24000554 	.word	0x24000554

080109a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 80109a0:	4a02      	ldr	r2, [pc, #8]	@ (80109ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0xc>)
 80109a2:	4b03      	ldr	r3, [pc, #12]	@ (80109b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x10>)
 80109a4:	6812      	ldr	r2, [r2, #0]
 80109a6:	601a      	str	r2, [r3, #0]
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	24000e0c 	.word	0x24000e0c
 80109b0:	24000568 	.word	0x24000568

080109b4 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_init_function>:
 80109b4:	f002 b92e 	b.w	8012c14 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>

080109b8 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__rosidl_typesupport_introspection_c__ControlModeCommand_Request_fini_function>:
 80109b8:	f002 b93e 	b.w	8012c38 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>

080109bc <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_init_function>:
 80109bc:	f002 b940 	b.w	8012c40 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>

080109c0 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__rosidl_typesupport_introspection_c__ControlModeCommand_Response_fini_function>:
 80109c0:	f002 b942 	b.w	8012c48 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>

080109c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 80109c4:	b508      	push	{r3, lr}
 80109c6:	f000 fd5d 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80109ca:	4b06      	ldr	r3, [pc, #24]	@ (80109e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80109cc:	4906      	ldr	r1, [pc, #24]	@ (80109e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x24>)
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	60c8      	str	r0, [r1, #12]
 80109d2:	b10a      	cbz	r2, 80109d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x14>
 80109d4:	4803      	ldr	r0, [pc, #12]	@ (80109e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80109d6:	bd08      	pop	{r3, pc}
 80109d8:	4a04      	ldr	r2, [pc, #16]	@ (80109ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x28>)
 80109da:	4802      	ldr	r0, [pc, #8]	@ (80109e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x20>)
 80109dc:	6812      	ldr	r2, [r2, #0]
 80109de:	601a      	str	r2, [r3, #0]
 80109e0:	bd08      	pop	{r3, pc}
 80109e2:	bf00      	nop
 80109e4:	240005ec 	.word	0x240005ec
 80109e8:	24000574 	.word	0x24000574
 80109ec:	24000e10 	.word	0x24000e10

080109f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 80109f0:	4b04      	ldr	r3, [pc, #16]	@ (8010a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	b10a      	cbz	r2, 80109fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0xa>
 80109f6:	4803      	ldr	r0, [pc, #12]	@ (8010a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80109f8:	4770      	bx	lr
 80109fa:	4a03      	ldr	r2, [pc, #12]	@ (8010a08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x18>)
 80109fc:	4801      	ldr	r0, [pc, #4]	@ (8010a04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x14>)
 80109fe:	6812      	ldr	r2, [r2, #0]
 8010a00:	601a      	str	r2, [r3, #0]
 8010a02:	4770      	bx	lr
 8010a04:	24000634 	.word	0x24000634
 8010a08:	24000e10 	.word	0x24000e10

08010a0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8010a0c:	4b16      	ldr	r3, [pc, #88]	@ (8010a68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	b510      	push	{r4, lr}
 8010a12:	b132      	cbz	r2, 8010a22 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x16>
 8010a14:	685c      	ldr	r4, [r3, #4]
 8010a16:	68a3      	ldr	r3, [r4, #8]
 8010a18:	b153      	cbz	r3, 8010a30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x24>
 8010a1a:	68e3      	ldr	r3, [r4, #12]
 8010a1c:	b1a3      	cbz	r3, 8010a48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x3c>
 8010a1e:	4812      	ldr	r0, [pc, #72]	@ (8010a68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a20:	bd10      	pop	{r4, pc}
 8010a22:	4a12      	ldr	r2, [pc, #72]	@ (8010a6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a24:	685c      	ldr	r4, [r3, #4]
 8010a26:	6812      	ldr	r2, [r2, #0]
 8010a28:	601a      	str	r2, [r3, #0]
 8010a2a:	68a3      	ldr	r3, [r4, #8]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d1f4      	bne.n	8010a1a <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0xe>
 8010a30:	f000 fd28 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a34:	4b0e      	ldr	r3, [pc, #56]	@ (8010a70 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x64>)
 8010a36:	490f      	ldr	r1, [pc, #60]	@ (8010a74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x68>)
 8010a38:	681a      	ldr	r2, [r3, #0]
 8010a3a:	60c8      	str	r0, [r1, #12]
 8010a3c:	b17a      	cbz	r2, 8010a5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x52>
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	60a3      	str	r3, [r4, #8]
 8010a42:	68e3      	ldr	r3, [r4, #12]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d1ea      	bne.n	8010a1e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x12>
 8010a48:	4b0b      	ldr	r3, [pc, #44]	@ (8010a78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x6c>)
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	b11a      	cbz	r2, 8010a56 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4a>
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	4805      	ldr	r0, [pc, #20]	@ (8010a68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x5c>)
 8010a52:	60e3      	str	r3, [r4, #12]
 8010a54:	bd10      	pop	{r4, pc}
 8010a56:	4a05      	ldr	r2, [pc, #20]	@ (8010a6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a58:	6812      	ldr	r2, [r2, #0]
 8010a5a:	601a      	str	r2, [r3, #0]
 8010a5c:	e7f7      	b.n	8010a4e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x42>
 8010a5e:	4a03      	ldr	r2, [pc, #12]	@ (8010a6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x60>)
 8010a60:	6812      	ldr	r2, [r2, #0]
 8010a62:	601a      	str	r2, [r3, #0]
 8010a64:	e7eb      	b.n	8010a3e <rosidl_typesupport_introspection_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x32>
 8010a66:	bf00      	nop
 8010a68:	24000650 	.word	0x24000650
 8010a6c:	24000e10 	.word	0x24000e10
 8010a70:	240005ec 	.word	0x240005ec
 8010a74:	24000574 	.word	0x24000574
 8010a78:	24000634 	.word	0x24000634

08010a7c <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_init_function>:
 8010a7c:	f002 b8e6 	b.w	8012c4c <autoware_vehicle_msgs__msg__ControlModeReport__init>

08010a80 <autoware_vehicle_msgs__msg__ControlModeReport__rosidl_typesupport_introspection_c__ControlModeReport_fini_function>:
 8010a80:	f002 b8f6 	b.w	8012c70 <autoware_vehicle_msgs__msg__ControlModeReport__fini>

08010a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010a84:	b508      	push	{r3, lr}
 8010a86:	f000 fcfd 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010a8a:	4b06      	ldr	r3, [pc, #24]	@ (8010aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010a8c:	4906      	ldr	r1, [pc, #24]	@ (8010aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x24>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	60c8      	str	r0, [r1, #12]
 8010a92:	b10a      	cbz	r2, 8010a98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x14>
 8010a94:	4803      	ldr	r0, [pc, #12]	@ (8010aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010a96:	bd08      	pop	{r3, pc}
 8010a98:	4a04      	ldr	r2, [pc, #16]	@ (8010aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x28>)
 8010a9a:	4802      	ldr	r0, [pc, #8]	@ (8010aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x20>)
 8010a9c:	6812      	ldr	r2, [r2, #0]
 8010a9e:	601a      	str	r2, [r3, #0]
 8010aa0:	bd08      	pop	{r3, pc}
 8010aa2:	bf00      	nop
 8010aa4:	240006d4 	.word	0x240006d4
 8010aa8:	2400065c 	.word	0x2400065c
 8010aac:	24000e10 	.word	0x24000e10

08010ab0 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_init_function>:
 8010ab0:	f002 b8e2 	b.w	8012c78 <autoware_vehicle_msgs__msg__GearCommand__init>

08010ab4 <autoware_vehicle_msgs__msg__GearCommand__rosidl_typesupport_introspection_c__GearCommand_fini_function>:
 8010ab4:	f002 b8f2 	b.w	8012c9c <autoware_vehicle_msgs__msg__GearCommand__fini>

08010ab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010ab8:	b508      	push	{r3, lr}
 8010aba:	f000 fce3 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010abe:	4b06      	ldr	r3, [pc, #24]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010ac0:	4906      	ldr	r1, [pc, #24]	@ (8010adc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x24>)
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	60c8      	str	r0, [r1, #12]
 8010ac6:	b10a      	cbz	r2, 8010acc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x14>
 8010ac8:	4803      	ldr	r0, [pc, #12]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010aca:	bd08      	pop	{r3, pc}
 8010acc:	4a04      	ldr	r2, [pc, #16]	@ (8010ae0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x28>)
 8010ace:	4802      	ldr	r0, [pc, #8]	@ (8010ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x20>)
 8010ad0:	6812      	ldr	r2, [r2, #0]
 8010ad2:	601a      	str	r2, [r3, #0]
 8010ad4:	bd08      	pop	{r3, pc}
 8010ad6:	bf00      	nop
 8010ad8:	24000758 	.word	0x24000758
 8010adc:	240006e0 	.word	0x240006e0
 8010ae0:	24000e10 	.word	0x24000e10

08010ae4 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_init_function>:
 8010ae4:	f002 b8de 	b.w	8012ca4 <autoware_vehicle_msgs__msg__GearReport__init>

08010ae8 <autoware_vehicle_msgs__msg__GearReport__rosidl_typesupport_introspection_c__GearReport_fini_function>:
 8010ae8:	f002 b8ee 	b.w	8012cc8 <autoware_vehicle_msgs__msg__GearReport__fini>

08010aec <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010aec:	b508      	push	{r3, lr}
 8010aee:	f000 fcc9 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010af2:	4b06      	ldr	r3, [pc, #24]	@ (8010b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010af4:	4906      	ldr	r1, [pc, #24]	@ (8010b10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x24>)
 8010af6:	681a      	ldr	r2, [r3, #0]
 8010af8:	60c8      	str	r0, [r1, #12]
 8010afa:	b10a      	cbz	r2, 8010b00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x14>
 8010afc:	4803      	ldr	r0, [pc, #12]	@ (8010b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010afe:	bd08      	pop	{r3, pc}
 8010b00:	4a04      	ldr	r2, [pc, #16]	@ (8010b14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x28>)
 8010b02:	4802      	ldr	r0, [pc, #8]	@ (8010b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x20>)
 8010b04:	6812      	ldr	r2, [r2, #0]
 8010b06:	601a      	str	r2, [r3, #0]
 8010b08:	bd08      	pop	{r3, pc}
 8010b0a:	bf00      	nop
 8010b0c:	240007dc 	.word	0x240007dc
 8010b10:	24000764 	.word	0x24000764
 8010b14:	24000e10 	.word	0x24000e10

08010b18 <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_init_function>:
 8010b18:	f002 b8da 	b.w	8012cd0 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>

08010b1c <autoware_vehicle_msgs__msg__HazardLightsCommand__rosidl_typesupport_introspection_c__HazardLightsCommand_fini_function>:
 8010b1c:	f002 b8ea 	b.w	8012cf4 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>

08010b20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010b20:	b508      	push	{r3, lr}
 8010b22:	f000 fcaf 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b26:	4b06      	ldr	r3, [pc, #24]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b28:	4906      	ldr	r1, [pc, #24]	@ (8010b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x24>)
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	60c8      	str	r0, [r1, #12]
 8010b2e:	b10a      	cbz	r2, 8010b34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x14>
 8010b30:	4803      	ldr	r0, [pc, #12]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b32:	bd08      	pop	{r3, pc}
 8010b34:	4a04      	ldr	r2, [pc, #16]	@ (8010b48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x28>)
 8010b36:	4802      	ldr	r0, [pc, #8]	@ (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x20>)
 8010b38:	6812      	ldr	r2, [r2, #0]
 8010b3a:	601a      	str	r2, [r3, #0]
 8010b3c:	bd08      	pop	{r3, pc}
 8010b3e:	bf00      	nop
 8010b40:	24000860 	.word	0x24000860
 8010b44:	240007e8 	.word	0x240007e8
 8010b48:	24000e10 	.word	0x24000e10

08010b4c <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_init_function>:
 8010b4c:	f002 b8d6 	b.w	8012cfc <autoware_vehicle_msgs__msg__HazardLightsReport__init>

08010b50 <autoware_vehicle_msgs__msg__HazardLightsReport__rosidl_typesupport_introspection_c__HazardLightsReport_fini_function>:
 8010b50:	f002 b8e6 	b.w	8012d20 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>

08010b54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8010b54:	b508      	push	{r3, lr}
 8010b56:	f000 fc95 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b5a:	4b06      	ldr	r3, [pc, #24]	@ (8010b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010b5c:	4906      	ldr	r1, [pc, #24]	@ (8010b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x24>)
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	60c8      	str	r0, [r1, #12]
 8010b62:	b10a      	cbz	r2, 8010b68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x14>
 8010b64:	4803      	ldr	r0, [pc, #12]	@ (8010b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010b66:	bd08      	pop	{r3, pc}
 8010b68:	4a04      	ldr	r2, [pc, #16]	@ (8010b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x28>)
 8010b6a:	4802      	ldr	r0, [pc, #8]	@ (8010b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x20>)
 8010b6c:	6812      	ldr	r2, [r2, #0]
 8010b6e:	601a      	str	r2, [r3, #0]
 8010b70:	bd08      	pop	{r3, pc}
 8010b72:	bf00      	nop
 8010b74:	240008e4 	.word	0x240008e4
 8010b78:	2400086c 	.word	0x2400086c
 8010b7c:	24000e10 	.word	0x24000e10

08010b80 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_init_function>:
 8010b80:	f002 b8d2 	b.w	8012d28 <autoware_vehicle_msgs__msg__SteeringReport__init>

08010b84 <autoware_vehicle_msgs__msg__SteeringReport__rosidl_typesupport_introspection_c__SteeringReport_fini_function>:
 8010b84:	f002 b8e2 	b.w	8012d4c <autoware_vehicle_msgs__msg__SteeringReport__fini>

08010b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 8010b88:	b508      	push	{r3, lr}
 8010b8a:	f000 fc7b 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b8e:	4b06      	ldr	r3, [pc, #24]	@ (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010b90:	4906      	ldr	r1, [pc, #24]	@ (8010bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x24>)
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	60c8      	str	r0, [r1, #12]
 8010b96:	b10a      	cbz	r2, 8010b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x14>
 8010b98:	4803      	ldr	r0, [pc, #12]	@ (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010b9a:	bd08      	pop	{r3, pc}
 8010b9c:	4a04      	ldr	r2, [pc, #16]	@ (8010bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x28>)
 8010b9e:	4802      	ldr	r0, [pc, #8]	@ (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x20>)
 8010ba0:	6812      	ldr	r2, [r2, #0]
 8010ba2:	601a      	str	r2, [r3, #0]
 8010ba4:	bd08      	pop	{r3, pc}
 8010ba6:	bf00      	nop
 8010ba8:	24000968 	.word	0x24000968
 8010bac:	240008f0 	.word	0x240008f0
 8010bb0:	24000e10 	.word	0x24000e10

08010bb4 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_init_function>:
 8010bb4:	f002 b8ce 	b.w	8012d54 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>

08010bb8 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__rosidl_typesupport_introspection_c__TurnIndicatorsCommand_fini_function>:
 8010bb8:	f002 b8de 	b.w	8012d78 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>

08010bbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 8010bbc:	b508      	push	{r3, lr}
 8010bbe:	f000 fc61 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010bc2:	4b06      	ldr	r3, [pc, #24]	@ (8010bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010bc4:	4906      	ldr	r1, [pc, #24]	@ (8010be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x24>)
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	60c8      	str	r0, [r1, #12]
 8010bca:	b10a      	cbz	r2, 8010bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x14>
 8010bcc:	4803      	ldr	r0, [pc, #12]	@ (8010bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010bce:	bd08      	pop	{r3, pc}
 8010bd0:	4a04      	ldr	r2, [pc, #16]	@ (8010be4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x28>)
 8010bd2:	4802      	ldr	r0, [pc, #8]	@ (8010bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x20>)
 8010bd4:	6812      	ldr	r2, [r2, #0]
 8010bd6:	601a      	str	r2, [r3, #0]
 8010bd8:	bd08      	pop	{r3, pc}
 8010bda:	bf00      	nop
 8010bdc:	240009ec 	.word	0x240009ec
 8010be0:	24000974 	.word	0x24000974
 8010be4:	24000e10 	.word	0x24000e10

08010be8 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_init_function>:
 8010be8:	f002 b8ca 	b.w	8012d80 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>

08010bec <autoware_vehicle_msgs__msg__TurnIndicatorsReport__rosidl_typesupport_introspection_c__TurnIndicatorsReport_fini_function>:
 8010bec:	f002 b8da 	b.w	8012da4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>

08010bf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8010bf0:	b508      	push	{r3, lr}
 8010bf2:	f000 fc47 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010bf6:	4b06      	ldr	r3, [pc, #24]	@ (8010c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010bf8:	4906      	ldr	r1, [pc, #24]	@ (8010c14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x24>)
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	60c8      	str	r0, [r1, #12]
 8010bfe:	b10a      	cbz	r2, 8010c04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x14>
 8010c00:	4803      	ldr	r0, [pc, #12]	@ (8010c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c02:	bd08      	pop	{r3, pc}
 8010c04:	4a04      	ldr	r2, [pc, #16]	@ (8010c18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x28>)
 8010c06:	4802      	ldr	r0, [pc, #8]	@ (8010c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x20>)
 8010c08:	6812      	ldr	r2, [r2, #0]
 8010c0a:	601a      	str	r2, [r3, #0]
 8010c0c:	bd08      	pop	{r3, pc}
 8010c0e:	bf00      	nop
 8010c10:	24000a70 	.word	0x24000a70
 8010c14:	240009f8 	.word	0x240009f8
 8010c18:	24000e10 	.word	0x24000e10

08010c1c <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_init_function>:
 8010c1c:	f002 b8c6 	b.w	8012dac <autoware_vehicle_msgs__msg__VelocityReport__init>

08010c20 <autoware_vehicle_msgs__msg__VelocityReport__rosidl_typesupport_introspection_c__VelocityReport_fini_function>:
 8010c20:	f002 b8d6 	b.w	8012dd0 <autoware_vehicle_msgs__msg__VelocityReport__fini>

08010c24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8010c24:	b508      	push	{r3, lr}
 8010c26:	f001 fc57 	bl	80124d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010c2a:	4b06      	ldr	r3, [pc, #24]	@ (8010c44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c2c:	4906      	ldr	r1, [pc, #24]	@ (8010c48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x24>)
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	60c8      	str	r0, [r1, #12]
 8010c32:	b10a      	cbz	r2, 8010c38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x14>
 8010c34:	4803      	ldr	r0, [pc, #12]	@ (8010c44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c36:	bd08      	pop	{r3, pc}
 8010c38:	4a04      	ldr	r2, [pc, #16]	@ (8010c4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x28>)
 8010c3a:	4802      	ldr	r0, [pc, #8]	@ (8010c44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x20>)
 8010c3c:	6812      	ldr	r2, [r2, #0]
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	bd08      	pop	{r3, pc}
 8010c42:	bf00      	nop
 8010c44:	24000b6c 	.word	0x24000b6c
 8010c48:	24000a7c 	.word	0x24000a7c
 8010c4c:	24000e10 	.word	0x24000e10

08010c50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010c50:	4800      	ldr	r0, [pc, #0]	@ (8010c54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x4>)
 8010c52:	4770      	bx	lr
 8010c54:	24000b94 	.word	0x24000b94

08010c58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010c58:	4800      	ldr	r0, [pc, #0]	@ (8010c5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x4>)
 8010c5a:	4770      	bx	lr
 8010c5c:	24000ba0 	.word	0x24000ba0

08010c60 <_ControlModeCommand_Response__max_serialized_size>:
 8010c60:	2101      	movs	r1, #1
 8010c62:	2000      	movs	r0, #0
 8010c64:	b508      	push	{r3, lr}
 8010c66:	f001 fb41 	bl	80122ec <ucdr_alignment>
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	bd08      	pop	{r3, pc}
 8010c6e:	bf00      	nop

08010c70 <_ControlModeCommand_Response__cdr_deserialize>:
 8010c70:	b109      	cbz	r1, 8010c76 <_ControlModeCommand_Response__cdr_deserialize+0x6>
 8010c72:	f000 bc93 	b.w	801159c <ucdr_deserialize_bool>
 8010c76:	4608      	mov	r0, r1
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop

08010c7c <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	b158      	cbz	r0, 8010c98 <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Request+0x1c>
 8010c80:	460d      	mov	r5, r1
 8010c82:	f000 fc0d 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010c86:	2101      	movs	r1, #1
 8010c88:	182c      	adds	r4, r5, r0
 8010c8a:	f1c5 0501 	rsb	r5, r5, #1
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f001 fb2c 	bl	80122ec <ucdr_alignment>
 8010c94:	4428      	add	r0, r5
 8010c96:	4420      	add	r0, r4
 8010c98:	bd38      	pop	{r3, r4, r5, pc}
 8010c9a:	bf00      	nop

08010c9c <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response>:
 8010c9c:	b138      	cbz	r0, 8010cae <get_serialized_size_autoware_vehicle_msgs__srv__ControlModeCommand_Response+0x12>
 8010c9e:	b508      	push	{r3, lr}
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	2101      	movs	r1, #1
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f001 fb21 	bl	80122ec <ucdr_alignment>
 8010caa:	3001      	adds	r0, #1
 8010cac:	bd08      	pop	{r3, pc}
 8010cae:	4770      	bx	lr

08010cb0 <_ControlModeCommand_Request__cdr_deserialize>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	460c      	mov	r4, r1
 8010cb4:	b179      	cbz	r1, 8010cd6 <_ControlModeCommand_Request__cdr_deserialize+0x26>
 8010cb6:	4605      	mov	r5, r0
 8010cb8:	f000 fc56 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	4798      	blx	r3
 8010cc8:	f104 0108 	add.w	r1, r4, #8
 8010ccc:	4628      	mov	r0, r5
 8010cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cd2:	f000 bc91 	b.w	80115f8 <ucdr_deserialize_uint8_t>
 8010cd6:	4608      	mov	r0, r1
 8010cd8:	bd38      	pop	{r3, r4, r5, pc}
 8010cda:	bf00      	nop

08010cdc <_ControlModeCommand_Request__cdr_serialize>:
 8010cdc:	b180      	cbz	r0, 8010d00 <_ControlModeCommand_Request__cdr_serialize+0x24>
 8010cde:	b538      	push	{r3, r4, r5, lr}
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	460d      	mov	r5, r1
 8010ce4:	f000 fc40 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	4629      	mov	r1, r5
 8010cec:	4620      	mov	r0, r4
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	689b      	ldr	r3, [r3, #8]
 8010cf2:	4798      	blx	r3
 8010cf4:	7a21      	ldrb	r1, [r4, #8]
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cfc:	f000 bc66 	b.w	80115cc <ucdr_serialize_uint8_t>
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop

08010d04 <_ControlModeCommand_Response__cdr_serialize>:
 8010d04:	460a      	mov	r2, r1
 8010d06:	b118      	cbz	r0, 8010d10 <_ControlModeCommand_Response__cdr_serialize+0xc>
 8010d08:	7801      	ldrb	r1, [r0, #0]
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	f000 bc30 	b.w	8011570 <ucdr_serialize_bool>
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop

08010d14 <_ControlModeCommand_Response__get_serialized_size>:
 8010d14:	b130      	cbz	r0, 8010d24 <_ControlModeCommand_Response__get_serialized_size+0x10>
 8010d16:	2101      	movs	r1, #1
 8010d18:	2000      	movs	r0, #0
 8010d1a:	b508      	push	{r3, lr}
 8010d1c:	f001 fae6 	bl	80122ec <ucdr_alignment>
 8010d20:	3001      	adds	r0, #1
 8010d22:	bd08      	pop	{r3, pc}
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop

08010d28 <_ControlModeCommand_Request__get_serialized_size>:
 8010d28:	b150      	cbz	r0, 8010d40 <_ControlModeCommand_Request__get_serialized_size+0x18>
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	b510      	push	{r4, lr}
 8010d2e:	f000 fbb7 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d32:	4604      	mov	r4, r0
 8010d34:	2101      	movs	r1, #1
 8010d36:	f001 fad9 	bl	80122ec <ucdr_alignment>
 8010d3a:	4420      	add	r0, r4
 8010d3c:	3001      	adds	r0, #1
 8010d3e:	bd10      	pop	{r4, pc}
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop

08010d44 <_ControlModeCommand_Request__max_serialized_size>:
 8010d44:	b510      	push	{r4, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	2401      	movs	r4, #1
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	f10d 0007 	add.w	r0, sp, #7
 8010d50:	f88d 4007 	strb.w	r4, [sp, #7]
 8010d54:	f000 fbf4 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8010d58:	4621      	mov	r1, r4
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	f001 fac6 	bl	80122ec <ucdr_alignment>
 8010d60:	4420      	add	r0, r4
 8010d62:	3001      	adds	r0, #1
 8010d64:	b002      	add	sp, #8
 8010d66:	bd10      	pop	{r4, pc}

08010d68 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand>:
 8010d68:	4800      	ldr	r0, [pc, #0]	@ (8010d6c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__autoware_vehicle_msgs__srv__ControlModeCommand+0x4>)
 8010d6a:	4770      	bx	lr
 8010d6c:	24000b88 	.word	0x24000b88

08010d70 <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	b158      	cbz	r0, 8010d8c <get_serialized_size_autoware_vehicle_msgs__msg__ControlModeReport+0x1c>
 8010d74:	460d      	mov	r5, r1
 8010d76:	f000 fb93 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	182c      	adds	r4, r5, r0
 8010d7e:	f1c5 0501 	rsb	r5, r5, #1
 8010d82:	4620      	mov	r0, r4
 8010d84:	f001 fab2 	bl	80122ec <ucdr_alignment>
 8010d88:	4428      	add	r0, r5
 8010d8a:	4420      	add	r0, r4
 8010d8c:	bd38      	pop	{r3, r4, r5, pc}
 8010d8e:	bf00      	nop

08010d90 <_ControlModeReport__cdr_deserialize>:
 8010d90:	b538      	push	{r3, r4, r5, lr}
 8010d92:	460c      	mov	r4, r1
 8010d94:	b179      	cbz	r1, 8010db6 <_ControlModeReport__cdr_deserialize+0x26>
 8010d96:	4605      	mov	r5, r0
 8010d98:	f000 fbe6 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	4621      	mov	r1, r4
 8010da0:	4628      	mov	r0, r5
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	4798      	blx	r3
 8010da8:	f104 0108 	add.w	r1, r4, #8
 8010dac:	4628      	mov	r0, r5
 8010dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010db2:	f000 bc21 	b.w	80115f8 <ucdr_deserialize_uint8_t>
 8010db6:	4608      	mov	r0, r1
 8010db8:	bd38      	pop	{r3, r4, r5, pc}
 8010dba:	bf00      	nop

08010dbc <_ControlModeReport__cdr_serialize>:
 8010dbc:	b180      	cbz	r0, 8010de0 <_ControlModeReport__cdr_serialize+0x24>
 8010dbe:	b538      	push	{r3, r4, r5, lr}
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	460d      	mov	r5, r1
 8010dc4:	f000 fbd0 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	4629      	mov	r1, r5
 8010dcc:	4620      	mov	r0, r4
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	689b      	ldr	r3, [r3, #8]
 8010dd2:	4798      	blx	r3
 8010dd4:	7a21      	ldrb	r1, [r4, #8]
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ddc:	f000 bbf6 	b.w	80115cc <ucdr_serialize_uint8_t>
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop

08010de4 <_ControlModeReport__get_serialized_size>:
 8010de4:	b150      	cbz	r0, 8010dfc <_ControlModeReport__get_serialized_size+0x18>
 8010de6:	2100      	movs	r1, #0
 8010de8:	b510      	push	{r4, lr}
 8010dea:	f000 fb59 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010dee:	4604      	mov	r4, r0
 8010df0:	2101      	movs	r1, #1
 8010df2:	f001 fa7b 	bl	80122ec <ucdr_alignment>
 8010df6:	4420      	add	r0, r4
 8010df8:	3001      	adds	r0, #1
 8010dfa:	bd10      	pop	{r4, pc}
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop

08010e00 <_ControlModeReport__max_serialized_size>:
 8010e00:	b510      	push	{r4, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	2401      	movs	r4, #1
 8010e06:	2100      	movs	r1, #0
 8010e08:	f10d 0007 	add.w	r0, sp, #7
 8010e0c:	f88d 4007 	strb.w	r4, [sp, #7]
 8010e10:	f000 fb96 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8010e14:	4621      	mov	r1, r4
 8010e16:	4604      	mov	r4, r0
 8010e18:	f001 fa68 	bl	80122ec <ucdr_alignment>
 8010e1c:	4420      	add	r0, r4
 8010e1e:	3001      	adds	r0, #1
 8010e20:	b002      	add	sp, #8
 8010e22:	bd10      	pop	{r4, pc}

08010e24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport>:
 8010e24:	4800      	ldr	r0, [pc, #0]	@ (8010e28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__ControlModeReport+0x4>)
 8010e26:	4770      	bx	lr
 8010e28:	24000be4 	.word	0x24000be4

08010e2c <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand>:
 8010e2c:	b538      	push	{r3, r4, r5, lr}
 8010e2e:	b158      	cbz	r0, 8010e48 <get_serialized_size_autoware_vehicle_msgs__msg__GearCommand+0x1c>
 8010e30:	460d      	mov	r5, r1
 8010e32:	f000 fb35 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010e36:	2101      	movs	r1, #1
 8010e38:	182c      	adds	r4, r5, r0
 8010e3a:	f1c5 0501 	rsb	r5, r5, #1
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f001 fa54 	bl	80122ec <ucdr_alignment>
 8010e44:	4428      	add	r0, r5
 8010e46:	4420      	add	r0, r4
 8010e48:	bd38      	pop	{r3, r4, r5, pc}
 8010e4a:	bf00      	nop

08010e4c <_GearCommand__cdr_deserialize>:
 8010e4c:	b538      	push	{r3, r4, r5, lr}
 8010e4e:	460c      	mov	r4, r1
 8010e50:	b179      	cbz	r1, 8010e72 <_GearCommand__cdr_deserialize+0x26>
 8010e52:	4605      	mov	r5, r0
 8010e54:	f000 fb88 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	4798      	blx	r3
 8010e64:	f104 0108 	add.w	r1, r4, #8
 8010e68:	4628      	mov	r0, r5
 8010e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e6e:	f000 bbc3 	b.w	80115f8 <ucdr_deserialize_uint8_t>
 8010e72:	4608      	mov	r0, r1
 8010e74:	bd38      	pop	{r3, r4, r5, pc}
 8010e76:	bf00      	nop

08010e78 <_GearCommand__cdr_serialize>:
 8010e78:	b180      	cbz	r0, 8010e9c <_GearCommand__cdr_serialize+0x24>
 8010e7a:	b538      	push	{r3, r4, r5, lr}
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	460d      	mov	r5, r1
 8010e80:	f000 fb72 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010e84:	4603      	mov	r3, r0
 8010e86:	4629      	mov	r1, r5
 8010e88:	4620      	mov	r0, r4
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	689b      	ldr	r3, [r3, #8]
 8010e8e:	4798      	blx	r3
 8010e90:	7a21      	ldrb	r1, [r4, #8]
 8010e92:	4628      	mov	r0, r5
 8010e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e98:	f000 bb98 	b.w	80115cc <ucdr_serialize_uint8_t>
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop

08010ea0 <_GearCommand__get_serialized_size>:
 8010ea0:	b150      	cbz	r0, 8010eb8 <_GearCommand__get_serialized_size+0x18>
 8010ea2:	2100      	movs	r1, #0
 8010ea4:	b510      	push	{r4, lr}
 8010ea6:	f000 fafb 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010eaa:	4604      	mov	r4, r0
 8010eac:	2101      	movs	r1, #1
 8010eae:	f001 fa1d 	bl	80122ec <ucdr_alignment>
 8010eb2:	4420      	add	r0, r4
 8010eb4:	3001      	adds	r0, #1
 8010eb6:	bd10      	pop	{r4, pc}
 8010eb8:	4770      	bx	lr
 8010eba:	bf00      	nop

08010ebc <_GearCommand__max_serialized_size>:
 8010ebc:	b510      	push	{r4, lr}
 8010ebe:	b082      	sub	sp, #8
 8010ec0:	2401      	movs	r4, #1
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	f10d 0007 	add.w	r0, sp, #7
 8010ec8:	f88d 4007 	strb.w	r4, [sp, #7]
 8010ecc:	f000 fb38 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8010ed0:	4621      	mov	r1, r4
 8010ed2:	4604      	mov	r4, r0
 8010ed4:	f001 fa0a 	bl	80122ec <ucdr_alignment>
 8010ed8:	4420      	add	r0, r4
 8010eda:	3001      	adds	r0, #1
 8010edc:	b002      	add	sp, #8
 8010ede:	bd10      	pop	{r4, pc}

08010ee0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand>:
 8010ee0:	4800      	ldr	r0, [pc, #0]	@ (8010ee4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearCommand+0x4>)
 8010ee2:	4770      	bx	lr
 8010ee4:	24000c0c 	.word	0x24000c0c

08010ee8 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport>:
 8010ee8:	b538      	push	{r3, r4, r5, lr}
 8010eea:	b158      	cbz	r0, 8010f04 <get_serialized_size_autoware_vehicle_msgs__msg__GearReport+0x1c>
 8010eec:	460d      	mov	r5, r1
 8010eee:	f000 fad7 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010ef2:	2101      	movs	r1, #1
 8010ef4:	182c      	adds	r4, r5, r0
 8010ef6:	f1c5 0501 	rsb	r5, r5, #1
 8010efa:	4620      	mov	r0, r4
 8010efc:	f001 f9f6 	bl	80122ec <ucdr_alignment>
 8010f00:	4428      	add	r0, r5
 8010f02:	4420      	add	r0, r4
 8010f04:	bd38      	pop	{r3, r4, r5, pc}
 8010f06:	bf00      	nop

08010f08 <_GearReport__cdr_deserialize>:
 8010f08:	b538      	push	{r3, r4, r5, lr}
 8010f0a:	460c      	mov	r4, r1
 8010f0c:	b179      	cbz	r1, 8010f2e <_GearReport__cdr_deserialize+0x26>
 8010f0e:	4605      	mov	r5, r0
 8010f10:	f000 fb2a 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f14:	4603      	mov	r3, r0
 8010f16:	4621      	mov	r1, r4
 8010f18:	4628      	mov	r0, r5
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	68db      	ldr	r3, [r3, #12]
 8010f1e:	4798      	blx	r3
 8010f20:	f104 0108 	add.w	r1, r4, #8
 8010f24:	4628      	mov	r0, r5
 8010f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f2a:	f000 bb65 	b.w	80115f8 <ucdr_deserialize_uint8_t>
 8010f2e:	4608      	mov	r0, r1
 8010f30:	bd38      	pop	{r3, r4, r5, pc}
 8010f32:	bf00      	nop

08010f34 <_GearReport__cdr_serialize>:
 8010f34:	b180      	cbz	r0, 8010f58 <_GearReport__cdr_serialize+0x24>
 8010f36:	b538      	push	{r3, r4, r5, lr}
 8010f38:	4604      	mov	r4, r0
 8010f3a:	460d      	mov	r5, r1
 8010f3c:	f000 fb14 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010f40:	4603      	mov	r3, r0
 8010f42:	4629      	mov	r1, r5
 8010f44:	4620      	mov	r0, r4
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	689b      	ldr	r3, [r3, #8]
 8010f4a:	4798      	blx	r3
 8010f4c:	7a21      	ldrb	r1, [r4, #8]
 8010f4e:	4628      	mov	r0, r5
 8010f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f54:	f000 bb3a 	b.w	80115cc <ucdr_serialize_uint8_t>
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop

08010f5c <_GearReport__get_serialized_size>:
 8010f5c:	b150      	cbz	r0, 8010f74 <_GearReport__get_serialized_size+0x18>
 8010f5e:	2100      	movs	r1, #0
 8010f60:	b510      	push	{r4, lr}
 8010f62:	f000 fa9d 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010f66:	4604      	mov	r4, r0
 8010f68:	2101      	movs	r1, #1
 8010f6a:	f001 f9bf 	bl	80122ec <ucdr_alignment>
 8010f6e:	4420      	add	r0, r4
 8010f70:	3001      	adds	r0, #1
 8010f72:	bd10      	pop	{r4, pc}
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop

08010f78 <_GearReport__max_serialized_size>:
 8010f78:	b510      	push	{r4, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	2401      	movs	r4, #1
 8010f7e:	2100      	movs	r1, #0
 8010f80:	f10d 0007 	add.w	r0, sp, #7
 8010f84:	f88d 4007 	strb.w	r4, [sp, #7]
 8010f88:	f000 fada 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8010f8c:	4621      	mov	r1, r4
 8010f8e:	4604      	mov	r4, r0
 8010f90:	f001 f9ac 	bl	80122ec <ucdr_alignment>
 8010f94:	4420      	add	r0, r4
 8010f96:	3001      	adds	r0, #1
 8010f98:	b002      	add	sp, #8
 8010f9a:	bd10      	pop	{r4, pc}

08010f9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport>:
 8010f9c:	4800      	ldr	r0, [pc, #0]	@ (8010fa0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__GearReport+0x4>)
 8010f9e:	4770      	bx	lr
 8010fa0:	24000c34 	.word	0x24000c34

08010fa4 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	b158      	cbz	r0, 8010fc0 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsCommand+0x1c>
 8010fa8:	460d      	mov	r5, r1
 8010faa:	f000 fa79 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8010fae:	2101      	movs	r1, #1
 8010fb0:	182c      	adds	r4, r5, r0
 8010fb2:	f1c5 0501 	rsb	r5, r5, #1
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f001 f998 	bl	80122ec <ucdr_alignment>
 8010fbc:	4428      	add	r0, r5
 8010fbe:	4420      	add	r0, r4
 8010fc0:	bd38      	pop	{r3, r4, r5, pc}
 8010fc2:	bf00      	nop

08010fc4 <_HazardLightsCommand__cdr_deserialize>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	460c      	mov	r4, r1
 8010fc8:	b179      	cbz	r1, 8010fea <_HazardLightsCommand__cdr_deserialize+0x26>
 8010fca:	4605      	mov	r5, r0
 8010fcc:	f000 facc 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	4621      	mov	r1, r4
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	4798      	blx	r3
 8010fdc:	f104 0108 	add.w	r1, r4, #8
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fe6:	f000 bb07 	b.w	80115f8 <ucdr_deserialize_uint8_t>
 8010fea:	4608      	mov	r0, r1
 8010fec:	bd38      	pop	{r3, r4, r5, pc}
 8010fee:	bf00      	nop

08010ff0 <_HazardLightsCommand__cdr_serialize>:
 8010ff0:	b180      	cbz	r0, 8011014 <_HazardLightsCommand__cdr_serialize+0x24>
 8010ff2:	b538      	push	{r3, r4, r5, lr}
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	460d      	mov	r5, r1
 8010ff8:	f000 fab6 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	4629      	mov	r1, r5
 8011000:	4620      	mov	r0, r4
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	4798      	blx	r3
 8011008:	7a21      	ldrb	r1, [r4, #8]
 801100a:	4628      	mov	r0, r5
 801100c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011010:	f000 badc 	b.w	80115cc <ucdr_serialize_uint8_t>
 8011014:	4770      	bx	lr
 8011016:	bf00      	nop

08011018 <_HazardLightsCommand__get_serialized_size>:
 8011018:	b150      	cbz	r0, 8011030 <_HazardLightsCommand__get_serialized_size+0x18>
 801101a:	2100      	movs	r1, #0
 801101c:	b510      	push	{r4, lr}
 801101e:	f000 fa3f 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011022:	4604      	mov	r4, r0
 8011024:	2101      	movs	r1, #1
 8011026:	f001 f961 	bl	80122ec <ucdr_alignment>
 801102a:	4420      	add	r0, r4
 801102c:	3001      	adds	r0, #1
 801102e:	bd10      	pop	{r4, pc}
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop

08011034 <_HazardLightsCommand__max_serialized_size>:
 8011034:	b510      	push	{r4, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	2401      	movs	r4, #1
 801103a:	2100      	movs	r1, #0
 801103c:	f10d 0007 	add.w	r0, sp, #7
 8011040:	f88d 4007 	strb.w	r4, [sp, #7]
 8011044:	f000 fa7c 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8011048:	4621      	mov	r1, r4
 801104a:	4604      	mov	r4, r0
 801104c:	f001 f94e 	bl	80122ec <ucdr_alignment>
 8011050:	4420      	add	r0, r4
 8011052:	3001      	adds	r0, #1
 8011054:	b002      	add	sp, #8
 8011056:	bd10      	pop	{r4, pc}

08011058 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand>:
 8011058:	4800      	ldr	r0, [pc, #0]	@ (801105c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsCommand+0x4>)
 801105a:	4770      	bx	lr
 801105c:	24000c5c 	.word	0x24000c5c

08011060 <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	b158      	cbz	r0, 801107c <get_serialized_size_autoware_vehicle_msgs__msg__HazardLightsReport+0x1c>
 8011064:	460d      	mov	r5, r1
 8011066:	f000 fa1b 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 801106a:	2101      	movs	r1, #1
 801106c:	182c      	adds	r4, r5, r0
 801106e:	f1c5 0501 	rsb	r5, r5, #1
 8011072:	4620      	mov	r0, r4
 8011074:	f001 f93a 	bl	80122ec <ucdr_alignment>
 8011078:	4428      	add	r0, r5
 801107a:	4420      	add	r0, r4
 801107c:	bd38      	pop	{r3, r4, r5, pc}
 801107e:	bf00      	nop

08011080 <_HazardLightsReport__cdr_deserialize>:
 8011080:	b538      	push	{r3, r4, r5, lr}
 8011082:	460c      	mov	r4, r1
 8011084:	b179      	cbz	r1, 80110a6 <_HazardLightsReport__cdr_deserialize+0x26>
 8011086:	4605      	mov	r5, r0
 8011088:	f000 fa6e 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801108c:	4603      	mov	r3, r0
 801108e:	4621      	mov	r1, r4
 8011090:	4628      	mov	r0, r5
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	4798      	blx	r3
 8011098:	f104 0108 	add.w	r1, r4, #8
 801109c:	4628      	mov	r0, r5
 801109e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110a2:	f000 baa9 	b.w	80115f8 <ucdr_deserialize_uint8_t>
 80110a6:	4608      	mov	r0, r1
 80110a8:	bd38      	pop	{r3, r4, r5, pc}
 80110aa:	bf00      	nop

080110ac <_HazardLightsReport__cdr_serialize>:
 80110ac:	b180      	cbz	r0, 80110d0 <_HazardLightsReport__cdr_serialize+0x24>
 80110ae:	b538      	push	{r3, r4, r5, lr}
 80110b0:	4604      	mov	r4, r0
 80110b2:	460d      	mov	r5, r1
 80110b4:	f000 fa58 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80110b8:	4603      	mov	r3, r0
 80110ba:	4629      	mov	r1, r5
 80110bc:	4620      	mov	r0, r4
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	4798      	blx	r3
 80110c4:	7a21      	ldrb	r1, [r4, #8]
 80110c6:	4628      	mov	r0, r5
 80110c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110cc:	f000 ba7e 	b.w	80115cc <ucdr_serialize_uint8_t>
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop

080110d4 <_HazardLightsReport__get_serialized_size>:
 80110d4:	b150      	cbz	r0, 80110ec <_HazardLightsReport__get_serialized_size+0x18>
 80110d6:	2100      	movs	r1, #0
 80110d8:	b510      	push	{r4, lr}
 80110da:	f000 f9e1 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 80110de:	4604      	mov	r4, r0
 80110e0:	2101      	movs	r1, #1
 80110e2:	f001 f903 	bl	80122ec <ucdr_alignment>
 80110e6:	4420      	add	r0, r4
 80110e8:	3001      	adds	r0, #1
 80110ea:	bd10      	pop	{r4, pc}
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop

080110f0 <_HazardLightsReport__max_serialized_size>:
 80110f0:	b510      	push	{r4, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	2401      	movs	r4, #1
 80110f6:	2100      	movs	r1, #0
 80110f8:	f10d 0007 	add.w	r0, sp, #7
 80110fc:	f88d 4007 	strb.w	r4, [sp, #7]
 8011100:	f000 fa1e 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8011104:	4621      	mov	r1, r4
 8011106:	4604      	mov	r4, r0
 8011108:	f001 f8f0 	bl	80122ec <ucdr_alignment>
 801110c:	4420      	add	r0, r4
 801110e:	3001      	adds	r0, #1
 8011110:	b002      	add	sp, #8
 8011112:	bd10      	pop	{r4, pc}

08011114 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport>:
 8011114:	4800      	ldr	r0, [pc, #0]	@ (8011118 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__HazardLightsReport+0x4>)
 8011116:	4770      	bx	lr
 8011118:	24000c84 	.word	0x24000c84

0801111c <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport>:
 801111c:	b538      	push	{r3, r4, r5, lr}
 801111e:	b158      	cbz	r0, 8011138 <get_serialized_size_autoware_vehicle_msgs__msg__SteeringReport+0x1c>
 8011120:	460d      	mov	r5, r1
 8011122:	f000 f9bd 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011126:	2104      	movs	r1, #4
 8011128:	182c      	adds	r4, r5, r0
 801112a:	f1c5 0504 	rsb	r5, r5, #4
 801112e:	4620      	mov	r0, r4
 8011130:	f001 f8dc 	bl	80122ec <ucdr_alignment>
 8011134:	4428      	add	r0, r5
 8011136:	4420      	add	r0, r4
 8011138:	bd38      	pop	{r3, r4, r5, pc}
 801113a:	bf00      	nop

0801113c <_SteeringReport__cdr_deserialize>:
 801113c:	b538      	push	{r3, r4, r5, lr}
 801113e:	460c      	mov	r4, r1
 8011140:	b179      	cbz	r1, 8011162 <_SteeringReport__cdr_deserialize+0x26>
 8011142:	4605      	mov	r5, r0
 8011144:	f000 fa10 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011148:	4603      	mov	r3, r0
 801114a:	4621      	mov	r1, r4
 801114c:	4628      	mov	r0, r5
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	4798      	blx	r3
 8011154:	f104 0108 	add.w	r1, r4, #8
 8011158:	4628      	mov	r0, r5
 801115a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801115e:	f000 be77 	b.w	8011e50 <ucdr_deserialize_float>
 8011162:	4608      	mov	r0, r1
 8011164:	bd38      	pop	{r3, r4, r5, pc}
 8011166:	bf00      	nop

08011168 <_SteeringReport__cdr_serialize>:
 8011168:	b188      	cbz	r0, 801118e <_SteeringReport__cdr_serialize+0x26>
 801116a:	b538      	push	{r3, r4, r5, lr}
 801116c:	4604      	mov	r4, r0
 801116e:	460d      	mov	r5, r1
 8011170:	f000 f9fa 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011174:	4603      	mov	r3, r0
 8011176:	4629      	mov	r1, r5
 8011178:	4620      	mov	r0, r4
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	689b      	ldr	r3, [r3, #8]
 801117e:	4798      	blx	r3
 8011180:	ed94 0a02 	vldr	s0, [r4, #8]
 8011184:	4628      	mov	r0, r5
 8011186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801118a:	f000 bdc9 	b.w	8011d20 <ucdr_serialize_float>
 801118e:	4770      	bx	lr

08011190 <_SteeringReport__get_serialized_size>:
 8011190:	b150      	cbz	r0, 80111a8 <_SteeringReport__get_serialized_size+0x18>
 8011192:	2100      	movs	r1, #0
 8011194:	b510      	push	{r4, lr}
 8011196:	f000 f983 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 801119a:	4604      	mov	r4, r0
 801119c:	2104      	movs	r1, #4
 801119e:	f001 f8a5 	bl	80122ec <ucdr_alignment>
 80111a2:	4420      	add	r0, r4
 80111a4:	3004      	adds	r0, #4
 80111a6:	bd10      	pop	{r4, pc}
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop

080111ac <_SteeringReport__max_serialized_size>:
 80111ac:	b510      	push	{r4, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	2301      	movs	r3, #1
 80111b2:	2100      	movs	r1, #0
 80111b4:	f10d 0007 	add.w	r0, sp, #7
 80111b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80111bc:	f000 f9c0 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 80111c0:	4604      	mov	r4, r0
 80111c2:	2104      	movs	r1, #4
 80111c4:	f001 f892 	bl	80122ec <ucdr_alignment>
 80111c8:	4420      	add	r0, r4
 80111ca:	3004      	adds	r0, #4
 80111cc:	b002      	add	sp, #8
 80111ce:	bd10      	pop	{r4, pc}

080111d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport>:
 80111d0:	4800      	ldr	r0, [pc, #0]	@ (80111d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__SteeringReport+0x4>)
 80111d2:	4770      	bx	lr
 80111d4:	24000cac 	.word	0x24000cac

080111d8 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 80111d8:	b538      	push	{r3, r4, r5, lr}
 80111da:	b158      	cbz	r0, 80111f4 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x1c>
 80111dc:	460d      	mov	r5, r1
 80111de:	f000 f95f 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 80111e2:	2101      	movs	r1, #1
 80111e4:	182c      	adds	r4, r5, r0
 80111e6:	f1c5 0501 	rsb	r5, r5, #1
 80111ea:	4620      	mov	r0, r4
 80111ec:	f001 f87e 	bl	80122ec <ucdr_alignment>
 80111f0:	4428      	add	r0, r5
 80111f2:	4420      	add	r0, r4
 80111f4:	bd38      	pop	{r3, r4, r5, pc}
 80111f6:	bf00      	nop

080111f8 <_TurnIndicatorsCommand__cdr_deserialize>:
 80111f8:	b538      	push	{r3, r4, r5, lr}
 80111fa:	460c      	mov	r4, r1
 80111fc:	b179      	cbz	r1, 801121e <_TurnIndicatorsCommand__cdr_deserialize+0x26>
 80111fe:	4605      	mov	r5, r0
 8011200:	f000 f9b2 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011204:	4603      	mov	r3, r0
 8011206:	4621      	mov	r1, r4
 8011208:	4628      	mov	r0, r5
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	4798      	blx	r3
 8011210:	f104 0108 	add.w	r1, r4, #8
 8011214:	4628      	mov	r0, r5
 8011216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801121a:	f000 b9ed 	b.w	80115f8 <ucdr_deserialize_uint8_t>
 801121e:	4608      	mov	r0, r1
 8011220:	bd38      	pop	{r3, r4, r5, pc}
 8011222:	bf00      	nop

08011224 <_TurnIndicatorsCommand__cdr_serialize>:
 8011224:	b180      	cbz	r0, 8011248 <_TurnIndicatorsCommand__cdr_serialize+0x24>
 8011226:	b538      	push	{r3, r4, r5, lr}
 8011228:	4604      	mov	r4, r0
 801122a:	460d      	mov	r5, r1
 801122c:	f000 f99c 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011230:	4603      	mov	r3, r0
 8011232:	4629      	mov	r1, r5
 8011234:	4620      	mov	r0, r4
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	689b      	ldr	r3, [r3, #8]
 801123a:	4798      	blx	r3
 801123c:	7a21      	ldrb	r1, [r4, #8]
 801123e:	4628      	mov	r0, r5
 8011240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011244:	f000 b9c2 	b.w	80115cc <ucdr_serialize_uint8_t>
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop

0801124c <_TurnIndicatorsCommand__get_serialized_size>:
 801124c:	b150      	cbz	r0, 8011264 <_TurnIndicatorsCommand__get_serialized_size+0x18>
 801124e:	2100      	movs	r1, #0
 8011250:	b510      	push	{r4, lr}
 8011252:	f000 f925 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011256:	4604      	mov	r4, r0
 8011258:	2101      	movs	r1, #1
 801125a:	f001 f847 	bl	80122ec <ucdr_alignment>
 801125e:	4420      	add	r0, r4
 8011260:	3001      	adds	r0, #1
 8011262:	bd10      	pop	{r4, pc}
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop

08011268 <_TurnIndicatorsCommand__max_serialized_size>:
 8011268:	b510      	push	{r4, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	2401      	movs	r4, #1
 801126e:	2100      	movs	r1, #0
 8011270:	f10d 0007 	add.w	r0, sp, #7
 8011274:	f88d 4007 	strb.w	r4, [sp, #7]
 8011278:	f000 f962 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 801127c:	4621      	mov	r1, r4
 801127e:	4604      	mov	r4, r0
 8011280:	f001 f834 	bl	80122ec <ucdr_alignment>
 8011284:	4420      	add	r0, r4
 8011286:	3001      	adds	r0, #1
 8011288:	b002      	add	sp, #8
 801128a:	bd10      	pop	{r4, pc}

0801128c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand>:
 801128c:	4800      	ldr	r0, [pc, #0]	@ (8011290 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsCommand+0x4>)
 801128e:	4770      	bx	lr
 8011290:	24000cd4 	.word	0x24000cd4

08011294 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011294:	b538      	push	{r3, r4, r5, lr}
 8011296:	b158      	cbz	r0, 80112b0 <get_serialized_size_autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x1c>
 8011298:	460d      	mov	r5, r1
 801129a:	f000 f901 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 801129e:	2101      	movs	r1, #1
 80112a0:	182c      	adds	r4, r5, r0
 80112a2:	f1c5 0501 	rsb	r5, r5, #1
 80112a6:	4620      	mov	r0, r4
 80112a8:	f001 f820 	bl	80122ec <ucdr_alignment>
 80112ac:	4428      	add	r0, r5
 80112ae:	4420      	add	r0, r4
 80112b0:	bd38      	pop	{r3, r4, r5, pc}
 80112b2:	bf00      	nop

080112b4 <_TurnIndicatorsReport__cdr_deserialize>:
 80112b4:	b538      	push	{r3, r4, r5, lr}
 80112b6:	460c      	mov	r4, r1
 80112b8:	b179      	cbz	r1, 80112da <_TurnIndicatorsReport__cdr_deserialize+0x26>
 80112ba:	4605      	mov	r5, r0
 80112bc:	f000 f954 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80112c0:	4603      	mov	r3, r0
 80112c2:	4621      	mov	r1, r4
 80112c4:	4628      	mov	r0, r5
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	4798      	blx	r3
 80112cc:	f104 0108 	add.w	r1, r4, #8
 80112d0:	4628      	mov	r0, r5
 80112d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112d6:	f000 b98f 	b.w	80115f8 <ucdr_deserialize_uint8_t>
 80112da:	4608      	mov	r0, r1
 80112dc:	bd38      	pop	{r3, r4, r5, pc}
 80112de:	bf00      	nop

080112e0 <_TurnIndicatorsReport__cdr_serialize>:
 80112e0:	b180      	cbz	r0, 8011304 <_TurnIndicatorsReport__cdr_serialize+0x24>
 80112e2:	b538      	push	{r3, r4, r5, lr}
 80112e4:	4604      	mov	r4, r0
 80112e6:	460d      	mov	r5, r1
 80112e8:	f000 f93e 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80112ec:	4603      	mov	r3, r0
 80112ee:	4629      	mov	r1, r5
 80112f0:	4620      	mov	r0, r4
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	689b      	ldr	r3, [r3, #8]
 80112f6:	4798      	blx	r3
 80112f8:	7a21      	ldrb	r1, [r4, #8]
 80112fa:	4628      	mov	r0, r5
 80112fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011300:	f000 b964 	b.w	80115cc <ucdr_serialize_uint8_t>
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop

08011308 <_TurnIndicatorsReport__get_serialized_size>:
 8011308:	b150      	cbz	r0, 8011320 <_TurnIndicatorsReport__get_serialized_size+0x18>
 801130a:	2100      	movs	r1, #0
 801130c:	b510      	push	{r4, lr}
 801130e:	f000 f8c7 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8011312:	4604      	mov	r4, r0
 8011314:	2101      	movs	r1, #1
 8011316:	f000 ffe9 	bl	80122ec <ucdr_alignment>
 801131a:	4420      	add	r0, r4
 801131c:	3001      	adds	r0, #1
 801131e:	bd10      	pop	{r4, pc}
 8011320:	4770      	bx	lr
 8011322:	bf00      	nop

08011324 <_TurnIndicatorsReport__max_serialized_size>:
 8011324:	b510      	push	{r4, lr}
 8011326:	b082      	sub	sp, #8
 8011328:	2401      	movs	r4, #1
 801132a:	2100      	movs	r1, #0
 801132c:	f10d 0007 	add.w	r0, sp, #7
 8011330:	f88d 4007 	strb.w	r4, [sp, #7]
 8011334:	f000 f904 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8011338:	4621      	mov	r1, r4
 801133a:	4604      	mov	r4, r0
 801133c:	f000 ffd6 	bl	80122ec <ucdr_alignment>
 8011340:	4420      	add	r0, r4
 8011342:	3001      	adds	r0, #1
 8011344:	b002      	add	sp, #8
 8011346:	bd10      	pop	{r4, pc}

08011348 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport>:
 8011348:	4800      	ldr	r0, [pc, #0]	@ (801134c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__TurnIndicatorsReport+0x4>)
 801134a:	4770      	bx	lr
 801134c:	24000cfc 	.word	0x24000cfc

08011350 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport>:
 8011350:	b1c8      	cbz	r0, 8011386 <get_serialized_size_autoware_vehicle_msgs__msg__VelocityReport+0x36>
 8011352:	b570      	push	{r4, r5, r6, lr}
 8011354:	460d      	mov	r5, r1
 8011356:	f001 f8e3 	bl	8012520 <get_serialized_size_std_msgs__msg__Header>
 801135a:	2104      	movs	r1, #4
 801135c:	182e      	adds	r6, r5, r0
 801135e:	f1c5 0504 	rsb	r5, r5, #4
 8011362:	4630      	mov	r0, r6
 8011364:	f000 ffc2 	bl	80122ec <ucdr_alignment>
 8011368:	2104      	movs	r1, #4
 801136a:	1844      	adds	r4, r0, r1
 801136c:	4434      	add	r4, r6
 801136e:	4620      	mov	r0, r4
 8011370:	f000 ffbc 	bl	80122ec <ucdr_alignment>
 8011374:	2104      	movs	r1, #4
 8011376:	4408      	add	r0, r1
 8011378:	4404      	add	r4, r0
 801137a:	4620      	mov	r0, r4
 801137c:	f000 ffb6 	bl	80122ec <ucdr_alignment>
 8011380:	4428      	add	r0, r5
 8011382:	4420      	add	r0, r4
 8011384:	bd70      	pop	{r4, r5, r6, pc}
 8011386:	4770      	bx	lr

08011388 <_VelocityReport__cdr_deserialize>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	460c      	mov	r4, r1
 801138c:	b1c9      	cbz	r1, 80113c2 <_VelocityReport__cdr_deserialize+0x3a>
 801138e:	4605      	mov	r5, r0
 8011390:	f001 f94a 	bl	8012628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011394:	4603      	mov	r3, r0
 8011396:	4621      	mov	r1, r4
 8011398:	4628      	mov	r0, r5
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	4798      	blx	r3
 80113a0:	f104 0114 	add.w	r1, r4, #20
 80113a4:	4628      	mov	r0, r5
 80113a6:	f000 fd53 	bl	8011e50 <ucdr_deserialize_float>
 80113aa:	f104 0118 	add.w	r1, r4, #24
 80113ae:	4628      	mov	r0, r5
 80113b0:	f000 fd4e 	bl	8011e50 <ucdr_deserialize_float>
 80113b4:	f104 011c 	add.w	r1, r4, #28
 80113b8:	4628      	mov	r0, r5
 80113ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113be:	f000 bd47 	b.w	8011e50 <ucdr_deserialize_float>
 80113c2:	4608      	mov	r0, r1
 80113c4:	bd38      	pop	{r3, r4, r5, pc}
 80113c6:	bf00      	nop

080113c8 <_VelocityReport__cdr_serialize>:
 80113c8:	b1d8      	cbz	r0, 8011402 <_VelocityReport__cdr_serialize+0x3a>
 80113ca:	b538      	push	{r3, r4, r5, lr}
 80113cc:	4604      	mov	r4, r0
 80113ce:	460d      	mov	r5, r1
 80113d0:	f001 f92a 	bl	8012628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80113d4:	4603      	mov	r3, r0
 80113d6:	4629      	mov	r1, r5
 80113d8:	4620      	mov	r0, r4
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	4798      	blx	r3
 80113e0:	ed94 0a05 	vldr	s0, [r4, #20]
 80113e4:	4628      	mov	r0, r5
 80113e6:	f000 fc9b 	bl	8011d20 <ucdr_serialize_float>
 80113ea:	ed94 0a06 	vldr	s0, [r4, #24]
 80113ee:	4628      	mov	r0, r5
 80113f0:	f000 fc96 	bl	8011d20 <ucdr_serialize_float>
 80113f4:	ed94 0a07 	vldr	s0, [r4, #28]
 80113f8:	4628      	mov	r0, r5
 80113fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113fe:	f000 bc8f 	b.w	8011d20 <ucdr_serialize_float>
 8011402:	4770      	bx	lr

08011404 <_VelocityReport__get_serialized_size>:
 8011404:	b1b0      	cbz	r0, 8011434 <_VelocityReport__get_serialized_size+0x30>
 8011406:	2100      	movs	r1, #0
 8011408:	b510      	push	{r4, lr}
 801140a:	f001 f889 	bl	8012520 <get_serialized_size_std_msgs__msg__Header>
 801140e:	4604      	mov	r4, r0
 8011410:	2104      	movs	r1, #4
 8011412:	f000 ff6b 	bl	80122ec <ucdr_alignment>
 8011416:	2104      	movs	r1, #4
 8011418:	4420      	add	r0, r4
 801141a:	1844      	adds	r4, r0, r1
 801141c:	4620      	mov	r0, r4
 801141e:	f000 ff65 	bl	80122ec <ucdr_alignment>
 8011422:	2104      	movs	r1, #4
 8011424:	4408      	add	r0, r1
 8011426:	4404      	add	r4, r0
 8011428:	4620      	mov	r0, r4
 801142a:	f000 ff5f 	bl	80122ec <ucdr_alignment>
 801142e:	3004      	adds	r0, #4
 8011430:	4420      	add	r0, r4
 8011432:	bd10      	pop	{r4, pc}
 8011434:	4770      	bx	lr
 8011436:	bf00      	nop

08011438 <_VelocityReport__max_serialized_size>:
 8011438:	b510      	push	{r4, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	2301      	movs	r3, #1
 801143e:	2100      	movs	r1, #0
 8011440:	f10d 0007 	add.w	r0, sp, #7
 8011444:	f88d 3007 	strb.w	r3, [sp, #7]
 8011448:	f001 f8e4 	bl	8012614 <max_serialized_size_std_msgs__msg__Header>
 801144c:	4604      	mov	r4, r0
 801144e:	2104      	movs	r1, #4
 8011450:	f000 ff4c 	bl	80122ec <ucdr_alignment>
 8011454:	2104      	movs	r1, #4
 8011456:	4420      	add	r0, r4
 8011458:	1844      	adds	r4, r0, r1
 801145a:	4620      	mov	r0, r4
 801145c:	f000 ff46 	bl	80122ec <ucdr_alignment>
 8011460:	2104      	movs	r1, #4
 8011462:	4408      	add	r0, r1
 8011464:	4404      	add	r4, r0
 8011466:	4620      	mov	r0, r4
 8011468:	f000 ff40 	bl	80122ec <ucdr_alignment>
 801146c:	3004      	adds	r0, #4
 801146e:	4420      	add	r0, r4
 8011470:	b002      	add	sp, #8
 8011472:	bd10      	pop	{r4, pc}

08011474 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport>:
 8011474:	4800      	ldr	r0, [pc, #0]	@ (8011478 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__autoware_vehicle_msgs__msg__VelocityReport+0x4>)
 8011476:	4770      	bx	lr
 8011478:	24000d24 	.word	0x24000d24

0801147c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 801147c:	f001 bcac 	b.w	8012dd8 <builtin_interfaces__msg__Time__init>

08011480 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011480:	f001 bcae 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>

08011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011484:	4b04      	ldr	r3, [pc, #16]	@ (8011498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	b10a      	cbz	r2, 801148e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801148a:	4803      	ldr	r0, [pc, #12]	@ (8011498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801148c:	4770      	bx	lr
 801148e:	4a03      	ldr	r2, [pc, #12]	@ (801149c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011490:	4801      	ldr	r0, [pc, #4]	@ (8011498 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011492:	6812      	ldr	r2, [r2, #0]
 8011494:	601a      	str	r2, [r3, #0]
 8011496:	4770      	bx	lr
 8011498:	24000dc4 	.word	0x24000dc4
 801149c:	24000e10 	.word	0x24000e10

080114a0 <get_serialized_size_builtin_interfaces__msg__Time>:
 80114a0:	b180      	cbz	r0, 80114c4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80114a2:	b538      	push	{r3, r4, r5, lr}
 80114a4:	460d      	mov	r5, r1
 80114a6:	2104      	movs	r1, #4
 80114a8:	4628      	mov	r0, r5
 80114aa:	f000 ff1f 	bl	80122ec <ucdr_alignment>
 80114ae:	1d2b      	adds	r3, r5, #4
 80114b0:	f1c5 0504 	rsb	r5, r5, #4
 80114b4:	2104      	movs	r1, #4
 80114b6:	181c      	adds	r4, r3, r0
 80114b8:	4620      	mov	r0, r4
 80114ba:	f000 ff17 	bl	80122ec <ucdr_alignment>
 80114be:	4428      	add	r0, r5
 80114c0:	4420      	add	r0, r4
 80114c2:	bd38      	pop	{r3, r4, r5, pc}
 80114c4:	4770      	bx	lr
 80114c6:	bf00      	nop

080114c8 <_Time__cdr_deserialize>:
 80114c8:	b538      	push	{r3, r4, r5, lr}
 80114ca:	460c      	mov	r4, r1
 80114cc:	b141      	cbz	r1, 80114e0 <_Time__cdr_deserialize+0x18>
 80114ce:	4605      	mov	r5, r0
 80114d0:	f000 fb96 	bl	8011c00 <ucdr_deserialize_int32_t>
 80114d4:	1d21      	adds	r1, r4, #4
 80114d6:	4628      	mov	r0, r5
 80114d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114dc:	f000 b9d2 	b.w	8011884 <ucdr_deserialize_uint32_t>
 80114e0:	4608      	mov	r0, r1
 80114e2:	bd38      	pop	{r3, r4, r5, pc}

080114e4 <_Time__cdr_serialize>:
 80114e4:	b160      	cbz	r0, 8011500 <_Time__cdr_serialize+0x1c>
 80114e6:	b538      	push	{r3, r4, r5, lr}
 80114e8:	460d      	mov	r5, r1
 80114ea:	4604      	mov	r4, r0
 80114ec:	6801      	ldr	r1, [r0, #0]
 80114ee:	4628      	mov	r0, r5
 80114f0:	f000 faee 	bl	8011ad0 <ucdr_serialize_int32_t>
 80114f4:	6861      	ldr	r1, [r4, #4]
 80114f6:	4628      	mov	r0, r5
 80114f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114fc:	f000 b892 	b.w	8011624 <ucdr_serialize_uint32_t>
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop

08011504 <_Time__get_serialized_size>:
 8011504:	b160      	cbz	r0, 8011520 <_Time__get_serialized_size+0x1c>
 8011506:	2104      	movs	r1, #4
 8011508:	2000      	movs	r0, #0
 801150a:	b510      	push	{r4, lr}
 801150c:	f000 feee 	bl	80122ec <ucdr_alignment>
 8011510:	2104      	movs	r1, #4
 8011512:	1844      	adds	r4, r0, r1
 8011514:	4620      	mov	r0, r4
 8011516:	f000 fee9 	bl	80122ec <ucdr_alignment>
 801151a:	3004      	adds	r0, #4
 801151c:	4420      	add	r0, r4
 801151e:	bd10      	pop	{r4, pc}
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop

08011524 <_Time__max_serialized_size>:
 8011524:	b510      	push	{r4, lr}
 8011526:	2104      	movs	r1, #4
 8011528:	2000      	movs	r0, #0
 801152a:	f000 fedf 	bl	80122ec <ucdr_alignment>
 801152e:	2104      	movs	r1, #4
 8011530:	1844      	adds	r4, r0, r1
 8011532:	4620      	mov	r0, r4
 8011534:	f000 feda 	bl	80122ec <ucdr_alignment>
 8011538:	3004      	adds	r0, #4
 801153a:	4420      	add	r0, r4
 801153c:	bd10      	pop	{r4, pc}
 801153e:	bf00      	nop

08011540 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011540:	b538      	push	{r3, r4, r5, lr}
 8011542:	460c      	mov	r4, r1
 8011544:	2301      	movs	r3, #1
 8011546:	2104      	movs	r1, #4
 8011548:	1d25      	adds	r5, r4, #4
 801154a:	7003      	strb	r3, [r0, #0]
 801154c:	4620      	mov	r0, r4
 801154e:	f1c4 0404 	rsb	r4, r4, #4
 8011552:	f000 fecb 	bl	80122ec <ucdr_alignment>
 8011556:	4405      	add	r5, r0
 8011558:	2104      	movs	r1, #4
 801155a:	4628      	mov	r0, r5
 801155c:	f000 fec6 	bl	80122ec <ucdr_alignment>
 8011560:	4420      	add	r0, r4
 8011562:	4428      	add	r0, r5
 8011564:	bd38      	pop	{r3, r4, r5, pc}
 8011566:	bf00      	nop

08011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011568:	4800      	ldr	r0, [pc, #0]	@ (801156c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801156a:	4770      	bx	lr
 801156c:	24000dd0 	.word	0x24000dd0

08011570 <ucdr_serialize_bool>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	460d      	mov	r5, r1
 8011574:	2101      	movs	r1, #1
 8011576:	4604      	mov	r4, r0
 8011578:	f000 fe9c 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 801157c:	b148      	cbz	r0, 8011592 <ucdr_serialize_bool+0x22>
 801157e:	68a3      	ldr	r3, [r4, #8]
 8011580:	2101      	movs	r1, #1
 8011582:	701d      	strb	r5, [r3, #0]
 8011584:	68a2      	ldr	r2, [r4, #8]
 8011586:	6923      	ldr	r3, [r4, #16]
 8011588:	440a      	add	r2, r1
 801158a:	7561      	strb	r1, [r4, #21]
 801158c:	440b      	add	r3, r1
 801158e:	60a2      	str	r2, [r4, #8]
 8011590:	6123      	str	r3, [r4, #16]
 8011592:	7da0      	ldrb	r0, [r4, #22]
 8011594:	f080 0001 	eor.w	r0, r0, #1
 8011598:	bd38      	pop	{r3, r4, r5, pc}
 801159a:	bf00      	nop

0801159c <ucdr_deserialize_bool>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	460d      	mov	r5, r1
 80115a0:	2101      	movs	r1, #1
 80115a2:	4604      	mov	r4, r0
 80115a4:	f000 fe86 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 80115a8:	b160      	cbz	r0, 80115c4 <ucdr_deserialize_bool+0x28>
 80115aa:	68a2      	ldr	r2, [r4, #8]
 80115ac:	2101      	movs	r1, #1
 80115ae:	6923      	ldr	r3, [r4, #16]
 80115b0:	f812 0b01 	ldrb.w	r0, [r2], #1
 80115b4:	440b      	add	r3, r1
 80115b6:	3800      	subs	r0, #0
 80115b8:	bf18      	it	ne
 80115ba:	2001      	movne	r0, #1
 80115bc:	7028      	strb	r0, [r5, #0]
 80115be:	60a2      	str	r2, [r4, #8]
 80115c0:	6123      	str	r3, [r4, #16]
 80115c2:	7561      	strb	r1, [r4, #21]
 80115c4:	7da0      	ldrb	r0, [r4, #22]
 80115c6:	f080 0001 	eor.w	r0, r0, #1
 80115ca:	bd38      	pop	{r3, r4, r5, pc}

080115cc <ucdr_serialize_uint8_t>:
 80115cc:	b538      	push	{r3, r4, r5, lr}
 80115ce:	460d      	mov	r5, r1
 80115d0:	2101      	movs	r1, #1
 80115d2:	4604      	mov	r4, r0
 80115d4:	f000 fe6e 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 80115d8:	b148      	cbz	r0, 80115ee <ucdr_serialize_uint8_t+0x22>
 80115da:	68a3      	ldr	r3, [r4, #8]
 80115dc:	2101      	movs	r1, #1
 80115de:	701d      	strb	r5, [r3, #0]
 80115e0:	68a2      	ldr	r2, [r4, #8]
 80115e2:	6923      	ldr	r3, [r4, #16]
 80115e4:	440a      	add	r2, r1
 80115e6:	7561      	strb	r1, [r4, #21]
 80115e8:	440b      	add	r3, r1
 80115ea:	60a2      	str	r2, [r4, #8]
 80115ec:	6123      	str	r3, [r4, #16]
 80115ee:	7da0      	ldrb	r0, [r4, #22]
 80115f0:	f080 0001 	eor.w	r0, r0, #1
 80115f4:	bd38      	pop	{r3, r4, r5, pc}
 80115f6:	bf00      	nop

080115f8 <ucdr_deserialize_uint8_t>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	460d      	mov	r5, r1
 80115fc:	2101      	movs	r1, #1
 80115fe:	4604      	mov	r4, r0
 8011600:	f000 fe58 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011604:	b150      	cbz	r0, 801161c <ucdr_deserialize_uint8_t+0x24>
 8011606:	68a3      	ldr	r3, [r4, #8]
 8011608:	2101      	movs	r1, #1
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	702b      	strb	r3, [r5, #0]
 801160e:	68a2      	ldr	r2, [r4, #8]
 8011610:	6923      	ldr	r3, [r4, #16]
 8011612:	440a      	add	r2, r1
 8011614:	7561      	strb	r1, [r4, #21]
 8011616:	440b      	add	r3, r1
 8011618:	60a2      	str	r2, [r4, #8]
 801161a:	6123      	str	r3, [r4, #16]
 801161c:	7da0      	ldrb	r0, [r4, #22]
 801161e:	f080 0001 	eor.w	r0, r0, #1
 8011622:	bd38      	pop	{r3, r4, r5, pc}

08011624 <ucdr_serialize_uint32_t>:
 8011624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011628:	b082      	sub	sp, #8
 801162a:	4604      	mov	r4, r0
 801162c:	9101      	str	r1, [sp, #4]
 801162e:	2104      	movs	r1, #4
 8011630:	f000 fe64 	bl	80122fc <ucdr_buffer_alignment>
 8011634:	4601      	mov	r1, r0
 8011636:	4620      	mov	r0, r4
 8011638:	7d67      	ldrb	r7, [r4, #21]
 801163a:	f000 fea3 	bl	8012384 <ucdr_advance_buffer>
 801163e:	2104      	movs	r1, #4
 8011640:	4620      	mov	r0, r4
 8011642:	f000 fe2b 	bl	801229c <ucdr_check_buffer_available_for>
 8011646:	2800      	cmp	r0, #0
 8011648:	d139      	bne.n	80116be <ucdr_serialize_uint32_t+0x9a>
 801164a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801164e:	42ab      	cmp	r3, r5
 8011650:	d930      	bls.n	80116b4 <ucdr_serialize_uint32_t+0x90>
 8011652:	1b5e      	subs	r6, r3, r5
 8011654:	60a3      	str	r3, [r4, #8]
 8011656:	6923      	ldr	r3, [r4, #16]
 8011658:	4620      	mov	r0, r4
 801165a:	f1c6 0804 	rsb	r8, r6, #4
 801165e:	4433      	add	r3, r6
 8011660:	4641      	mov	r1, r8
 8011662:	6123      	str	r3, [r4, #16]
 8011664:	f000 fe26 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011668:	2800      	cmp	r0, #0
 801166a:	d04c      	beq.n	8011706 <ucdr_serialize_uint32_t+0xe2>
 801166c:	7d23      	ldrb	r3, [r4, #20]
 801166e:	2b01      	cmp	r3, #1
 8011670:	d063      	beq.n	801173a <ucdr_serialize_uint32_t+0x116>
 8011672:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011676:	702b      	strb	r3, [r5, #0]
 8011678:	2e00      	cmp	r6, #0
 801167a:	d051      	beq.n	8011720 <ucdr_serialize_uint32_t+0xfc>
 801167c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011680:	2e01      	cmp	r6, #1
 8011682:	706b      	strb	r3, [r5, #1]
 8011684:	d050      	beq.n	8011728 <ucdr_serialize_uint32_t+0x104>
 8011686:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801168a:	2e02      	cmp	r6, #2
 801168c:	70ab      	strb	r3, [r5, #2]
 801168e:	d04f      	beq.n	8011730 <ucdr_serialize_uint32_t+0x10c>
 8011690:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011694:	70eb      	strb	r3, [r5, #3]
 8011696:	6923      	ldr	r3, [r4, #16]
 8011698:	2104      	movs	r1, #4
 801169a:	68a2      	ldr	r2, [r4, #8]
 801169c:	3304      	adds	r3, #4
 801169e:	7da0      	ldrb	r0, [r4, #22]
 80116a0:	4442      	add	r2, r8
 80116a2:	7561      	strb	r1, [r4, #21]
 80116a4:	1b9e      	subs	r6, r3, r6
 80116a6:	f080 0001 	eor.w	r0, r0, #1
 80116aa:	60a2      	str	r2, [r4, #8]
 80116ac:	6126      	str	r6, [r4, #16]
 80116ae:	b002      	add	sp, #8
 80116b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116b4:	2104      	movs	r1, #4
 80116b6:	4620      	mov	r0, r4
 80116b8:	f000 fdfc 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 80116bc:	b1d0      	cbz	r0, 80116f4 <ucdr_serialize_uint32_t+0xd0>
 80116be:	7d23      	ldrb	r3, [r4, #20]
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	68a3      	ldr	r3, [r4, #8]
 80116c4:	d01c      	beq.n	8011700 <ucdr_serialize_uint32_t+0xdc>
 80116c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80116ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80116ce:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80116d2:	7018      	strb	r0, [r3, #0]
 80116d4:	68a3      	ldr	r3, [r4, #8]
 80116d6:	705a      	strb	r2, [r3, #1]
 80116d8:	68a3      	ldr	r3, [r4, #8]
 80116da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80116de:	7099      	strb	r1, [r3, #2]
 80116e0:	68a3      	ldr	r3, [r4, #8]
 80116e2:	70da      	strb	r2, [r3, #3]
 80116e4:	2104      	movs	r1, #4
 80116e6:	68a2      	ldr	r2, [r4, #8]
 80116e8:	6923      	ldr	r3, [r4, #16]
 80116ea:	440a      	add	r2, r1
 80116ec:	7561      	strb	r1, [r4, #21]
 80116ee:	440b      	add	r3, r1
 80116f0:	60a2      	str	r2, [r4, #8]
 80116f2:	6123      	str	r3, [r4, #16]
 80116f4:	7da0      	ldrb	r0, [r4, #22]
 80116f6:	f080 0001 	eor.w	r0, r0, #1
 80116fa:	b002      	add	sp, #8
 80116fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011700:	9a01      	ldr	r2, [sp, #4]
 8011702:	601a      	str	r2, [r3, #0]
 8011704:	e7ee      	b.n	80116e4 <ucdr_serialize_uint32_t+0xc0>
 8011706:	68a2      	ldr	r2, [r4, #8]
 8011708:	6923      	ldr	r3, [r4, #16]
 801170a:	7da0      	ldrb	r0, [r4, #22]
 801170c:	1b92      	subs	r2, r2, r6
 801170e:	1b9b      	subs	r3, r3, r6
 8011710:	7567      	strb	r7, [r4, #21]
 8011712:	f080 0001 	eor.w	r0, r0, #1
 8011716:	60a2      	str	r2, [r4, #8]
 8011718:	6123      	str	r3, [r4, #16]
 801171a:	b002      	add	sp, #8
 801171c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011720:	68a3      	ldr	r3, [r4, #8]
 8011722:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	68a3      	ldr	r3, [r4, #8]
 801172a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801172e:	701a      	strb	r2, [r3, #0]
 8011730:	68a3      	ldr	r3, [r4, #8]
 8011732:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011736:	701a      	strb	r2, [r3, #0]
 8011738:	e7ad      	b.n	8011696 <ucdr_serialize_uint32_t+0x72>
 801173a:	4628      	mov	r0, r5
 801173c:	ad01      	add	r5, sp, #4
 801173e:	4632      	mov	r2, r6
 8011740:	4629      	mov	r1, r5
 8011742:	f002 fa3a 	bl	8013bba <memcpy>
 8011746:	4642      	mov	r2, r8
 8011748:	19a9      	adds	r1, r5, r6
 801174a:	68a0      	ldr	r0, [r4, #8]
 801174c:	f002 fa35 	bl	8013bba <memcpy>
 8011750:	e7a1      	b.n	8011696 <ucdr_serialize_uint32_t+0x72>
 8011752:	bf00      	nop

08011754 <ucdr_serialize_endian_uint32_t>:
 8011754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011758:	4604      	mov	r4, r0
 801175a:	b083      	sub	sp, #12
 801175c:	460d      	mov	r5, r1
 801175e:	2104      	movs	r1, #4
 8011760:	9201      	str	r2, [sp, #4]
 8011762:	f000 fdcb 	bl	80122fc <ucdr_buffer_alignment>
 8011766:	4601      	mov	r1, r0
 8011768:	4620      	mov	r0, r4
 801176a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801176e:	f000 fe09 	bl	8012384 <ucdr_advance_buffer>
 8011772:	2104      	movs	r1, #4
 8011774:	4620      	mov	r0, r4
 8011776:	f000 fd91 	bl	801229c <ucdr_check_buffer_available_for>
 801177a:	2800      	cmp	r0, #0
 801177c:	d138      	bne.n	80117f0 <ucdr_serialize_endian_uint32_t+0x9c>
 801177e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011782:	42b7      	cmp	r7, r6
 8011784:	d92f      	bls.n	80117e6 <ucdr_serialize_endian_uint32_t+0x92>
 8011786:	6923      	ldr	r3, [r4, #16]
 8011788:	4620      	mov	r0, r4
 801178a:	60a7      	str	r7, [r4, #8]
 801178c:	1bbf      	subs	r7, r7, r6
 801178e:	443b      	add	r3, r7
 8011790:	f1c7 0904 	rsb	r9, r7, #4
 8011794:	6123      	str	r3, [r4, #16]
 8011796:	4649      	mov	r1, r9
 8011798:	f000 fd8c 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 801179c:	2800      	cmp	r0, #0
 801179e:	d04a      	beq.n	8011836 <ucdr_serialize_endian_uint32_t+0xe2>
 80117a0:	2d01      	cmp	r5, #1
 80117a2:	d063      	beq.n	801186c <ucdr_serialize_endian_uint32_t+0x118>
 80117a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117a8:	7033      	strb	r3, [r6, #0]
 80117aa:	2f00      	cmp	r7, #0
 80117ac:	d051      	beq.n	8011852 <ucdr_serialize_endian_uint32_t+0xfe>
 80117ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117b2:	2f01      	cmp	r7, #1
 80117b4:	7073      	strb	r3, [r6, #1]
 80117b6:	d050      	beq.n	801185a <ucdr_serialize_endian_uint32_t+0x106>
 80117b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80117bc:	2f02      	cmp	r7, #2
 80117be:	70b3      	strb	r3, [r6, #2]
 80117c0:	d04f      	beq.n	8011862 <ucdr_serialize_endian_uint32_t+0x10e>
 80117c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117c6:	70f3      	strb	r3, [r6, #3]
 80117c8:	6923      	ldr	r3, [r4, #16]
 80117ca:	2104      	movs	r1, #4
 80117cc:	68a2      	ldr	r2, [r4, #8]
 80117ce:	7da0      	ldrb	r0, [r4, #22]
 80117d0:	3304      	adds	r3, #4
 80117d2:	444a      	add	r2, r9
 80117d4:	7561      	strb	r1, [r4, #21]
 80117d6:	1bdb      	subs	r3, r3, r7
 80117d8:	f080 0001 	eor.w	r0, r0, #1
 80117dc:	60a2      	str	r2, [r4, #8]
 80117de:	6123      	str	r3, [r4, #16]
 80117e0:	b003      	add	sp, #12
 80117e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117e6:	2104      	movs	r1, #4
 80117e8:	4620      	mov	r0, r4
 80117ea:	f000 fd63 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 80117ee:	b1c8      	cbz	r0, 8011824 <ucdr_serialize_endian_uint32_t+0xd0>
 80117f0:	2d01      	cmp	r5, #1
 80117f2:	68a3      	ldr	r3, [r4, #8]
 80117f4:	d01c      	beq.n	8011830 <ucdr_serialize_endian_uint32_t+0xdc>
 80117f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80117fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80117fe:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011802:	7018      	strb	r0, [r3, #0]
 8011804:	68a3      	ldr	r3, [r4, #8]
 8011806:	705a      	strb	r2, [r3, #1]
 8011808:	68a3      	ldr	r3, [r4, #8]
 801180a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801180e:	7099      	strb	r1, [r3, #2]
 8011810:	68a3      	ldr	r3, [r4, #8]
 8011812:	70da      	strb	r2, [r3, #3]
 8011814:	2104      	movs	r1, #4
 8011816:	68a2      	ldr	r2, [r4, #8]
 8011818:	6923      	ldr	r3, [r4, #16]
 801181a:	440a      	add	r2, r1
 801181c:	7561      	strb	r1, [r4, #21]
 801181e:	440b      	add	r3, r1
 8011820:	60a2      	str	r2, [r4, #8]
 8011822:	6123      	str	r3, [r4, #16]
 8011824:	7da0      	ldrb	r0, [r4, #22]
 8011826:	f080 0001 	eor.w	r0, r0, #1
 801182a:	b003      	add	sp, #12
 801182c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011830:	9a01      	ldr	r2, [sp, #4]
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	e7ee      	b.n	8011814 <ucdr_serialize_endian_uint32_t+0xc0>
 8011836:	68a2      	ldr	r2, [r4, #8]
 8011838:	6923      	ldr	r3, [r4, #16]
 801183a:	7da0      	ldrb	r0, [r4, #22]
 801183c:	1bd2      	subs	r2, r2, r7
 801183e:	1bdb      	subs	r3, r3, r7
 8011840:	f884 8015 	strb.w	r8, [r4, #21]
 8011844:	f080 0001 	eor.w	r0, r0, #1
 8011848:	60a2      	str	r2, [r4, #8]
 801184a:	6123      	str	r3, [r4, #16]
 801184c:	b003      	add	sp, #12
 801184e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011852:	68a3      	ldr	r3, [r4, #8]
 8011854:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011858:	701a      	strb	r2, [r3, #0]
 801185a:	68a3      	ldr	r3, [r4, #8]
 801185c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011860:	701a      	strb	r2, [r3, #0]
 8011862:	68a3      	ldr	r3, [r4, #8]
 8011864:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011868:	701a      	strb	r2, [r3, #0]
 801186a:	e7ad      	b.n	80117c8 <ucdr_serialize_endian_uint32_t+0x74>
 801186c:	ad01      	add	r5, sp, #4
 801186e:	463a      	mov	r2, r7
 8011870:	4630      	mov	r0, r6
 8011872:	4629      	mov	r1, r5
 8011874:	f002 f9a1 	bl	8013bba <memcpy>
 8011878:	464a      	mov	r2, r9
 801187a:	19e9      	adds	r1, r5, r7
 801187c:	68a0      	ldr	r0, [r4, #8]
 801187e:	f002 f99c 	bl	8013bba <memcpy>
 8011882:	e7a1      	b.n	80117c8 <ucdr_serialize_endian_uint32_t+0x74>

08011884 <ucdr_deserialize_uint32_t>:
 8011884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011888:	4604      	mov	r4, r0
 801188a:	460d      	mov	r5, r1
 801188c:	2104      	movs	r1, #4
 801188e:	f000 fd35 	bl	80122fc <ucdr_buffer_alignment>
 8011892:	4601      	mov	r1, r0
 8011894:	4620      	mov	r0, r4
 8011896:	f894 8015 	ldrb.w	r8, [r4, #21]
 801189a:	f000 fd73 	bl	8012384 <ucdr_advance_buffer>
 801189e:	2104      	movs	r1, #4
 80118a0:	4620      	mov	r0, r4
 80118a2:	f000 fcfb 	bl	801229c <ucdr_check_buffer_available_for>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d138      	bne.n	801191c <ucdr_deserialize_uint32_t+0x98>
 80118aa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80118ae:	42b7      	cmp	r7, r6
 80118b0:	d92f      	bls.n	8011912 <ucdr_deserialize_uint32_t+0x8e>
 80118b2:	6923      	ldr	r3, [r4, #16]
 80118b4:	4620      	mov	r0, r4
 80118b6:	60a7      	str	r7, [r4, #8]
 80118b8:	1bbf      	subs	r7, r7, r6
 80118ba:	443b      	add	r3, r7
 80118bc:	f1c7 0904 	rsb	r9, r7, #4
 80118c0:	6123      	str	r3, [r4, #16]
 80118c2:	4649      	mov	r1, r9
 80118c4:	f000 fcf6 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	d046      	beq.n	801195a <ucdr_deserialize_uint32_t+0xd6>
 80118cc:	7d23      	ldrb	r3, [r4, #20]
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d05c      	beq.n	801198c <ucdr_deserialize_uint32_t+0x108>
 80118d2:	78f3      	ldrb	r3, [r6, #3]
 80118d4:	702b      	strb	r3, [r5, #0]
 80118d6:	2f00      	cmp	r7, #0
 80118d8:	d04c      	beq.n	8011974 <ucdr_deserialize_uint32_t+0xf0>
 80118da:	78b3      	ldrb	r3, [r6, #2]
 80118dc:	2f01      	cmp	r7, #1
 80118de:	706b      	strb	r3, [r5, #1]
 80118e0:	f105 0302 	add.w	r3, r5, #2
 80118e4:	d04a      	beq.n	801197c <ucdr_deserialize_uint32_t+0xf8>
 80118e6:	7873      	ldrb	r3, [r6, #1]
 80118e8:	2f02      	cmp	r7, #2
 80118ea:	70ab      	strb	r3, [r5, #2]
 80118ec:	f105 0303 	add.w	r3, r5, #3
 80118f0:	d048      	beq.n	8011984 <ucdr_deserialize_uint32_t+0x100>
 80118f2:	7833      	ldrb	r3, [r6, #0]
 80118f4:	70eb      	strb	r3, [r5, #3]
 80118f6:	6923      	ldr	r3, [r4, #16]
 80118f8:	2104      	movs	r1, #4
 80118fa:	68a2      	ldr	r2, [r4, #8]
 80118fc:	3304      	adds	r3, #4
 80118fe:	7da0      	ldrb	r0, [r4, #22]
 8011900:	444a      	add	r2, r9
 8011902:	7561      	strb	r1, [r4, #21]
 8011904:	1bdb      	subs	r3, r3, r7
 8011906:	f080 0001 	eor.w	r0, r0, #1
 801190a:	60a2      	str	r2, [r4, #8]
 801190c:	6123      	str	r3, [r4, #16]
 801190e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011912:	2104      	movs	r1, #4
 8011914:	4620      	mov	r0, r4
 8011916:	f000 fccd 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 801191a:	b1b0      	cbz	r0, 801194a <ucdr_deserialize_uint32_t+0xc6>
 801191c:	7d23      	ldrb	r3, [r4, #20]
 801191e:	2b01      	cmp	r3, #1
 8011920:	68a3      	ldr	r3, [r4, #8]
 8011922:	d017      	beq.n	8011954 <ucdr_deserialize_uint32_t+0xd0>
 8011924:	78db      	ldrb	r3, [r3, #3]
 8011926:	702b      	strb	r3, [r5, #0]
 8011928:	68a3      	ldr	r3, [r4, #8]
 801192a:	789b      	ldrb	r3, [r3, #2]
 801192c:	706b      	strb	r3, [r5, #1]
 801192e:	68a3      	ldr	r3, [r4, #8]
 8011930:	785b      	ldrb	r3, [r3, #1]
 8011932:	70ab      	strb	r3, [r5, #2]
 8011934:	68a3      	ldr	r3, [r4, #8]
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	70eb      	strb	r3, [r5, #3]
 801193a:	2104      	movs	r1, #4
 801193c:	68a2      	ldr	r2, [r4, #8]
 801193e:	6923      	ldr	r3, [r4, #16]
 8011940:	440a      	add	r2, r1
 8011942:	7561      	strb	r1, [r4, #21]
 8011944:	440b      	add	r3, r1
 8011946:	60a2      	str	r2, [r4, #8]
 8011948:	6123      	str	r3, [r4, #16]
 801194a:	7da0      	ldrb	r0, [r4, #22]
 801194c:	f080 0001 	eor.w	r0, r0, #1
 8011950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	602b      	str	r3, [r5, #0]
 8011958:	e7ef      	b.n	801193a <ucdr_deserialize_uint32_t+0xb6>
 801195a:	68a2      	ldr	r2, [r4, #8]
 801195c:	6923      	ldr	r3, [r4, #16]
 801195e:	1bd2      	subs	r2, r2, r7
 8011960:	7da0      	ldrb	r0, [r4, #22]
 8011962:	1bdb      	subs	r3, r3, r7
 8011964:	f884 8015 	strb.w	r8, [r4, #21]
 8011968:	f080 0001 	eor.w	r0, r0, #1
 801196c:	60a2      	str	r2, [r4, #8]
 801196e:	6123      	str	r3, [r4, #16]
 8011970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011974:	68a3      	ldr	r3, [r4, #8]
 8011976:	789b      	ldrb	r3, [r3, #2]
 8011978:	706b      	strb	r3, [r5, #1]
 801197a:	1cab      	adds	r3, r5, #2
 801197c:	68a2      	ldr	r2, [r4, #8]
 801197e:	7852      	ldrb	r2, [r2, #1]
 8011980:	f803 2b01 	strb.w	r2, [r3], #1
 8011984:	68a2      	ldr	r2, [r4, #8]
 8011986:	7812      	ldrb	r2, [r2, #0]
 8011988:	701a      	strb	r2, [r3, #0]
 801198a:	e7b4      	b.n	80118f6 <ucdr_deserialize_uint32_t+0x72>
 801198c:	4631      	mov	r1, r6
 801198e:	463a      	mov	r2, r7
 8011990:	4628      	mov	r0, r5
 8011992:	f002 f912 	bl	8013bba <memcpy>
 8011996:	464a      	mov	r2, r9
 8011998:	19e8      	adds	r0, r5, r7
 801199a:	68a1      	ldr	r1, [r4, #8]
 801199c:	f002 f90d 	bl	8013bba <memcpy>
 80119a0:	e7a9      	b.n	80118f6 <ucdr_deserialize_uint32_t+0x72>
 80119a2:	bf00      	nop

080119a4 <ucdr_deserialize_endian_uint32_t>:
 80119a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a8:	4604      	mov	r4, r0
 80119aa:	460e      	mov	r6, r1
 80119ac:	2104      	movs	r1, #4
 80119ae:	4615      	mov	r5, r2
 80119b0:	f000 fca4 	bl	80122fc <ucdr_buffer_alignment>
 80119b4:	4601      	mov	r1, r0
 80119b6:	4620      	mov	r0, r4
 80119b8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80119bc:	f000 fce2 	bl	8012384 <ucdr_advance_buffer>
 80119c0:	2104      	movs	r1, #4
 80119c2:	4620      	mov	r0, r4
 80119c4:	f000 fc6a 	bl	801229c <ucdr_check_buffer_available_for>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d13c      	bne.n	8011a46 <ucdr_deserialize_endian_uint32_t+0xa2>
 80119cc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80119d0:	42bb      	cmp	r3, r7
 80119d2:	d933      	bls.n	8011a3c <ucdr_deserialize_endian_uint32_t+0x98>
 80119d4:	eba3 0907 	sub.w	r9, r3, r7
 80119d8:	60a3      	str	r3, [r4, #8]
 80119da:	6923      	ldr	r3, [r4, #16]
 80119dc:	4620      	mov	r0, r4
 80119de:	f1c9 0a04 	rsb	sl, r9, #4
 80119e2:	444b      	add	r3, r9
 80119e4:	4651      	mov	r1, sl
 80119e6:	6123      	str	r3, [r4, #16]
 80119e8:	f000 fc64 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d048      	beq.n	8011a82 <ucdr_deserialize_endian_uint32_t+0xde>
 80119f0:	2e01      	cmp	r6, #1
 80119f2:	d061      	beq.n	8011ab8 <ucdr_deserialize_endian_uint32_t+0x114>
 80119f4:	78fb      	ldrb	r3, [r7, #3]
 80119f6:	702b      	strb	r3, [r5, #0]
 80119f8:	f1b9 0f00 	cmp.w	r9, #0
 80119fc:	d050      	beq.n	8011aa0 <ucdr_deserialize_endian_uint32_t+0xfc>
 80119fe:	78bb      	ldrb	r3, [r7, #2]
 8011a00:	f1b9 0f01 	cmp.w	r9, #1
 8011a04:	706b      	strb	r3, [r5, #1]
 8011a06:	f105 0302 	add.w	r3, r5, #2
 8011a0a:	d04d      	beq.n	8011aa8 <ucdr_deserialize_endian_uint32_t+0x104>
 8011a0c:	787b      	ldrb	r3, [r7, #1]
 8011a0e:	f1b9 0f02 	cmp.w	r9, #2
 8011a12:	70ab      	strb	r3, [r5, #2]
 8011a14:	f105 0303 	add.w	r3, r5, #3
 8011a18:	d04a      	beq.n	8011ab0 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011a1a:	783b      	ldrb	r3, [r7, #0]
 8011a1c:	70eb      	strb	r3, [r5, #3]
 8011a1e:	6923      	ldr	r3, [r4, #16]
 8011a20:	2104      	movs	r1, #4
 8011a22:	68a2      	ldr	r2, [r4, #8]
 8011a24:	3304      	adds	r3, #4
 8011a26:	7da0      	ldrb	r0, [r4, #22]
 8011a28:	4452      	add	r2, sl
 8011a2a:	7561      	strb	r1, [r4, #21]
 8011a2c:	eba3 0309 	sub.w	r3, r3, r9
 8011a30:	f080 0001 	eor.w	r0, r0, #1
 8011a34:	60a2      	str	r2, [r4, #8]
 8011a36:	6123      	str	r3, [r4, #16]
 8011a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3c:	2104      	movs	r1, #4
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f000 fc38 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011a44:	b1a8      	cbz	r0, 8011a72 <ucdr_deserialize_endian_uint32_t+0xce>
 8011a46:	2e01      	cmp	r6, #1
 8011a48:	68a3      	ldr	r3, [r4, #8]
 8011a4a:	d017      	beq.n	8011a7c <ucdr_deserialize_endian_uint32_t+0xd8>
 8011a4c:	78db      	ldrb	r3, [r3, #3]
 8011a4e:	702b      	strb	r3, [r5, #0]
 8011a50:	68a3      	ldr	r3, [r4, #8]
 8011a52:	789b      	ldrb	r3, [r3, #2]
 8011a54:	706b      	strb	r3, [r5, #1]
 8011a56:	68a3      	ldr	r3, [r4, #8]
 8011a58:	785b      	ldrb	r3, [r3, #1]
 8011a5a:	70ab      	strb	r3, [r5, #2]
 8011a5c:	68a3      	ldr	r3, [r4, #8]
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	70eb      	strb	r3, [r5, #3]
 8011a62:	2104      	movs	r1, #4
 8011a64:	68a2      	ldr	r2, [r4, #8]
 8011a66:	6923      	ldr	r3, [r4, #16]
 8011a68:	440a      	add	r2, r1
 8011a6a:	7561      	strb	r1, [r4, #21]
 8011a6c:	440b      	add	r3, r1
 8011a6e:	60a2      	str	r2, [r4, #8]
 8011a70:	6123      	str	r3, [r4, #16]
 8011a72:	7da0      	ldrb	r0, [r4, #22]
 8011a74:	f080 0001 	eor.w	r0, r0, #1
 8011a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	602b      	str	r3, [r5, #0]
 8011a80:	e7ef      	b.n	8011a62 <ucdr_deserialize_endian_uint32_t+0xbe>
 8011a82:	68a2      	ldr	r2, [r4, #8]
 8011a84:	6923      	ldr	r3, [r4, #16]
 8011a86:	eba2 0209 	sub.w	r2, r2, r9
 8011a8a:	7da0      	ldrb	r0, [r4, #22]
 8011a8c:	eba3 0309 	sub.w	r3, r3, r9
 8011a90:	f884 8015 	strb.w	r8, [r4, #21]
 8011a94:	f080 0001 	eor.w	r0, r0, #1
 8011a98:	60a2      	str	r2, [r4, #8]
 8011a9a:	6123      	str	r3, [r4, #16]
 8011a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa0:	68a3      	ldr	r3, [r4, #8]
 8011aa2:	789b      	ldrb	r3, [r3, #2]
 8011aa4:	706b      	strb	r3, [r5, #1]
 8011aa6:	1cab      	adds	r3, r5, #2
 8011aa8:	68a2      	ldr	r2, [r4, #8]
 8011aaa:	7852      	ldrb	r2, [r2, #1]
 8011aac:	f803 2b01 	strb.w	r2, [r3], #1
 8011ab0:	68a2      	ldr	r2, [r4, #8]
 8011ab2:	7812      	ldrb	r2, [r2, #0]
 8011ab4:	701a      	strb	r2, [r3, #0]
 8011ab6:	e7b2      	b.n	8011a1e <ucdr_deserialize_endian_uint32_t+0x7a>
 8011ab8:	4639      	mov	r1, r7
 8011aba:	464a      	mov	r2, r9
 8011abc:	4628      	mov	r0, r5
 8011abe:	f002 f87c 	bl	8013bba <memcpy>
 8011ac2:	4652      	mov	r2, sl
 8011ac4:	eb05 0009 	add.w	r0, r5, r9
 8011ac8:	68a1      	ldr	r1, [r4, #8]
 8011aca:	f002 f876 	bl	8013bba <memcpy>
 8011ace:	e7a6      	b.n	8011a1e <ucdr_deserialize_endian_uint32_t+0x7a>

08011ad0 <ucdr_serialize_int32_t>:
 8011ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad4:	b082      	sub	sp, #8
 8011ad6:	4604      	mov	r4, r0
 8011ad8:	9101      	str	r1, [sp, #4]
 8011ada:	2104      	movs	r1, #4
 8011adc:	f000 fc0e 	bl	80122fc <ucdr_buffer_alignment>
 8011ae0:	4601      	mov	r1, r0
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	7d67      	ldrb	r7, [r4, #21]
 8011ae6:	f000 fc4d 	bl	8012384 <ucdr_advance_buffer>
 8011aea:	2104      	movs	r1, #4
 8011aec:	4620      	mov	r0, r4
 8011aee:	f000 fbd5 	bl	801229c <ucdr_check_buffer_available_for>
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d139      	bne.n	8011b6a <ucdr_serialize_int32_t+0x9a>
 8011af6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011afa:	42ab      	cmp	r3, r5
 8011afc:	d930      	bls.n	8011b60 <ucdr_serialize_int32_t+0x90>
 8011afe:	1b5e      	subs	r6, r3, r5
 8011b00:	60a3      	str	r3, [r4, #8]
 8011b02:	6923      	ldr	r3, [r4, #16]
 8011b04:	4620      	mov	r0, r4
 8011b06:	f1c6 0804 	rsb	r8, r6, #4
 8011b0a:	4433      	add	r3, r6
 8011b0c:	4641      	mov	r1, r8
 8011b0e:	6123      	str	r3, [r4, #16]
 8011b10:	f000 fbd0 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d04c      	beq.n	8011bb2 <ucdr_serialize_int32_t+0xe2>
 8011b18:	7d23      	ldrb	r3, [r4, #20]
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d063      	beq.n	8011be6 <ucdr_serialize_int32_t+0x116>
 8011b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b22:	702b      	strb	r3, [r5, #0]
 8011b24:	2e00      	cmp	r6, #0
 8011b26:	d051      	beq.n	8011bcc <ucdr_serialize_int32_t+0xfc>
 8011b28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b2c:	2e01      	cmp	r6, #1
 8011b2e:	706b      	strb	r3, [r5, #1]
 8011b30:	d050      	beq.n	8011bd4 <ucdr_serialize_int32_t+0x104>
 8011b32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011b36:	2e02      	cmp	r6, #2
 8011b38:	70ab      	strb	r3, [r5, #2]
 8011b3a:	d04f      	beq.n	8011bdc <ucdr_serialize_int32_t+0x10c>
 8011b3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011b40:	70eb      	strb	r3, [r5, #3]
 8011b42:	6923      	ldr	r3, [r4, #16]
 8011b44:	2104      	movs	r1, #4
 8011b46:	68a2      	ldr	r2, [r4, #8]
 8011b48:	3304      	adds	r3, #4
 8011b4a:	7da0      	ldrb	r0, [r4, #22]
 8011b4c:	4442      	add	r2, r8
 8011b4e:	7561      	strb	r1, [r4, #21]
 8011b50:	1b9e      	subs	r6, r3, r6
 8011b52:	f080 0001 	eor.w	r0, r0, #1
 8011b56:	60a2      	str	r2, [r4, #8]
 8011b58:	6126      	str	r6, [r4, #16]
 8011b5a:	b002      	add	sp, #8
 8011b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b60:	2104      	movs	r1, #4
 8011b62:	4620      	mov	r0, r4
 8011b64:	f000 fba6 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011b68:	b1d0      	cbz	r0, 8011ba0 <ucdr_serialize_int32_t+0xd0>
 8011b6a:	7d23      	ldrb	r3, [r4, #20]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	68a3      	ldr	r3, [r4, #8]
 8011b70:	d01c      	beq.n	8011bac <ucdr_serialize_int32_t+0xdc>
 8011b72:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011b76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b7a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011b7e:	7018      	strb	r0, [r3, #0]
 8011b80:	68a3      	ldr	r3, [r4, #8]
 8011b82:	705a      	strb	r2, [r3, #1]
 8011b84:	68a3      	ldr	r3, [r4, #8]
 8011b86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b8a:	7099      	strb	r1, [r3, #2]
 8011b8c:	68a3      	ldr	r3, [r4, #8]
 8011b8e:	70da      	strb	r2, [r3, #3]
 8011b90:	2104      	movs	r1, #4
 8011b92:	68a2      	ldr	r2, [r4, #8]
 8011b94:	6923      	ldr	r3, [r4, #16]
 8011b96:	440a      	add	r2, r1
 8011b98:	7561      	strb	r1, [r4, #21]
 8011b9a:	440b      	add	r3, r1
 8011b9c:	60a2      	str	r2, [r4, #8]
 8011b9e:	6123      	str	r3, [r4, #16]
 8011ba0:	7da0      	ldrb	r0, [r4, #22]
 8011ba2:	f080 0001 	eor.w	r0, r0, #1
 8011ba6:	b002      	add	sp, #8
 8011ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bac:	9a01      	ldr	r2, [sp, #4]
 8011bae:	601a      	str	r2, [r3, #0]
 8011bb0:	e7ee      	b.n	8011b90 <ucdr_serialize_int32_t+0xc0>
 8011bb2:	68a2      	ldr	r2, [r4, #8]
 8011bb4:	6923      	ldr	r3, [r4, #16]
 8011bb6:	7da0      	ldrb	r0, [r4, #22]
 8011bb8:	1b92      	subs	r2, r2, r6
 8011bba:	1b9b      	subs	r3, r3, r6
 8011bbc:	7567      	strb	r7, [r4, #21]
 8011bbe:	f080 0001 	eor.w	r0, r0, #1
 8011bc2:	60a2      	str	r2, [r4, #8]
 8011bc4:	6123      	str	r3, [r4, #16]
 8011bc6:	b002      	add	sp, #8
 8011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bcc:	68a3      	ldr	r3, [r4, #8]
 8011bce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011bd2:	701a      	strb	r2, [r3, #0]
 8011bd4:	68a3      	ldr	r3, [r4, #8]
 8011bd6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011bda:	701a      	strb	r2, [r3, #0]
 8011bdc:	68a3      	ldr	r3, [r4, #8]
 8011bde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011be2:	701a      	strb	r2, [r3, #0]
 8011be4:	e7ad      	b.n	8011b42 <ucdr_serialize_int32_t+0x72>
 8011be6:	4628      	mov	r0, r5
 8011be8:	ad01      	add	r5, sp, #4
 8011bea:	4632      	mov	r2, r6
 8011bec:	4629      	mov	r1, r5
 8011bee:	f001 ffe4 	bl	8013bba <memcpy>
 8011bf2:	4642      	mov	r2, r8
 8011bf4:	19a9      	adds	r1, r5, r6
 8011bf6:	68a0      	ldr	r0, [r4, #8]
 8011bf8:	f001 ffdf 	bl	8013bba <memcpy>
 8011bfc:	e7a1      	b.n	8011b42 <ucdr_serialize_int32_t+0x72>
 8011bfe:	bf00      	nop

08011c00 <ucdr_deserialize_int32_t>:
 8011c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c04:	4604      	mov	r4, r0
 8011c06:	460d      	mov	r5, r1
 8011c08:	2104      	movs	r1, #4
 8011c0a:	f000 fb77 	bl	80122fc <ucdr_buffer_alignment>
 8011c0e:	4601      	mov	r1, r0
 8011c10:	4620      	mov	r0, r4
 8011c12:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011c16:	f000 fbb5 	bl	8012384 <ucdr_advance_buffer>
 8011c1a:	2104      	movs	r1, #4
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	f000 fb3d 	bl	801229c <ucdr_check_buffer_available_for>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d138      	bne.n	8011c98 <ucdr_deserialize_int32_t+0x98>
 8011c26:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011c2a:	42b7      	cmp	r7, r6
 8011c2c:	d92f      	bls.n	8011c8e <ucdr_deserialize_int32_t+0x8e>
 8011c2e:	6923      	ldr	r3, [r4, #16]
 8011c30:	4620      	mov	r0, r4
 8011c32:	60a7      	str	r7, [r4, #8]
 8011c34:	1bbf      	subs	r7, r7, r6
 8011c36:	443b      	add	r3, r7
 8011c38:	f1c7 0904 	rsb	r9, r7, #4
 8011c3c:	6123      	str	r3, [r4, #16]
 8011c3e:	4649      	mov	r1, r9
 8011c40:	f000 fb38 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	d046      	beq.n	8011cd6 <ucdr_deserialize_int32_t+0xd6>
 8011c48:	7d23      	ldrb	r3, [r4, #20]
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d05c      	beq.n	8011d08 <ucdr_deserialize_int32_t+0x108>
 8011c4e:	78f3      	ldrb	r3, [r6, #3]
 8011c50:	702b      	strb	r3, [r5, #0]
 8011c52:	2f00      	cmp	r7, #0
 8011c54:	d04c      	beq.n	8011cf0 <ucdr_deserialize_int32_t+0xf0>
 8011c56:	78b3      	ldrb	r3, [r6, #2]
 8011c58:	2f01      	cmp	r7, #1
 8011c5a:	706b      	strb	r3, [r5, #1]
 8011c5c:	f105 0302 	add.w	r3, r5, #2
 8011c60:	d04a      	beq.n	8011cf8 <ucdr_deserialize_int32_t+0xf8>
 8011c62:	7873      	ldrb	r3, [r6, #1]
 8011c64:	2f02      	cmp	r7, #2
 8011c66:	70ab      	strb	r3, [r5, #2]
 8011c68:	f105 0303 	add.w	r3, r5, #3
 8011c6c:	d048      	beq.n	8011d00 <ucdr_deserialize_int32_t+0x100>
 8011c6e:	7833      	ldrb	r3, [r6, #0]
 8011c70:	70eb      	strb	r3, [r5, #3]
 8011c72:	6923      	ldr	r3, [r4, #16]
 8011c74:	2104      	movs	r1, #4
 8011c76:	68a2      	ldr	r2, [r4, #8]
 8011c78:	3304      	adds	r3, #4
 8011c7a:	7da0      	ldrb	r0, [r4, #22]
 8011c7c:	444a      	add	r2, r9
 8011c7e:	7561      	strb	r1, [r4, #21]
 8011c80:	1bdb      	subs	r3, r3, r7
 8011c82:	f080 0001 	eor.w	r0, r0, #1
 8011c86:	60a2      	str	r2, [r4, #8]
 8011c88:	6123      	str	r3, [r4, #16]
 8011c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c8e:	2104      	movs	r1, #4
 8011c90:	4620      	mov	r0, r4
 8011c92:	f000 fb0f 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011c96:	b1b0      	cbz	r0, 8011cc6 <ucdr_deserialize_int32_t+0xc6>
 8011c98:	7d23      	ldrb	r3, [r4, #20]
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	68a3      	ldr	r3, [r4, #8]
 8011c9e:	d017      	beq.n	8011cd0 <ucdr_deserialize_int32_t+0xd0>
 8011ca0:	78db      	ldrb	r3, [r3, #3]
 8011ca2:	702b      	strb	r3, [r5, #0]
 8011ca4:	68a3      	ldr	r3, [r4, #8]
 8011ca6:	789b      	ldrb	r3, [r3, #2]
 8011ca8:	706b      	strb	r3, [r5, #1]
 8011caa:	68a3      	ldr	r3, [r4, #8]
 8011cac:	785b      	ldrb	r3, [r3, #1]
 8011cae:	70ab      	strb	r3, [r5, #2]
 8011cb0:	68a3      	ldr	r3, [r4, #8]
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	70eb      	strb	r3, [r5, #3]
 8011cb6:	2104      	movs	r1, #4
 8011cb8:	68a2      	ldr	r2, [r4, #8]
 8011cba:	6923      	ldr	r3, [r4, #16]
 8011cbc:	440a      	add	r2, r1
 8011cbe:	7561      	strb	r1, [r4, #21]
 8011cc0:	440b      	add	r3, r1
 8011cc2:	60a2      	str	r2, [r4, #8]
 8011cc4:	6123      	str	r3, [r4, #16]
 8011cc6:	7da0      	ldrb	r0, [r4, #22]
 8011cc8:	f080 0001 	eor.w	r0, r0, #1
 8011ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	602b      	str	r3, [r5, #0]
 8011cd4:	e7ef      	b.n	8011cb6 <ucdr_deserialize_int32_t+0xb6>
 8011cd6:	68a2      	ldr	r2, [r4, #8]
 8011cd8:	6923      	ldr	r3, [r4, #16]
 8011cda:	1bd2      	subs	r2, r2, r7
 8011cdc:	7da0      	ldrb	r0, [r4, #22]
 8011cde:	1bdb      	subs	r3, r3, r7
 8011ce0:	f884 8015 	strb.w	r8, [r4, #21]
 8011ce4:	f080 0001 	eor.w	r0, r0, #1
 8011ce8:	60a2      	str	r2, [r4, #8]
 8011cea:	6123      	str	r3, [r4, #16]
 8011cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cf0:	68a3      	ldr	r3, [r4, #8]
 8011cf2:	789b      	ldrb	r3, [r3, #2]
 8011cf4:	706b      	strb	r3, [r5, #1]
 8011cf6:	1cab      	adds	r3, r5, #2
 8011cf8:	68a2      	ldr	r2, [r4, #8]
 8011cfa:	7852      	ldrb	r2, [r2, #1]
 8011cfc:	f803 2b01 	strb.w	r2, [r3], #1
 8011d00:	68a2      	ldr	r2, [r4, #8]
 8011d02:	7812      	ldrb	r2, [r2, #0]
 8011d04:	701a      	strb	r2, [r3, #0]
 8011d06:	e7b4      	b.n	8011c72 <ucdr_deserialize_int32_t+0x72>
 8011d08:	4631      	mov	r1, r6
 8011d0a:	463a      	mov	r2, r7
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	f001 ff54 	bl	8013bba <memcpy>
 8011d12:	464a      	mov	r2, r9
 8011d14:	19e8      	adds	r0, r5, r7
 8011d16:	68a1      	ldr	r1, [r4, #8]
 8011d18:	f001 ff4f 	bl	8013bba <memcpy>
 8011d1c:	e7a9      	b.n	8011c72 <ucdr_deserialize_int32_t+0x72>
 8011d1e:	bf00      	nop

08011d20 <ucdr_serialize_float>:
 8011d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d24:	4604      	mov	r4, r0
 8011d26:	b082      	sub	sp, #8
 8011d28:	2104      	movs	r1, #4
 8011d2a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011d2e:	f000 fae5 	bl	80122fc <ucdr_buffer_alignment>
 8011d32:	4601      	mov	r1, r0
 8011d34:	4620      	mov	r0, r4
 8011d36:	7d67      	ldrb	r7, [r4, #21]
 8011d38:	f000 fb24 	bl	8012384 <ucdr_advance_buffer>
 8011d3c:	2104      	movs	r1, #4
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f000 faac 	bl	801229c <ucdr_check_buffer_available_for>
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d139      	bne.n	8011dbc <ucdr_serialize_float+0x9c>
 8011d48:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011d4c:	42ab      	cmp	r3, r5
 8011d4e:	d930      	bls.n	8011db2 <ucdr_serialize_float+0x92>
 8011d50:	1b5e      	subs	r6, r3, r5
 8011d52:	60a3      	str	r3, [r4, #8]
 8011d54:	6923      	ldr	r3, [r4, #16]
 8011d56:	4620      	mov	r0, r4
 8011d58:	f1c6 0804 	rsb	r8, r6, #4
 8011d5c:	4433      	add	r3, r6
 8011d5e:	4641      	mov	r1, r8
 8011d60:	6123      	str	r3, [r4, #16]
 8011d62:	f000 faa7 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011d66:	2800      	cmp	r0, #0
 8011d68:	d04c      	beq.n	8011e04 <ucdr_serialize_float+0xe4>
 8011d6a:	7d23      	ldrb	r3, [r4, #20]
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d063      	beq.n	8011e38 <ucdr_serialize_float+0x118>
 8011d70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d74:	702b      	strb	r3, [r5, #0]
 8011d76:	2e00      	cmp	r6, #0
 8011d78:	d051      	beq.n	8011e1e <ucdr_serialize_float+0xfe>
 8011d7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d7e:	2e01      	cmp	r6, #1
 8011d80:	706b      	strb	r3, [r5, #1]
 8011d82:	d050      	beq.n	8011e26 <ucdr_serialize_float+0x106>
 8011d84:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011d88:	2e02      	cmp	r6, #2
 8011d8a:	70ab      	strb	r3, [r5, #2]
 8011d8c:	d04f      	beq.n	8011e2e <ucdr_serialize_float+0x10e>
 8011d8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011d92:	70eb      	strb	r3, [r5, #3]
 8011d94:	6923      	ldr	r3, [r4, #16]
 8011d96:	2104      	movs	r1, #4
 8011d98:	68a2      	ldr	r2, [r4, #8]
 8011d9a:	3304      	adds	r3, #4
 8011d9c:	7da0      	ldrb	r0, [r4, #22]
 8011d9e:	4442      	add	r2, r8
 8011da0:	7561      	strb	r1, [r4, #21]
 8011da2:	1b9e      	subs	r6, r3, r6
 8011da4:	f080 0001 	eor.w	r0, r0, #1
 8011da8:	60a2      	str	r2, [r4, #8]
 8011daa:	6126      	str	r6, [r4, #16]
 8011dac:	b002      	add	sp, #8
 8011dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db2:	2104      	movs	r1, #4
 8011db4:	4620      	mov	r0, r4
 8011db6:	f000 fa7d 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011dba:	b1d0      	cbz	r0, 8011df2 <ucdr_serialize_float+0xd2>
 8011dbc:	7d23      	ldrb	r3, [r4, #20]
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	68a3      	ldr	r3, [r4, #8]
 8011dc2:	d01c      	beq.n	8011dfe <ucdr_serialize_float+0xde>
 8011dc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011dc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011dcc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011dd0:	7018      	strb	r0, [r3, #0]
 8011dd2:	68a3      	ldr	r3, [r4, #8]
 8011dd4:	705a      	strb	r2, [r3, #1]
 8011dd6:	68a3      	ldr	r3, [r4, #8]
 8011dd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011ddc:	7099      	strb	r1, [r3, #2]
 8011dde:	68a3      	ldr	r3, [r4, #8]
 8011de0:	70da      	strb	r2, [r3, #3]
 8011de2:	2104      	movs	r1, #4
 8011de4:	68a2      	ldr	r2, [r4, #8]
 8011de6:	6923      	ldr	r3, [r4, #16]
 8011de8:	440a      	add	r2, r1
 8011dea:	7561      	strb	r1, [r4, #21]
 8011dec:	440b      	add	r3, r1
 8011dee:	60a2      	str	r2, [r4, #8]
 8011df0:	6123      	str	r3, [r4, #16]
 8011df2:	7da0      	ldrb	r0, [r4, #22]
 8011df4:	f080 0001 	eor.w	r0, r0, #1
 8011df8:	b002      	add	sp, #8
 8011dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dfe:	9a01      	ldr	r2, [sp, #4]
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	e7ee      	b.n	8011de2 <ucdr_serialize_float+0xc2>
 8011e04:	68a2      	ldr	r2, [r4, #8]
 8011e06:	6923      	ldr	r3, [r4, #16]
 8011e08:	7da0      	ldrb	r0, [r4, #22]
 8011e0a:	1b92      	subs	r2, r2, r6
 8011e0c:	1b9b      	subs	r3, r3, r6
 8011e0e:	7567      	strb	r7, [r4, #21]
 8011e10:	f080 0001 	eor.w	r0, r0, #1
 8011e14:	60a2      	str	r2, [r4, #8]
 8011e16:	6123      	str	r3, [r4, #16]
 8011e18:	b002      	add	sp, #8
 8011e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e1e:	68a3      	ldr	r3, [r4, #8]
 8011e20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e24:	701a      	strb	r2, [r3, #0]
 8011e26:	68a3      	ldr	r3, [r4, #8]
 8011e28:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e2c:	701a      	strb	r2, [r3, #0]
 8011e2e:	68a3      	ldr	r3, [r4, #8]
 8011e30:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e34:	701a      	strb	r2, [r3, #0]
 8011e36:	e7ad      	b.n	8011d94 <ucdr_serialize_float+0x74>
 8011e38:	4628      	mov	r0, r5
 8011e3a:	ad01      	add	r5, sp, #4
 8011e3c:	4632      	mov	r2, r6
 8011e3e:	4629      	mov	r1, r5
 8011e40:	f001 febb 	bl	8013bba <memcpy>
 8011e44:	4642      	mov	r2, r8
 8011e46:	19a9      	adds	r1, r5, r6
 8011e48:	68a0      	ldr	r0, [r4, #8]
 8011e4a:	f001 feb6 	bl	8013bba <memcpy>
 8011e4e:	e7a1      	b.n	8011d94 <ucdr_serialize_float+0x74>

08011e50 <ucdr_deserialize_float>:
 8011e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e54:	4604      	mov	r4, r0
 8011e56:	460d      	mov	r5, r1
 8011e58:	2104      	movs	r1, #4
 8011e5a:	f000 fa4f 	bl	80122fc <ucdr_buffer_alignment>
 8011e5e:	4601      	mov	r1, r0
 8011e60:	4620      	mov	r0, r4
 8011e62:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011e66:	f000 fa8d 	bl	8012384 <ucdr_advance_buffer>
 8011e6a:	2104      	movs	r1, #4
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f000 fa15 	bl	801229c <ucdr_check_buffer_available_for>
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d138      	bne.n	8011ee8 <ucdr_deserialize_float+0x98>
 8011e76:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011e7a:	42b7      	cmp	r7, r6
 8011e7c:	d92f      	bls.n	8011ede <ucdr_deserialize_float+0x8e>
 8011e7e:	6923      	ldr	r3, [r4, #16]
 8011e80:	4620      	mov	r0, r4
 8011e82:	60a7      	str	r7, [r4, #8]
 8011e84:	1bbf      	subs	r7, r7, r6
 8011e86:	443b      	add	r3, r7
 8011e88:	f1c7 0904 	rsb	r9, r7, #4
 8011e8c:	6123      	str	r3, [r4, #16]
 8011e8e:	4649      	mov	r1, r9
 8011e90:	f000 fa10 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	d046      	beq.n	8011f26 <ucdr_deserialize_float+0xd6>
 8011e98:	7d23      	ldrb	r3, [r4, #20]
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d05c      	beq.n	8011f58 <ucdr_deserialize_float+0x108>
 8011e9e:	78f3      	ldrb	r3, [r6, #3]
 8011ea0:	702b      	strb	r3, [r5, #0]
 8011ea2:	2f00      	cmp	r7, #0
 8011ea4:	d04c      	beq.n	8011f40 <ucdr_deserialize_float+0xf0>
 8011ea6:	78b3      	ldrb	r3, [r6, #2]
 8011ea8:	2f01      	cmp	r7, #1
 8011eaa:	706b      	strb	r3, [r5, #1]
 8011eac:	f105 0302 	add.w	r3, r5, #2
 8011eb0:	d04a      	beq.n	8011f48 <ucdr_deserialize_float+0xf8>
 8011eb2:	7873      	ldrb	r3, [r6, #1]
 8011eb4:	2f02      	cmp	r7, #2
 8011eb6:	70ab      	strb	r3, [r5, #2]
 8011eb8:	f105 0303 	add.w	r3, r5, #3
 8011ebc:	d048      	beq.n	8011f50 <ucdr_deserialize_float+0x100>
 8011ebe:	7833      	ldrb	r3, [r6, #0]
 8011ec0:	70eb      	strb	r3, [r5, #3]
 8011ec2:	6923      	ldr	r3, [r4, #16]
 8011ec4:	2104      	movs	r1, #4
 8011ec6:	68a2      	ldr	r2, [r4, #8]
 8011ec8:	3304      	adds	r3, #4
 8011eca:	7da0      	ldrb	r0, [r4, #22]
 8011ecc:	444a      	add	r2, r9
 8011ece:	7561      	strb	r1, [r4, #21]
 8011ed0:	1bdb      	subs	r3, r3, r7
 8011ed2:	f080 0001 	eor.w	r0, r0, #1
 8011ed6:	60a2      	str	r2, [r4, #8]
 8011ed8:	6123      	str	r3, [r4, #16]
 8011eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ede:	2104      	movs	r1, #4
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f000 f9e7 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011ee6:	b1b0      	cbz	r0, 8011f16 <ucdr_deserialize_float+0xc6>
 8011ee8:	7d23      	ldrb	r3, [r4, #20]
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	68a3      	ldr	r3, [r4, #8]
 8011eee:	d017      	beq.n	8011f20 <ucdr_deserialize_float+0xd0>
 8011ef0:	78db      	ldrb	r3, [r3, #3]
 8011ef2:	702b      	strb	r3, [r5, #0]
 8011ef4:	68a3      	ldr	r3, [r4, #8]
 8011ef6:	789b      	ldrb	r3, [r3, #2]
 8011ef8:	706b      	strb	r3, [r5, #1]
 8011efa:	68a3      	ldr	r3, [r4, #8]
 8011efc:	785b      	ldrb	r3, [r3, #1]
 8011efe:	70ab      	strb	r3, [r5, #2]
 8011f00:	68a3      	ldr	r3, [r4, #8]
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	70eb      	strb	r3, [r5, #3]
 8011f06:	2104      	movs	r1, #4
 8011f08:	68a2      	ldr	r2, [r4, #8]
 8011f0a:	6923      	ldr	r3, [r4, #16]
 8011f0c:	440a      	add	r2, r1
 8011f0e:	7561      	strb	r1, [r4, #21]
 8011f10:	440b      	add	r3, r1
 8011f12:	60a2      	str	r2, [r4, #8]
 8011f14:	6123      	str	r3, [r4, #16]
 8011f16:	7da0      	ldrb	r0, [r4, #22]
 8011f18:	f080 0001 	eor.w	r0, r0, #1
 8011f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	602b      	str	r3, [r5, #0]
 8011f24:	e7ef      	b.n	8011f06 <ucdr_deserialize_float+0xb6>
 8011f26:	68a2      	ldr	r2, [r4, #8]
 8011f28:	6923      	ldr	r3, [r4, #16]
 8011f2a:	1bd2      	subs	r2, r2, r7
 8011f2c:	7da0      	ldrb	r0, [r4, #22]
 8011f2e:	1bdb      	subs	r3, r3, r7
 8011f30:	f884 8015 	strb.w	r8, [r4, #21]
 8011f34:	f080 0001 	eor.w	r0, r0, #1
 8011f38:	60a2      	str	r2, [r4, #8]
 8011f3a:	6123      	str	r3, [r4, #16]
 8011f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f40:	68a3      	ldr	r3, [r4, #8]
 8011f42:	789b      	ldrb	r3, [r3, #2]
 8011f44:	706b      	strb	r3, [r5, #1]
 8011f46:	1cab      	adds	r3, r5, #2
 8011f48:	68a2      	ldr	r2, [r4, #8]
 8011f4a:	7852      	ldrb	r2, [r2, #1]
 8011f4c:	f803 2b01 	strb.w	r2, [r3], #1
 8011f50:	68a2      	ldr	r2, [r4, #8]
 8011f52:	7812      	ldrb	r2, [r2, #0]
 8011f54:	701a      	strb	r2, [r3, #0]
 8011f56:	e7b4      	b.n	8011ec2 <ucdr_deserialize_float+0x72>
 8011f58:	4631      	mov	r1, r6
 8011f5a:	463a      	mov	r2, r7
 8011f5c:	4628      	mov	r0, r5
 8011f5e:	f001 fe2c 	bl	8013bba <memcpy>
 8011f62:	464a      	mov	r2, r9
 8011f64:	19e8      	adds	r0, r5, r7
 8011f66:	68a1      	ldr	r1, [r4, #8]
 8011f68:	f001 fe27 	bl	8013bba <memcpy>
 8011f6c:	e7a9      	b.n	8011ec2 <ucdr_deserialize_float+0x72>
 8011f6e:	bf00      	nop

08011f70 <ucdr_serialize_double>:
 8011f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f74:	4604      	mov	r4, r0
 8011f76:	b082      	sub	sp, #8
 8011f78:	2108      	movs	r1, #8
 8011f7a:	ed8d 0b00 	vstr	d0, [sp]
 8011f7e:	f000 f9bd 	bl	80122fc <ucdr_buffer_alignment>
 8011f82:	4601      	mov	r1, r0
 8011f84:	4620      	mov	r0, r4
 8011f86:	7d67      	ldrb	r7, [r4, #21]
 8011f88:	f000 f9fc 	bl	8012384 <ucdr_advance_buffer>
 8011f8c:	2108      	movs	r1, #8
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f000 f984 	bl	801229c <ucdr_check_buffer_available_for>
 8011f94:	2800      	cmp	r0, #0
 8011f96:	d14e      	bne.n	8012036 <ucdr_serialize_double+0xc6>
 8011f98:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011f9c:	42ab      	cmp	r3, r5
 8011f9e:	d945      	bls.n	801202c <ucdr_serialize_double+0xbc>
 8011fa0:	1b5e      	subs	r6, r3, r5
 8011fa2:	60a3      	str	r3, [r4, #8]
 8011fa4:	6923      	ldr	r3, [r4, #16]
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f1c6 0808 	rsb	r8, r6, #8
 8011fac:	4433      	add	r3, r6
 8011fae:	4641      	mov	r1, r8
 8011fb0:	6123      	str	r3, [r4, #16]
 8011fb2:	f000 f97f 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d074      	beq.n	80120a4 <ucdr_serialize_double+0x134>
 8011fba:	7d23      	ldrb	r3, [r4, #20]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	f000 809b 	beq.w	80120f8 <ucdr_serialize_double+0x188>
 8011fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011fc6:	702b      	strb	r3, [r5, #0]
 8011fc8:	2e00      	cmp	r6, #0
 8011fca:	d078      	beq.n	80120be <ucdr_serialize_double+0x14e>
 8011fcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011fd0:	2e01      	cmp	r6, #1
 8011fd2:	706b      	strb	r3, [r5, #1]
 8011fd4:	d077      	beq.n	80120c6 <ucdr_serialize_double+0x156>
 8011fd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011fda:	2e02      	cmp	r6, #2
 8011fdc:	70ab      	strb	r3, [r5, #2]
 8011fde:	d076      	beq.n	80120ce <ucdr_serialize_double+0x15e>
 8011fe0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011fe4:	2e03      	cmp	r6, #3
 8011fe6:	70eb      	strb	r3, [r5, #3]
 8011fe8:	d075      	beq.n	80120d6 <ucdr_serialize_double+0x166>
 8011fea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011fee:	2e04      	cmp	r6, #4
 8011ff0:	712b      	strb	r3, [r5, #4]
 8011ff2:	d074      	beq.n	80120de <ucdr_serialize_double+0x16e>
 8011ff4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011ff8:	2e05      	cmp	r6, #5
 8011ffa:	716b      	strb	r3, [r5, #5]
 8011ffc:	d073      	beq.n	80120e6 <ucdr_serialize_double+0x176>
 8011ffe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012002:	2e06      	cmp	r6, #6
 8012004:	71ab      	strb	r3, [r5, #6]
 8012006:	d072      	beq.n	80120ee <ucdr_serialize_double+0x17e>
 8012008:	f89d 3000 	ldrb.w	r3, [sp]
 801200c:	71eb      	strb	r3, [r5, #7]
 801200e:	6923      	ldr	r3, [r4, #16]
 8012010:	2108      	movs	r1, #8
 8012012:	68a2      	ldr	r2, [r4, #8]
 8012014:	3308      	adds	r3, #8
 8012016:	7da0      	ldrb	r0, [r4, #22]
 8012018:	4442      	add	r2, r8
 801201a:	7561      	strb	r1, [r4, #21]
 801201c:	1b9e      	subs	r6, r3, r6
 801201e:	f080 0001 	eor.w	r0, r0, #1
 8012022:	60a2      	str	r2, [r4, #8]
 8012024:	6126      	str	r6, [r4, #16]
 8012026:	b002      	add	sp, #8
 8012028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801202c:	2108      	movs	r1, #8
 801202e:	4620      	mov	r0, r4
 8012030:	f000 f940 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8012034:	b350      	cbz	r0, 801208c <ucdr_serialize_double+0x11c>
 8012036:	7d23      	ldrb	r3, [r4, #20]
 8012038:	2b01      	cmp	r3, #1
 801203a:	d02d      	beq.n	8012098 <ucdr_serialize_double+0x128>
 801203c:	68a3      	ldr	r3, [r4, #8]
 801203e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012042:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012046:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801204a:	7018      	strb	r0, [r3, #0]
 801204c:	68a3      	ldr	r3, [r4, #8]
 801204e:	705a      	strb	r2, [r3, #1]
 8012050:	68a3      	ldr	r3, [r4, #8]
 8012052:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012056:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801205a:	7099      	strb	r1, [r3, #2]
 801205c:	68a3      	ldr	r3, [r4, #8]
 801205e:	70da      	strb	r2, [r3, #3]
 8012060:	68a3      	ldr	r3, [r4, #8]
 8012062:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012066:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801206a:	7118      	strb	r0, [r3, #4]
 801206c:	68a3      	ldr	r3, [r4, #8]
 801206e:	715a      	strb	r2, [r3, #5]
 8012070:	68a3      	ldr	r3, [r4, #8]
 8012072:	f89d 2000 	ldrb.w	r2, [sp]
 8012076:	7199      	strb	r1, [r3, #6]
 8012078:	68a3      	ldr	r3, [r4, #8]
 801207a:	71da      	strb	r2, [r3, #7]
 801207c:	2108      	movs	r1, #8
 801207e:	68a2      	ldr	r2, [r4, #8]
 8012080:	6923      	ldr	r3, [r4, #16]
 8012082:	440a      	add	r2, r1
 8012084:	7561      	strb	r1, [r4, #21]
 8012086:	440b      	add	r3, r1
 8012088:	60a2      	str	r2, [r4, #8]
 801208a:	6123      	str	r3, [r4, #16]
 801208c:	7da0      	ldrb	r0, [r4, #22]
 801208e:	f080 0001 	eor.w	r0, r0, #1
 8012092:	b002      	add	sp, #8
 8012094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012098:	466b      	mov	r3, sp
 801209a:	68a2      	ldr	r2, [r4, #8]
 801209c:	cb03      	ldmia	r3!, {r0, r1}
 801209e:	6010      	str	r0, [r2, #0]
 80120a0:	6051      	str	r1, [r2, #4]
 80120a2:	e7eb      	b.n	801207c <ucdr_serialize_double+0x10c>
 80120a4:	68a2      	ldr	r2, [r4, #8]
 80120a6:	6923      	ldr	r3, [r4, #16]
 80120a8:	7da0      	ldrb	r0, [r4, #22]
 80120aa:	1b92      	subs	r2, r2, r6
 80120ac:	1b9b      	subs	r3, r3, r6
 80120ae:	7567      	strb	r7, [r4, #21]
 80120b0:	f080 0001 	eor.w	r0, r0, #1
 80120b4:	60a2      	str	r2, [r4, #8]
 80120b6:	6123      	str	r3, [r4, #16]
 80120b8:	b002      	add	sp, #8
 80120ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120be:	68a3      	ldr	r3, [r4, #8]
 80120c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120c4:	701a      	strb	r2, [r3, #0]
 80120c6:	68a3      	ldr	r3, [r4, #8]
 80120c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80120cc:	701a      	strb	r2, [r3, #0]
 80120ce:	68a3      	ldr	r3, [r4, #8]
 80120d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80120d4:	701a      	strb	r2, [r3, #0]
 80120d6:	68a3      	ldr	r3, [r4, #8]
 80120d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80120dc:	701a      	strb	r2, [r3, #0]
 80120de:	68a3      	ldr	r3, [r4, #8]
 80120e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80120e4:	701a      	strb	r2, [r3, #0]
 80120e6:	68a3      	ldr	r3, [r4, #8]
 80120e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80120ec:	701a      	strb	r2, [r3, #0]
 80120ee:	68a3      	ldr	r3, [r4, #8]
 80120f0:	f89d 2000 	ldrb.w	r2, [sp]
 80120f4:	701a      	strb	r2, [r3, #0]
 80120f6:	e78a      	b.n	801200e <ucdr_serialize_double+0x9e>
 80120f8:	4628      	mov	r0, r5
 80120fa:	466d      	mov	r5, sp
 80120fc:	4632      	mov	r2, r6
 80120fe:	4629      	mov	r1, r5
 8012100:	f001 fd5b 	bl	8013bba <memcpy>
 8012104:	4642      	mov	r2, r8
 8012106:	19a9      	adds	r1, r5, r6
 8012108:	68a0      	ldr	r0, [r4, #8]
 801210a:	f001 fd56 	bl	8013bba <memcpy>
 801210e:	e77e      	b.n	801200e <ucdr_serialize_double+0x9e>

08012110 <ucdr_deserialize_double>:
 8012110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012114:	4604      	mov	r4, r0
 8012116:	460d      	mov	r5, r1
 8012118:	2108      	movs	r1, #8
 801211a:	f000 f8ef 	bl	80122fc <ucdr_buffer_alignment>
 801211e:	4601      	mov	r1, r0
 8012120:	4620      	mov	r0, r4
 8012122:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012126:	f000 f92d 	bl	8012384 <ucdr_advance_buffer>
 801212a:	2108      	movs	r1, #8
 801212c:	4620      	mov	r0, r4
 801212e:	f000 f8b5 	bl	801229c <ucdr_check_buffer_available_for>
 8012132:	2800      	cmp	r0, #0
 8012134:	d151      	bne.n	80121da <ucdr_deserialize_double+0xca>
 8012136:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801213a:	42be      	cmp	r6, r7
 801213c:	d948      	bls.n	80121d0 <ucdr_deserialize_double+0xc0>
 801213e:	6923      	ldr	r3, [r4, #16]
 8012140:	4620      	mov	r0, r4
 8012142:	60a6      	str	r6, [r4, #8]
 8012144:	1bf6      	subs	r6, r6, r7
 8012146:	4433      	add	r3, r6
 8012148:	f1c6 0908 	rsb	r9, r6, #8
 801214c:	6123      	str	r3, [r4, #16]
 801214e:	4649      	mov	r1, r9
 8012150:	f000 f8b0 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 8012154:	2800      	cmp	r0, #0
 8012156:	d06d      	beq.n	8012234 <ucdr_deserialize_double+0x124>
 8012158:	7d23      	ldrb	r3, [r4, #20]
 801215a:	2b01      	cmp	r3, #1
 801215c:	f000 8093 	beq.w	8012286 <ucdr_deserialize_double+0x176>
 8012160:	79fb      	ldrb	r3, [r7, #7]
 8012162:	702b      	strb	r3, [r5, #0]
 8012164:	2e00      	cmp	r6, #0
 8012166:	d072      	beq.n	801224e <ucdr_deserialize_double+0x13e>
 8012168:	79bb      	ldrb	r3, [r7, #6]
 801216a:	2e01      	cmp	r6, #1
 801216c:	706b      	strb	r3, [r5, #1]
 801216e:	f105 0302 	add.w	r3, r5, #2
 8012172:	d070      	beq.n	8012256 <ucdr_deserialize_double+0x146>
 8012174:	797b      	ldrb	r3, [r7, #5]
 8012176:	2e02      	cmp	r6, #2
 8012178:	70ab      	strb	r3, [r5, #2]
 801217a:	f105 0303 	add.w	r3, r5, #3
 801217e:	d06e      	beq.n	801225e <ucdr_deserialize_double+0x14e>
 8012180:	793b      	ldrb	r3, [r7, #4]
 8012182:	2e03      	cmp	r6, #3
 8012184:	70eb      	strb	r3, [r5, #3]
 8012186:	f105 0304 	add.w	r3, r5, #4
 801218a:	d06c      	beq.n	8012266 <ucdr_deserialize_double+0x156>
 801218c:	78fb      	ldrb	r3, [r7, #3]
 801218e:	2e04      	cmp	r6, #4
 8012190:	712b      	strb	r3, [r5, #4]
 8012192:	f105 0305 	add.w	r3, r5, #5
 8012196:	d06a      	beq.n	801226e <ucdr_deserialize_double+0x15e>
 8012198:	78bb      	ldrb	r3, [r7, #2]
 801219a:	2e05      	cmp	r6, #5
 801219c:	716b      	strb	r3, [r5, #5]
 801219e:	f105 0306 	add.w	r3, r5, #6
 80121a2:	d068      	beq.n	8012276 <ucdr_deserialize_double+0x166>
 80121a4:	787b      	ldrb	r3, [r7, #1]
 80121a6:	2e06      	cmp	r6, #6
 80121a8:	71ab      	strb	r3, [r5, #6]
 80121aa:	f105 0307 	add.w	r3, r5, #7
 80121ae:	d066      	beq.n	801227e <ucdr_deserialize_double+0x16e>
 80121b0:	783b      	ldrb	r3, [r7, #0]
 80121b2:	71eb      	strb	r3, [r5, #7]
 80121b4:	6923      	ldr	r3, [r4, #16]
 80121b6:	2108      	movs	r1, #8
 80121b8:	68a2      	ldr	r2, [r4, #8]
 80121ba:	3308      	adds	r3, #8
 80121bc:	7da0      	ldrb	r0, [r4, #22]
 80121be:	444a      	add	r2, r9
 80121c0:	7561      	strb	r1, [r4, #21]
 80121c2:	1b9e      	subs	r6, r3, r6
 80121c4:	f080 0001 	eor.w	r0, r0, #1
 80121c8:	60a2      	str	r2, [r4, #8]
 80121ca:	6126      	str	r6, [r4, #16]
 80121cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121d0:	2108      	movs	r1, #8
 80121d2:	4620      	mov	r0, r4
 80121d4:	f000 f86e 	bl	80122b4 <ucdr_check_final_buffer_behavior>
 80121d8:	b310      	cbz	r0, 8012220 <ucdr_deserialize_double+0x110>
 80121da:	7d23      	ldrb	r3, [r4, #20]
 80121dc:	2b01      	cmp	r3, #1
 80121de:	68a3      	ldr	r3, [r4, #8]
 80121e0:	d023      	beq.n	801222a <ucdr_deserialize_double+0x11a>
 80121e2:	79db      	ldrb	r3, [r3, #7]
 80121e4:	702b      	strb	r3, [r5, #0]
 80121e6:	68a3      	ldr	r3, [r4, #8]
 80121e8:	799b      	ldrb	r3, [r3, #6]
 80121ea:	706b      	strb	r3, [r5, #1]
 80121ec:	68a3      	ldr	r3, [r4, #8]
 80121ee:	795b      	ldrb	r3, [r3, #5]
 80121f0:	70ab      	strb	r3, [r5, #2]
 80121f2:	68a3      	ldr	r3, [r4, #8]
 80121f4:	791b      	ldrb	r3, [r3, #4]
 80121f6:	70eb      	strb	r3, [r5, #3]
 80121f8:	68a3      	ldr	r3, [r4, #8]
 80121fa:	78db      	ldrb	r3, [r3, #3]
 80121fc:	712b      	strb	r3, [r5, #4]
 80121fe:	68a3      	ldr	r3, [r4, #8]
 8012200:	789b      	ldrb	r3, [r3, #2]
 8012202:	716b      	strb	r3, [r5, #5]
 8012204:	68a3      	ldr	r3, [r4, #8]
 8012206:	785b      	ldrb	r3, [r3, #1]
 8012208:	71ab      	strb	r3, [r5, #6]
 801220a:	68a3      	ldr	r3, [r4, #8]
 801220c:	781b      	ldrb	r3, [r3, #0]
 801220e:	71eb      	strb	r3, [r5, #7]
 8012210:	2108      	movs	r1, #8
 8012212:	68a2      	ldr	r2, [r4, #8]
 8012214:	6923      	ldr	r3, [r4, #16]
 8012216:	440a      	add	r2, r1
 8012218:	7561      	strb	r1, [r4, #21]
 801221a:	440b      	add	r3, r1
 801221c:	60a2      	str	r2, [r4, #8]
 801221e:	6123      	str	r3, [r4, #16]
 8012220:	7da0      	ldrb	r0, [r4, #22]
 8012222:	f080 0001 	eor.w	r0, r0, #1
 8012226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	602a      	str	r2, [r5, #0]
 8012230:	606b      	str	r3, [r5, #4]
 8012232:	e7ed      	b.n	8012210 <ucdr_deserialize_double+0x100>
 8012234:	68a2      	ldr	r2, [r4, #8]
 8012236:	6923      	ldr	r3, [r4, #16]
 8012238:	1b92      	subs	r2, r2, r6
 801223a:	7da0      	ldrb	r0, [r4, #22]
 801223c:	1b9b      	subs	r3, r3, r6
 801223e:	f884 8015 	strb.w	r8, [r4, #21]
 8012242:	f080 0001 	eor.w	r0, r0, #1
 8012246:	60a2      	str	r2, [r4, #8]
 8012248:	6123      	str	r3, [r4, #16]
 801224a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801224e:	68a3      	ldr	r3, [r4, #8]
 8012250:	799b      	ldrb	r3, [r3, #6]
 8012252:	706b      	strb	r3, [r5, #1]
 8012254:	1cab      	adds	r3, r5, #2
 8012256:	68a2      	ldr	r2, [r4, #8]
 8012258:	7952      	ldrb	r2, [r2, #5]
 801225a:	f803 2b01 	strb.w	r2, [r3], #1
 801225e:	68a2      	ldr	r2, [r4, #8]
 8012260:	7912      	ldrb	r2, [r2, #4]
 8012262:	f803 2b01 	strb.w	r2, [r3], #1
 8012266:	68a2      	ldr	r2, [r4, #8]
 8012268:	78d2      	ldrb	r2, [r2, #3]
 801226a:	f803 2b01 	strb.w	r2, [r3], #1
 801226e:	68a2      	ldr	r2, [r4, #8]
 8012270:	7892      	ldrb	r2, [r2, #2]
 8012272:	f803 2b01 	strb.w	r2, [r3], #1
 8012276:	68a2      	ldr	r2, [r4, #8]
 8012278:	7852      	ldrb	r2, [r2, #1]
 801227a:	f803 2b01 	strb.w	r2, [r3], #1
 801227e:	68a2      	ldr	r2, [r4, #8]
 8012280:	7812      	ldrb	r2, [r2, #0]
 8012282:	701a      	strb	r2, [r3, #0]
 8012284:	e796      	b.n	80121b4 <ucdr_deserialize_double+0xa4>
 8012286:	4639      	mov	r1, r7
 8012288:	4632      	mov	r2, r6
 801228a:	4628      	mov	r0, r5
 801228c:	f001 fc95 	bl	8013bba <memcpy>
 8012290:	464a      	mov	r2, r9
 8012292:	19a8      	adds	r0, r5, r6
 8012294:	68a1      	ldr	r1, [r4, #8]
 8012296:	f001 fc90 	bl	8013bba <memcpy>
 801229a:	e78b      	b.n	80121b4 <ucdr_deserialize_double+0xa4>

0801229c <ucdr_check_buffer_available_for>:
 801229c:	7d83      	ldrb	r3, [r0, #22]
 801229e:	b93b      	cbnz	r3, 80122b0 <ucdr_check_buffer_available_for+0x14>
 80122a0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80122a4:	4419      	add	r1, r3
 80122a6:	4288      	cmp	r0, r1
 80122a8:	bf34      	ite	cc
 80122aa:	2000      	movcc	r0, #0
 80122ac:	2001      	movcs	r0, #1
 80122ae:	4770      	bx	lr
 80122b0:	2000      	movs	r0, #0
 80122b2:	4770      	bx	lr

080122b4 <ucdr_check_final_buffer_behavior>:
 80122b4:	7d83      	ldrb	r3, [r0, #22]
 80122b6:	b943      	cbnz	r3, 80122ca <ucdr_check_final_buffer_behavior+0x16>
 80122b8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80122bc:	b510      	push	{r4, lr}
 80122be:	4291      	cmp	r1, r2
 80122c0:	4604      	mov	r4, r0
 80122c2:	d205      	bcs.n	80122d0 <ucdr_check_final_buffer_behavior+0x1c>
 80122c4:	2301      	movs	r3, #1
 80122c6:	4618      	mov	r0, r3
 80122c8:	bd10      	pop	{r4, pc}
 80122ca:	2300      	movs	r3, #0
 80122cc:	4618      	mov	r0, r3
 80122ce:	4770      	bx	lr
 80122d0:	6982      	ldr	r2, [r0, #24]
 80122d2:	b13a      	cbz	r2, 80122e4 <ucdr_check_final_buffer_behavior+0x30>
 80122d4:	69c1      	ldr	r1, [r0, #28]
 80122d6:	4790      	blx	r2
 80122d8:	f080 0301 	eor.w	r3, r0, #1
 80122dc:	75a0      	strb	r0, [r4, #22]
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	4618      	mov	r0, r3
 80122e2:	bd10      	pop	{r4, pc}
 80122e4:	2001      	movs	r0, #1
 80122e6:	75a0      	strb	r0, [r4, #22]
 80122e8:	e7fa      	b.n	80122e0 <ucdr_check_final_buffer_behavior+0x2c>
 80122ea:	bf00      	nop

080122ec <ucdr_alignment>:
 80122ec:	fbb0 f2f1 	udiv	r2, r0, r1
 80122f0:	fb02 0011 	mls	r0, r2, r1, r0
 80122f4:	1e4b      	subs	r3, r1, #1
 80122f6:	1a08      	subs	r0, r1, r0
 80122f8:	4018      	ands	r0, r3
 80122fa:	4770      	bx	lr

080122fc <ucdr_buffer_alignment>:
 80122fc:	7d43      	ldrb	r3, [r0, #21]
 80122fe:	428b      	cmp	r3, r1
 8012300:	d209      	bcs.n	8012316 <ucdr_buffer_alignment+0x1a>
 8012302:	6903      	ldr	r3, [r0, #16]
 8012304:	1e4a      	subs	r2, r1, #1
 8012306:	fbb3 f0f1 	udiv	r0, r3, r1
 801230a:	fb01 3010 	mls	r0, r1, r0, r3
 801230e:	1a09      	subs	r1, r1, r0
 8012310:	ea01 0002 	and.w	r0, r1, r2
 8012314:	4770      	bx	lr
 8012316:	2000      	movs	r0, #0
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop

0801231c <ucdr_align_to>:
 801231c:	b538      	push	{r3, r4, r5, lr}
 801231e:	4604      	mov	r4, r0
 8012320:	460d      	mov	r5, r1
 8012322:	f7ff ffeb 	bl	80122fc <ucdr_buffer_alignment>
 8012326:	68a3      	ldr	r3, [r4, #8]
 8012328:	7565      	strb	r5, [r4, #21]
 801232a:	181a      	adds	r2, r3, r0
 801232c:	6923      	ldr	r3, [r4, #16]
 801232e:	4418      	add	r0, r3
 8012330:	6863      	ldr	r3, [r4, #4]
 8012332:	4293      	cmp	r3, r2
 8012334:	6120      	str	r0, [r4, #16]
 8012336:	bf28      	it	cs
 8012338:	4613      	movcs	r3, r2
 801233a:	60a3      	str	r3, [r4, #8]
 801233c:	bd38      	pop	{r3, r4, r5, pc}
 801233e:	bf00      	nop

08012340 <ucdr_buffer_remaining>:
 8012340:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012344:	1a10      	subs	r0, r2, r0
 8012346:	4770      	bx	lr

08012348 <ucdr_check_final_buffer_behavior_array>:
 8012348:	b538      	push	{r3, r4, r5, lr}
 801234a:	7d83      	ldrb	r3, [r0, #22]
 801234c:	b9a3      	cbnz	r3, 8012378 <ucdr_check_final_buffer_behavior_array+0x30>
 801234e:	4604      	mov	r4, r0
 8012350:	460d      	mov	r5, r1
 8012352:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8012356:	429a      	cmp	r2, r3
 8012358:	d300      	bcc.n	801235c <ucdr_check_final_buffer_behavior_array+0x14>
 801235a:	b931      	cbnz	r1, 801236a <ucdr_check_final_buffer_behavior_array+0x22>
 801235c:	4620      	mov	r0, r4
 801235e:	f7ff ffef 	bl	8012340 <ucdr_buffer_remaining>
 8012362:	42a8      	cmp	r0, r5
 8012364:	bf28      	it	cs
 8012366:	4628      	movcs	r0, r5
 8012368:	bd38      	pop	{r3, r4, r5, pc}
 801236a:	6983      	ldr	r3, [r0, #24]
 801236c:	b133      	cbz	r3, 801237c <ucdr_check_final_buffer_behavior_array+0x34>
 801236e:	69c1      	ldr	r1, [r0, #28]
 8012370:	4798      	blx	r3
 8012372:	75a0      	strb	r0, [r4, #22]
 8012374:	2800      	cmp	r0, #0
 8012376:	d0f1      	beq.n	801235c <ucdr_check_final_buffer_behavior_array+0x14>
 8012378:	2000      	movs	r0, #0
 801237a:	bd38      	pop	{r3, r4, r5, pc}
 801237c:	2301      	movs	r3, #1
 801237e:	7583      	strb	r3, [r0, #22]
 8012380:	e7fa      	b.n	8012378 <ucdr_check_final_buffer_behavior_array+0x30>
 8012382:	bf00      	nop

08012384 <ucdr_advance_buffer>:
 8012384:	b538      	push	{r3, r4, r5, lr}
 8012386:	4604      	mov	r4, r0
 8012388:	460d      	mov	r5, r1
 801238a:	f7ff ff87 	bl	801229c <ucdr_check_buffer_available_for>
 801238e:	b178      	cbz	r0, 80123b0 <ucdr_advance_buffer+0x2c>
 8012390:	6923      	ldr	r3, [r4, #16]
 8012392:	68a2      	ldr	r2, [r4, #8]
 8012394:	442b      	add	r3, r5
 8012396:	442a      	add	r2, r5
 8012398:	6123      	str	r3, [r4, #16]
 801239a:	2301      	movs	r3, #1
 801239c:	60a2      	str	r2, [r4, #8]
 801239e:	7563      	strb	r3, [r4, #21]
 80123a0:	bd38      	pop	{r3, r4, r5, pc}
 80123a2:	68a2      	ldr	r2, [r4, #8]
 80123a4:	1a2d      	subs	r5, r5, r0
 80123a6:	6923      	ldr	r3, [r4, #16]
 80123a8:	4402      	add	r2, r0
 80123aa:	4418      	add	r0, r3
 80123ac:	60a2      	str	r2, [r4, #8]
 80123ae:	6120      	str	r0, [r4, #16]
 80123b0:	4629      	mov	r1, r5
 80123b2:	2201      	movs	r2, #1
 80123b4:	4620      	mov	r0, r4
 80123b6:	f7ff ffc7 	bl	8012348 <ucdr_check_final_buffer_behavior_array>
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d1f1      	bne.n	80123a2 <ucdr_advance_buffer+0x1e>
 80123be:	2301      	movs	r3, #1
 80123c0:	7563      	strb	r3, [r4, #21]
 80123c2:	bd38      	pop	{r3, r4, r5, pc}

080123c4 <__default_zero_allocate>:
 80123c4:	f001 b802 	b.w	80133cc <calloc>

080123c8 <__default_reallocate>:
 80123c8:	f001 b8ec 	b.w	80135a4 <realloc>

080123cc <__default_deallocate>:
 80123cc:	f001 b834 	b.w	8013438 <free>

080123d0 <__default_allocate>:
 80123d0:	f001 b82a 	b.w	8013428 <malloc>

080123d4 <rcutils_get_default_allocator>:
 80123d4:	b510      	push	{r4, lr}
 80123d6:	4c05      	ldr	r4, [pc, #20]	@ (80123ec <rcutils_get_default_allocator+0x18>)
 80123d8:	4686      	mov	lr, r0
 80123da:	4684      	mov	ip, r0
 80123dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123e2:	6823      	ldr	r3, [r4, #0]
 80123e4:	4670      	mov	r0, lr
 80123e6:	f8cc 3000 	str.w	r3, [ip]
 80123ea:	bd10      	pop	{r4, pc}
 80123ec:	24000df8 	.word	0x24000df8

080123f0 <get_message_typesupport_handle_function>:
 80123f0:	b510      	push	{r4, lr}
 80123f2:	4604      	mov	r4, r0
 80123f4:	6800      	ldr	r0, [r0, #0]
 80123f6:	f7ed ff73 	bl	80002e0 <strcmp>
 80123fa:	2800      	cmp	r0, #0
 80123fc:	bf0c      	ite	eq
 80123fe:	4620      	moveq	r0, r4
 8012400:	2000      	movne	r0, #0
 8012402:	bd10      	pop	{r4, pc}

08012404 <get_service_typesupport_handle_function>:
 8012404:	b510      	push	{r4, lr}
 8012406:	4604      	mov	r4, r0
 8012408:	6800      	ldr	r0, [r0, #0]
 801240a:	f7ed ff69 	bl	80002e0 <strcmp>
 801240e:	2800      	cmp	r0, #0
 8012410:	bf0c      	ite	eq
 8012412:	4620      	moveq	r0, r4
 8012414:	2000      	movne	r0, #0
 8012416:	bd10      	pop	{r4, pc}

08012418 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801241c:	6805      	ldr	r5, [r0, #0]
 801241e:	4604      	mov	r4, r0
 8012420:	460e      	mov	r6, r1
 8012422:	4628      	mov	r0, r5
 8012424:	f7ed ff5c 	bl	80002e0 <strcmp>
 8012428:	b1c8      	cbz	r0, 801245e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801242a:	4b11      	ldr	r3, [pc, #68]	@ (8012470 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	429d      	cmp	r5, r3
 8012430:	d112      	bne.n	8012458 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012432:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012436:	f8d8 4000 	ldr.w	r4, [r8]
 801243a:	b16c      	cbz	r4, 8012458 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801243c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012440:	2700      	movs	r7, #0
 8012442:	3d04      	subs	r5, #4
 8012444:	4631      	mov	r1, r6
 8012446:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801244a:	f7ed ff49 	bl	80002e0 <strcmp>
 801244e:	00bb      	lsls	r3, r7, #2
 8012450:	b140      	cbz	r0, 8012464 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012452:	3701      	adds	r7, #1
 8012454:	42bc      	cmp	r4, r7
 8012456:	d1f5      	bne.n	8012444 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012458:	2000      	movs	r0, #0
 801245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801245e:	4620      	mov	r0, r4
 8012460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012464:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801246c:	58d3      	ldr	r3, [r2, r3]
 801246e:	4718      	bx	r3
 8012470:	24000e0c 	.word	0x24000e0c

08012474 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8012474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012478:	6805      	ldr	r5, [r0, #0]
 801247a:	4604      	mov	r4, r0
 801247c:	460e      	mov	r6, r1
 801247e:	4628      	mov	r0, r5
 8012480:	f7ed ff2e 	bl	80002e0 <strcmp>
 8012484:	b1c8      	cbz	r0, 80124ba <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8012486:	4b11      	ldr	r3, [pc, #68]	@ (80124cc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	429d      	cmp	r5, r3
 801248c:	d112      	bne.n	80124b4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801248e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012492:	f8d8 4000 	ldr.w	r4, [r8]
 8012496:	b16c      	cbz	r4, 80124b4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8012498:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801249c:	2700      	movs	r7, #0
 801249e:	3d04      	subs	r5, #4
 80124a0:	4631      	mov	r1, r6
 80124a2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80124a6:	f7ed ff1b 	bl	80002e0 <strcmp>
 80124aa:	00bb      	lsls	r3, r7, #2
 80124ac:	b140      	cbz	r0, 80124c0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80124ae:	3701      	adds	r7, #1
 80124b0:	42bc      	cmp	r4, r7
 80124b2:	d1f5      	bne.n	80124a0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80124b4:	2000      	movs	r0, #0
 80124b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ba:	4620      	mov	r0, r4
 80124bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80124c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124c8:	58d3      	ldr	r3, [r2, r3]
 80124ca:	4718      	bx	r3
 80124cc:	24000e0c 	.word	0x24000e0c

080124d0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80124d0:	f000 bcb4 	b.w	8012e3c <std_msgs__msg__Header__init>

080124d4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80124d4:	f000 bcd6 	b.w	8012e84 <std_msgs__msg__Header__fini>

080124d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80124d8:	b508      	push	{r3, lr}
 80124da:	f7fe ffd3 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80124de:	4b06      	ldr	r3, [pc, #24]	@ (80124f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80124e0:	4906      	ldr	r1, [pc, #24]	@ (80124fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	60c8      	str	r0, [r1, #12]
 80124e6:	b10a      	cbz	r2, 80124ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80124e8:	4803      	ldr	r0, [pc, #12]	@ (80124f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80124ea:	bd08      	pop	{r3, pc}
 80124ec:	4a04      	ldr	r2, [pc, #16]	@ (8012500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80124ee:	4802      	ldr	r0, [pc, #8]	@ (80124f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80124f0:	6812      	ldr	r2, [r2, #0]
 80124f2:	601a      	str	r2, [r3, #0]
 80124f4:	bd08      	pop	{r3, pc}
 80124f6:	bf00      	nop
 80124f8:	24000e8c 	.word	0x24000e8c
 80124fc:	24000e14 	.word	0x24000e14
 8012500:	24000e10 	.word	0x24000e10

08012504 <_Header__max_serialized_size>:
 8012504:	b500      	push	{lr}
 8012506:	b083      	sub	sp, #12
 8012508:	2301      	movs	r3, #1
 801250a:	2100      	movs	r1, #0
 801250c:	f10d 0007 	add.w	r0, sp, #7
 8012510:	f88d 3007 	strb.w	r3, [sp, #7]
 8012514:	f7ff f814 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8012518:	b003      	add	sp, #12
 801251a:	f85d fb04 	ldr.w	pc, [sp], #4
 801251e:	bf00      	nop

08012520 <get_serialized_size_std_msgs__msg__Header>:
 8012520:	b570      	push	{r4, r5, r6, lr}
 8012522:	4605      	mov	r5, r0
 8012524:	b168      	cbz	r0, 8012542 <get_serialized_size_std_msgs__msg__Header+0x22>
 8012526:	460c      	mov	r4, r1
 8012528:	f7fe ffba 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 801252c:	2104      	movs	r1, #4
 801252e:	1826      	adds	r6, r4, r0
 8012530:	f1c4 0405 	rsb	r4, r4, #5
 8012534:	4630      	mov	r0, r6
 8012536:	f7ff fed9 	bl	80122ec <ucdr_alignment>
 801253a:	68e9      	ldr	r1, [r5, #12]
 801253c:	440c      	add	r4, r1
 801253e:	4404      	add	r4, r0
 8012540:	19a0      	adds	r0, r4, r6
 8012542:	bd70      	pop	{r4, r5, r6, pc}

08012544 <_Header__cdr_deserialize>:
 8012544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012546:	460c      	mov	r4, r1
 8012548:	b083      	sub	sp, #12
 801254a:	b1e9      	cbz	r1, 8012588 <_Header__cdr_deserialize+0x44>
 801254c:	4606      	mov	r6, r0
 801254e:	f7ff f80b 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012552:	4603      	mov	r3, r0
 8012554:	4621      	mov	r1, r4
 8012556:	4630      	mov	r0, r6
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	68db      	ldr	r3, [r3, #12]
 801255c:	4798      	blx	r3
 801255e:	6927      	ldr	r7, [r4, #16]
 8012560:	ab01      	add	r3, sp, #4
 8012562:	68a1      	ldr	r1, [r4, #8]
 8012564:	463a      	mov	r2, r7
 8012566:	4630      	mov	r0, r6
 8012568:	f000 fc4e 	bl	8012e08 <ucdr_deserialize_sequence_char>
 801256c:	9b01      	ldr	r3, [sp, #4]
 801256e:	4605      	mov	r5, r0
 8012570:	b920      	cbnz	r0, 801257c <_Header__cdr_deserialize+0x38>
 8012572:	429f      	cmp	r7, r3
 8012574:	d30c      	bcc.n	8012590 <_Header__cdr_deserialize+0x4c>
 8012576:	4628      	mov	r0, r5
 8012578:	b003      	add	sp, #12
 801257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801257c:	b103      	cbz	r3, 8012580 <_Header__cdr_deserialize+0x3c>
 801257e:	3b01      	subs	r3, #1
 8012580:	4628      	mov	r0, r5
 8012582:	60e3      	str	r3, [r4, #12]
 8012584:	b003      	add	sp, #12
 8012586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012588:	460d      	mov	r5, r1
 801258a:	4628      	mov	r0, r5
 801258c:	b003      	add	sp, #12
 801258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012590:	2101      	movs	r1, #1
 8012592:	4630      	mov	r0, r6
 8012594:	75b5      	strb	r5, [r6, #22]
 8012596:	7571      	strb	r1, [r6, #21]
 8012598:	60e5      	str	r5, [r4, #12]
 801259a:	f7ff febf 	bl	801231c <ucdr_align_to>
 801259e:	4630      	mov	r0, r6
 80125a0:	9901      	ldr	r1, [sp, #4]
 80125a2:	f7ff feef 	bl	8012384 <ucdr_advance_buffer>
 80125a6:	4628      	mov	r0, r5
 80125a8:	b003      	add	sp, #12
 80125aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125ac <_Header__cdr_serialize>:
 80125ac:	b308      	cbz	r0, 80125f2 <_Header__cdr_serialize+0x46>
 80125ae:	b570      	push	{r4, r5, r6, lr}
 80125b0:	4604      	mov	r4, r0
 80125b2:	460d      	mov	r5, r1
 80125b4:	f7fe ffd8 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80125b8:	4603      	mov	r3, r0
 80125ba:	4629      	mov	r1, r5
 80125bc:	4620      	mov	r0, r4
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	689b      	ldr	r3, [r3, #8]
 80125c2:	4798      	blx	r3
 80125c4:	68a6      	ldr	r6, [r4, #8]
 80125c6:	b15e      	cbz	r6, 80125e0 <_Header__cdr_serialize+0x34>
 80125c8:	4630      	mov	r0, r6
 80125ca:	f7ed fe93 	bl	80002f4 <strlen>
 80125ce:	4603      	mov	r3, r0
 80125d0:	1c42      	adds	r2, r0, #1
 80125d2:	4631      	mov	r1, r6
 80125d4:	4628      	mov	r0, r5
 80125d6:	60e3      	str	r3, [r4, #12]
 80125d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125dc:	f000 bc02 	b.w	8012de4 <ucdr_serialize_sequence_char>
 80125e0:	4633      	mov	r3, r6
 80125e2:	4632      	mov	r2, r6
 80125e4:	4631      	mov	r1, r6
 80125e6:	4628      	mov	r0, r5
 80125e8:	60e3      	str	r3, [r4, #12]
 80125ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125ee:	f000 bbf9 	b.w	8012de4 <ucdr_serialize_sequence_char>
 80125f2:	4770      	bx	lr

080125f4 <_Header__get_serialized_size>:
 80125f4:	b538      	push	{r3, r4, r5, lr}
 80125f6:	4604      	mov	r4, r0
 80125f8:	b150      	cbz	r0, 8012610 <_Header__get_serialized_size+0x1c>
 80125fa:	2100      	movs	r1, #0
 80125fc:	f7fe ff50 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8012600:	2104      	movs	r1, #4
 8012602:	4605      	mov	r5, r0
 8012604:	f7ff fe72 	bl	80122ec <ucdr_alignment>
 8012608:	68e2      	ldr	r2, [r4, #12]
 801260a:	3205      	adds	r2, #5
 801260c:	1953      	adds	r3, r2, r5
 801260e:	4418      	add	r0, r3
 8012610:	bd38      	pop	{r3, r4, r5, pc}
 8012612:	bf00      	nop

08012614 <max_serialized_size_std_msgs__msg__Header>:
 8012614:	2301      	movs	r3, #1
 8012616:	b510      	push	{r4, lr}
 8012618:	7003      	strb	r3, [r0, #0]
 801261a:	4604      	mov	r4, r0
 801261c:	f7fe ff90 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8012620:	2300      	movs	r3, #0
 8012622:	7023      	strb	r3, [r4, #0]
 8012624:	bd10      	pop	{r4, pc}
 8012626:	bf00      	nop

08012628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012628:	4800      	ldr	r0, [pc, #0]	@ (801262c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801262a:	4770      	bx	lr
 801262c:	24000e98 	.word	0x24000e98

08012630 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012630:	4a02      	ldr	r2, [pc, #8]	@ (801263c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0xc>)
 8012632:	4b03      	ldr	r3, [pc, #12]	@ (8012640 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x10>)
 8012634:	6812      	ldr	r2, [r2, #0]
 8012636:	601a      	str	r2, [r3, #0]
 8012638:	4770      	bx	lr
 801263a:	bf00      	nop
 801263c:	24000e0c 	.word	0x24000e0c
 8012640:	24000ec8 	.word	0x24000ec8

08012644 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012644:	4a02      	ldr	r2, [pc, #8]	@ (8012650 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0xc>)
 8012646:	4b03      	ldr	r3, [pc, #12]	@ (8012654 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x10>)
 8012648:	6812      	ldr	r2, [r2, #0]
 801264a:	601a      	str	r2, [r3, #0]
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	24000e0c 	.word	0x24000e0c
 8012654:	24000edc 	.word	0x24000edc

08012658 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012658:	4a02      	ldr	r2, [pc, #8]	@ (8012664 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0xc>)
 801265a:	4b03      	ldr	r3, [pc, #12]	@ (8012668 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x10>)
 801265c:	6812      	ldr	r2, [r2, #0]
 801265e:	601a      	str	r2, [r3, #0]
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	24000e0c 	.word	0x24000e0c
 8012668:	24000ef0 	.word	0x24000ef0

0801266c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801266c:	4a02      	ldr	r2, [pc, #8]	@ (8012678 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0xc>)
 801266e:	4b03      	ldr	r3, [pc, #12]	@ (801267c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x10>)
 8012670:	6812      	ldr	r2, [r2, #0]
 8012672:	601a      	str	r2, [r3, #0]
 8012674:	4770      	bx	lr
 8012676:	bf00      	nop
 8012678:	24000e0c 	.word	0x24000e0c
 801267c:	24000f04 	.word	0x24000f04

08012680 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_init_function>:
 8012680:	f000 bc0c 	b.w	8012e9c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>

08012684 <tier4_vehicle_msgs__msg__ActuationCommandStamped__rosidl_typesupport_introspection_c__ActuationCommandStamped_fini_function>:
 8012684:	f000 bc2e 	b.w	8012ee4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>

08012688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012688:	b510      	push	{r4, lr}
 801268a:	4c08      	ldr	r4, [pc, #32]	@ (80126ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x24>)
 801268c:	f7ff ff24 	bl	80124d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012690:	60e0      	str	r0, [r4, #12]
 8012692:	f000 fc93 	bl	8012fbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8012696:	4b06      	ldr	r3, [pc, #24]	@ (80126b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 8012698:	64a0      	str	r0, [r4, #72]	@ 0x48
 801269a:	681a      	ldr	r2, [r3, #0]
 801269c:	b10a      	cbz	r2, 80126a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1a>
 801269e:	4804      	ldr	r0, [pc, #16]	@ (80126b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80126a0:	bd10      	pop	{r4, pc}
 80126a2:	4a04      	ldr	r2, [pc, #16]	@ (80126b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x2c>)
 80126a4:	4802      	ldr	r0, [pc, #8]	@ (80126b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x28>)
 80126a6:	6812      	ldr	r2, [r2, #0]
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	bd10      	pop	{r4, pc}
 80126ac:	24000f10 	.word	0x24000f10
 80126b0:	24000f88 	.word	0x24000f88
 80126b4:	24000e10 	.word	0x24000e10

080126b8 <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_init_function>:
 80126b8:	f000 bc20 	b.w	8012efc <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>

080126bc <tier4_vehicle_msgs__msg__ActuationStatusStamped__rosidl_typesupport_introspection_c__ActuationStatusStamped_fini_function>:
 80126bc:	f000 bc42 	b.w	8012f44 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>

080126c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 80126c0:	b510      	push	{r4, lr}
 80126c2:	4c08      	ldr	r4, [pc, #32]	@ (80126e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x24>)
 80126c4:	f7ff ff08 	bl	80124d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80126c8:	60e0      	str	r0, [r4, #12]
 80126ca:	f000 fc89 	bl	8012fe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80126ce:	4b06      	ldr	r3, [pc, #24]	@ (80126e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80126d0:	64a0      	str	r0, [r4, #72]	@ 0x48
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	b10a      	cbz	r2, 80126da <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1a>
 80126d6:	4804      	ldr	r0, [pc, #16]	@ (80126e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80126d8:	bd10      	pop	{r4, pc}
 80126da:	4a04      	ldr	r2, [pc, #16]	@ (80126ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x2c>)
 80126dc:	4802      	ldr	r0, [pc, #8]	@ (80126e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x28>)
 80126de:	6812      	ldr	r2, [r2, #0]
 80126e0:	601a      	str	r2, [r3, #0]
 80126e2:	bd10      	pop	{r4, pc}
 80126e4:	24000f94 	.word	0x24000f94
 80126e8:	2400100c 	.word	0x2400100c
 80126ec:	24000e10 	.word	0x24000e10

080126f0 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_init_function>:
 80126f0:	f000 bc34 	b.w	8012f5c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>

080126f4 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__rosidl_typesupport_introspection_c__SteeringWheelStatusStamped_fini_function>:
 80126f4:	f000 bc44 	b.w	8012f80 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>

080126f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80126f8:	b508      	push	{r3, lr}
 80126fa:	f7fe fec3 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126fe:	4b06      	ldr	r3, [pc, #24]	@ (8012718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012700:	4906      	ldr	r1, [pc, #24]	@ (801271c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x24>)
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	60c8      	str	r0, [r1, #12]
 8012706:	b10a      	cbz	r2, 801270c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x14>
 8012708:	4803      	ldr	r0, [pc, #12]	@ (8012718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 801270a:	bd08      	pop	{r3, pc}
 801270c:	4a04      	ldr	r2, [pc, #16]	@ (8012720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x28>)
 801270e:	4802      	ldr	r0, [pc, #8]	@ (8012718 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x20>)
 8012710:	6812      	ldr	r2, [r2, #0]
 8012712:	601a      	str	r2, [r3, #0]
 8012714:	bd08      	pop	{r3, pc}
 8012716:	bf00      	nop
 8012718:	24001090 	.word	0x24001090
 801271c:	24001018 	.word	0x24001018
 8012720:	24000e10 	.word	0x24000e10

08012724 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_init_function>:
 8012724:	f000 bc30 	b.w	8012f88 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>

08012728 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__rosidl_typesupport_introspection_c__VehicleEmergencyStamped_fini_function>:
 8012728:	f000 bc40 	b.w	8012fac <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>

0801272c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 801272c:	b508      	push	{r3, lr}
 801272e:	f7fe fea9 	bl	8011484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012732:	4b06      	ldr	r3, [pc, #24]	@ (801274c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012734:	4906      	ldr	r1, [pc, #24]	@ (8012750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x24>)
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	60c8      	str	r0, [r1, #12]
 801273a:	b10a      	cbz	r2, 8012740 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x14>
 801273c:	4803      	ldr	r0, [pc, #12]	@ (801274c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 801273e:	bd08      	pop	{r3, pc}
 8012740:	4a04      	ldr	r2, [pc, #16]	@ (8012754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x28>)
 8012742:	4802      	ldr	r0, [pc, #8]	@ (801274c <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x20>)
 8012744:	6812      	ldr	r2, [r2, #0]
 8012746:	601a      	str	r2, [r3, #0]
 8012748:	bd08      	pop	{r3, pc}
 801274a:	bf00      	nop
 801274c:	24001114 	.word	0x24001114
 8012750:	2400109c 	.word	0x2400109c
 8012754:	24000e10 	.word	0x24000e10

08012758 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	4604      	mov	r4, r0
 801275c:	b150      	cbz	r0, 8012774 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommandStamped+0x1c>
 801275e:	460d      	mov	r5, r1
 8012760:	f7ff fede 	bl	8012520 <get_serialized_size_std_msgs__msg__Header>
 8012764:	4603      	mov	r3, r0
 8012766:	f104 0018 	add.w	r0, r4, #24
 801276a:	461c      	mov	r4, r3
 801276c:	18e9      	adds	r1, r5, r3
 801276e:	f000 fc45 	bl	8012ffc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012772:	4420      	add	r0, r4
 8012774:	bd38      	pop	{r3, r4, r5, pc}
 8012776:	bf00      	nop

08012778 <_ActuationCommandStamped__cdr_deserialize>:
 8012778:	b570      	push	{r4, r5, r6, lr}
 801277a:	460c      	mov	r4, r1
 801277c:	b199      	cbz	r1, 80127a6 <_ActuationCommandStamped__cdr_deserialize+0x2e>
 801277e:	4605      	mov	r5, r0
 8012780:	f7ff ff52 	bl	8012628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012784:	4603      	mov	r3, r0
 8012786:	4621      	mov	r1, r4
 8012788:	4628      	mov	r0, r5
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	4798      	blx	r3
 8012790:	f000 fcbc 	bl	801310c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 8012794:	4603      	mov	r3, r0
 8012796:	f104 0118 	add.w	r1, r4, #24
 801279a:	4628      	mov	r0, r5
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	4718      	bx	r3
 80127a6:	4608      	mov	r0, r1
 80127a8:	bd70      	pop	{r4, r5, r6, pc}
 80127aa:	bf00      	nop

080127ac <_ActuationCommandStamped__cdr_serialize>:
 80127ac:	b510      	push	{r4, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	9101      	str	r1, [sp, #4]
 80127b2:	b1a0      	cbz	r0, 80127de <_ActuationCommandStamped__cdr_serialize+0x32>
 80127b4:	4604      	mov	r4, r0
 80127b6:	f7ff ff37 	bl	8012628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80127ba:	4603      	mov	r3, r0
 80127bc:	9901      	ldr	r1, [sp, #4]
 80127be:	4620      	mov	r0, r4
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	4798      	blx	r3
 80127c6:	f000 fca1 	bl	801310c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>
 80127ca:	4603      	mov	r3, r0
 80127cc:	9901      	ldr	r1, [sp, #4]
 80127ce:	f104 0018 	add.w	r0, r4, #24
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	689b      	ldr	r3, [r3, #8]
 80127d6:	b002      	add	sp, #8
 80127d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127dc:	4718      	bx	r3
 80127de:	b002      	add	sp, #8
 80127e0:	bd10      	pop	{r4, pc}
 80127e2:	bf00      	nop

080127e4 <_ActuationCommandStamped__get_serialized_size>:
 80127e4:	b510      	push	{r4, lr}
 80127e6:	4604      	mov	r4, r0
 80127e8:	b148      	cbz	r0, 80127fe <_ActuationCommandStamped__get_serialized_size+0x1a>
 80127ea:	2100      	movs	r1, #0
 80127ec:	f7ff fe98 	bl	8012520 <get_serialized_size_std_msgs__msg__Header>
 80127f0:	4601      	mov	r1, r0
 80127f2:	f104 0018 	add.w	r0, r4, #24
 80127f6:	460c      	mov	r4, r1
 80127f8:	f000 fc00 	bl	8012ffc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 80127fc:	4420      	add	r0, r4
 80127fe:	bd10      	pop	{r4, pc}

08012800 <_ActuationCommandStamped__max_serialized_size>:
 8012800:	b510      	push	{r4, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	2301      	movs	r3, #1
 8012806:	2100      	movs	r1, #0
 8012808:	f10d 0007 	add.w	r0, sp, #7
 801280c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012810:	f7ff ff00 	bl	8012614 <max_serialized_size_std_msgs__msg__Header>
 8012814:	4604      	mov	r4, r0
 8012816:	f10d 0007 	add.w	r0, sp, #7
 801281a:	4621      	mov	r1, r4
 801281c:	f000 fc5c 	bl	80130d8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>
 8012820:	4420      	add	r0, r4
 8012822:	b002      	add	sp, #8
 8012824:	bd10      	pop	{r4, pc}
 8012826:	bf00      	nop

08012828 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped>:
 8012828:	4800      	ldr	r0, [pc, #0]	@ (801282c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommandStamped+0x4>)
 801282a:	4770      	bx	lr
 801282c:	24001120 	.word	0x24001120

08012830 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012830:	b538      	push	{r3, r4, r5, lr}
 8012832:	4604      	mov	r4, r0
 8012834:	b150      	cbz	r0, 801284c <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatusStamped+0x1c>
 8012836:	460d      	mov	r5, r1
 8012838:	f7ff fe72 	bl	8012520 <get_serialized_size_std_msgs__msg__Header>
 801283c:	4603      	mov	r3, r0
 801283e:	f104 0018 	add.w	r0, r4, #24
 8012842:	461c      	mov	r4, r3
 8012844:	18e9      	adds	r1, r5, r3
 8012846:	f000 fc65 	bl	8013114 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 801284a:	4420      	add	r0, r4
 801284c:	bd38      	pop	{r3, r4, r5, pc}
 801284e:	bf00      	nop

08012850 <_ActuationStatusStamped__cdr_deserialize>:
 8012850:	b570      	push	{r4, r5, r6, lr}
 8012852:	460c      	mov	r4, r1
 8012854:	b199      	cbz	r1, 801287e <_ActuationStatusStamped__cdr_deserialize+0x2e>
 8012856:	4605      	mov	r5, r0
 8012858:	f7ff fee6 	bl	8012628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801285c:	4603      	mov	r3, r0
 801285e:	4621      	mov	r1, r4
 8012860:	4628      	mov	r0, r5
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	4798      	blx	r3
 8012868:	f000 fcdc 	bl	8013224 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 801286c:	4603      	mov	r3, r0
 801286e:	f104 0118 	add.w	r1, r4, #24
 8012872:	4628      	mov	r0, r5
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	4718      	bx	r3
 801287e:	4608      	mov	r0, r1
 8012880:	bd70      	pop	{r4, r5, r6, pc}
 8012882:	bf00      	nop

08012884 <_ActuationStatusStamped__cdr_serialize>:
 8012884:	b510      	push	{r4, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	9101      	str	r1, [sp, #4]
 801288a:	b1a0      	cbz	r0, 80128b6 <_ActuationStatusStamped__cdr_serialize+0x32>
 801288c:	4604      	mov	r4, r0
 801288e:	f7ff fecb 	bl	8012628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012892:	4603      	mov	r3, r0
 8012894:	9901      	ldr	r1, [sp, #4]
 8012896:	4620      	mov	r0, r4
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	689b      	ldr	r3, [r3, #8]
 801289c:	4798      	blx	r3
 801289e:	f000 fcc1 	bl	8013224 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>
 80128a2:	4603      	mov	r3, r0
 80128a4:	9901      	ldr	r1, [sp, #4]
 80128a6:	f104 0018 	add.w	r0, r4, #24
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	b002      	add	sp, #8
 80128b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128b4:	4718      	bx	r3
 80128b6:	b002      	add	sp, #8
 80128b8:	bd10      	pop	{r4, pc}
 80128ba:	bf00      	nop

080128bc <_ActuationStatusStamped__get_serialized_size>:
 80128bc:	b510      	push	{r4, lr}
 80128be:	4604      	mov	r4, r0
 80128c0:	b148      	cbz	r0, 80128d6 <_ActuationStatusStamped__get_serialized_size+0x1a>
 80128c2:	2100      	movs	r1, #0
 80128c4:	f7ff fe2c 	bl	8012520 <get_serialized_size_std_msgs__msg__Header>
 80128c8:	4601      	mov	r1, r0
 80128ca:	f104 0018 	add.w	r0, r4, #24
 80128ce:	460c      	mov	r4, r1
 80128d0:	f000 fc20 	bl	8013114 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80128d4:	4420      	add	r0, r4
 80128d6:	bd10      	pop	{r4, pc}

080128d8 <_ActuationStatusStamped__max_serialized_size>:
 80128d8:	b510      	push	{r4, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	2301      	movs	r3, #1
 80128de:	2100      	movs	r1, #0
 80128e0:	f10d 0007 	add.w	r0, sp, #7
 80128e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80128e8:	f7ff fe94 	bl	8012614 <max_serialized_size_std_msgs__msg__Header>
 80128ec:	4604      	mov	r4, r0
 80128ee:	f10d 0007 	add.w	r0, sp, #7
 80128f2:	4621      	mov	r1, r4
 80128f4:	f000 fc7c 	bl	80131f0 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>
 80128f8:	4420      	add	r0, r4
 80128fa:	b002      	add	sp, #8
 80128fc:	bd10      	pop	{r4, pc}
 80128fe:	bf00      	nop

08012900 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped>:
 8012900:	4800      	ldr	r0, [pc, #0]	@ (8012904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatusStamped+0x4>)
 8012902:	4770      	bx	lr
 8012904:	24001148 	.word	0x24001148

08012908 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 8012908:	b538      	push	{r3, r4, r5, lr}
 801290a:	b158      	cbz	r0, 8012924 <get_serialized_size_tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x1c>
 801290c:	460d      	mov	r5, r1
 801290e:	f7fe fdc7 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8012912:	2104      	movs	r1, #4
 8012914:	182c      	adds	r4, r5, r0
 8012916:	f1c5 0504 	rsb	r5, r5, #4
 801291a:	4620      	mov	r0, r4
 801291c:	f7ff fce6 	bl	80122ec <ucdr_alignment>
 8012920:	4428      	add	r0, r5
 8012922:	4420      	add	r0, r4
 8012924:	bd38      	pop	{r3, r4, r5, pc}
 8012926:	bf00      	nop

08012928 <_SteeringWheelStatusStamped__cdr_deserialize>:
 8012928:	b538      	push	{r3, r4, r5, lr}
 801292a:	460c      	mov	r4, r1
 801292c:	b179      	cbz	r1, 801294e <_SteeringWheelStatusStamped__cdr_deserialize+0x26>
 801292e:	4605      	mov	r5, r0
 8012930:	f7fe fe1a 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012934:	4603      	mov	r3, r0
 8012936:	4621      	mov	r1, r4
 8012938:	4628      	mov	r0, r5
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	4798      	blx	r3
 8012940:	f104 0108 	add.w	r1, r4, #8
 8012944:	4628      	mov	r0, r5
 8012946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801294a:	f7ff ba81 	b.w	8011e50 <ucdr_deserialize_float>
 801294e:	4608      	mov	r0, r1
 8012950:	bd38      	pop	{r3, r4, r5, pc}
 8012952:	bf00      	nop

08012954 <_SteeringWheelStatusStamped__cdr_serialize>:
 8012954:	b188      	cbz	r0, 801297a <_SteeringWheelStatusStamped__cdr_serialize+0x26>
 8012956:	b538      	push	{r3, r4, r5, lr}
 8012958:	4604      	mov	r4, r0
 801295a:	460d      	mov	r5, r1
 801295c:	f7fe fe04 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012960:	4603      	mov	r3, r0
 8012962:	4629      	mov	r1, r5
 8012964:	4620      	mov	r0, r4
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	4798      	blx	r3
 801296c:	ed94 0a02 	vldr	s0, [r4, #8]
 8012970:	4628      	mov	r0, r5
 8012972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012976:	f7ff b9d3 	b.w	8011d20 <ucdr_serialize_float>
 801297a:	4770      	bx	lr

0801297c <_SteeringWheelStatusStamped__get_serialized_size>:
 801297c:	b150      	cbz	r0, 8012994 <_SteeringWheelStatusStamped__get_serialized_size+0x18>
 801297e:	2100      	movs	r1, #0
 8012980:	b510      	push	{r4, lr}
 8012982:	f7fe fd8d 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8012986:	4604      	mov	r4, r0
 8012988:	2104      	movs	r1, #4
 801298a:	f7ff fcaf 	bl	80122ec <ucdr_alignment>
 801298e:	4420      	add	r0, r4
 8012990:	3004      	adds	r0, #4
 8012992:	bd10      	pop	{r4, pc}
 8012994:	4770      	bx	lr
 8012996:	bf00      	nop

08012998 <_SteeringWheelStatusStamped__max_serialized_size>:
 8012998:	b510      	push	{r4, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	2301      	movs	r3, #1
 801299e:	2100      	movs	r1, #0
 80129a0:	f10d 0007 	add.w	r0, sp, #7
 80129a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80129a8:	f7fe fdca 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 80129ac:	4604      	mov	r4, r0
 80129ae:	2104      	movs	r1, #4
 80129b0:	f7ff fc9c 	bl	80122ec <ucdr_alignment>
 80129b4:	4420      	add	r0, r4
 80129b6:	3004      	adds	r0, #4
 80129b8:	b002      	add	sp, #8
 80129ba:	bd10      	pop	{r4, pc}

080129bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped>:
 80129bc:	4800      	ldr	r0, [pc, #0]	@ (80129c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__SteeringWheelStatusStamped+0x4>)
 80129be:	4770      	bx	lr
 80129c0:	24001170 	.word	0x24001170

080129c4 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 80129c4:	b538      	push	{r3, r4, r5, lr}
 80129c6:	b158      	cbz	r0, 80129e0 <get_serialized_size_tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x1c>
 80129c8:	460d      	mov	r5, r1
 80129ca:	f7fe fd69 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 80129ce:	2101      	movs	r1, #1
 80129d0:	182c      	adds	r4, r5, r0
 80129d2:	f1c5 0501 	rsb	r5, r5, #1
 80129d6:	4620      	mov	r0, r4
 80129d8:	f7ff fc88 	bl	80122ec <ucdr_alignment>
 80129dc:	4428      	add	r0, r5
 80129de:	4420      	add	r0, r4
 80129e0:	bd38      	pop	{r3, r4, r5, pc}
 80129e2:	bf00      	nop

080129e4 <_VehicleEmergencyStamped__cdr_deserialize>:
 80129e4:	b538      	push	{r3, r4, r5, lr}
 80129e6:	460c      	mov	r4, r1
 80129e8:	b179      	cbz	r1, 8012a0a <_VehicleEmergencyStamped__cdr_deserialize+0x26>
 80129ea:	4605      	mov	r5, r0
 80129ec:	f7fe fdbc 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129f0:	4603      	mov	r3, r0
 80129f2:	4621      	mov	r1, r4
 80129f4:	4628      	mov	r0, r5
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	68db      	ldr	r3, [r3, #12]
 80129fa:	4798      	blx	r3
 80129fc:	f104 0108 	add.w	r1, r4, #8
 8012a00:	4628      	mov	r0, r5
 8012a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a06:	f7fe bdc9 	b.w	801159c <ucdr_deserialize_bool>
 8012a0a:	4608      	mov	r0, r1
 8012a0c:	bd38      	pop	{r3, r4, r5, pc}
 8012a0e:	bf00      	nop

08012a10 <_VehicleEmergencyStamped__cdr_serialize>:
 8012a10:	b180      	cbz	r0, 8012a34 <_VehicleEmergencyStamped__cdr_serialize+0x24>
 8012a12:	b538      	push	{r3, r4, r5, lr}
 8012a14:	4604      	mov	r4, r0
 8012a16:	460d      	mov	r5, r1
 8012a18:	f7fe fda6 	bl	8011568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	4629      	mov	r1, r5
 8012a20:	4620      	mov	r0, r4
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	4798      	blx	r3
 8012a28:	7a21      	ldrb	r1, [r4, #8]
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a30:	f7fe bd9e 	b.w	8011570 <ucdr_serialize_bool>
 8012a34:	4770      	bx	lr
 8012a36:	bf00      	nop

08012a38 <_VehicleEmergencyStamped__get_serialized_size>:
 8012a38:	b150      	cbz	r0, 8012a50 <_VehicleEmergencyStamped__get_serialized_size+0x18>
 8012a3a:	2100      	movs	r1, #0
 8012a3c:	b510      	push	{r4, lr}
 8012a3e:	f7fe fd2f 	bl	80114a0 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a42:	4604      	mov	r4, r0
 8012a44:	2101      	movs	r1, #1
 8012a46:	f7ff fc51 	bl	80122ec <ucdr_alignment>
 8012a4a:	4420      	add	r0, r4
 8012a4c:	3001      	adds	r0, #1
 8012a4e:	bd10      	pop	{r4, pc}
 8012a50:	4770      	bx	lr
 8012a52:	bf00      	nop

08012a54 <_VehicleEmergencyStamped__max_serialized_size>:
 8012a54:	b510      	push	{r4, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	2401      	movs	r4, #1
 8012a5a:	2100      	movs	r1, #0
 8012a5c:	f10d 0007 	add.w	r0, sp, #7
 8012a60:	f88d 4007 	strb.w	r4, [sp, #7]
 8012a64:	f7fe fd6c 	bl	8011540 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a68:	4621      	mov	r1, r4
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	f7ff fc3e 	bl	80122ec <ucdr_alignment>
 8012a70:	4420      	add	r0, r4
 8012a72:	3001      	adds	r0, #1
 8012a74:	b002      	add	sp, #8
 8012a76:	bd10      	pop	{r4, pc}

08012a78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped>:
 8012a78:	4800      	ldr	r0, [pc, #0]	@ (8012a7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__VehicleEmergencyStamped+0x4>)
 8012a7a:	4770      	bx	lr
 8012a7c:	24001198 	.word	0x24001198

08012a80 <autoware_control_msgs__msg__Control__init>:
 8012a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a84:	4605      	mov	r5, r0
 8012a86:	b3c0      	cbz	r0, 8012afa <autoware_control_msgs__msg__Control__init+0x7a>
 8012a88:	f000 f9a6 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012a8c:	4604      	mov	r4, r0
 8012a8e:	b310      	cbz	r0, 8012ad6 <autoware_control_msgs__msg__Control__init+0x56>
 8012a90:	f105 0608 	add.w	r6, r5, #8
 8012a94:	4630      	mov	r0, r6
 8012a96:	f000 f99f 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d040      	beq.n	8012b22 <autoware_control_msgs__msg__Control__init+0xa2>
 8012aa0:	f105 0710 	add.w	r7, r5, #16
 8012aa4:	4638      	mov	r0, r7
 8012aa6:	f000 f855 	bl	8012b54 <autoware_control_msgs__msg__Lateral__init>
 8012aaa:	4604      	mov	r4, r0
 8012aac:	b348      	cbz	r0, 8012b02 <autoware_control_msgs__msg__Control__init+0x82>
 8012aae:	f105 082c 	add.w	r8, r5, #44	@ 0x2c
 8012ab2:	4640      	mov	r0, r8
 8012ab4:	f000 f87e 	bl	8012bb4 <autoware_control_msgs__msg__Longitudinal__init>
 8012ab8:	4604      	mov	r4, r0
 8012aba:	b9d8      	cbnz	r0, 8012af4 <autoware_control_msgs__msg__Control__init+0x74>
 8012abc:	4628      	mov	r0, r5
 8012abe:	f000 f98f 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f000 f98c 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012ac8:	4638      	mov	r0, r7
 8012aca:	f000 f867 	bl	8012b9c <autoware_control_msgs__msg__Lateral__fini>
 8012ace:	4640      	mov	r0, r8
 8012ad0:	f000 f894 	bl	8012bfc <autoware_control_msgs__msg__Longitudinal__fini>
 8012ad4:	e00e      	b.n	8012af4 <autoware_control_msgs__msg__Control__init+0x74>
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f000 f982 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012adc:	f105 0008 	add.w	r0, r5, #8
 8012ae0:	f000 f97e 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012ae4:	f105 0010 	add.w	r0, r5, #16
 8012ae8:	f000 f858 	bl	8012b9c <autoware_control_msgs__msg__Lateral__fini>
 8012aec:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012af0:	f000 f884 	bl	8012bfc <autoware_control_msgs__msg__Longitudinal__fini>
 8012af4:	4620      	mov	r0, r4
 8012af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012afa:	4604      	mov	r4, r0
 8012afc:	4620      	mov	r0, r4
 8012afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b02:	4628      	mov	r0, r5
 8012b04:	f000 f96c 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f000 f969 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b0e:	4638      	mov	r0, r7
 8012b10:	f000 f844 	bl	8012b9c <autoware_control_msgs__msg__Lateral__fini>
 8012b14:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8012b18:	f000 f870 	bl	8012bfc <autoware_control_msgs__msg__Longitudinal__fini>
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b22:	4628      	mov	r0, r5
 8012b24:	f000 f95c 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b28:	4630      	mov	r0, r6
 8012b2a:	e7d9      	b.n	8012ae0 <autoware_control_msgs__msg__Control__init+0x60>

08012b2c <autoware_control_msgs__msg__Control__fini>:
 8012b2c:	b188      	cbz	r0, 8012b52 <autoware_control_msgs__msg__Control__fini+0x26>
 8012b2e:	b510      	push	{r4, lr}
 8012b30:	4604      	mov	r4, r0
 8012b32:	f000 f955 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b36:	f104 0008 	add.w	r0, r4, #8
 8012b3a:	f000 f951 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b3e:	f104 0010 	add.w	r0, r4, #16
 8012b42:	f000 f82b 	bl	8012b9c <autoware_control_msgs__msg__Lateral__fini>
 8012b46:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b4e:	f000 b855 	b.w	8012bfc <autoware_control_msgs__msg__Longitudinal__fini>
 8012b52:	4770      	bx	lr

08012b54 <autoware_control_msgs__msg__Lateral__init>:
 8012b54:	b570      	push	{r4, r5, r6, lr}
 8012b56:	4605      	mov	r5, r0
 8012b58:	b1a8      	cbz	r0, 8012b86 <autoware_control_msgs__msg__Lateral__init+0x32>
 8012b5a:	f000 f93d 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012b5e:	4604      	mov	r4, r0
 8012b60:	b140      	cbz	r0, 8012b74 <autoware_control_msgs__msg__Lateral__init+0x20>
 8012b62:	f105 0608 	add.w	r6, r5, #8
 8012b66:	4630      	mov	r0, r6
 8012b68:	f000 f936 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012b6c:	4604      	mov	r4, r0
 8012b6e:	b168      	cbz	r0, 8012b8c <autoware_control_msgs__msg__Lateral__init+0x38>
 8012b70:	4620      	mov	r0, r4
 8012b72:	bd70      	pop	{r4, r5, r6, pc}
 8012b74:	4628      	mov	r0, r5
 8012b76:	f000 f933 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b7a:	f105 0008 	add.w	r0, r5, #8
 8012b7e:	f000 f92f 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b82:	4620      	mov	r0, r4
 8012b84:	bd70      	pop	{r4, r5, r6, pc}
 8012b86:	4604      	mov	r4, r0
 8012b88:	4620      	mov	r0, r4
 8012b8a:	bd70      	pop	{r4, r5, r6, pc}
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	f000 f927 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b92:	4630      	mov	r0, r6
 8012b94:	f000 f924 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012b98:	e7ea      	b.n	8012b70 <autoware_control_msgs__msg__Lateral__init+0x1c>
 8012b9a:	bf00      	nop

08012b9c <autoware_control_msgs__msg__Lateral__fini>:
 8012b9c:	b148      	cbz	r0, 8012bb2 <autoware_control_msgs__msg__Lateral__fini+0x16>
 8012b9e:	b510      	push	{r4, lr}
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	f000 f91d 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012ba6:	f104 0008 	add.w	r0, r4, #8
 8012baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bae:	f000 b917 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012bb2:	4770      	bx	lr

08012bb4 <autoware_control_msgs__msg__Longitudinal__init>:
 8012bb4:	b570      	push	{r4, r5, r6, lr}
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	b1a8      	cbz	r0, 8012be6 <autoware_control_msgs__msg__Longitudinal__init+0x32>
 8012bba:	f000 f90d 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	b140      	cbz	r0, 8012bd4 <autoware_control_msgs__msg__Longitudinal__init+0x20>
 8012bc2:	f105 0608 	add.w	r6, r5, #8
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	f000 f906 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012bcc:	4604      	mov	r4, r0
 8012bce:	b168      	cbz	r0, 8012bec <autoware_control_msgs__msg__Longitudinal__init+0x38>
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	f000 f903 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012bda:	f105 0008 	add.w	r0, r5, #8
 8012bde:	f000 f8ff 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012be2:	4620      	mov	r0, r4
 8012be4:	bd70      	pop	{r4, r5, r6, pc}
 8012be6:	4604      	mov	r4, r0
 8012be8:	4620      	mov	r0, r4
 8012bea:	bd70      	pop	{r4, r5, r6, pc}
 8012bec:	4628      	mov	r0, r5
 8012bee:	f000 f8f7 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f000 f8f4 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012bf8:	e7ea      	b.n	8012bd0 <autoware_control_msgs__msg__Longitudinal__init+0x1c>
 8012bfa:	bf00      	nop

08012bfc <autoware_control_msgs__msg__Longitudinal__fini>:
 8012bfc:	b148      	cbz	r0, 8012c12 <autoware_control_msgs__msg__Longitudinal__fini+0x16>
 8012bfe:	b510      	push	{r4, lr}
 8012c00:	4604      	mov	r4, r0
 8012c02:	f000 f8ed 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012c06:	f104 0008 	add.w	r0, r4, #8
 8012c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c0e:	f000 b8e7 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012c12:	4770      	bx	lr

08012c14 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init>:
 8012c14:	b538      	push	{r3, r4, r5, lr}
 8012c16:	4604      	mov	r4, r0
 8012c18:	b128      	cbz	r0, 8012c26 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x12>
 8012c1a:	f000 f8dd 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012c1e:	4605      	mov	r5, r0
 8012c20:	b120      	cbz	r0, 8012c2c <autoware_vehicle_msgs__srv__ControlModeCommand_Request__init+0x18>
 8012c22:	4628      	mov	r0, r5
 8012c24:	bd38      	pop	{r3, r4, r5, pc}
 8012c26:	4605      	mov	r5, r0
 8012c28:	4628      	mov	r0, r5
 8012c2a:	bd38      	pop	{r3, r4, r5, pc}
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f000 f8d7 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012c32:	4628      	mov	r0, r5
 8012c34:	bd38      	pop	{r3, r4, r5, pc}
 8012c36:	bf00      	nop

08012c38 <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini>:
 8012c38:	b108      	cbz	r0, 8012c3e <autoware_vehicle_msgs__srv__ControlModeCommand_Request__fini+0x6>
 8012c3a:	f000 b8d1 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012c3e:	4770      	bx	lr

08012c40 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__init>:
 8012c40:	3800      	subs	r0, #0
 8012c42:	bf18      	it	ne
 8012c44:	2001      	movne	r0, #1
 8012c46:	4770      	bx	lr

08012c48 <autoware_vehicle_msgs__srv__ControlModeCommand_Response__fini>:
 8012c48:	4770      	bx	lr
 8012c4a:	bf00      	nop

08012c4c <autoware_vehicle_msgs__msg__ControlModeReport__init>:
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4604      	mov	r4, r0
 8012c50:	b128      	cbz	r0, 8012c5e <autoware_vehicle_msgs__msg__ControlModeReport__init+0x12>
 8012c52:	f000 f8c1 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012c56:	4605      	mov	r5, r0
 8012c58:	b120      	cbz	r0, 8012c64 <autoware_vehicle_msgs__msg__ControlModeReport__init+0x18>
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	bd38      	pop	{r3, r4, r5, pc}
 8012c5e:	4605      	mov	r5, r0
 8012c60:	4628      	mov	r0, r5
 8012c62:	bd38      	pop	{r3, r4, r5, pc}
 8012c64:	4620      	mov	r0, r4
 8012c66:	f000 f8bb 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	bd38      	pop	{r3, r4, r5, pc}
 8012c6e:	bf00      	nop

08012c70 <autoware_vehicle_msgs__msg__ControlModeReport__fini>:
 8012c70:	b108      	cbz	r0, 8012c76 <autoware_vehicle_msgs__msg__ControlModeReport__fini+0x6>
 8012c72:	f000 b8b5 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012c76:	4770      	bx	lr

08012c78 <autoware_vehicle_msgs__msg__GearCommand__init>:
 8012c78:	b538      	push	{r3, r4, r5, lr}
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	b128      	cbz	r0, 8012c8a <autoware_vehicle_msgs__msg__GearCommand__init+0x12>
 8012c7e:	f000 f8ab 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012c82:	4605      	mov	r5, r0
 8012c84:	b120      	cbz	r0, 8012c90 <autoware_vehicle_msgs__msg__GearCommand__init+0x18>
 8012c86:	4628      	mov	r0, r5
 8012c88:	bd38      	pop	{r3, r4, r5, pc}
 8012c8a:	4605      	mov	r5, r0
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	bd38      	pop	{r3, r4, r5, pc}
 8012c90:	4620      	mov	r0, r4
 8012c92:	f000 f8a5 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012c96:	4628      	mov	r0, r5
 8012c98:	bd38      	pop	{r3, r4, r5, pc}
 8012c9a:	bf00      	nop

08012c9c <autoware_vehicle_msgs__msg__GearCommand__fini>:
 8012c9c:	b108      	cbz	r0, 8012ca2 <autoware_vehicle_msgs__msg__GearCommand__fini+0x6>
 8012c9e:	f000 b89f 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012ca2:	4770      	bx	lr

08012ca4 <autoware_vehicle_msgs__msg__GearReport__init>:
 8012ca4:	b538      	push	{r3, r4, r5, lr}
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	b128      	cbz	r0, 8012cb6 <autoware_vehicle_msgs__msg__GearReport__init+0x12>
 8012caa:	f000 f895 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012cae:	4605      	mov	r5, r0
 8012cb0:	b120      	cbz	r0, 8012cbc <autoware_vehicle_msgs__msg__GearReport__init+0x18>
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	bd38      	pop	{r3, r4, r5, pc}
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	4628      	mov	r0, r5
 8012cba:	bd38      	pop	{r3, r4, r5, pc}
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	f000 f88f 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	bd38      	pop	{r3, r4, r5, pc}
 8012cc6:	bf00      	nop

08012cc8 <autoware_vehicle_msgs__msg__GearReport__fini>:
 8012cc8:	b108      	cbz	r0, 8012cce <autoware_vehicle_msgs__msg__GearReport__fini+0x6>
 8012cca:	f000 b889 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012cce:	4770      	bx	lr

08012cd0 <autoware_vehicle_msgs__msg__HazardLightsCommand__init>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	b128      	cbz	r0, 8012ce2 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x12>
 8012cd6:	f000 f87f 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012cda:	4605      	mov	r5, r0
 8012cdc:	b120      	cbz	r0, 8012ce8 <autoware_vehicle_msgs__msg__HazardLightsCommand__init+0x18>
 8012cde:	4628      	mov	r0, r5
 8012ce0:	bd38      	pop	{r3, r4, r5, pc}
 8012ce2:	4605      	mov	r5, r0
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	bd38      	pop	{r3, r4, r5, pc}
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f000 f879 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012cee:	4628      	mov	r0, r5
 8012cf0:	bd38      	pop	{r3, r4, r5, pc}
 8012cf2:	bf00      	nop

08012cf4 <autoware_vehicle_msgs__msg__HazardLightsCommand__fini>:
 8012cf4:	b108      	cbz	r0, 8012cfa <autoware_vehicle_msgs__msg__HazardLightsCommand__fini+0x6>
 8012cf6:	f000 b873 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012cfa:	4770      	bx	lr

08012cfc <autoware_vehicle_msgs__msg__HazardLightsReport__init>:
 8012cfc:	b538      	push	{r3, r4, r5, lr}
 8012cfe:	4604      	mov	r4, r0
 8012d00:	b128      	cbz	r0, 8012d0e <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x12>
 8012d02:	f000 f869 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012d06:	4605      	mov	r5, r0
 8012d08:	b120      	cbz	r0, 8012d14 <autoware_vehicle_msgs__msg__HazardLightsReport__init+0x18>
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	bd38      	pop	{r3, r4, r5, pc}
 8012d0e:	4605      	mov	r5, r0
 8012d10:	4628      	mov	r0, r5
 8012d12:	bd38      	pop	{r3, r4, r5, pc}
 8012d14:	4620      	mov	r0, r4
 8012d16:	f000 f863 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	bd38      	pop	{r3, r4, r5, pc}
 8012d1e:	bf00      	nop

08012d20 <autoware_vehicle_msgs__msg__HazardLightsReport__fini>:
 8012d20:	b108      	cbz	r0, 8012d26 <autoware_vehicle_msgs__msg__HazardLightsReport__fini+0x6>
 8012d22:	f000 b85d 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012d26:	4770      	bx	lr

08012d28 <autoware_vehicle_msgs__msg__SteeringReport__init>:
 8012d28:	b538      	push	{r3, r4, r5, lr}
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	b128      	cbz	r0, 8012d3a <autoware_vehicle_msgs__msg__SteeringReport__init+0x12>
 8012d2e:	f000 f853 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012d32:	4605      	mov	r5, r0
 8012d34:	b120      	cbz	r0, 8012d40 <autoware_vehicle_msgs__msg__SteeringReport__init+0x18>
 8012d36:	4628      	mov	r0, r5
 8012d38:	bd38      	pop	{r3, r4, r5, pc}
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	bd38      	pop	{r3, r4, r5, pc}
 8012d40:	4620      	mov	r0, r4
 8012d42:	f000 f84d 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012d46:	4628      	mov	r0, r5
 8012d48:	bd38      	pop	{r3, r4, r5, pc}
 8012d4a:	bf00      	nop

08012d4c <autoware_vehicle_msgs__msg__SteeringReport__fini>:
 8012d4c:	b108      	cbz	r0, 8012d52 <autoware_vehicle_msgs__msg__SteeringReport__fini+0x6>
 8012d4e:	f000 b847 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012d52:	4770      	bx	lr

08012d54 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init>:
 8012d54:	b538      	push	{r3, r4, r5, lr}
 8012d56:	4604      	mov	r4, r0
 8012d58:	b128      	cbz	r0, 8012d66 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x12>
 8012d5a:	f000 f83d 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012d5e:	4605      	mov	r5, r0
 8012d60:	b120      	cbz	r0, 8012d6c <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__init+0x18>
 8012d62:	4628      	mov	r0, r5
 8012d64:	bd38      	pop	{r3, r4, r5, pc}
 8012d66:	4605      	mov	r5, r0
 8012d68:	4628      	mov	r0, r5
 8012d6a:	bd38      	pop	{r3, r4, r5, pc}
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f000 f837 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012d72:	4628      	mov	r0, r5
 8012d74:	bd38      	pop	{r3, r4, r5, pc}
 8012d76:	bf00      	nop

08012d78 <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini>:
 8012d78:	b108      	cbz	r0, 8012d7e <autoware_vehicle_msgs__msg__TurnIndicatorsCommand__fini+0x6>
 8012d7a:	f000 b831 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012d7e:	4770      	bx	lr

08012d80 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init>:
 8012d80:	b538      	push	{r3, r4, r5, lr}
 8012d82:	4604      	mov	r4, r0
 8012d84:	b128      	cbz	r0, 8012d92 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x12>
 8012d86:	f000 f827 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012d8a:	4605      	mov	r5, r0
 8012d8c:	b120      	cbz	r0, 8012d98 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__init+0x18>
 8012d8e:	4628      	mov	r0, r5
 8012d90:	bd38      	pop	{r3, r4, r5, pc}
 8012d92:	4605      	mov	r5, r0
 8012d94:	4628      	mov	r0, r5
 8012d96:	bd38      	pop	{r3, r4, r5, pc}
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f000 f821 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012d9e:	4628      	mov	r0, r5
 8012da0:	bd38      	pop	{r3, r4, r5, pc}
 8012da2:	bf00      	nop

08012da4 <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini>:
 8012da4:	b108      	cbz	r0, 8012daa <autoware_vehicle_msgs__msg__TurnIndicatorsReport__fini+0x6>
 8012da6:	f000 b81b 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012daa:	4770      	bx	lr

08012dac <autoware_vehicle_msgs__msg__VelocityReport__init>:
 8012dac:	b538      	push	{r3, r4, r5, lr}
 8012dae:	4604      	mov	r4, r0
 8012db0:	b128      	cbz	r0, 8012dbe <autoware_vehicle_msgs__msg__VelocityReport__init+0x12>
 8012db2:	f000 f843 	bl	8012e3c <std_msgs__msg__Header__init>
 8012db6:	4605      	mov	r5, r0
 8012db8:	b120      	cbz	r0, 8012dc4 <autoware_vehicle_msgs__msg__VelocityReport__init+0x18>
 8012dba:	4628      	mov	r0, r5
 8012dbc:	bd38      	pop	{r3, r4, r5, pc}
 8012dbe:	4605      	mov	r5, r0
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	bd38      	pop	{r3, r4, r5, pc}
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f000 f85d 	bl	8012e84 <std_msgs__msg__Header__fini>
 8012dca:	4628      	mov	r0, r5
 8012dcc:	bd38      	pop	{r3, r4, r5, pc}
 8012dce:	bf00      	nop

08012dd0 <autoware_vehicle_msgs__msg__VelocityReport__fini>:
 8012dd0:	b108      	cbz	r0, 8012dd6 <autoware_vehicle_msgs__msg__VelocityReport__fini+0x6>
 8012dd2:	f000 b857 	b.w	8012e84 <std_msgs__msg__Header__fini>
 8012dd6:	4770      	bx	lr

08012dd8 <builtin_interfaces__msg__Time__init>:
 8012dd8:	3800      	subs	r0, #0
 8012dda:	bf18      	it	ne
 8012ddc:	2001      	movne	r0, #1
 8012dde:	4770      	bx	lr

08012de0 <builtin_interfaces__msg__Time__fini>:
 8012de0:	4770      	bx	lr
 8012de2:	bf00      	nop

08012de4 <ucdr_serialize_sequence_char>:
 8012de4:	b570      	push	{r4, r5, r6, lr}
 8012de6:	4615      	mov	r5, r2
 8012de8:	460e      	mov	r6, r1
 8012dea:	7d01      	ldrb	r1, [r0, #20]
 8012dec:	4604      	mov	r4, r0
 8012dee:	f7fe fcb1 	bl	8011754 <ucdr_serialize_endian_uint32_t>
 8012df2:	b90d      	cbnz	r5, 8012df8 <ucdr_serialize_sequence_char+0x14>
 8012df4:	2001      	movs	r0, #1
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	462b      	mov	r3, r5
 8012dfa:	4632      	mov	r2, r6
 8012dfc:	7d21      	ldrb	r1, [r4, #20]
 8012dfe:	4620      	mov	r0, r4
 8012e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e04:	f000 ba12 	b.w	801322c <ucdr_serialize_endian_array_char>

08012e08 <ucdr_deserialize_sequence_char>:
 8012e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e0c:	461d      	mov	r5, r3
 8012e0e:	4616      	mov	r6, r2
 8012e10:	460f      	mov	r7, r1
 8012e12:	461a      	mov	r2, r3
 8012e14:	7d01      	ldrb	r1, [r0, #20]
 8012e16:	4604      	mov	r4, r0
 8012e18:	f7fe fdc4 	bl	80119a4 <ucdr_deserialize_endian_uint32_t>
 8012e1c:	682b      	ldr	r3, [r5, #0]
 8012e1e:	429e      	cmp	r6, r3
 8012e20:	d201      	bcs.n	8012e26 <ucdr_deserialize_sequence_char+0x1e>
 8012e22:	2201      	movs	r2, #1
 8012e24:	75a2      	strb	r2, [r4, #22]
 8012e26:	b913      	cbnz	r3, 8012e2e <ucdr_deserialize_sequence_char+0x26>
 8012e28:	2001      	movs	r0, #1
 8012e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e2e:	463a      	mov	r2, r7
 8012e30:	7d21      	ldrb	r1, [r4, #20]
 8012e32:	4620      	mov	r0, r4
 8012e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e38:	f000 ba2a 	b.w	8013290 <ucdr_deserialize_endian_array_char>

08012e3c <std_msgs__msg__Header__init>:
 8012e3c:	b570      	push	{r4, r5, r6, lr}
 8012e3e:	4605      	mov	r5, r0
 8012e40:	b1a8      	cbz	r0, 8012e6e <std_msgs__msg__Header__init+0x32>
 8012e42:	f7ff ffc9 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012e46:	4604      	mov	r4, r0
 8012e48:	b140      	cbz	r0, 8012e5c <std_msgs__msg__Header__init+0x20>
 8012e4a:	f105 0608 	add.w	r6, r5, #8
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f000 fa52 	bl	80132f8 <rosidl_runtime_c__String__init>
 8012e54:	4604      	mov	r4, r0
 8012e56:	b168      	cbz	r0, 8012e74 <std_msgs__msg__Header__init+0x38>
 8012e58:	4620      	mov	r0, r4
 8012e5a:	bd70      	pop	{r4, r5, r6, pc}
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	f7ff ffbf 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012e62:	f105 0008 	add.w	r0, r5, #8
 8012e66:	f000 fa5d 	bl	8013324 <rosidl_runtime_c__String__fini>
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	bd70      	pop	{r4, r5, r6, pc}
 8012e6e:	4604      	mov	r4, r0
 8012e70:	4620      	mov	r0, r4
 8012e72:	bd70      	pop	{r4, r5, r6, pc}
 8012e74:	4628      	mov	r0, r5
 8012e76:	f7ff ffb3 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	f000 fa52 	bl	8013324 <rosidl_runtime_c__String__fini>
 8012e80:	e7ea      	b.n	8012e58 <std_msgs__msg__Header__init+0x1c>
 8012e82:	bf00      	nop

08012e84 <std_msgs__msg__Header__fini>:
 8012e84:	b148      	cbz	r0, 8012e9a <std_msgs__msg__Header__fini+0x16>
 8012e86:	b510      	push	{r4, lr}
 8012e88:	4604      	mov	r4, r0
 8012e8a:	f7ff ffa9 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012e8e:	f104 0008 	add.w	r0, r4, #8
 8012e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e96:	f000 ba45 	b.w	8013324 <rosidl_runtime_c__String__fini>
 8012e9a:	4770      	bx	lr

08012e9c <tier4_vehicle_msgs__msg__ActuationCommandStamped__init>:
 8012e9c:	b570      	push	{r4, r5, r6, lr}
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	b1a8      	cbz	r0, 8012ece <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x32>
 8012ea2:	f7ff ffcb 	bl	8012e3c <std_msgs__msg__Header__init>
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	b140      	cbz	r0, 8012ebc <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x20>
 8012eaa:	f105 0618 	add.w	r6, r5, #24
 8012eae:	4630      	mov	r0, r6
 8012eb0:	f000 fa80 	bl	80133b4 <tier4_vehicle_msgs__msg__ActuationCommand__init>
 8012eb4:	4604      	mov	r4, r0
 8012eb6:	b168      	cbz	r0, 8012ed4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x38>
 8012eb8:	4620      	mov	r0, r4
 8012eba:	bd70      	pop	{r4, r5, r6, pc}
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f7ff ffe1 	bl	8012e84 <std_msgs__msg__Header__fini>
 8012ec2:	f105 0018 	add.w	r0, r5, #24
 8012ec6:	f000 fa79 	bl	80133bc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012eca:	4620      	mov	r0, r4
 8012ecc:	bd70      	pop	{r4, r5, r6, pc}
 8012ece:	4604      	mov	r4, r0
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	bd70      	pop	{r4, r5, r6, pc}
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	f7ff ffd5 	bl	8012e84 <std_msgs__msg__Header__fini>
 8012eda:	4630      	mov	r0, r6
 8012edc:	f000 fa6e 	bl	80133bc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012ee0:	e7ea      	b.n	8012eb8 <tier4_vehicle_msgs__msg__ActuationCommandStamped__init+0x1c>
 8012ee2:	bf00      	nop

08012ee4 <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini>:
 8012ee4:	b148      	cbz	r0, 8012efa <tier4_vehicle_msgs__msg__ActuationCommandStamped__fini+0x16>
 8012ee6:	b510      	push	{r4, lr}
 8012ee8:	4604      	mov	r4, r0
 8012eea:	f7ff ffcb 	bl	8012e84 <std_msgs__msg__Header__fini>
 8012eee:	f104 0018 	add.w	r0, r4, #24
 8012ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ef6:	f000 ba61 	b.w	80133bc <tier4_vehicle_msgs__msg__ActuationCommand__fini>
 8012efa:	4770      	bx	lr

08012efc <tier4_vehicle_msgs__msg__ActuationStatusStamped__init>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	4605      	mov	r5, r0
 8012f00:	b1a8      	cbz	r0, 8012f2e <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x32>
 8012f02:	f7ff ff9b 	bl	8012e3c <std_msgs__msg__Header__init>
 8012f06:	4604      	mov	r4, r0
 8012f08:	b140      	cbz	r0, 8012f1c <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x20>
 8012f0a:	f105 0618 	add.w	r6, r5, #24
 8012f0e:	4630      	mov	r0, r6
 8012f10:	f000 fa56 	bl	80133c0 <tier4_vehicle_msgs__msg__ActuationStatus__init>
 8012f14:	4604      	mov	r4, r0
 8012f16:	b168      	cbz	r0, 8012f34 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x38>
 8012f18:	4620      	mov	r0, r4
 8012f1a:	bd70      	pop	{r4, r5, r6, pc}
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	f7ff ffb1 	bl	8012e84 <std_msgs__msg__Header__fini>
 8012f22:	f105 0018 	add.w	r0, r5, #24
 8012f26:	f000 fa4f 	bl	80133c8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	bd70      	pop	{r4, r5, r6, pc}
 8012f2e:	4604      	mov	r4, r0
 8012f30:	4620      	mov	r0, r4
 8012f32:	bd70      	pop	{r4, r5, r6, pc}
 8012f34:	4628      	mov	r0, r5
 8012f36:	f7ff ffa5 	bl	8012e84 <std_msgs__msg__Header__fini>
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f000 fa44 	bl	80133c8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012f40:	e7ea      	b.n	8012f18 <tier4_vehicle_msgs__msg__ActuationStatusStamped__init+0x1c>
 8012f42:	bf00      	nop

08012f44 <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini>:
 8012f44:	b148      	cbz	r0, 8012f5a <tier4_vehicle_msgs__msg__ActuationStatusStamped__fini+0x16>
 8012f46:	b510      	push	{r4, lr}
 8012f48:	4604      	mov	r4, r0
 8012f4a:	f7ff ff9b 	bl	8012e84 <std_msgs__msg__Header__fini>
 8012f4e:	f104 0018 	add.w	r0, r4, #24
 8012f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f56:	f000 ba37 	b.w	80133c8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>
 8012f5a:	4770      	bx	lr

08012f5c <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init>:
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	4604      	mov	r4, r0
 8012f60:	b128      	cbz	r0, 8012f6e <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x12>
 8012f62:	f7ff ff39 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012f66:	4605      	mov	r5, r0
 8012f68:	b120      	cbz	r0, 8012f74 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__init+0x18>
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	bd38      	pop	{r3, r4, r5, pc}
 8012f6e:	4605      	mov	r5, r0
 8012f70:	4628      	mov	r0, r5
 8012f72:	bd38      	pop	{r3, r4, r5, pc}
 8012f74:	4620      	mov	r0, r4
 8012f76:	f7ff ff33 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	bd38      	pop	{r3, r4, r5, pc}
 8012f7e:	bf00      	nop

08012f80 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini>:
 8012f80:	b108      	cbz	r0, 8012f86 <tier4_vehicle_msgs__msg__SteeringWheelStatusStamped__fini+0x6>
 8012f82:	f7ff bf2d 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012f86:	4770      	bx	lr

08012f88 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	b128      	cbz	r0, 8012f9a <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x12>
 8012f8e:	f7ff ff23 	bl	8012dd8 <builtin_interfaces__msg__Time__init>
 8012f92:	4605      	mov	r5, r0
 8012f94:	b120      	cbz	r0, 8012fa0 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__init+0x18>
 8012f96:	4628      	mov	r0, r5
 8012f98:	bd38      	pop	{r3, r4, r5, pc}
 8012f9a:	4605      	mov	r5, r0
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	bd38      	pop	{r3, r4, r5, pc}
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f7ff ff1d 	bl	8012de0 <builtin_interfaces__msg__Time__fini>
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	bd38      	pop	{r3, r4, r5, pc}
 8012faa:	bf00      	nop

08012fac <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini>:
 8012fac:	b108      	cbz	r0, 8012fb2 <tier4_vehicle_msgs__msg__VehicleEmergencyStamped__fini+0x6>
 8012fae:	f7ff bf17 	b.w	8012de0 <builtin_interfaces__msg__Time__fini>
 8012fb2:	4770      	bx	lr

08012fb4 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_init_function>:
 8012fb4:	f000 b9fe 	b.w	80133b4 <tier4_vehicle_msgs__msg__ActuationCommand__init>

08012fb8 <tier4_vehicle_msgs__msg__ActuationCommand__rosidl_typesupport_introspection_c__ActuationCommand_fini_function>:
 8012fb8:	f000 ba00 	b.w	80133bc <tier4_vehicle_msgs__msg__ActuationCommand__fini>

08012fbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 8012fbc:	4b04      	ldr	r3, [pc, #16]	@ (8012fd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	b10a      	cbz	r2, 8012fc6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0xa>
 8012fc2:	4803      	ldr	r0, [pc, #12]	@ (8012fd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8012fc4:	4770      	bx	lr
 8012fc6:	4a03      	ldr	r2, [pc, #12]	@ (8012fd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x18>)
 8012fc8:	4801      	ldr	r0, [pc, #4]	@ (8012fd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x14>)
 8012fca:	6812      	ldr	r2, [r2, #0]
 8012fcc:	601a      	str	r2, [r3, #0]
 8012fce:	4770      	bx	lr
 8012fd0:	24001274 	.word	0x24001274
 8012fd4:	24000e10 	.word	0x24000e10

08012fd8 <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_init_function>:
 8012fd8:	f000 b9f2 	b.w	80133c0 <tier4_vehicle_msgs__msg__ActuationStatus__init>

08012fdc <tier4_vehicle_msgs__msg__ActuationStatus__rosidl_typesupport_introspection_c__ActuationStatus_fini_function>:
 8012fdc:	f000 b9f4 	b.w	80133c8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>

08012fe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8012fe0:	4b04      	ldr	r3, [pc, #16]	@ (8012ff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	b10a      	cbz	r2, 8012fea <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0xa>
 8012fe6:	4803      	ldr	r0, [pc, #12]	@ (8012ff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8012fe8:	4770      	bx	lr
 8012fea:	4a03      	ldr	r2, [pc, #12]	@ (8012ff8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x18>)
 8012fec:	4801      	ldr	r0, [pc, #4]	@ (8012ff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x14>)
 8012fee:	6812      	ldr	r2, [r2, #0]
 8012ff0:	601a      	str	r2, [r3, #0]
 8012ff2:	4770      	bx	lr
 8012ff4:	24001334 	.word	0x24001334
 8012ff8:	24000e10 	.word	0x24000e10

08012ffc <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 8012ffc:	b1b8      	cbz	r0, 801302e <get_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand+0x32>
 8012ffe:	b538      	push	{r3, r4, r5, lr}
 8013000:	460d      	mov	r5, r1
 8013002:	2108      	movs	r1, #8
 8013004:	4628      	mov	r0, r5
 8013006:	f7ff f971 	bl	80122ec <ucdr_alignment>
 801300a:	f105 0308 	add.w	r3, r5, #8
 801300e:	2108      	movs	r1, #8
 8013010:	f1c5 0508 	rsb	r5, r5, #8
 8013014:	181c      	adds	r4, r3, r0
 8013016:	4620      	mov	r0, r4
 8013018:	f7ff f968 	bl	80122ec <ucdr_alignment>
 801301c:	2108      	movs	r1, #8
 801301e:	4408      	add	r0, r1
 8013020:	4404      	add	r4, r0
 8013022:	4620      	mov	r0, r4
 8013024:	f7ff f962 	bl	80122ec <ucdr_alignment>
 8013028:	4428      	add	r0, r5
 801302a:	4420      	add	r0, r4
 801302c:	bd38      	pop	{r3, r4, r5, pc}
 801302e:	4770      	bx	lr

08013030 <_ActuationCommand__cdr_deserialize>:
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	460c      	mov	r4, r1
 8013034:	b171      	cbz	r1, 8013054 <_ActuationCommand__cdr_deserialize+0x24>
 8013036:	4605      	mov	r5, r0
 8013038:	f7ff f86a 	bl	8012110 <ucdr_deserialize_double>
 801303c:	f104 0108 	add.w	r1, r4, #8
 8013040:	4628      	mov	r0, r5
 8013042:	f7ff f865 	bl	8012110 <ucdr_deserialize_double>
 8013046:	f104 0110 	add.w	r1, r4, #16
 801304a:	4628      	mov	r0, r5
 801304c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013050:	f7ff b85e 	b.w	8012110 <ucdr_deserialize_double>
 8013054:	4608      	mov	r0, r1
 8013056:	bd38      	pop	{r3, r4, r5, pc}

08013058 <_ActuationCommand__cdr_serialize>:
 8013058:	b198      	cbz	r0, 8013082 <_ActuationCommand__cdr_serialize+0x2a>
 801305a:	b538      	push	{r3, r4, r5, lr}
 801305c:	460d      	mov	r5, r1
 801305e:	4604      	mov	r4, r0
 8013060:	ed90 0b00 	vldr	d0, [r0]
 8013064:	4608      	mov	r0, r1
 8013066:	f7fe ff83 	bl	8011f70 <ucdr_serialize_double>
 801306a:	4628      	mov	r0, r5
 801306c:	ed94 0b02 	vldr	d0, [r4, #8]
 8013070:	f7fe ff7e 	bl	8011f70 <ucdr_serialize_double>
 8013074:	4628      	mov	r0, r5
 8013076:	ed94 0b04 	vldr	d0, [r4, #16]
 801307a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801307e:	f7fe bf77 	b.w	8011f70 <ucdr_serialize_double>
 8013082:	4770      	bx	lr

08013084 <_ActuationCommand__get_serialized_size>:
 8013084:	b190      	cbz	r0, 80130ac <_ActuationCommand__get_serialized_size+0x28>
 8013086:	2108      	movs	r1, #8
 8013088:	2000      	movs	r0, #0
 801308a:	b510      	push	{r4, lr}
 801308c:	f7ff f92e 	bl	80122ec <ucdr_alignment>
 8013090:	2108      	movs	r1, #8
 8013092:	1844      	adds	r4, r0, r1
 8013094:	4620      	mov	r0, r4
 8013096:	f7ff f929 	bl	80122ec <ucdr_alignment>
 801309a:	2108      	movs	r1, #8
 801309c:	4408      	add	r0, r1
 801309e:	4404      	add	r4, r0
 80130a0:	4620      	mov	r0, r4
 80130a2:	f7ff f923 	bl	80122ec <ucdr_alignment>
 80130a6:	3008      	adds	r0, #8
 80130a8:	4420      	add	r0, r4
 80130aa:	bd10      	pop	{r4, pc}
 80130ac:	4770      	bx	lr
 80130ae:	bf00      	nop

080130b0 <_ActuationCommand__max_serialized_size>:
 80130b0:	b538      	push	{r3, r4, r5, lr}
 80130b2:	2108      	movs	r1, #8
 80130b4:	2000      	movs	r0, #0
 80130b6:	f7ff f919 	bl	80122ec <ucdr_alignment>
 80130ba:	2108      	movs	r1, #8
 80130bc:	1845      	adds	r5, r0, r1
 80130be:	4628      	mov	r0, r5
 80130c0:	f7ff f914 	bl	80122ec <ucdr_alignment>
 80130c4:	2108      	movs	r1, #8
 80130c6:	1844      	adds	r4, r0, r1
 80130c8:	442c      	add	r4, r5
 80130ca:	4620      	mov	r0, r4
 80130cc:	f7ff f90e 	bl	80122ec <ucdr_alignment>
 80130d0:	3008      	adds	r0, #8
 80130d2:	4420      	add	r0, r4
 80130d4:	bd38      	pop	{r3, r4, r5, pc}
 80130d6:	bf00      	nop

080130d8 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationCommand>:
 80130d8:	b570      	push	{r4, r5, r6, lr}
 80130da:	460c      	mov	r4, r1
 80130dc:	2301      	movs	r3, #1
 80130de:	2108      	movs	r1, #8
 80130e0:	f104 0508 	add.w	r5, r4, #8
 80130e4:	7003      	strb	r3, [r0, #0]
 80130e6:	4620      	mov	r0, r4
 80130e8:	f1c4 0408 	rsb	r4, r4, #8
 80130ec:	f7ff f8fe 	bl	80122ec <ucdr_alignment>
 80130f0:	1946      	adds	r6, r0, r5
 80130f2:	2108      	movs	r1, #8
 80130f4:	4630      	mov	r0, r6
 80130f6:	f7ff f8f9 	bl	80122ec <ucdr_alignment>
 80130fa:	2108      	movs	r1, #8
 80130fc:	1845      	adds	r5, r0, r1
 80130fe:	4435      	add	r5, r6
 8013100:	4628      	mov	r0, r5
 8013102:	f7ff f8f3 	bl	80122ec <ucdr_alignment>
 8013106:	4420      	add	r0, r4
 8013108:	4428      	add	r0, r5
 801310a:	bd70      	pop	{r4, r5, r6, pc}

0801310c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand>:
 801310c:	4800      	ldr	r0, [pc, #0]	@ (8013110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationCommand+0x4>)
 801310e:	4770      	bx	lr
 8013110:	24001340 	.word	0x24001340

08013114 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 8013114:	b1b8      	cbz	r0, 8013146 <get_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus+0x32>
 8013116:	b538      	push	{r3, r4, r5, lr}
 8013118:	460d      	mov	r5, r1
 801311a:	2108      	movs	r1, #8
 801311c:	4628      	mov	r0, r5
 801311e:	f7ff f8e5 	bl	80122ec <ucdr_alignment>
 8013122:	f105 0308 	add.w	r3, r5, #8
 8013126:	2108      	movs	r1, #8
 8013128:	f1c5 0508 	rsb	r5, r5, #8
 801312c:	181c      	adds	r4, r3, r0
 801312e:	4620      	mov	r0, r4
 8013130:	f7ff f8dc 	bl	80122ec <ucdr_alignment>
 8013134:	2108      	movs	r1, #8
 8013136:	4408      	add	r0, r1
 8013138:	4404      	add	r4, r0
 801313a:	4620      	mov	r0, r4
 801313c:	f7ff f8d6 	bl	80122ec <ucdr_alignment>
 8013140:	4428      	add	r0, r5
 8013142:	4420      	add	r0, r4
 8013144:	bd38      	pop	{r3, r4, r5, pc}
 8013146:	4770      	bx	lr

08013148 <_ActuationStatus__cdr_deserialize>:
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	460c      	mov	r4, r1
 801314c:	b171      	cbz	r1, 801316c <_ActuationStatus__cdr_deserialize+0x24>
 801314e:	4605      	mov	r5, r0
 8013150:	f7fe ffde 	bl	8012110 <ucdr_deserialize_double>
 8013154:	f104 0108 	add.w	r1, r4, #8
 8013158:	4628      	mov	r0, r5
 801315a:	f7fe ffd9 	bl	8012110 <ucdr_deserialize_double>
 801315e:	f104 0110 	add.w	r1, r4, #16
 8013162:	4628      	mov	r0, r5
 8013164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013168:	f7fe bfd2 	b.w	8012110 <ucdr_deserialize_double>
 801316c:	4608      	mov	r0, r1
 801316e:	bd38      	pop	{r3, r4, r5, pc}

08013170 <_ActuationStatus__cdr_serialize>:
 8013170:	b198      	cbz	r0, 801319a <_ActuationStatus__cdr_serialize+0x2a>
 8013172:	b538      	push	{r3, r4, r5, lr}
 8013174:	460d      	mov	r5, r1
 8013176:	4604      	mov	r4, r0
 8013178:	ed90 0b00 	vldr	d0, [r0]
 801317c:	4608      	mov	r0, r1
 801317e:	f7fe fef7 	bl	8011f70 <ucdr_serialize_double>
 8013182:	4628      	mov	r0, r5
 8013184:	ed94 0b02 	vldr	d0, [r4, #8]
 8013188:	f7fe fef2 	bl	8011f70 <ucdr_serialize_double>
 801318c:	4628      	mov	r0, r5
 801318e:	ed94 0b04 	vldr	d0, [r4, #16]
 8013192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013196:	f7fe beeb 	b.w	8011f70 <ucdr_serialize_double>
 801319a:	4770      	bx	lr

0801319c <_ActuationStatus__get_serialized_size>:
 801319c:	b190      	cbz	r0, 80131c4 <_ActuationStatus__get_serialized_size+0x28>
 801319e:	2108      	movs	r1, #8
 80131a0:	2000      	movs	r0, #0
 80131a2:	b510      	push	{r4, lr}
 80131a4:	f7ff f8a2 	bl	80122ec <ucdr_alignment>
 80131a8:	2108      	movs	r1, #8
 80131aa:	1844      	adds	r4, r0, r1
 80131ac:	4620      	mov	r0, r4
 80131ae:	f7ff f89d 	bl	80122ec <ucdr_alignment>
 80131b2:	2108      	movs	r1, #8
 80131b4:	4408      	add	r0, r1
 80131b6:	4404      	add	r4, r0
 80131b8:	4620      	mov	r0, r4
 80131ba:	f7ff f897 	bl	80122ec <ucdr_alignment>
 80131be:	3008      	adds	r0, #8
 80131c0:	4420      	add	r0, r4
 80131c2:	bd10      	pop	{r4, pc}
 80131c4:	4770      	bx	lr
 80131c6:	bf00      	nop

080131c8 <_ActuationStatus__max_serialized_size>:
 80131c8:	b538      	push	{r3, r4, r5, lr}
 80131ca:	2108      	movs	r1, #8
 80131cc:	2000      	movs	r0, #0
 80131ce:	f7ff f88d 	bl	80122ec <ucdr_alignment>
 80131d2:	2108      	movs	r1, #8
 80131d4:	1845      	adds	r5, r0, r1
 80131d6:	4628      	mov	r0, r5
 80131d8:	f7ff f888 	bl	80122ec <ucdr_alignment>
 80131dc:	2108      	movs	r1, #8
 80131de:	1844      	adds	r4, r0, r1
 80131e0:	442c      	add	r4, r5
 80131e2:	4620      	mov	r0, r4
 80131e4:	f7ff f882 	bl	80122ec <ucdr_alignment>
 80131e8:	3008      	adds	r0, #8
 80131ea:	4420      	add	r0, r4
 80131ec:	bd38      	pop	{r3, r4, r5, pc}
 80131ee:	bf00      	nop

080131f0 <max_serialized_size_tier4_vehicle_msgs__msg__ActuationStatus>:
 80131f0:	b570      	push	{r4, r5, r6, lr}
 80131f2:	460c      	mov	r4, r1
 80131f4:	2301      	movs	r3, #1
 80131f6:	2108      	movs	r1, #8
 80131f8:	f104 0508 	add.w	r5, r4, #8
 80131fc:	7003      	strb	r3, [r0, #0]
 80131fe:	4620      	mov	r0, r4
 8013200:	f1c4 0408 	rsb	r4, r4, #8
 8013204:	f7ff f872 	bl	80122ec <ucdr_alignment>
 8013208:	1946      	adds	r6, r0, r5
 801320a:	2108      	movs	r1, #8
 801320c:	4630      	mov	r0, r6
 801320e:	f7ff f86d 	bl	80122ec <ucdr_alignment>
 8013212:	2108      	movs	r1, #8
 8013214:	1845      	adds	r5, r0, r1
 8013216:	4435      	add	r5, r6
 8013218:	4628      	mov	r0, r5
 801321a:	f7ff f867 	bl	80122ec <ucdr_alignment>
 801321e:	4420      	add	r0, r4
 8013220:	4428      	add	r0, r5
 8013222:	bd70      	pop	{r4, r5, r6, pc}

08013224 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus>:
 8013224:	4800      	ldr	r0, [pc, #0]	@ (8013228 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__tier4_vehicle_msgs__msg__ActuationStatus+0x4>)
 8013226:	4770      	bx	lr
 8013228:	24001368 	.word	0x24001368

0801322c <ucdr_serialize_endian_array_char>:
 801322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013230:	4619      	mov	r1, r3
 8013232:	461f      	mov	r7, r3
 8013234:	4605      	mov	r5, r0
 8013236:	4690      	mov	r8, r2
 8013238:	f7ff f830 	bl	801229c <ucdr_check_buffer_available_for>
 801323c:	b9e0      	cbnz	r0, 8013278 <ucdr_serialize_endian_array_char+0x4c>
 801323e:	463e      	mov	r6, r7
 8013240:	e00b      	b.n	801325a <ucdr_serialize_endian_array_char+0x2e>
 8013242:	4441      	add	r1, r8
 8013244:	68a8      	ldr	r0, [r5, #8]
 8013246:	4622      	mov	r2, r4
 8013248:	1b36      	subs	r6, r6, r4
 801324a:	f000 fcb6 	bl	8013bba <memcpy>
 801324e:	68ab      	ldr	r3, [r5, #8]
 8013250:	6928      	ldr	r0, [r5, #16]
 8013252:	4423      	add	r3, r4
 8013254:	4420      	add	r0, r4
 8013256:	60ab      	str	r3, [r5, #8]
 8013258:	6128      	str	r0, [r5, #16]
 801325a:	4631      	mov	r1, r6
 801325c:	2201      	movs	r2, #1
 801325e:	4628      	mov	r0, r5
 8013260:	f7ff f872 	bl	8012348 <ucdr_check_final_buffer_behavior_array>
 8013264:	1bb9      	subs	r1, r7, r6
 8013266:	4604      	mov	r4, r0
 8013268:	2800      	cmp	r0, #0
 801326a:	d1ea      	bne.n	8013242 <ucdr_serialize_endian_array_char+0x16>
 801326c:	2301      	movs	r3, #1
 801326e:	7da8      	ldrb	r0, [r5, #22]
 8013270:	756b      	strb	r3, [r5, #21]
 8013272:	4058      	eors	r0, r3
 8013274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013278:	463a      	mov	r2, r7
 801327a:	4641      	mov	r1, r8
 801327c:	68a8      	ldr	r0, [r5, #8]
 801327e:	f000 fc9c 	bl	8013bba <memcpy>
 8013282:	68aa      	ldr	r2, [r5, #8]
 8013284:	692b      	ldr	r3, [r5, #16]
 8013286:	443a      	add	r2, r7
 8013288:	443b      	add	r3, r7
 801328a:	60aa      	str	r2, [r5, #8]
 801328c:	612b      	str	r3, [r5, #16]
 801328e:	e7ed      	b.n	801326c <ucdr_serialize_endian_array_char+0x40>

08013290 <ucdr_deserialize_endian_array_char>:
 8013290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013294:	4619      	mov	r1, r3
 8013296:	461f      	mov	r7, r3
 8013298:	4605      	mov	r5, r0
 801329a:	4690      	mov	r8, r2
 801329c:	f7fe fffe 	bl	801229c <ucdr_check_buffer_available_for>
 80132a0:	b9e8      	cbnz	r0, 80132de <ucdr_deserialize_endian_array_char+0x4e>
 80132a2:	463e      	mov	r6, r7
 80132a4:	e00c      	b.n	80132c0 <ucdr_deserialize_endian_array_char+0x30>
 80132a6:	eb08 0003 	add.w	r0, r8, r3
 80132aa:	68a9      	ldr	r1, [r5, #8]
 80132ac:	4622      	mov	r2, r4
 80132ae:	1b36      	subs	r6, r6, r4
 80132b0:	f000 fc83 	bl	8013bba <memcpy>
 80132b4:	68ab      	ldr	r3, [r5, #8]
 80132b6:	6928      	ldr	r0, [r5, #16]
 80132b8:	4423      	add	r3, r4
 80132ba:	4420      	add	r0, r4
 80132bc:	60ab      	str	r3, [r5, #8]
 80132be:	6128      	str	r0, [r5, #16]
 80132c0:	4631      	mov	r1, r6
 80132c2:	2201      	movs	r2, #1
 80132c4:	4628      	mov	r0, r5
 80132c6:	f7ff f83f 	bl	8012348 <ucdr_check_final_buffer_behavior_array>
 80132ca:	1bbb      	subs	r3, r7, r6
 80132cc:	4604      	mov	r4, r0
 80132ce:	2800      	cmp	r0, #0
 80132d0:	d1e9      	bne.n	80132a6 <ucdr_deserialize_endian_array_char+0x16>
 80132d2:	2301      	movs	r3, #1
 80132d4:	7da8      	ldrb	r0, [r5, #22]
 80132d6:	756b      	strb	r3, [r5, #21]
 80132d8:	4058      	eors	r0, r3
 80132da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132de:	463a      	mov	r2, r7
 80132e0:	68a9      	ldr	r1, [r5, #8]
 80132e2:	4640      	mov	r0, r8
 80132e4:	f000 fc69 	bl	8013bba <memcpy>
 80132e8:	68aa      	ldr	r2, [r5, #8]
 80132ea:	692b      	ldr	r3, [r5, #16]
 80132ec:	443a      	add	r2, r7
 80132ee:	443b      	add	r3, r7
 80132f0:	60aa      	str	r2, [r5, #8]
 80132f2:	612b      	str	r3, [r5, #16]
 80132f4:	e7ed      	b.n	80132d2 <ucdr_deserialize_endian_array_char+0x42>
 80132f6:	bf00      	nop

080132f8 <rosidl_runtime_c__String__init>:
 80132f8:	b510      	push	{r4, lr}
 80132fa:	4604      	mov	r4, r0
 80132fc:	b086      	sub	sp, #24
 80132fe:	b170      	cbz	r0, 801331e <rosidl_runtime_c__String__init+0x26>
 8013300:	a801      	add	r0, sp, #4
 8013302:	f7ff f867 	bl	80123d4 <rcutils_get_default_allocator>
 8013306:	9b01      	ldr	r3, [sp, #4]
 8013308:	9905      	ldr	r1, [sp, #20]
 801330a:	2001      	movs	r0, #1
 801330c:	4798      	blx	r3
 801330e:	6020      	str	r0, [r4, #0]
 8013310:	b128      	cbz	r0, 801331e <rosidl_runtime_c__String__init+0x26>
 8013312:	2100      	movs	r1, #0
 8013314:	2201      	movs	r2, #1
 8013316:	7001      	strb	r1, [r0, #0]
 8013318:	4610      	mov	r0, r2
 801331a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801331e:	b006      	add	sp, #24
 8013320:	bd10      	pop	{r4, pc}
 8013322:	bf00      	nop

08013324 <rosidl_runtime_c__String__fini>:
 8013324:	b320      	cbz	r0, 8013370 <rosidl_runtime_c__String__fini+0x4c>
 8013326:	6803      	ldr	r3, [r0, #0]
 8013328:	b510      	push	{r4, lr}
 801332a:	4604      	mov	r4, r0
 801332c:	b086      	sub	sp, #24
 801332e:	b173      	cbz	r3, 801334e <rosidl_runtime_c__String__fini+0x2a>
 8013330:	6883      	ldr	r3, [r0, #8]
 8013332:	b1f3      	cbz	r3, 8013372 <rosidl_runtime_c__String__fini+0x4e>
 8013334:	a801      	add	r0, sp, #4
 8013336:	f7ff f84d 	bl	80123d4 <rcutils_get_default_allocator>
 801333a:	9b02      	ldr	r3, [sp, #8]
 801333c:	9905      	ldr	r1, [sp, #20]
 801333e:	6820      	ldr	r0, [r4, #0]
 8013340:	4798      	blx	r3
 8013342:	2300      	movs	r3, #0
 8013344:	e9c4 3300 	strd	r3, r3, [r4]
 8013348:	60a3      	str	r3, [r4, #8]
 801334a:	b006      	add	sp, #24
 801334c:	bd10      	pop	{r4, pc}
 801334e:	6843      	ldr	r3, [r0, #4]
 8013350:	b9db      	cbnz	r3, 801338a <rosidl_runtime_c__String__fini+0x66>
 8013352:	6883      	ldr	r3, [r0, #8]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d0f8      	beq.n	801334a <rosidl_runtime_c__String__fini+0x26>
 8013358:	4b12      	ldr	r3, [pc, #72]	@ (80133a4 <rosidl_runtime_c__String__fini+0x80>)
 801335a:	2251      	movs	r2, #81	@ 0x51
 801335c:	2101      	movs	r1, #1
 801335e:	4812      	ldr	r0, [pc, #72]	@ (80133a8 <rosidl_runtime_c__String__fini+0x84>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	f000 fa62 	bl	801382c <fwrite>
 8013368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801336c:	f000 f84a 	bl	8013404 <exit>
 8013370:	4770      	bx	lr
 8013372:	4b0c      	ldr	r3, [pc, #48]	@ (80133a4 <rosidl_runtime_c__String__fini+0x80>)
 8013374:	224c      	movs	r2, #76	@ 0x4c
 8013376:	2101      	movs	r1, #1
 8013378:	480c      	ldr	r0, [pc, #48]	@ (80133ac <rosidl_runtime_c__String__fini+0x88>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	68db      	ldr	r3, [r3, #12]
 801337e:	f000 fa55 	bl	801382c <fwrite>
 8013382:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013386:	f000 f83d 	bl	8013404 <exit>
 801338a:	4b06      	ldr	r3, [pc, #24]	@ (80133a4 <rosidl_runtime_c__String__fini+0x80>)
 801338c:	224e      	movs	r2, #78	@ 0x4e
 801338e:	2101      	movs	r1, #1
 8013390:	4807      	ldr	r0, [pc, #28]	@ (80133b0 <rosidl_runtime_c__String__fini+0x8c>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	f000 fa49 	bl	801382c <fwrite>
 801339a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801339e:	f000 f831 	bl	8013404 <exit>
 80133a2:	bf00      	nop
 80133a4:	2400139c 	.word	0x2400139c
 80133a8:	080158fc 	.word	0x080158fc
 80133ac:	0801585c 	.word	0x0801585c
 80133b0:	080158ac 	.word	0x080158ac

080133b4 <tier4_vehicle_msgs__msg__ActuationCommand__init>:
 80133b4:	3800      	subs	r0, #0
 80133b6:	bf18      	it	ne
 80133b8:	2001      	movne	r0, #1
 80133ba:	4770      	bx	lr

080133bc <tier4_vehicle_msgs__msg__ActuationCommand__fini>:
 80133bc:	4770      	bx	lr
 80133be:	bf00      	nop

080133c0 <tier4_vehicle_msgs__msg__ActuationStatus__init>:
 80133c0:	3800      	subs	r0, #0
 80133c2:	bf18      	it	ne
 80133c4:	2001      	movne	r0, #1
 80133c6:	4770      	bx	lr

080133c8 <tier4_vehicle_msgs__msg__ActuationStatus__fini>:
 80133c8:	4770      	bx	lr
 80133ca:	bf00      	nop

080133cc <calloc>:
 80133cc:	4b02      	ldr	r3, [pc, #8]	@ (80133d8 <calloc+0xc>)
 80133ce:	460a      	mov	r2, r1
 80133d0:	4601      	mov	r1, r0
 80133d2:	6818      	ldr	r0, [r3, #0]
 80133d4:	f000 b802 	b.w	80133dc <_calloc_r>
 80133d8:	2400139c 	.word	0x2400139c

080133dc <_calloc_r>:
 80133dc:	b570      	push	{r4, r5, r6, lr}
 80133de:	fba1 5402 	umull	r5, r4, r1, r2
 80133e2:	b93c      	cbnz	r4, 80133f4 <_calloc_r+0x18>
 80133e4:	4629      	mov	r1, r5
 80133e6:	f000 f851 	bl	801348c <_malloc_r>
 80133ea:	4606      	mov	r6, r0
 80133ec:	b928      	cbnz	r0, 80133fa <_calloc_r+0x1e>
 80133ee:	2600      	movs	r6, #0
 80133f0:	4630      	mov	r0, r6
 80133f2:	bd70      	pop	{r4, r5, r6, pc}
 80133f4:	220c      	movs	r2, #12
 80133f6:	6002      	str	r2, [r0, #0]
 80133f8:	e7f9      	b.n	80133ee <_calloc_r+0x12>
 80133fa:	462a      	mov	r2, r5
 80133fc:	4621      	mov	r1, r4
 80133fe:	f000 fafb 	bl	80139f8 <memset>
 8013402:	e7f5      	b.n	80133f0 <_calloc_r+0x14>

08013404 <exit>:
 8013404:	b508      	push	{r3, lr}
 8013406:	4b06      	ldr	r3, [pc, #24]	@ (8013420 <exit+0x1c>)
 8013408:	4604      	mov	r4, r0
 801340a:	b113      	cbz	r3, 8013412 <exit+0xe>
 801340c:	2100      	movs	r1, #0
 801340e:	f3af 8000 	nop.w
 8013412:	4b04      	ldr	r3, [pc, #16]	@ (8013424 <exit+0x20>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	b103      	cbz	r3, 801341a <exit+0x16>
 8013418:	4798      	blx	r3
 801341a:	4620      	mov	r0, r4
 801341c:	f7ed ff60 	bl	80012e0 <_exit>
 8013420:	00000000 	.word	0x00000000
 8013424:	24033520 	.word	0x24033520

08013428 <malloc>:
 8013428:	4b02      	ldr	r3, [pc, #8]	@ (8013434 <malloc+0xc>)
 801342a:	4601      	mov	r1, r0
 801342c:	6818      	ldr	r0, [r3, #0]
 801342e:	f000 b82d 	b.w	801348c <_malloc_r>
 8013432:	bf00      	nop
 8013434:	2400139c 	.word	0x2400139c

08013438 <free>:
 8013438:	4b02      	ldr	r3, [pc, #8]	@ (8013444 <free+0xc>)
 801343a:	4601      	mov	r1, r0
 801343c:	6818      	ldr	r0, [r3, #0]
 801343e:	f000 bbcb 	b.w	8013bd8 <_free_r>
 8013442:	bf00      	nop
 8013444:	2400139c 	.word	0x2400139c

08013448 <sbrk_aligned>:
 8013448:	b570      	push	{r4, r5, r6, lr}
 801344a:	4e0f      	ldr	r6, [pc, #60]	@ (8013488 <sbrk_aligned+0x40>)
 801344c:	460c      	mov	r4, r1
 801344e:	6831      	ldr	r1, [r6, #0]
 8013450:	4605      	mov	r5, r0
 8013452:	b911      	cbnz	r1, 801345a <sbrk_aligned+0x12>
 8013454:	f000 fb62 	bl	8013b1c <_sbrk_r>
 8013458:	6030      	str	r0, [r6, #0]
 801345a:	4621      	mov	r1, r4
 801345c:	4628      	mov	r0, r5
 801345e:	f000 fb5d 	bl	8013b1c <_sbrk_r>
 8013462:	1c43      	adds	r3, r0, #1
 8013464:	d103      	bne.n	801346e <sbrk_aligned+0x26>
 8013466:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801346a:	4620      	mov	r0, r4
 801346c:	bd70      	pop	{r4, r5, r6, pc}
 801346e:	1cc4      	adds	r4, r0, #3
 8013470:	f024 0403 	bic.w	r4, r4, #3
 8013474:	42a0      	cmp	r0, r4
 8013476:	d0f8      	beq.n	801346a <sbrk_aligned+0x22>
 8013478:	1a21      	subs	r1, r4, r0
 801347a:	4628      	mov	r0, r5
 801347c:	f000 fb4e 	bl	8013b1c <_sbrk_r>
 8013480:	3001      	adds	r0, #1
 8013482:	d1f2      	bne.n	801346a <sbrk_aligned+0x22>
 8013484:	e7ef      	b.n	8013466 <sbrk_aligned+0x1e>
 8013486:	bf00      	nop
 8013488:	240333e0 	.word	0x240333e0

0801348c <_malloc_r>:
 801348c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013490:	1ccd      	adds	r5, r1, #3
 8013492:	f025 0503 	bic.w	r5, r5, #3
 8013496:	3508      	adds	r5, #8
 8013498:	2d0c      	cmp	r5, #12
 801349a:	bf38      	it	cc
 801349c:	250c      	movcc	r5, #12
 801349e:	2d00      	cmp	r5, #0
 80134a0:	4606      	mov	r6, r0
 80134a2:	db01      	blt.n	80134a8 <_malloc_r+0x1c>
 80134a4:	42a9      	cmp	r1, r5
 80134a6:	d904      	bls.n	80134b2 <_malloc_r+0x26>
 80134a8:	230c      	movs	r3, #12
 80134aa:	6033      	str	r3, [r6, #0]
 80134ac:	2000      	movs	r0, #0
 80134ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013588 <_malloc_r+0xfc>
 80134b6:	f000 f869 	bl	801358c <__malloc_lock>
 80134ba:	f8d8 3000 	ldr.w	r3, [r8]
 80134be:	461c      	mov	r4, r3
 80134c0:	bb44      	cbnz	r4, 8013514 <_malloc_r+0x88>
 80134c2:	4629      	mov	r1, r5
 80134c4:	4630      	mov	r0, r6
 80134c6:	f7ff ffbf 	bl	8013448 <sbrk_aligned>
 80134ca:	1c43      	adds	r3, r0, #1
 80134cc:	4604      	mov	r4, r0
 80134ce:	d158      	bne.n	8013582 <_malloc_r+0xf6>
 80134d0:	f8d8 4000 	ldr.w	r4, [r8]
 80134d4:	4627      	mov	r7, r4
 80134d6:	2f00      	cmp	r7, #0
 80134d8:	d143      	bne.n	8013562 <_malloc_r+0xd6>
 80134da:	2c00      	cmp	r4, #0
 80134dc:	d04b      	beq.n	8013576 <_malloc_r+0xea>
 80134de:	6823      	ldr	r3, [r4, #0]
 80134e0:	4639      	mov	r1, r7
 80134e2:	4630      	mov	r0, r6
 80134e4:	eb04 0903 	add.w	r9, r4, r3
 80134e8:	f000 fb18 	bl	8013b1c <_sbrk_r>
 80134ec:	4581      	cmp	r9, r0
 80134ee:	d142      	bne.n	8013576 <_malloc_r+0xea>
 80134f0:	6821      	ldr	r1, [r4, #0]
 80134f2:	1a6d      	subs	r5, r5, r1
 80134f4:	4629      	mov	r1, r5
 80134f6:	4630      	mov	r0, r6
 80134f8:	f7ff ffa6 	bl	8013448 <sbrk_aligned>
 80134fc:	3001      	adds	r0, #1
 80134fe:	d03a      	beq.n	8013576 <_malloc_r+0xea>
 8013500:	6823      	ldr	r3, [r4, #0]
 8013502:	442b      	add	r3, r5
 8013504:	6023      	str	r3, [r4, #0]
 8013506:	f8d8 3000 	ldr.w	r3, [r8]
 801350a:	685a      	ldr	r2, [r3, #4]
 801350c:	bb62      	cbnz	r2, 8013568 <_malloc_r+0xdc>
 801350e:	f8c8 7000 	str.w	r7, [r8]
 8013512:	e00f      	b.n	8013534 <_malloc_r+0xa8>
 8013514:	6822      	ldr	r2, [r4, #0]
 8013516:	1b52      	subs	r2, r2, r5
 8013518:	d420      	bmi.n	801355c <_malloc_r+0xd0>
 801351a:	2a0b      	cmp	r2, #11
 801351c:	d917      	bls.n	801354e <_malloc_r+0xc2>
 801351e:	1961      	adds	r1, r4, r5
 8013520:	42a3      	cmp	r3, r4
 8013522:	6025      	str	r5, [r4, #0]
 8013524:	bf18      	it	ne
 8013526:	6059      	strne	r1, [r3, #4]
 8013528:	6863      	ldr	r3, [r4, #4]
 801352a:	bf08      	it	eq
 801352c:	f8c8 1000 	streq.w	r1, [r8]
 8013530:	5162      	str	r2, [r4, r5]
 8013532:	604b      	str	r3, [r1, #4]
 8013534:	4630      	mov	r0, r6
 8013536:	f000 f82f 	bl	8013598 <__malloc_unlock>
 801353a:	f104 000b 	add.w	r0, r4, #11
 801353e:	1d23      	adds	r3, r4, #4
 8013540:	f020 0007 	bic.w	r0, r0, #7
 8013544:	1ac2      	subs	r2, r0, r3
 8013546:	bf1c      	itt	ne
 8013548:	1a1b      	subne	r3, r3, r0
 801354a:	50a3      	strne	r3, [r4, r2]
 801354c:	e7af      	b.n	80134ae <_malloc_r+0x22>
 801354e:	6862      	ldr	r2, [r4, #4]
 8013550:	42a3      	cmp	r3, r4
 8013552:	bf0c      	ite	eq
 8013554:	f8c8 2000 	streq.w	r2, [r8]
 8013558:	605a      	strne	r2, [r3, #4]
 801355a:	e7eb      	b.n	8013534 <_malloc_r+0xa8>
 801355c:	4623      	mov	r3, r4
 801355e:	6864      	ldr	r4, [r4, #4]
 8013560:	e7ae      	b.n	80134c0 <_malloc_r+0x34>
 8013562:	463c      	mov	r4, r7
 8013564:	687f      	ldr	r7, [r7, #4]
 8013566:	e7b6      	b.n	80134d6 <_malloc_r+0x4a>
 8013568:	461a      	mov	r2, r3
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	42a3      	cmp	r3, r4
 801356e:	d1fb      	bne.n	8013568 <_malloc_r+0xdc>
 8013570:	2300      	movs	r3, #0
 8013572:	6053      	str	r3, [r2, #4]
 8013574:	e7de      	b.n	8013534 <_malloc_r+0xa8>
 8013576:	230c      	movs	r3, #12
 8013578:	6033      	str	r3, [r6, #0]
 801357a:	4630      	mov	r0, r6
 801357c:	f000 f80c 	bl	8013598 <__malloc_unlock>
 8013580:	e794      	b.n	80134ac <_malloc_r+0x20>
 8013582:	6005      	str	r5, [r0, #0]
 8013584:	e7d6      	b.n	8013534 <_malloc_r+0xa8>
 8013586:	bf00      	nop
 8013588:	240333e4 	.word	0x240333e4

0801358c <__malloc_lock>:
 801358c:	4801      	ldr	r0, [pc, #4]	@ (8013594 <__malloc_lock+0x8>)
 801358e:	f000 bb12 	b.w	8013bb6 <__retarget_lock_acquire_recursive>
 8013592:	bf00      	nop
 8013594:	24033528 	.word	0x24033528

08013598 <__malloc_unlock>:
 8013598:	4801      	ldr	r0, [pc, #4]	@ (80135a0 <__malloc_unlock+0x8>)
 801359a:	f000 bb0d 	b.w	8013bb8 <__retarget_lock_release_recursive>
 801359e:	bf00      	nop
 80135a0:	24033528 	.word	0x24033528

080135a4 <realloc>:
 80135a4:	4b02      	ldr	r3, [pc, #8]	@ (80135b0 <realloc+0xc>)
 80135a6:	460a      	mov	r2, r1
 80135a8:	4601      	mov	r1, r0
 80135aa:	6818      	ldr	r0, [r3, #0]
 80135ac:	f000 b802 	b.w	80135b4 <_realloc_r>
 80135b0:	2400139c 	.word	0x2400139c

080135b4 <_realloc_r>:
 80135b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135b8:	4680      	mov	r8, r0
 80135ba:	4615      	mov	r5, r2
 80135bc:	460c      	mov	r4, r1
 80135be:	b921      	cbnz	r1, 80135ca <_realloc_r+0x16>
 80135c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135c4:	4611      	mov	r1, r2
 80135c6:	f7ff bf61 	b.w	801348c <_malloc_r>
 80135ca:	b92a      	cbnz	r2, 80135d8 <_realloc_r+0x24>
 80135cc:	f000 fb04 	bl	8013bd8 <_free_r>
 80135d0:	2400      	movs	r4, #0
 80135d2:	4620      	mov	r0, r4
 80135d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135d8:	f000 fb48 	bl	8013c6c <_malloc_usable_size_r>
 80135dc:	4285      	cmp	r5, r0
 80135de:	4606      	mov	r6, r0
 80135e0:	d802      	bhi.n	80135e8 <_realloc_r+0x34>
 80135e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80135e6:	d8f4      	bhi.n	80135d2 <_realloc_r+0x1e>
 80135e8:	4629      	mov	r1, r5
 80135ea:	4640      	mov	r0, r8
 80135ec:	f7ff ff4e 	bl	801348c <_malloc_r>
 80135f0:	4607      	mov	r7, r0
 80135f2:	2800      	cmp	r0, #0
 80135f4:	d0ec      	beq.n	80135d0 <_realloc_r+0x1c>
 80135f6:	42b5      	cmp	r5, r6
 80135f8:	462a      	mov	r2, r5
 80135fa:	4621      	mov	r1, r4
 80135fc:	bf28      	it	cs
 80135fe:	4632      	movcs	r2, r6
 8013600:	f000 fadb 	bl	8013bba <memcpy>
 8013604:	4621      	mov	r1, r4
 8013606:	4640      	mov	r0, r8
 8013608:	f000 fae6 	bl	8013bd8 <_free_r>
 801360c:	463c      	mov	r4, r7
 801360e:	e7e0      	b.n	80135d2 <_realloc_r+0x1e>

08013610 <std>:
 8013610:	2300      	movs	r3, #0
 8013612:	b510      	push	{r4, lr}
 8013614:	4604      	mov	r4, r0
 8013616:	e9c0 3300 	strd	r3, r3, [r0]
 801361a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801361e:	6083      	str	r3, [r0, #8]
 8013620:	8181      	strh	r1, [r0, #12]
 8013622:	6643      	str	r3, [r0, #100]	@ 0x64
 8013624:	81c2      	strh	r2, [r0, #14]
 8013626:	6183      	str	r3, [r0, #24]
 8013628:	4619      	mov	r1, r3
 801362a:	2208      	movs	r2, #8
 801362c:	305c      	adds	r0, #92	@ 0x5c
 801362e:	f000 f9e3 	bl	80139f8 <memset>
 8013632:	4b0d      	ldr	r3, [pc, #52]	@ (8013668 <std+0x58>)
 8013634:	6263      	str	r3, [r4, #36]	@ 0x24
 8013636:	4b0d      	ldr	r3, [pc, #52]	@ (801366c <std+0x5c>)
 8013638:	62a3      	str	r3, [r4, #40]	@ 0x28
 801363a:	4b0d      	ldr	r3, [pc, #52]	@ (8013670 <std+0x60>)
 801363c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801363e:	4b0d      	ldr	r3, [pc, #52]	@ (8013674 <std+0x64>)
 8013640:	6323      	str	r3, [r4, #48]	@ 0x30
 8013642:	4b0d      	ldr	r3, [pc, #52]	@ (8013678 <std+0x68>)
 8013644:	6224      	str	r4, [r4, #32]
 8013646:	429c      	cmp	r4, r3
 8013648:	d006      	beq.n	8013658 <std+0x48>
 801364a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801364e:	4294      	cmp	r4, r2
 8013650:	d002      	beq.n	8013658 <std+0x48>
 8013652:	33d0      	adds	r3, #208	@ 0xd0
 8013654:	429c      	cmp	r4, r3
 8013656:	d105      	bne.n	8013664 <std+0x54>
 8013658:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013660:	f000 baa8 	b.w	8013bb4 <__retarget_lock_init_recursive>
 8013664:	bd10      	pop	{r4, pc}
 8013666:	bf00      	nop
 8013668:	08013849 	.word	0x08013849
 801366c:	0801386b 	.word	0x0801386b
 8013670:	080138a3 	.word	0x080138a3
 8013674:	080138c7 	.word	0x080138c7
 8013678:	240333e8 	.word	0x240333e8

0801367c <stdio_exit_handler>:
 801367c:	4a02      	ldr	r2, [pc, #8]	@ (8013688 <stdio_exit_handler+0xc>)
 801367e:	4903      	ldr	r1, [pc, #12]	@ (801368c <stdio_exit_handler+0x10>)
 8013680:	4803      	ldr	r0, [pc, #12]	@ (8013690 <stdio_exit_handler+0x14>)
 8013682:	f000 b869 	b.w	8013758 <_fwalk_sglue>
 8013686:	bf00      	nop
 8013688:	24001390 	.word	0x24001390
 801368c:	08013d85 	.word	0x08013d85
 8013690:	240013a0 	.word	0x240013a0

08013694 <cleanup_stdio>:
 8013694:	6841      	ldr	r1, [r0, #4]
 8013696:	4b0c      	ldr	r3, [pc, #48]	@ (80136c8 <cleanup_stdio+0x34>)
 8013698:	4299      	cmp	r1, r3
 801369a:	b510      	push	{r4, lr}
 801369c:	4604      	mov	r4, r0
 801369e:	d001      	beq.n	80136a4 <cleanup_stdio+0x10>
 80136a0:	f000 fb70 	bl	8013d84 <_fflush_r>
 80136a4:	68a1      	ldr	r1, [r4, #8]
 80136a6:	4b09      	ldr	r3, [pc, #36]	@ (80136cc <cleanup_stdio+0x38>)
 80136a8:	4299      	cmp	r1, r3
 80136aa:	d002      	beq.n	80136b2 <cleanup_stdio+0x1e>
 80136ac:	4620      	mov	r0, r4
 80136ae:	f000 fb69 	bl	8013d84 <_fflush_r>
 80136b2:	68e1      	ldr	r1, [r4, #12]
 80136b4:	4b06      	ldr	r3, [pc, #24]	@ (80136d0 <cleanup_stdio+0x3c>)
 80136b6:	4299      	cmp	r1, r3
 80136b8:	d004      	beq.n	80136c4 <cleanup_stdio+0x30>
 80136ba:	4620      	mov	r0, r4
 80136bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136c0:	f000 bb60 	b.w	8013d84 <_fflush_r>
 80136c4:	bd10      	pop	{r4, pc}
 80136c6:	bf00      	nop
 80136c8:	240333e8 	.word	0x240333e8
 80136cc:	24033450 	.word	0x24033450
 80136d0:	240334b8 	.word	0x240334b8

080136d4 <global_stdio_init.part.0>:
 80136d4:	b510      	push	{r4, lr}
 80136d6:	4b0b      	ldr	r3, [pc, #44]	@ (8013704 <global_stdio_init.part.0+0x30>)
 80136d8:	4c0b      	ldr	r4, [pc, #44]	@ (8013708 <global_stdio_init.part.0+0x34>)
 80136da:	4a0c      	ldr	r2, [pc, #48]	@ (801370c <global_stdio_init.part.0+0x38>)
 80136dc:	601a      	str	r2, [r3, #0]
 80136de:	4620      	mov	r0, r4
 80136e0:	2200      	movs	r2, #0
 80136e2:	2104      	movs	r1, #4
 80136e4:	f7ff ff94 	bl	8013610 <std>
 80136e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80136ec:	2201      	movs	r2, #1
 80136ee:	2109      	movs	r1, #9
 80136f0:	f7ff ff8e 	bl	8013610 <std>
 80136f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80136f8:	2202      	movs	r2, #2
 80136fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136fe:	2112      	movs	r1, #18
 8013700:	f7ff bf86 	b.w	8013610 <std>
 8013704:	24033520 	.word	0x24033520
 8013708:	240333e8 	.word	0x240333e8
 801370c:	0801367d 	.word	0x0801367d

08013710 <__sfp_lock_acquire>:
 8013710:	4801      	ldr	r0, [pc, #4]	@ (8013718 <__sfp_lock_acquire+0x8>)
 8013712:	f000 ba50 	b.w	8013bb6 <__retarget_lock_acquire_recursive>
 8013716:	bf00      	nop
 8013718:	24033529 	.word	0x24033529

0801371c <__sfp_lock_release>:
 801371c:	4801      	ldr	r0, [pc, #4]	@ (8013724 <__sfp_lock_release+0x8>)
 801371e:	f000 ba4b 	b.w	8013bb8 <__retarget_lock_release_recursive>
 8013722:	bf00      	nop
 8013724:	24033529 	.word	0x24033529

08013728 <__sinit>:
 8013728:	b510      	push	{r4, lr}
 801372a:	4604      	mov	r4, r0
 801372c:	f7ff fff0 	bl	8013710 <__sfp_lock_acquire>
 8013730:	6a23      	ldr	r3, [r4, #32]
 8013732:	b11b      	cbz	r3, 801373c <__sinit+0x14>
 8013734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013738:	f7ff bff0 	b.w	801371c <__sfp_lock_release>
 801373c:	4b04      	ldr	r3, [pc, #16]	@ (8013750 <__sinit+0x28>)
 801373e:	6223      	str	r3, [r4, #32]
 8013740:	4b04      	ldr	r3, [pc, #16]	@ (8013754 <__sinit+0x2c>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d1f5      	bne.n	8013734 <__sinit+0xc>
 8013748:	f7ff ffc4 	bl	80136d4 <global_stdio_init.part.0>
 801374c:	e7f2      	b.n	8013734 <__sinit+0xc>
 801374e:	bf00      	nop
 8013750:	08013695 	.word	0x08013695
 8013754:	24033520 	.word	0x24033520

08013758 <_fwalk_sglue>:
 8013758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801375c:	4607      	mov	r7, r0
 801375e:	4688      	mov	r8, r1
 8013760:	4614      	mov	r4, r2
 8013762:	2600      	movs	r6, #0
 8013764:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013768:	f1b9 0901 	subs.w	r9, r9, #1
 801376c:	d505      	bpl.n	801377a <_fwalk_sglue+0x22>
 801376e:	6824      	ldr	r4, [r4, #0]
 8013770:	2c00      	cmp	r4, #0
 8013772:	d1f7      	bne.n	8013764 <_fwalk_sglue+0xc>
 8013774:	4630      	mov	r0, r6
 8013776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801377a:	89ab      	ldrh	r3, [r5, #12]
 801377c:	2b01      	cmp	r3, #1
 801377e:	d907      	bls.n	8013790 <_fwalk_sglue+0x38>
 8013780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013784:	3301      	adds	r3, #1
 8013786:	d003      	beq.n	8013790 <_fwalk_sglue+0x38>
 8013788:	4629      	mov	r1, r5
 801378a:	4638      	mov	r0, r7
 801378c:	47c0      	blx	r8
 801378e:	4306      	orrs	r6, r0
 8013790:	3568      	adds	r5, #104	@ 0x68
 8013792:	e7e9      	b.n	8013768 <_fwalk_sglue+0x10>

08013794 <_fwrite_r>:
 8013794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013798:	9c08      	ldr	r4, [sp, #32]
 801379a:	468a      	mov	sl, r1
 801379c:	4690      	mov	r8, r2
 801379e:	fb02 f903 	mul.w	r9, r2, r3
 80137a2:	4606      	mov	r6, r0
 80137a4:	b118      	cbz	r0, 80137ae <_fwrite_r+0x1a>
 80137a6:	6a03      	ldr	r3, [r0, #32]
 80137a8:	b90b      	cbnz	r3, 80137ae <_fwrite_r+0x1a>
 80137aa:	f7ff ffbd 	bl	8013728 <__sinit>
 80137ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80137b0:	07dd      	lsls	r5, r3, #31
 80137b2:	d405      	bmi.n	80137c0 <_fwrite_r+0x2c>
 80137b4:	89a3      	ldrh	r3, [r4, #12]
 80137b6:	0598      	lsls	r0, r3, #22
 80137b8:	d402      	bmi.n	80137c0 <_fwrite_r+0x2c>
 80137ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137bc:	f000 f9fb 	bl	8013bb6 <__retarget_lock_acquire_recursive>
 80137c0:	89a3      	ldrh	r3, [r4, #12]
 80137c2:	0719      	lsls	r1, r3, #28
 80137c4:	d516      	bpl.n	80137f4 <_fwrite_r+0x60>
 80137c6:	6923      	ldr	r3, [r4, #16]
 80137c8:	b1a3      	cbz	r3, 80137f4 <_fwrite_r+0x60>
 80137ca:	2500      	movs	r5, #0
 80137cc:	454d      	cmp	r5, r9
 80137ce:	d01f      	beq.n	8013810 <_fwrite_r+0x7c>
 80137d0:	68a7      	ldr	r7, [r4, #8]
 80137d2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80137d6:	3f01      	subs	r7, #1
 80137d8:	2f00      	cmp	r7, #0
 80137da:	60a7      	str	r7, [r4, #8]
 80137dc:	da04      	bge.n	80137e8 <_fwrite_r+0x54>
 80137de:	69a3      	ldr	r3, [r4, #24]
 80137e0:	429f      	cmp	r7, r3
 80137e2:	db0f      	blt.n	8013804 <_fwrite_r+0x70>
 80137e4:	290a      	cmp	r1, #10
 80137e6:	d00d      	beq.n	8013804 <_fwrite_r+0x70>
 80137e8:	6823      	ldr	r3, [r4, #0]
 80137ea:	1c5a      	adds	r2, r3, #1
 80137ec:	6022      	str	r2, [r4, #0]
 80137ee:	7019      	strb	r1, [r3, #0]
 80137f0:	3501      	adds	r5, #1
 80137f2:	e7eb      	b.n	80137cc <_fwrite_r+0x38>
 80137f4:	4621      	mov	r1, r4
 80137f6:	4630      	mov	r0, r6
 80137f8:	f000 f8a8 	bl	801394c <__swsetup_r>
 80137fc:	2800      	cmp	r0, #0
 80137fe:	d0e4      	beq.n	80137ca <_fwrite_r+0x36>
 8013800:	2500      	movs	r5, #0
 8013802:	e005      	b.n	8013810 <_fwrite_r+0x7c>
 8013804:	4622      	mov	r2, r4
 8013806:	4630      	mov	r0, r6
 8013808:	f000 f861 	bl	80138ce <__swbuf_r>
 801380c:	3001      	adds	r0, #1
 801380e:	d1ef      	bne.n	80137f0 <_fwrite_r+0x5c>
 8013810:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013812:	07da      	lsls	r2, r3, #31
 8013814:	d405      	bmi.n	8013822 <_fwrite_r+0x8e>
 8013816:	89a3      	ldrh	r3, [r4, #12]
 8013818:	059b      	lsls	r3, r3, #22
 801381a:	d402      	bmi.n	8013822 <_fwrite_r+0x8e>
 801381c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801381e:	f000 f9cb 	bl	8013bb8 <__retarget_lock_release_recursive>
 8013822:	fbb5 f0f8 	udiv	r0, r5, r8
 8013826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801382c <fwrite>:
 801382c:	b507      	push	{r0, r1, r2, lr}
 801382e:	9300      	str	r3, [sp, #0]
 8013830:	4613      	mov	r3, r2
 8013832:	460a      	mov	r2, r1
 8013834:	4601      	mov	r1, r0
 8013836:	4803      	ldr	r0, [pc, #12]	@ (8013844 <fwrite+0x18>)
 8013838:	6800      	ldr	r0, [r0, #0]
 801383a:	f7ff ffab 	bl	8013794 <_fwrite_r>
 801383e:	b003      	add	sp, #12
 8013840:	f85d fb04 	ldr.w	pc, [sp], #4
 8013844:	2400139c 	.word	0x2400139c

08013848 <__sread>:
 8013848:	b510      	push	{r4, lr}
 801384a:	460c      	mov	r4, r1
 801384c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013850:	f000 f952 	bl	8013af8 <_read_r>
 8013854:	2800      	cmp	r0, #0
 8013856:	bfab      	itete	ge
 8013858:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801385a:	89a3      	ldrhlt	r3, [r4, #12]
 801385c:	181b      	addge	r3, r3, r0
 801385e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013862:	bfac      	ite	ge
 8013864:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013866:	81a3      	strhlt	r3, [r4, #12]
 8013868:	bd10      	pop	{r4, pc}

0801386a <__swrite>:
 801386a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801386e:	461f      	mov	r7, r3
 8013870:	898b      	ldrh	r3, [r1, #12]
 8013872:	05db      	lsls	r3, r3, #23
 8013874:	4605      	mov	r5, r0
 8013876:	460c      	mov	r4, r1
 8013878:	4616      	mov	r6, r2
 801387a:	d505      	bpl.n	8013888 <__swrite+0x1e>
 801387c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013880:	2302      	movs	r3, #2
 8013882:	2200      	movs	r2, #0
 8013884:	f000 f926 	bl	8013ad4 <_lseek_r>
 8013888:	89a3      	ldrh	r3, [r4, #12]
 801388a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801388e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013892:	81a3      	strh	r3, [r4, #12]
 8013894:	4632      	mov	r2, r6
 8013896:	463b      	mov	r3, r7
 8013898:	4628      	mov	r0, r5
 801389a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801389e:	f000 b94d 	b.w	8013b3c <_write_r>

080138a2 <__sseek>:
 80138a2:	b510      	push	{r4, lr}
 80138a4:	460c      	mov	r4, r1
 80138a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138aa:	f000 f913 	bl	8013ad4 <_lseek_r>
 80138ae:	1c43      	adds	r3, r0, #1
 80138b0:	89a3      	ldrh	r3, [r4, #12]
 80138b2:	bf15      	itete	ne
 80138b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80138b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80138ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80138be:	81a3      	strheq	r3, [r4, #12]
 80138c0:	bf18      	it	ne
 80138c2:	81a3      	strhne	r3, [r4, #12]
 80138c4:	bd10      	pop	{r4, pc}

080138c6 <__sclose>:
 80138c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138ca:	f000 b89d 	b.w	8013a08 <_close_r>

080138ce <__swbuf_r>:
 80138ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138d0:	460e      	mov	r6, r1
 80138d2:	4614      	mov	r4, r2
 80138d4:	4605      	mov	r5, r0
 80138d6:	b118      	cbz	r0, 80138e0 <__swbuf_r+0x12>
 80138d8:	6a03      	ldr	r3, [r0, #32]
 80138da:	b90b      	cbnz	r3, 80138e0 <__swbuf_r+0x12>
 80138dc:	f7ff ff24 	bl	8013728 <__sinit>
 80138e0:	69a3      	ldr	r3, [r4, #24]
 80138e2:	60a3      	str	r3, [r4, #8]
 80138e4:	89a3      	ldrh	r3, [r4, #12]
 80138e6:	071a      	lsls	r2, r3, #28
 80138e8:	d501      	bpl.n	80138ee <__swbuf_r+0x20>
 80138ea:	6923      	ldr	r3, [r4, #16]
 80138ec:	b943      	cbnz	r3, 8013900 <__swbuf_r+0x32>
 80138ee:	4621      	mov	r1, r4
 80138f0:	4628      	mov	r0, r5
 80138f2:	f000 f82b 	bl	801394c <__swsetup_r>
 80138f6:	b118      	cbz	r0, 8013900 <__swbuf_r+0x32>
 80138f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80138fc:	4638      	mov	r0, r7
 80138fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013900:	6823      	ldr	r3, [r4, #0]
 8013902:	6922      	ldr	r2, [r4, #16]
 8013904:	1a98      	subs	r0, r3, r2
 8013906:	6963      	ldr	r3, [r4, #20]
 8013908:	b2f6      	uxtb	r6, r6
 801390a:	4283      	cmp	r3, r0
 801390c:	4637      	mov	r7, r6
 801390e:	dc05      	bgt.n	801391c <__swbuf_r+0x4e>
 8013910:	4621      	mov	r1, r4
 8013912:	4628      	mov	r0, r5
 8013914:	f000 fa36 	bl	8013d84 <_fflush_r>
 8013918:	2800      	cmp	r0, #0
 801391a:	d1ed      	bne.n	80138f8 <__swbuf_r+0x2a>
 801391c:	68a3      	ldr	r3, [r4, #8]
 801391e:	3b01      	subs	r3, #1
 8013920:	60a3      	str	r3, [r4, #8]
 8013922:	6823      	ldr	r3, [r4, #0]
 8013924:	1c5a      	adds	r2, r3, #1
 8013926:	6022      	str	r2, [r4, #0]
 8013928:	701e      	strb	r6, [r3, #0]
 801392a:	6962      	ldr	r2, [r4, #20]
 801392c:	1c43      	adds	r3, r0, #1
 801392e:	429a      	cmp	r2, r3
 8013930:	d004      	beq.n	801393c <__swbuf_r+0x6e>
 8013932:	89a3      	ldrh	r3, [r4, #12]
 8013934:	07db      	lsls	r3, r3, #31
 8013936:	d5e1      	bpl.n	80138fc <__swbuf_r+0x2e>
 8013938:	2e0a      	cmp	r6, #10
 801393a:	d1df      	bne.n	80138fc <__swbuf_r+0x2e>
 801393c:	4621      	mov	r1, r4
 801393e:	4628      	mov	r0, r5
 8013940:	f000 fa20 	bl	8013d84 <_fflush_r>
 8013944:	2800      	cmp	r0, #0
 8013946:	d0d9      	beq.n	80138fc <__swbuf_r+0x2e>
 8013948:	e7d6      	b.n	80138f8 <__swbuf_r+0x2a>
	...

0801394c <__swsetup_r>:
 801394c:	b538      	push	{r3, r4, r5, lr}
 801394e:	4b29      	ldr	r3, [pc, #164]	@ (80139f4 <__swsetup_r+0xa8>)
 8013950:	4605      	mov	r5, r0
 8013952:	6818      	ldr	r0, [r3, #0]
 8013954:	460c      	mov	r4, r1
 8013956:	b118      	cbz	r0, 8013960 <__swsetup_r+0x14>
 8013958:	6a03      	ldr	r3, [r0, #32]
 801395a:	b90b      	cbnz	r3, 8013960 <__swsetup_r+0x14>
 801395c:	f7ff fee4 	bl	8013728 <__sinit>
 8013960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013964:	0719      	lsls	r1, r3, #28
 8013966:	d422      	bmi.n	80139ae <__swsetup_r+0x62>
 8013968:	06da      	lsls	r2, r3, #27
 801396a:	d407      	bmi.n	801397c <__swsetup_r+0x30>
 801396c:	2209      	movs	r2, #9
 801396e:	602a      	str	r2, [r5, #0]
 8013970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013974:	81a3      	strh	r3, [r4, #12]
 8013976:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801397a:	e033      	b.n	80139e4 <__swsetup_r+0x98>
 801397c:	0758      	lsls	r0, r3, #29
 801397e:	d512      	bpl.n	80139a6 <__swsetup_r+0x5a>
 8013980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013982:	b141      	cbz	r1, 8013996 <__swsetup_r+0x4a>
 8013984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013988:	4299      	cmp	r1, r3
 801398a:	d002      	beq.n	8013992 <__swsetup_r+0x46>
 801398c:	4628      	mov	r0, r5
 801398e:	f000 f923 	bl	8013bd8 <_free_r>
 8013992:	2300      	movs	r3, #0
 8013994:	6363      	str	r3, [r4, #52]	@ 0x34
 8013996:	89a3      	ldrh	r3, [r4, #12]
 8013998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801399c:	81a3      	strh	r3, [r4, #12]
 801399e:	2300      	movs	r3, #0
 80139a0:	6063      	str	r3, [r4, #4]
 80139a2:	6923      	ldr	r3, [r4, #16]
 80139a4:	6023      	str	r3, [r4, #0]
 80139a6:	89a3      	ldrh	r3, [r4, #12]
 80139a8:	f043 0308 	orr.w	r3, r3, #8
 80139ac:	81a3      	strh	r3, [r4, #12]
 80139ae:	6923      	ldr	r3, [r4, #16]
 80139b0:	b94b      	cbnz	r3, 80139c6 <__swsetup_r+0x7a>
 80139b2:	89a3      	ldrh	r3, [r4, #12]
 80139b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80139b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139bc:	d003      	beq.n	80139c6 <__swsetup_r+0x7a>
 80139be:	4621      	mov	r1, r4
 80139c0:	4628      	mov	r0, r5
 80139c2:	f000 fa2d 	bl	8013e20 <__smakebuf_r>
 80139c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139ca:	f013 0201 	ands.w	r2, r3, #1
 80139ce:	d00a      	beq.n	80139e6 <__swsetup_r+0x9a>
 80139d0:	2200      	movs	r2, #0
 80139d2:	60a2      	str	r2, [r4, #8]
 80139d4:	6962      	ldr	r2, [r4, #20]
 80139d6:	4252      	negs	r2, r2
 80139d8:	61a2      	str	r2, [r4, #24]
 80139da:	6922      	ldr	r2, [r4, #16]
 80139dc:	b942      	cbnz	r2, 80139f0 <__swsetup_r+0xa4>
 80139de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80139e2:	d1c5      	bne.n	8013970 <__swsetup_r+0x24>
 80139e4:	bd38      	pop	{r3, r4, r5, pc}
 80139e6:	0799      	lsls	r1, r3, #30
 80139e8:	bf58      	it	pl
 80139ea:	6962      	ldrpl	r2, [r4, #20]
 80139ec:	60a2      	str	r2, [r4, #8]
 80139ee:	e7f4      	b.n	80139da <__swsetup_r+0x8e>
 80139f0:	2000      	movs	r0, #0
 80139f2:	e7f7      	b.n	80139e4 <__swsetup_r+0x98>
 80139f4:	2400139c 	.word	0x2400139c

080139f8 <memset>:
 80139f8:	4402      	add	r2, r0
 80139fa:	4603      	mov	r3, r0
 80139fc:	4293      	cmp	r3, r2
 80139fe:	d100      	bne.n	8013a02 <memset+0xa>
 8013a00:	4770      	bx	lr
 8013a02:	f803 1b01 	strb.w	r1, [r3], #1
 8013a06:	e7f9      	b.n	80139fc <memset+0x4>

08013a08 <_close_r>:
 8013a08:	b538      	push	{r3, r4, r5, lr}
 8013a0a:	4d06      	ldr	r5, [pc, #24]	@ (8013a24 <_close_r+0x1c>)
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	4604      	mov	r4, r0
 8013a10:	4608      	mov	r0, r1
 8013a12:	602b      	str	r3, [r5, #0]
 8013a14:	f7ed fca8 	bl	8001368 <_close>
 8013a18:	1c43      	adds	r3, r0, #1
 8013a1a:	d102      	bne.n	8013a22 <_close_r+0x1a>
 8013a1c:	682b      	ldr	r3, [r5, #0]
 8013a1e:	b103      	cbz	r3, 8013a22 <_close_r+0x1a>
 8013a20:	6023      	str	r3, [r4, #0]
 8013a22:	bd38      	pop	{r3, r4, r5, pc}
 8013a24:	24033524 	.word	0x24033524

08013a28 <_reclaim_reent>:
 8013a28:	4b29      	ldr	r3, [pc, #164]	@ (8013ad0 <_reclaim_reent+0xa8>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	4283      	cmp	r3, r0
 8013a2e:	b570      	push	{r4, r5, r6, lr}
 8013a30:	4604      	mov	r4, r0
 8013a32:	d04b      	beq.n	8013acc <_reclaim_reent+0xa4>
 8013a34:	69c3      	ldr	r3, [r0, #28]
 8013a36:	b1ab      	cbz	r3, 8013a64 <_reclaim_reent+0x3c>
 8013a38:	68db      	ldr	r3, [r3, #12]
 8013a3a:	b16b      	cbz	r3, 8013a58 <_reclaim_reent+0x30>
 8013a3c:	2500      	movs	r5, #0
 8013a3e:	69e3      	ldr	r3, [r4, #28]
 8013a40:	68db      	ldr	r3, [r3, #12]
 8013a42:	5959      	ldr	r1, [r3, r5]
 8013a44:	2900      	cmp	r1, #0
 8013a46:	d13b      	bne.n	8013ac0 <_reclaim_reent+0x98>
 8013a48:	3504      	adds	r5, #4
 8013a4a:	2d80      	cmp	r5, #128	@ 0x80
 8013a4c:	d1f7      	bne.n	8013a3e <_reclaim_reent+0x16>
 8013a4e:	69e3      	ldr	r3, [r4, #28]
 8013a50:	4620      	mov	r0, r4
 8013a52:	68d9      	ldr	r1, [r3, #12]
 8013a54:	f000 f8c0 	bl	8013bd8 <_free_r>
 8013a58:	69e3      	ldr	r3, [r4, #28]
 8013a5a:	6819      	ldr	r1, [r3, #0]
 8013a5c:	b111      	cbz	r1, 8013a64 <_reclaim_reent+0x3c>
 8013a5e:	4620      	mov	r0, r4
 8013a60:	f000 f8ba 	bl	8013bd8 <_free_r>
 8013a64:	6961      	ldr	r1, [r4, #20]
 8013a66:	b111      	cbz	r1, 8013a6e <_reclaim_reent+0x46>
 8013a68:	4620      	mov	r0, r4
 8013a6a:	f000 f8b5 	bl	8013bd8 <_free_r>
 8013a6e:	69e1      	ldr	r1, [r4, #28]
 8013a70:	b111      	cbz	r1, 8013a78 <_reclaim_reent+0x50>
 8013a72:	4620      	mov	r0, r4
 8013a74:	f000 f8b0 	bl	8013bd8 <_free_r>
 8013a78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013a7a:	b111      	cbz	r1, 8013a82 <_reclaim_reent+0x5a>
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f000 f8ab 	bl	8013bd8 <_free_r>
 8013a82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a84:	b111      	cbz	r1, 8013a8c <_reclaim_reent+0x64>
 8013a86:	4620      	mov	r0, r4
 8013a88:	f000 f8a6 	bl	8013bd8 <_free_r>
 8013a8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013a8e:	b111      	cbz	r1, 8013a96 <_reclaim_reent+0x6e>
 8013a90:	4620      	mov	r0, r4
 8013a92:	f000 f8a1 	bl	8013bd8 <_free_r>
 8013a96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013a98:	b111      	cbz	r1, 8013aa0 <_reclaim_reent+0x78>
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f000 f89c 	bl	8013bd8 <_free_r>
 8013aa0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013aa2:	b111      	cbz	r1, 8013aaa <_reclaim_reent+0x82>
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	f000 f897 	bl	8013bd8 <_free_r>
 8013aaa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013aac:	b111      	cbz	r1, 8013ab4 <_reclaim_reent+0x8c>
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f000 f892 	bl	8013bd8 <_free_r>
 8013ab4:	6a23      	ldr	r3, [r4, #32]
 8013ab6:	b14b      	cbz	r3, 8013acc <_reclaim_reent+0xa4>
 8013ab8:	4620      	mov	r0, r4
 8013aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013abe:	4718      	bx	r3
 8013ac0:	680e      	ldr	r6, [r1, #0]
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	f000 f888 	bl	8013bd8 <_free_r>
 8013ac8:	4631      	mov	r1, r6
 8013aca:	e7bb      	b.n	8013a44 <_reclaim_reent+0x1c>
 8013acc:	bd70      	pop	{r4, r5, r6, pc}
 8013ace:	bf00      	nop
 8013ad0:	2400139c 	.word	0x2400139c

08013ad4 <_lseek_r>:
 8013ad4:	b538      	push	{r3, r4, r5, lr}
 8013ad6:	4d07      	ldr	r5, [pc, #28]	@ (8013af4 <_lseek_r+0x20>)
 8013ad8:	4604      	mov	r4, r0
 8013ada:	4608      	mov	r0, r1
 8013adc:	4611      	mov	r1, r2
 8013ade:	2200      	movs	r2, #0
 8013ae0:	602a      	str	r2, [r5, #0]
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	f7ed fc67 	bl	80013b6 <_lseek>
 8013ae8:	1c43      	adds	r3, r0, #1
 8013aea:	d102      	bne.n	8013af2 <_lseek_r+0x1e>
 8013aec:	682b      	ldr	r3, [r5, #0]
 8013aee:	b103      	cbz	r3, 8013af2 <_lseek_r+0x1e>
 8013af0:	6023      	str	r3, [r4, #0]
 8013af2:	bd38      	pop	{r3, r4, r5, pc}
 8013af4:	24033524 	.word	0x24033524

08013af8 <_read_r>:
 8013af8:	b538      	push	{r3, r4, r5, lr}
 8013afa:	4d07      	ldr	r5, [pc, #28]	@ (8013b18 <_read_r+0x20>)
 8013afc:	4604      	mov	r4, r0
 8013afe:	4608      	mov	r0, r1
 8013b00:	4611      	mov	r1, r2
 8013b02:	2200      	movs	r2, #0
 8013b04:	602a      	str	r2, [r5, #0]
 8013b06:	461a      	mov	r2, r3
 8013b08:	f7ed fbf5 	bl	80012f6 <_read>
 8013b0c:	1c43      	adds	r3, r0, #1
 8013b0e:	d102      	bne.n	8013b16 <_read_r+0x1e>
 8013b10:	682b      	ldr	r3, [r5, #0]
 8013b12:	b103      	cbz	r3, 8013b16 <_read_r+0x1e>
 8013b14:	6023      	str	r3, [r4, #0]
 8013b16:	bd38      	pop	{r3, r4, r5, pc}
 8013b18:	24033524 	.word	0x24033524

08013b1c <_sbrk_r>:
 8013b1c:	b538      	push	{r3, r4, r5, lr}
 8013b1e:	4d06      	ldr	r5, [pc, #24]	@ (8013b38 <_sbrk_r+0x1c>)
 8013b20:	2300      	movs	r3, #0
 8013b22:	4604      	mov	r4, r0
 8013b24:	4608      	mov	r0, r1
 8013b26:	602b      	str	r3, [r5, #0]
 8013b28:	f7ed fc52 	bl	80013d0 <_sbrk>
 8013b2c:	1c43      	adds	r3, r0, #1
 8013b2e:	d102      	bne.n	8013b36 <_sbrk_r+0x1a>
 8013b30:	682b      	ldr	r3, [r5, #0]
 8013b32:	b103      	cbz	r3, 8013b36 <_sbrk_r+0x1a>
 8013b34:	6023      	str	r3, [r4, #0]
 8013b36:	bd38      	pop	{r3, r4, r5, pc}
 8013b38:	24033524 	.word	0x24033524

08013b3c <_write_r>:
 8013b3c:	b538      	push	{r3, r4, r5, lr}
 8013b3e:	4d07      	ldr	r5, [pc, #28]	@ (8013b5c <_write_r+0x20>)
 8013b40:	4604      	mov	r4, r0
 8013b42:	4608      	mov	r0, r1
 8013b44:	4611      	mov	r1, r2
 8013b46:	2200      	movs	r2, #0
 8013b48:	602a      	str	r2, [r5, #0]
 8013b4a:	461a      	mov	r2, r3
 8013b4c:	f7ed fbf0 	bl	8001330 <_write>
 8013b50:	1c43      	adds	r3, r0, #1
 8013b52:	d102      	bne.n	8013b5a <_write_r+0x1e>
 8013b54:	682b      	ldr	r3, [r5, #0]
 8013b56:	b103      	cbz	r3, 8013b5a <_write_r+0x1e>
 8013b58:	6023      	str	r3, [r4, #0]
 8013b5a:	bd38      	pop	{r3, r4, r5, pc}
 8013b5c:	24033524 	.word	0x24033524

08013b60 <__errno>:
 8013b60:	4b01      	ldr	r3, [pc, #4]	@ (8013b68 <__errno+0x8>)
 8013b62:	6818      	ldr	r0, [r3, #0]
 8013b64:	4770      	bx	lr
 8013b66:	bf00      	nop
 8013b68:	2400139c 	.word	0x2400139c

08013b6c <__libc_init_array>:
 8013b6c:	b570      	push	{r4, r5, r6, lr}
 8013b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8013ba4 <__libc_init_array+0x38>)
 8013b70:	4c0d      	ldr	r4, [pc, #52]	@ (8013ba8 <__libc_init_array+0x3c>)
 8013b72:	1b64      	subs	r4, r4, r5
 8013b74:	10a4      	asrs	r4, r4, #2
 8013b76:	2600      	movs	r6, #0
 8013b78:	42a6      	cmp	r6, r4
 8013b7a:	d109      	bne.n	8013b90 <__libc_init_array+0x24>
 8013b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8013bac <__libc_init_array+0x40>)
 8013b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8013bb0 <__libc_init_array+0x44>)
 8013b80:	f000 f9ac 	bl	8013edc <_init>
 8013b84:	1b64      	subs	r4, r4, r5
 8013b86:	10a4      	asrs	r4, r4, #2
 8013b88:	2600      	movs	r6, #0
 8013b8a:	42a6      	cmp	r6, r4
 8013b8c:	d105      	bne.n	8013b9a <__libc_init_array+0x2e>
 8013b8e:	bd70      	pop	{r4, r5, r6, pc}
 8013b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b94:	4798      	blx	r3
 8013b96:	3601      	adds	r6, #1
 8013b98:	e7ee      	b.n	8013b78 <__libc_init_array+0xc>
 8013b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b9e:	4798      	blx	r3
 8013ba0:	3601      	adds	r6, #1
 8013ba2:	e7f2      	b.n	8013b8a <__libc_init_array+0x1e>
 8013ba4:	08015958 	.word	0x08015958
 8013ba8:	08015958 	.word	0x08015958
 8013bac:	08015958 	.word	0x08015958
 8013bb0:	08015998 	.word	0x08015998

08013bb4 <__retarget_lock_init_recursive>:
 8013bb4:	4770      	bx	lr

08013bb6 <__retarget_lock_acquire_recursive>:
 8013bb6:	4770      	bx	lr

08013bb8 <__retarget_lock_release_recursive>:
 8013bb8:	4770      	bx	lr

08013bba <memcpy>:
 8013bba:	440a      	add	r2, r1
 8013bbc:	4291      	cmp	r1, r2
 8013bbe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013bc2:	d100      	bne.n	8013bc6 <memcpy+0xc>
 8013bc4:	4770      	bx	lr
 8013bc6:	b510      	push	{r4, lr}
 8013bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bd0:	4291      	cmp	r1, r2
 8013bd2:	d1f9      	bne.n	8013bc8 <memcpy+0xe>
 8013bd4:	bd10      	pop	{r4, pc}
	...

08013bd8 <_free_r>:
 8013bd8:	b538      	push	{r3, r4, r5, lr}
 8013bda:	4605      	mov	r5, r0
 8013bdc:	2900      	cmp	r1, #0
 8013bde:	d041      	beq.n	8013c64 <_free_r+0x8c>
 8013be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013be4:	1f0c      	subs	r4, r1, #4
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	bfb8      	it	lt
 8013bea:	18e4      	addlt	r4, r4, r3
 8013bec:	f7ff fcce 	bl	801358c <__malloc_lock>
 8013bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8013c68 <_free_r+0x90>)
 8013bf2:	6813      	ldr	r3, [r2, #0]
 8013bf4:	b933      	cbnz	r3, 8013c04 <_free_r+0x2c>
 8013bf6:	6063      	str	r3, [r4, #4]
 8013bf8:	6014      	str	r4, [r2, #0]
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c00:	f7ff bcca 	b.w	8013598 <__malloc_unlock>
 8013c04:	42a3      	cmp	r3, r4
 8013c06:	d908      	bls.n	8013c1a <_free_r+0x42>
 8013c08:	6820      	ldr	r0, [r4, #0]
 8013c0a:	1821      	adds	r1, r4, r0
 8013c0c:	428b      	cmp	r3, r1
 8013c0e:	bf01      	itttt	eq
 8013c10:	6819      	ldreq	r1, [r3, #0]
 8013c12:	685b      	ldreq	r3, [r3, #4]
 8013c14:	1809      	addeq	r1, r1, r0
 8013c16:	6021      	streq	r1, [r4, #0]
 8013c18:	e7ed      	b.n	8013bf6 <_free_r+0x1e>
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	b10b      	cbz	r3, 8013c24 <_free_r+0x4c>
 8013c20:	42a3      	cmp	r3, r4
 8013c22:	d9fa      	bls.n	8013c1a <_free_r+0x42>
 8013c24:	6811      	ldr	r1, [r2, #0]
 8013c26:	1850      	adds	r0, r2, r1
 8013c28:	42a0      	cmp	r0, r4
 8013c2a:	d10b      	bne.n	8013c44 <_free_r+0x6c>
 8013c2c:	6820      	ldr	r0, [r4, #0]
 8013c2e:	4401      	add	r1, r0
 8013c30:	1850      	adds	r0, r2, r1
 8013c32:	4283      	cmp	r3, r0
 8013c34:	6011      	str	r1, [r2, #0]
 8013c36:	d1e0      	bne.n	8013bfa <_free_r+0x22>
 8013c38:	6818      	ldr	r0, [r3, #0]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	6053      	str	r3, [r2, #4]
 8013c3e:	4408      	add	r0, r1
 8013c40:	6010      	str	r0, [r2, #0]
 8013c42:	e7da      	b.n	8013bfa <_free_r+0x22>
 8013c44:	d902      	bls.n	8013c4c <_free_r+0x74>
 8013c46:	230c      	movs	r3, #12
 8013c48:	602b      	str	r3, [r5, #0]
 8013c4a:	e7d6      	b.n	8013bfa <_free_r+0x22>
 8013c4c:	6820      	ldr	r0, [r4, #0]
 8013c4e:	1821      	adds	r1, r4, r0
 8013c50:	428b      	cmp	r3, r1
 8013c52:	bf04      	itt	eq
 8013c54:	6819      	ldreq	r1, [r3, #0]
 8013c56:	685b      	ldreq	r3, [r3, #4]
 8013c58:	6063      	str	r3, [r4, #4]
 8013c5a:	bf04      	itt	eq
 8013c5c:	1809      	addeq	r1, r1, r0
 8013c5e:	6021      	streq	r1, [r4, #0]
 8013c60:	6054      	str	r4, [r2, #4]
 8013c62:	e7ca      	b.n	8013bfa <_free_r+0x22>
 8013c64:	bd38      	pop	{r3, r4, r5, pc}
 8013c66:	bf00      	nop
 8013c68:	240333e4 	.word	0x240333e4

08013c6c <_malloc_usable_size_r>:
 8013c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c70:	1f18      	subs	r0, r3, #4
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	bfbc      	itt	lt
 8013c76:	580b      	ldrlt	r3, [r1, r0]
 8013c78:	18c0      	addlt	r0, r0, r3
 8013c7a:	4770      	bx	lr

08013c7c <__sflush_r>:
 8013c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c84:	0716      	lsls	r6, r2, #28
 8013c86:	4605      	mov	r5, r0
 8013c88:	460c      	mov	r4, r1
 8013c8a:	d454      	bmi.n	8013d36 <__sflush_r+0xba>
 8013c8c:	684b      	ldr	r3, [r1, #4]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	dc02      	bgt.n	8013c98 <__sflush_r+0x1c>
 8013c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	dd48      	ble.n	8013d2a <__sflush_r+0xae>
 8013c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c9a:	2e00      	cmp	r6, #0
 8013c9c:	d045      	beq.n	8013d2a <__sflush_r+0xae>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013ca4:	682f      	ldr	r7, [r5, #0]
 8013ca6:	6a21      	ldr	r1, [r4, #32]
 8013ca8:	602b      	str	r3, [r5, #0]
 8013caa:	d030      	beq.n	8013d0e <__sflush_r+0x92>
 8013cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013cae:	89a3      	ldrh	r3, [r4, #12]
 8013cb0:	0759      	lsls	r1, r3, #29
 8013cb2:	d505      	bpl.n	8013cc0 <__sflush_r+0x44>
 8013cb4:	6863      	ldr	r3, [r4, #4]
 8013cb6:	1ad2      	subs	r2, r2, r3
 8013cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013cba:	b10b      	cbz	r3, 8013cc0 <__sflush_r+0x44>
 8013cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013cbe:	1ad2      	subs	r2, r2, r3
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cc4:	6a21      	ldr	r1, [r4, #32]
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	47b0      	blx	r6
 8013cca:	1c43      	adds	r3, r0, #1
 8013ccc:	89a3      	ldrh	r3, [r4, #12]
 8013cce:	d106      	bne.n	8013cde <__sflush_r+0x62>
 8013cd0:	6829      	ldr	r1, [r5, #0]
 8013cd2:	291d      	cmp	r1, #29
 8013cd4:	d82b      	bhi.n	8013d2e <__sflush_r+0xb2>
 8013cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8013d80 <__sflush_r+0x104>)
 8013cd8:	410a      	asrs	r2, r1
 8013cda:	07d6      	lsls	r6, r2, #31
 8013cdc:	d427      	bmi.n	8013d2e <__sflush_r+0xb2>
 8013cde:	2200      	movs	r2, #0
 8013ce0:	6062      	str	r2, [r4, #4]
 8013ce2:	04d9      	lsls	r1, r3, #19
 8013ce4:	6922      	ldr	r2, [r4, #16]
 8013ce6:	6022      	str	r2, [r4, #0]
 8013ce8:	d504      	bpl.n	8013cf4 <__sflush_r+0x78>
 8013cea:	1c42      	adds	r2, r0, #1
 8013cec:	d101      	bne.n	8013cf2 <__sflush_r+0x76>
 8013cee:	682b      	ldr	r3, [r5, #0]
 8013cf0:	b903      	cbnz	r3, 8013cf4 <__sflush_r+0x78>
 8013cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8013cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013cf6:	602f      	str	r7, [r5, #0]
 8013cf8:	b1b9      	cbz	r1, 8013d2a <__sflush_r+0xae>
 8013cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013cfe:	4299      	cmp	r1, r3
 8013d00:	d002      	beq.n	8013d08 <__sflush_r+0x8c>
 8013d02:	4628      	mov	r0, r5
 8013d04:	f7ff ff68 	bl	8013bd8 <_free_r>
 8013d08:	2300      	movs	r3, #0
 8013d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d0c:	e00d      	b.n	8013d2a <__sflush_r+0xae>
 8013d0e:	2301      	movs	r3, #1
 8013d10:	4628      	mov	r0, r5
 8013d12:	47b0      	blx	r6
 8013d14:	4602      	mov	r2, r0
 8013d16:	1c50      	adds	r0, r2, #1
 8013d18:	d1c9      	bne.n	8013cae <__sflush_r+0x32>
 8013d1a:	682b      	ldr	r3, [r5, #0]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d0c6      	beq.n	8013cae <__sflush_r+0x32>
 8013d20:	2b1d      	cmp	r3, #29
 8013d22:	d001      	beq.n	8013d28 <__sflush_r+0xac>
 8013d24:	2b16      	cmp	r3, #22
 8013d26:	d11e      	bne.n	8013d66 <__sflush_r+0xea>
 8013d28:	602f      	str	r7, [r5, #0]
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	e022      	b.n	8013d74 <__sflush_r+0xf8>
 8013d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d32:	b21b      	sxth	r3, r3
 8013d34:	e01b      	b.n	8013d6e <__sflush_r+0xf2>
 8013d36:	690f      	ldr	r7, [r1, #16]
 8013d38:	2f00      	cmp	r7, #0
 8013d3a:	d0f6      	beq.n	8013d2a <__sflush_r+0xae>
 8013d3c:	0793      	lsls	r3, r2, #30
 8013d3e:	680e      	ldr	r6, [r1, #0]
 8013d40:	bf08      	it	eq
 8013d42:	694b      	ldreq	r3, [r1, #20]
 8013d44:	600f      	str	r7, [r1, #0]
 8013d46:	bf18      	it	ne
 8013d48:	2300      	movne	r3, #0
 8013d4a:	eba6 0807 	sub.w	r8, r6, r7
 8013d4e:	608b      	str	r3, [r1, #8]
 8013d50:	f1b8 0f00 	cmp.w	r8, #0
 8013d54:	dde9      	ble.n	8013d2a <__sflush_r+0xae>
 8013d56:	6a21      	ldr	r1, [r4, #32]
 8013d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013d5a:	4643      	mov	r3, r8
 8013d5c:	463a      	mov	r2, r7
 8013d5e:	4628      	mov	r0, r5
 8013d60:	47b0      	blx	r6
 8013d62:	2800      	cmp	r0, #0
 8013d64:	dc08      	bgt.n	8013d78 <__sflush_r+0xfc>
 8013d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d6e:	81a3      	strh	r3, [r4, #12]
 8013d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d78:	4407      	add	r7, r0
 8013d7a:	eba8 0800 	sub.w	r8, r8, r0
 8013d7e:	e7e7      	b.n	8013d50 <__sflush_r+0xd4>
 8013d80:	dfbffffe 	.word	0xdfbffffe

08013d84 <_fflush_r>:
 8013d84:	b538      	push	{r3, r4, r5, lr}
 8013d86:	690b      	ldr	r3, [r1, #16]
 8013d88:	4605      	mov	r5, r0
 8013d8a:	460c      	mov	r4, r1
 8013d8c:	b913      	cbnz	r3, 8013d94 <_fflush_r+0x10>
 8013d8e:	2500      	movs	r5, #0
 8013d90:	4628      	mov	r0, r5
 8013d92:	bd38      	pop	{r3, r4, r5, pc}
 8013d94:	b118      	cbz	r0, 8013d9e <_fflush_r+0x1a>
 8013d96:	6a03      	ldr	r3, [r0, #32]
 8013d98:	b90b      	cbnz	r3, 8013d9e <_fflush_r+0x1a>
 8013d9a:	f7ff fcc5 	bl	8013728 <__sinit>
 8013d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d0f3      	beq.n	8013d8e <_fflush_r+0xa>
 8013da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013da8:	07d0      	lsls	r0, r2, #31
 8013daa:	d404      	bmi.n	8013db6 <_fflush_r+0x32>
 8013dac:	0599      	lsls	r1, r3, #22
 8013dae:	d402      	bmi.n	8013db6 <_fflush_r+0x32>
 8013db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013db2:	f7ff ff00 	bl	8013bb6 <__retarget_lock_acquire_recursive>
 8013db6:	4628      	mov	r0, r5
 8013db8:	4621      	mov	r1, r4
 8013dba:	f7ff ff5f 	bl	8013c7c <__sflush_r>
 8013dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013dc0:	07da      	lsls	r2, r3, #31
 8013dc2:	4605      	mov	r5, r0
 8013dc4:	d4e4      	bmi.n	8013d90 <_fflush_r+0xc>
 8013dc6:	89a3      	ldrh	r3, [r4, #12]
 8013dc8:	059b      	lsls	r3, r3, #22
 8013dca:	d4e1      	bmi.n	8013d90 <_fflush_r+0xc>
 8013dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013dce:	f7ff fef3 	bl	8013bb8 <__retarget_lock_release_recursive>
 8013dd2:	e7dd      	b.n	8013d90 <_fflush_r+0xc>

08013dd4 <__swhatbuf_r>:
 8013dd4:	b570      	push	{r4, r5, r6, lr}
 8013dd6:	460c      	mov	r4, r1
 8013dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ddc:	2900      	cmp	r1, #0
 8013dde:	b096      	sub	sp, #88	@ 0x58
 8013de0:	4615      	mov	r5, r2
 8013de2:	461e      	mov	r6, r3
 8013de4:	da0d      	bge.n	8013e02 <__swhatbuf_r+0x2e>
 8013de6:	89a3      	ldrh	r3, [r4, #12]
 8013de8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013dec:	f04f 0100 	mov.w	r1, #0
 8013df0:	bf14      	ite	ne
 8013df2:	2340      	movne	r3, #64	@ 0x40
 8013df4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013df8:	2000      	movs	r0, #0
 8013dfa:	6031      	str	r1, [r6, #0]
 8013dfc:	602b      	str	r3, [r5, #0]
 8013dfe:	b016      	add	sp, #88	@ 0x58
 8013e00:	bd70      	pop	{r4, r5, r6, pc}
 8013e02:	466a      	mov	r2, sp
 8013e04:	f000 f848 	bl	8013e98 <_fstat_r>
 8013e08:	2800      	cmp	r0, #0
 8013e0a:	dbec      	blt.n	8013de6 <__swhatbuf_r+0x12>
 8013e0c:	9901      	ldr	r1, [sp, #4]
 8013e0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013e12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013e16:	4259      	negs	r1, r3
 8013e18:	4159      	adcs	r1, r3
 8013e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013e1e:	e7eb      	b.n	8013df8 <__swhatbuf_r+0x24>

08013e20 <__smakebuf_r>:
 8013e20:	898b      	ldrh	r3, [r1, #12]
 8013e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e24:	079d      	lsls	r5, r3, #30
 8013e26:	4606      	mov	r6, r0
 8013e28:	460c      	mov	r4, r1
 8013e2a:	d507      	bpl.n	8013e3c <__smakebuf_r+0x1c>
 8013e2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	6123      	str	r3, [r4, #16]
 8013e34:	2301      	movs	r3, #1
 8013e36:	6163      	str	r3, [r4, #20]
 8013e38:	b003      	add	sp, #12
 8013e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e3c:	ab01      	add	r3, sp, #4
 8013e3e:	466a      	mov	r2, sp
 8013e40:	f7ff ffc8 	bl	8013dd4 <__swhatbuf_r>
 8013e44:	9f00      	ldr	r7, [sp, #0]
 8013e46:	4605      	mov	r5, r0
 8013e48:	4639      	mov	r1, r7
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f7ff fb1e 	bl	801348c <_malloc_r>
 8013e50:	b948      	cbnz	r0, 8013e66 <__smakebuf_r+0x46>
 8013e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e56:	059a      	lsls	r2, r3, #22
 8013e58:	d4ee      	bmi.n	8013e38 <__smakebuf_r+0x18>
 8013e5a:	f023 0303 	bic.w	r3, r3, #3
 8013e5e:	f043 0302 	orr.w	r3, r3, #2
 8013e62:	81a3      	strh	r3, [r4, #12]
 8013e64:	e7e2      	b.n	8013e2c <__smakebuf_r+0xc>
 8013e66:	89a3      	ldrh	r3, [r4, #12]
 8013e68:	6020      	str	r0, [r4, #0]
 8013e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e6e:	81a3      	strh	r3, [r4, #12]
 8013e70:	9b01      	ldr	r3, [sp, #4]
 8013e72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013e76:	b15b      	cbz	r3, 8013e90 <__smakebuf_r+0x70>
 8013e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	f000 f81d 	bl	8013ebc <_isatty_r>
 8013e82:	b128      	cbz	r0, 8013e90 <__smakebuf_r+0x70>
 8013e84:	89a3      	ldrh	r3, [r4, #12]
 8013e86:	f023 0303 	bic.w	r3, r3, #3
 8013e8a:	f043 0301 	orr.w	r3, r3, #1
 8013e8e:	81a3      	strh	r3, [r4, #12]
 8013e90:	89a3      	ldrh	r3, [r4, #12]
 8013e92:	431d      	orrs	r5, r3
 8013e94:	81a5      	strh	r5, [r4, #12]
 8013e96:	e7cf      	b.n	8013e38 <__smakebuf_r+0x18>

08013e98 <_fstat_r>:
 8013e98:	b538      	push	{r3, r4, r5, lr}
 8013e9a:	4d07      	ldr	r5, [pc, #28]	@ (8013eb8 <_fstat_r+0x20>)
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	4604      	mov	r4, r0
 8013ea0:	4608      	mov	r0, r1
 8013ea2:	4611      	mov	r1, r2
 8013ea4:	602b      	str	r3, [r5, #0]
 8013ea6:	f7ed fa6b 	bl	8001380 <_fstat>
 8013eaa:	1c43      	adds	r3, r0, #1
 8013eac:	d102      	bne.n	8013eb4 <_fstat_r+0x1c>
 8013eae:	682b      	ldr	r3, [r5, #0]
 8013eb0:	b103      	cbz	r3, 8013eb4 <_fstat_r+0x1c>
 8013eb2:	6023      	str	r3, [r4, #0]
 8013eb4:	bd38      	pop	{r3, r4, r5, pc}
 8013eb6:	bf00      	nop
 8013eb8:	24033524 	.word	0x24033524

08013ebc <_isatty_r>:
 8013ebc:	b538      	push	{r3, r4, r5, lr}
 8013ebe:	4d06      	ldr	r5, [pc, #24]	@ (8013ed8 <_isatty_r+0x1c>)
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	4608      	mov	r0, r1
 8013ec6:	602b      	str	r3, [r5, #0]
 8013ec8:	f7ed fa6a 	bl	80013a0 <_isatty>
 8013ecc:	1c43      	adds	r3, r0, #1
 8013ece:	d102      	bne.n	8013ed6 <_isatty_r+0x1a>
 8013ed0:	682b      	ldr	r3, [r5, #0]
 8013ed2:	b103      	cbz	r3, 8013ed6 <_isatty_r+0x1a>
 8013ed4:	6023      	str	r3, [r4, #0]
 8013ed6:	bd38      	pop	{r3, r4, r5, pc}
 8013ed8:	24033524 	.word	0x24033524

08013edc <_init>:
 8013edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ede:	bf00      	nop
 8013ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ee2:	bc08      	pop	{r3}
 8013ee4:	469e      	mov	lr, r3
 8013ee6:	4770      	bx	lr

08013ee8 <_fini>:
 8013ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eea:	bf00      	nop
 8013eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eee:	bc08      	pop	{r3}
 8013ef0:	469e      	mov	lr, r3
 8013ef2:	4770      	bx	lr
